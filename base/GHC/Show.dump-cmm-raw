
==================== Raw Cmm ====================
2018-03-16 15:55:15.850773842 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:55:15.85272406 UTC

[section ""data" . GHC.Show.showsPrec_closure" {
     GHC.Show.showsPrec_closure:
         const GHC.Show.showsPrec_info;
 },
 GHC.Show.showsPrec_entry() //  [R2]
         { []
         }
     {offset
       cH75: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cH76; else goto cH77;
       cH76: // global
           R2 = R2;
           R1 = GHC.Show.showsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cH77: // global
           I64[Sp - 8] = block_cH72_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uH7b; else goto cH73;
       uH7b: // global
           call _cH72(R1) args: 0, res: 0, upd: 0;
       cH73: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showsPrec_info" {
     GHC.Show.showsPrec_info:
         const GHC.Show.showsPrec_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cH72() //  [R1]
         { []
         }
     {offset
       cH72: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cH72_info" {
     block_cH72_info:
         const _cH72;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.859583687 UTC

[section ""data" . GHC.Show.show_closure" {
     GHC.Show.show_closure:
         const GHC.Show.show_info;
 },
 GHC.Show.show_entry() //  [R2]
         { []
         }
     {offset
       cH7s: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cH7t; else goto cH7u;
       cH7t: // global
           R2 = R2;
           R1 = GHC.Show.show_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cH7u: // global
           I64[Sp - 8] = block_cH7p_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uH7y; else goto cH7q;
       uH7y: // global
           call _cH7p(R1) args: 0, res: 0, upd: 0;
       cH7q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.show_info" {
     GHC.Show.show_info:
         const GHC.Show.show_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cH7p() //  [R1]
         { []
         }
     {offset
       cH7p: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cH7p_info" {
     block_cH7p_info:
         const _cH7p;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.865231378 UTC

[section ""data" . GHC.Show.showList_closure" {
     GHC.Show.showList_closure:
         const GHC.Show.showList_info;
 },
 GHC.Show.showList_entry() //  [R2]
         { []
         }
     {offset
       cH7P: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cH7Q; else goto cH7R;
       cH7Q: // global
           R2 = R2;
           R1 = GHC.Show.showList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cH7R: // global
           I64[Sp - 8] = block_cH7M_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uH7V; else goto cH7N;
       uH7V: // global
           call _cH7M(R1) args: 0, res: 0, upd: 0;
       cH7N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showList_info" {
     GHC.Show.showList_info:
         const GHC.Show.showList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cH7M() //  [R1]
         { []
         }
     {offset
       cH7M: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cH7M_info" {
     block_cH7M_info:
         const _cH7M;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.87064309 UTC

[section ""cstring" . GHC.Show.showCommaSpace2_bytes" {
     GHC.Show.showCommaSpace2_bytes:
         I8[] [44,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.873032432 UTC

[section ""data" . GHC.Show.showCommaSpace1_closure" {
     GHC.Show.showCommaSpace1_closure:
         const GHC.Show.showCommaSpace1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.showCommaSpace1_entry() //  [R1]
         { []
         }
     {offset
       cH8c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cH8d; else goto cH8e;
       cH8d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cH8e: // global
           (_cH89::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cH89::I64 == 0) goto cH8b; else goto cH8a;
       cH8b: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cH8a: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cH89::I64;
           R2 = GHC.Show.showCommaSpace2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.showCommaSpace1_info" {
     GHC.Show.showCommaSpace1_info:
         const GHC.Show.showCommaSpace1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.87671426 UTC

[section ""data" . GHC.Show.showLitChar13_closure" {
     GHC.Show.showLitChar13_closure:
         const GHC.Types.C#_con_info;
         const 92;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.878927096 UTC

[section ""cstring" . GHC.Show.asciiTab98_bytes" {
     GHC.Show.asciiTab98_bytes:
         I8[] [78,85,76]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.881366852 UTC

[section ""data" . GHC.Show.asciiTab97_closure" {
     GHC.Show.asciiTab97_closure:
         const GHC.Show.asciiTab97_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab97_entry() //  [R1]
         { []
         }
     {offset
       cH8u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cH8v; else goto cH8w;
       cH8v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cH8w: // global
           (_cH8r::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cH8r::I64 == 0) goto cH8t; else goto cH8s;
       cH8t: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cH8s: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cH8r::I64;
           R2 = GHC.Show.asciiTab98_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab97_info" {
     GHC.Show.asciiTab97_info:
         const GHC.Show.asciiTab97_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.884936027 UTC

[section ""cstring" . GHC.Show.asciiTab96_bytes" {
     GHC.Show.asciiTab96_bytes:
         I8[] [83,79,72]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.88732262 UTC

[section ""data" . GHC.Show.asciiTab95_closure" {
     GHC.Show.asciiTab95_closure:
         const GHC.Show.asciiTab95_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab95_entry() //  [R1]
         { []
         }
     {offset
       cH8L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cH8M; else goto cH8N;
       cH8M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cH8N: // global
           (_cH8I::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cH8I::I64 == 0) goto cH8K; else goto cH8J;
       cH8K: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cH8J: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cH8I::I64;
           R2 = GHC.Show.asciiTab96_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab95_info" {
     GHC.Show.asciiTab95_info:
         const GHC.Show.asciiTab95_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.891392131 UTC

[section ""cstring" . GHC.Show.asciiTab94_bytes" {
     GHC.Show.asciiTab94_bytes:
         I8[] [83,84,88]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.89385982 UTC

[section ""data" . GHC.Show.asciiTab93_closure" {
     GHC.Show.asciiTab93_closure:
         const GHC.Show.asciiTab93_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab93_entry() //  [R1]
         { []
         }
     {offset
       cH92: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cH93; else goto cH94;
       cH93: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cH94: // global
           (_cH8Z::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cH8Z::I64 == 0) goto cH91; else goto cH90;
       cH91: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cH90: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cH8Z::I64;
           R2 = GHC.Show.asciiTab94_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab93_info" {
     GHC.Show.asciiTab93_info:
         const GHC.Show.asciiTab93_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.897959026 UTC

[section ""cstring" . GHC.Show.asciiTab92_bytes" {
     GHC.Show.asciiTab92_bytes:
         I8[] [69,84,88]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.900366741 UTC

[section ""data" . GHC.Show.asciiTab91_closure" {
     GHC.Show.asciiTab91_closure:
         const GHC.Show.asciiTab91_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab91_entry() //  [R1]
         { []
         }
     {offset
       cH9j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cH9k; else goto cH9l;
       cH9k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cH9l: // global
           (_cH9g::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cH9g::I64 == 0) goto cH9i; else goto cH9h;
       cH9i: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cH9h: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cH9g::I64;
           R2 = GHC.Show.asciiTab92_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab91_info" {
     GHC.Show.asciiTab91_info:
         const GHC.Show.asciiTab91_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.904688549 UTC

[section ""cstring" . GHC.Show.asciiTab90_bytes" {
     GHC.Show.asciiTab90_bytes:
         I8[] [69,79,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.907245132 UTC

[section ""data" . GHC.Show.asciiTab89_closure" {
     GHC.Show.asciiTab89_closure:
         const GHC.Show.asciiTab89_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab89_entry() //  [R1]
         { []
         }
     {offset
       cH9A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cH9B; else goto cH9C;
       cH9B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cH9C: // global
           (_cH9x::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cH9x::I64 == 0) goto cH9z; else goto cH9y;
       cH9z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cH9y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cH9x::I64;
           R2 = GHC.Show.asciiTab90_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab89_info" {
     GHC.Show.asciiTab89_info:
         const GHC.Show.asciiTab89_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.91150008 UTC

[section ""cstring" . GHC.Show.asciiTab88_bytes" {
     GHC.Show.asciiTab88_bytes:
         I8[] [69,78,81]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.914464122 UTC

[section ""data" . GHC.Show.asciiTab87_closure" {
     GHC.Show.asciiTab87_closure:
         const GHC.Show.asciiTab87_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab87_entry() //  [R1]
         { []
         }
     {offset
       cH9R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cH9S; else goto cH9T;
       cH9S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cH9T: // global
           (_cH9O::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cH9O::I64 == 0) goto cH9Q; else goto cH9P;
       cH9Q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cH9P: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cH9O::I64;
           R2 = GHC.Show.asciiTab88_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab87_info" {
     GHC.Show.asciiTab87_info:
         const GHC.Show.asciiTab87_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.918224985 UTC

[section ""cstring" . GHC.Show.asciiTab86_bytes" {
     GHC.Show.asciiTab86_bytes:
         I8[] [65,67,75]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.920587214 UTC

[section ""data" . GHC.Show.asciiTab85_closure" {
     GHC.Show.asciiTab85_closure:
         const GHC.Show.asciiTab85_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab85_entry() //  [R1]
         { []
         }
     {offset
       cHa8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHa9; else goto cHaa;
       cHa9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHaa: // global
           (_cHa5::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHa5::I64 == 0) goto cHa7; else goto cHa6;
       cHa7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHa6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHa5::I64;
           R2 = GHC.Show.asciiTab86_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab85_info" {
     GHC.Show.asciiTab85_info:
         const GHC.Show.asciiTab85_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.924700536 UTC

[section ""cstring" . GHC.Show.asciiTab84_bytes" {
     GHC.Show.asciiTab84_bytes:
         I8[] [66,69,76]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.927284356 UTC

[section ""data" . GHC.Show.asciiTab83_closure" {
     GHC.Show.asciiTab83_closure:
         const GHC.Show.asciiTab83_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab83_entry() //  [R1]
         { []
         }
     {offset
       cHap: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHaq; else goto cHar;
       cHaq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHar: // global
           (_cHam::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHam::I64 == 0) goto cHao; else goto cHan;
       cHao: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHan: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHam::I64;
           R2 = GHC.Show.asciiTab84_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab83_info" {
     GHC.Show.asciiTab83_info:
         const GHC.Show.asciiTab83_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.930909961 UTC

[section ""cstring" . GHC.Show.asciiTab82_bytes" {
     GHC.Show.asciiTab82_bytes:
         I8[] [66,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.933687685 UTC

[section ""data" . GHC.Show.asciiTab81_closure" {
     GHC.Show.asciiTab81_closure:
         const GHC.Show.asciiTab81_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab81_entry() //  [R1]
         { []
         }
     {offset
       cHaG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHaH; else goto cHaI;
       cHaH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHaI: // global
           (_cHaD::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHaD::I64 == 0) goto cHaF; else goto cHaE;
       cHaF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHaE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHaD::I64;
           R2 = GHC.Show.asciiTab82_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab81_info" {
     GHC.Show.asciiTab81_info:
         const GHC.Show.asciiTab81_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.937701027 UTC

[section ""cstring" . GHC.Show.asciiTab80_bytes" {
     GHC.Show.asciiTab80_bytes:
         I8[] [72,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.940007222 UTC

[section ""data" . GHC.Show.asciiTab79_closure" {
     GHC.Show.asciiTab79_closure:
         const GHC.Show.asciiTab79_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab79_entry() //  [R1]
         { []
         }
     {offset
       cHaX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHaY; else goto cHaZ;
       cHaY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHaZ: // global
           (_cHaU::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHaU::I64 == 0) goto cHaW; else goto cHaV;
       cHaW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHaV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHaU::I64;
           R2 = GHC.Show.asciiTab80_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab79_info" {
     GHC.Show.asciiTab79_info:
         const GHC.Show.asciiTab79_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.943698478 UTC

[section ""cstring" . GHC.Show.asciiTab78_bytes" {
     GHC.Show.asciiTab78_bytes:
         I8[] [76,70]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.946827235 UTC

[section ""data" . GHC.Show.asciiTab77_closure" {
     GHC.Show.asciiTab77_closure:
         const GHC.Show.asciiTab77_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab77_entry() //  [R1]
         { []
         }
     {offset
       cHbe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHbf; else goto cHbg;
       cHbf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHbg: // global
           (_cHbb::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHbb::I64 == 0) goto cHbd; else goto cHbc;
       cHbd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHbc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHbb::I64;
           R2 = GHC.Show.asciiTab78_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab77_info" {
     GHC.Show.asciiTab77_info:
         const GHC.Show.asciiTab77_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.950734914 UTC

[section ""cstring" . GHC.Show.asciiTab76_bytes" {
     GHC.Show.asciiTab76_bytes:
         I8[] [86,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.952980926 UTC

[section ""data" . GHC.Show.asciiTab75_closure" {
     GHC.Show.asciiTab75_closure:
         const GHC.Show.asciiTab75_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab75_entry() //  [R1]
         { []
         }
     {offset
       cHbv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHbw; else goto cHbx;
       cHbw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHbx: // global
           (_cHbs::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHbs::I64 == 0) goto cHbu; else goto cHbt;
       cHbu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHbt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHbs::I64;
           R2 = GHC.Show.asciiTab76_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab75_info" {
     GHC.Show.asciiTab75_info:
         const GHC.Show.asciiTab75_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.956605142 UTC

[section ""cstring" . GHC.Show.asciiTab74_bytes" {
     GHC.Show.asciiTab74_bytes:
         I8[] [70,70]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.959702943 UTC

[section ""data" . GHC.Show.asciiTab73_closure" {
     GHC.Show.asciiTab73_closure:
         const GHC.Show.asciiTab73_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab73_entry() //  [R1]
         { []
         }
     {offset
       cHbM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHbN; else goto cHbO;
       cHbN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHbO: // global
           (_cHbJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHbJ::I64 == 0) goto cHbL; else goto cHbK;
       cHbL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHbK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHbJ::I64;
           R2 = GHC.Show.asciiTab74_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab73_info" {
     GHC.Show.asciiTab73_info:
         const GHC.Show.asciiTab73_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.963310711 UTC

[section ""cstring" . GHC.Show.asciiTab72_bytes" {
     GHC.Show.asciiTab72_bytes:
         I8[] [67,82]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.965645285 UTC

[section ""data" . GHC.Show.asciiTab71_closure" {
     GHC.Show.asciiTab71_closure:
         const GHC.Show.asciiTab71_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab71_entry() //  [R1]
         { []
         }
     {offset
       cHc3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHc4; else goto cHc5;
       cHc4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHc5: // global
           (_cHc0::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHc0::I64 == 0) goto cHc2; else goto cHc1;
       cHc2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHc1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHc0::I64;
           R2 = GHC.Show.asciiTab72_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab71_info" {
     GHC.Show.asciiTab71_info:
         const GHC.Show.asciiTab71_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.969699839 UTC

[section ""cstring" . GHC.Show.asciiTab70_bytes" {
     GHC.Show.asciiTab70_bytes:
         I8[] [83,79]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.971978567 UTC

[section ""data" . GHC.Show.asciiTab69_closure" {
     GHC.Show.asciiTab69_closure:
         const GHC.Show.asciiTab69_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab69_entry() //  [R1]
         { []
         }
     {offset
       cHck: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHcl; else goto cHcm;
       cHcl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHcm: // global
           (_cHch::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHch::I64 == 0) goto cHcj; else goto cHci;
       cHcj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHci: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHch::I64;
           R2 = GHC.Show.asciiTab70_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab69_info" {
     GHC.Show.asciiTab69_info:
         const GHC.Show.asciiTab69_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.975599835 UTC

[section ""cstring" . GHC.Show.asciiTab68_bytes" {
     GHC.Show.asciiTab68_bytes:
         I8[] [83,73]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.977952867 UTC

[section ""data" . GHC.Show.asciiTab67_closure" {
     GHC.Show.asciiTab67_closure:
         const GHC.Show.asciiTab67_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab67_entry() //  [R1]
         { []
         }
     {offset
       cHcB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHcC; else goto cHcD;
       cHcC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHcD: // global
           (_cHcy::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHcy::I64 == 0) goto cHcA; else goto cHcz;
       cHcA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHcz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHcy::I64;
           R2 = GHC.Show.asciiTab68_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab67_info" {
     GHC.Show.asciiTab67_info:
         const GHC.Show.asciiTab67_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.982445676 UTC

[section ""cstring" . GHC.Show.asciiTab66_bytes" {
     GHC.Show.asciiTab66_bytes:
         I8[] [68,76,69]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.984897229 UTC

[section ""data" . GHC.Show.asciiTab65_closure" {
     GHC.Show.asciiTab65_closure:
         const GHC.Show.asciiTab65_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab65_entry() //  [R1]
         { []
         }
     {offset
       cHcS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHcT; else goto cHcU;
       cHcT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHcU: // global
           (_cHcP::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHcP::I64 == 0) goto cHcR; else goto cHcQ;
       cHcR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHcQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHcP::I64;
           R2 = GHC.Show.asciiTab66_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab65_info" {
     GHC.Show.asciiTab65_info:
         const GHC.Show.asciiTab65_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.988434794 UTC

[section ""cstring" . GHC.Show.asciiTab64_bytes" {
     GHC.Show.asciiTab64_bytes:
         I8[] [68,67,49]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.991298247 UTC

[section ""data" . GHC.Show.asciiTab63_closure" {
     GHC.Show.asciiTab63_closure:
         const GHC.Show.asciiTab63_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab63_entry() //  [R1]
         { []
         }
     {offset
       cHd9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHda; else goto cHdb;
       cHda: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHdb: // global
           (_cHd6::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHd6::I64 == 0) goto cHd8; else goto cHd7;
       cHd8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHd7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHd6::I64;
           R2 = GHC.Show.asciiTab64_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab63_info" {
     GHC.Show.asciiTab63_info:
         const GHC.Show.asciiTab63_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.995302591 UTC

[section ""cstring" . GHC.Show.asciiTab62_bytes" {
     GHC.Show.asciiTab62_bytes:
         I8[] [68,67,50]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:15.997589451 UTC

[section ""data" . GHC.Show.asciiTab61_closure" {
     GHC.Show.asciiTab61_closure:
         const GHC.Show.asciiTab61_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab61_entry() //  [R1]
         { []
         }
     {offset
       cHdq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHdr; else goto cHds;
       cHdr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHds: // global
           (_cHdn::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHdn::I64 == 0) goto cHdp; else goto cHdo;
       cHdp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHdo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHdn::I64;
           R2 = GHC.Show.asciiTab62_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab61_info" {
     GHC.Show.asciiTab61_info:
         const GHC.Show.asciiTab61_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.000974079 UTC

[section ""cstring" . GHC.Show.asciiTab60_bytes" {
     GHC.Show.asciiTab60_bytes:
         I8[] [68,67,51]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.003635753 UTC

[section ""data" . GHC.Show.asciiTab59_closure" {
     GHC.Show.asciiTab59_closure:
         const GHC.Show.asciiTab59_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab59_entry() //  [R1]
         { []
         }
     {offset
       cHdH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHdI; else goto cHdJ;
       cHdI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHdJ: // global
           (_cHdE::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHdE::I64 == 0) goto cHdG; else goto cHdF;
       cHdG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHdF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHdE::I64;
           R2 = GHC.Show.asciiTab60_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab59_info" {
     GHC.Show.asciiTab59_info:
         const GHC.Show.asciiTab59_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.007244055 UTC

[section ""cstring" . GHC.Show.asciiTab58_bytes" {
     GHC.Show.asciiTab58_bytes:
         I8[] [68,67,52]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.00954653 UTC

[section ""data" . GHC.Show.asciiTab57_closure" {
     GHC.Show.asciiTab57_closure:
         const GHC.Show.asciiTab57_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab57_entry() //  [R1]
         { []
         }
     {offset
       cHdY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHdZ; else goto cHe0;
       cHdZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHe0: // global
           (_cHdV::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHdV::I64 == 0) goto cHdX; else goto cHdW;
       cHdX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHdW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHdV::I64;
           R2 = GHC.Show.asciiTab58_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab57_info" {
     GHC.Show.asciiTab57_info:
         const GHC.Show.asciiTab57_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.012966834 UTC

[section ""cstring" . GHC.Show.asciiTab56_bytes" {
     GHC.Show.asciiTab56_bytes:
         I8[] [78,65,75]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.015705484 UTC

[section ""data" . GHC.Show.asciiTab55_closure" {
     GHC.Show.asciiTab55_closure:
         const GHC.Show.asciiTab55_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab55_entry() //  [R1]
         { []
         }
     {offset
       cHef: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHeg; else goto cHeh;
       cHeg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHeh: // global
           (_cHec::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHec::I64 == 0) goto cHee; else goto cHed;
       cHee: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHed: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHec::I64;
           R2 = GHC.Show.asciiTab56_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab55_info" {
     GHC.Show.asciiTab55_info:
         const GHC.Show.asciiTab55_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.019236034 UTC

[section ""cstring" . GHC.Show.asciiTab54_bytes" {
     GHC.Show.asciiTab54_bytes:
         I8[] [83,89,78]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.021846862 UTC

[section ""data" . GHC.Show.asciiTab53_closure" {
     GHC.Show.asciiTab53_closure:
         const GHC.Show.asciiTab53_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab53_entry() //  [R1]
         { []
         }
     {offset
       cHew: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHex; else goto cHey;
       cHex: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHey: // global
           (_cHet::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHet::I64 == 0) goto cHev; else goto cHeu;
       cHev: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHeu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHet::I64;
           R2 = GHC.Show.asciiTab54_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab53_info" {
     GHC.Show.asciiTab53_info:
         const GHC.Show.asciiTab53_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.025838352 UTC

[section ""cstring" . GHC.Show.asciiTab52_bytes" {
     GHC.Show.asciiTab52_bytes:
         I8[] [69,84,66]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.028227192 UTC

[section ""data" . GHC.Show.asciiTab51_closure" {
     GHC.Show.asciiTab51_closure:
         const GHC.Show.asciiTab51_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab51_entry() //  [R1]
         { []
         }
     {offset
       cHeN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHeO; else goto cHeP;
       cHeO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHeP: // global
           (_cHeK::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHeK::I64 == 0) goto cHeM; else goto cHeL;
       cHeM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHeL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHeK::I64;
           R2 = GHC.Show.asciiTab52_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab51_info" {
     GHC.Show.asciiTab51_info:
         const GHC.Show.asciiTab51_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.031789615 UTC

[section ""cstring" . GHC.Show.asciiTab50_bytes" {
     GHC.Show.asciiTab50_bytes:
         I8[] [67,65,78]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.034498859 UTC

[section ""data" . GHC.Show.asciiTab49_closure" {
     GHC.Show.asciiTab49_closure:
         const GHC.Show.asciiTab49_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab49_entry() //  [R1]
         { []
         }
     {offset
       cHf4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHf5; else goto cHf6;
       cHf5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHf6: // global
           (_cHf1::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHf1::I64 == 0) goto cHf3; else goto cHf2;
       cHf3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHf2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHf1::I64;
           R2 = GHC.Show.asciiTab50_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab49_info" {
     GHC.Show.asciiTab49_info:
         const GHC.Show.asciiTab49_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.03857387 UTC

[section ""cstring" . GHC.Show.asciiTab48_bytes" {
     GHC.Show.asciiTab48_bytes:
         I8[] [69,77]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.040846368 UTC

[section ""data" . GHC.Show.asciiTab47_closure" {
     GHC.Show.asciiTab47_closure:
         const GHC.Show.asciiTab47_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab47_entry() //  [R1]
         { []
         }
     {offset
       cHfl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHfm; else goto cHfn;
       cHfm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHfn: // global
           (_cHfi::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHfi::I64 == 0) goto cHfk; else goto cHfj;
       cHfk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHfj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHfi::I64;
           R2 = GHC.Show.asciiTab48_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab47_info" {
     GHC.Show.asciiTab47_info:
         const GHC.Show.asciiTab47_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.045024175 UTC

[section ""cstring" . GHC.Show.asciiTab46_bytes" {
     GHC.Show.asciiTab46_bytes:
         I8[] [83,85,66]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.047363815 UTC

[section ""data" . GHC.Show.asciiTab45_closure" {
     GHC.Show.asciiTab45_closure:
         const GHC.Show.asciiTab45_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab45_entry() //  [R1]
         { []
         }
     {offset
       cHfC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHfD; else goto cHfE;
       cHfD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHfE: // global
           (_cHfz::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHfz::I64 == 0) goto cHfB; else goto cHfA;
       cHfB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHfA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHfz::I64;
           R2 = GHC.Show.asciiTab46_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab45_info" {
     GHC.Show.asciiTab45_info:
         const GHC.Show.asciiTab45_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.051445227 UTC

[section ""cstring" . GHC.Show.asciiTab44_bytes" {
     GHC.Show.asciiTab44_bytes:
         I8[] [69,83,67]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.054181169 UTC

[section ""data" . GHC.Show.asciiTab43_closure" {
     GHC.Show.asciiTab43_closure:
         const GHC.Show.asciiTab43_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab43_entry() //  [R1]
         { []
         }
     {offset
       cHfT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHfU; else goto cHfV;
       cHfU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHfV: // global
           (_cHfQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHfQ::I64 == 0) goto cHfS; else goto cHfR;
       cHfS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHfR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHfQ::I64;
           R2 = GHC.Show.asciiTab44_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab43_info" {
     GHC.Show.asciiTab43_info:
         const GHC.Show.asciiTab43_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.05784468 UTC

[section ""cstring" . GHC.Show.asciiTab42_bytes" {
     GHC.Show.asciiTab42_bytes:
         I8[] [70,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.060424296 UTC

[section ""data" . GHC.Show.asciiTab41_closure" {
     GHC.Show.asciiTab41_closure:
         const GHC.Show.asciiTab41_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab41_entry() //  [R1]
         { []
         }
     {offset
       cHga: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHgb; else goto cHgc;
       cHgb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHgc: // global
           (_cHg7::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHg7::I64 == 0) goto cHg9; else goto cHg8;
       cHg9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHg8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHg7::I64;
           R2 = GHC.Show.asciiTab42_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab41_info" {
     GHC.Show.asciiTab41_info:
         const GHC.Show.asciiTab41_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.064035034 UTC

[section ""cstring" . GHC.Show.asciiTab40_bytes" {
     GHC.Show.asciiTab40_bytes:
         I8[] [71,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.066661055 UTC

[section ""data" . GHC.Show.asciiTab39_closure" {
     GHC.Show.asciiTab39_closure:
         const GHC.Show.asciiTab39_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab39_entry() //  [R1]
         { []
         }
     {offset
       cHgr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHgs; else goto cHgt;
       cHgs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHgt: // global
           (_cHgo::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHgo::I64 == 0) goto cHgq; else goto cHgp;
       cHgq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHgp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHgo::I64;
           R2 = GHC.Show.asciiTab40_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab39_info" {
     GHC.Show.asciiTab39_info:
         const GHC.Show.asciiTab39_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.070631711 UTC

[section ""cstring" . GHC.Show.asciiTab38_bytes" {
     GHC.Show.asciiTab38_bytes:
         I8[] [82,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.072844093 UTC

[section ""data" . GHC.Show.asciiTab37_closure" {
     GHC.Show.asciiTab37_closure:
         const GHC.Show.asciiTab37_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab37_entry() //  [R1]
         { []
         }
     {offset
       cHgI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHgJ; else goto cHgK;
       cHgJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHgK: // global
           (_cHgF::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHgF::I64 == 0) goto cHgH; else goto cHgG;
       cHgH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHgG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHgF::I64;
           R2 = GHC.Show.asciiTab38_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab37_info" {
     GHC.Show.asciiTab37_info:
         const GHC.Show.asciiTab37_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.076513943 UTC

[section ""cstring" . GHC.Show.asciiTab36_bytes" {
     GHC.Show.asciiTab36_bytes:
         I8[] [85,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.079265956 UTC

[section ""data" . GHC.Show.asciiTab35_closure" {
     GHC.Show.asciiTab35_closure:
         const GHC.Show.asciiTab35_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab35_entry() //  [R1]
         { []
         }
     {offset
       cHgZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHh0; else goto cHh1;
       cHh0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHh1: // global
           (_cHgW::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHgW::I64 == 0) goto cHgY; else goto cHgX;
       cHgY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHgX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHgW::I64;
           R2 = GHC.Show.asciiTab36_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab35_info" {
     GHC.Show.asciiTab35_info:
         const GHC.Show.asciiTab35_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.083271806 UTC

[section ""cstring" . GHC.Show.asciiTab34_bytes" {
     GHC.Show.asciiTab34_bytes:
         I8[] [83,80]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.085676589 UTC

[section ""data" . GHC.Show.asciiTab33_closure" {
     GHC.Show.asciiTab33_closure:
         const GHC.Show.asciiTab33_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab33_entry() //  [R1]
         { []
         }
     {offset
       cHhg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHhh; else goto cHhi;
       cHhh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHhi: // global
           (_cHhd::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHhd::I64 == 0) goto cHhf; else goto cHhe;
       cHhf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHhe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHhd::I64;
           R2 = GHC.Show.asciiTab34_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab33_info" {
     GHC.Show.asciiTab33_info:
         const GHC.Show.asciiTab33_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.090074465 UTC

[section ""data" . GHC.Show.asciiTab32_closure" {
     GHC.Show.asciiTab32_closure:
         const :_con_info;
         const GHC.Show.asciiTab33_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.09175898 UTC

[section ""data" . GHC.Show.asciiTab31_closure" {
     GHC.Show.asciiTab31_closure:
         const :_con_info;
         const GHC.Show.asciiTab35_closure;
         const GHC.Show.asciiTab32_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.09395638 UTC

[section ""data" . GHC.Show.asciiTab30_closure" {
     GHC.Show.asciiTab30_closure:
         const :_con_info;
         const GHC.Show.asciiTab37_closure;
         const GHC.Show.asciiTab31_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.095635515 UTC

[section ""data" . GHC.Show.asciiTab29_closure" {
     GHC.Show.asciiTab29_closure:
         const :_con_info;
         const GHC.Show.asciiTab39_closure;
         const GHC.Show.asciiTab30_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.097352335 UTC

[section ""data" . GHC.Show.asciiTab28_closure" {
     GHC.Show.asciiTab28_closure:
         const :_con_info;
         const GHC.Show.asciiTab41_closure;
         const GHC.Show.asciiTab29_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.09914836 UTC

[section ""data" . GHC.Show.asciiTab27_closure" {
     GHC.Show.asciiTab27_closure:
         const :_con_info;
         const GHC.Show.asciiTab43_closure;
         const GHC.Show.asciiTab28_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.100843794 UTC

[section ""data" . GHC.Show.asciiTab26_closure" {
     GHC.Show.asciiTab26_closure:
         const :_con_info;
         const GHC.Show.asciiTab45_closure;
         const GHC.Show.asciiTab27_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.103038597 UTC

[section ""data" . GHC.Show.asciiTab25_closure" {
     GHC.Show.asciiTab25_closure:
         const :_con_info;
         const GHC.Show.asciiTab47_closure;
         const GHC.Show.asciiTab26_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.104821782 UTC

[section ""data" . GHC.Show.asciiTab24_closure" {
     GHC.Show.asciiTab24_closure:
         const :_con_info;
         const GHC.Show.asciiTab49_closure;
         const GHC.Show.asciiTab25_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.107048568 UTC

[section ""data" . GHC.Show.asciiTab23_closure" {
     GHC.Show.asciiTab23_closure:
         const :_con_info;
         const GHC.Show.asciiTab51_closure;
         const GHC.Show.asciiTab24_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.108833465 UTC

[section ""data" . GHC.Show.asciiTab22_closure" {
     GHC.Show.asciiTab22_closure:
         const :_con_info;
         const GHC.Show.asciiTab53_closure;
         const GHC.Show.asciiTab23_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.110658922 UTC

[section ""data" . GHC.Show.asciiTab21_closure" {
     GHC.Show.asciiTab21_closure:
         const :_con_info;
         const GHC.Show.asciiTab55_closure;
         const GHC.Show.asciiTab22_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.113118341 UTC

[section ""data" . GHC.Show.asciiTab20_closure" {
     GHC.Show.asciiTab20_closure:
         const :_con_info;
         const GHC.Show.asciiTab57_closure;
         const GHC.Show.asciiTab21_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.114993391 UTC

[section ""data" . GHC.Show.asciiTab19_closure" {
     GHC.Show.asciiTab19_closure:
         const :_con_info;
         const GHC.Show.asciiTab59_closure;
         const GHC.Show.asciiTab20_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.116808311 UTC

[section ""data" . GHC.Show.asciiTab18_closure" {
     GHC.Show.asciiTab18_closure:
         const :_con_info;
         const GHC.Show.asciiTab61_closure;
         const GHC.Show.asciiTab19_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.11866128 UTC

[section ""data" . GHC.Show.asciiTab17_closure" {
     GHC.Show.asciiTab17_closure:
         const :_con_info;
         const GHC.Show.asciiTab63_closure;
         const GHC.Show.asciiTab18_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.120350773 UTC

[section ""data" . GHC.Show.asciiTab16_closure" {
     GHC.Show.asciiTab16_closure:
         const :_con_info;
         const GHC.Show.asciiTab65_closure;
         const GHC.Show.asciiTab17_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.123100001 UTC

[section ""data" . GHC.Show.asciiTab15_closure" {
     GHC.Show.asciiTab15_closure:
         const :_con_info;
         const GHC.Show.asciiTab67_closure;
         const GHC.Show.asciiTab16_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.124807937 UTC

[section ""data" . GHC.Show.asciiTab14_closure" {
     GHC.Show.asciiTab14_closure:
         const :_con_info;
         const GHC.Show.asciiTab69_closure;
         const GHC.Show.asciiTab15_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.126650327 UTC

[section ""data" . GHC.Show.asciiTab13_closure" {
     GHC.Show.asciiTab13_closure:
         const :_con_info;
         const GHC.Show.asciiTab71_closure;
         const GHC.Show.asciiTab14_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.128379173 UTC

[section ""data" . GHC.Show.asciiTab12_closure" {
     GHC.Show.asciiTab12_closure:
         const :_con_info;
         const GHC.Show.asciiTab73_closure;
         const GHC.Show.asciiTab13_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.130118535 UTC

[section ""data" . GHC.Show.asciiTab11_closure" {
     GHC.Show.asciiTab11_closure:
         const :_con_info;
         const GHC.Show.asciiTab75_closure;
         const GHC.Show.asciiTab12_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.132274991 UTC

[section ""data" . GHC.Show.asciiTab10_closure" {
     GHC.Show.asciiTab10_closure:
         const :_con_info;
         const GHC.Show.asciiTab77_closure;
         const GHC.Show.asciiTab11_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.134055433 UTC

[section ""data" . GHC.Show.asciiTab9_closure" {
     GHC.Show.asciiTab9_closure:
         const :_con_info;
         const GHC.Show.asciiTab79_closure;
         const GHC.Show.asciiTab10_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.135746164 UTC

[section ""data" . GHC.Show.asciiTab8_closure" {
     GHC.Show.asciiTab8_closure:
         const :_con_info;
         const GHC.Show.asciiTab81_closure;
         const GHC.Show.asciiTab9_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.137619278 UTC

[section ""data" . GHC.Show.asciiTab7_closure" {
     GHC.Show.asciiTab7_closure:
         const :_con_info;
         const GHC.Show.asciiTab83_closure;
         const GHC.Show.asciiTab8_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.13932975 UTC

[section ""data" . GHC.Show.asciiTab6_closure" {
     GHC.Show.asciiTab6_closure:
         const :_con_info;
         const GHC.Show.asciiTab85_closure;
         const GHC.Show.asciiTab7_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.141537197 UTC

[section ""data" . GHC.Show.asciiTab5_closure" {
     GHC.Show.asciiTab5_closure:
         const :_con_info;
         const GHC.Show.asciiTab87_closure;
         const GHC.Show.asciiTab6_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.143230844 UTC

[section ""data" . GHC.Show.asciiTab4_closure" {
     GHC.Show.asciiTab4_closure:
         const :_con_info;
         const GHC.Show.asciiTab89_closure;
         const GHC.Show.asciiTab5_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.144900399 UTC

[section ""data" . GHC.Show.asciiTab3_closure" {
     GHC.Show.asciiTab3_closure:
         const :_con_info;
         const GHC.Show.asciiTab91_closure;
         const GHC.Show.asciiTab4_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.146832725 UTC

[section ""data" . GHC.Show.asciiTab2_closure" {
     GHC.Show.asciiTab2_closure:
         const :_con_info;
         const GHC.Show.asciiTab93_closure;
         const GHC.Show.asciiTab3_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.148550776 UTC

[section ""data" . GHC.Show.asciiTab1_closure" {
     GHC.Show.asciiTab1_closure:
         const :_con_info;
         const GHC.Show.asciiTab95_closure;
         const GHC.Show.asciiTab2_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.150421825 UTC

[section ""data" . GHC.Show.asciiTab_closure" {
     GHC.Show.asciiTab_closure:
         const :_con_info;
         const GHC.Show.asciiTab97_closure;
         const GHC.Show.asciiTab1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.152577435 UTC

[section ""data" . GHC.Show.$fShow(,)2_closure" {
     GHC.Show.$fShow(,)2_closure:
         const GHC.Types.C#_con_info;
         const 41;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.154708437 UTC

[section ""data" . GHC.Show.$fShow(,)4_closure" {
     GHC.Show.$fShow(,)4_closure:
         const GHC.Types.C#_con_info;
         const 40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.156318395 UTC

[section ""data" . GHC.Show.showLitChar1_closure" {
     GHC.Show.showLitChar1_closure:
         const GHC.Types.C#_con_info;
         const 45;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.159189248 UTC

[section ""data" . GHC.Show.$witos'_closure" {
     GHC.Show.$witos'_closure:
         const GHC.Show.$witos'_info;
 },
 GHC.Show.$witos'_entry() //  [R2, R3]
         { []
         }
     {offset
       cHii: // global
           _sC1J::P64 = R3;
           _sC1I::I64 = R2;
           goto cHi1;
       cHi1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cHim; else goto cHil;
       cHim: // global
           HpAlloc = 40;
           R3 = _sC1J::P64;
           R2 = _sC1I::I64;
           R1 = GHC.Show.$witos'_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHil: // global
           if (%MO_S_Ge_W64(_sC1I::I64, 10)) goto cHig; else goto cHih;
       cHig: // global
           (_sC1M::I64, _sC1N::I64) = call MO_S_QuotRem W64(_sC1I::I64, 10);
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _sC1N::I64 + 48;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _sC1J::P64;
           _sC1J::P64 = Hp - 14;
           _sC1I::I64 = _sC1M::I64;
           goto cHi1;
       cHih: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _sC1I::I64 + 48;
           _cHiu::P64 = Hp - 31;
           Hp = Hp - 24;
           R2 = _sC1J::P64;
           R1 = _cHiu::P64;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$witos'_info" {
     GHC.Show.$witos'_info:
         const GHC.Show.$witos'_entry;
         const 0;
         const 14;
         const 8589934605;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.168460443 UTC

[section ""data" . GHC.Show.$witos_closure" {
     GHC.Show.$witos_closure:
         const GHC.Show.$witos_info;
 },
 sat_sC23_entry() //  [R1]
         { []
         }
     {offset
       cHiV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cHj0; else goto cHj1;
       cHj0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHj1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cHiX_info;
           R3 = P64[R1 + 16];
           R2 = -I64[R1 + 24];
           Sp = Sp - 24;
           call GHC.Show.$witos'_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC23_info" {
     sat_sC23_info:
         const sat_sC23_entry;
         const 4294967297;
         const 19;
 },
 _cHiX() //  [R1, R2]
         { []
         }
     {offset
       cHiX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHj4; else goto cHj3;
       cHj4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cHj3: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cHiX_info" {
     block_cHiX_info:
         const _cHiX;
         const 0;
         const 30;
 },
 sat_sC2c_entry() //  [R1]
         { []
         }
     {offset
       cHjg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cHjl; else goto cHjm;
       cHjl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHjm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cHji_info;
           R3 = P64[R1 + 16];
           R2 = -I64[R1 + 24];
           Sp = Sp - 24;
           call GHC.Show.$witos'_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC2c_info" {
     sat_sC2c_info:
         const sat_sC2c_entry;
         const 4294967297;
         const 19;
 },
 _cHji() //  [R1, R2]
         { []
         }
     {offset
       cHji: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHjp; else goto cHjo;
       cHjp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cHjo: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cHji_info" {
     block_cHji_info:
         const _cHji;
         const 0;
         const 30;
 },
 sat_sC2g_entry() //  [R1]
         { []
         }
     {offset
       cHjs: // global
           _sC2g::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cHjx; else goto cHjy;
       cHjy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cHjA; else goto cHjz;
       cHjA: // global
           HpAlloc = 32;
           goto cHjx;
       cHjx: // global
           R1 = _sC2g::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHjz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC2g::P64;
           _sC1W::P64 = P64[_sC2g::P64 + 16];
           (_sC25::I64, _sC26::I64) = call MO_S_QuotRem W64((-9223372036854775808), 10);
           I64[Hp - 24] = sat_sC2c_info;
           P64[Hp - 8] = _sC1W::P64;
           I64[Hp] = _sC26::I64;
           I64[Sp - 24] = block_cHju_info;
           R3 = Hp - 24;
           R2 = -_sC25::I64;
           Sp = Sp - 24;
           call GHC.Show.$witos'_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC2g_info" {
     sat_sC2g_info:
         const sat_sC2g_entry;
         const 1;
         const 16;
 },
 _cHju() //  [R1, R2]
         { []
         }
     {offset
       cHju: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHjD; else goto cHjC;
       cHjD: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cHjC: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cHju_info" {
     block_cHju_info:
         const _cHju;
         const 0;
         const 30;
 },
 GHC.Show.$witos_entry() //  [R2, R3]
         { []
         }
     {offset
       cHjH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cHjL; else goto cHjK;
       cHjL: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$witos_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHjK: // global
           if (%MO_S_Ge_W64(R2, 0)) goto cHjF; else goto cHjG;
       cHjF: // global
           Hp = Hp - 32;
           R3 = R3;
           R2 = R2;
           call GHC.Show.$witos'_entry(R3, R2) args: 8, res: 0, upd: 8;
       cHjG: // global
           if (R2 == (-9223372036854775808)) goto cHjO; else goto cHjN;
       cHjO: // global
           I64[Hp - 24] = sat_sC2g_info;
           P64[Hp - 8] = R3;
           _cHj6::P64 = Hp - 24;
           Hp = Hp - 8;
           R2 = _cHj6::P64;
           R1 = GHC.Show.showLitChar1_closure+1;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cHjN: // global
           I64[Hp - 24] = sat_sC23_info;
           P64[Hp - 8] = R3;
           I64[Hp] = R2;
           R2 = Hp - 24;
           R1 = GHC.Show.showLitChar1_closure+1;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$witos_info" {
     GHC.Show.$witos_info:
         const GHC.Show.$witos_entry;
         const 0;
         const 14;
         const 8589934605;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.194236277 UTC

[section ""data" . GHC.Show.$wshowSignedInt_closure" {
     GHC.Show.$wshowSignedInt_closure:
         const GHC.Show.$wshowSignedInt_info;
 },
 sat_sC2q_entry() //  [R1]
         { []
         }
     {offset
       cHkF: // global
           _sC2q::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cHkG; else goto cHkH;
       cHkH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHkJ; else goto cHkI;
       cHkJ: // global
           HpAlloc = 24;
           goto cHkG;
       cHkG: // global
           R1 = _sC2q::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHkI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC2q::P64;
           _sC2j::P64 = P64[_sC2q::P64 + 16];
           _sC2i::I64 = I64[_sC2q::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sC2j::P64;
           I64[Sp - 24] = block_cHkC_info;
           R3 = Hp - 14;
           R2 = _sC2i::I64;
           Sp = Sp - 24;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC2q_info" {
     sat_sC2q_info:
         const sat_sC2q_entry;
         const 4294967297;
         const 19;
 },
 _cHkC() //  [R1, R2]
         { []
         }
     {offset
       cHkC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHkM; else goto cHkL;
       cHkM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cHkL: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cHkC_info" {
     block_cHkC_info:
         const _cHkC;
         const 0;
         const 30;
 },
 GHC.Show.$wshowSignedInt_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cHkQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cHkU; else goto cHkT;
       cHkU: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$wshowSignedInt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cHkT: // global
           _sC2j::P64 = R4;
           _sC2i::I64 = R3;
           if (%MO_S_Ge_W64(R3, 0)) goto cHkW; else goto cHkP;
       cHkP: // global
           if (%MO_S_Le_W64(R2, 6)) goto cHkW; else goto cHkX;
       cHkW: // global
           Hp = Hp - 32;
           R3 = _sC2j::P64;
           R2 = _sC2i::I64;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 0, upd: 8;
       cHkX: // global
           I64[Hp - 24] = sat_sC2q_info;
           P64[Hp - 8] = _sC2j::P64;
           I64[Hp] = _sC2i::I64;
           R2 = Hp - 24;
           R1 = GHC.Show.$fShow(,)4_closure+1;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$wshowSignedInt_info" {
     GHC.Show.$wshowSignedInt_info:
         const GHC.Show.$wshowSignedInt_entry;
         const 0;
         const 14;
         const 12884901905;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.207891768 UTC

[section ""data" . GHC.Show.showSignedInt_closure" {
     GHC.Show.showSignedInt_closure:
         const GHC.Show.showSignedInt_info;
 },
 GHC.Show.showSignedInt_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cHli: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cHlt; else goto cHlu;
       cHlt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.showSignedInt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cHlu: // global
           I64[Sp - 24] = block_cHlf_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uHlB; else goto cHlg;
       uHlB: // global
           call _cHlf(R1) args: 0, res: 0, upd: 0;
       cHlg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showSignedInt_info" {
     GHC.Show.showSignedInt_info:
         const GHC.Show.showSignedInt_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cHlf() //  [R1]
         { []
         }
     {offset
       cHlf: // global
           I64[Sp] = block_cHll_info;
           _sC2v::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sC2v::I64;
           if (R1 & 7 != 0) goto uHlA; else goto cHlm;
       uHlA: // global
           call _cHll(R1) args: 0, res: 0, upd: 0;
       cHlm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cHlf_info" {
     block_cHlf_info:
         const _cHlf;
         const 2;
         const 30;
 },
 _cHll() //  [R1]
         { []
         }
     {offset
       cHll: // global
           _sC2t::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cHlq_info;
           R4 = _sC2t::P64;
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cHll_info" {
     block_cHll_info:
         const _cHll;
         const 66;
         const 30;
 },
 _cHlq() //  [R1, R2]
         { []
         }
     {offset
       cHlq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHlz; else goto cHly;
       cHlz: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cHly: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHlq_info" {
     block_cHlq_info:
         const _cHlq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.22092565 UTC

[section ""cstring" . GHC.Show.showLitChar12_bytes" {
     GHC.Show.showLitChar12_bytes:
         I8[] [92,97]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.22348779 UTC

[section ""cstring" . GHC.Show.showLitChar11_bytes" {
     GHC.Show.showLitChar11_bytes:
         I8[] [92,98]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.22611461 UTC

[section ""cstring" . GHC.Show.showLitChar10_bytes" {
     GHC.Show.showLitChar10_bytes:
         I8[] [92,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.229114184 UTC

[section ""cstring" . GHC.Show.showLitChar9_bytes" {
     GHC.Show.showLitChar9_bytes:
         I8[] [92,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.231599539 UTC

[section ""cstring" . GHC.Show.showLitChar8_bytes" {
     GHC.Show.showLitChar8_bytes:
         I8[] [92,118]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.233827904 UTC

[section ""cstring" . GHC.Show.showLitChar7_bytes" {
     GHC.Show.showLitChar7_bytes:
         I8[] [92,102]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.235404147 UTC

[section ""cstring" . GHC.Show.showLitChar6_bytes" {
     GHC.Show.showLitChar6_bytes:
         I8[] [92,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.237115406 UTC

[section ""cstring" . GHC.Show.showLitChar5_bytes" {
     GHC.Show.showLitChar5_bytes:
         I8[] [92,83,79]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.239340341 UTC

[section ""cstring" . GHC.Show.showLitChar4_bytes" {
     GHC.Show.showLitChar4_bytes:
         I8[] [92,38]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.241055522 UTC

[section ""cstring" . GHC.Show.showLitChar3_bytes" {
     GHC.Show.showLitChar3_bytes:
         I8[] [92,92]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.242735462 UTC

[section ""cstring" . GHC.Show.showLitChar2_bytes" {
     GHC.Show.showLitChar2_bytes:
         I8[] [92,68,69,76]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.251228865 UTC

[section ""data" . GHC.Show.$wshowLitChar_closure" {
     GHC.Show.$wshowLitChar_closure:
         const GHC.Show.$wshowLitChar_info;
         const 0;
 },
 sat_sC2I_entry() //  [R1]
         { []
         }
     {offset
       cHmo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHmp; else goto cHmq;
       cHmp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHmq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 16];
           R2 = GHC.Show.asciiTab_closure+2;
           Sp = Sp - 16;
           call GHC.List.$w!!_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC2I_info" {
     sat_sC2I_info:
         const sat_sC2I_entry;
         const 4294967296;
         const 12884901905;
         const SCNU_srt;
 },
 sat_sC2Q_entry() //  [R1]
         { []
         }
     {offset
       cHmK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cHmL; else goto cHmM;
       cHmL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHmM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cHmD_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uHn4; else goto cHmE;
       uHn4: // global
           call _cHmD(R1) args: 0, res: 0, upd: 0;
       cHmE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC2Q_info" {
     sat_sC2Q_info:
         const sat_sC2Q_entry;
         const 1;
         const 16;
 },
 _cHmD() //  [R1]
         { []
         }
     {offset
       cHmD: // global
           if (R1 & 7 == 1) goto cHmH; else goto cHmI;
       cHmH: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cHmI: // global
           I64[Sp - 8] = block_cHmS_info;
           _sC2K::P64 = R1;
           R1 = P64[R1 + 6];
           P64[Sp] = _sC2K::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uHn3; else goto cHmU;
       uHn3: // global
           call _cHmS(R1) args: 0, res: 0, upd: 0;
       cHmU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cHmD_info" {
     block_cHmD_info:
         const _cHmD;
         const 0;
         const 30;
 },
 _cHmS() //  [R1]
         { []
         }
     {offset
       cHmS: // global
           _sC2K::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 72) goto cHn2; else goto cHn1;
       cHn2: // global
           R3 = _sC2K::P64;
           R2 = GHC.Show.showLitChar4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       cHn1: // global
           R1 = _sC2K::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cHmS_info" {
     block_cHmS_info:
         const _cHmS;
         const 1;
         const 30;
 },
 sat_sC30_entry() //  [R1]
         { []
         }
     {offset
       cHnl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cHnm; else goto cHnn;
       cHnm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHnn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cHne_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uHnN; else goto cHnf;
       uHnN: // global
           call _cHne(R1) args: 0, res: 0, upd: 0;
       cHnf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC30_info" {
     sat_sC30_info:
         const sat_sC30_entry;
         const 1;
         const 16;
 },
 _cHne() //  [R1]
         { []
         }
     {offset
       cHne: // global
           if (R1 & 7 == 1) goto cHni; else goto cHnj;
       cHni: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cHnj: // global
           I64[Sp - 8] = block_cHnt_info;
           _sC2T::P64 = R1;
           R1 = P64[R1 + 6];
           P64[Sp] = _sC2T::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uHnM; else goto cHnv;
       uHnM: // global
           call _cHnt(R1) args: 0, res: 0, upd: 0;
       cHnv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cHne_info" {
     block_cHne_info:
         const _cHne;
         const 0;
         const 30;
 },
 _cHnt() //  [R1]
         { []
         }
     {offset
       cHnt: // global
           _sC2T::P64 = P64[Sp + 8];
           _sC2X::I64 = I64[R1 + 7];
           if (_sC2X::I64 < 48) goto cHnJ; else goto cHnL;
       cHnL: // global
           if (_sC2X::I64 > 57) goto cHnJ; else goto cHnK;
       cHnJ: // global
           R1 = _sC2T::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cHnK: // global
           R3 = _sC2T::P64;
           R2 = GHC.Show.showLitChar4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cHnt_info" {
     block_cHnt_info:
         const _cHnt;
         const 1;
         const 30;
 },
 sat_sC34_entry() //  [R1]
         { []
         }
     {offset
       cHnQ: // global
           _sC34::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cHnV; else goto cHnW;
       cHnW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHnY; else goto cHnX;
       cHnY: // global
           HpAlloc = 24;
           goto cHnV;
       cHnV: // global
           R1 = _sC34::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHnX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC34::P64;
           _sC2C::P64 = P64[_sC34::P64 + 16];
           _sC2B::I64 = I64[_sC34::P64 + 24];
           I64[Hp - 16] = sat_sC30_info;
           P64[Hp] = _sC2C::P64;
           I64[Sp - 24] = block_cHnS_info;
           R3 = Hp - 16;
           R2 = _sC2B::I64;
           Sp = Sp - 24;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC34_info" {
     sat_sC34_info:
         const sat_sC34_entry;
         const 4294967297;
         const 19;
 },
 _cHnS() //  [R1, R2]
         { []
         }
     {offset
       cHnS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHo1; else goto cHo0;
       cHo1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cHo0: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cHnS_info" {
     block_cHnS_info:
         const _cHnS;
         const 0;
         const 30;
 },
 GHC.Show.$wshowLitChar_entry() //  [R2, R3]
         { []
         }
     {offset
       cHo5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cHo9; else goto cHo8;
       cHo9: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$wshowLitChar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHo8: // global
           if (R2 <= 127) goto cHo3; else goto cHo4;
       cHo3: // global
           if (R2 == 92) goto cHot; else goto uHow;
       cHot: // global
           Hp = Hp - 56;
           R3 = R3;
           R2 = GHC.Show.showLitChar3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       uHow: // global
           if (R2 == 127) goto cHou; else goto cHos;
       cHou: // global
           Hp = Hp - 56;
           R3 = R3;
           R2 = GHC.Show.showLitChar2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cHos: // global
           if (R2 < 32) goto cHom; else goto cHoq;
       cHom: // global
           _sC2C::P64 = R3;
           _sC2G::I64 = R2;
           if (R2 >= 15) goto cHoc; else goto uHox;
       uHox: // global
           if (_sC2G::I64 < 7) goto cHoc; else goto uHoy;
       cHoc: // global
           I64[Hp - 48] = sat_sC2I_info;
           I64[Hp - 32] = _sC2G::I64;
           I64[Hp - 24] = :_con_info;
           P64[Hp - 16] = GHC.Show.showLitChar13_closure+1;
           P64[Hp - 8] = Hp - 48;
           _cHoa::P64 = Hp - 22;
           Hp = Hp - 8;
           R3 = _sC2C::P64;
           R2 = _cHoa::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       uHoy: // global
           switch [7 .. 14] _sC2G::I64 {
               case 7 : goto cHod;
               case 8 : goto cHoe;
               case 9 : goto cHof;
               case 10 : goto cHog;
               case 11 : goto cHoh;
               case 12 : goto cHoi;
               case 13 : goto cHoj;
               case 14 : goto cHok;
           }
       cHok: // global
           I64[Hp - 48] = sat_sC2Q_info;
           P64[Hp - 32] = _sC2C::P64;
           _cHmz::P64 = Hp - 48;
           Hp = Hp - 32;
           R3 = _cHmz::P64;
           R2 = GHC.Show.showLitChar5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cHoj: // global
           Hp = Hp - 56;
           R3 = _sC2C::P64;
           R2 = GHC.Show.showLitChar6_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cHoi: // global
           Hp = Hp - 56;
           R3 = _sC2C::P64;
           R2 = GHC.Show.showLitChar7_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cHoh: // global
           Hp = Hp - 56;
           R3 = _sC2C::P64;
           R2 = GHC.Show.showLitChar8_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cHog: // global
           Hp = Hp - 56;
           R3 = _sC2C::P64;
           R2 = GHC.Show.showLitChar9_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cHof: // global
           Hp = Hp - 56;
           R3 = _sC2C::P64;
           R2 = GHC.Show.showLitChar10_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cHoe: // global
           Hp = Hp - 56;
           R3 = _sC2C::P64;
           R2 = GHC.Show.showLitChar11_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cHod: // global
           Hp = Hp - 56;
           R3 = _sC2C::P64;
           R2 = GHC.Show.showLitChar12_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cHoq: // global
           I64[Hp - 48] = GHC.Types.C#_con_info;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = R3;
           _cHop::P64 = Hp - 30;
           Hp = Hp - 16;
           R1 = _cHop::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cHo4: // global
           I64[Hp - 48] = sat_sC34_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showLitChar13_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$wshowLitChar_info" {
     GHC.Show.$wshowLitChar_info:
         const GHC.Show.$wshowLitChar_entry;
         const 0;
         const 30064771086;
         const 8589934605;
         const SCNU_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.275893253 UTC

[section ""data" . GHC.Show.showLitChar_closure" {
     GHC.Show.showLitChar_closure:
         const GHC.Show.showLitChar_info;
         const 0;
 },
 GHC.Show.showLitChar_entry() //  [R2, R3]
         { []
         }
     {offset
       cHpB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHpC; else goto cHpD;
       cHpC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.showLitChar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHpD: // global
           I64[Sp - 16] = block_cHpy_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uHpH; else goto cHpz;
       uHpH: // global
           call _cHpy(R1) args: 0, res: 0, upd: 0;
       cHpz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showLitChar_info" {
     GHC.Show.showLitChar_info:
         const GHC.Show.showLitChar_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SCNU_srt+16;
 },
 _cHpy() //  [R1]
         { []
         }
     {offset
       cHpy: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.$wshowLitChar_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHpy_info" {
     block_cHpy_info:
         const _cHpy;
         const 1;
         const 4294967326;
         const SCNU_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.282227723 UTC

[section ""data" . GHC.Show.$dmshowsPrec_closure" {
     GHC.Show.$dmshowsPrec_closure:
         const GHC.Show.$dmshowsPrec_info;
 },
 GHC.Show.$dmshowsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cHpX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cHpY; else goto cHpZ;
       cHpY: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$dmshowsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cHpZ: // global
           I64[Sp - 16] = block_cHpV_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Show.show_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$dmshowsPrec_info" {
     GHC.Show.$dmshowsPrec_info:
         const GHC.Show.$dmshowsPrec_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cHpV() //  [R1]
         { []
         }
     {offset
       cHpV: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHpV_info" {
     block_cHpV_info:
         const _cHpV;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.288607333 UTC

[section ""data" . GHC.Show.showList__3_closure" {
     GHC.Show.showList__3_closure:
         const GHC.Types.C#_con_info;
         const 91;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.290396108 UTC

[section ""data" . GHC.Show.showList__2_closure" {
     GHC.Show.showList__2_closure:
         const GHC.Types.C#_con_info;
         const 93;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.292085744 UTC

[section ""data" . GHC.Show.showList__1_closure" {
     GHC.Show.showList__1_closure:
         const GHC.Types.C#_con_info;
         const 44;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.293955293 UTC

[section ""cstring" . GHC.Show.showList__4_bytes" {
     GHC.Show.showList__4_bytes:
         I8[] [91,93]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.300876877 UTC

[section ""data" . GHC.Show.showList___closure" {
     GHC.Show.showList___closure:
         const GHC.Show.showList___info;
 },
 sat_sC3r_entry() //  [R1]
         { []
         }
     {offset
       cHqO: // global
           _sC3r::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cHqP; else goto cHqQ;
       cHqQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cHqS; else goto cHqR;
       cHqS: // global
           HpAlloc = 32;
           goto cHqP;
       cHqP: // global
           R1 = _sC3r::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHqR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC3r::P64;
           _sC3e::P64 = P64[_sC3r::P64 + 16];
           _sC3l::P64 = P64[_sC3r::P64 + 24];
           _sC3o::P64 = P64[_sC3r::P64 + 32];
           _sC3p::P64 = P64[_sC3r::P64 + 40];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sC3l::P64;
           P64[Hp] = _sC3p::P64;
           R3 = Hp - 24;
           R2 = _sC3o::P64;
           R1 = _sC3e::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC3r_info" {
     sat_sC3r_info:
         const sat_sC3r_entry;
         const 4;
         const 15;
 },
 showl_sC3l_entry() //  [R1, R2]
         { []
         }
     {offset
       cHqX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cHqY; else goto cHqZ;
       cHqY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cHqZ: // global
           I64[Sp - 32] = block_cHqD_info;
           _sC3l::P64 = R1;
           _sC3e::P64 = P64[R1 + 7];
           _sC3k::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sC3e::P64;
           P64[Sp - 16] = _sC3k::P64;
           P64[Sp - 8] = _sC3l::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uHr6; else goto cHqE;
       uHr6: // global
           call _cHqD(R1) args: 0, res: 0, upd: 0;
       cHqE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . showl_sC3l_info" {
     showl_sC3l_info:
         const showl_sC3l_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cHqD() //  [R1]
         { []
         }
     {offset
       cHqD: // global
           if (R1 & 7 == 1) goto cHqU; else goto cHqV;
       cHqU: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cHqV: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cHr5; else goto cHr4;
       cHr5: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cHr4: // global
           _sC3o::P64 = P64[R1 + 6];
           _sC3p::P64 = P64[R1 + 14];
           I64[Hp - 64] = sat_sC3r_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = _sC3o::P64;
           P64[Hp - 24] = _sC3p::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHqD_info" {
     block_cHqD_info:
         const _cHqD;
         const 3;
         const 30;
 },
 sat_sC3s_entry() //  [R1]
         { []
         }
     {offset
       cHr7: // global
           _sC3s::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cHr8; else goto cHr9;
       cHr9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cHrb; else goto cHra;
       cHrb: // global
           HpAlloc = 48;
           goto cHr8;
       cHr8: // global
           R1 = _sC3s::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHra: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC3s::P64;
           _sC3e::P64 = P64[_sC3s::P64 + 16];
           _sC3g::P64 = P64[_sC3s::P64 + 24];
           _sC3j::P64 = P64[_sC3s::P64 + 32];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.showList__2_closure+1;
           P64[Hp - 24] = _sC3g::P64;
           I64[Hp - 16] = showl_sC3l_info;
           P64[Hp - 8] = _sC3e::P64;
           P64[Hp] = Hp - 38;
           R2 = _sC3j::P64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call showl_sC3l_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC3s_info" {
     sat_sC3s_info:
         const sat_sC3s_entry;
         const 3;
         const 15;
 },
 sat_sC3t_entry() //  [R1]
         { []
         }
     {offset
       cHrc: // global
           _sC3t::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cHrd; else goto cHre;
       cHre: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cHrg; else goto cHrf;
       cHrg: // global
           HpAlloc = 40;
           goto cHrd;
       cHrd: // global
           R1 = _sC3t::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHrf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC3t::P64;
           _sC3e::P64 = P64[_sC3t::P64 + 16];
           _sC3g::P64 = P64[_sC3t::P64 + 24];
           _sC3i::P64 = P64[_sC3t::P64 + 32];
           _sC3j::P64 = P64[_sC3t::P64 + 40];
           I64[Hp - 32] = sat_sC3s_info;
           P64[Hp - 16] = _sC3e::P64;
           P64[Hp - 8] = _sC3g::P64;
           P64[Hp] = _sC3j::P64;
           R3 = Hp - 32;
           R2 = _sC3i::P64;
           R1 = _sC3e::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC3t_info" {
     sat_sC3t_info:
         const sat_sC3t_entry;
         const 4;
         const 15;
 },
 GHC.Show.showList___entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cHrl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cHrm; else goto cHrn;
       cHrm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.showList___closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cHrn: // global
           I64[Sp - 24] = block_cHqj_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uHru; else goto cHqk;
       uHru: // global
           call _cHqj(R1) args: 0, res: 0, upd: 0;
       cHqk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showList___info" {
     GHC.Show.showList___info:
         const GHC.Show.showList___entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cHqj() //  [R1]
         { []
         }
     {offset
       cHqj: // global
           _sC3g::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cHri; else goto cHrj;
       cHri: // global
           R3 = _sC3g::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cHrj: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cHrt; else goto cHrs;
       cHrt: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cHrs: // global
           _sC3i::P64 = P64[R1 + 6];
           _sC3j::P64 = P64[R1 + 14];
           I64[Hp - 64] = sat_sC3t_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _sC3g::P64;
           P64[Hp - 32] = _sC3i::P64;
           P64[Hp - 24] = _sC3j::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure+1;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHqj_info" {
     block_cHqj_info:
         const _cHqj;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.329978601 UTC

[section ""cstring" . lvl_rC0c_bytes" {
     lvl_rC0c_bytes:
         I8[] [92,34]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.339065962 UTC

[section ""data" . GHC.Show.showLitString_closure" {
     GHC.Show.showLitString_closure:
         const GHC.Show.showLitString_info;
         const 0;
 },
 sat_sC3C_entry() //  [R1]
         { []
         }
     {offset
       cHsx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHsy; else goto cHsz;
       cHsy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHsz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC3C_info" {
     sat_sC3C_info:
         const sat_sC3C_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+32;
 },
 sat_sC3D_entry() //  [R1]
         { []
         }
     {offset
       cHsF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHsG; else goto cHsH;
       cHsG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHsH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC3D_info" {
     sat_sC3D_info:
         const sat_sC3D_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+32;
 },
 GHC.Show.showLitString_entry() //  [R2, R3]
         { []
         }
     {offset
       cHsM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cHsN; else goto cHsO;
       cHsN: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.showLitString_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHsO: // global
           I64[Sp - 16] = block_cHsg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uHsZ; else goto cHsh;
       uHsZ: // global
           call _cHsg(R1) args: 0, res: 0, upd: 0;
       cHsh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showLitString_info" {
     GHC.Show.showLitString_info:
         const GHC.Show.showLitString_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SCNU_srt+16;
 },
 _cHsg() //  [R1]
         { []
         }
     {offset
       cHsg: // global
           if (R1 & 7 == 1) goto cHsJ; else goto cHsK;
       cHsJ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cHsK: // global
           I64[Sp - 8] = block_cHsm_info;
           _sC3y::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sC3y::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uHsY; else goto cHsn;
       uHsY: // global
           call _cHsm(R1) args: 0, res: 0, upd: 0;
       cHsn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cHsg_info" {
     block_cHsg_info:
         const _cHsg;
         const 1;
         const 21474836510;
         const SCNU_srt+16;
 },
 _cHsm() //  [R1]
         { []
         }
     {offset
       cHsm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cHsU; else goto cHsT;
       cHsU: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cHsT: // global
           _sC3v::P64 = P64[Sp + 16];
           _sC3y::P64 = P64[Sp + 8];
           _sC3B::I64 = I64[R1 + 7];
           if (_sC3B::I64 != 34) goto cHsW; else goto cHsX;
       cHsW: // global
           I64[Hp - 24] = sat_sC3C_info;
           P64[Hp - 8] = _sC3v::P64;
           P64[Hp] = _sC3y::P64;
           R3 = Hp - 24;
           R2 = _sC3B::I64;
           Sp = Sp + 24;
           call GHC.Show.$wshowLitChar_entry(R3, R2) args: 8, res: 0, upd: 8;
       cHsX: // global
           I64[Hp - 24] = sat_sC3D_info;
           P64[Hp - 8] = _sC3v::P64;
           P64[Hp] = _sC3y::P64;
           R3 = Hp - 24;
           R2 = lvl_rC0c_bytes;
           Sp = Sp + 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHsm_info" {
     block_cHsm_info:
         const _cHsm;
         const 2;
         const 21474836510;
         const SCNU_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.356457302 UTC

[section ""data" . GHC.Show.$fShow(,)3_closure" {
     GHC.Show.$fShow(,)3_closure:
         const GHC.Types.C#_con_info;
         const 34;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.361585874 UTC

[section ""data" . GHC.Show.$fShow(,)_$cshowList1_closure" {
     GHC.Show.$fShow(,)_$cshowList1_closure:
         const GHC.Show.$fShow(,)_$cshowList1_info;
         const 0;
 },
 sat_sC3H_entry() //  [R1]
         { []
         }
     {offset
       cHtz: // global
           _sC3H::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cHtA; else goto cHtB;
       cHtB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHtD; else goto cHtC;
       cHtD: // global
           HpAlloc = 24;
           goto cHtA;
       cHtA: // global
           R1 = _sC3H::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHtC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC3H::P64;
           _sC3E::P64 = P64[_sC3H::P64 + 16];
           _sC3F::P64 = P64[_sC3H::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = _sC3F::P64;
           R3 = Hp - 14;
           R2 = _sC3E::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC3H_info" {
     sat_sC3H_info:
         const sat_sC3H_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+32;
 },
 GHC.Show.$fShow(,)_$cshowList1_entry() //  [R2, R3]
         { []
         }
     {offset
       cHtF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cHtJ; else goto cHtI;
       cHtJ: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,)_$cshowList1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHtI: // global
           I64[Hp - 48] = sat_sC3H_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,)_$cshowList1_info" {
     GHC.Show.$fShow(,)_$cshowList1_info:
         const GHC.Show.$fShow(,)_$cshowList1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SCNU_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.371785831 UTC

[section ""data" . $s$fShow[]_rC0d_closure" {
     $s$fShow[]_rC0d_closure:
         const $s$fShow[]_rC0d_info;
         const 0;
 },
 $s$fShow[]_rC0d_entry() //  [R3, R4]
         { []
         }
     {offset
       cHtY: // global
           _sC3J::P64 = R3;
           R3 = R4;
           R2 = _sC3J::P64;
           call GHC.Show.$fShow(,)_$cshowList1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $s$fShow[]_rC0d_info" {
     $s$fShow[]_rC0d_info:
         const $s$fShow[]_rC0d_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SCNU_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.375902796 UTC

[section ""data" . GHC.Show.$fShow[]_$s$cshowList1_closure" {
     GHC.Show.$fShow[]_$s$cshowList1_closure:
         const GHC.Show.$fShow[]_$s$cshowList1_info;
         const 0;
 },
 GHC.Show.$fShow[]_$s$cshowList1_entry() //  [R2, R3]
         { []
         }
     {offset
       cHu9: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShow(,)_$cshowList1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow[]_$s$cshowList1_info" {
     GHC.Show.$fShow[]_$s$cshowList1_info:
         const GHC.Show.$fShow[]_$s$cshowList1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SCNU_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.379666022 UTC

[section ""data" . GHC.Show.$fShow[]1_closure" {
     GHC.Show.$fShow[]1_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)3_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.383544668 UTC

[section ""data" . GHC.Show.$fShow[]_$s$cshow1_closure" {
     GHC.Show.$fShow[]_$s$cshow1_closure:
         const GHC.Show.$fShow[]_$s$cshow1_info;
         const 0;
 },
 sat_sC3O_entry() //  [R1]
         { []
         }
     {offset
       cHup: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHuq; else goto cHur;
       cHuq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHur: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Show.$fShow[]1_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC3O_info" {
     sat_sC3O_info:
         const sat_sC3O_entry;
         const 1;
         const 4294967312;
         const SCNU_srt+32;
 },
 GHC.Show.$fShow[]_$s$cshow1_entry() //  [R2]
         { []
         }
     {offset
       cHut: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cHux; else goto cHuw;
       cHux: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = GHC.Show.$fShow[]_$s$cshow1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cHuw: // global
           I64[Hp - 40] = sat_sC3O_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow[]_$s$cshow1_info" {
     GHC.Show.$fShow[]_$s$cshow1_info:
         const GHC.Show.$fShow[]_$s$cshow1_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SCNU_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.389900731 UTC

[section ""data" . GHC.Show.$fShow[]_$s$fShow[]1_closure" {
     GHC.Show.$fShow[]_$s$fShow[]1_closure:
         const GHC.Show.C:Show_con_info;
         const $s$fShow[]_rC0d_closure+3;
         const GHC.Show.$fShow[]_$s$cshow1_closure+1;
         const GHC.Show.$fShow[]_$s$cshowList1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.392334028 UTC

[section ""data" . GHC.Show.$fShow(,)1_closure" {
     GHC.Show.$fShow(,)1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.394891804 UTC

[section ""cstring" . lvl1_rC0e_bytes" {
     lvl1_rC0e_bytes:
         I8[] [83,114,99,76,111,99,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.397502473 UTC

[section ""cstring" . lvl2_rC0f_bytes" {
     lvl2_rC0f_bytes:
         I8[] [115,114,99,76,111,99,80,97,99,107,97,103,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.399478427 UTC

[section ""cstring" . lvl3_rC0g_bytes" {
     lvl3_rC0g_bytes:
         I8[] [115,114,99,76,111,99,77,111,100,117,108,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.401714722 UTC

[section ""cstring" . lvl4_rC0h_bytes" {
     lvl4_rC0h_bytes:
         I8[] [115,114,99,76,111,99,70,105,108,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.404283654 UTC

[section ""cstring" . lvl5_rC0i_bytes" {
     lvl5_rC0i_bytes:
         I8[] [115,114,99,76,111,99,83,116,97,114,116,76,105,110,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.406849225 UTC

[section ""cstring" . lvl6_rC0j_bytes" {
     lvl6_rC0j_bytes:
         I8[] [115,114,99,76,111,99,83,116,97,114,116,67,111,108,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.409948973 UTC

[section ""cstring" . lvl7_rC0k_bytes" {
     lvl7_rC0k_bytes:
         I8[] [115,114,99,76,111,99,69,110,100,76,105,110,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.412397627 UTC

[section ""cstring" . lvl8_rC0l_bytes" {
     lvl8_rC0l_bytes:
         I8[] [115,114,99,76,111,99,69,110,100,67,111,108,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.414877144 UTC

[section ""cstring" . lvl9_rC0m_bytes" {
     lvl9_rC0m_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.443962426 UTC

[section ""data" . GHC.Show.$w$cshowsPrec_closure" {
     GHC.Show.$w$cshowsPrec_closure:
         const GHC.Show.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cHuU: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$w$cshowsPrec_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sC48_entry() //  [R1]
         { []
         }
     {offset
       cHwJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHwK; else goto cHwL;
       cHwK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHwL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl9_rC0m_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC48_info" {
     sat_sC48_info:
         const sat_sC48_entry;
         const 1;
         const 16;
 },
 sat_sC4c_entry() //  [R1]
         { []
         }
     {offset
       cHwM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cHwQ; else goto cHwR;
       cHwQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHwR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cHwA_info;
           _sC3Z::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sC3Z::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uHwY; else goto cHwB;
       uHwY: // global
           call _cHwA(R1) args: 0, res: 0, upd: 0;
       cHwB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC4c_info" {
     sat_sC4c_info:
         const sat_sC4c_entry;
         const 2;
         const 18;
 },
 _cHwA() //  [R1]
         { []
         }
     {offset
       cHwA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHwU; else goto cHwT;
       cHwU: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cHwT: // global
           _sC47::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sC48_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cHwN_info;
           R3 = Hp - 16;
           R2 = _sC47::I64;
           Sp = Sp + 8;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cHwA_info" {
     block_cHwA_info:
         const _cHwA;
         const 1;
         const 30;
 },
 _cHwN() //  [R1, R2]
         { []
         }
     {offset
       cHwN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHwX; else goto cHwW;
       cHwX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cHwW: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cHwN_info" {
     block_cHwN_info:
         const _cHwN;
         const 0;
         const 30;
 },
 sat_sC4d_entry() //  [R1]
         { []
         }
     {offset
       cHwZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cHx3; else goto cHx2;
       cHx3: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHx2: // global
           _sC3W::P64 = P64[R1 + 16];
           _sC3Z::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sC4c_info;
           P64[Hp - 8] = _sC3W::P64;
           P64[Hp] = _sC3Z::P64;
           R3 = Hp - 24;
           R2 = lvl8_rC0l_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sC4d_info" {
     sat_sC4d_info:
         const sat_sC4d_entry;
         const 2;
         const 18;
 },
 sat_sC4e_entry() //  [R1]
         { []
         }
     {offset
       cHx4: // global
           _sC4e::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cHx5; else goto cHx6;
       cHx6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cHx8; else goto cHx7;
       cHx8: // global
           HpAlloc = 32;
           goto cHx5;
       cHx5: // global
           R1 = _sC4e::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHx7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC4e::P64;
           _sC3W::P64 = P64[_sC4e::P64 + 16];
           _sC3Z::P64 = P64[_sC4e::P64 + 24];
           I64[Hp - 24] = sat_sC4d_info;
           P64[Hp - 8] = _sC3W::P64;
           P64[Hp] = _sC3Z::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC4e_info" {
     sat_sC4e_info:
         const sat_sC4e_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+56;
 },
 sat_sC4i_entry() //  [R1]
         { []
         }
     {offset
       cHx9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHxd; else goto cHxe;
       cHxd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHxe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cHwj_info;
           _sC3W::P64 = P64[R1 + 24];
           _sC3Z::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sC3W::P64;
           P64[Sp - 24] = _sC3Z::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uHxl; else goto cHwk;
       uHxl: // global
           call _cHwj(R1) args: 0, res: 0, upd: 0;
       cHwk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC4i_info" {
     sat_sC4i_info:
         const sat_sC4i_entry;
         const 3;
         const 4294967311;
         const SCNU_srt+56;
 },
 _cHwj() //  [R1]
         { []
         }
     {offset
       cHwj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cHxh; else goto cHxg;
       cHxh: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cHxg: // global
           _sC45::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_sC4e_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cHxa_info;
           R3 = Hp - 24;
           R2 = _sC45::I64;
           Sp = Sp + 16;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cHwj_info" {
     block_cHwj_info:
         const _cHwj;
         const 2;
         const 4294967326;
         const SCNU_srt+56;
 },
 _cHxa() //  [R1, R2]
         { []
         }
     {offset
       cHxa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHxk; else goto cHxj;
       cHxk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cHxj: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cHxa_info" {
     block_cHxa_info:
         const _cHxa;
         const 0;
         const 30;
 },
 sat_sC4j_entry() //  [R1]
         { []
         }
     {offset
       cHxm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cHxq; else goto cHxp;
       cHxq: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHxp: // global
           _sC3V::P64 = P64[R1 + 16];
           _sC3W::P64 = P64[R1 + 24];
           _sC3Z::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sC4i_info;
           P64[Hp - 16] = _sC3V::P64;
           P64[Hp - 8] = _sC3W::P64;
           P64[Hp] = _sC3Z::P64;
           R3 = Hp - 32;
           R2 = lvl7_rC0k_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sC4j_info" {
     sat_sC4j_info:
         const sat_sC4j_entry;
         const 3;
         const 4294967311;
         const SCNU_srt+56;
 },
 sat_sC4k_entry() //  [R1]
         { []
         }
     {offset
       cHxr: // global
           _sC4k::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cHxs; else goto cHxt;
       cHxt: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cHxv; else goto cHxu;
       cHxv: // global
           HpAlloc = 40;
           goto cHxs;
       cHxs: // global
           R1 = _sC4k::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHxu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC4k::P64;
           _sC3V::P64 = P64[_sC4k::P64 + 16];
           _sC3W::P64 = P64[_sC4k::P64 + 24];
           _sC3Z::P64 = P64[_sC4k::P64 + 32];
           I64[Hp - 32] = sat_sC4j_info;
           P64[Hp - 16] = _sC3V::P64;
           P64[Hp - 8] = _sC3W::P64;
           P64[Hp] = _sC3Z::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC4k_info" {
     sat_sC4k_info:
         const sat_sC4k_entry;
         const 3;
         const 4294967311;
         const SCNU_srt+56;
 },
 sat_sC4o_entry() //  [R1]
         { []
         }
     {offset
       cHxw: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cHxA; else goto cHxB;
       cHxA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHxB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cHw2_info;
           _sC3V::P64 = P64[R1 + 24];
           _sC3W::P64 = P64[R1 + 32];
           _sC3Z::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _sC3V::P64;
           P64[Sp - 32] = _sC3W::P64;
           P64[Sp - 24] = _sC3Z::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uHxI; else goto cHw3;
       uHxI: // global
           call _cHw2(R1) args: 0, res: 0, upd: 0;
       cHw3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC4o_info" {
     sat_sC4o_info:
         const sat_sC4o_entry;
         const 4;
         const 4294967311;
         const SCNU_srt+56;
 },
 _cHw2() //  [R1]
         { []
         }
     {offset
       cHw2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cHxE; else goto cHxD;
       cHxE: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cHxD: // global
           _sC43::I64 = I64[R1 + 7];
           I64[Hp - 32] = sat_sC4k_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_cHxx_info;
           R3 = Hp - 32;
           R2 = _sC43::I64;
           Sp = Sp + 24;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cHw2_info" {
     block_cHw2_info:
         const _cHw2;
         const 3;
         const 4294967326;
         const SCNU_srt+56;
 },
 _cHxx() //  [R1, R2]
         { []
         }
     {offset
       cHxx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHxH; else goto cHxG;
       cHxH: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cHxG: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cHxx_info" {
     block_cHxx_info:
         const _cHxx;
         const 0;
         const 30;
 },
 sat_sC4p_entry() //  [R1]
         { []
         }
     {offset
       cHxJ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cHxN; else goto cHxM;
       cHxN: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHxM: // global
           _sC3U::P64 = P64[R1 + 16];
           _sC3V::P64 = P64[R1 + 24];
           _sC3W::P64 = P64[R1 + 32];
           _sC3Z::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_sC4o_info;
           P64[Hp - 24] = _sC3U::P64;
           P64[Hp - 16] = _sC3V::P64;
           P64[Hp - 8] = _sC3W::P64;
           P64[Hp] = _sC3Z::P64;
           R3 = Hp - 40;
           R2 = lvl6_rC0j_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sC4p_info" {
     sat_sC4p_info:
         const sat_sC4p_entry;
         const 4;
         const 4294967311;
         const SCNU_srt+56;
 },
 sat_sC4q_entry() //  [R1]
         { []
         }
     {offset
       cHxO: // global
           _sC4q::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cHxP; else goto cHxQ;
       cHxQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cHxS; else goto cHxR;
       cHxS: // global
           HpAlloc = 48;
           goto cHxP;
       cHxP: // global
           R1 = _sC4q::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHxR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC4q::P64;
           _sC3U::P64 = P64[_sC4q::P64 + 16];
           _sC3V::P64 = P64[_sC4q::P64 + 24];
           _sC3W::P64 = P64[_sC4q::P64 + 32];
           _sC3Z::P64 = P64[_sC4q::P64 + 40];
           I64[Hp - 40] = sat_sC4p_info;
           P64[Hp - 24] = _sC3U::P64;
           P64[Hp - 16] = _sC3V::P64;
           P64[Hp - 8] = _sC3W::P64;
           P64[Hp] = _sC3Z::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC4q_info" {
     sat_sC4q_info:
         const sat_sC4q_entry;
         const 4;
         const 4294967311;
         const SCNU_srt+56;
 },
 sat_sC4u_entry() //  [R1]
         { []
         }
     {offset
       cHxT: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cHxX; else goto cHxY;
       cHxX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHxY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cHvL_info;
           _sC3U::P64 = P64[R1 + 24];
           _sC3V::P64 = P64[R1 + 32];
           _sC3W::P64 = P64[R1 + 40];
           _sC3Z::P64 = P64[R1 + 48];
           R1 = P64[R1 + 16];
           P64[Sp - 48] = _sC3U::P64;
           P64[Sp - 40] = _sC3V::P64;
           P64[Sp - 32] = _sC3W::P64;
           P64[Sp - 24] = _sC3Z::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto uHy5; else goto cHvM;
       uHy5: // global
           call _cHvL(R1) args: 0, res: 0, upd: 0;
       cHvM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC4u_info" {
     sat_sC4u_info:
         const sat_sC4u_entry;
         const 5;
         const 4294967311;
         const SCNU_srt+56;
 },
 _cHvL() //  [R1]
         { []
         }
     {offset
       cHvL: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cHy1; else goto cHy0;
       cHy1: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cHy0: // global
           _sC41::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sC4q_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_cHxU_info;
           R3 = Hp - 40;
           R2 = _sC41::I64;
           Sp = Sp + 32;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cHvL_info" {
     block_cHvL_info:
         const _cHvL;
         const 4;
         const 4294967326;
         const SCNU_srt+56;
 },
 _cHxU() //  [R1, R2]
         { []
         }
     {offset
       cHxU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHy4; else goto cHy3;
       cHy4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cHy3: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cHxU_info" {
     block_cHxU_info:
         const _cHxU;
         const 0;
         const 30;
 },
 sat_sC4v_entry() //  [R1]
         { []
         }
     {offset
       cHy6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cHya; else goto cHy9;
       cHya: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHy9: // global
           _sC3T::P64 = P64[R1 + 16];
           _sC3U::P64 = P64[R1 + 24];
           _sC3V::P64 = P64[R1 + 32];
           _sC3W::P64 = P64[R1 + 40];
           _sC3Z::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_sC4u_info;
           P64[Hp - 32] = _sC3T::P64;
           P64[Hp - 24] = _sC3U::P64;
           P64[Hp - 16] = _sC3V::P64;
           P64[Hp - 8] = _sC3W::P64;
           P64[Hp] = _sC3Z::P64;
           R3 = Hp - 48;
           R2 = lvl5_rC0i_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sC4v_info" {
     sat_sC4v_info:
         const sat_sC4v_entry;
         const 5;
         const 4294967311;
         const SCNU_srt+56;
 },
 sat_sC4w_entry() //  [R1]
         { []
         }
     {offset
       cHyb: // global
           _sC4w::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cHyc; else goto cHyd;
       cHyd: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cHyf; else goto cHye;
       cHyf: // global
           HpAlloc = 56;
           goto cHyc;
       cHyc: // global
           R1 = _sC4w::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHye: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC4w::P64;
           _sC3T::P64 = P64[_sC4w::P64 + 16];
           _sC3U::P64 = P64[_sC4w::P64 + 24];
           _sC3V::P64 = P64[_sC4w::P64 + 32];
           _sC3W::P64 = P64[_sC4w::P64 + 40];
           _sC3Z::P64 = P64[_sC4w::P64 + 48];
           I64[Hp - 48] = sat_sC4v_info;
           P64[Hp - 32] = _sC3T::P64;
           P64[Hp - 24] = _sC3U::P64;
           P64[Hp - 16] = _sC3V::P64;
           P64[Hp - 8] = _sC3W::P64;
           P64[Hp] = _sC3Z::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC4w_info" {
     sat_sC4w_info:
         const sat_sC4w_entry;
         const 5;
         const 4294967311;
         const SCNU_srt+56;
 },
 sat_sC4y_entry() //  [R1]
         { []
         }
     {offset
       cHyh: // global
           _sC4y::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cHyi; else goto cHyj;
       cHyj: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cHyl; else goto cHyk;
       cHyl: // global
           HpAlloc = 80;
           goto cHyi;
       cHyi: // global
           R1 = _sC4y::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHyk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC4y::P64;
           _sC3S::P64 = P64[_sC4y::P64 + 16];
           _sC3T::P64 = P64[_sC4y::P64 + 24];
           _sC3U::P64 = P64[_sC4y::P64 + 32];
           _sC3V::P64 = P64[_sC4y::P64 + 40];
           _sC3W::P64 = P64[_sC4y::P64 + 48];
           _sC3Z::P64 = P64[_sC4y::P64 + 56];
           I64[Hp - 72] = sat_sC4w_info;
           P64[Hp - 56] = _sC3T::P64;
           P64[Hp - 48] = _sC3U::P64;
           P64[Hp - 40] = _sC3V::P64;
           P64[Hp - 32] = _sC3W::P64;
           P64[Hp - 24] = _sC3Z::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 72;
           R3 = Hp - 14;
           R2 = _sC3S::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC4y_info" {
     sat_sC4y_info:
         const sat_sC4y_entry;
         const 6;
         const 38654705679;
         const SCNU_srt+32;
 },
 sat_sC4A_entry() //  [R1]
         { []
         }
     {offset
       cHyn: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cHyr; else goto cHyq;
       cHyr: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHyq: // global
           _sC3S::P64 = P64[R1 + 16];
           _sC3T::P64 = P64[R1 + 24];
           _sC3U::P64 = P64[R1 + 32];
           _sC3V::P64 = P64[R1 + 40];
           _sC3W::P64 = P64[R1 + 48];
           _sC3Z::P64 = P64[R1 + 56];
           I64[Hp - 80] = sat_sC4y_info;
           P64[Hp - 64] = _sC3S::P64;
           P64[Hp - 56] = _sC3T::P64;
           P64[Hp - 48] = _sC3U::P64;
           P64[Hp - 40] = _sC3V::P64;
           P64[Hp - 32] = _sC3W::P64;
           P64[Hp - 24] = _sC3Z::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 80;
           R3 = Hp - 14;
           R2 = lvl4_rC0h_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sC4A_info" {
     sat_sC4A_info:
         const sat_sC4A_entry;
         const 6;
         const 38654705679;
         const SCNU_srt+32;
 },
 sat_sC4B_entry() //  [R1]
         { []
         }
     {offset
       cHys: // global
           _sC4B::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cHyt; else goto cHyu;
       cHyu: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cHyw; else goto cHyv;
       cHyw: // global
           HpAlloc = 64;
           goto cHyt;
       cHyt: // global
           R1 = _sC4B::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHyv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC4B::P64;
           _sC3S::P64 = P64[_sC4B::P64 + 16];
           _sC3T::P64 = P64[_sC4B::P64 + 24];
           _sC3U::P64 = P64[_sC4B::P64 + 32];
           _sC3V::P64 = P64[_sC4B::P64 + 40];
           _sC3W::P64 = P64[_sC4B::P64 + 48];
           _sC3Z::P64 = P64[_sC4B::P64 + 56];
           I64[Hp - 56] = sat_sC4A_info;
           P64[Hp - 40] = _sC3S::P64;
           P64[Hp - 32] = _sC3T::P64;
           P64[Hp - 24] = _sC3U::P64;
           P64[Hp - 16] = _sC3V::P64;
           P64[Hp - 8] = _sC3W::P64;
           P64[Hp] = _sC3Z::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC4B_info" {
     sat_sC4B_info:
         const sat_sC4B_entry;
         const 6;
         const 38654705679;
         const SCNU_srt+32;
 },
 sat_sC4D_entry() //  [R1]
         { []
         }
     {offset
       cHyy: // global
           _sC4D::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cHyz; else goto cHyA;
       cHyA: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cHyC; else goto cHyB;
       cHyC: // global
           HpAlloc = 88;
           goto cHyz;
       cHyz: // global
           R1 = _sC4D::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHyB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC4D::P64;
           _sC3R::P64 = P64[_sC4D::P64 + 16];
           _sC3S::P64 = P64[_sC4D::P64 + 24];
           _sC3T::P64 = P64[_sC4D::P64 + 32];
           _sC3U::P64 = P64[_sC4D::P64 + 40];
           _sC3V::P64 = P64[_sC4D::P64 + 48];
           _sC3W::P64 = P64[_sC4D::P64 + 56];
           _sC3Z::P64 = P64[_sC4D::P64 + 64];
           I64[Hp - 80] = sat_sC4B_info;
           P64[Hp - 64] = _sC3S::P64;
           P64[Hp - 56] = _sC3T::P64;
           P64[Hp - 48] = _sC3U::P64;
           P64[Hp - 40] = _sC3V::P64;
           P64[Hp - 32] = _sC3W::P64;
           P64[Hp - 24] = _sC3Z::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 80;
           R3 = Hp - 14;
           R2 = _sC3R::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC4D_info" {
     sat_sC4D_info:
         const sat_sC4D_entry;
         const 7;
         const 38654705679;
         const SCNU_srt+32;
 },
 sat_sC4F_entry() //  [R1]
         { []
         }
     {offset
       cHyE: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cHyI; else goto cHyH;
       cHyI: // global
           HpAlloc = 96;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHyH: // global
           _sC3R::P64 = P64[R1 + 16];
           _sC3S::P64 = P64[R1 + 24];
           _sC3T::P64 = P64[R1 + 32];
           _sC3U::P64 = P64[R1 + 40];
           _sC3V::P64 = P64[R1 + 48];
           _sC3W::P64 = P64[R1 + 56];
           _sC3Z::P64 = P64[R1 + 64];
           I64[Hp - 88] = sat_sC4D_info;
           P64[Hp - 72] = _sC3R::P64;
           P64[Hp - 64] = _sC3S::P64;
           P64[Hp - 56] = _sC3T::P64;
           P64[Hp - 48] = _sC3U::P64;
           P64[Hp - 40] = _sC3V::P64;
           P64[Hp - 32] = _sC3W::P64;
           P64[Hp - 24] = _sC3Z::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 88;
           R3 = Hp - 14;
           R2 = lvl3_rC0g_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sC4F_info" {
     sat_sC4F_info:
         const sat_sC4F_entry;
         const 7;
         const 38654705679;
         const SCNU_srt+32;
 },
 sat_sC4G_entry() //  [R1]
         { []
         }
     {offset
       cHyJ: // global
           _sC4G::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cHyK; else goto cHyL;
       cHyL: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cHyN; else goto cHyM;
       cHyN: // global
           HpAlloc = 72;
           goto cHyK;
       cHyK: // global
           R1 = _sC4G::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHyM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC4G::P64;
           _sC3R::P64 = P64[_sC4G::P64 + 16];
           _sC3S::P64 = P64[_sC4G::P64 + 24];
           _sC3T::P64 = P64[_sC4G::P64 + 32];
           _sC3U::P64 = P64[_sC4G::P64 + 40];
           _sC3V::P64 = P64[_sC4G::P64 + 48];
           _sC3W::P64 = P64[_sC4G::P64 + 56];
           _sC3Z::P64 = P64[_sC4G::P64 + 64];
           I64[Hp - 64] = sat_sC4F_info;
           P64[Hp - 48] = _sC3R::P64;
           P64[Hp - 40] = _sC3S::P64;
           P64[Hp - 32] = _sC3T::P64;
           P64[Hp - 24] = _sC3U::P64;
           P64[Hp - 16] = _sC3V::P64;
           P64[Hp - 8] = _sC3W::P64;
           P64[Hp] = _sC3Z::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC4G_info" {
     sat_sC4G_info:
         const sat_sC4G_entry;
         const 7;
         const 38654705679;
         const SCNU_srt+32;
 },
 sat_sC4I_entry() //  [R1]
         { []
         }
     {offset
       cHyP: // global
           _sC4I::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cHyQ; else goto cHyR;
       cHyR: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cHyT; else goto cHyS;
       cHyT: // global
           HpAlloc = 96;
           goto cHyQ;
       cHyQ: // global
           R1 = _sC4I::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHyS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC4I::P64;
           _sC3Q::P64 = P64[_sC4I::P64 + 16];
           _sC3R::P64 = P64[_sC4I::P64 + 24];
           _sC3S::P64 = P64[_sC4I::P64 + 32];
           _sC3T::P64 = P64[_sC4I::P64 + 40];
           _sC3U::P64 = P64[_sC4I::P64 + 48];
           _sC3V::P64 = P64[_sC4I::P64 + 56];
           _sC3W::P64 = P64[_sC4I::P64 + 64];
           _sC3Z::P64 = P64[_sC4I::P64 + 72];
           I64[Hp - 88] = sat_sC4G_info;
           P64[Hp - 72] = _sC3R::P64;
           P64[Hp - 64] = _sC3S::P64;
           P64[Hp - 56] = _sC3T::P64;
           P64[Hp - 48] = _sC3U::P64;
           P64[Hp - 40] = _sC3V::P64;
           P64[Hp - 32] = _sC3W::P64;
           P64[Hp - 24] = _sC3Z::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 88;
           R3 = Hp - 14;
           R2 = _sC3Q::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC4I_info" {
     sat_sC4I_info:
         const sat_sC4I_entry;
         const 8;
         const 38654705679;
         const SCNU_srt+32;
 },
 sat_sC4K_entry() //  [R1]
         { []
         }
     {offset
       cHyV: // global
           _sC4K::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cHyW; else goto cHyX;
       cHyX: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cHyZ; else goto cHyY;
       cHyZ: // global
           HpAlloc = 104;
           goto cHyW;
       cHyW: // global
           R1 = _sC4K::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHyY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC4K::P64;
           _sC3Q::P64 = P64[_sC4K::P64 + 16];
           _sC3R::P64 = P64[_sC4K::P64 + 24];
           _sC3S::P64 = P64[_sC4K::P64 + 32];
           _sC3T::P64 = P64[_sC4K::P64 + 40];
           _sC3U::P64 = P64[_sC4K::P64 + 48];
           _sC3V::P64 = P64[_sC4K::P64 + 56];
           _sC3W::P64 = P64[_sC4K::P64 + 64];
           _sC3Z::P64 = P64[_sC4K::P64 + 72];
           I64[Hp - 96] = sat_sC4I_info;
           P64[Hp - 80] = _sC3Q::P64;
           P64[Hp - 72] = _sC3R::P64;
           P64[Hp - 64] = _sC3S::P64;
           P64[Hp - 56] = _sC3T::P64;
           P64[Hp - 48] = _sC3U::P64;
           P64[Hp - 40] = _sC3V::P64;
           P64[Hp - 32] = _sC3W::P64;
           P64[Hp - 24] = _sC3Z::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 96;
           R3 = Hp - 14;
           R2 = lvl2_rC0f_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC4K_info" {
     sat_sC4K_info:
         const sat_sC4K_entry;
         const 8;
         const 38654705679;
         const SCNU_srt+32;
 },
 p_sC3Y_entry() //  [R1, R2]
         { []
         }
     {offset
       cHz0: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cHz4; else goto cHz3;
       cHz4: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cHz3: // global
           _sC3Q::P64 = P64[R1 + 7];
           _sC3R::P64 = P64[R1 + 15];
           _sC3S::P64 = P64[R1 + 23];
           _sC3T::P64 = P64[R1 + 31];
           _sC3U::P64 = P64[R1 + 39];
           _sC3V::P64 = P64[R1 + 47];
           _sC3W::P64 = P64[R1 + 55];
           I64[Hp - 72] = sat_sC4K_info;
           P64[Hp - 56] = _sC3Q::P64;
           P64[Hp - 48] = _sC3R::P64;
           P64[Hp - 40] = _sC3S::P64;
           P64[Hp - 32] = _sC3T::P64;
           P64[Hp - 24] = _sC3U::P64;
           P64[Hp - 16] = _sC3V::P64;
           P64[Hp - 8] = _sC3W::P64;
           P64[Hp] = R2;
           R3 = Hp - 72;
           R2 = lvl1_rC0e_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_sC3Y_info" {
     p_sC3Y_info:
         const p_sC3Y_entry;
         const 7;
         const 38654705672;
         const 4294967301;
         const SCNU_srt+32;
 },
 sat_sC4N_entry() //  [R1]
         { []
         }
     {offset
       cHze: // global
           _sC4N::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cHzf; else goto cHzg;
       cHzg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHzi; else goto cHzh;
       cHzi: // global
           HpAlloc = 24;
           goto cHzf;
       cHzf: // global
           R1 = _sC4N::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHzh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC4N::P64;
           _sC3X::P64 = P64[_sC4N::P64 + 16];
           _sC3Y::P64 = P64[_sC4N::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sC3X::P64;
           R2 = Hp - 14;
           R1 = _sC3Y::P64;
           Sp = Sp - 16;
           call p_sC3Y_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC4N_info" {
     sat_sC4N_info:
         const sat_sC4N_entry;
         const 2;
         const 38654705682;
         const SCNU_srt+32;
 },
 GHC.Show.$w$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cHzm: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cHzq; else goto cHzp;
       cHzq: // global
           HpAlloc = 120;
           R1 = GHC.Show.$w$cshowsPrec_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cHzp: // global
           I64[Hp - 112] = p_sC3Y_info;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = P64[Sp];
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           _sC3X::P64 = P64[Sp + 24];
           _cHuY::P64 = Hp - 111;
           if (%MO_S_Lt_W64(R2, 11)) goto cHzk; else goto cHzl;
       cHzk: // global
           Hp = Hp - 56;
           R2 = _sC3X::P64;
           R1 = _cHuY::P64;
           Sp = Sp + 32;
           call p_sC3Y_entry(R2, R1) args: 8, res: 0, upd: 8;
       cHzl: // global
           I64[Hp - 48] = sat_sC4N_info;
           P64[Hp - 32] = _sC3X::P64;
           P64[Hp - 24] = _cHuY::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec_info" {
     GHC.Show.$w$cshowsPrec_info:
         const GHC.Show.$w$cshowsPrec_entry;
         const 0;
         const 107374182414;
         const 38654705664;
         const SCNU_srt+32;
         const 73;
         const GHC.Show.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.522724017 UTC

[section ""data" . GHC.Show.$fShowSrcLoc_$cshowsPrec_closure" {
     GHC.Show.$fShowSrcLoc_$cshowsPrec_closure:
         const GHC.Show.$fShowSrcLoc_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShowSrcLoc_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cHBT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cHBX; else goto cHBY;
       cHBX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowSrcLoc_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cHBY: // global
           I64[Sp - 24] = block_cHBQ_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uHC6; else goto cHBR;
       uHC6: // global
           call _cHBQ(R1) args: 0, res: 0, upd: 0;
       cHBR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowSrcLoc_$cshowsPrec_info" {
     GHC.Show.$fShowSrcLoc_$cshowsPrec_info:
         const GHC.Show.$fShowSrcLoc_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SCNU_srt+64;
 },
 _cHBQ() //  [R1]
         { []
         }
     {offset
       cHBQ: // global
           I64[Sp] = block_cHBW_info;
           _sC4S::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sC4S::I64;
           if (R1 & 7 != 0) goto uHC5; else goto cHC0;
       uHC5: // global
           call _cHBW(R1) args: 0, res: 0, upd: 0;
       cHC0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cHBQ_info" {
     block_cHBQ_info:
         const _cHBQ;
         const 2;
         const 4294967326;
         const SCNU_srt+64;
 },
 _cHBW() //  [R1]
         { []
         }
     {offset
       cHBW: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 39];
           P64[Sp] = P64[R1 + 47];
           P64[Sp + 8] = P64[R1 + 55];
           Sp = Sp - 8;
           call GHC.Show.$w$cshowsPrec_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHBW_info" {
     block_cHBW_info:
         const _cHBW;
         const 66;
         const 4294967326;
         const SCNU_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.532565689 UTC

[section ""data" . GHC.Show.$fShowSrcLoc1_closure" {
     GHC.Show.$fShowSrcLoc1_closure:
         const GHC.Show.$fShowSrcLoc1_info;
         const 0;
 },
 GHC.Show.$fShowSrcLoc1_entry() //  [R2, R3]
         { []
         }
     {offset
       cHCu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cHCv; else goto cHCw;
       cHCv: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowSrcLoc1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHCw: // global
           I64[Sp - 16] = block_cHCr_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uHCA; else goto cHCs;
       uHCA: // global
           call _cHCr(R1) args: 0, res: 0, upd: 0;
       cHCs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowSrcLoc1_info" {
     GHC.Show.$fShowSrcLoc1_info:
         const GHC.Show.$fShowSrcLoc1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SCNU_srt+64;
 },
 _cHCr() //  [R1]
         { []
         }
     {offset
       cHCr: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 16] = P64[R1 + 39];
           P64[Sp - 8] = P64[R1 + 47];
           P64[Sp] = P64[R1 + 55];
           Sp = Sp - 16;
           call GHC.Show.$w$cshowsPrec_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHCr_info" {
     block_cHCr_info:
         const _cHCr;
         const 1;
         const 4294967326;
         const SCNU_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.540517411 UTC

[section ""data" . GHC.Show.$fShowSrcLoc_$cshowList_closure" {
     GHC.Show.$fShowSrcLoc_$cshowList_closure:
         const GHC.Show.$fShowSrcLoc_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShowSrcLoc_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cHCR: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowSrcLoc1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowSrcLoc_$cshowList_info" {
     GHC.Show.$fShowSrcLoc_$cshowList_info:
         const GHC.Show.$fShowSrcLoc_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SCNU_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.547080183 UTC

[section ""data" . GHC.Show.$fShowSrcLoc_$cshow_closure" {
     GHC.Show.$fShowSrcLoc_$cshow_closure:
         const GHC.Show.$fShowSrcLoc_$cshow_info;
         const 0;
 },
 GHC.Show.$fShowSrcLoc_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cHD5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cHD6; else goto cHD7;
       cHD6: // global
           R2 = R2;
           R1 = GHC.Show.$fShowSrcLoc_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cHD7: // global
           I64[Sp - 8] = block_cHD2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uHDb; else goto cHD3;
       uHDb: // global
           call _cHD2(R1) args: 0, res: 0, upd: 0;
       cHD3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowSrcLoc_$cshow_info" {
     GHC.Show.$fShowSrcLoc_$cshow_info:
         const GHC.Show.$fShowSrcLoc_$cshow_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const SCNU_srt+64;
 },
 _cHD2() //  [R1]
         { []
         }
     {offset
       cHD2: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 24] = P64[R1 + 39];
           P64[Sp - 16] = P64[R1 + 47];
           P64[Sp - 8] = P64[R1 + 55];
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHD2_info" {
     block_cHD2_info:
         const _cHD2;
         const 0;
         const 4294967326;
         const SCNU_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.554556 UTC

[section ""data" . GHC.Show.$fShowSrcLoc_closure" {
     GHC.Show.$fShowSrcLoc_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowSrcLoc_$cshowsPrec_closure+3;
         const GHC.Show.$fShowSrcLoc_$cshow_closure+1;
         const GHC.Show.$fShowSrcLoc_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.55711334 UTC

[section ""data" . GHC.Show.appPrec_closure" {
     GHC.Show.appPrec_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.559790921 UTC

[section ""data" . GHC.Show.appPrec1_closure" {
     GHC.Show.appPrec1_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.563290226 UTC

[section ""data" . GHC.Show.$wshowWord_closure" {
     GHC.Show.$wshowWord_closure:
         const GHC.Show.$wshowWord_info;
 },
 GHC.Show.$wshowWord_entry() //  [R2, R3]
         { []
         }
     {offset
       cHDP: // global
           _sC5n::P64 = R3;
           _sC5m::I64 = R2;
           goto cHDs;
       cHDs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cHDT; else goto cHDS;
       cHDT: // global
           HpAlloc = 40;
           R3 = _sC5n::P64;
           R2 = _sC5m::I64;
           R1 = GHC.Show.$wshowWord_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHDS: // global
           if (_sC5m::I64 >= 10) goto cHDN; else goto cHDO;
       cHDN: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _sC5m::I64 % 10 + 48;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _sC5n::P64;
           _sC5n::P64 = Hp - 14;
           _sC5m::I64 = _sC5m::I64 / 10;
           goto cHDs;
       cHDO: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _sC5m::I64 + 48;
           _cHE4::P64 = Hp - 31;
           Hp = Hp - 24;
           R2 = _sC5n::P64;
           R1 = _cHE4::P64;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$wshowWord_info" {
     GHC.Show.$wshowWord_info:
         const GHC.Show.$wshowWord_entry;
         const 0;
         const 14;
         const 8589934605;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.570170618 UTC

[section ""data" . GHC.Show.showWord_closure" {
     GHC.Show.showWord_closure:
         const GHC.Show.showWord_info;
 },
 GHC.Show.showWord_entry() //  [R2, R3]
         { []
         }
     {offset
       cHEo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cHEp; else goto cHEq;
       cHEp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.showWord_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHEq: // global
           I64[Sp - 8] = block_cHEl_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showWord_info" {
     GHC.Show.showWord_info:
         const GHC.Show.showWord_entry;
         const 0;
         const 14;
         const 8589934605;
 },
 _cHEl() //  [R1, R2]
         { []
         }
     {offset
       cHEl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHEt; else goto cHEs;
       cHEt: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cHEs: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHEl_info" {
     block_cHEl_info:
         const _cHEl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.576496953 UTC

[section ""data" . GHC.Show.$fShowWord_$cshowsPrec_closure" {
     GHC.Show.$fShowWord_$cshowsPrec_closure:
         const GHC.Show.$fShowWord_$cshowsPrec_info;
 },
 GHC.Show.$fShowWord_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cHEK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHEL; else goto cHEM;
       cHEL: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowWord_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cHEM: // global
           I64[Sp - 16] = block_cHEH_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uHEQ; else goto cHEI;
       uHEQ: // global
           call _cHEH(R1) args: 0, res: 0, upd: 0;
       cHEI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowWord_$cshowsPrec_info" {
     GHC.Show.$fShowWord_$cshowsPrec_info:
         const GHC.Show.$fShowWord_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cHEH() //  [R1]
         { []
         }
     {offset
       cHEH: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.showWord_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHEH_info" {
     block_cHEH_info:
         const _cHEH;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.58387486 UTC

[section ""data" . GHC.Show.shows_closure" {
     GHC.Show.shows_closure:
         const GHC.Show.shows_info;
 },
 GHC.Show.shows_entry() //  [R2]
         { []
         }
     {offset
       cHF4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHF5; else goto cHF6;
       cHF5: // global
           R2 = R2;
           R1 = GHC.Show.shows_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cHF6: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Show.$fShow(,)1_closure+1;
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.shows_info" {
     GHC.Show.shows_info:
         const GHC.Show.shows_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.588450168 UTC

[section ""data" . GHC.Show.$dmshow_closure" {
     GHC.Show.$dmshow_closure:
         const GHC.Show.$dmshow_info;
 },
 GHC.Show.$dmshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cHFg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cHFh; else goto cHFi;
       cHFh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$dmshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHFi: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$dmshow_info" {
     GHC.Show.$dmshow_info:
         const GHC.Show.$dmshow_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.594402876 UTC

[section ""data" . GHC.Show.$dmshowList_closure" {
     GHC.Show.$dmshowList_closure:
         const GHC.Show.$dmshowList_info;
 },
 sat_sC5Q_entry() //  [R1]
         { []
         }
     {offset
       cHFw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cHFx; else goto cHFy;
       cHFx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHFy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC5Q_info" {
     sat_sC5Q_info:
         const sat_sC5Q_entry;
         const 1;
         const 16;
 },
 GHC.Show.$dmshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cHFz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHFD; else goto cHFC;
       cHFD: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$dmshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cHFC: // global
           I64[Hp - 16] = sat_sC5Q_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 16;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$dmshowList_info" {
     GHC.Show.$dmshowList_info:
         const GHC.Show.$dmshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.601570581 UTC

[section ""data" . GHC.Show.$fShowWord1_closure" {
     GHC.Show.$fShowWord1_closure:
         const GHC.Show.$fShowWord1_info;
 },
 GHC.Show.$fShowWord1_entry() //  [R2, R3]
         { []
         }
     {offset
       cHFT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHFU; else goto cHFV;
       cHFU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowWord1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHFV: // global
           I64[Sp - 16] = block_cHFQ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uHFZ; else goto cHFR;
       uHFZ: // global
           call _cHFQ(R1) args: 0, res: 0, upd: 0;
       cHFR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowWord1_info" {
     GHC.Show.$fShowWord1_info:
         const GHC.Show.$fShowWord1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cHFQ() //  [R1]
         { []
         }
     {offset
       cHFQ: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.showWord_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHFQ_info" {
     block_cHFQ_info:
         const _cHFQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.607626733 UTC

[section ""data" . GHC.Show.$fShowWord_$cshowList_closure" {
     GHC.Show.$fShowWord_$cshowList_closure:
         const GHC.Show.$fShowWord_$cshowList_info;
 },
 GHC.Show.$fShowWord_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cHGd: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowWord1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowWord_$cshowList_info" {
     GHC.Show.$fShowWord_$cshowList_info:
         const GHC.Show.$fShowWord_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.612398946 UTC

[section ""data" . GHC.Show.$fShowWord_$cshow_closure" {
     GHC.Show.$fShowWord_$cshow_closure:
         const GHC.Show.$fShowWord_$cshow_info;
 },
 GHC.Show.$fShowWord_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cHGr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cHGx; else goto cHGy;
       cHGx: // global
           R2 = R2;
           R1 = GHC.Show.$fShowWord_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cHGy: // global
           I64[Sp - 8] = block_cHGo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uHGD; else goto cHGp;
       uHGD: // global
           call _cHGo(R1) args: 0, res: 0, upd: 0;
       cHGp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowWord_$cshow_info" {
     GHC.Show.$fShowWord_$cshow_info:
         const GHC.Show.$fShowWord_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cHGo() //  [R1]
         { []
         }
     {offset
       cHGo: // global
           I64[Sp] = block_cHGu_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = I64[R1 + 7];
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cHGo_info" {
     block_cHGo_info:
         const _cHGo;
         const 0;
         const 30;
 },
 _cHGu() //  [R1, R2]
         { []
         }
     {offset
       cHGu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHGC; else goto cHGB;
       cHGC: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cHGB: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHGu_info" {
     block_cHGu_info:
         const _cHGu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.619844658 UTC

[section ""data" . GHC.Show.$fShowWord_closure" {
     GHC.Show.$fShowWord_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowWord_$cshowsPrec_closure+3;
         const GHC.Show.$fShowWord_$cshow_closure+1;
         const GHC.Show.$fShowWord_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.62256629 UTC

[section ""data" . GHC.Show.showChar_closure" {
     GHC.Show.showChar_closure:
         const GHC.Show.showChar_info;
 },
 GHC.Show.showChar_entry() //  [R2, R3]
         { []
         }
     {offset
       cHGX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHH1; else goto cHH0;
       cHH1: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.showChar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHH0: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showChar_info" {
     GHC.Show.showChar_info:
         const GHC.Show.showChar_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.630172513 UTC

[section ""data" . GHC.Show.showParen_closure" {
     GHC.Show.showParen_closure:
         const GHC.Show.showParen_info;
 },
 sat_sC68_entry() //  [R1]
         { []
         }
     {offset
       cHHr: // global
           _sC68::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cHHs; else goto cHHt;
       cHHt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cHHv; else goto cHHu;
       cHHv: // global
           HpAlloc = 24;
           goto cHHs;
       cHHs: // global
           R1 = _sC68::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHHu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC68::P64;
           _sC64::P64 = P64[_sC68::P64 + 16];
           _sC66::P64 = P64[_sC68::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sC66::P64;
           R2 = Hp - 14;
           R1 = _sC64::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC68_info" {
     sat_sC68_info:
         const sat_sC68_entry;
         const 2;
         const 18;
 },
 sat_sC69_entry() //  [R1, R2]
         { []
         }
     {offset
       cHHx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cHHB; else goto cHHA;
       cHHB: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cHHA: // global
           _sC64::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sC68_info;
           P64[Hp - 32] = _sC64::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sC69_info" {
     sat_sC69_info:
         const sat_sC69_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 GHC.Show.showParen_entry() //  [R2, R3]
         { []
         }
     {offset
       cHHG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHHH; else goto cHHI;
       cHHH: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.showParen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHHI: // global
           I64[Sp - 16] = block_cHHb_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uHHO; else goto cHHc;
       uHHO: // global
           call _cHHb(R1) args: 0, res: 0, upd: 0;
       cHHc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showParen_info" {
     GHC.Show.showParen_info:
         const GHC.Show.showParen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cHHb() //  [R1]
         { []
         }
     {offset
       cHHb: // global
           _sC64::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cHHD; else goto cHHE;
       cHHD: // global
           R1 = _sC64::P64;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cHHE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cHHN; else goto cHHM;
       cHHN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cHHM: // global
           I64[Hp - 8] = sat_sC69_info;
           P64[Hp] = _sC64::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHHb_info" {
     block_cHHb_info:
         const _cHHb;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.640488879 UTC

[section ""cstring" . lvl10_rC0n_bytes" {
     lvl10_rC0n_bytes:
         I8[] [102,111,108,100,114,49]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.643289892 UTC

[section ""data" . lvl11_rC0o_closure" {
     lvl11_rC0o_closure:
         const lvl11_rC0o_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_rC0o_entry() //  [R1]
         { []
         }
     {offset
       cHIj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cHIk; else goto cHIl;
       cHIk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHIl: // global
           (_cHIe::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cHIe::I64 == 0) goto cHIg; else goto cHIf;
       cHIg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cHIf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cHIe::I64;
           I64[Sp - 24] = block_cHIh_info;
           R2 = lvl10_rC0n_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_rC0o_info" {
     lvl11_rC0o_info:
         const lvl11_rC0o_entry;
         const 0;
         const 4294967317;
         const SCNU_srt+96;
 },
 _cHIh() //  [R1]
         { []
         }
     {offset
       cHIh: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.List.errorEmptyList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cHIh_info" {
     block_cHIh_info:
         const _cHIh;
         const 0;
         const 4294967326;
         const SCNU_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.651507308 UTC

[section ""data" . go2_rC0p_closure" {
     go2_rC0p_closure:
         const go2_rC0p_info;
         const 0;
 },
 sat_sC6k_entry() //  [R1]
         { []
         }
     {offset
       cHIT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHIU; else goto cHIV;
       cHIU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHIV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call go2_rC0p_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC6k_info" {
     sat_sC6k_info:
         const sat_sC6k_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+104;
 },
 go2_rC0p_entry() //  [R2, R3]
         { []
         }
     {offset
       cHJ0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cHJ1; else goto cHJ2;
       cHJ1: // global
           R3 = R3;
           R2 = R2;
           R1 = go2_rC0p_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHJ2: // global
           I64[Sp - 16] = block_cHID_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uHJh; else goto cHIE;
       uHJh: // global
           call _cHID(R1) args: 0, res: 0, upd: 0;
       cHIE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go2_rC0p_info" {
     go2_rC0p_info:
         const go2_rC0p_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SCNU_srt+104;
 },
 _cHID() //  [R1]
         { []
         }
     {offset
       cHID: // global
           if (R1 & 7 == 1) goto cHIX; else goto cHIY;
       cHIX: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cHIY: // global
           I64[Sp - 8] = block_cHIJ_info;
           _sC6f::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sC6f::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uHJg; else goto cHIK;
       uHJg: // global
           call _cHIJ(R1) args: 0, res: 0, upd: 0;
       cHIK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cHID_info" {
     block_cHID_info:
         const _cHID;
         const 1;
         const 12884901918;
         const SCNU_srt+104;
 },
 _cHIJ() //  [R1]
         { []
         }
     {offset
       cHIJ: // global
           _sC6c::P64 = P64[Sp + 16];
           _sC6f::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cHJ9; else goto cHJb;
       cHJ9: // global
           R2 = _sC6c::P64;
           R1 = _sC6f::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cHJb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cHJe; else goto cHJd;
       cHJe: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cHJd: // global
           I64[Hp - 48] = sat_sC6k_info;
           P64[Hp - 32] = _sC6c::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sC6f::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHIJ_info" {
     block_cHIJ_info:
         const _cHIJ;
         const 2;
         const 4294967326;
         const SCNU_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.673402463 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cHJF: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 112, res: 0, upd: 8;
     }
 },
 sat_sC78_entry() //  [R1]
         { []
         }
     {offset
       cHJX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHJY; else goto cHJZ;
       cHJY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHJZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC78_info" {
     sat_sC78_info:
         const sat_sC78_entry;
         const 2;
         const 18;
 },
 sat_sC77_entry() //  [R1]
         { []
         }
     {offset
       cHK5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHK6; else goto cHK7;
       cHK6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHK7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC77_info" {
     sat_sC77_info:
         const sat_sC77_entry;
         const 2;
         const 18;
 },
 sat_sC76_entry() //  [R1]
         { []
         }
     {offset
       cHKd: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHKe; else goto cHKf;
       cHKe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHKf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC76_info" {
     sat_sC76_info:
         const sat_sC76_entry;
         const 2;
         const 18;
 },
 sat_sC75_entry() //  [R1]
         { []
         }
     {offset
       cHKl: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHKm; else goto cHKn;
       cHKm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHKn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC75_info" {
     sat_sC75_info:
         const sat_sC75_entry;
         const 2;
         const 18;
 },
 sat_sC74_entry() //  [R1]
         { []
         }
     {offset
       cHKt: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHKu; else goto cHKv;
       cHKu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHKv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC74_info" {
     sat_sC74_info:
         const sat_sC74_entry;
         const 2;
         const 18;
 },
 sat_sC73_entry() //  [R1]
         { []
         }
     {offset
       cHKB: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHKC; else goto cHKD;
       cHKC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHKD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC73_info" {
     sat_sC73_info:
         const sat_sC73_entry;
         const 2;
         const 18;
 },
 sat_sC72_entry() //  [R1]
         { []
         }
     {offset
       cHKJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHKK; else goto cHKL;
       cHKK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHKL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC72_info" {
     sat_sC72_info:
         const sat_sC72_entry;
         const 2;
         const 18;
 },
 sat_sC71_entry() //  [R1]
         { []
         }
     {offset
       cHKR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHKS; else goto cHKT;
       cHKS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHKT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC71_info" {
     sat_sC71_info:
         const sat_sC71_entry;
         const 2;
         const 18;
 },
 sat_sC70_entry() //  [R1]
         { []
         }
     {offset
       cHKZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHL0; else goto cHL1;
       cHL0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHL1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC70_info" {
     sat_sC70_info:
         const sat_sC70_entry;
         const 2;
         const 18;
 },
 sat_sC6Z_entry() //  [R1]
         { []
         }
     {offset
       cHL7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHL8; else goto cHL9;
       cHL8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHL9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC6Z_info" {
     sat_sC6Z_info:
         const sat_sC6Z_entry;
         const 2;
         const 18;
 },
 sat_sC6Y_entry() //  [R1]
         { []
         }
     {offset
       cHLf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHLg; else goto cHLh;
       cHLg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHLh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC6Y_info" {
     sat_sC6Y_info:
         const sat_sC6Y_entry;
         const 2;
         const 18;
 },
 sat_sC6X_entry() //  [R1]
         { []
         }
     {offset
       cHLn: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHLo; else goto cHLp;
       cHLo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHLp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC6X_info" {
     sat_sC6X_info:
         const sat_sC6X_entry;
         const 2;
         const 18;
 },
 sat_sC6W_entry() //  [R1]
         { []
         }
     {offset
       cHLv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHLw; else goto cHLx;
       cHLw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHLx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC6W_info" {
     sat_sC6W_info:
         const sat_sC6W_entry;
         const 2;
         const 18;
 },
 sat_sC6V_entry() //  [R1]
         { []
         }
     {offset
       cHLD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHLE; else goto cHLF;
       cHLE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHLF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC6V_info" {
     sat_sC6V_info:
         const sat_sC6V_entry;
         const 2;
         const 18;
 },
 sat_sC6U_entry() //  [R1]
         { []
         }
     {offset
       cHLL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHLM; else goto cHLN;
       cHLM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHLN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC6U_info" {
     sat_sC6U_info:
         const sat_sC6U_entry;
         const 2;
         const 18;
 },
 sat_sC7p_entry() //  [R1]
         { []
         }
     {offset
       cHLP: // global
           _sC7p::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cHLQ; else goto cHLR;
       cHLR: // global
           Hp = Hp + 864;
           if (Hp > HpLim) (likely: False) goto cHLT; else goto cHLS;
       cHLT: // global
           HpAlloc = 864;
           goto cHLQ;
       cHLQ: // global
           R1 = _sC7p::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHLS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC7p::P64;
           _sC6m::P64 = P64[_sC7p::P64 + 16];
           _sC6n::P64 = P64[_sC7p::P64 + 24];
           _sC6o::P64 = P64[_sC7p::P64 + 32];
           _sC6p::P64 = P64[_sC7p::P64 + 40];
           _sC6q::P64 = P64[_sC7p::P64 + 48];
           _sC6r::P64 = P64[_sC7p::P64 + 56];
           _sC6s::P64 = P64[_sC7p::P64 + 64];
           _sC6t::P64 = P64[_sC7p::P64 + 72];
           _sC6u::P64 = P64[_sC7p::P64 + 80];
           _sC6v::P64 = P64[_sC7p::P64 + 88];
           _sC6w::P64 = P64[_sC7p::P64 + 96];
           _sC6x::P64 = P64[_sC7p::P64 + 104];
           _sC6y::P64 = P64[_sC7p::P64 + 112];
           _sC6z::P64 = P64[_sC7p::P64 + 120];
           _sC6A::P64 = P64[_sC7p::P64 + 128];
           _sC6D::P64 = P64[_sC7p::P64 + 136];
           _sC6F::P64 = P64[_sC7p::P64 + 144];
           _sC6G::P64 = P64[_sC7p::P64 + 152];
           _sC6H::P64 = P64[_sC7p::P64 + 160];
           _sC6I::P64 = P64[_sC7p::P64 + 168];
           _sC6J::P64 = P64[_sC7p::P64 + 176];
           _sC6K::P64 = P64[_sC7p::P64 + 184];
           _sC6L::P64 = P64[_sC7p::P64 + 192];
           _sC6M::P64 = P64[_sC7p::P64 + 200];
           _sC6N::P64 = P64[_sC7p::P64 + 208];
           _sC6O::P64 = P64[_sC7p::P64 + 216];
           _sC6P::P64 = P64[_sC7p::P64 + 224];
           _sC6Q::P64 = P64[_sC7p::P64 + 232];
           _sC6R::P64 = P64[_sC7p::P64 + 240];
           _sC6S::P64 = P64[_sC7p::P64 + 248];
           _sC6T::P64 = P64[_sC7p::P64 + 256];
           I64[Hp - 856] = :_con_info;
           P64[Hp - 848] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 840] = _sC6D::P64;
           I64[Hp - 832] = sat_sC78_info;
           P64[Hp - 816] = _sC6A::P64;
           P64[Hp - 808] = _sC6T::P64;
           I64[Hp - 800] = :_con_info;
           P64[Hp - 792] = Hp - 832;
           P64[Hp - 784] = GHC.Types.[]_closure+1;
           I64[Hp - 776] = sat_sC77_info;
           P64[Hp - 760] = _sC6z::P64;
           P64[Hp - 752] = _sC6S::P64;
           I64[Hp - 744] = :_con_info;
           P64[Hp - 736] = Hp - 776;
           P64[Hp - 728] = Hp - 798;
           I64[Hp - 720] = sat_sC76_info;
           P64[Hp - 704] = _sC6y::P64;
           P64[Hp - 696] = _sC6R::P64;
           I64[Hp - 688] = :_con_info;
           P64[Hp - 680] = Hp - 720;
           P64[Hp - 672] = Hp - 742;
           I64[Hp - 664] = sat_sC75_info;
           P64[Hp - 648] = _sC6x::P64;
           P64[Hp - 640] = _sC6Q::P64;
           I64[Hp - 632] = :_con_info;
           P64[Hp - 624] = Hp - 664;
           P64[Hp - 616] = Hp - 686;
           I64[Hp - 608] = sat_sC74_info;
           P64[Hp - 592] = _sC6w::P64;
           P64[Hp - 584] = _sC6P::P64;
           I64[Hp - 576] = :_con_info;
           P64[Hp - 568] = Hp - 608;
           P64[Hp - 560] = Hp - 630;
           I64[Hp - 552] = sat_sC73_info;
           P64[Hp - 536] = _sC6v::P64;
           P64[Hp - 528] = _sC6O::P64;
           I64[Hp - 520] = :_con_info;
           P64[Hp - 512] = Hp - 552;
           P64[Hp - 504] = Hp - 574;
           I64[Hp - 496] = sat_sC72_info;
           P64[Hp - 480] = _sC6u::P64;
           P64[Hp - 472] = _sC6N::P64;
           I64[Hp - 464] = :_con_info;
           P64[Hp - 456] = Hp - 496;
           P64[Hp - 448] = Hp - 518;
           I64[Hp - 440] = sat_sC71_info;
           P64[Hp - 424] = _sC6t::P64;
           P64[Hp - 416] = _sC6M::P64;
           I64[Hp - 408] = :_con_info;
           P64[Hp - 400] = Hp - 440;
           P64[Hp - 392] = Hp - 462;
           I64[Hp - 384] = sat_sC70_info;
           P64[Hp - 368] = _sC6s::P64;
           P64[Hp - 360] = _sC6L::P64;
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = Hp - 384;
           P64[Hp - 336] = Hp - 406;
           I64[Hp - 328] = sat_sC6Z_info;
           P64[Hp - 312] = _sC6r::P64;
           P64[Hp - 304] = _sC6K::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = Hp - 350;
           I64[Hp - 272] = sat_sC6Y_info;
           P64[Hp - 256] = _sC6q::P64;
           P64[Hp - 248] = _sC6J::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sC6X_info;
           P64[Hp - 200] = _sC6p::P64;
           P64[Hp - 192] = _sC6I::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sC6W_info;
           P64[Hp - 144] = _sC6o::P64;
           P64[Hp - 136] = _sC6H::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sC6V_info;
           P64[Hp - 88] = _sC6n::P64;
           P64[Hp - 80] = _sC6G::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sC6U_info;
           P64[Hp - 32] = _sC6m::P64;
           P64[Hp - 24] = _sC6F::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 854;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call go2_rC0p_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC7p_info" {
     sat_sC7p_info:
         const sat_sC7p_entry;
         const 31;
         const 4294967311;
         const SCNU_srt+104;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       cHLU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cHLW; else goto cHLX;
       cHLW: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 152, res: 0, upd: 8;
       cHLX: // global
           I64[Sp - 32] = block_cHJJ_info;
           R1 = P64[Sp + 88];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 80] = R3;
           P64[Sp + 88] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uHM1; else goto cHJK;
       uHM1: // global
           call _cHJJ(R1) args: 0, res: 0, upd: 0;
       cHJK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_entry;
         const 0;
         const 21474836494;
         const 77309411328;
         const SCNU_srt+104;
         const 18;
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_slow;
 },
 _cHJJ() //  [R1]
         { []
         }
     {offset
       cHJJ: // global
           Hp = Hp + 288;
           if (Hp > HpLim) (likely: False) goto cHM0; else goto cHLZ;
       cHM0: // global
           HpAlloc = 288;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cHLZ: // global
           _sC6F::P64 = P64[R1 + 7];
           _sC6G::P64 = P64[R1 + 15];
           _sC6H::P64 = P64[R1 + 23];
           _sC6I::P64 = P64[R1 + 31];
           _sC6J::P64 = P64[R1 + 39];
           _sC6K::P64 = P64[R1 + 47];
           _sC6L::P64 = P64[R1 + 55];
           _sC6M::P64 = P64[R1 + 63];
           _sC6N::P64 = P64[R1 + 71];
           _sC6O::P64 = P64[R1 + 79];
           _sC6P::P64 = P64[R1 + 87];
           _sC6Q::P64 = P64[R1 + 95];
           _sC6R::P64 = P64[R1 + 103];
           _sC6S::P64 = P64[R1 + 111];
           _sC6T::P64 = P64[R1 + 119];
           I64[Hp - 280] = sat_sC7p_info;
           P64[Hp - 264] = P64[Sp + 120];
           P64[Hp - 256] = P64[Sp + 112];
           P64[Hp - 248] = P64[Sp + 8];
           P64[Hp - 240] = P64[Sp + 16];
           P64[Hp - 232] = P64[Sp + 24];
           P64[Hp - 224] = P64[Sp + 32];
           P64[Hp - 216] = P64[Sp + 40];
           P64[Hp - 208] = P64[Sp + 48];
           P64[Hp - 200] = P64[Sp + 56];
           P64[Hp - 192] = P64[Sp + 64];
           P64[Hp - 184] = P64[Sp + 72];
           P64[Hp - 176] = P64[Sp + 80];
           P64[Hp - 168] = P64[Sp + 88];
           P64[Hp - 160] = P64[Sp + 96];
           P64[Hp - 152] = P64[Sp + 104];
           P64[Hp - 144] = P64[Sp + 128];
           P64[Hp - 136] = _sC6F::P64;
           P64[Hp - 128] = _sC6G::P64;
           P64[Hp - 120] = _sC6H::P64;
           P64[Hp - 112] = _sC6I::P64;
           P64[Hp - 104] = _sC6J::P64;
           P64[Hp - 96] = _sC6K::P64;
           P64[Hp - 88] = _sC6L::P64;
           P64[Hp - 80] = _sC6M::P64;
           P64[Hp - 72] = _sC6N::P64;
           P64[Hp - 64] = _sC6O::P64;
           P64[Hp - 56] = _sC6P::P64;
           P64[Hp - 48] = _sC6Q::P64;
           P64[Hp - 40] = _sC6R::P64;
           P64[Hp - 32] = _sC6S::P64;
           P64[Hp - 24] = _sC6T::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 280;
           R1 = Hp - 14;
           Sp = Sp + 136;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHJJ_info" {
     block_cHJJ_info:
         const _cHJJ;
         const 16;
         const 4294967326;
         const SCNU_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.715557762 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cHOg: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 96, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cHOk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHOl; else goto cHOm;
       cHOl: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 136, res: 0, upd: 8;
       cHOm: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = P64[Sp + 32];
           P64[Sp + 24] = P64[Sp + 40];
           P64[Sp + 32] = P64[Sp + 48];
           P64[Sp + 40] = P64[Sp + 56];
           P64[Sp + 48] = P64[Sp + 64];
           P64[Sp + 56] = P64[Sp + 72];
           P64[Sp + 64] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp + 72] = P64[Sp + 80];
           P64[Sp + 80] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 112, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 68719476736;
         const SCNU_srt+120;
         const 16;
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.72316856 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cHOG: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 104, res: 0, upd: 8;
     }
 },
 sat_sC7X_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cHOP: // global
           if ((Sp + -104) < SpLim) (likely: False) goto cHOQ; else goto cHOR;
       cHOQ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHOR: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 104] = P64[R1 + 46];
           P64[Sp - 96] = P64[R1 + 54];
           P64[Sp - 88] = P64[R1 + 62];
           P64[Sp - 80] = P64[R1 + 70];
           P64[Sp - 72] = P64[R1 + 78];
           P64[Sp - 64] = P64[R1 + 86];
           P64[Sp - 56] = P64[R1 + 94];
           P64[Sp - 48] = P64[R1 + 102];
           P64[Sp - 40] = P64[R1 + 110];
           P64[Sp - 32] = P64[R1 + 118];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 104;
           call GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 112, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sC7X_info" {
     sat_sC7X_info:
         const sat_sC7X_entry;
         const 15;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+120;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       cHOS: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cHOW; else goto cHOV;
       cHOW: // global
           HpAlloc = 128;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 144, res: 0, upd: 8;
       cHOV: // global
           I64[Hp - 120] = sat_sC7X_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = P64[Sp];
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 64];
           P64[Hp] = P64[Sp + 72];
           R4 = P64[Sp + 88];
           R3 = P64[Sp + 80];
           R2 = Hp - 118;
           Sp = Sp + 96;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 73014444032;
         const SCNU_srt+120;
         const 17;
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.736146153 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       cHPs: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,,,)_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_sC8f_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cHPB: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cHPC; else goto cHPD;
       cHPC: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHPD: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 96] = P64[R1 + 46];
           P64[Sp - 88] = P64[R1 + 54];
           P64[Sp - 80] = P64[R1 + 62];
           P64[Sp - 72] = P64[R1 + 70];
           P64[Sp - 64] = P64[R1 + 78];
           P64[Sp - 56] = P64[R1 + 86];
           P64[Sp - 48] = P64[R1 + 94];
           P64[Sp - 40] = P64[R1 + 102];
           P64[Sp - 32] = P64[R1 + 110];
           P64[Sp - 24] = P64[R1 + 118];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 96;
           call GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 104, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sC8f_info" {
     sat_sC8f_info:
         const sat_sC8f_entry;
         const 15;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+136;
 },
 sat_sC8e_entry() //  [R1, R2]
         { []
         }
     {offset
       cHPJ: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cHPK; else goto cHPL;
       cHPK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cHPL: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 88] = P64[R1 + 47];
           P64[Sp - 80] = P64[R1 + 55];
           P64[Sp - 72] = P64[R1 + 63];
           P64[Sp - 64] = P64[R1 + 71];
           P64[Sp - 56] = P64[R1 + 79];
           P64[Sp - 48] = P64[R1 + 87];
           P64[Sp - 40] = P64[R1 + 95];
           P64[Sp - 32] = P64[R1 + 103];
           P64[Sp - 24] = P64[R1 + 111];
           P64[Sp - 16] = P64[R1 + 119];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 88;
           call GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 96, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sC8e_info" {
     sat_sC8e_info:
         const sat_sC8e_entry;
         const 15;
         const 4294967304;
         const 4294967301;
         const SCNU_srt+128;
 },
 sat_sC8d_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cHPR: // global
           if ((Sp + -104) < SpLim) (likely: False) goto cHPS; else goto cHPT;
       cHPS: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cHPT: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 104] = P64[R1 + 45];
           P64[Sp - 96] = P64[R1 + 53];
           P64[Sp - 88] = P64[R1 + 61];
           P64[Sp - 80] = P64[R1 + 69];
           P64[Sp - 72] = P64[R1 + 77];
           P64[Sp - 64] = P64[R1 + 85];
           P64[Sp - 56] = P64[R1 + 93];
           P64[Sp - 48] = P64[R1 + 101];
           P64[Sp - 40] = P64[R1 + 109];
           P64[Sp - 32] = P64[R1 + 117];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 104;
           call GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 112, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sC8d_info" {
     sat_sC8d_info:
         const sat_sC8d_entry;
         const 15;
         const 4294967304;
         const 12884901911;
         const SCNU_srt+120;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cHPV: // global
           Hp = Hp + 416;
           if (Hp > HpLim) (likely: False) goto cHPZ; else goto cHPY;
       cHPZ: // global
           HpAlloc = 416;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       cHPY: // global
           I64[Hp - 408] = sat_sC8f_info;
           P64[Hp - 400] = R2;
           P64[Hp - 392] = R3;
           P64[Hp - 384] = R4;
           P64[Hp - 376] = R5;
           P64[Hp - 368] = R6;
           _sC83::P64 = P64[Sp];
           P64[Hp - 360] = _sC83::P64;
           _sC84::P64 = P64[Sp + 8];
           P64[Hp - 352] = _sC84::P64;
           _sC85::P64 = P64[Sp + 16];
           P64[Hp - 344] = _sC85::P64;
           _sC86::P64 = P64[Sp + 24];
           P64[Hp - 336] = _sC86::P64;
           _sC87::P64 = P64[Sp + 32];
           P64[Hp - 328] = _sC87::P64;
           _sC88::P64 = P64[Sp + 40];
           P64[Hp - 320] = _sC88::P64;
           _sC89::P64 = P64[Sp + 48];
           P64[Hp - 312] = _sC89::P64;
           _sC8a::P64 = P64[Sp + 56];
           P64[Hp - 304] = _sC8a::P64;
           _sC8b::P64 = P64[Sp + 64];
           P64[Hp - 296] = _sC8b::P64;
           _sC8c::P64 = P64[Sp + 72];
           P64[Hp - 288] = _sC8c::P64;
           I64[Hp - 280] = sat_sC8e_info;
           P64[Hp - 272] = R2;
           P64[Hp - 264] = R3;
           P64[Hp - 256] = R4;
           P64[Hp - 248] = R5;
           P64[Hp - 240] = R6;
           P64[Hp - 232] = _sC83::P64;
           P64[Hp - 224] = _sC84::P64;
           P64[Hp - 216] = _sC85::P64;
           P64[Hp - 208] = _sC86::P64;
           P64[Hp - 200] = _sC87::P64;
           P64[Hp - 192] = _sC88::P64;
           P64[Hp - 184] = _sC89::P64;
           P64[Hp - 176] = _sC8a::P64;
           P64[Hp - 168] = _sC8b::P64;
           P64[Hp - 160] = _sC8c::P64;
           I64[Hp - 152] = sat_sC8d_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           P64[Hp - 128] = R4;
           P64[Hp - 120] = R5;
           P64[Hp - 112] = R6;
           P64[Hp - 104] = _sC83::P64;
           P64[Hp - 96] = _sC84::P64;
           P64[Hp - 88] = _sC85::P64;
           P64[Hp - 80] = _sC86::P64;
           P64[Hp - 72] = _sC87::P64;
           P64[Hp - 64] = _sC88::P64;
           P64[Hp - 56] = _sC89::P64;
           P64[Hp - 48] = _sC8a::P64;
           P64[Hp - 40] = _sC8b::P64;
           P64[Hp - 32] = _sC8c::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 149;
           P64[Hp - 8] = Hp - 279;
           P64[Hp] = Hp - 406;
           R1 = Hp - 23;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,,,)_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,,,)_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_entry;
         const 0;
         const 64424509454;
         const 64424509440;
         const SCNU_srt+120;
         const 15;
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.752428114 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_info;
         const 0;
 },
 sat_sC8p_entry() //  [R1]
         { []
         }
     {offset
       cHRa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHRb; else goto cHRc;
       cHRb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHRc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC8p_info" {
     sat_sC8p_info:
         const sat_sC8p_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+152;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cHRh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cHRi; else goto cHRj;
       cHRi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHRj: // global
           I64[Sp - 16] = block_cHQU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uHRy; else goto cHQV;
       uHRy: // global
           call _cHQU(R1) args: 0, res: 0, upd: 0;
       cHQV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_entry;
         const 0;
         const 141733920782;
         const 8589934607;
         const SCNU_srt+112;
 },
 _cHQU() //  [R1]
         { []
         }
     {offset
       cHQU: // global
           if (R1 & 7 == 1) goto cHRe; else goto cHRf;
       cHRe: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cHRf: // global
           I64[Sp - 8] = block_cHR0_info;
           _sC8k::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sC8k::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uHRx; else goto cHR1;
       uHRx: // global
           call _cHR0(R1) args: 0, res: 0, upd: 0;
       cHR1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cHQU_info" {
     block_cHQU_info:
         const _cHQU;
         const 1;
         const 141733920798;
         const SCNU_srt+112;
 },
 _cHR0() //  [R1]
         { []
         }
     {offset
       cHR0: // global
           _sC8h::P64 = P64[Sp + 16];
           _sC8k::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cHRq; else goto cHRs;
       cHRq: // global
           R2 = _sC8h::P64;
           R1 = _sC8k::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cHRs: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cHRv; else goto cHRu;
       cHRv: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cHRu: // global
           I64[Hp - 48] = sat_sC8p_info;
           P64[Hp - 32] = _sC8h::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sC8k::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHR0_info" {
     block_cHR0_info:
         const _cHR0;
         const 2;
         const 4294967326;
         const SCNU_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.773034902 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cHRW: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 104, res: 0, upd: 8;
     }
 },
 sat_sC9a_entry() //  [R1]
         { []
         }
     {offset
       cHSe: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHSf; else goto cHSg;
       cHSf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHSg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC9a_info" {
     sat_sC9a_info:
         const sat_sC9a_entry;
         const 2;
         const 18;
 },
 sat_sC99_entry() //  [R1]
         { []
         }
     {offset
       cHSm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHSn; else goto cHSo;
       cHSn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHSo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC99_info" {
     sat_sC99_info:
         const sat_sC99_entry;
         const 2;
         const 18;
 },
 sat_sC98_entry() //  [R1]
         { []
         }
     {offset
       cHSu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHSv; else goto cHSw;
       cHSv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHSw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC98_info" {
     sat_sC98_info:
         const sat_sC98_entry;
         const 2;
         const 18;
 },
 sat_sC97_entry() //  [R1]
         { []
         }
     {offset
       cHSC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHSD; else goto cHSE;
       cHSD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHSE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC97_info" {
     sat_sC97_info:
         const sat_sC97_entry;
         const 2;
         const 18;
 },
 sat_sC96_entry() //  [R1]
         { []
         }
     {offset
       cHSK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHSL; else goto cHSM;
       cHSL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHSM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC96_info" {
     sat_sC96_info:
         const sat_sC96_entry;
         const 2;
         const 18;
 },
 sat_sC95_entry() //  [R1]
         { []
         }
     {offset
       cHSS: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHST; else goto cHSU;
       cHST: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHSU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC95_info" {
     sat_sC95_info:
         const sat_sC95_entry;
         const 2;
         const 18;
 },
 sat_sC94_entry() //  [R1]
         { []
         }
     {offset
       cHT0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHT1; else goto cHT2;
       cHT1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHT2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC94_info" {
     sat_sC94_info:
         const sat_sC94_entry;
         const 2;
         const 18;
 },
 sat_sC93_entry() //  [R1]
         { []
         }
     {offset
       cHT8: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHT9; else goto cHTa;
       cHT9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHTa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC93_info" {
     sat_sC93_info:
         const sat_sC93_entry;
         const 2;
         const 18;
 },
 sat_sC92_entry() //  [R1]
         { []
         }
     {offset
       cHTg: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHTh; else goto cHTi;
       cHTh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHTi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC92_info" {
     sat_sC92_info:
         const sat_sC92_entry;
         const 2;
         const 18;
 },
 sat_sC91_entry() //  [R1]
         { []
         }
     {offset
       cHTo: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHTp; else goto cHTq;
       cHTp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHTq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC91_info" {
     sat_sC91_info:
         const sat_sC91_entry;
         const 2;
         const 18;
 },
 sat_sC90_entry() //  [R1]
         { []
         }
     {offset
       cHTw: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHTx; else goto cHTy;
       cHTx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHTy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC90_info" {
     sat_sC90_info:
         const sat_sC90_entry;
         const 2;
         const 18;
 },
 sat_sC8Z_entry() //  [R1]
         { []
         }
     {offset
       cHTE: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHTF; else goto cHTG;
       cHTF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHTG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC8Z_info" {
     sat_sC8Z_info:
         const sat_sC8Z_entry;
         const 2;
         const 18;
 },
 sat_sC8Y_entry() //  [R1]
         { []
         }
     {offset
       cHTM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHTN; else goto cHTO;
       cHTN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHTO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC8Y_info" {
     sat_sC8Y_info:
         const sat_sC8Y_entry;
         const 2;
         const 18;
 },
 sat_sC8X_entry() //  [R1]
         { []
         }
     {offset
       cHTU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cHTV; else goto cHTW;
       cHTV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHTW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC8X_info" {
     sat_sC8X_info:
         const sat_sC8X_entry;
         const 2;
         const 18;
 },
 sat_sC9q_entry() //  [R1]
         { []
         }
     {offset
       cHTY: // global
           _sC9q::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cHTZ; else goto cHU0;
       cHU0: // global
           Hp = Hp + 808;
           if (Hp > HpLim) (likely: False) goto cHU2; else goto cHU1;
       cHU2: // global
           HpAlloc = 808;
           goto cHTZ;
       cHTZ: // global
           R1 = _sC9q::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHU1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sC9q::P64;
           _sC8r::P64 = P64[_sC9q::P64 + 16];
           _sC8s::P64 = P64[_sC9q::P64 + 24];
           _sC8t::P64 = P64[_sC9q::P64 + 32];
           _sC8u::P64 = P64[_sC9q::P64 + 40];
           _sC8v::P64 = P64[_sC9q::P64 + 48];
           _sC8w::P64 = P64[_sC9q::P64 + 56];
           _sC8x::P64 = P64[_sC9q::P64 + 64];
           _sC8y::P64 = P64[_sC9q::P64 + 72];
           _sC8z::P64 = P64[_sC9q::P64 + 80];
           _sC8A::P64 = P64[_sC9q::P64 + 88];
           _sC8B::P64 = P64[_sC9q::P64 + 96];
           _sC8C::P64 = P64[_sC9q::P64 + 104];
           _sC8D::P64 = P64[_sC9q::P64 + 112];
           _sC8E::P64 = P64[_sC9q::P64 + 120];
           _sC8H::P64 = P64[_sC9q::P64 + 128];
           _sC8J::P64 = P64[_sC9q::P64 + 136];
           _sC8K::P64 = P64[_sC9q::P64 + 144];
           _sC8L::P64 = P64[_sC9q::P64 + 152];
           _sC8M::P64 = P64[_sC9q::P64 + 160];
           _sC8N::P64 = P64[_sC9q::P64 + 168];
           _sC8O::P64 = P64[_sC9q::P64 + 176];
           _sC8P::P64 = P64[_sC9q::P64 + 184];
           _sC8Q::P64 = P64[_sC9q::P64 + 192];
           _sC8R::P64 = P64[_sC9q::P64 + 200];
           _sC8S::P64 = P64[_sC9q::P64 + 208];
           _sC8T::P64 = P64[_sC9q::P64 + 216];
           _sC8U::P64 = P64[_sC9q::P64 + 224];
           _sC8V::P64 = P64[_sC9q::P64 + 232];
           _sC8W::P64 = P64[_sC9q::P64 + 240];
           I64[Hp - 800] = :_con_info;
           P64[Hp - 792] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 784] = _sC8H::P64;
           I64[Hp - 776] = sat_sC9a_info;
           P64[Hp - 760] = _sC8E::P64;
           P64[Hp - 752] = _sC8W::P64;
           I64[Hp - 744] = :_con_info;
           P64[Hp - 736] = Hp - 776;
           P64[Hp - 728] = GHC.Types.[]_closure+1;
           I64[Hp - 720] = sat_sC99_info;
           P64[Hp - 704] = _sC8D::P64;
           P64[Hp - 696] = _sC8V::P64;
           I64[Hp - 688] = :_con_info;
           P64[Hp - 680] = Hp - 720;
           P64[Hp - 672] = Hp - 742;
           I64[Hp - 664] = sat_sC98_info;
           P64[Hp - 648] = _sC8C::P64;
           P64[Hp - 640] = _sC8U::P64;
           I64[Hp - 632] = :_con_info;
           P64[Hp - 624] = Hp - 664;
           P64[Hp - 616] = Hp - 686;
           I64[Hp - 608] = sat_sC97_info;
           P64[Hp - 592] = _sC8B::P64;
           P64[Hp - 584] = _sC8T::P64;
           I64[Hp - 576] = :_con_info;
           P64[Hp - 568] = Hp - 608;
           P64[Hp - 560] = Hp - 630;
           I64[Hp - 552] = sat_sC96_info;
           P64[Hp - 536] = _sC8A::P64;
           P64[Hp - 528] = _sC8S::P64;
           I64[Hp - 520] = :_con_info;
           P64[Hp - 512] = Hp - 552;
           P64[Hp - 504] = Hp - 574;
           I64[Hp - 496] = sat_sC95_info;
           P64[Hp - 480] = _sC8z::P64;
           P64[Hp - 472] = _sC8R::P64;
           I64[Hp - 464] = :_con_info;
           P64[Hp - 456] = Hp - 496;
           P64[Hp - 448] = Hp - 518;
           I64[Hp - 440] = sat_sC94_info;
           P64[Hp - 424] = _sC8y::P64;
           P64[Hp - 416] = _sC8Q::P64;
           I64[Hp - 408] = :_con_info;
           P64[Hp - 400] = Hp - 440;
           P64[Hp - 392] = Hp - 462;
           I64[Hp - 384] = sat_sC93_info;
           P64[Hp - 368] = _sC8x::P64;
           P64[Hp - 360] = _sC8P::P64;
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = Hp - 384;
           P64[Hp - 336] = Hp - 406;
           I64[Hp - 328] = sat_sC92_info;
           P64[Hp - 312] = _sC8w::P64;
           P64[Hp - 304] = _sC8O::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = Hp - 350;
           I64[Hp - 272] = sat_sC91_info;
           P64[Hp - 256] = _sC8v::P64;
           P64[Hp - 248] = _sC8N::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sC90_info;
           P64[Hp - 200] = _sC8u::P64;
           P64[Hp - 192] = _sC8M::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sC8Z_info;
           P64[Hp - 144] = _sC8t::P64;
           P64[Hp - 136] = _sC8L::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sC8Y_info;
           P64[Hp - 88] = _sC8s::P64;
           P64[Hp - 80] = _sC8K::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sC8X_info;
           P64[Hp - 32] = _sC8r::P64;
           P64[Hp - 24] = _sC8J::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 798;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sC9q_info" {
     sat_sC9q_info:
         const sat_sC9q_entry;
         const 29;
         const 4294967311;
         const SCNU_srt+152;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       cHU3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cHU5; else goto cHU6;
       cHU5: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 144, res: 0, upd: 8;
       cHU6: // global
           I64[Sp - 32] = block_cHS0_info;
           R1 = P64[Sp + 80];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 72] = R3;
           P64[Sp + 80] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uHUa; else goto cHS1;
       uHUa: // global
           call _cHS0(R1) args: 0, res: 0, upd: 0;
       cHS1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 73014444032;
         const SCNU_srt+152;
         const 17;
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_slow;
 },
 _cHS0() //  [R1]
         { []
         }
     {offset
       cHS0: // global
           Hp = Hp + 272;
           if (Hp > HpLim) (likely: False) goto cHU9; else goto cHU8;
       cHU9: // global
           HpAlloc = 272;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cHU8: // global
           _sC8J::P64 = P64[R1 + 7];
           _sC8K::P64 = P64[R1 + 15];
           _sC8L::P64 = P64[R1 + 23];
           _sC8M::P64 = P64[R1 + 31];
           _sC8N::P64 = P64[R1 + 39];
           _sC8O::P64 = P64[R1 + 47];
           _sC8P::P64 = P64[R1 + 55];
           _sC8Q::P64 = P64[R1 + 63];
           _sC8R::P64 = P64[R1 + 71];
           _sC8S::P64 = P64[R1 + 79];
           _sC8T::P64 = P64[R1 + 87];
           _sC8U::P64 = P64[R1 + 95];
           _sC8V::P64 = P64[R1 + 103];
           _sC8W::P64 = P64[R1 + 111];
           I64[Hp - 264] = sat_sC9q_info;
           P64[Hp - 248] = P64[Sp + 112];
           P64[Hp - 240] = P64[Sp + 104];
           P64[Hp - 232] = P64[Sp + 8];
           P64[Hp - 224] = P64[Sp + 16];
           P64[Hp - 216] = P64[Sp + 24];
           P64[Hp - 208] = P64[Sp + 32];
           P64[Hp - 200] = P64[Sp + 40];
           P64[Hp - 192] = P64[Sp + 48];
           P64[Hp - 184] = P64[Sp + 56];
           P64[Hp - 176] = P64[Sp + 64];
           P64[Hp - 168] = P64[Sp + 72];
           P64[Hp - 160] = P64[Sp + 80];
           P64[Hp - 152] = P64[Sp + 88];
           P64[Hp - 144] = P64[Sp + 96];
           P64[Hp - 136] = P64[Sp + 120];
           P64[Hp - 128] = _sC8J::P64;
           P64[Hp - 120] = _sC8K::P64;
           P64[Hp - 112] = _sC8L::P64;
           P64[Hp - 104] = _sC8M::P64;
           P64[Hp - 96] = _sC8N::P64;
           P64[Hp - 88] = _sC8O::P64;
           P64[Hp - 80] = _sC8P::P64;
           P64[Hp - 72] = _sC8Q::P64;
           P64[Hp - 64] = _sC8R::P64;
           P64[Hp - 56] = _sC8S::P64;
           P64[Hp - 48] = _sC8T::P64;
           P64[Hp - 40] = _sC8U::P64;
           P64[Hp - 32] = _sC8V::P64;
           P64[Hp - 24] = _sC8W::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 264;
           R1 = Hp - 14;
           Sp = Sp + 128;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHS0_info" {
     block_cHS0_info:
         const _cHS0;
         const 15;
         const 4294967326;
         const SCNU_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.819807516 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cHWh: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2,
                                                            R1) args: 88, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cHWl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHWm; else goto cHWn;
       cHWm: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       cHWn: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = P64[Sp + 32];
           P64[Sp + 24] = P64[Sp + 40];
           P64[Sp + 32] = P64[Sp + 48];
           P64[Sp + 40] = P64[Sp + 56];
           P64[Sp + 48] = P64[Sp + 64];
           P64[Sp + 56] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp + 64] = P64[Sp + 72];
           P64[Sp + 72] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 104, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 64424509440;
         const SCNU_srt+160;
         const 15;
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.831127431 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cHWG: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2,
                                                                R1) args: 96, res: 0, upd: 8;
     }
 },
 sat_sC9W_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cHWP: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cHWQ; else goto cHWR;
       cHWQ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHWR: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 96] = P64[R1 + 46];
           P64[Sp - 88] = P64[R1 + 54];
           P64[Sp - 80] = P64[R1 + 62];
           P64[Sp - 72] = P64[R1 + 70];
           P64[Sp - 64] = P64[R1 + 78];
           P64[Sp - 56] = P64[R1 + 86];
           P64[Sp - 48] = P64[R1 + 94];
           P64[Sp - 40] = P64[R1 + 102];
           P64[Sp - 32] = P64[R1 + 110];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 96;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 104, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sC9W_info" {
     sat_sC9W_info:
         const sat_sC9W_entry;
         const 14;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+160;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       cHWS: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cHWW; else goto cHWV;
       cHWW: // global
           HpAlloc = 120;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 136, res: 0, upd: 8;
       cHWV: // global
           I64[Hp - 112] = sat_sC9W_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           R4 = P64[Sp + 80];
           R3 = P64[Sp + 72];
           R2 = Hp - 110;
           Sp = Sp + 88;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 68719476736;
         const SCNU_srt+160;
         const 16;
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.843462449 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       cHXq: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_sCad_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cHXz: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cHXA; else goto cHXB;
       cHXA: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHXB: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 88] = P64[R1 + 46];
           P64[Sp - 80] = P64[R1 + 54];
           P64[Sp - 72] = P64[R1 + 62];
           P64[Sp - 64] = P64[R1 + 70];
           P64[Sp - 56] = P64[R1 + 78];
           P64[Sp - 48] = P64[R1 + 86];
           P64[Sp - 40] = P64[R1 + 94];
           P64[Sp - 32] = P64[R1 + 102];
           P64[Sp - 24] = P64[R1 + 110];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 88;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 96, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCad_info" {
     sat_sCad_info:
         const sat_sCad_entry;
         const 14;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+176;
 },
 sat_sCac_entry() //  [R1, R2]
         { []
         }
     {offset
       cHXH: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cHXI; else goto cHXJ;
       cHXI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cHXJ: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 80] = P64[R1 + 47];
           P64[Sp - 72] = P64[R1 + 55];
           P64[Sp - 64] = P64[R1 + 63];
           P64[Sp - 56] = P64[R1 + 71];
           P64[Sp - 48] = P64[R1 + 79];
           P64[Sp - 40] = P64[R1 + 87];
           P64[Sp - 32] = P64[R1 + 95];
           P64[Sp - 24] = P64[R1 + 103];
           P64[Sp - 16] = P64[R1 + 111];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 80;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 88, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCac_info" {
     sat_sCac_info:
         const sat_sCac_entry;
         const 14;
         const 4294967304;
         const 4294967301;
         const SCNU_srt+168;
 },
 sat_sCab_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cHXP: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cHXQ; else goto cHXR;
       cHXQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cHXR: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 96] = P64[R1 + 45];
           P64[Sp - 88] = P64[R1 + 53];
           P64[Sp - 80] = P64[R1 + 61];
           P64[Sp - 72] = P64[R1 + 69];
           P64[Sp - 64] = P64[R1 + 77];
           P64[Sp - 56] = P64[R1 + 85];
           P64[Sp - 48] = P64[R1 + 93];
           P64[Sp - 40] = P64[R1 + 101];
           P64[Sp - 32] = P64[R1 + 109];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 96;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 104, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCab_info" {
     sat_sCab_info:
         const sat_sCab_entry;
         const 14;
         const 4294967304;
         const 12884901911;
         const SCNU_srt+160;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cHXT: // global
           Hp = Hp + 392;
           if (Hp > HpLim) (likely: False) goto cHXX; else goto cHXW;
       cHXX: // global
           HpAlloc = 392;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       cHXW: // global
           I64[Hp - 384] = sat_sCad_info;
           P64[Hp - 376] = R2;
           P64[Hp - 368] = R3;
           P64[Hp - 360] = R4;
           P64[Hp - 352] = R5;
           P64[Hp - 344] = R6;
           _sCa2::P64 = P64[Sp];
           P64[Hp - 336] = _sCa2::P64;
           _sCa3::P64 = P64[Sp + 8];
           P64[Hp - 328] = _sCa3::P64;
           _sCa4::P64 = P64[Sp + 16];
           P64[Hp - 320] = _sCa4::P64;
           _sCa5::P64 = P64[Sp + 24];
           P64[Hp - 312] = _sCa5::P64;
           _sCa6::P64 = P64[Sp + 32];
           P64[Hp - 304] = _sCa6::P64;
           _sCa7::P64 = P64[Sp + 40];
           P64[Hp - 296] = _sCa7::P64;
           _sCa8::P64 = P64[Sp + 48];
           P64[Hp - 288] = _sCa8::P64;
           _sCa9::P64 = P64[Sp + 56];
           P64[Hp - 280] = _sCa9::P64;
           _sCaa::P64 = P64[Sp + 64];
           P64[Hp - 272] = _sCaa::P64;
           I64[Hp - 264] = sat_sCac_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           P64[Hp - 240] = R4;
           P64[Hp - 232] = R5;
           P64[Hp - 224] = R6;
           P64[Hp - 216] = _sCa2::P64;
           P64[Hp - 208] = _sCa3::P64;
           P64[Hp - 200] = _sCa4::P64;
           P64[Hp - 192] = _sCa5::P64;
           P64[Hp - 184] = _sCa6::P64;
           P64[Hp - 176] = _sCa7::P64;
           P64[Hp - 168] = _sCa8::P64;
           P64[Hp - 160] = _sCa9::P64;
           P64[Hp - 152] = _sCaa::P64;
           I64[Hp - 144] = sat_sCab_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           P64[Hp - 112] = R5;
           P64[Hp - 104] = R6;
           P64[Hp - 96] = _sCa2::P64;
           P64[Hp - 88] = _sCa3::P64;
           P64[Hp - 80] = _sCa4::P64;
           P64[Hp - 72] = _sCa5::P64;
           P64[Hp - 64] = _sCa6::P64;
           P64[Hp - 56] = _sCa7::P64;
           P64[Hp - 48] = _sCa8::P64;
           P64[Hp - 40] = _sCa9::P64;
           P64[Hp - 32] = _sCaa::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 141;
           P64[Hp - 8] = Hp - 263;
           P64[Hp] = Hp - 382;
           R1 = Hp - 23;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,,)_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_entry;
         const 0;
         const 64424509454;
         const 60129542144;
         const SCNU_srt+160;
         const 14;
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.858505728 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_go2_info;
         const 0;
 },
 sat_sCan_entry() //  [R1]
         { []
         }
     {offset
       cHZ5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cHZ6; else goto cHZ7;
       cHZ6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cHZ7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_go2_entry(R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCan_info" {
     sat_sCan_info:
         const sat_sCan_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+192;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cHZc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cHZd; else goto cHZe;
       cHZd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cHZe: // global
           I64[Sp - 16] = block_cHYP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uHZt; else goto cHYQ;
       uHZt: // global
           call _cHYP(R1) args: 0, res: 0, upd: 0;
       cHYQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_go2_entry;
         const 0;
         const 4402341478414;
         const 8589934607;
         const SCNU_srt+112;
 },
 _cHYP() //  [R1]
         { []
         }
     {offset
       cHYP: // global
           if (R1 & 7 == 1) goto cHZ9; else goto cHZa;
       cHZ9: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cHZa: // global
           I64[Sp - 8] = block_cHYV_info;
           _sCai::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sCai::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uHZs; else goto cHYW;
       uHZs: // global
           call _cHYV(R1) args: 0, res: 0, upd: 0;
       cHYW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cHYP_info" {
     block_cHYP_info:
         const _cHYP;
         const 1;
         const 4402341478430;
         const SCNU_srt+112;
 },
 _cHYV() //  [R1]
         { []
         }
     {offset
       cHYV: // global
           _sCaf::P64 = P64[Sp + 16];
           _sCai::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cHZl; else goto cHZn;
       cHZl: // global
           R2 = _sCaf::P64;
           R1 = _sCai::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cHZn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cHZq; else goto cHZp;
       cHZq: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cHZp: // global
           I64[Hp - 48] = sat_sCan_info;
           P64[Hp - 32] = _sCaf::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sCai::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHYV_info" {
     block_cHYV_info:
         const _cHYV;
         const 2;
         const 4294967326;
         const SCNU_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.878351627 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cHZR: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2,
                                                                R1) args: 96, res: 0, upd: 8;
     }
 },
 sat_sCb5_entry() //  [R1]
         { []
         }
     {offset
       cI09: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI0a; else goto cI0b;
       cI0a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI0b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCb5_info" {
     sat_sCb5_info:
         const sat_sCb5_entry;
         const 2;
         const 18;
 },
 sat_sCb4_entry() //  [R1]
         { []
         }
     {offset
       cI0h: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI0i; else goto cI0j;
       cI0i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI0j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCb4_info" {
     sat_sCb4_info:
         const sat_sCb4_entry;
         const 2;
         const 18;
 },
 sat_sCb3_entry() //  [R1]
         { []
         }
     {offset
       cI0p: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI0q; else goto cI0r;
       cI0q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI0r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCb3_info" {
     sat_sCb3_info:
         const sat_sCb3_entry;
         const 2;
         const 18;
 },
 sat_sCb2_entry() //  [R1]
         { []
         }
     {offset
       cI0x: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI0y; else goto cI0z;
       cI0y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI0z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCb2_info" {
     sat_sCb2_info:
         const sat_sCb2_entry;
         const 2;
         const 18;
 },
 sat_sCb1_entry() //  [R1]
         { []
         }
     {offset
       cI0F: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI0G; else goto cI0H;
       cI0G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI0H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCb1_info" {
     sat_sCb1_info:
         const sat_sCb1_entry;
         const 2;
         const 18;
 },
 sat_sCb0_entry() //  [R1]
         { []
         }
     {offset
       cI0N: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI0O; else goto cI0P;
       cI0O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI0P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCb0_info" {
     sat_sCb0_info:
         const sat_sCb0_entry;
         const 2;
         const 18;
 },
 sat_sCaZ_entry() //  [R1]
         { []
         }
     {offset
       cI0V: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI0W; else goto cI0X;
       cI0W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI0X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCaZ_info" {
     sat_sCaZ_info:
         const sat_sCaZ_entry;
         const 2;
         const 18;
 },
 sat_sCaY_entry() //  [R1]
         { []
         }
     {offset
       cI13: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI14; else goto cI15;
       cI14: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI15: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCaY_info" {
     sat_sCaY_info:
         const sat_sCaY_entry;
         const 2;
         const 18;
 },
 sat_sCaX_entry() //  [R1]
         { []
         }
     {offset
       cI1b: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI1c; else goto cI1d;
       cI1c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI1d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCaX_info" {
     sat_sCaX_info:
         const sat_sCaX_entry;
         const 2;
         const 18;
 },
 sat_sCaW_entry() //  [R1]
         { []
         }
     {offset
       cI1j: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI1k; else goto cI1l;
       cI1k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI1l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCaW_info" {
     sat_sCaW_info:
         const sat_sCaW_entry;
         const 2;
         const 18;
 },
 sat_sCaV_entry() //  [R1]
         { []
         }
     {offset
       cI1r: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI1s; else goto cI1t;
       cI1s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI1t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCaV_info" {
     sat_sCaV_info:
         const sat_sCaV_entry;
         const 2;
         const 18;
 },
 sat_sCaU_entry() //  [R1]
         { []
         }
     {offset
       cI1z: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI1A; else goto cI1B;
       cI1A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI1B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCaU_info" {
     sat_sCaU_info:
         const sat_sCaU_entry;
         const 2;
         const 18;
 },
 sat_sCaT_entry() //  [R1]
         { []
         }
     {offset
       cI1H: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI1I; else goto cI1J;
       cI1I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI1J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCaT_info" {
     sat_sCaT_info:
         const sat_sCaT_entry;
         const 2;
         const 18;
 },
 sat_sCbk_entry() //  [R1]
         { []
         }
     {offset
       cI1L: // global
           _sCbk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cI1M; else goto cI1N;
       cI1N: // global
           Hp = Hp + 752;
           if (Hp > HpLim) (likely: False) goto cI1P; else goto cI1O;
       cI1P: // global
           HpAlloc = 752;
           goto cI1M;
       cI1M: // global
           R1 = _sCbk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI1O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCbk::P64;
           _sCap::P64 = P64[_sCbk::P64 + 16];
           _sCaq::P64 = P64[_sCbk::P64 + 24];
           _sCar::P64 = P64[_sCbk::P64 + 32];
           _sCas::P64 = P64[_sCbk::P64 + 40];
           _sCat::P64 = P64[_sCbk::P64 + 48];
           _sCau::P64 = P64[_sCbk::P64 + 56];
           _sCav::P64 = P64[_sCbk::P64 + 64];
           _sCaw::P64 = P64[_sCbk::P64 + 72];
           _sCax::P64 = P64[_sCbk::P64 + 80];
           _sCay::P64 = P64[_sCbk::P64 + 88];
           _sCaz::P64 = P64[_sCbk::P64 + 96];
           _sCaA::P64 = P64[_sCbk::P64 + 104];
           _sCaB::P64 = P64[_sCbk::P64 + 112];
           _sCaE::P64 = P64[_sCbk::P64 + 120];
           _sCaG::P64 = P64[_sCbk::P64 + 128];
           _sCaH::P64 = P64[_sCbk::P64 + 136];
           _sCaI::P64 = P64[_sCbk::P64 + 144];
           _sCaJ::P64 = P64[_sCbk::P64 + 152];
           _sCaK::P64 = P64[_sCbk::P64 + 160];
           _sCaL::P64 = P64[_sCbk::P64 + 168];
           _sCaM::P64 = P64[_sCbk::P64 + 176];
           _sCaN::P64 = P64[_sCbk::P64 + 184];
           _sCaO::P64 = P64[_sCbk::P64 + 192];
           _sCaP::P64 = P64[_sCbk::P64 + 200];
           _sCaQ::P64 = P64[_sCbk::P64 + 208];
           _sCaR::P64 = P64[_sCbk::P64 + 216];
           _sCaS::P64 = P64[_sCbk::P64 + 224];
           I64[Hp - 744] = :_con_info;
           P64[Hp - 736] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 728] = _sCaE::P64;
           I64[Hp - 720] = sat_sCb5_info;
           P64[Hp - 704] = _sCaB::P64;
           P64[Hp - 696] = _sCaS::P64;
           I64[Hp - 688] = :_con_info;
           P64[Hp - 680] = Hp - 720;
           P64[Hp - 672] = GHC.Types.[]_closure+1;
           I64[Hp - 664] = sat_sCb4_info;
           P64[Hp - 648] = _sCaA::P64;
           P64[Hp - 640] = _sCaR::P64;
           I64[Hp - 632] = :_con_info;
           P64[Hp - 624] = Hp - 664;
           P64[Hp - 616] = Hp - 686;
           I64[Hp - 608] = sat_sCb3_info;
           P64[Hp - 592] = _sCaz::P64;
           P64[Hp - 584] = _sCaQ::P64;
           I64[Hp - 576] = :_con_info;
           P64[Hp - 568] = Hp - 608;
           P64[Hp - 560] = Hp - 630;
           I64[Hp - 552] = sat_sCb2_info;
           P64[Hp - 536] = _sCay::P64;
           P64[Hp - 528] = _sCaP::P64;
           I64[Hp - 520] = :_con_info;
           P64[Hp - 512] = Hp - 552;
           P64[Hp - 504] = Hp - 574;
           I64[Hp - 496] = sat_sCb1_info;
           P64[Hp - 480] = _sCax::P64;
           P64[Hp - 472] = _sCaO::P64;
           I64[Hp - 464] = :_con_info;
           P64[Hp - 456] = Hp - 496;
           P64[Hp - 448] = Hp - 518;
           I64[Hp - 440] = sat_sCb0_info;
           P64[Hp - 424] = _sCaw::P64;
           P64[Hp - 416] = _sCaN::P64;
           I64[Hp - 408] = :_con_info;
           P64[Hp - 400] = Hp - 440;
           P64[Hp - 392] = Hp - 462;
           I64[Hp - 384] = sat_sCaZ_info;
           P64[Hp - 368] = _sCav::P64;
           P64[Hp - 360] = _sCaM::P64;
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = Hp - 384;
           P64[Hp - 336] = Hp - 406;
           I64[Hp - 328] = sat_sCaY_info;
           P64[Hp - 312] = _sCau::P64;
           P64[Hp - 304] = _sCaL::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = Hp - 350;
           I64[Hp - 272] = sat_sCaX_info;
           P64[Hp - 256] = _sCat::P64;
           P64[Hp - 248] = _sCaK::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sCaW_info;
           P64[Hp - 200] = _sCas::P64;
           P64[Hp - 192] = _sCaJ::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sCaV_info;
           P64[Hp - 144] = _sCar::P64;
           P64[Hp - 136] = _sCaI::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sCaU_info;
           P64[Hp - 88] = _sCaq::P64;
           P64[Hp - 80] = _sCaH::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sCaT_info;
           P64[Hp - 32] = _sCap::P64;
           P64[Hp - 24] = _sCaG::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 742;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_go2_entry(R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCbk_info" {
     sat_sCbk_info:
         const sat_sCbk_entry;
         const 27;
         const 4294967311;
         const SCNU_srt+192;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       cI1Q: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cI1S; else goto cI1T;
       cI1S: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 136, res: 0, upd: 8;
       cI1T: // global
           I64[Sp - 32] = block_cHZV_info;
           R1 = P64[Sp + 72];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 64] = R3;
           P64[Sp + 72] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uI1X; else goto cHZW;
       uI1X: // global
           call _cHZV(R1) args: 0, res: 0, upd: 0;
       cHZW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 68719476736;
         const SCNU_srt+192;
         const 16;
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_slow;
 },
 _cHZV() //  [R1]
         { []
         }
     {offset
       cHZV: // global
           Hp = Hp + 256;
           if (Hp > HpLim) (likely: False) goto cI1W; else goto cI1V;
       cI1W: // global
           HpAlloc = 256;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cI1V: // global
           _sCaG::P64 = P64[R1 + 7];
           _sCaH::P64 = P64[R1 + 15];
           _sCaI::P64 = P64[R1 + 23];
           _sCaJ::P64 = P64[R1 + 31];
           _sCaK::P64 = P64[R1 + 39];
           _sCaL::P64 = P64[R1 + 47];
           _sCaM::P64 = P64[R1 + 55];
           _sCaN::P64 = P64[R1 + 63];
           _sCaO::P64 = P64[R1 + 71];
           _sCaP::P64 = P64[R1 + 79];
           _sCaQ::P64 = P64[R1 + 87];
           _sCaR::P64 = P64[R1 + 95];
           _sCaS::P64 = P64[R1 + 103];
           I64[Hp - 248] = sat_sCbk_info;
           P64[Hp - 232] = P64[Sp + 104];
           P64[Hp - 224] = P64[Sp + 96];
           P64[Hp - 216] = P64[Sp + 8];
           P64[Hp - 208] = P64[Sp + 16];
           P64[Hp - 200] = P64[Sp + 24];
           P64[Hp - 192] = P64[Sp + 32];
           P64[Hp - 184] = P64[Sp + 40];
           P64[Hp - 176] = P64[Sp + 48];
           P64[Hp - 168] = P64[Sp + 56];
           P64[Hp - 160] = P64[Sp + 64];
           P64[Hp - 152] = P64[Sp + 72];
           P64[Hp - 144] = P64[Sp + 80];
           P64[Hp - 136] = P64[Sp + 88];
           P64[Hp - 128] = P64[Sp + 112];
           P64[Hp - 120] = _sCaG::P64;
           P64[Hp - 112] = _sCaH::P64;
           P64[Hp - 104] = _sCaI::P64;
           P64[Hp - 96] = _sCaJ::P64;
           P64[Hp - 88] = _sCaK::P64;
           P64[Hp - 80] = _sCaL::P64;
           P64[Hp - 72] = _sCaM::P64;
           P64[Hp - 64] = _sCaN::P64;
           P64[Hp - 56] = _sCaO::P64;
           P64[Hp - 48] = _sCaP::P64;
           P64[Hp - 40] = _sCaQ::P64;
           P64[Hp - 32] = _sCaR::P64;
           P64[Hp - 24] = _sCaS::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 248;
           R1 = Hp - 14;
           Sp = Sp + 120;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cHZV_info" {
     block_cHZV_info:
         const _cHZV;
         const 14;
         const 4294967326;
         const SCNU_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.916587454 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cI3W: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2,
                                                           R1) args: 80, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cI40: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cI41; else goto cI42;
       cI41: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       cI42: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = P64[Sp + 32];
           P64[Sp + 24] = P64[Sp + 40];
           P64[Sp + 32] = P64[Sp + 48];
           P64[Sp + 40] = P64[Sp + 56];
           P64[Sp + 48] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp + 56] = P64[Sp + 64];
           P64[Sp + 64] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 96, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 60129542144;
         const SCNU_srt+200;
         const 14;
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.92385764 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cI4k: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2,
                                                               R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_sCbO_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cI4t: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cI4u; else goto cI4v;
       cI4u: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cI4v: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 88] = P64[R1 + 46];
           P64[Sp - 80] = P64[R1 + 54];
           P64[Sp - 72] = P64[R1 + 62];
           P64[Sp - 64] = P64[R1 + 70];
           P64[Sp - 56] = P64[R1 + 78];
           P64[Sp - 48] = P64[R1 + 86];
           P64[Sp - 40] = P64[R1 + 94];
           P64[Sp - 32] = P64[R1 + 102];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 88;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 96, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCbO_info" {
     sat_sCbO_info:
         const sat_sCbO_entry;
         const 13;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+200;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       cI4w: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cI4A; else goto cI4z;
       cI4A: // global
           HpAlloc = 112;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       cI4z: // global
           I64[Hp - 104] = sat_sCbO_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           P64[Hp - 64] = R6;
           P64[Hp - 56] = P64[Sp];
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           R4 = P64[Sp + 72];
           R3 = P64[Sp + 64];
           R2 = Hp - 102;
           Sp = Sp + 80;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 64424509440;
         const SCNU_srt+200;
         const 15;
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.936432027 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       cI52: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_sCc4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cI5b: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cI5c; else goto cI5d;
       cI5c: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cI5d: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 80] = P64[R1 + 46];
           P64[Sp - 72] = P64[R1 + 54];
           P64[Sp - 64] = P64[R1 + 62];
           P64[Sp - 56] = P64[R1 + 70];
           P64[Sp - 48] = P64[R1 + 78];
           P64[Sp - 40] = P64[R1 + 86];
           P64[Sp - 32] = P64[R1 + 94];
           P64[Sp - 24] = P64[R1 + 102];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 80;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 88, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCc4_info" {
     sat_sCc4_info:
         const sat_sCc4_entry;
         const 13;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+216;
 },
 sat_sCc3_entry() //  [R1, R2]
         { []
         }
     {offset
       cI5j: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cI5k; else goto cI5l;
       cI5k: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cI5l: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 72] = P64[R1 + 47];
           P64[Sp - 64] = P64[R1 + 55];
           P64[Sp - 56] = P64[R1 + 63];
           P64[Sp - 48] = P64[R1 + 71];
           P64[Sp - 40] = P64[R1 + 79];
           P64[Sp - 32] = P64[R1 + 87];
           P64[Sp - 24] = P64[R1 + 95];
           P64[Sp - 16] = P64[R1 + 103];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 72;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 80, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCc3_info" {
     sat_sCc3_info:
         const sat_sCc3_entry;
         const 13;
         const 4294967304;
         const 4294967301;
         const SCNU_srt+208;
 },
 sat_sCc2_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cI5r: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cI5s; else goto cI5t;
       cI5s: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cI5t: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 88] = P64[R1 + 45];
           P64[Sp - 80] = P64[R1 + 53];
           P64[Sp - 72] = P64[R1 + 61];
           P64[Sp - 64] = P64[R1 + 69];
           P64[Sp - 56] = P64[R1 + 77];
           P64[Sp - 48] = P64[R1 + 85];
           P64[Sp - 40] = P64[R1 + 93];
           P64[Sp - 32] = P64[R1 + 101];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 88;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 96, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCc2_info" {
     sat_sCc2_info:
         const sat_sCc2_entry;
         const 13;
         const 4294967304;
         const 12884901911;
         const SCNU_srt+200;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cI5v: // global
           Hp = Hp + 368;
           if (Hp > HpLim) (likely: False) goto cI5z; else goto cI5y;
       cI5z: // global
           HpAlloc = 368;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       cI5y: // global
           I64[Hp - 360] = sat_sCc4_info;
           P64[Hp - 352] = R2;
           P64[Hp - 344] = R3;
           P64[Hp - 336] = R4;
           P64[Hp - 328] = R5;
           P64[Hp - 320] = R6;
           _sCbU::P64 = P64[Sp];
           P64[Hp - 312] = _sCbU::P64;
           _sCbV::P64 = P64[Sp + 8];
           P64[Hp - 304] = _sCbV::P64;
           _sCbW::P64 = P64[Sp + 16];
           P64[Hp - 296] = _sCbW::P64;
           _sCbX::P64 = P64[Sp + 24];
           P64[Hp - 288] = _sCbX::P64;
           _sCbY::P64 = P64[Sp + 32];
           P64[Hp - 280] = _sCbY::P64;
           _sCbZ::P64 = P64[Sp + 40];
           P64[Hp - 272] = _sCbZ::P64;
           _sCc0::P64 = P64[Sp + 48];
           P64[Hp - 264] = _sCc0::P64;
           _sCc1::P64 = P64[Sp + 56];
           P64[Hp - 256] = _sCc1::P64;
           I64[Hp - 248] = sat_sCc3_info;
           P64[Hp - 240] = R2;
           P64[Hp - 232] = R3;
           P64[Hp - 224] = R4;
           P64[Hp - 216] = R5;
           P64[Hp - 208] = R6;
           P64[Hp - 200] = _sCbU::P64;
           P64[Hp - 192] = _sCbV::P64;
           P64[Hp - 184] = _sCbW::P64;
           P64[Hp - 176] = _sCbX::P64;
           P64[Hp - 168] = _sCbY::P64;
           P64[Hp - 160] = _sCbZ::P64;
           P64[Hp - 152] = _sCc0::P64;
           P64[Hp - 144] = _sCc1::P64;
           I64[Hp - 136] = sat_sCc2_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           P64[Hp - 104] = R5;
           P64[Hp - 96] = R6;
           P64[Hp - 88] = _sCbU::P64;
           P64[Hp - 80] = _sCbV::P64;
           P64[Hp - 72] = _sCbW::P64;
           P64[Hp - 64] = _sCbX::P64;
           P64[Hp - 56] = _sCbY::P64;
           P64[Hp - 48] = _sCbZ::P64;
           P64[Hp - 40] = _sCc0::P64;
           P64[Hp - 32] = _sCc1::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 133;
           P64[Hp - 8] = Hp - 247;
           P64[Hp] = Hp - 358;
           R1 = Hp - 23;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,)_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_entry;
         const 0;
         const 64424509454;
         const 55834574848;
         const SCNU_srt+200;
         const 13;
         const GHC.Show.$fShow(,,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.951723933 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,)_go2_info;
         const 0;
 },
 sat_sCce_entry() //  [R1]
         { []
         }
     {offset
       cI6E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cI6F; else goto cI6G;
       cI6F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI6G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,)_go2_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCce_info" {
     sat_sCce_info:
         const sat_sCce_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+232;
 },
 GHC.Show.$fShow(,,,,,,,,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cI6L: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cI6M; else goto cI6N;
       cI6M: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cI6N: // global
           I64[Sp - 16] = block_cI6o_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uI72; else goto cI6p;
       uI72: // global
           call _cI6o(R1) args: 0, res: 0, upd: 0;
       cI6p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,,,,,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,,,,,,,,)_go2_entry;
         const 0;
         const 140741783322638;
         const 8589934607;
         const SCNU_srt+112;
 },
 _cI6o() //  [R1]
         { []
         }
     {offset
       cI6o: // global
           if (R1 & 7 == 1) goto cI6I; else goto cI6J;
       cI6I: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cI6J: // global
           I64[Sp - 8] = block_cI6u_info;
           _sCc9::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sCc9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uI71; else goto cI6v;
       uI71: // global
           call _cI6u(R1) args: 0, res: 0, upd: 0;
       cI6v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cI6o_info" {
     block_cI6o_info:
         const _cI6o;
         const 1;
         const 140741783322654;
         const SCNU_srt+112;
 },
 _cI6u() //  [R1]
         { []
         }
     {offset
       cI6u: // global
           _sCc6::P64 = P64[Sp + 16];
           _sCc9::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cI6U; else goto cI6W;
       cI6U: // global
           R2 = _sCc6::P64;
           R1 = _sCc9::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cI6W: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cI6Z; else goto cI6Y;
       cI6Z: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cI6Y: // global
           I64[Hp - 48] = sat_sCce_info;
           P64[Hp - 32] = _sCc6::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sCc9::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cI6u_info" {
     block_cI6u_info:
         const _cI6u;
         const 2;
         const 4294967326;
         const SCNU_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:16.971358302 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cI7q: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2,
                                                               R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_sCcT_entry() //  [R1]
         { []
         }
     {offset
       cI7I: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI7J; else goto cI7K;
       cI7J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI7K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCcT_info" {
     sat_sCcT_info:
         const sat_sCcT_entry;
         const 2;
         const 18;
 },
 sat_sCcS_entry() //  [R1]
         { []
         }
     {offset
       cI7Q: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI7R; else goto cI7S;
       cI7R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI7S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCcS_info" {
     sat_sCcS_info:
         const sat_sCcS_entry;
         const 2;
         const 18;
 },
 sat_sCcR_entry() //  [R1]
         { []
         }
     {offset
       cI7Y: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI7Z; else goto cI80;
       cI7Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI80: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCcR_info" {
     sat_sCcR_info:
         const sat_sCcR_entry;
         const 2;
         const 18;
 },
 sat_sCcQ_entry() //  [R1]
         { []
         }
     {offset
       cI86: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI87; else goto cI88;
       cI87: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI88: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCcQ_info" {
     sat_sCcQ_info:
         const sat_sCcQ_entry;
         const 2;
         const 18;
 },
 sat_sCcP_entry() //  [R1]
         { []
         }
     {offset
       cI8e: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI8f; else goto cI8g;
       cI8f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI8g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCcP_info" {
     sat_sCcP_info:
         const sat_sCcP_entry;
         const 2;
         const 18;
 },
 sat_sCcO_entry() //  [R1]
         { []
         }
     {offset
       cI8m: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI8n; else goto cI8o;
       cI8n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI8o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCcO_info" {
     sat_sCcO_info:
         const sat_sCcO_entry;
         const 2;
         const 18;
 },
 sat_sCcN_entry() //  [R1]
         { []
         }
     {offset
       cI8u: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI8v; else goto cI8w;
       cI8v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI8w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCcN_info" {
     sat_sCcN_info:
         const sat_sCcN_entry;
         const 2;
         const 18;
 },
 sat_sCcM_entry() //  [R1]
         { []
         }
     {offset
       cI8C: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI8D; else goto cI8E;
       cI8D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI8E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCcM_info" {
     sat_sCcM_info:
         const sat_sCcM_entry;
         const 2;
         const 18;
 },
 sat_sCcL_entry() //  [R1]
         { []
         }
     {offset
       cI8K: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI8L; else goto cI8M;
       cI8L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI8M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCcL_info" {
     sat_sCcL_info:
         const sat_sCcL_entry;
         const 2;
         const 18;
 },
 sat_sCcK_entry() //  [R1]
         { []
         }
     {offset
       cI8S: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI8T; else goto cI8U;
       cI8T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI8U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCcK_info" {
     sat_sCcK_info:
         const sat_sCcK_entry;
         const 2;
         const 18;
 },
 sat_sCcJ_entry() //  [R1]
         { []
         }
     {offset
       cI90: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI91; else goto cI92;
       cI91: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI92: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCcJ_info" {
     sat_sCcJ_info:
         const sat_sCcJ_entry;
         const 2;
         const 18;
 },
 sat_sCcI_entry() //  [R1]
         { []
         }
     {offset
       cI98: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cI99; else goto cI9a;
       cI99: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI9a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCcI_info" {
     sat_sCcI_info:
         const sat_sCcI_entry;
         const 2;
         const 18;
 },
 sat_sCd7_entry() //  [R1]
         { []
         }
     {offset
       cI9c: // global
           _sCd7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cI9d; else goto cI9e;
       cI9e: // global
           Hp = Hp + 696;
           if (Hp > HpLim) (likely: False) goto cI9g; else goto cI9f;
       cI9g: // global
           HpAlloc = 696;
           goto cI9d;
       cI9d: // global
           R1 = _sCd7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cI9f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCd7::P64;
           _sCcg::P64 = P64[_sCd7::P64 + 16];
           _sCch::P64 = P64[_sCd7::P64 + 24];
           _sCci::P64 = P64[_sCd7::P64 + 32];
           _sCcj::P64 = P64[_sCd7::P64 + 40];
           _sCck::P64 = P64[_sCd7::P64 + 48];
           _sCcl::P64 = P64[_sCd7::P64 + 56];
           _sCcm::P64 = P64[_sCd7::P64 + 64];
           _sCcn::P64 = P64[_sCd7::P64 + 72];
           _sCco::P64 = P64[_sCd7::P64 + 80];
           _sCcp::P64 = P64[_sCd7::P64 + 88];
           _sCcq::P64 = P64[_sCd7::P64 + 96];
           _sCcr::P64 = P64[_sCd7::P64 + 104];
           _sCcu::P64 = P64[_sCd7::P64 + 112];
           _sCcw::P64 = P64[_sCd7::P64 + 120];
           _sCcx::P64 = P64[_sCd7::P64 + 128];
           _sCcy::P64 = P64[_sCd7::P64 + 136];
           _sCcz::P64 = P64[_sCd7::P64 + 144];
           _sCcA::P64 = P64[_sCd7::P64 + 152];
           _sCcB::P64 = P64[_sCd7::P64 + 160];
           _sCcC::P64 = P64[_sCd7::P64 + 168];
           _sCcD::P64 = P64[_sCd7::P64 + 176];
           _sCcE::P64 = P64[_sCd7::P64 + 184];
           _sCcF::P64 = P64[_sCd7::P64 + 192];
           _sCcG::P64 = P64[_sCd7::P64 + 200];
           _sCcH::P64 = P64[_sCd7::P64 + 208];
           I64[Hp - 688] = :_con_info;
           P64[Hp - 680] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 672] = _sCcu::P64;
           I64[Hp - 664] = sat_sCcT_info;
           P64[Hp - 648] = _sCcr::P64;
           P64[Hp - 640] = _sCcH::P64;
           I64[Hp - 632] = :_con_info;
           P64[Hp - 624] = Hp - 664;
           P64[Hp - 616] = GHC.Types.[]_closure+1;
           I64[Hp - 608] = sat_sCcS_info;
           P64[Hp - 592] = _sCcq::P64;
           P64[Hp - 584] = _sCcG::P64;
           I64[Hp - 576] = :_con_info;
           P64[Hp - 568] = Hp - 608;
           P64[Hp - 560] = Hp - 630;
           I64[Hp - 552] = sat_sCcR_info;
           P64[Hp - 536] = _sCcp::P64;
           P64[Hp - 528] = _sCcF::P64;
           I64[Hp - 520] = :_con_info;
           P64[Hp - 512] = Hp - 552;
           P64[Hp - 504] = Hp - 574;
           I64[Hp - 496] = sat_sCcQ_info;
           P64[Hp - 480] = _sCco::P64;
           P64[Hp - 472] = _sCcE::P64;
           I64[Hp - 464] = :_con_info;
           P64[Hp - 456] = Hp - 496;
           P64[Hp - 448] = Hp - 518;
           I64[Hp - 440] = sat_sCcP_info;
           P64[Hp - 424] = _sCcn::P64;
           P64[Hp - 416] = _sCcD::P64;
           I64[Hp - 408] = :_con_info;
           P64[Hp - 400] = Hp - 440;
           P64[Hp - 392] = Hp - 462;
           I64[Hp - 384] = sat_sCcO_info;
           P64[Hp - 368] = _sCcm::P64;
           P64[Hp - 360] = _sCcC::P64;
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = Hp - 384;
           P64[Hp - 336] = Hp - 406;
           I64[Hp - 328] = sat_sCcN_info;
           P64[Hp - 312] = _sCcl::P64;
           P64[Hp - 304] = _sCcB::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = Hp - 350;
           I64[Hp - 272] = sat_sCcM_info;
           P64[Hp - 256] = _sCck::P64;
           P64[Hp - 248] = _sCcA::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sCcL_info;
           P64[Hp - 200] = _sCcj::P64;
           P64[Hp - 192] = _sCcz::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sCcK_info;
           P64[Hp - 144] = _sCci::P64;
           P64[Hp - 136] = _sCcy::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sCcJ_info;
           P64[Hp - 88] = _sCch::P64;
           P64[Hp - 80] = _sCcx::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sCcI_info;
           P64[Hp - 32] = _sCcg::P64;
           P64[Hp - 24] = _sCcw::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 686;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,)_go2_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCd7_info" {
     sat_sCd7_info:
         const sat_sCd7_entry;
         const 25;
         const 4294967311;
         const SCNU_srt+232;
 },
 GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       cI9h: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cI9j; else goto cI9k;
       cI9j: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       cI9k: // global
           I64[Sp - 32] = block_cI7u_info;
           R1 = P64[Sp + 64];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 56] = R3;
           P64[Sp + 64] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uI9o; else goto cI7v;
       uI9o: // global
           call _cI7u(R1) args: 0, res: 0, upd: 0;
       cI7v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 64424509440;
         const SCNU_srt+232;
         const 15;
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_slow;
 },
 _cI7u() //  [R1]
         { []
         }
     {offset
       cI7u: // global
           Hp = Hp + 240;
           if (Hp > HpLim) (likely: False) goto cI9n; else goto cI9m;
       cI9n: // global
           HpAlloc = 240;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cI9m: // global
           _sCcw::P64 = P64[R1 + 7];
           _sCcx::P64 = P64[R1 + 15];
           _sCcy::P64 = P64[R1 + 23];
           _sCcz::P64 = P64[R1 + 31];
           _sCcA::P64 = P64[R1 + 39];
           _sCcB::P64 = P64[R1 + 47];
           _sCcC::P64 = P64[R1 + 55];
           _sCcD::P64 = P64[R1 + 63];
           _sCcE::P64 = P64[R1 + 71];
           _sCcF::P64 = P64[R1 + 79];
           _sCcG::P64 = P64[R1 + 87];
           _sCcH::P64 = P64[R1 + 95];
           I64[Hp - 232] = sat_sCd7_info;
           P64[Hp - 216] = P64[Sp + 96];
           P64[Hp - 208] = P64[Sp + 88];
           P64[Hp - 200] = P64[Sp + 8];
           P64[Hp - 192] = P64[Sp + 16];
           P64[Hp - 184] = P64[Sp + 24];
           P64[Hp - 176] = P64[Sp + 32];
           P64[Hp - 168] = P64[Sp + 40];
           P64[Hp - 160] = P64[Sp + 48];
           P64[Hp - 152] = P64[Sp + 56];
           P64[Hp - 144] = P64[Sp + 64];
           P64[Hp - 136] = P64[Sp + 72];
           P64[Hp - 128] = P64[Sp + 80];
           P64[Hp - 120] = P64[Sp + 104];
           P64[Hp - 112] = _sCcw::P64;
           P64[Hp - 104] = _sCcx::P64;
           P64[Hp - 96] = _sCcy::P64;
           P64[Hp - 88] = _sCcz::P64;
           P64[Hp - 80] = _sCcA::P64;
           P64[Hp - 72] = _sCcB::P64;
           P64[Hp - 64] = _sCcC::P64;
           P64[Hp - 56] = _sCcD::P64;
           P64[Hp - 48] = _sCcE::P64;
           P64[Hp - 40] = _sCcF::P64;
           P64[Hp - 32] = _sCcG::P64;
           P64[Hp - 24] = _sCcH::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 232;
           R1 = Hp - 14;
           Sp = Sp + 112;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cI7u_info" {
     block_cI7u_info:
         const _cI7u;
         const 13;
         const 4294967326;
         const SCNU_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.005445931 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cIbf: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 72, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cIbj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cIbk; else goto cIbl;
       cIbk: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       cIbl: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = P64[Sp + 32];
           P64[Sp + 24] = P64[Sp + 40];
           P64[Sp + 32] = P64[Sp + 48];
           P64[Sp + 40] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp + 48] = P64[Sp + 56];
           P64[Sp + 56] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 88, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 55834574848;
         const SCNU_srt+240;
         const 13;
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.012730257 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cIbC: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_sCdz_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cIbL: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cIbM; else goto cIbN;
       cIbM: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIbN: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 80] = P64[R1 + 46];
           P64[Sp - 72] = P64[R1 + 54];
           P64[Sp - 64] = P64[R1 + 62];
           P64[Sp - 56] = P64[R1 + 70];
           P64[Sp - 48] = P64[R1 + 78];
           P64[Sp - 40] = P64[R1 + 86];
           P64[Sp - 32] = P64[R1 + 94];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 80;
           call GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 88, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCdz_info" {
     sat_sCdz_info:
         const sat_sCdz_entry;
         const 12;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+240;
 },
 GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       cIbO: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cIbS; else goto cIbR;
       cIbS: // global
           HpAlloc = 104;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       cIbR: // global
           I64[Hp - 96] = sat_sCdz_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           P64[Hp - 56] = R6;
           P64[Hp - 48] = P64[Sp];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           R4 = P64[Sp + 64];
           R3 = P64[Sp + 56];
           R2 = Hp - 94;
           Sp = Sp + 72;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 60129542144;
         const SCNU_srt+240;
         const 14;
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.024265337 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       cIci: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,)_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_sCdO_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cIcr: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cIcs; else goto cIct;
       cIcs: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIct: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 72] = P64[R1 + 46];
           P64[Sp - 64] = P64[R1 + 54];
           P64[Sp - 56] = P64[R1 + 62];
           P64[Sp - 48] = P64[R1 + 70];
           P64[Sp - 40] = P64[R1 + 78];
           P64[Sp - 32] = P64[R1 + 86];
           P64[Sp - 24] = P64[R1 + 94];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 72;
           call GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 80, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCdO_info" {
     sat_sCdO_info:
         const sat_sCdO_entry;
         const 12;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+256;
 },
 sat_sCdN_entry() //  [R1, R2]
         { []
         }
     {offset
       cIcz: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cIcA; else goto cIcB;
       cIcA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cIcB: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 64] = P64[R1 + 47];
           P64[Sp - 56] = P64[R1 + 55];
           P64[Sp - 48] = P64[R1 + 63];
           P64[Sp - 40] = P64[R1 + 71];
           P64[Sp - 32] = P64[R1 + 79];
           P64[Sp - 24] = P64[R1 + 87];
           P64[Sp - 16] = P64[R1 + 95];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 64;
           call GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 72, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCdN_info" {
     sat_sCdN_info:
         const sat_sCdN_entry;
         const 12;
         const 4294967304;
         const 4294967301;
         const SCNU_srt+248;
 },
 sat_sCdM_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cIcH: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cIcI; else goto cIcJ;
       cIcI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cIcJ: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 80] = P64[R1 + 45];
           P64[Sp - 72] = P64[R1 + 53];
           P64[Sp - 64] = P64[R1 + 61];
           P64[Sp - 56] = P64[R1 + 69];
           P64[Sp - 48] = P64[R1 + 77];
           P64[Sp - 40] = P64[R1 + 85];
           P64[Sp - 32] = P64[R1 + 93];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 80;
           call GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 88, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCdM_info" {
     sat_sCdM_info:
         const sat_sCdM_entry;
         const 12;
         const 4294967304;
         const 12884901911;
         const SCNU_srt+240;
 },
 GHC.Show.$fShow(,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIcL: // global
           Hp = Hp + 344;
           if (Hp > HpLim) (likely: False) goto cIcP; else goto cIcO;
       cIcP: // global
           HpAlloc = 344;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       cIcO: // global
           I64[Hp - 336] = sat_sCdO_info;
           P64[Hp - 328] = R2;
           P64[Hp - 320] = R3;
           P64[Hp - 312] = R4;
           P64[Hp - 304] = R5;
           P64[Hp - 296] = R6;
           _sCdF::P64 = P64[Sp];
           P64[Hp - 288] = _sCdF::P64;
           _sCdG::P64 = P64[Sp + 8];
           P64[Hp - 280] = _sCdG::P64;
           _sCdH::P64 = P64[Sp + 16];
           P64[Hp - 272] = _sCdH::P64;
           _sCdI::P64 = P64[Sp + 24];
           P64[Hp - 264] = _sCdI::P64;
           _sCdJ::P64 = P64[Sp + 32];
           P64[Hp - 256] = _sCdJ::P64;
           _sCdK::P64 = P64[Sp + 40];
           P64[Hp - 248] = _sCdK::P64;
           _sCdL::P64 = P64[Sp + 48];
           P64[Hp - 240] = _sCdL::P64;
           I64[Hp - 232] = sat_sCdN_info;
           P64[Hp - 224] = R2;
           P64[Hp - 216] = R3;
           P64[Hp - 208] = R4;
           P64[Hp - 200] = R5;
           P64[Hp - 192] = R6;
           P64[Hp - 184] = _sCdF::P64;
           P64[Hp - 176] = _sCdG::P64;
           P64[Hp - 168] = _sCdH::P64;
           P64[Hp - 160] = _sCdI::P64;
           P64[Hp - 152] = _sCdJ::P64;
           P64[Hp - 144] = _sCdK::P64;
           P64[Hp - 136] = _sCdL::P64;
           I64[Hp - 128] = sat_sCdM_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           P64[Hp - 88] = R6;
           P64[Hp - 80] = _sCdF::P64;
           P64[Hp - 72] = _sCdG::P64;
           P64[Hp - 64] = _sCdH::P64;
           P64[Hp - 56] = _sCdI::P64;
           P64[Hp - 48] = _sCdJ::P64;
           P64[Hp - 40] = _sCdK::P64;
           P64[Hp - 32] = _sCdL::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 125;
           P64[Hp - 8] = Hp - 231;
           P64[Hp] = Hp - 334;
           R1 = Hp - 23;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,)_info" {
     GHC.Show.$fShow(,,,,,,,,,,,)_info:
         const GHC.Show.$fShow(,,,,,,,,,,,)_entry;
         const 0;
         const 64424509454;
         const 51539607552;
         const SCNU_srt+240;
         const 12;
         const GHC.Show.$fShow(,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.039340058 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,,,,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,,,,,,,)_go2_info;
         const 0;
 },
 sat_sCdY_entry() //  [R1]
         { []
         }
     {offset
       cIdR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cIdS; else goto cIdT;
       cIdS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIdT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,)_go2_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCdY_info" {
     sat_sCdY_info:
         const sat_sCdY_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+272;
 },
 GHC.Show.$fShow(,,,,,,,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cIdY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cIdZ; else goto cIe0;
       cIdZ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,,,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIe0: // global
           I64[Sp - 16] = block_cIdB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uIef; else goto cIdC;
       uIef: // global
           call _cIdB(R1) args: 0, res: 0, upd: 0;
       cIdC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,,,,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,,,,,,,)_go2_entry;
         const 0;
         const 4503603922337806;
         const 8589934607;
         const SCNU_srt+112;
 },
 _cIdB() //  [R1]
         { []
         }
     {offset
       cIdB: // global
           if (R1 & 7 == 1) goto cIdV; else goto cIdW;
       cIdV: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cIdW: // global
           I64[Sp - 8] = block_cIdH_info;
           _sCdT::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sCdT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uIee; else goto cIdI;
       uIee: // global
           call _cIdH(R1) args: 0, res: 0, upd: 0;
       cIdI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cIdB_info" {
     block_cIdB_info:
         const _cIdB;
         const 1;
         const 4503603922337822;
         const SCNU_srt+112;
 },
 _cIdH() //  [R1]
         { []
         }
     {offset
       cIdH: // global
           _sCdQ::P64 = P64[Sp + 16];
           _sCdT::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cIe7; else goto cIe9;
       cIe7: // global
           R2 = _sCdQ::P64;
           R1 = _sCdT::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cIe9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cIec; else goto cIeb;
       cIec: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cIeb: // global
           I64[Hp - 48] = sat_sCdY_info;
           P64[Hp - 32] = _sCdQ::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sCdT::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cIdH_info" {
     block_cIdH_info:
         const _cIdH;
         const 2;
         const 4294967326;
         const SCNU_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.058200854 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cIeD: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_sCeA_entry() //  [R1]
         { []
         }
     {offset
       cIeV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIeW; else goto cIeX;
       cIeW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIeX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCeA_info" {
     sat_sCeA_info:
         const sat_sCeA_entry;
         const 2;
         const 18;
 },
 sat_sCez_entry() //  [R1]
         { []
         }
     {offset
       cIf3: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIf4; else goto cIf5;
       cIf4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIf5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCez_info" {
     sat_sCez_info:
         const sat_sCez_entry;
         const 2;
         const 18;
 },
 sat_sCey_entry() //  [R1]
         { []
         }
     {offset
       cIfb: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIfc; else goto cIfd;
       cIfc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIfd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCey_info" {
     sat_sCey_info:
         const sat_sCey_entry;
         const 2;
         const 18;
 },
 sat_sCex_entry() //  [R1]
         { []
         }
     {offset
       cIfj: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIfk; else goto cIfl;
       cIfk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIfl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCex_info" {
     sat_sCex_info:
         const sat_sCex_entry;
         const 2;
         const 18;
 },
 sat_sCew_entry() //  [R1]
         { []
         }
     {offset
       cIfr: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIfs; else goto cIft;
       cIfs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIft: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCew_info" {
     sat_sCew_info:
         const sat_sCew_entry;
         const 2;
         const 18;
 },
 sat_sCev_entry() //  [R1]
         { []
         }
     {offset
       cIfz: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIfA; else goto cIfB;
       cIfA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIfB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCev_info" {
     sat_sCev_info:
         const sat_sCev_entry;
         const 2;
         const 18;
 },
 sat_sCeu_entry() //  [R1]
         { []
         }
     {offset
       cIfH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIfI; else goto cIfJ;
       cIfI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIfJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCeu_info" {
     sat_sCeu_info:
         const sat_sCeu_entry;
         const 2;
         const 18;
 },
 sat_sCet_entry() //  [R1]
         { []
         }
     {offset
       cIfP: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIfQ; else goto cIfR;
       cIfQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIfR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCet_info" {
     sat_sCet_info:
         const sat_sCet_entry;
         const 2;
         const 18;
 },
 sat_sCes_entry() //  [R1]
         { []
         }
     {offset
       cIfX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIfY; else goto cIfZ;
       cIfY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIfZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCes_info" {
     sat_sCes_info:
         const sat_sCes_entry;
         const 2;
         const 18;
 },
 sat_sCer_entry() //  [R1]
         { []
         }
     {offset
       cIg5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIg6; else goto cIg7;
       cIg6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIg7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCer_info" {
     sat_sCer_info:
         const sat_sCer_entry;
         const 2;
         const 18;
 },
 sat_sCeq_entry() //  [R1]
         { []
         }
     {offset
       cIgd: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIge; else goto cIgf;
       cIge: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIgf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCeq_info" {
     sat_sCeq_info:
         const sat_sCeq_entry;
         const 2;
         const 18;
 },
 sat_sCeN_entry() //  [R1]
         { []
         }
     {offset
       cIgh: // global
           _sCeN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cIgi; else goto cIgj;
       cIgj: // global
           Hp = Hp + 640;
           if (Hp > HpLim) (likely: False) goto cIgl; else goto cIgk;
       cIgl: // global
           HpAlloc = 640;
           goto cIgi;
       cIgi: // global
           R1 = _sCeN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIgk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCeN::P64;
           _sCe0::P64 = P64[_sCeN::P64 + 16];
           _sCe1::P64 = P64[_sCeN::P64 + 24];
           _sCe2::P64 = P64[_sCeN::P64 + 32];
           _sCe3::P64 = P64[_sCeN::P64 + 40];
           _sCe4::P64 = P64[_sCeN::P64 + 48];
           _sCe5::P64 = P64[_sCeN::P64 + 56];
           _sCe6::P64 = P64[_sCeN::P64 + 64];
           _sCe7::P64 = P64[_sCeN::P64 + 72];
           _sCe8::P64 = P64[_sCeN::P64 + 80];
           _sCe9::P64 = P64[_sCeN::P64 + 88];
           _sCea::P64 = P64[_sCeN::P64 + 96];
           _sCed::P64 = P64[_sCeN::P64 + 104];
           _sCef::P64 = P64[_sCeN::P64 + 112];
           _sCeg::P64 = P64[_sCeN::P64 + 120];
           _sCeh::P64 = P64[_sCeN::P64 + 128];
           _sCei::P64 = P64[_sCeN::P64 + 136];
           _sCej::P64 = P64[_sCeN::P64 + 144];
           _sCek::P64 = P64[_sCeN::P64 + 152];
           _sCel::P64 = P64[_sCeN::P64 + 160];
           _sCem::P64 = P64[_sCeN::P64 + 168];
           _sCen::P64 = P64[_sCeN::P64 + 176];
           _sCeo::P64 = P64[_sCeN::P64 + 184];
           _sCep::P64 = P64[_sCeN::P64 + 192];
           I64[Hp - 632] = :_con_info;
           P64[Hp - 624] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 616] = _sCed::P64;
           I64[Hp - 608] = sat_sCeA_info;
           P64[Hp - 592] = _sCea::P64;
           P64[Hp - 584] = _sCep::P64;
           I64[Hp - 576] = :_con_info;
           P64[Hp - 568] = Hp - 608;
           P64[Hp - 560] = GHC.Types.[]_closure+1;
           I64[Hp - 552] = sat_sCez_info;
           P64[Hp - 536] = _sCe9::P64;
           P64[Hp - 528] = _sCeo::P64;
           I64[Hp - 520] = :_con_info;
           P64[Hp - 512] = Hp - 552;
           P64[Hp - 504] = Hp - 574;
           I64[Hp - 496] = sat_sCey_info;
           P64[Hp - 480] = _sCe8::P64;
           P64[Hp - 472] = _sCen::P64;
           I64[Hp - 464] = :_con_info;
           P64[Hp - 456] = Hp - 496;
           P64[Hp - 448] = Hp - 518;
           I64[Hp - 440] = sat_sCex_info;
           P64[Hp - 424] = _sCe7::P64;
           P64[Hp - 416] = _sCem::P64;
           I64[Hp - 408] = :_con_info;
           P64[Hp - 400] = Hp - 440;
           P64[Hp - 392] = Hp - 462;
           I64[Hp - 384] = sat_sCew_info;
           P64[Hp - 368] = _sCe6::P64;
           P64[Hp - 360] = _sCel::P64;
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = Hp - 384;
           P64[Hp - 336] = Hp - 406;
           I64[Hp - 328] = sat_sCev_info;
           P64[Hp - 312] = _sCe5::P64;
           P64[Hp - 304] = _sCek::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = Hp - 350;
           I64[Hp - 272] = sat_sCeu_info;
           P64[Hp - 256] = _sCe4::P64;
           P64[Hp - 248] = _sCej::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sCet_info;
           P64[Hp - 200] = _sCe3::P64;
           P64[Hp - 192] = _sCei::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sCes_info;
           P64[Hp - 144] = _sCe2::P64;
           P64[Hp - 136] = _sCeh::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sCer_info;
           P64[Hp - 88] = _sCe1::P64;
           P64[Hp - 80] = _sCeg::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sCeq_info;
           P64[Hp - 32] = _sCe0::P64;
           P64[Hp - 24] = _sCef::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 630;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,)_go2_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCeN_info" {
     sat_sCeN_info:
         const sat_sCeN_entry;
         const 23;
         const 4294967311;
         const SCNU_srt+272;
 },
 GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       cIgm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cIgo; else goto cIgp;
       cIgo: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       cIgp: // global
           I64[Sp - 32] = block_cIeH_info;
           R1 = P64[Sp + 56];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 48] = R3;
           P64[Sp + 56] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uIgt; else goto cIeI;
       uIgt: // global
           call _cIeH(R1) args: 0, res: 0, upd: 0;
       cIeI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 60129542144;
         const SCNU_srt+272;
         const 14;
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_slow;
 },
 _cIeH() //  [R1]
         { []
         }
     {offset
       cIeH: // global
           Hp = Hp + 224;
           if (Hp > HpLim) (likely: False) goto cIgs; else goto cIgr;
       cIgs: // global
           HpAlloc = 224;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cIgr: // global
           _sCef::P64 = P64[R1 + 7];
           _sCeg::P64 = P64[R1 + 15];
           _sCeh::P64 = P64[R1 + 23];
           _sCei::P64 = P64[R1 + 31];
           _sCej::P64 = P64[R1 + 39];
           _sCek::P64 = P64[R1 + 47];
           _sCel::P64 = P64[R1 + 55];
           _sCem::P64 = P64[R1 + 63];
           _sCen::P64 = P64[R1 + 71];
           _sCeo::P64 = P64[R1 + 79];
           _sCep::P64 = P64[R1 + 87];
           I64[Hp - 216] = sat_sCeN_info;
           P64[Hp - 200] = P64[Sp + 88];
           P64[Hp - 192] = P64[Sp + 80];
           P64[Hp - 184] = P64[Sp + 8];
           P64[Hp - 176] = P64[Sp + 16];
           P64[Hp - 168] = P64[Sp + 24];
           P64[Hp - 160] = P64[Sp + 32];
           P64[Hp - 152] = P64[Sp + 40];
           P64[Hp - 144] = P64[Sp + 48];
           P64[Hp - 136] = P64[Sp + 56];
           P64[Hp - 128] = P64[Sp + 64];
           P64[Hp - 120] = P64[Sp + 72];
           P64[Hp - 112] = P64[Sp + 96];
           P64[Hp - 104] = _sCef::P64;
           P64[Hp - 96] = _sCeg::P64;
           P64[Hp - 88] = _sCeh::P64;
           P64[Hp - 80] = _sCei::P64;
           P64[Hp - 72] = _sCej::P64;
           P64[Hp - 64] = _sCek::P64;
           P64[Hp - 56] = _sCel::P64;
           P64[Hp - 48] = _sCem::P64;
           P64[Hp - 40] = _sCen::P64;
           P64[Hp - 32] = _sCeo::P64;
           P64[Hp - 24] = _sCep::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 216;
           R1 = Hp - 14;
           Sp = Sp + 104;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cIeH_info" {
     block_cIeH_info:
         const _cIeH;
         const 12;
         const 4294967326;
         const SCNU_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.090341815 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cIic: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,)_$cshow_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 64, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,,,,,,)_$cshow_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIig: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cIih; else goto cIii;
       cIih: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       cIii: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = P64[Sp + 32];
           P64[Sp + 24] = P64[Sp + 40];
           P64[Sp + 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp + 40] = P64[Sp + 48];
           P64[Sp + 48] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 80, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 51539607552;
         const SCNU_srt+280;
         const 12;
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.097842104 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cIiy: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_sCfd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cIiH: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cIiI; else goto cIiJ;
       cIiI: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIiJ: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 72] = P64[R1 + 46];
           P64[Sp - 64] = P64[R1 + 54];
           P64[Sp - 56] = P64[R1 + 62];
           P64[Sp - 48] = P64[R1 + 70];
           P64[Sp - 40] = P64[R1 + 78];
           P64[Sp - 32] = P64[R1 + 86];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 72;
           call GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 80, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCfd_info" {
     sat_sCfd_info:
         const sat_sCfd_entry;
         const 11;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+280;
 },
 GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cIiK: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cIiO; else goto cIiN;
       cIiO: // global
           HpAlloc = 96;
           R1 = GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       cIiN: // global
           I64[Hp - 88] = sat_sCfd_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           P64[Hp - 48] = R6;
           P64[Hp - 40] = P64[Sp];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R4 = P64[Sp + 56];
           R3 = P64[Sp + 48];
           R2 = Hp - 86;
           Sp = Sp + 64;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 55834574848;
         const SCNU_srt+280;
         const 13;
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.108929097 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       cIjc: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,)_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_sCfr_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cIjl: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cIjm; else goto cIjn;
       cIjm: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIjn: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 64] = P64[R1 + 46];
           P64[Sp - 56] = P64[R1 + 54];
           P64[Sp - 48] = P64[R1 + 62];
           P64[Sp - 40] = P64[R1 + 70];
           P64[Sp - 32] = P64[R1 + 78];
           P64[Sp - 24] = P64[R1 + 86];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 64;
           call GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 72, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCfr_info" {
     sat_sCfr_info:
         const sat_sCfr_entry;
         const 11;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+296;
 },
 sat_sCfq_entry() //  [R1, R2]
         { []
         }
     {offset
       cIjt: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cIju; else goto cIjv;
       cIju: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cIjv: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 56] = P64[R1 + 47];
           P64[Sp - 48] = P64[R1 + 55];
           P64[Sp - 40] = P64[R1 + 63];
           P64[Sp - 32] = P64[R1 + 71];
           P64[Sp - 24] = P64[R1 + 79];
           P64[Sp - 16] = P64[R1 + 87];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 56;
           call GHC.Show.$fShow(,,,,,,,,,,)_$cshow_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCfq_info" {
     sat_sCfq_info:
         const sat_sCfq_entry;
         const 11;
         const 4294967304;
         const 4294967301;
         const SCNU_srt+288;
 },
 sat_sCfp_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cIjB: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cIjC; else goto cIjD;
       cIjC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cIjD: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 72] = P64[R1 + 45];
           P64[Sp - 64] = P64[R1 + 53];
           P64[Sp - 56] = P64[R1 + 61];
           P64[Sp - 48] = P64[R1 + 69];
           P64[Sp - 40] = P64[R1 + 77];
           P64[Sp - 32] = P64[R1 + 85];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 72;
           call GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 80, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCfp_info" {
     sat_sCfp_info:
         const sat_sCfp_entry;
         const 11;
         const 4294967304;
         const 12884901911;
         const SCNU_srt+280;
 },
 GHC.Show.$fShow(,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIjF: // global
           Hp = Hp + 320;
           if (Hp > HpLim) (likely: False) goto cIjJ; else goto cIjI;
       cIjJ: // global
           HpAlloc = 320;
           R1 = GHC.Show.$fShow(,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       cIjI: // global
           I64[Hp - 312] = sat_sCfr_info;
           P64[Hp - 304] = R2;
           P64[Hp - 296] = R3;
           P64[Hp - 288] = R4;
           P64[Hp - 280] = R5;
           P64[Hp - 272] = R6;
           _sCfj::P64 = P64[Sp];
           P64[Hp - 264] = _sCfj::P64;
           _sCfk::P64 = P64[Sp + 8];
           P64[Hp - 256] = _sCfk::P64;
           _sCfl::P64 = P64[Sp + 16];
           P64[Hp - 248] = _sCfl::P64;
           _sCfm::P64 = P64[Sp + 24];
           P64[Hp - 240] = _sCfm::P64;
           _sCfn::P64 = P64[Sp + 32];
           P64[Hp - 232] = _sCfn::P64;
           _sCfo::P64 = P64[Sp + 40];
           P64[Hp - 224] = _sCfo::P64;
           I64[Hp - 216] = sat_sCfq_info;
           P64[Hp - 208] = R2;
           P64[Hp - 200] = R3;
           P64[Hp - 192] = R4;
           P64[Hp - 184] = R5;
           P64[Hp - 176] = R6;
           P64[Hp - 168] = _sCfj::P64;
           P64[Hp - 160] = _sCfk::P64;
           P64[Hp - 152] = _sCfl::P64;
           P64[Hp - 144] = _sCfm::P64;
           P64[Hp - 136] = _sCfn::P64;
           P64[Hp - 128] = _sCfo::P64;
           I64[Hp - 120] = sat_sCfp_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = _sCfj::P64;
           P64[Hp - 64] = _sCfk::P64;
           P64[Hp - 56] = _sCfl::P64;
           P64[Hp - 48] = _sCfm::P64;
           P64[Hp - 40] = _sCfn::P64;
           P64[Hp - 32] = _sCfo::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 117;
           P64[Hp - 8] = Hp - 215;
           P64[Hp] = Hp - 310;
           R1 = Hp - 23;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,)_info" {
     GHC.Show.$fShow(,,,,,,,,,,)_info:
         const GHC.Show.$fShow(,,,,,,,,,,)_entry;
         const 0;
         const 64424509454;
         const 47244640256;
         const SCNU_srt+280;
         const 11;
         const GHC.Show.$fShow(,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.123521133 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,,,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,,,,,,)_go2_info;
         const 0;
 },
 sat_sCfB_entry() //  [R1]
         { []
         }
     {offset
       cIkI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cIkJ; else goto cIkK;
       cIkJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIkK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,)_go2_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCfB_info" {
     sat_sCfB_info:
         const sat_sCfB_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+312;
 },
 GHC.Show.$fShow(,,,,,,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cIkP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cIkQ; else goto cIkR;
       cIkQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIkR: // global
           I64[Sp - 16] = block_cIks_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uIl6; else goto cIkt;
       uIl6: // global
           call _cIks(R1) args: 0, res: 0, upd: 0;
       cIkt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,,,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,,,,,,)_go2_entry;
         const 0;
         const 144115192370823182;
         const 8589934607;
         const SCNU_srt+112;
 },
 _cIks() //  [R1]
         { []
         }
     {offset
       cIks: // global
           if (R1 & 7 == 1) goto cIkM; else goto cIkN;
       cIkM: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cIkN: // global
           I64[Sp - 8] = block_cIky_info;
           _sCfw::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sCfw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uIl5; else goto cIkz;
       uIl5: // global
           call _cIky(R1) args: 0, res: 0, upd: 0;
       cIkz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cIks_info" {
     block_cIks_info:
         const _cIks;
         const 1;
         const 144115192370823198;
         const SCNU_srt+112;
 },
 _cIky() //  [R1]
         { []
         }
     {offset
       cIky: // global
           _sCft::P64 = P64[Sp + 16];
           _sCfw::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cIkY; else goto cIl0;
       cIkY: // global
           R2 = _sCft::P64;
           R1 = _sCfw::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cIl0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cIl3; else goto cIl2;
       cIl3: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cIl2: // global
           I64[Hp - 48] = sat_sCfB_info;
           P64[Hp - 32] = _sCft::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sCfw::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cIky_info" {
     block_cIky_info:
         const _cIky;
         const 2;
         const 4294967326;
         const SCNU_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.141533644 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cIlu: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_sCga_entry() //  [R1]
         { []
         }
     {offset
       cIlM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIlN; else goto cIlO;
       cIlN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIlO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCga_info" {
     sat_sCga_info:
         const sat_sCga_entry;
         const 2;
         const 18;
 },
 sat_sCg9_entry() //  [R1]
         { []
         }
     {offset
       cIlU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIlV; else goto cIlW;
       cIlV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIlW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCg9_info" {
     sat_sCg9_info:
         const sat_sCg9_entry;
         const 2;
         const 18;
 },
 sat_sCg8_entry() //  [R1]
         { []
         }
     {offset
       cIm2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIm3; else goto cIm4;
       cIm3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIm4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCg8_info" {
     sat_sCg8_info:
         const sat_sCg8_entry;
         const 2;
         const 18;
 },
 sat_sCg7_entry() //  [R1]
         { []
         }
     {offset
       cIma: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cImb; else goto cImc;
       cImb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cImc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCg7_info" {
     sat_sCg7_info:
         const sat_sCg7_entry;
         const 2;
         const 18;
 },
 sat_sCg6_entry() //  [R1]
         { []
         }
     {offset
       cImi: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cImj; else goto cImk;
       cImj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cImk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCg6_info" {
     sat_sCg6_info:
         const sat_sCg6_entry;
         const 2;
         const 18;
 },
 sat_sCg5_entry() //  [R1]
         { []
         }
     {offset
       cImq: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cImr; else goto cIms;
       cImr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIms: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCg5_info" {
     sat_sCg5_info:
         const sat_sCg5_entry;
         const 2;
         const 18;
 },
 sat_sCg4_entry() //  [R1]
         { []
         }
     {offset
       cImy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cImz; else goto cImA;
       cImz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cImA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCg4_info" {
     sat_sCg4_info:
         const sat_sCg4_entry;
         const 2;
         const 18;
 },
 sat_sCg3_entry() //  [R1]
         { []
         }
     {offset
       cImG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cImH; else goto cImI;
       cImH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cImI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCg3_info" {
     sat_sCg3_info:
         const sat_sCg3_entry;
         const 2;
         const 18;
 },
 sat_sCg2_entry() //  [R1]
         { []
         }
     {offset
       cImO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cImP; else goto cImQ;
       cImP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cImQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCg2_info" {
     sat_sCg2_info:
         const sat_sCg2_entry;
         const 2;
         const 18;
 },
 sat_sCg1_entry() //  [R1]
         { []
         }
     {offset
       cImW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cImX; else goto cImY;
       cImX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cImY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCg1_info" {
     sat_sCg1_info:
         const sat_sCg1_entry;
         const 2;
         const 18;
 },
 sat_sCgm_entry() //  [R1]
         { []
         }
     {offset
       cIn0: // global
           _sCgm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cIn1; else goto cIn2;
       cIn2: // global
           Hp = Hp + 584;
           if (Hp > HpLim) (likely: False) goto cIn4; else goto cIn3;
       cIn4: // global
           HpAlloc = 584;
           goto cIn1;
       cIn1: // global
           R1 = _sCgm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIn3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCgm::P64;
           _sCfD::P64 = P64[_sCgm::P64 + 16];
           _sCfE::P64 = P64[_sCgm::P64 + 24];
           _sCfF::P64 = P64[_sCgm::P64 + 32];
           _sCfG::P64 = P64[_sCgm::P64 + 40];
           _sCfH::P64 = P64[_sCgm::P64 + 48];
           _sCfI::P64 = P64[_sCgm::P64 + 56];
           _sCfJ::P64 = P64[_sCgm::P64 + 64];
           _sCfK::P64 = P64[_sCgm::P64 + 72];
           _sCfL::P64 = P64[_sCgm::P64 + 80];
           _sCfM::P64 = P64[_sCgm::P64 + 88];
           _sCfP::P64 = P64[_sCgm::P64 + 96];
           _sCfR::P64 = P64[_sCgm::P64 + 104];
           _sCfS::P64 = P64[_sCgm::P64 + 112];
           _sCfT::P64 = P64[_sCgm::P64 + 120];
           _sCfU::P64 = P64[_sCgm::P64 + 128];
           _sCfV::P64 = P64[_sCgm::P64 + 136];
           _sCfW::P64 = P64[_sCgm::P64 + 144];
           _sCfX::P64 = P64[_sCgm::P64 + 152];
           _sCfY::P64 = P64[_sCgm::P64 + 160];
           _sCfZ::P64 = P64[_sCgm::P64 + 168];
           _sCg0::P64 = P64[_sCgm::P64 + 176];
           I64[Hp - 576] = :_con_info;
           P64[Hp - 568] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 560] = _sCfP::P64;
           I64[Hp - 552] = sat_sCga_info;
           P64[Hp - 536] = _sCfM::P64;
           P64[Hp - 528] = _sCg0::P64;
           I64[Hp - 520] = :_con_info;
           P64[Hp - 512] = Hp - 552;
           P64[Hp - 504] = GHC.Types.[]_closure+1;
           I64[Hp - 496] = sat_sCg9_info;
           P64[Hp - 480] = _sCfL::P64;
           P64[Hp - 472] = _sCfZ::P64;
           I64[Hp - 464] = :_con_info;
           P64[Hp - 456] = Hp - 496;
           P64[Hp - 448] = Hp - 518;
           I64[Hp - 440] = sat_sCg8_info;
           P64[Hp - 424] = _sCfK::P64;
           P64[Hp - 416] = _sCfY::P64;
           I64[Hp - 408] = :_con_info;
           P64[Hp - 400] = Hp - 440;
           P64[Hp - 392] = Hp - 462;
           I64[Hp - 384] = sat_sCg7_info;
           P64[Hp - 368] = _sCfJ::P64;
           P64[Hp - 360] = _sCfX::P64;
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = Hp - 384;
           P64[Hp - 336] = Hp - 406;
           I64[Hp - 328] = sat_sCg6_info;
           P64[Hp - 312] = _sCfI::P64;
           P64[Hp - 304] = _sCfW::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = Hp - 350;
           I64[Hp - 272] = sat_sCg5_info;
           P64[Hp - 256] = _sCfH::P64;
           P64[Hp - 248] = _sCfV::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sCg4_info;
           P64[Hp - 200] = _sCfG::P64;
           P64[Hp - 192] = _sCfU::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sCg3_info;
           P64[Hp - 144] = _sCfF::P64;
           P64[Hp - 136] = _sCfT::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sCg2_info;
           P64[Hp - 88] = _sCfE::P64;
           P64[Hp - 80] = _sCfS::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sCg1_info;
           P64[Hp - 32] = _sCfD::P64;
           P64[Hp - 24] = _sCfR::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 574;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,)_go2_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCgm_info" {
     sat_sCgm_info:
         const sat_sCgm_entry;
         const 21;
         const 4294967311;
         const SCNU_srt+312;
 },
 GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cIn5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cIn7; else goto cIn8;
       cIn7: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       cIn8: // global
           I64[Sp - 32] = block_cIly_info;
           R1 = P64[Sp + 48];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 40] = R3;
           P64[Sp + 48] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uInc; else goto cIlz;
       uInc: // global
           call _cIly(R1) args: 0, res: 0, upd: 0;
       cIlz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 55834574848;
         const SCNU_srt+312;
         const 13;
         const GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_slow;
 },
 _cIly() //  [R1]
         { []
         }
     {offset
       cIly: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cInb; else goto cIna;
       cInb: // global
           HpAlloc = 208;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cIna: // global
           _sCfR::P64 = P64[R1 + 7];
           _sCfS::P64 = P64[R1 + 15];
           _sCfT::P64 = P64[R1 + 23];
           _sCfU::P64 = P64[R1 + 31];
           _sCfV::P64 = P64[R1 + 39];
           _sCfW::P64 = P64[R1 + 47];
           _sCfX::P64 = P64[R1 + 55];
           _sCfY::P64 = P64[R1 + 63];
           _sCfZ::P64 = P64[R1 + 71];
           _sCg0::P64 = P64[R1 + 79];
           I64[Hp - 200] = sat_sCgm_info;
           P64[Hp - 184] = P64[Sp + 80];
           P64[Hp - 176] = P64[Sp + 72];
           P64[Hp - 168] = P64[Sp + 8];
           P64[Hp - 160] = P64[Sp + 16];
           P64[Hp - 152] = P64[Sp + 24];
           P64[Hp - 144] = P64[Sp + 32];
           P64[Hp - 136] = P64[Sp + 40];
           P64[Hp - 128] = P64[Sp + 48];
           P64[Hp - 120] = P64[Sp + 56];
           P64[Hp - 112] = P64[Sp + 64];
           P64[Hp - 104] = P64[Sp + 88];
           P64[Hp - 96] = _sCfR::P64;
           P64[Hp - 88] = _sCfS::P64;
           P64[Hp - 80] = _sCfT::P64;
           P64[Hp - 72] = _sCfU::P64;
           P64[Hp - 64] = _sCfV::P64;
           P64[Hp - 56] = _sCfW::P64;
           P64[Hp - 48] = _sCfX::P64;
           P64[Hp - 40] = _sCfY::P64;
           P64[Hp - 32] = _sCfZ::P64;
           P64[Hp - 24] = _sCg0::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 200;
           R1 = Hp - 14;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cIly_info" {
     block_cIly_info:
         const _cIly;
         const 11;
         const 4294967326;
         const SCNU_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.17167008 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cIoN: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,)_$cshow_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 56, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,,,,,)_$cshow_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIoR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cIoS; else goto cIoT;
       cIoS: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       cIoT: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = P64[Sp + 32];
           P64[Sp + 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp + 32] = P64[Sp + 40];
           P64[Sp + 40] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 72, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 47244640256;
         const SCNU_srt+320;
         const 11;
         const GHC.Show.$fShow(,,,,,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.178909165 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cIp8: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,)_$cshowList_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2,
                                                            R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_sCgK_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cIph: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cIpi; else goto cIpj;
       cIpi: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIpj: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 64] = P64[R1 + 46];
           P64[Sp - 56] = P64[R1 + 54];
           P64[Sp - 48] = P64[R1 + 62];
           P64[Sp - 40] = P64[R1 + 70];
           P64[Sp - 32] = P64[R1 + 78];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 64;
           call GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 72, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCgK_info" {
     sat_sCgK_info:
         const sat_sCgK_entry;
         const 10;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+320;
 },
 GHC.Show.$fShow(,,,,,,,,,)_$cshowList_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cIpk: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cIpo; else goto cIpn;
       cIpo: // global
           HpAlloc = 88;
           R1 = GHC.Show.$fShow(,,,,,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       cIpn: // global
           I64[Hp - 80] = sat_sCgK_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = P64[Sp];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 40];
           R2 = Hp - 78;
           Sp = Sp + 56;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 51539607552;
         const SCNU_srt+320;
         const 12;
         const GHC.Show.$fShow(,,,,,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.190087393 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,,,,,)_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       cIpK: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,)_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_sCgX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cIpT: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cIpU; else goto cIpV;
       cIpU: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIpV: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 56] = P64[R1 + 46];
           P64[Sp - 48] = P64[R1 + 54];
           P64[Sp - 40] = P64[R1 + 62];
           P64[Sp - 32] = P64[R1 + 70];
           P64[Sp - 24] = P64[R1 + 78];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 56;
           call GHC.Show.$fShow(,,,,,,,,,)_$cshowList_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCgX_info" {
     sat_sCgX_info:
         const sat_sCgX_entry;
         const 10;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+336;
 },
 sat_sCgW_entry() //  [R1, R2]
         { []
         }
     {offset
       cIq1: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cIq2; else goto cIq3;
       cIq2: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cIq3: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 48] = P64[R1 + 47];
           P64[Sp - 40] = P64[R1 + 55];
           P64[Sp - 32] = P64[R1 + 63];
           P64[Sp - 24] = P64[R1 + 71];
           P64[Sp - 16] = P64[R1 + 79];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 48;
           call GHC.Show.$fShow(,,,,,,,,,)_$cshow_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCgW_info" {
     sat_sCgW_info:
         const sat_sCgW_entry;
         const 10;
         const 4294967304;
         const 4294967301;
         const SCNU_srt+328;
 },
 sat_sCgV_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cIq9: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cIqa; else goto cIqb;
       cIqa: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cIqb: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 64] = P64[R1 + 45];
           P64[Sp - 56] = P64[R1 + 53];
           P64[Sp - 48] = P64[R1 + 61];
           P64[Sp - 40] = P64[R1 + 69];
           P64[Sp - 32] = P64[R1 + 77];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 64;
           call GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 72, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCgV_info" {
     sat_sCgV_info:
         const sat_sCgV_entry;
         const 10;
         const 4294967304;
         const 12884901911;
         const SCNU_srt+320;
 },
 GHC.Show.$fShow(,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIqd: // global
           Hp = Hp + 296;
           if (Hp > HpLim) (likely: False) goto cIqh; else goto cIqg;
       cIqh: // global
           HpAlloc = 296;
           R1 = GHC.Show.$fShow(,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cIqg: // global
           I64[Hp - 288] = sat_sCgX_info;
           P64[Hp - 280] = R2;
           P64[Hp - 272] = R3;
           P64[Hp - 264] = R4;
           P64[Hp - 256] = R5;
           P64[Hp - 248] = R6;
           _sCgQ::P64 = P64[Sp];
           P64[Hp - 240] = _sCgQ::P64;
           _sCgR::P64 = P64[Sp + 8];
           P64[Hp - 232] = _sCgR::P64;
           _sCgS::P64 = P64[Sp + 16];
           P64[Hp - 224] = _sCgS::P64;
           _sCgT::P64 = P64[Sp + 24];
           P64[Hp - 216] = _sCgT::P64;
           _sCgU::P64 = P64[Sp + 32];
           P64[Hp - 208] = _sCgU::P64;
           I64[Hp - 200] = sat_sCgW_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           P64[Hp - 176] = R4;
           P64[Hp - 168] = R5;
           P64[Hp - 160] = R6;
           P64[Hp - 152] = _sCgQ::P64;
           P64[Hp - 144] = _sCgR::P64;
           P64[Hp - 136] = _sCgS::P64;
           P64[Hp - 128] = _sCgT::P64;
           P64[Hp - 120] = _sCgU::P64;
           I64[Hp - 112] = sat_sCgV_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = _sCgQ::P64;
           P64[Hp - 56] = _sCgR::P64;
           P64[Hp - 48] = _sCgS::P64;
           P64[Hp - 40] = _sCgT::P64;
           P64[Hp - 32] = _sCgU::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 109;
           P64[Hp - 8] = Hp - 199;
           P64[Hp] = Hp - 286;
           R1 = Hp - 23;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,)_info" {
     GHC.Show.$fShow(,,,,,,,,,)_info:
         const GHC.Show.$fShow(,,,,,,,,,)_entry;
         const 0;
         const 64424509454;
         const 42949672960;
         const SCNU_srt+320;
         const 10;
         const GHC.Show.$fShow(,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.204453951 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,,,,,)_go2_info;
         const 0;
 },
 sat_sCh7_entry() //  [R1]
         { []
         }
     {offset
       cIrd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cIre; else goto cIrf;
       cIre: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIrf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,)_go2_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCh7_info" {
     sat_sCh7_info:
         const sat_sCh7_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+352;
 },
 GHC.Show.$fShow(,,,,,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cIrk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cIrl; else goto cIrm;
       cIrl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIrm: // global
           I64[Sp - 16] = block_cIqX_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uIrB; else goto cIqY;
       uIrB: // global
           call _cIqX(R1) args: 0, res: 0, upd: 0;
       cIqY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,,,,,)_go2_entry;
         const 0;
         const 4611686022722355214;
         const 8589934607;
         const SCNU_srt+112;
 },
 _cIqX() //  [R1]
         { []
         }
     {offset
       cIqX: // global
           if (R1 & 7 == 1) goto cIrh; else goto cIri;
       cIrh: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cIri: // global
           I64[Sp - 8] = block_cIr3_info;
           _sCh2::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sCh2::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uIrA; else goto cIr4;
       uIrA: // global
           call _cIr3(R1) args: 0, res: 0, upd: 0;
       cIr4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cIqX_info" {
     block_cIqX_info:
         const _cIqX;
         const 1;
         const 4611686022722355230;
         const SCNU_srt+112;
 },
 _cIr3() //  [R1]
         { []
         }
     {offset
       cIr3: // global
           _sCgZ::P64 = P64[Sp + 16];
           _sCh2::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cIrt; else goto cIrv;
       cIrt: // global
           R2 = _sCgZ::P64;
           R1 = _sCh2::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cIrv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cIry; else goto cIrx;
       cIry: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cIrx: // global
           I64[Hp - 48] = sat_sCh7_info;
           P64[Hp - 32] = _sCgZ::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sCh2::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cIr3_info" {
     block_cIr3_info:
         const _cIr3;
         const 2;
         const 4294967326;
         const SCNU_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.22236033 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cIrZ: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2,
                                                            R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_sChD_entry() //  [R1]
         { []
         }
     {offset
       cIsh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIsi; else goto cIsj;
       cIsi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIsj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sChD_info" {
     sat_sChD_info:
         const sat_sChD_entry;
         const 2;
         const 18;
 },
 sat_sChC_entry() //  [R1]
         { []
         }
     {offset
       cIsp: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIsq; else goto cIsr;
       cIsq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIsr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sChC_info" {
     sat_sChC_info:
         const sat_sChC_entry;
         const 2;
         const 18;
 },
 sat_sChB_entry() //  [R1]
         { []
         }
     {offset
       cIsx: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIsy; else goto cIsz;
       cIsy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIsz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sChB_info" {
     sat_sChB_info:
         const sat_sChB_entry;
         const 2;
         const 18;
 },
 sat_sChA_entry() //  [R1]
         { []
         }
     {offset
       cIsF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIsG; else goto cIsH;
       cIsG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIsH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sChA_info" {
     sat_sChA_info:
         const sat_sChA_entry;
         const 2;
         const 18;
 },
 sat_sChz_entry() //  [R1]
         { []
         }
     {offset
       cIsN: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIsO; else goto cIsP;
       cIsO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIsP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sChz_info" {
     sat_sChz_info:
         const sat_sChz_entry;
         const 2;
         const 18;
 },
 sat_sChy_entry() //  [R1]
         { []
         }
     {offset
       cIsV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIsW; else goto cIsX;
       cIsW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIsX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sChy_info" {
     sat_sChy_info:
         const sat_sChy_entry;
         const 2;
         const 18;
 },
 sat_sChx_entry() //  [R1]
         { []
         }
     {offset
       cIt3: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIt4; else goto cIt5;
       cIt4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIt5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sChx_info" {
     sat_sChx_info:
         const sat_sChx_entry;
         const 2;
         const 18;
 },
 sat_sChw_entry() //  [R1]
         { []
         }
     {offset
       cItb: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cItc; else goto cItd;
       cItc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cItd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sChw_info" {
     sat_sChw_info:
         const sat_sChw_entry;
         const 2;
         const 18;
 },
 sat_sChv_entry() //  [R1]
         { []
         }
     {offset
       cItj: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cItk; else goto cItl;
       cItk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cItl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sChv_info" {
     sat_sChv_info:
         const sat_sChv_entry;
         const 2;
         const 18;
 },
 sat_sChO_entry() //  [R1]
         { []
         }
     {offset
       cItn: // global
           _sChO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cIto; else goto cItp;
       cItp: // global
           Hp = Hp + 528;
           if (Hp > HpLim) (likely: False) goto cItr; else goto cItq;
       cItr: // global
           HpAlloc = 528;
           goto cIto;
       cIto: // global
           R1 = _sChO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cItq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sChO::P64;
           _sCh9::P64 = P64[_sChO::P64 + 16];
           _sCha::P64 = P64[_sChO::P64 + 24];
           _sChb::P64 = P64[_sChO::P64 + 32];
           _sChc::P64 = P64[_sChO::P64 + 40];
           _sChd::P64 = P64[_sChO::P64 + 48];
           _sChe::P64 = P64[_sChO::P64 + 56];
           _sChf::P64 = P64[_sChO::P64 + 64];
           _sChg::P64 = P64[_sChO::P64 + 72];
           _sChh::P64 = P64[_sChO::P64 + 80];
           _sChk::P64 = P64[_sChO::P64 + 88];
           _sChm::P64 = P64[_sChO::P64 + 96];
           _sChn::P64 = P64[_sChO::P64 + 104];
           _sCho::P64 = P64[_sChO::P64 + 112];
           _sChp::P64 = P64[_sChO::P64 + 120];
           _sChq::P64 = P64[_sChO::P64 + 128];
           _sChr::P64 = P64[_sChO::P64 + 136];
           _sChs::P64 = P64[_sChO::P64 + 144];
           _sCht::P64 = P64[_sChO::P64 + 152];
           _sChu::P64 = P64[_sChO::P64 + 160];
           I64[Hp - 520] = :_con_info;
           P64[Hp - 512] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 504] = _sChk::P64;
           I64[Hp - 496] = sat_sChD_info;
           P64[Hp - 480] = _sChh::P64;
           P64[Hp - 472] = _sChu::P64;
           I64[Hp - 464] = :_con_info;
           P64[Hp - 456] = Hp - 496;
           P64[Hp - 448] = GHC.Types.[]_closure+1;
           I64[Hp - 440] = sat_sChC_info;
           P64[Hp - 424] = _sChg::P64;
           P64[Hp - 416] = _sCht::P64;
           I64[Hp - 408] = :_con_info;
           P64[Hp - 400] = Hp - 440;
           P64[Hp - 392] = Hp - 462;
           I64[Hp - 384] = sat_sChB_info;
           P64[Hp - 368] = _sChf::P64;
           P64[Hp - 360] = _sChs::P64;
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = Hp - 384;
           P64[Hp - 336] = Hp - 406;
           I64[Hp - 328] = sat_sChA_info;
           P64[Hp - 312] = _sChe::P64;
           P64[Hp - 304] = _sChr::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = Hp - 350;
           I64[Hp - 272] = sat_sChz_info;
           P64[Hp - 256] = _sChd::P64;
           P64[Hp - 248] = _sChq::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sChy_info;
           P64[Hp - 200] = _sChc::P64;
           P64[Hp - 192] = _sChp::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sChx_info;
           P64[Hp - 144] = _sChb::P64;
           P64[Hp - 136] = _sCho::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sChw_info;
           P64[Hp - 88] = _sCha::P64;
           P64[Hp - 80] = _sChn::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sChv_info;
           P64[Hp - 32] = _sCh9::P64;
           P64[Hp - 24] = _sChm::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 518;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,)_go2_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sChO_info" {
     sat_sChO_info:
         const sat_sChO_entry;
         const 19;
         const 4294967311;
         const SCNU_srt+352;
 },
 GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cIts: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cItu; else goto cItv;
       cItu: // global
           R1 = GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       cItv: // global
           I64[Sp - 32] = block_cIs3_info;
           R1 = P64[Sp + 40];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 32] = R3;
           P64[Sp + 40] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uItz; else goto cIs4;
       uItz: // global
           call _cIs3(R1) args: 0, res: 0, upd: 0;
       cIs4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 51539607552;
         const SCNU_srt+352;
         const 12;
         const GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_slow;
 },
 _cIs3() //  [R1]
         { []
         }
     {offset
       cIs3: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cIty; else goto cItx;
       cIty: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cItx: // global
           _sChm::P64 = P64[R1 + 7];
           _sChn::P64 = P64[R1 + 15];
           _sCho::P64 = P64[R1 + 23];
           _sChp::P64 = P64[R1 + 31];
           _sChq::P64 = P64[R1 + 39];
           _sChr::P64 = P64[R1 + 47];
           _sChs::P64 = P64[R1 + 55];
           _sCht::P64 = P64[R1 + 63];
           _sChu::P64 = P64[R1 + 71];
           I64[Hp - 184] = sat_sChO_info;
           P64[Hp - 168] = P64[Sp + 72];
           P64[Hp - 160] = P64[Sp + 64];
           P64[Hp - 152] = P64[Sp + 8];
           P64[Hp - 144] = P64[Sp + 16];
           P64[Hp - 136] = P64[Sp + 24];
           P64[Hp - 128] = P64[Sp + 32];
           P64[Hp - 120] = P64[Sp + 40];
           P64[Hp - 112] = P64[Sp + 48];
           P64[Hp - 104] = P64[Sp + 56];
           P64[Hp - 96] = P64[Sp + 80];
           P64[Hp - 88] = _sChm::P64;
           P64[Hp - 80] = _sChn::P64;
           P64[Hp - 72] = _sCho::P64;
           P64[Hp - 64] = _sChp::P64;
           P64[Hp - 56] = _sChq::P64;
           P64[Hp - 48] = _sChr::P64;
           P64[Hp - 40] = _sChs::P64;
           P64[Hp - 32] = _sCht::P64;
           P64[Hp - 24] = _sChu::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 184;
           R1 = Hp - 14;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cIs3_info" {
     block_cIs3_info:
         const _cIs3;
         const 10;
         const 4294967326;
         const SCNU_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.250281233 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cIv2: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,)_$cshow_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 48, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,,,,)_$cshow_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIv6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cIv7; else goto cIv8;
       cIv7: // global
           R1 = GHC.Show.$fShow(,,,,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cIv8: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp + 24] = P64[Sp + 32];
           P64[Sp + 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 42949672960;
         const SCNU_srt+360;
         const 10;
         const GHC.Show.$fShow(,,,,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.257148551 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cIvm: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,)_$cshowList_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2,
                                                           R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_sCia_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cIvv: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cIvw; else goto cIvx;
       cIvw: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIvx: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 56] = P64[R1 + 46];
           P64[Sp - 48] = P64[R1 + 54];
           P64[Sp - 40] = P64[R1 + 62];
           P64[Sp - 32] = P64[R1 + 70];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 56;
           call GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCia_info" {
     sat_sCia_info:
         const sat_sCia_entry;
         const 9;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+360;
 },
 GHC.Show.$fShow(,,,,,,,,)_$cshowList_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cIvy: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cIvC; else goto cIvB;
       cIvC: // global
           HpAlloc = 80;
           R1 = GHC.Show.$fShow(,,,,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       cIvB: // global
           I64[Hp - 72] = sat_sCia_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = Hp - 70;
           Sp = Sp + 48;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 47244640256;
         const SCNU_srt+360;
         const 11;
         const GHC.Show.$fShow(,,,,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.267595517 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,,,,)_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       cIvW: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,)_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2,
                                                R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sCim_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cIw5: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cIw6; else goto cIw7;
       cIw6: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIw7: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 48] = P64[R1 + 46];
           P64[Sp - 40] = P64[R1 + 54];
           P64[Sp - 32] = P64[R1 + 62];
           P64[Sp - 24] = P64[R1 + 70];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 48;
           call GHC.Show.$fShow(,,,,,,,,)_$cshowList_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCim_info" {
     sat_sCim_info:
         const sat_sCim_entry;
         const 9;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+376;
 },
 sat_sCil_entry() //  [R1, R2]
         { []
         }
     {offset
       cIwd: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIwe; else goto cIwf;
       cIwe: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cIwf: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 40] = P64[R1 + 47];
           P64[Sp - 32] = P64[R1 + 55];
           P64[Sp - 24] = P64[R1 + 63];
           P64[Sp - 16] = P64[R1 + 71];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call GHC.Show.$fShow(,,,,,,,,)_$cshow_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCil_info" {
     sat_sCil_info:
         const sat_sCil_entry;
         const 9;
         const 4294967304;
         const 4294967301;
         const SCNU_srt+368;
 },
 sat_sCik_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cIwl: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cIwm; else goto cIwn;
       cIwm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cIwn: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 56] = P64[R1 + 45];
           P64[Sp - 48] = P64[R1 + 53];
           P64[Sp - 40] = P64[R1 + 61];
           P64[Sp - 32] = P64[R1 + 69];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 56;
           call GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCik_info" {
     sat_sCik_info:
         const sat_sCik_entry;
         const 9;
         const 4294967304;
         const 12884901911;
         const SCNU_srt+360;
 },
 GHC.Show.$fShow(,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIwp: // global
           Hp = Hp + 272;
           if (Hp > HpLim) (likely: False) goto cIwt; else goto cIws;
       cIwt: // global
           HpAlloc = 272;
           R1 = GHC.Show.$fShow(,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cIws: // global
           I64[Hp - 264] = sat_sCim_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           P64[Hp - 240] = R4;
           P64[Hp - 232] = R5;
           P64[Hp - 224] = R6;
           _sCig::P64 = P64[Sp];
           P64[Hp - 216] = _sCig::P64;
           _sCih::P64 = P64[Sp + 8];
           P64[Hp - 208] = _sCih::P64;
           _sCii::P64 = P64[Sp + 16];
           P64[Hp - 200] = _sCii::P64;
           _sCij::P64 = P64[Sp + 24];
           P64[Hp - 192] = _sCij::P64;
           I64[Hp - 184] = sat_sCil_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           P64[Hp - 160] = R4;
           P64[Hp - 152] = R5;
           P64[Hp - 144] = R6;
           P64[Hp - 136] = _sCig::P64;
           P64[Hp - 128] = _sCih::P64;
           P64[Hp - 120] = _sCii::P64;
           P64[Hp - 112] = _sCij::P64;
           I64[Hp - 104] = sat_sCik_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           P64[Hp - 64] = R6;
           P64[Hp - 56] = _sCig::P64;
           P64[Hp - 48] = _sCih::P64;
           P64[Hp - 40] = _sCii::P64;
           P64[Hp - 32] = _sCij::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 101;
           P64[Hp - 8] = Hp - 183;
           P64[Hp] = Hp - 262;
           R1 = Hp - 23;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,)_info" {
     GHC.Show.$fShow(,,,,,,,,)_info:
         const GHC.Show.$fShow(,,,,,,,,)_entry;
         const 0;
         const 64424509454;
         const 38654705664;
         const SCNU_srt+360;
         const 9;
         const GHC.Show.$fShow(,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.281551847 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,,,,)_go2_info;
         const 0;
 },
 sat_sCiw_entry() //  [R1]
         { []
         }
     {offset
       cIxm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cIxn; else goto cIxo;
       cIxn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIxo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,)_go2_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCiw_info" {
     sat_sCiw_info:
         const sat_sCiw_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+392;
 },
 section ""relreadonly" . uIxL_srtd" {
     uIxL_srtd:
         const SCNU_srt+112;
         const 36;
         const 34359738369;
 },
 GHC.Show.$fShow(,,,,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cIxt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cIxu; else goto cIxv;
       cIxu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIxv: // global
           I64[Sp - 16] = block_cIx6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uIxK; else goto cIx7;
       uIxK: // global
           call _cIx6(R1) args: 0, res: 0, upd: 0;
       cIx7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,,,,)_go2_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uIxL_srtd;
 },
 section ""relreadonly" . uIxM_srtd" {
     uIxM_srtd:
         const SCNU_srt+112;
         const 36;
         const 34359738369;
 },
 _cIx6() //  [R1]
         { []
         }
     {offset
       cIx6: // global
           if (R1 & 7 == 1) goto cIxq; else goto cIxr;
       cIxq: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cIxr: // global
           I64[Sp - 8] = block_cIxc_info;
           _sCir::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sCir::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uIxJ; else goto cIxd;
       uIxJ: // global
           call _cIxc(R1) args: 0, res: 0, upd: 0;
       cIxd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cIx6_info" {
     block_cIx6_info:
         const _cIx6;
         const 1;
         const 18446744069414584350;
         const uIxM_srtd;
 },
 _cIxc() //  [R1]
         { []
         }
     {offset
       cIxc: // global
           _sCio::P64 = P64[Sp + 16];
           _sCir::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cIxC; else goto cIxE;
       cIxC: // global
           R2 = _sCio::P64;
           R1 = _sCir::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cIxE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cIxH; else goto cIxG;
       cIxH: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cIxG: // global
           I64[Hp - 48] = sat_sCiw_info;
           P64[Hp - 32] = _sCio::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sCir::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cIxc_info" {
     block_cIxc_info:
         const _cIxc;
         const 2;
         const 4294967326;
         const SCNU_srt+392;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.299270313 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cIyc: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2,
                                                           R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_sCiZ_entry() //  [R1]
         { []
         }
     {offset
       cIyu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIyv; else goto cIyw;
       cIyv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIyw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCiZ_info" {
     sat_sCiZ_info:
         const sat_sCiZ_entry;
         const 2;
         const 18;
 },
 sat_sCiY_entry() //  [R1]
         { []
         }
     {offset
       cIyC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIyD; else goto cIyE;
       cIyD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIyE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCiY_info" {
     sat_sCiY_info:
         const sat_sCiY_entry;
         const 2;
         const 18;
 },
 sat_sCiX_entry() //  [R1]
         { []
         }
     {offset
       cIyK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIyL; else goto cIyM;
       cIyL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIyM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCiX_info" {
     sat_sCiX_info:
         const sat_sCiX_entry;
         const 2;
         const 18;
 },
 sat_sCiW_entry() //  [R1]
         { []
         }
     {offset
       cIyS: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIyT; else goto cIyU;
       cIyT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIyU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCiW_info" {
     sat_sCiW_info:
         const sat_sCiW_entry;
         const 2;
         const 18;
 },
 sat_sCiV_entry() //  [R1]
         { []
         }
     {offset
       cIz0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIz1; else goto cIz2;
       cIz1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIz2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCiV_info" {
     sat_sCiV_info:
         const sat_sCiV_entry;
         const 2;
         const 18;
 },
 sat_sCiU_entry() //  [R1]
         { []
         }
     {offset
       cIz8: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIz9; else goto cIza;
       cIz9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIza: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCiU_info" {
     sat_sCiU_info:
         const sat_sCiU_entry;
         const 2;
         const 18;
 },
 sat_sCiT_entry() //  [R1]
         { []
         }
     {offset
       cIzg: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIzh; else goto cIzi;
       cIzh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIzi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCiT_info" {
     sat_sCiT_info:
         const sat_sCiT_entry;
         const 2;
         const 18;
 },
 sat_sCiS_entry() //  [R1]
         { []
         }
     {offset
       cIzo: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIzp; else goto cIzq;
       cIzp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIzq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCiS_info" {
     sat_sCiS_info:
         const sat_sCiS_entry;
         const 2;
         const 18;
 },
 sat_sCj9_entry() //  [R1]
         { []
         }
     {offset
       cIzs: // global
           _sCj9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cIzt; else goto cIzu;
       cIzu: // global
           Hp = Hp + 472;
           if (Hp > HpLim) (likely: False) goto cIzw; else goto cIzv;
       cIzw: // global
           HpAlloc = 472;
           goto cIzt;
       cIzt: // global
           R1 = _sCj9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIzv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCj9::P64;
           _sCiy::P64 = P64[_sCj9::P64 + 16];
           _sCiz::P64 = P64[_sCj9::P64 + 24];
           _sCiA::P64 = P64[_sCj9::P64 + 32];
           _sCiB::P64 = P64[_sCj9::P64 + 40];
           _sCiC::P64 = P64[_sCj9::P64 + 48];
           _sCiD::P64 = P64[_sCj9::P64 + 56];
           _sCiE::P64 = P64[_sCj9::P64 + 64];
           _sCiF::P64 = P64[_sCj9::P64 + 72];
           _sCiI::P64 = P64[_sCj9::P64 + 80];
           _sCiK::P64 = P64[_sCj9::P64 + 88];
           _sCiL::P64 = P64[_sCj9::P64 + 96];
           _sCiM::P64 = P64[_sCj9::P64 + 104];
           _sCiN::P64 = P64[_sCj9::P64 + 112];
           _sCiO::P64 = P64[_sCj9::P64 + 120];
           _sCiP::P64 = P64[_sCj9::P64 + 128];
           _sCiQ::P64 = P64[_sCj9::P64 + 136];
           _sCiR::P64 = P64[_sCj9::P64 + 144];
           I64[Hp - 464] = :_con_info;
           P64[Hp - 456] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 448] = _sCiI::P64;
           I64[Hp - 440] = sat_sCiZ_info;
           P64[Hp - 424] = _sCiF::P64;
           P64[Hp - 416] = _sCiR::P64;
           I64[Hp - 408] = :_con_info;
           P64[Hp - 400] = Hp - 440;
           P64[Hp - 392] = GHC.Types.[]_closure+1;
           I64[Hp - 384] = sat_sCiY_info;
           P64[Hp - 368] = _sCiE::P64;
           P64[Hp - 360] = _sCiQ::P64;
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = Hp - 384;
           P64[Hp - 336] = Hp - 406;
           I64[Hp - 328] = sat_sCiX_info;
           P64[Hp - 312] = _sCiD::P64;
           P64[Hp - 304] = _sCiP::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = Hp - 350;
           I64[Hp - 272] = sat_sCiW_info;
           P64[Hp - 256] = _sCiC::P64;
           P64[Hp - 248] = _sCiO::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sCiV_info;
           P64[Hp - 200] = _sCiB::P64;
           P64[Hp - 192] = _sCiN::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sCiU_info;
           P64[Hp - 144] = _sCiA::P64;
           P64[Hp - 136] = _sCiM::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sCiT_info;
           P64[Hp - 88] = _sCiz::P64;
           P64[Hp - 80] = _sCiL::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sCiS_info;
           P64[Hp - 32] = _sCiy::P64;
           P64[Hp - 24] = _sCiK::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 462;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,)_go2_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCj9_info" {
     sat_sCj9_info:
         const sat_sCj9_entry;
         const 17;
         const 4294967311;
         const SCNU_srt+392;
 },
 GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cIzx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cIzz; else goto cIzA;
       cIzz: // global
           R1 = GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       cIzA: // global
           I64[Sp - 32] = block_cIyg_info;
           R1 = P64[Sp + 32];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 24] = R3;
           P64[Sp + 32] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uIzE; else goto cIyh;
       uIzE: // global
           call _cIyg(R1) args: 0, res: 0, upd: 0;
       cIyh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 47244640256;
         const SCNU_srt+392;
         const 11;
         const GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_slow;
 },
 _cIyg() //  [R1]
         { []
         }
     {offset
       cIyg: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto cIzD; else goto cIzC;
       cIzD: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cIzC: // global
           _sCiK::P64 = P64[R1 + 7];
           _sCiL::P64 = P64[R1 + 15];
           _sCiM::P64 = P64[R1 + 23];
           _sCiN::P64 = P64[R1 + 31];
           _sCiO::P64 = P64[R1 + 39];
           _sCiP::P64 = P64[R1 + 47];
           _sCiQ::P64 = P64[R1 + 55];
           _sCiR::P64 = P64[R1 + 63];
           I64[Hp - 168] = sat_sCj9_info;
           P64[Hp - 152] = P64[Sp + 64];
           P64[Hp - 144] = P64[Sp + 56];
           P64[Hp - 136] = P64[Sp + 8];
           P64[Hp - 128] = P64[Sp + 16];
           P64[Hp - 120] = P64[Sp + 24];
           P64[Hp - 112] = P64[Sp + 32];
           P64[Hp - 104] = P64[Sp + 40];
           P64[Hp - 96] = P64[Sp + 48];
           P64[Hp - 88] = P64[Sp + 72];
           P64[Hp - 80] = _sCiK::P64;
           P64[Hp - 72] = _sCiL::P64;
           P64[Hp - 64] = _sCiM::P64;
           P64[Hp - 56] = _sCiN::P64;
           P64[Hp - 48] = _sCiO::P64;
           P64[Hp - 40] = _sCiP::P64;
           P64[Hp - 32] = _sCiQ::P64;
           P64[Hp - 24] = _sCiR::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 168;
           R1 = Hp - 14;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cIyg_info" {
     block_cIyg_info:
         const _cIyg;
         const 9;
         const 4294967326;
         const SCNU_srt+392;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.32615628 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cIAZ: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,)_$cshow_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 40, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,,,)_$cshow_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIB3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cIB4; else goto cIB5;
       cIB4: // global
           R1 = GHC.Show.$fShow(,,,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cIB5: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 38654705664;
         const SCNU_srt+400;
         const 9;
         const GHC.Show.$fShow(,,,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.332405846 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cIBi: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,)_$cshowList_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_sCjt_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cIBr: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cIBs; else goto cIBt;
       cIBs: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIBt: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 48] = P64[R1 + 46];
           P64[Sp - 40] = P64[R1 + 54];
           P64[Sp - 32] = P64[R1 + 62];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 48;
           call GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCjt_info" {
     sat_sCjt_info:
         const sat_sCjt_entry;
         const 8;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+400;
 },
 GHC.Show.$fShow(,,,,,,,)_$cshowList_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cIBu: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cIBy; else goto cIBx;
       cIBy: // global
           HpAlloc = 72;
           R1 = GHC.Show.$fShow(,,,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cIBx: // global
           I64[Hp - 64] = sat_sCjt_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = R6;
           P64[Hp - 16] = P64[Sp];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = Hp - 62;
           Sp = Sp + 40;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 42949672960;
         const SCNU_srt+400;
         const 10;
         const GHC.Show.$fShow(,,,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.342808412 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,,,)_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       cIBQ: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,)_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sCjE_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cIBZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIC0; else goto cIC1;
       cIC0: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIC1: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 40] = P64[R1 + 46];
           P64[Sp - 32] = P64[R1 + 54];
           P64[Sp - 24] = P64[R1 + 62];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call GHC.Show.$fShow(,,,,,,,)_$cshowList_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCjE_info" {
     sat_sCjE_info:
         const sat_sCjE_entry;
         const 8;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+416;
 },
 sat_sCjD_entry() //  [R1, R2]
         { []
         }
     {offset
       cIC7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cIC8; else goto cIC9;
       cIC8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cIC9: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 32] = P64[R1 + 47];
           P64[Sp - 24] = P64[R1 + 55];
           P64[Sp - 16] = P64[R1 + 63];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call GHC.Show.$fShow(,,,,,,,)_$cshow_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCjD_info" {
     sat_sCjD_info:
         const sat_sCjD_entry;
         const 8;
         const 4294967304;
         const 4294967301;
         const SCNU_srt+408;
 },
 sat_sCjC_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cICf: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cICg; else goto cICh;
       cICg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cICh: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 48] = P64[R1 + 45];
           P64[Sp - 40] = P64[R1 + 53];
           P64[Sp - 32] = P64[R1 + 61];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 48;
           call GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCjC_info" {
     sat_sCjC_info:
         const sat_sCjC_entry;
         const 8;
         const 4294967304;
         const 12884901911;
         const SCNU_srt+400;
 },
 GHC.Show.$fShow(,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cICj: // global
           Hp = Hp + 248;
           if (Hp > HpLim) (likely: False) goto cICn; else goto cICm;
       cICn: // global
           HpAlloc = 248;
           R1 = GHC.Show.$fShow(,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cICm: // global
           I64[Hp - 240] = sat_sCjE_info;
           P64[Hp - 232] = R2;
           P64[Hp - 224] = R3;
           P64[Hp - 216] = R4;
           P64[Hp - 208] = R5;
           P64[Hp - 200] = R6;
           _sCjz::P64 = P64[Sp];
           P64[Hp - 192] = _sCjz::P64;
           _sCjA::P64 = P64[Sp + 8];
           P64[Hp - 184] = _sCjA::P64;
           _sCjB::P64 = P64[Sp + 16];
           P64[Hp - 176] = _sCjB::P64;
           I64[Hp - 168] = sat_sCjD_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           P64[Hp - 144] = R4;
           P64[Hp - 136] = R5;
           P64[Hp - 128] = R6;
           P64[Hp - 120] = _sCjz::P64;
           P64[Hp - 112] = _sCjA::P64;
           P64[Hp - 104] = _sCjB::P64;
           I64[Hp - 96] = sat_sCjC_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           P64[Hp - 56] = R6;
           P64[Hp - 48] = _sCjz::P64;
           P64[Hp - 40] = _sCjA::P64;
           P64[Hp - 32] = _sCjB::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 93;
           P64[Hp - 8] = Hp - 167;
           P64[Hp] = Hp - 238;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,)_info" {
     GHC.Show.$fShow(,,,,,,,)_info:
         const GHC.Show.$fShow(,,,,,,,)_entry;
         const 0;
         const 64424509454;
         const 34359738368;
         const SCNU_srt+400;
         const 8;
         const GHC.Show.$fShow(,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.356991661 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,,,)_go2_info;
         const 0;
 },
 sat_sCjO_entry() //  [R1]
         { []
         }
     {offset
       cIDd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cIDe; else goto cIDf;
       cIDe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIDf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,)_go2_entry(R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCjO_info" {
     sat_sCjO_info:
         const sat_sCjO_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+432;
 },
 section ""relreadonly" . uIDC_srtd" {
     uIDC_srtd:
         const SCNU_srt+112;
         const 41;
         const 1099511627777;
 },
 GHC.Show.$fShow(,,,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cIDk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cIDl; else goto cIDm;
       cIDl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIDm: // global
           I64[Sp - 16] = block_cICX_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uIDB; else goto cICY;
       uIDB: // global
           call _cICX(R1) args: 0, res: 0, upd: 0;
       cICY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,,,)_go2_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uIDC_srtd;
 },
 section ""relreadonly" . uIDD_srtd" {
     uIDD_srtd:
         const SCNU_srt+112;
         const 41;
         const 1099511627777;
 },
 _cICX() //  [R1]
         { []
         }
     {offset
       cICX: // global
           if (R1 & 7 == 1) goto cIDh; else goto cIDi;
       cIDh: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cIDi: // global
           I64[Sp - 8] = block_cID3_info;
           _sCjJ::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sCjJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uIDA; else goto cID4;
       uIDA: // global
           call _cID3(R1) args: 0, res: 0, upd: 0;
       cID4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cICX_info" {
     block_cICX_info:
         const _cICX;
         const 1;
         const 18446744069414584350;
         const uIDD_srtd;
 },
 _cID3() //  [R1]
         { []
         }
     {offset
       cID3: // global
           _sCjG::P64 = P64[Sp + 16];
           _sCjJ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cIDt; else goto cIDv;
       cIDt: // global
           R2 = _sCjG::P64;
           R1 = _sCjJ::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cIDv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cIDy; else goto cIDx;
       cIDy: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cIDx: // global
           I64[Hp - 48] = sat_sCjO_info;
           P64[Hp - 32] = _sCjG::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sCjJ::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cID3_info" {
     block_cID3_info:
         const _cID3;
         const 2;
         const 4294967326;
         const SCNU_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.373797464 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cIE3: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,)_$cshowsPrec_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_sCke_entry() //  [R1]
         { []
         }
     {offset
       cIEl: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIEm; else goto cIEn;
       cIEm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIEn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCke_info" {
     sat_sCke_info:
         const sat_sCke_entry;
         const 2;
         const 18;
 },
 sat_sCkd_entry() //  [R1]
         { []
         }
     {offset
       cIEt: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIEu; else goto cIEv;
       cIEu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIEv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCkd_info" {
     sat_sCkd_info:
         const sat_sCkd_entry;
         const 2;
         const 18;
 },
 sat_sCkc_entry() //  [R1]
         { []
         }
     {offset
       cIEB: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIEC; else goto cIED;
       cIEC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIED: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCkc_info" {
     sat_sCkc_info:
         const sat_sCkc_entry;
         const 2;
         const 18;
 },
 sat_sCkb_entry() //  [R1]
         { []
         }
     {offset
       cIEJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIEK; else goto cIEL;
       cIEK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIEL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCkb_info" {
     sat_sCkb_info:
         const sat_sCkb_entry;
         const 2;
         const 18;
 },
 sat_sCka_entry() //  [R1]
         { []
         }
     {offset
       cIER: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIES; else goto cIET;
       cIES: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIET: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCka_info" {
     sat_sCka_info:
         const sat_sCka_entry;
         const 2;
         const 18;
 },
 sat_sCk9_entry() //  [R1]
         { []
         }
     {offset
       cIEZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIF0; else goto cIF1;
       cIF0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIF1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCk9_info" {
     sat_sCk9_info:
         const sat_sCk9_entry;
         const 2;
         const 18;
 },
 sat_sCk8_entry() //  [R1]
         { []
         }
     {offset
       cIF7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIF8; else goto cIF9;
       cIF8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIF9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCk8_info" {
     sat_sCk8_info:
         const sat_sCk8_entry;
         const 2;
         const 18;
 },
 sat_sCkn_entry() //  [R1]
         { []
         }
     {offset
       cIFb: // global
           _sCkn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cIFc; else goto cIFd;
       cIFd: // global
           Hp = Hp + 416;
           if (Hp > HpLim) (likely: False) goto cIFf; else goto cIFe;
       cIFf: // global
           HpAlloc = 416;
           goto cIFc;
       cIFc: // global
           R1 = _sCkn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIFe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCkn::P64;
           _sCjQ::P64 = P64[_sCkn::P64 + 16];
           _sCjR::P64 = P64[_sCkn::P64 + 24];
           _sCjS::P64 = P64[_sCkn::P64 + 32];
           _sCjT::P64 = P64[_sCkn::P64 + 40];
           _sCjU::P64 = P64[_sCkn::P64 + 48];
           _sCjV::P64 = P64[_sCkn::P64 + 56];
           _sCjW::P64 = P64[_sCkn::P64 + 64];
           _sCjZ::P64 = P64[_sCkn::P64 + 72];
           _sCk1::P64 = P64[_sCkn::P64 + 80];
           _sCk2::P64 = P64[_sCkn::P64 + 88];
           _sCk3::P64 = P64[_sCkn::P64 + 96];
           _sCk4::P64 = P64[_sCkn::P64 + 104];
           _sCk5::P64 = P64[_sCkn::P64 + 112];
           _sCk6::P64 = P64[_sCkn::P64 + 120];
           _sCk7::P64 = P64[_sCkn::P64 + 128];
           I64[Hp - 408] = :_con_info;
           P64[Hp - 400] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 392] = _sCjZ::P64;
           I64[Hp - 384] = sat_sCke_info;
           P64[Hp - 368] = _sCjW::P64;
           P64[Hp - 360] = _sCk7::P64;
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = Hp - 384;
           P64[Hp - 336] = GHC.Types.[]_closure+1;
           I64[Hp - 328] = sat_sCkd_info;
           P64[Hp - 312] = _sCjV::P64;
           P64[Hp - 304] = _sCk6::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = Hp - 350;
           I64[Hp - 272] = sat_sCkc_info;
           P64[Hp - 256] = _sCjU::P64;
           P64[Hp - 248] = _sCk5::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sCkb_info;
           P64[Hp - 200] = _sCjT::P64;
           P64[Hp - 192] = _sCk4::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sCka_info;
           P64[Hp - 144] = _sCjS::P64;
           P64[Hp - 136] = _sCk3::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sCk9_info;
           P64[Hp - 88] = _sCjR::P64;
           P64[Hp - 80] = _sCk2::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sCk8_info;
           P64[Hp - 32] = _sCjQ::P64;
           P64[Hp - 24] = _sCk1::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 406;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,)_go2_entry(R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCkn_info" {
     sat_sCkn_info:
         const sat_sCkn_entry;
         const 15;
         const 4294967311;
         const SCNU_srt+432;
 },
 GHC.Show.$fShow(,,,,,,)_$cshowsPrec_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cIFg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cIFi; else goto cIFj;
       cIFi: // global
           R1 = GHC.Show.$fShow(,,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cIFj: // global
           I64[Sp - 32] = block_cIE7_info;
           R1 = P64[Sp + 24];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 16] = R3;
           P64[Sp + 24] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uIFn; else goto cIE8;
       uIFn: // global
           call _cIE7(R1) args: 0, res: 0, upd: 0;
       cIE8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 42949672960;
         const SCNU_srt+432;
         const 10;
         const GHC.Show.$fShow(,,,,,,)_$cshowsPrec_slow;
 },
 _cIE7() //  [R1]
         { []
         }
     {offset
       cIE7: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto cIFm; else goto cIFl;
       cIFm: // global
           HpAlloc = 160;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cIFl: // global
           _sCk1::P64 = P64[R1 + 7];
           _sCk2::P64 = P64[R1 + 15];
           _sCk3::P64 = P64[R1 + 23];
           _sCk4::P64 = P64[R1 + 31];
           _sCk5::P64 = P64[R1 + 39];
           _sCk6::P64 = P64[R1 + 47];
           _sCk7::P64 = P64[R1 + 55];
           I64[Hp - 152] = sat_sCkn_info;
           P64[Hp - 136] = P64[Sp + 56];
           P64[Hp - 128] = P64[Sp + 48];
           P64[Hp - 120] = P64[Sp + 8];
           P64[Hp - 112] = P64[Sp + 16];
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 32];
           P64[Hp - 88] = P64[Sp + 40];
           P64[Hp - 80] = P64[Sp + 64];
           P64[Hp - 72] = _sCk1::P64;
           P64[Hp - 64] = _sCk2::P64;
           P64[Hp - 56] = _sCk3::P64;
           P64[Hp - 48] = _sCk4::P64;
           P64[Hp - 40] = _sCk5::P64;
           P64[Hp - 32] = _sCk6::P64;
           P64[Hp - 24] = _sCk7::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 152;
           R1 = Hp - 14;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cIE7_info" {
     block_cIE7_info:
         const _cIE7;
         const 8;
         const 4294967326;
         const SCNU_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.397189744 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cIGA: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,)_$cshow_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 32, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,,)_$cshow_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIGE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cIGF; else goto cIGG;
       cIGF: // global
           R1 = GHC.Show.$fShow(,,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cIGG: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,)_$cshowsPrec_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 34359738368;
         const SCNU_srt+440;
         const 8;
         const GHC.Show.$fShow(,,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.404111929 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cIGS: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,)_$cshowList_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sCkF_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cIH1: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIH2; else goto cIH3;
       cIH2: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIH3: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 40] = P64[R1 + 46];
           P64[Sp - 32] = P64[R1 + 54];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call GHC.Show.$fShow(,,,,,,)_$cshowsPrec_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCkF_info" {
     sat_sCkF_info:
         const sat_sCkF_entry;
         const 7;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+440;
 },
 GHC.Show.$fShow(,,,,,,)_$cshowList_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIH4: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cIH8; else goto cIH7;
       cIH8: // global
           HpAlloc = 64;
           R1 = GHC.Show.$fShow(,,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cIH7: // global
           I64[Hp - 56] = sat_sCkF_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = Hp - 54;
           Sp = Sp + 32;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 38654705664;
         const SCNU_srt+440;
         const 9;
         const GHC.Show.$fShow(,,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.414606894 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,,)_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       cIHo: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,)_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_sCkP_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cIHx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cIHy; else goto cIHz;
       cIHy: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIHz: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 32] = P64[R1 + 46];
           P64[Sp - 24] = P64[R1 + 54];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call GHC.Show.$fShow(,,,,,,)_$cshowList_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCkP_info" {
     sat_sCkP_info:
         const sat_sCkP_entry;
         const 7;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+456;
 },
 sat_sCkO_entry() //  [R1, R2]
         { []
         }
     {offset
       cIHF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cIHG; else goto cIHH;
       cIHG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cIHH: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 47];
           P64[Sp - 16] = P64[R1 + 55];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call GHC.Show.$fShow(,,,,,,)_$cshow_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCkO_info" {
     sat_sCkO_info:
         const sat_sCkO_entry;
         const 7;
         const 4294967304;
         const 4294967301;
         const SCNU_srt+448;
 },
 sat_sCkN_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cIHN: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIHO; else goto cIHP;
       cIHO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cIHP: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 40] = P64[R1 + 45];
           P64[Sp - 32] = P64[R1 + 53];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call GHC.Show.$fShow(,,,,,,)_$cshowsPrec_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCkN_info" {
     sat_sCkN_info:
         const sat_sCkN_entry;
         const 7;
         const 4294967304;
         const 12884901911;
         const SCNU_srt+440;
 },
 GHC.Show.$fShow(,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIHR: // global
           Hp = Hp + 224;
           if (Hp > HpLim) (likely: False) goto cIHV; else goto cIHU;
       cIHV: // global
           HpAlloc = 224;
           R1 = GHC.Show.$fShow(,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cIHU: // global
           I64[Hp - 216] = sat_sCkP_info;
           P64[Hp - 208] = R2;
           P64[Hp - 200] = R3;
           P64[Hp - 192] = R4;
           P64[Hp - 184] = R5;
           P64[Hp - 176] = R6;
           _sCkL::P64 = P64[Sp];
           P64[Hp - 168] = _sCkL::P64;
           _sCkM::P64 = P64[Sp + 8];
           P64[Hp - 160] = _sCkM::P64;
           I64[Hp - 152] = sat_sCkO_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           P64[Hp - 128] = R4;
           P64[Hp - 120] = R5;
           P64[Hp - 112] = R6;
           P64[Hp - 104] = _sCkL::P64;
           P64[Hp - 96] = _sCkM::P64;
           I64[Hp - 88] = sat_sCkN_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           P64[Hp - 48] = R6;
           P64[Hp - 40] = _sCkL::P64;
           P64[Hp - 32] = _sCkM::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 85;
           P64[Hp - 8] = Hp - 151;
           P64[Hp] = Hp - 214;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,)_info" {
     GHC.Show.$fShow(,,,,,,)_info:
         const GHC.Show.$fShow(,,,,,,)_entry;
         const 0;
         const 64424509454;
         const 30064771072;
         const SCNU_srt+440;
         const 7;
         const GHC.Show.$fShow(,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.427562597 UTC

[section ""data" . GHC.Show.$fShow(,,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,,)_go2_info;
         const 0;
 },
 sat_sCkZ_entry() //  [R1]
         { []
         }
     {offset
       cIII: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cIIJ; else goto cIIK;
       cIIJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIIK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,)_go2_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCkZ_info" {
     sat_sCkZ_info:
         const sat_sCkZ_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+472;
 },
 section ""relreadonly" . uIJ7_srtd" {
     uIJ7_srtd:
         const SCNU_srt+112;
         const 46;
         const 35184372088833;
 },
 GHC.Show.$fShow(,,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cIIP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cIIQ; else goto cIIR;
       cIIQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIIR: // global
           I64[Sp - 16] = block_cIIs_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uIJ6; else goto cIIt;
       uIJ6: // global
           call _cIIs(R1) args: 0, res: 0, upd: 0;
       cIIt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,,)_go2_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uIJ7_srtd;
 },
 section ""relreadonly" . uIJ8_srtd" {
     uIJ8_srtd:
         const SCNU_srt+112;
         const 46;
         const 35184372088833;
 },
 _cIIs() //  [R1]
         { []
         }
     {offset
       cIIs: // global
           if (R1 & 7 == 1) goto cIIM; else goto cIIN;
       cIIM: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cIIN: // global
           I64[Sp - 8] = block_cIIy_info;
           _sCkU::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sCkU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uIJ5; else goto cIIz;
       uIJ5: // global
           call _cIIy(R1) args: 0, res: 0, upd: 0;
       cIIz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cIIs_info" {
     block_cIIs_info:
         const _cIIs;
         const 1;
         const 18446744069414584350;
         const uIJ8_srtd;
 },
 _cIIy() //  [R1]
         { []
         }
     {offset
       cIIy: // global
           _sCkR::P64 = P64[Sp + 16];
           _sCkU::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cIIY; else goto cIJ0;
       cIIY: // global
           R2 = _sCkR::P64;
           R1 = _sCkU::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cIJ0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cIJ3; else goto cIJ2;
       cIJ3: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cIJ2: // global
           I64[Hp - 48] = sat_sCkZ_info;
           P64[Hp - 32] = _sCkR::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sCkU::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cIIy_info" {
     block_cIIy_info:
         const _cIIy;
         const 2;
         const 4294967326;
         const SCNU_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.444260574 UTC

[section ""data" . GHC.Show.$fShow(,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cIJy: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,)_$cshowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sClm_entry() //  [R1]
         { []
         }
     {offset
       cIJQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIJR; else goto cIJS;
       cIJR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIJS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sClm_info" {
     sat_sClm_info:
         const sat_sClm_entry;
         const 2;
         const 18;
 },
 sat_sCll_entry() //  [R1]
         { []
         }
     {offset
       cIJY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIJZ; else goto cIK0;
       cIJZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIK0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCll_info" {
     sat_sCll_info:
         const sat_sCll_entry;
         const 2;
         const 18;
 },
 sat_sClk_entry() //  [R1]
         { []
         }
     {offset
       cIK6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIK7; else goto cIK8;
       cIK7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIK8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sClk_info" {
     sat_sClk_info:
         const sat_sClk_entry;
         const 2;
         const 18;
 },
 sat_sClj_entry() //  [R1]
         { []
         }
     {offset
       cIKe: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIKf; else goto cIKg;
       cIKf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIKg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sClj_info" {
     sat_sClj_info:
         const sat_sClj_entry;
         const 2;
         const 18;
 },
 sat_sCli_entry() //  [R1]
         { []
         }
     {offset
       cIKm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIKn; else goto cIKo;
       cIKn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIKo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCli_info" {
     sat_sCli_info:
         const sat_sCli_entry;
         const 2;
         const 18;
 },
 sat_sClh_entry() //  [R1]
         { []
         }
     {offset
       cIKu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIKv; else goto cIKw;
       cIKv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIKw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sClh_info" {
     sat_sClh_info:
         const sat_sClh_entry;
         const 2;
         const 18;
 },
 sat_sClu_entry() //  [R1]
         { []
         }
     {offset
       cIKy: // global
           _sClu::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cIKz; else goto cIKA;
       cIKA: // global
           Hp = Hp + 360;
           if (Hp > HpLim) (likely: False) goto cIKC; else goto cIKB;
       cIKC: // global
           HpAlloc = 360;
           goto cIKz;
       cIKz: // global
           R1 = _sClu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIKB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sClu::P64;
           _sCl1::P64 = P64[_sClu::P64 + 16];
           _sCl2::P64 = P64[_sClu::P64 + 24];
           _sCl3::P64 = P64[_sClu::P64 + 32];
           _sCl4::P64 = P64[_sClu::P64 + 40];
           _sCl5::P64 = P64[_sClu::P64 + 48];
           _sCl6::P64 = P64[_sClu::P64 + 56];
           _sCl9::P64 = P64[_sClu::P64 + 64];
           _sClb::P64 = P64[_sClu::P64 + 72];
           _sClc::P64 = P64[_sClu::P64 + 80];
           _sCld::P64 = P64[_sClu::P64 + 88];
           _sCle::P64 = P64[_sClu::P64 + 96];
           _sClf::P64 = P64[_sClu::P64 + 104];
           _sClg::P64 = P64[_sClu::P64 + 112];
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 336] = _sCl9::P64;
           I64[Hp - 328] = sat_sClm_info;
           P64[Hp - 312] = _sCl6::P64;
           P64[Hp - 304] = _sClg::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = GHC.Types.[]_closure+1;
           I64[Hp - 272] = sat_sCll_info;
           P64[Hp - 256] = _sCl5::P64;
           P64[Hp - 248] = _sClf::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sClk_info;
           P64[Hp - 200] = _sCl4::P64;
           P64[Hp - 192] = _sCle::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sClj_info;
           P64[Hp - 144] = _sCl3::P64;
           P64[Hp - 136] = _sCld::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sCli_info;
           P64[Hp - 88] = _sCl2::P64;
           P64[Hp - 80] = _sClc::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sClh_info;
           P64[Hp - 32] = _sCl1::P64;
           P64[Hp - 24] = _sClb::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 350;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,)_go2_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sClu_info" {
     sat_sClu_info:
         const sat_sClu_entry;
         const 13;
         const 4294967311;
         const SCNU_srt+472;
 },
 GHC.Show.$fShow(,,,,,)_$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIKD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cIKF; else goto cIKG;
       cIKF: // global
           R1 = GHC.Show.$fShow(,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cIKG: // global
           I64[Sp - 32] = block_cIJC_info;
           R1 = P64[Sp + 16];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 8] = R3;
           P64[Sp + 16] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uIKK; else goto cIJD;
       uIKK: // global
           call _cIJC(R1) args: 0, res: 0, upd: 0;
       cIJD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 38654705664;
         const SCNU_srt+472;
         const 9;
         const GHC.Show.$fShow(,,,,,)_$cshowsPrec_slow;
 },
 _cIJC() //  [R1]
         { []
         }
     {offset
       cIJC: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cIKJ; else goto cIKI;
       cIKJ: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cIKI: // global
           _sClb::P64 = P64[R1 + 7];
           _sClc::P64 = P64[R1 + 15];
           _sCld::P64 = P64[R1 + 23];
           _sCle::P64 = P64[R1 + 31];
           _sClf::P64 = P64[R1 + 39];
           _sClg::P64 = P64[R1 + 47];
           I64[Hp - 136] = sat_sClu_info;
           P64[Hp - 120] = P64[Sp + 48];
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = P64[Sp + 8];
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 32];
           P64[Hp - 72] = P64[Sp + 56];
           P64[Hp - 64] = _sClb::P64;
           P64[Hp - 56] = _sClc::P64;
           P64[Hp - 48] = _sCld::P64;
           P64[Hp - 40] = _sCle::P64;
           P64[Hp - 32] = _sClf::P64;
           P64[Hp - 24] = _sClg::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 136;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cIJC_info" {
     block_cIJC_info:
         const _cIJC;
         const 7;
         const 4294967326;
         const SCNU_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.465753975 UTC

[section ""data" . GHC.Show.$fShow(,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cILP: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,)_$cshow_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,)_$cshow_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cILT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cILU; else goto cILV;
       cILU: // global
           R1 = GHC.Show.$fShow(,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cILV: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,)_$cshowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 30064771072;
         const SCNU_srt+480;
         const 7;
         const GHC.Show.$fShow(,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.472182384 UTC

[section ""data" . GHC.Show.$fShow(,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cIM6: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,)_$cshowList_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sClK_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cIMf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cIMg; else goto cIMh;
       cIMg: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIMh: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 32] = P64[R1 + 46];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call GHC.Show.$fShow(,,,,,)_$cshowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sClK_info" {
     sat_sClK_info:
         const sat_sClK_entry;
         const 6;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+480;
 },
 GHC.Show.$fShow(,,,,,)_$cshowList_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIMi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cIMm; else goto cIMl;
       cIMm: // global
           HpAlloc = 56;
           R1 = GHC.Show.$fShow(,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cIMl: // global
           I64[Hp - 48] = sat_sClK_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = P64[Sp];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = Hp - 46;
           Sp = Sp + 24;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 34359738368;
         const SCNU_srt+480;
         const 8;
         const GHC.Show.$fShow(,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.481214675 UTC

[section ""data" . GHC.Show.$fShow(,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,)_info;
         const 0;
 },
 sat_sClT_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cIMI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cIMJ; else goto cIMK;
       cIMJ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIMK: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 46];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call GHC.Show.$fShow(,,,,,)_$cshowList_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sClT_info" {
     sat_sClT_info:
         const sat_sClT_entry;
         const 6;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+496;
 },
 sat_sClS_entry() //  [R1, R2]
         { []
         }
     {offset
       cIMQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cIMR; else goto cIMS;
       cIMR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cIMS: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 16] = P64[R1 + 47];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,)_$cshow_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sClS_info" {
     sat_sClS_info:
         const sat_sClS_entry;
         const 6;
         const 4294967304;
         const 4294967301;
         const SCNU_srt+488;
 },
 sat_sClR_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cIMY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cIMZ; else goto cIN0;
       cIMZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cIN0: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 32] = P64[R1 + 45];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call GHC.Show.$fShow(,,,,,)_$cshowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sClR_info" {
     sat_sClR_info:
         const sat_sClR_entry;
         const 6;
         const 4294967304;
         const 12884901911;
         const SCNU_srt+480;
 },
 GHC.Show.$fShow(,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIN2: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cIN6; else goto cIN5;
       cIN6: // global
           HpAlloc = 200;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,)_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cIN5: // global
           I64[Hp - 192] = sat_sClT_info;
           P64[Hp - 184] = R2;
           P64[Hp - 176] = R3;
           P64[Hp - 168] = R4;
           P64[Hp - 160] = R5;
           P64[Hp - 152] = R6;
           _sClQ::P64 = P64[Sp];
           P64[Hp - 144] = _sClQ::P64;
           I64[Hp - 136] = sat_sClS_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           P64[Hp - 104] = R5;
           P64[Hp - 96] = R6;
           P64[Hp - 88] = _sClQ::P64;
           I64[Hp - 80] = sat_sClR_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = _sClQ::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 77;
           P64[Hp - 8] = Hp - 135;
           P64[Hp] = Hp - 190;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,)_info" {
     GHC.Show.$fShow(,,,,,)_info:
         const GHC.Show.$fShow(,,,,,)_entry;
         const 0;
         const 64424509454;
         const 25769803802;
         const SCNU_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.493608531 UTC

[section ""data" . GHC.Show.$fShow(,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,)_go2_info;
         const 0;
 },
 sat_sCm3_entry() //  [R1]
         { []
         }
     {offset
       cINO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cINP; else goto cINQ;
       cINP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cINQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,)_go2_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCm3_info" {
     sat_sCm3_info:
         const sat_sCm3_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+512;
 },
 section ""relreadonly" . uIOd_srtd" {
     uIOd_srtd:
         const SCNU_srt+112;
         const 51;
         const 1125899906842625;
 },
 GHC.Show.$fShow(,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cINV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cINW; else goto cINX;
       cINW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cINX: // global
           I64[Sp - 16] = block_cINy_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uIOc; else goto cINz;
       uIOc: // global
           call _cINy(R1) args: 0, res: 0, upd: 0;
       cINz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,)_go2_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uIOd_srtd;
 },
 section ""relreadonly" . uIOe_srtd" {
     uIOe_srtd:
         const SCNU_srt+112;
         const 51;
         const 1125899906842625;
 },
 _cINy() //  [R1]
         { []
         }
     {offset
       cINy: // global
           if (R1 & 7 == 1) goto cINS; else goto cINT;
       cINS: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cINT: // global
           I64[Sp - 8] = block_cINE_info;
           _sClY::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sClY::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uIOb; else goto cINF;
       uIOb: // global
           call _cINE(R1) args: 0, res: 0, upd: 0;
       cINF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cINy_info" {
     block_cINy_info:
         const _cINy;
         const 1;
         const 18446744069414584350;
         const uIOe_srtd;
 },
 _cINE() //  [R1]
         { []
         }
     {offset
       cINE: // global
           _sClV::P64 = P64[Sp + 16];
           _sClY::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cIO4; else goto cIO6;
       cIO4: // global
           R2 = _sClV::P64;
           R1 = _sClY::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cIO6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cIO9; else goto cIO8;
       cIO9: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cIO8: // global
           I64[Hp - 48] = sat_sCm3_info;
           P64[Hp - 32] = _sClV::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sClY::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cINE_info" {
     block_cINE_info:
         const _cINE;
         const 2;
         const 4294967326;
         const SCNU_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.508572058 UTC

[section ""data" . GHC.Show.$fShow(,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cIOE: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,)_$cshowsPrec_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sCmn_entry() //  [R1]
         { []
         }
     {offset
       cIOW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIOX; else goto cIOY;
       cIOX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIOY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCmn_info" {
     sat_sCmn_info:
         const sat_sCmn_entry;
         const 2;
         const 18;
 },
 sat_sCmm_entry() //  [R1]
         { []
         }
     {offset
       cIP4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIP5; else goto cIP6;
       cIP5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIP6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCmm_info" {
     sat_sCmm_info:
         const sat_sCmm_entry;
         const 2;
         const 18;
 },
 sat_sCml_entry() //  [R1]
         { []
         }
     {offset
       cIPc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIPd; else goto cIPe;
       cIPd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIPe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCml_info" {
     sat_sCml_info:
         const sat_sCml_entry;
         const 2;
         const 18;
 },
 sat_sCmk_entry() //  [R1]
         { []
         }
     {offset
       cIPk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIPl; else goto cIPm;
       cIPl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIPm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCmk_info" {
     sat_sCmk_info:
         const sat_sCmk_entry;
         const 2;
         const 18;
 },
 sat_sCmj_entry() //  [R1]
         { []
         }
     {offset
       cIPs: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIPt; else goto cIPu;
       cIPt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIPu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCmj_info" {
     sat_sCmj_info:
         const sat_sCmj_entry;
         const 2;
         const 18;
 },
 sat_sCmu_entry() //  [R1]
         { []
         }
     {offset
       cIPw: // global
           _sCmu::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cIPx; else goto cIPy;
       cIPy: // global
           Hp = Hp + 304;
           if (Hp > HpLim) (likely: False) goto cIPA; else goto cIPz;
       cIPA: // global
           HpAlloc = 304;
           goto cIPx;
       cIPx: // global
           R1 = _sCmu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIPz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCmu::P64;
           _sCm5::P64 = P64[_sCmu::P64 + 16];
           _sCm6::P64 = P64[_sCmu::P64 + 24];
           _sCm7::P64 = P64[_sCmu::P64 + 32];
           _sCm8::P64 = P64[_sCmu::P64 + 40];
           _sCm9::P64 = P64[_sCmu::P64 + 48];
           _sCmc::P64 = P64[_sCmu::P64 + 56];
           _sCme::P64 = P64[_sCmu::P64 + 64];
           _sCmf::P64 = P64[_sCmu::P64 + 72];
           _sCmg::P64 = P64[_sCmu::P64 + 80];
           _sCmh::P64 = P64[_sCmu::P64 + 88];
           _sCmi::P64 = P64[_sCmu::P64 + 96];
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 280] = _sCmc::P64;
           I64[Hp - 272] = sat_sCmn_info;
           P64[Hp - 256] = _sCm9::P64;
           P64[Hp - 248] = _sCmi::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = GHC.Types.[]_closure+1;
           I64[Hp - 216] = sat_sCmm_info;
           P64[Hp - 200] = _sCm8::P64;
           P64[Hp - 192] = _sCmh::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sCml_info;
           P64[Hp - 144] = _sCm7::P64;
           P64[Hp - 136] = _sCmg::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sCmk_info;
           P64[Hp - 88] = _sCm6::P64;
           P64[Hp - 80] = _sCmf::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sCmj_info;
           P64[Hp - 32] = _sCm5::P64;
           P64[Hp - 24] = _sCme::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 294;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,)_go2_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCmu_info" {
     sat_sCmu_info:
         const sat_sCmu_entry;
         const 11;
         const 4294967311;
         const SCNU_srt+512;
 },
 GHC.Show.$fShow(,,,,)_$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIPB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cIPD; else goto cIPE;
       cIPD: // global
           R1 = GHC.Show.$fShow(,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cIPE: // global
           I64[Sp - 32] = block_cIOI_info;
           R1 = P64[Sp + 8];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R3;
           P64[Sp + 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uIPI; else goto cIOJ;
       uIPI: // global
           call _cIOI(R1) args: 0, res: 0, upd: 0;
       cIOJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 34359738368;
         const SCNU_srt+512;
         const 8;
         const GHC.Show.$fShow(,,,,)_$cshowsPrec_slow;
 },
 _cIOI() //  [R1]
         { []
         }
     {offset
       cIOI: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cIPH; else goto cIPG;
       cIPH: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cIPG: // global
           _sCme::P64 = P64[R1 + 7];
           _sCmf::P64 = P64[R1 + 15];
           _sCmg::P64 = P64[R1 + 23];
           _sCmh::P64 = P64[R1 + 31];
           _sCmi::P64 = P64[R1 + 39];
           I64[Hp - 120] = sat_sCmu_info;
           P64[Hp - 104] = P64[Sp + 40];
           P64[Hp - 96] = P64[Sp + 32];
           P64[Hp - 88] = P64[Sp + 8];
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 48];
           P64[Hp - 56] = _sCme::P64;
           P64[Hp - 48] = _sCmf::P64;
           P64[Hp - 40] = _sCmg::P64;
           P64[Hp - 32] = _sCmh::P64;
           P64[Hp - 24] = _sCmi::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 120;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cIOI_info" {
     block_cIOI_info:
         const _cIOI;
         const 6;
         const 4294967326;
         const SCNU_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.52899101 UTC

[section ""data" . GHC.Show.$fShow(,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,)_$cshow_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIQI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cIQJ; else goto cIQK;
       cIQJ: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,)_$cshow_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cIQK: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 8] = P64[Sp];
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,)_$cshowsPrec_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const SCNU_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.534991361 UTC

[section ""data" . GHC.Show.$fShow(,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cIQS: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,)_$cshowList_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_sCmI_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cIR1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cIR2; else goto cIR3;
       cIR2: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIR3: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call GHC.Show.$fShow(,,,,)_$cshowsPrec_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCmI_info" {
     sat_sCmI_info:
         const sat_sCmI_entry;
         const 5;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+520;
 },
 GHC.Show.$fShow(,,,,)_$cshowList_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIR4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cIR8; else goto cIR7;
       cIR8: // global
           HpAlloc = 48;
           R1 = GHC.Show.$fShow(,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cIR7: // global
           I64[Hp - 40] = sat_sCmI_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R4 = P64[Sp + 8];
           R3 = P64[Sp];
           R2 = Hp - 38;
           Sp = Sp + 16;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 30064771072;
         const SCNU_srt+520;
         const 7;
         const GHC.Show.$fShow(,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.544428432 UTC

[section ""data" . GHC.Show.$fShow(,,,,)_closure" {
     GHC.Show.$fShow(,,,,)_closure:
         const GHC.Show.$fShow(,,,,)_info;
         const 0;
 },
 sat_sCmQ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cIRs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cIRt; else goto cIRu;
       cIRt: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIRu: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,)_$cshowList_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCmQ_info" {
     sat_sCmQ_info:
         const sat_sCmQ_entry;
         const 5;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+536;
 },
 sat_sCmP_entry() //  [R1, R2]
         { []
         }
     {offset
       cIRA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cIRB; else goto cIRC;
       cIRB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cIRC: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Show.$fShow(,,,,)_$cshow_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCmP_info" {
     sat_sCmP_info:
         const sat_sCmP_entry;
         const 5;
         const 4294967304;
         const 4294967301;
         const SCNU_srt+528;
 },
 sat_sCmO_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cIRI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cIRJ; else goto cIRK;
       cIRJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cIRK: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call GHC.Show.$fShow(,,,,)_$cshowsPrec_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCmO_info" {
     sat_sCmO_info:
         const sat_sCmO_entry;
         const 5;
         const 4294967304;
         const 12884901911;
         const SCNU_srt+520;
 },
 GHC.Show.$fShow(,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIRM: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto cIRQ; else goto cIRP;
       cIRQ: // global
           HpAlloc = 176;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,)_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cIRP: // global
           I64[Hp - 168] = sat_sCmQ_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           P64[Hp - 144] = R4;
           P64[Hp - 136] = R5;
           P64[Hp - 128] = R6;
           I64[Hp - 120] = sat_sCmP_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           I64[Hp - 72] = sat_sCmO_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 69;
           P64[Hp - 8] = Hp - 119;
           P64[Hp] = Hp - 166;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,)_info" {
     GHC.Show.$fShow(,,,,)_info:
         const GHC.Show.$fShow(,,,,)_entry;
         const 0;
         const 64424509454;
         const 21474836505;
         const SCNU_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.556131371 UTC

[section ""data" . GHC.Show.$fShow(,,,)_go2_closure" {
     GHC.Show.$fShow(,,,)_go2_closure:
         const GHC.Show.$fShow(,,,)_go2_info;
         const 0;
 },
 sat_sCn0_entry() //  [R1]
         { []
         }
     {offset
       cISv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cISw; else goto cISx;
       cISw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cISx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,)_go2_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCn0_info" {
     sat_sCn0_info:
         const sat_sCn0_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+552;
 },
 section ""relreadonly" . uISU_srtd" {
     uISU_srtd:
         const SCNU_srt+112;
         const 56;
         const 36028797018963969;
 },
 GHC.Show.$fShow(,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cISC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cISD; else goto cISE;
       cISD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cISE: // global
           I64[Sp - 16] = block_cISf_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uIST; else goto cISg;
       uIST: // global
           call _cISf(R1) args: 0, res: 0, upd: 0;
       cISg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,)_go2_info" {
     GHC.Show.$fShow(,,,)_go2_info:
         const GHC.Show.$fShow(,,,)_go2_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uISU_srtd;
 },
 section ""relreadonly" . uISV_srtd" {
     uISV_srtd:
         const SCNU_srt+112;
         const 56;
         const 36028797018963969;
 },
 _cISf() //  [R1]
         { []
         }
     {offset
       cISf: // global
           if (R1 & 7 == 1) goto cISz; else goto cISA;
       cISz: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cISA: // global
           I64[Sp - 8] = block_cISl_info;
           _sCmV::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sCmV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uISS; else goto cISm;
       uISS: // global
           call _cISl(R1) args: 0, res: 0, upd: 0;
       cISm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cISf_info" {
     block_cISf_info:
         const _cISf;
         const 1;
         const 18446744069414584350;
         const uISV_srtd;
 },
 _cISl() //  [R1]
         { []
         }
     {offset
       cISl: // global
           _sCmS::P64 = P64[Sp + 16];
           _sCmV::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cISL; else goto cISN;
       cISL: // global
           R2 = _sCmS::P64;
           R1 = _sCmV::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cISN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cISQ; else goto cISP;
       cISQ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cISP: // global
           I64[Hp - 48] = sat_sCn0_info;
           P64[Hp - 32] = _sCmS::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sCmV::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cISl_info" {
     block_cISl_info:
         const _cISl;
         const 2;
         const 4294967326;
         const SCNU_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.570365786 UTC

[section ""data" . GHC.Show.$w$cshowsPrec2_closure" {
     GHC.Show.$w$cshowsPrec2_closure:
         const GHC.Show.$w$cshowsPrec2_info;
         const 0;
 },
 GHC.Show.$w$cshowsPrec2_slow() //  [R1]
         { []
         }
     {offset
       cITl: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$w$cshowsPrec2_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sCne_entry() //  [R1]
         { []
         }
     {offset
       cITy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cITz; else goto cITA;
       cITz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cITA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCne_info" {
     sat_sCne_info:
         const sat_sCne_entry;
         const 2;
         const 18;
 },
 sat_sCnd_entry() //  [R1]
         { []
         }
     {offset
       cITG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cITH; else goto cITI;
       cITH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cITI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCnd_info" {
     sat_sCnd_info:
         const sat_sCnd_entry;
         const 2;
         const 18;
 },
 sat_sCnc_entry() //  [R1]
         { []
         }
     {offset
       cITO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cITP; else goto cITQ;
       cITP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cITQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCnc_info" {
     sat_sCnc_info:
         const sat_sCnc_entry;
         const 2;
         const 18;
 },
 sat_sCnb_entry() //  [R1]
         { []
         }
     {offset
       cITW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cITX; else goto cITY;
       cITX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cITY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCnb_info" {
     sat_sCnb_info:
         const sat_sCnb_entry;
         const 2;
         const 18;
 },
 sat_sCnk_entry() //  [R1]
         { []
         }
     {offset
       cIU0: // global
           _sCnk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cIU1; else goto cIU2;
       cIU2: // global
           Hp = Hp + 248;
           if (Hp > HpLim) (likely: False) goto cIU4; else goto cIU3;
       cIU4: // global
           HpAlloc = 248;
           goto cIU1;
       cIU1: // global
           R1 = _sCnk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIU3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCnk::P64;
           _sCn2::P64 = P64[_sCnk::P64 + 16];
           _sCn3::P64 = P64[_sCnk::P64 + 24];
           _sCn4::P64 = P64[_sCnk::P64 + 32];
           _sCn5::P64 = P64[_sCnk::P64 + 40];
           _sCn6::P64 = P64[_sCnk::P64 + 48];
           _sCn7::P64 = P64[_sCnk::P64 + 56];
           _sCn8::P64 = P64[_sCnk::P64 + 64];
           _sCn9::P64 = P64[_sCnk::P64 + 72];
           _sCna::P64 = P64[_sCnk::P64 + 80];
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 224] = _sCna::P64;
           I64[Hp - 216] = sat_sCne_info;
           P64[Hp - 200] = _sCn5::P64;
           P64[Hp - 192] = _sCn9::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = GHC.Types.[]_closure+1;
           I64[Hp - 160] = sat_sCnd_info;
           P64[Hp - 144] = _sCn4::P64;
           P64[Hp - 136] = _sCn8::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sCnc_info;
           P64[Hp - 88] = _sCn3::P64;
           P64[Hp - 80] = _sCn7::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sCnb_info;
           P64[Hp - 32] = _sCn2::P64;
           P64[Hp - 24] = _sCn6::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 238;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,)_go2_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCnk_info" {
     sat_sCnk_info:
         const sat_sCnk_entry;
         const 9;
         const 4294967311;
         const SCNU_srt+552;
 },
 GHC.Show.$w$cshowsPrec2_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIU5: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cIU9; else goto cIU8;
       cIU9: // global
           HpAlloc = 88;
           R1 = GHC.Show.$w$cshowsPrec2_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cIU8: // global
           I64[Hp - 80] = sat_sCnk_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 80;
           R1 = GHC.Show.$fShow(,)4_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec2_info" {
     GHC.Show.$w$cshowsPrec2_info:
         const GHC.Show.$w$cshowsPrec2_entry;
         const 0;
         const 12884901902;
         const 38654705664;
         const SCNU_srt+552;
         const 9;
         const GHC.Show.$w$cshowsPrec2_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.587592519 UTC

[section ""data" . GHC.Show.$fShow(,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cIUR: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,)_$cshowsPrec_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,)_$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIUY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cIV4; else goto cIV5;
       cIV4: // global
           R1 = GHC.Show.$fShow(,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cIV5: // global
           I64[Sp - 32] = block_cIUV_info;
           R1 = P64[Sp];
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           P64[Sp] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uIVa; else goto cIUW;
       uIVa: // global
           call _cIUV(R1) args: 0, res: 0, upd: 0;
       cIUW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 30064771072;
         const SCNU_srt+560;
         const 7;
         const GHC.Show.$fShow(,,,)_$cshowsPrec_slow;
 },
 _cIUV() //  [R1]
         { []
         }
     {offset
       cIUV: // global
           _sCnr::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cIV1_info;
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 32];
           P64[Sp + 8] = P64[R1 + 15];
           P64[Sp + 16] = P64[R1 + 23];
           P64[Sp + 24] = P64[R1 + 31];
           P64[Sp + 32] = _sCnr::P64;
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec2_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cIUV_info" {
     block_cIUV_info:
         const _cIUV;
         const 5;
         const 4294967326;
         const SCNU_srt+560;
 },
 _cIV1() //  [R1, R2]
         { []
         }
     {offset
       cIV1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cIV9; else goto cIV8;
       cIV9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cIV8: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cIV1_info" {
     block_cIV1_info:
         const _cIV1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.597678389 UTC

[section ""data" . GHC.Show.$fShow(,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,)_$cshow_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIVA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIVG; else goto cIVH;
       cIVG: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,)_$cshow_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cIVH: // global
           I64[Sp - 40] = block_cIVx_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uIVM; else goto cIVy;
       uIVM: // global
           call _cIVx(R1) args: 0, res: 0, upd: 0;
       cIVy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,)_$cshow_entry;
         const 0;
         const 21474836494;
         const 21474836505;
         const SCNU_srt+560;
 },
 _cIVx() //  [R1]
         { []
         }
     {offset
       cIVx: // global
           _sCnD::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cIVD_info;
           R6 = P64[R1 + 7];
           R5 = _sCnD::P64;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 23];
           P64[Sp + 16] = P64[R1 + 31];
           P64[Sp + 24] = GHC.Types.[]_closure+1;
           call GHC.Show.$w$cshowsPrec2_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cIVx_info" {
     block_cIVx_info:
         const _cIVx;
         const 4;
         const 4294967326;
         const SCNU_srt+560;
 },
 _cIVD() //  [R1, R2]
         { []
         }
     {offset
       cIVD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cIVL; else goto cIVK;
       cIVL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cIVK: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cIVD_info" {
     block_cIVD_info:
         const _cIVD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.607690582 UTC

[section ""data" . GHC.Show.$fShow(,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,)_$cshowList_info;
         const 0;
 },
 sat_sCo3_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cIWf: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cIWl; else goto cIWm;
       cIWl: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIWm: // global
           I64[Sp - 48] = block_cIWc_info;
           _sCnN::P64 = P64[R1 + 6];
           _sCnO::P64 = P64[R1 + 14];
           _sCnP::P64 = P64[R1 + 22];
           _sCnQ::P64 = P64[R1 + 30];
           R1 = R2;
           P64[Sp - 40] = _sCnN::P64;
           P64[Sp - 32] = _sCnO::P64;
           P64[Sp - 24] = _sCnP::P64;
           P64[Sp - 16] = _sCnQ::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uIWr; else goto cIWd;
       uIWr: // global
           call _cIWc(R1) args: 0, res: 0, upd: 0;
       cIWd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCo3_info" {
     sat_sCo3_info:
         const sat_sCo3_entry;
         const 4;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+560;
 },
 _cIWc() //  [R1]
         { []
         }
     {offset
       cIWc: // global
           _sCnU::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cIWi_info;
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = P64[R1 + 15];
           P64[Sp + 16] = P64[R1 + 23];
           P64[Sp + 24] = P64[R1 + 31];
           P64[Sp + 32] = _sCnU::P64;
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec2_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cIWc_info" {
     block_cIWc_info:
         const _cIWc;
         const 5;
         const 4294967326;
         const SCNU_srt+560;
 },
 _cIWi() //  [R1, R2]
         { []
         }
     {offset
       cIWi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cIWq; else goto cIWp;
       cIWq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cIWp: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cIWi_info" {
     block_cIWi_info:
         const _cIWi;
         const 0;
         const 30;
 },
 GHC.Show.$fShow(,,,)_$cshowList_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIWs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cIWw; else goto cIWv;
       cIWw: // global
           HpAlloc = 40;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,)_$cshowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cIWv: // global
           I64[Hp - 32] = sat_sCo3_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R4 = P64[Sp];
           R3 = R6;
           R2 = Hp - 30;
           Sp = Sp + 8;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,)_$cshowList_entry;
         const 0;
         const 38654705678;
         const 25769803802;
         const SCNU_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.619534383 UTC

[section ""data" . GHC.Show.$fShow(,,,)_closure" {
     GHC.Show.$fShow(,,,)_closure:
         const GHC.Show.$fShow(,,,)_info;
         const 0;
 },
 sat_sCoa_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cIWZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cIX0; else goto cIX1;
       cIX0: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIX1: // global
           R6 = R2;
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Show.$fShow(,,,)_$cshowList_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCoa_info" {
     sat_sCoa_info:
         const sat_sCoa_entry;
         const 4;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+584;
 },
 sat_sCo9_entry() //  [R1, R2]
         { []
         }
     {offset
       cIX7: // global
           R6 = R2;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Show.$fShow(,,,)_$cshow_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCo9_info" {
     sat_sCo9_info:
         const sat_sCo9_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const SCNU_srt+576;
 },
 sat_sCo8_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cIXf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cIXg; else goto cIXh;
       cIXg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cIXh: // global
           R6 = R2;
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,)_$cshowsPrec_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCo8_info" {
     sat_sCo8_info:
         const sat_sCo8_entry;
         const 4;
         const 4294967304;
         const 12884901911;
         const SCNU_srt+568;
 },
 GHC.Show.$fShow(,,,)_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cIXj: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cIXn; else goto cIXm;
       cIXn: // global
           HpAlloc = 152;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,)_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cIXm: // global
           I64[Hp - 144] = sat_sCoa_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           P64[Hp - 112] = R5;
           I64[Hp - 104] = sat_sCo9_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           I64[Hp - 64] = sat_sCo8_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 61;
           P64[Hp - 8] = Hp - 103;
           P64[Hp] = Hp - 142;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,)_info" {
     GHC.Show.$fShow(,,,)_info:
         const GHC.Show.$fShow(,,,)_entry;
         const 0;
         const 64424509454;
         const 17179869208;
         const SCNU_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.631017559 UTC

[section ""data" . GHC.Show.$fShow(,,)_go2_closure" {
     GHC.Show.$fShow(,,)_go2_closure:
         const GHC.Show.$fShow(,,)_go2_info;
         const 0;
 },
 sat_sCok_entry() //  [R1]
         { []
         }
     {offset
       cIY1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cIY2; else goto cIY3;
       cIY2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIY3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,)_go2_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCok_info" {
     sat_sCok_info:
         const sat_sCok_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+600;
 },
 section ""relreadonly" . uIYq_srtd" {
     uIYq_srtd:
         const SCNU_srt+112;
         const 62;
         const 2305843009213693953;
 },
 GHC.Show.$fShow(,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cIY8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cIY9; else goto cIYa;
       cIY9: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cIYa: // global
           I64[Sp - 16] = block_cIXL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uIYp; else goto cIXM;
       uIYp: // global
           call _cIXL(R1) args: 0, res: 0, upd: 0;
       cIXM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,)_go2_info" {
     GHC.Show.$fShow(,,)_go2_info:
         const GHC.Show.$fShow(,,)_go2_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uIYq_srtd;
 },
 section ""relreadonly" . uIYr_srtd" {
     uIYr_srtd:
         const SCNU_srt+112;
         const 62;
         const 2305843009213693953;
 },
 _cIXL() //  [R1]
         { []
         }
     {offset
       cIXL: // global
           if (R1 & 7 == 1) goto cIY5; else goto cIY6;
       cIY5: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cIY6: // global
           I64[Sp - 8] = block_cIXR_info;
           _sCof::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sCof::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uIYo; else goto cIXS;
       uIYo: // global
           call _cIXR(R1) args: 0, res: 0, upd: 0;
       cIXS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cIXL_info" {
     block_cIXL_info:
         const _cIXL;
         const 1;
         const 18446744069414584350;
         const uIYr_srtd;
 },
 _cIXR() //  [R1]
         { []
         }
     {offset
       cIXR: // global
           _sCoc::P64 = P64[Sp + 16];
           _sCof::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cIYh; else goto cIYj;
       cIYh: // global
           R2 = _sCoc::P64;
           R1 = _sCof::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cIYj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cIYm; else goto cIYl;
       cIYm: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cIYl: // global
           I64[Hp - 48] = sat_sCok_info;
           P64[Hp - 32] = _sCoc::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sCof::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cIXR_info" {
     block_cIXR_info:
         const _cIXR;
         const 2;
         const 4294967326;
         const SCNU_srt+600;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.645864644 UTC

[section ""data" . GHC.Show.$w$cshowsPrec1_closure" {
     GHC.Show.$w$cshowsPrec1_closure:
         const GHC.Show.$w$cshowsPrec1_info;
         const 0;
 },
 GHC.Show.$w$cshowsPrec1_slow() //  [R1]
         { []
         }
     {offset
       cIYR: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$w$cshowsPrec1_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_sCov_entry() //  [R1]
         { []
         }
     {offset
       cIZ4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIZ5; else goto cIZ6;
       cIZ5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIZ6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCov_info" {
     sat_sCov_info:
         const sat_sCov_entry;
         const 2;
         const 18;
 },
 sat_sCou_entry() //  [R1]
         { []
         }
     {offset
       cIZc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIZd; else goto cIZe;
       cIZd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIZe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCou_info" {
     sat_sCou_info:
         const sat_sCou_entry;
         const 2;
         const 18;
 },
 sat_sCot_entry() //  [R1]
         { []
         }
     {offset
       cIZk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cIZl; else goto cIZm;
       cIZl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIZm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCot_info" {
     sat_sCot_info:
         const sat_sCot_entry;
         const 2;
         const 18;
 },
 sat_sCoA_entry() //  [R1]
         { []
         }
     {offset
       cIZo: // global
           _sCoA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cIZp; else goto cIZq;
       cIZq: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cIZs; else goto cIZr;
       cIZs: // global
           HpAlloc = 192;
           goto cIZp;
       cIZp: // global
           R1 = _sCoA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cIZr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCoA::P64;
           _sCom::P64 = P64[_sCoA::P64 + 16];
           _sCon::P64 = P64[_sCoA::P64 + 24];
           _sCoo::P64 = P64[_sCoA::P64 + 32];
           _sCop::P64 = P64[_sCoA::P64 + 40];
           _sCoq::P64 = P64[_sCoA::P64 + 48];
           _sCor::P64 = P64[_sCoA::P64 + 56];
           _sCos::P64 = P64[_sCoA::P64 + 64];
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 168] = _sCos::P64;
           I64[Hp - 160] = sat_sCov_info;
           P64[Hp - 144] = _sCoo::P64;
           P64[Hp - 136] = _sCor::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = GHC.Types.[]_closure+1;
           I64[Hp - 104] = sat_sCou_info;
           P64[Hp - 88] = _sCon::P64;
           P64[Hp - 80] = _sCoq::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sCot_info;
           P64[Hp - 32] = _sCom::P64;
           P64[Hp - 24] = _sCop::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 182;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,)_go2_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCoA_info" {
     sat_sCoA_info:
         const sat_sCoA_entry;
         const 7;
         const 4294967311;
         const SCNU_srt+600;
 },
 GHC.Show.$w$cshowsPrec1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cIZt: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cIZx; else goto cIZw;
       cIZx: // global
           HpAlloc = 72;
           R1 = GHC.Show.$w$cshowsPrec1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cIZw: // global
           I64[Hp - 64] = sat_sCoA_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 64;
           R1 = GHC.Show.$fShow(,)4_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec1_info" {
     GHC.Show.$w$cshowsPrec1_info:
         const GHC.Show.$w$cshowsPrec1_entry;
         const 0;
         const 12884901902;
         const 30064771072;
         const SCNU_srt+600;
         const 7;
         const GHC.Show.$w$cshowsPrec1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.659667243 UTC

[section ""data" . GHC.Show.$fShow(,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,)_$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cJ0c: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cJ0i; else goto cJ0j;
       cJ0i: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,)_$cshowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cJ0j: // global
           I64[Sp - 32] = block_cJ09_info;
           R1 = R6;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uJ0o; else goto cJ0a;
       uJ0o: // global
           call _cJ09(R1) args: 0, res: 0, upd: 0;
       cJ0a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const SCNU_srt+608;
 },
 _cJ09() //  [R1]
         { []
         }
     {offset
       cJ09: // global
           _sCoG::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cJ0f_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 16] = P64[R1 + 23];
           P64[Sp + 24] = _sCoG::P64;
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec1_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cJ09_info" {
     block_cJ09_info:
         const _cJ09;
         const 4;
         const 4294967326;
         const SCNU_srt+608;
 },
 _cJ0f() //  [R1, R2]
         { []
         }
     {offset
       cJ0f: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJ0n; else goto cJ0m;
       cJ0n: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cJ0m: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJ0f_info" {
     block_cJ0f_info:
         const _cJ0f;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.668456024 UTC

[section ""data" . GHC.Show.$fShow(,,)_$cshow_closure" {
     GHC.Show.$fShow(,,)_$cshow_closure:
         const GHC.Show.$fShow(,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,)_$cshow_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cJ0K: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cJ0Q; else goto cJ0R;
       cJ0Q: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,)_$cshow_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cJ0R: // global
           I64[Sp - 32] = block_cJ0H_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uJ0W; else goto cJ0I;
       uJ0W: // global
           call _cJ0H(R1) args: 0, res: 0, upd: 0;
       cJ0I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,)_$cshow_info" {
     GHC.Show.$fShow(,,)_$cshow_info:
         const GHC.Show.$fShow(,,)_$cshow_entry;
         const 0;
         const 21474836494;
         const 17179869208;
         const SCNU_srt+608;
 },
 _cJ0H() //  [R1]
         { []
         }
     {offset
       cJ0H: // global
           _sCoQ::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cJ0N_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = _sCoQ::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = P64[R1 + 23];
           P64[Sp + 16] = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec1_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cJ0H_info" {
     block_cJ0H_info:
         const _cJ0H;
         const 3;
         const 4294967326;
         const SCNU_srt+608;
 },
 _cJ0N() //  [R1, R2]
         { []
         }
     {offset
       cJ0N: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJ0V; else goto cJ0U;
       cJ0V: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cJ0U: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJ0N_info" {
     block_cJ0N_info:
         const _cJ0N;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.677844211 UTC

[section ""data" . GHC.Show.$fShow(,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,)_$cshowList_info;
         const 0;
 },
 sat_sCpd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cJ1n: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cJ1t; else goto cJ1u;
       cJ1t: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJ1u: // global
           I64[Sp - 40] = block_cJ1k_info;
           _sCoZ::P64 = P64[R1 + 6];
           _sCp0::P64 = P64[R1 + 14];
           _sCp1::P64 = P64[R1 + 22];
           R1 = R2;
           P64[Sp - 32] = _sCoZ::P64;
           P64[Sp - 24] = _sCp0::P64;
           P64[Sp - 16] = _sCp1::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uJ1z; else goto cJ1l;
       uJ1z: // global
           call _cJ1k(R1) args: 0, res: 0, upd: 0;
       cJ1l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCpd_info" {
     sat_sCpd_info:
         const sat_sCpd_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+608;
 },
 _cJ1k() //  [R1]
         { []
         }
     {offset
       cJ1k: // global
           _sCp5::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cJ1q_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 16] = P64[R1 + 23];
           P64[Sp + 24] = _sCp5::P64;
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec1_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cJ1k_info" {
     block_cJ1k_info:
         const _cJ1k;
         const 4;
         const 4294967326;
         const SCNU_srt+608;
 },
 _cJ1q() //  [R1, R2]
         { []
         }
     {offset
       cJ1q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJ1y; else goto cJ1x;
       cJ1y: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cJ1x: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJ1q_info" {
     block_cJ1q_info:
         const _cJ1q;
         const 0;
         const 30;
 },
 GHC.Show.$fShow(,,)_$cshowList_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cJ1A: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cJ1E; else goto cJ1D;
       cJ1E: // global
           HpAlloc = 32;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,)_$cshowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cJ1D: // global
           I64[Hp - 24] = sat_sCpd_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R4 = R6;
           R3 = R5;
           R2 = Hp - 22;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,)_$cshowList_info" {
     GHC.Show.$fShow(,,)_$cshowList_info:
         const GHC.Show.$fShow(,,)_$cshowList_entry;
         const 0;
         const 38654705678;
         const 21474836505;
         const SCNU_srt+608;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.689608162 UTC

[section ""data" . GHC.Show.$fShow(,,)_closure" {
     GHC.Show.$fShow(,,)_closure:
         const GHC.Show.$fShow(,,)_info;
         const 0;
 },
 sat_sCpj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cJ25: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Show.$fShow(,,)_$cshowList_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCpj_info" {
     sat_sCpj_info:
         const sat_sCpj_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const SCNU_srt+632;
 },
 sat_sCpi_entry() //  [R1, R2]
         { []
         }
     {offset
       cJ2d: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Show.$fShow(,,)_$cshow_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCpi_info" {
     sat_sCpi_info:
         const sat_sCpi_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const SCNU_srt+624;
 },
 sat_sCph_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cJ2l: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJ2m; else goto cJ2n;
       cJ2m: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cJ2n: // global
           R6 = R3;
           R5 = R2;
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Show.$fShow(,,)_$cshowsPrec_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCph_info" {
     sat_sCph_info:
         const sat_sCph_entry;
         const 3;
         const 4294967304;
         const 12884901911;
         const SCNU_srt+616;
 },
 GHC.Show.$fShow(,,)_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cJ2p: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cJ2t; else goto cJ2s;
       cJ2t: // global
           HpAlloc = 128;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,)_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cJ2s: // global
           I64[Hp - 120] = sat_sCpj_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           I64[Hp - 88] = sat_sCpi_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = sat_sCph_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 53;
           P64[Hp - 8] = Hp - 87;
           P64[Hp] = Hp - 118;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,)_info" {
     GHC.Show.$fShow(,,)_info:
         const GHC.Show.$fShow(,,)_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const SCNU_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.701619542 UTC

[section ""data" . GHC.Show.$fShow(,)_go2_closure" {
     GHC.Show.$fShow(,)_go2_closure:
         const GHC.Show.$fShow(,)_go2_info;
         const 0;
 },
 sat_sCpt_entry() //  [R1]
         { []
         }
     {offset
       cJ36: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJ37; else goto cJ38;
       cJ37: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJ38: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go2_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCpt_info" {
     sat_sCpt_info:
         const sat_sCpt_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+648;
 },
 section ""relreadonly" . uJ3v_srtd" {
     uJ3v_srtd:
         const SCNU_srt+112;
         const 68;
         const 1;
         const 8;
 },
 GHC.Show.$fShow(,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cJ3d: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cJ3e; else goto cJ3f;
       cJ3e: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJ3f: // global
           I64[Sp - 16] = block_cJ2Q_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uJ3u; else goto cJ2R;
       uJ3u: // global
           call _cJ2Q(R1) args: 0, res: 0, upd: 0;
       cJ2R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,)_go2_info" {
     GHC.Show.$fShow(,)_go2_info:
         const GHC.Show.$fShow(,)_go2_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uJ3v_srtd;
 },
 section ""relreadonly" . uJ3w_srtd" {
     uJ3w_srtd:
         const SCNU_srt+112;
         const 68;
         const 1;
         const 8;
 },
 _cJ2Q() //  [R1]
         { []
         }
     {offset
       cJ2Q: // global
           if (R1 & 7 == 1) goto cJ3a; else goto cJ3b;
       cJ3a: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cJ3b: // global
           I64[Sp - 8] = block_cJ2W_info;
           _sCpo::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sCpo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJ3t; else goto cJ2X;
       uJ3t: // global
           call _cJ2W(R1) args: 0, res: 0, upd: 0;
       cJ2X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cJ2Q_info" {
     block_cJ2Q_info:
         const _cJ2Q;
         const 1;
         const 18446744069414584350;
         const uJ3w_srtd;
 },
 _cJ2W() //  [R1]
         { []
         }
     {offset
       cJ2W: // global
           _sCpl::P64 = P64[Sp + 16];
           _sCpo::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cJ3m; else goto cJ3o;
       cJ3m: // global
           R2 = _sCpl::P64;
           R1 = _sCpo::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cJ3o: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cJ3r; else goto cJ3q;
       cJ3r: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cJ3q: // global
           I64[Hp - 48] = sat_sCpt_info;
           P64[Hp - 32] = _sCpl::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sCpo::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJ2W_info" {
     block_cJ2W_info:
         const _cJ2W;
         const 2;
         const 4294967326;
         const SCNU_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.71563575 UTC

[section ""data" . GHC.Show.$w$s$cshowsPrec_closure" {
     GHC.Show.$w$s$cshowsPrec_closure:
         const GHC.Show.$w$s$cshowsPrec_info;
         const 0;
 },
 sat_sCpI_entry() //  [R1, R2]
         { []
         }
     {offset
       cJ4c: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cJ4d; else goto cJ4e;
       cJ4d: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJ4e: // global
           I64[Sp - 16] = block_cJ49_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uJ4i; else goto cJ4a;
       uJ4i: // global
           call _cJ49(R1) args: 0, res: 0, upd: 0;
       cJ4a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCpI_info" {
     sat_sCpI_info:
         const sat_sCpI_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SCNU_srt+656;
 },
 _cJ49() //  [R1]
         { []
         }
     {offset
       cJ49: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 16] = P64[R1 + 39];
           P64[Sp - 8] = P64[R1 + 47];
           P64[Sp] = P64[R1 + 55];
           Sp = Sp - 16;
           call GHC.Show.$w$cshowsPrec_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJ49_info" {
     block_cJ49_info:
         const _cJ49;
         const 1;
         const 4294967326;
         const SCNU_srt+656;
 },
 sat_sCpy_entry() //  [R1, R2]
         { []
         }
     {offset
       cJ4p: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Show.$fShow(,)_$cshowList1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCpy_info" {
     sat_sCpy_info:
         const sat_sCpy_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SCNU_srt+664;
 },
 sat_sCpM_entry() //  [R1]
         { []
         }
     {offset
       cJ4t: // global
           _sCpM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cJ4u; else goto cJ4v;
       cJ4v: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cJ4x; else goto cJ4w;
       cJ4x: // global
           HpAlloc = 104;
           goto cJ4u;
       cJ4u: // global
           R1 = _sCpM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJ4w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCpM::P64;
           _sCpv::P64 = P64[_sCpM::P64 + 16];
           _sCpw::P64 = P64[_sCpM::P64 + 24];
           _sCpx::P64 = P64[_sCpM::P64 + 32];
           I64[Hp - 96] = :_con_info;
           P64[Hp - 88] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 80] = _sCpx::P64;
           I64[Hp - 72] = sat_sCpI_info;
           P64[Hp - 64] = _sCpw::P64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           I64[Hp - 32] = sat_sCpy_info;
           P64[Hp - 24] = _sCpv::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 54;
           R3 = Hp - 94;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go2_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCpM_info" {
     sat_sCpM_info:
         const sat_sCpM_entry;
         const 3;
         const 30064771087;
         const SCNU_srt+648;
 },
 GHC.Show.$w$s$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cJ4y: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cJ4C; else goto cJ4B;
       cJ4C: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$w$s$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cJ4B: // global
           I64[Hp - 32] = sat_sCpM_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = GHC.Show.$fShow(,)4_closure+1;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$s$cshowsPrec_info" {
     GHC.Show.$w$s$cshowsPrec_info:
         const GHC.Show.$w$s$cshowsPrec_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const SCNU_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.729009969 UTC

[section ""data" . GHC.Show.$fShow(,)_go1_closure" {
     GHC.Show.$fShow(,)_go1_closure:
         const GHC.Show.$fShow(,)_go1_info;
         const 0;
 },
 sat_sCpW_entry() //  [R1]
         { []
         }
     {offset
       cJ5n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJ5o; else goto cJ5p;
       cJ5o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJ5p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCpW_info" {
     sat_sCpW_info:
         const sat_sCpW_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+680;
 },
 section ""relreadonly" . uJ5M_srtd" {
     uJ5M_srtd:
         const SCNU_srt+112;
         const 72;
         const 1;
         const 128;
 },
 GHC.Show.$fShow(,)_go1_entry() //  [R2, R3]
         { []
         }
     {offset
       cJ5u: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cJ5v; else goto cJ5w;
       cJ5v: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,)_go1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJ5w: // global
           I64[Sp - 16] = block_cJ57_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uJ5L; else goto cJ58;
       uJ5L: // global
           call _cJ57(R1) args: 0, res: 0, upd: 0;
       cJ58: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,)_go1_info" {
     GHC.Show.$fShow(,)_go1_info:
         const GHC.Show.$fShow(,)_go1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uJ5M_srtd;
 },
 section ""relreadonly" . uJ5N_srtd" {
     uJ5N_srtd:
         const SCNU_srt+112;
         const 72;
         const 1;
         const 128;
 },
 _cJ57() //  [R1]
         { []
         }
     {offset
       cJ57: // global
           if (R1 & 7 == 1) goto cJ5r; else goto cJ5s;
       cJ5r: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cJ5s: // global
           I64[Sp - 8] = block_cJ5d_info;
           _sCpR::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sCpR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJ5K; else goto cJ5e;
       uJ5K: // global
           call _cJ5d(R1) args: 0, res: 0, upd: 0;
       cJ5e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cJ57_info" {
     block_cJ57_info:
         const _cJ57;
         const 1;
         const 18446744069414584350;
         const uJ5N_srtd;
 },
 _cJ5d() //  [R1]
         { []
         }
     {offset
       cJ5d: // global
           _sCpO::P64 = P64[Sp + 16];
           _sCpR::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cJ5D; else goto cJ5F;
       cJ5D: // global
           R2 = _sCpO::P64;
           R1 = _sCpR::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cJ5F: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cJ5I; else goto cJ5H;
       cJ5I: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cJ5H: // global
           I64[Hp - 48] = sat_sCpW_info;
           P64[Hp - 32] = _sCpO::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sCpR::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJ5d_info" {
     block_cJ5d_info:
         const _cJ5d;
         const 2;
         const 4294967326;
         const SCNU_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.743455308 UTC

[section ""data" . GHC.Show.$fShow(,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,)_$cshowsPrec_info;
         const 0;
 },
 sat_sCq7_entry() //  [R1]
         { []
         }
     {offset
       cJ6u: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cJ6v; else goto cJ6w;
       cJ6v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJ6w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCq7_info" {
     sat_sCq7_info:
         const sat_sCq7_entry;
         const 2;
         const 18;
 },
 sat_sCq6_entry() //  [R1]
         { []
         }
     {offset
       cJ6C: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cJ6D; else goto cJ6E;
       cJ6D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJ6E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCq6_info" {
     sat_sCq6_info:
         const sat_sCq6_entry;
         const 2;
         const 18;
 },
 sat_sCqb_entry() //  [R1]
         { []
         }
     {offset
       cJ6G: // global
           _sCqb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cJ6H; else goto cJ6I;
       cJ6I: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cJ6K; else goto cJ6J;
       cJ6K: // global
           HpAlloc = 136;
           goto cJ6H;
       cJ6H: // global
           R1 = _sCqb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJ6J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCqb::P64;
           _sCpY::P64 = P64[_sCqb::P64 + 16];
           _sCpZ::P64 = P64[_sCqb::P64 + 24];
           _sCq2::P64 = P64[_sCqb::P64 + 32];
           _sCq4::P64 = P64[_sCqb::P64 + 40];
           _sCq5::P64 = P64[_sCqb::P64 + 48];
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 112] = _sCq2::P64;
           I64[Hp - 104] = sat_sCq7_info;
           P64[Hp - 88] = _sCpZ::P64;
           P64[Hp - 80] = _sCq5::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = GHC.Types.[]_closure+1;
           I64[Hp - 48] = sat_sCq6_info;
           P64[Hp - 32] = _sCpY::P64;
           P64[Hp - 24] = _sCq4::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 126;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCqb_info" {
     sat_sCqb_info:
         const sat_sCqb_entry;
         const 5;
         const 4294967311;
         const SCNU_srt+680;
 },
 GHC.Show.$fShow(,)_$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cJ6L: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cJ6N; else goto cJ6O;
       cJ6N: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,)_$cshowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cJ6O: // global
           I64[Sp - 32] = block_cJ6g_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R6;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uJ6S; else goto cJ6h;
       uJ6S: // global
           call _cJ6g(R1) args: 0, res: 0, upd: 0;
       cJ6h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SCNU_srt+680;
 },
 _cJ6g() //  [R1]
         { []
         }
     {offset
       cJ6g: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cJ6R; else goto cJ6Q;
       cJ6R: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cJ6Q: // global
           _sCq4::P64 = P64[R1 + 7];
           _sCq5::P64 = P64[R1 + 15];
           I64[Hp - 72] = sat_sCqb_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = _sCq4::P64;
           P64[Hp - 24] = _sCq5::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJ6g_info" {
     block_cJ6g_info:
         const _cJ6g;
         const 3;
         const 4294967326;
         const SCNU_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.757989688 UTC

[section ""data" . GHC.Show.$fShow(,)_$cshow_closure" {
     GHC.Show.$fShow(,)_$cshow_closure:
         const GHC.Show.$fShow(,)_$cshow_info;
         const 0;
 },
 sat_sCqj_entry() //  [R1]
         { []
         }
     {offset
       cJ7G: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cJ7H; else goto cJ7I;
       cJ7H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJ7I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCqj_info" {
     sat_sCqj_info:
         const sat_sCqj_entry;
         const 2;
         const 18;
 },
 sat_sCqi_entry() //  [R1]
         { []
         }
     {offset
       cJ7O: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cJ7P; else goto cJ7Q;
       cJ7P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJ7Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCqi_info" {
     sat_sCqi_info:
         const sat_sCqi_entry;
         const 2;
         const 18;
 },
 sat_sCqn_entry() //  [R1]
         { []
         }
     {offset
       cJ7S: // global
           _sCqn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cJ7T; else goto cJ7U;
       cJ7U: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cJ7W; else goto cJ7V;
       cJ7W: // global
           HpAlloc = 136;
           goto cJ7T;
       cJ7T: // global
           R1 = _sCqn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJ7V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCqn::P64;
           _sCqc::P64 = P64[_sCqn::P64 + 16];
           _sCqd::P64 = P64[_sCqn::P64 + 24];
           _sCqg::P64 = P64[_sCqn::P64 + 32];
           _sCqh::P64 = P64[_sCqn::P64 + 40];
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 112] = GHC.Types.[]_closure+1;
           I64[Hp - 104] = sat_sCqj_info;
           P64[Hp - 88] = _sCqd::P64;
           P64[Hp - 80] = _sCqh::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = GHC.Types.[]_closure+1;
           I64[Hp - 48] = sat_sCqi_info;
           P64[Hp - 32] = _sCqc::P64;
           P64[Hp - 24] = _sCqg::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 126;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCqn_info" {
     sat_sCqn_info:
         const sat_sCqn_entry;
         const 4;
         const 4294967311;
         const SCNU_srt+680;
 },
 GHC.Show.$fShow(,)_$cshow_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cJ7X: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cJ7Z; else goto cJ80;
       cJ7Z: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,)_$cshow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cJ80: // global
           I64[Sp - 24] = block_cJ7s_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uJ84; else goto cJ7t;
       uJ84: // global
           call _cJ7s(R1) args: 0, res: 0, upd: 0;
       cJ7t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,)_$cshow_info" {
     GHC.Show.$fShow(,)_$cshow_info:
         const GHC.Show.$fShow(,)_$cshow_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const SCNU_srt+680;
 },
 _cJ7s() //  [R1]
         { []
         }
     {offset
       cJ7s: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cJ83; else goto cJ82;
       cJ83: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cJ82: // global
           _sCqg::P64 = P64[R1 + 7];
           _sCqh::P64 = P64[R1 + 15];
           I64[Hp - 64] = sat_sCqn_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _sCqg::P64;
           P64[Hp - 24] = _sCqh::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJ7s_info" {
     block_cJ7s_info:
         const _cJ7s;
         const 2;
         const 4294967326;
         const SCNU_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.772879062 UTC

[section ""data" . GHC.Show.$fShow(,)_$cshowList_closure" {
     GHC.Show.$fShow(,)_$cshowList_closure:
         const GHC.Show.$fShow(,)_$cshowList_info;
         const 0;
 },
 sat_sCqy_entry() //  [R1]
         { []
         }
     {offset
       cJ8W: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cJ8X; else goto cJ8Y;
       cJ8X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJ8Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCqy_info" {
     sat_sCqy_info:
         const sat_sCqy_entry;
         const 2;
         const 18;
 },
 sat_sCqx_entry() //  [R1]
         { []
         }
     {offset
       cJ94: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cJ95; else goto cJ96;
       cJ95: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJ96: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCqx_info" {
     sat_sCqx_info:
         const sat_sCqx_entry;
         const 2;
         const 18;
 },
 sat_sCqC_entry() //  [R1]
         { []
         }
     {offset
       cJ98: // global
           _sCqC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cJ99; else goto cJ9a;
       cJ9a: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cJ9c; else goto cJ9b;
       cJ9c: // global
           HpAlloc = 136;
           goto cJ99;
       cJ99: // global
           R1 = _sCqC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJ9b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCqC::P64;
           _sCqo::P64 = P64[_sCqC::P64 + 16];
           _sCqp::P64 = P64[_sCqC::P64 + 24];
           _sCqt::P64 = P64[_sCqC::P64 + 32];
           _sCqv::P64 = P64[_sCqC::P64 + 40];
           _sCqw::P64 = P64[_sCqC::P64 + 48];
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 112] = _sCqt::P64;
           I64[Hp - 104] = sat_sCqy_info;
           P64[Hp - 88] = _sCqp::P64;
           P64[Hp - 80] = _sCqw::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = GHC.Types.[]_closure+1;
           I64[Hp - 48] = sat_sCqx_info;
           P64[Hp - 32] = _sCqo::P64;
           P64[Hp - 24] = _sCqv::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 126;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCqC_info" {
     sat_sCqC_info:
         const sat_sCqC_entry;
         const 5;
         const 4294967311;
         const SCNU_srt+680;
 },
 sat_sCqD_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cJ9d: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cJ9f; else goto cJ9g;
       cJ9f: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJ9g: // global
           I64[Sp - 32] = block_cJ8I_info;
           _sCqo::P64 = P64[R1 + 6];
           _sCqp::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _sCqo::P64;
           P64[Sp - 16] = _sCqp::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uJ9k; else goto cJ8J;
       uJ9k: // global
           call _cJ8I(R1) args: 0, res: 0, upd: 0;
       cJ8J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCqD_info" {
     sat_sCqD_info:
         const sat_sCqD_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SCNU_srt+680;
 },
 _cJ8I() //  [R1]
         { []
         }
     {offset
       cJ8I: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cJ9j; else goto cJ9i;
       cJ9j: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cJ9i: // global
           _sCqv::P64 = P64[R1 + 7];
           _sCqw::P64 = P64[R1 + 15];
           I64[Hp - 72] = sat_sCqC_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = _sCqv::P64;
           P64[Hp - 24] = _sCqw::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJ8I_info" {
     block_cJ8I_info:
         const _cJ8I;
         const 3;
         const 4294967326;
         const SCNU_srt+680;
 },
 GHC.Show.$fShow(,)_$cshowList_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cJ9l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJ9p; else goto cJ9o;
       cJ9p: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,)_$cshowList_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cJ9o: // global
           I64[Hp - 16] = sat_sCqD_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _sCqq::P64 = R4;
           R4 = R5;
           R3 = _sCqq::P64;
           R2 = Hp - 14;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,)_$cshowList_info" {
     GHC.Show.$fShow(,)_$cshowList_info:
         const GHC.Show.$fShow(,)_$cshowList_entry;
         const 0;
         const 38654705678;
         const 17179869208;
         const SCNU_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.788447846 UTC

[section ""data" . GHC.Show.$fShow(,)_closure" {
     GHC.Show.$fShow(,)_closure:
         const GHC.Show.$fShow(,)_info;
         const 0;
 },
 sat_sCqI_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cJa7: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Show.$fShow(,)_$cshowList_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCqI_info" {
     sat_sCqI_info:
         const sat_sCqI_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SCNU_srt+704;
 },
 sat_sCqH_entry() //  [R1, R2]
         { []
         }
     {offset
       cJaf: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Show.$fShow(,)_$cshow_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCqH_info" {
     sat_sCqH_info:
         const sat_sCqH_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SCNU_srt+696;
 },
 sat_sCqG_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cJan: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call GHC.Show.$fShow(,)_$cshowsPrec_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCqG_info" {
     sat_sCqG_info:
         const sat_sCqG_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const SCNU_srt+688;
 },
 GHC.Show.$fShow(,)_entry() //  [R2, R3]
         { []
         }
     {offset
       cJar: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cJav; else goto cJau;
       cJav: // global
           HpAlloc = 104;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,)_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJau: // global
           I64[Hp - 96] = sat_sCqI_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = sat_sCqH_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_sCqG_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 45;
           P64[Hp - 8] = Hp - 71;
           P64[Hp] = Hp - 94;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,)_info" {
     GHC.Show.$fShow(,)_info:
         const GHC.Show.$fShow(,)_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const SCNU_srt+688;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.79752129 UTC

[section ""data" . GHC.Show.showString_closure" {
     GHC.Show.showString_closure:
         const GHC.Show.showString_info;
 },
 GHC.Show.showString_entry() //  [R2, R3]
         { []
         }
     {offset
       cJaR: // global
           R3 = R3;
           R2 = R2;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showString_info" {
     GHC.Show.showString_info:
         const GHC.Show.showString_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.800828372 UTC

[section ""data" . GHC.Show.showCommaSpace_closure" {
     GHC.Show.showCommaSpace_closure:
         const GHC.Show.showCommaSpace_info;
         const 0;
 },
 GHC.Show.showCommaSpace_entry() //  [R2]
         { []
         }
     {offset
       cJb2: // global
           R3 = R2;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showCommaSpace_info" {
     GHC.Show.showCommaSpace_info:
         const GHC.Show.showCommaSpace_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SCNU_srt+720;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.804232386 UTC

[section ""cstring" . GHC.Show.$fShowTypeLitSort5_bytes" {
     GHC.Show.$fShowTypeLitSort5_bytes:
         I8[] [84,121,112,101,76,105,116,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.806647664 UTC

[section ""data" . GHC.Show.$fShowTypeLitSort4_closure" {
     GHC.Show.$fShowTypeLitSort4_closure:
         const GHC.Show.$fShowTypeLitSort4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowTypeLitSort4_entry() //  [R1]
         { []
         }
     {offset
       cJbg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJbh; else goto cJbi;
       cJbh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJbi: // global
           (_cJbd::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJbd::I64 == 0) goto cJbf; else goto cJbe;
       cJbf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJbe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJbd::I64;
           R2 = GHC.Show.$fShowTypeLitSort5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTypeLitSort4_info" {
     GHC.Show.$fShowTypeLitSort4_info:
         const GHC.Show.$fShowTypeLitSort4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.810271671 UTC

[section ""cstring" . GHC.Show.$fShowTypeLitSort3_bytes" {
     GHC.Show.$fShowTypeLitSort3_bytes:
         I8[] [84,121,112,101,76,105,116,78,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.813012838 UTC

[section ""data" . GHC.Show.$fShowTypeLitSort2_closure" {
     GHC.Show.$fShowTypeLitSort2_closure:
         const GHC.Show.$fShowTypeLitSort2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowTypeLitSort2_entry() //  [R1]
         { []
         }
     {offset
       cJbx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJby; else goto cJbz;
       cJby: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJbz: // global
           (_cJbu::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJbu::I64 == 0) goto cJbw; else goto cJbv;
       cJbw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJbv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJbu::I64;
           R2 = GHC.Show.$fShowTypeLitSort3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTypeLitSort2_info" {
     GHC.Show.$fShowTypeLitSort2_info:
         const GHC.Show.$fShowTypeLitSort2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.818146819 UTC

[section ""data" . GHC.Show.$fShowTypeLitSort_$cshowsPrec_closure" {
     GHC.Show.$fShowTypeLitSort_$cshowsPrec_closure:
         const GHC.Show.$fShowTypeLitSort_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShowTypeLitSort_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cJbS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJbT; else goto cJbU;
       cJbT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowTypeLitSort_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cJbU: // global
           I64[Sp - 16] = block_cJbL_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uJc1; else goto cJbM;
       uJc1: // global
           call _cJbL(R1) args: 0, res: 0, upd: 0;
       cJbM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTypeLitSort_$cshowsPrec_info" {
     GHC.Show.$fShowTypeLitSort_$cshowsPrec_info:
         const GHC.Show.$fShowTypeLitSort_$cshowsPrec_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const SCNU_srt+728;
 },
 _cJbL() //  [R1]
         { []
         }
     {offset
       cJbL: // global
           _sCqL::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cJbP; else goto cJbQ;
       cJbP: // global
           R3 = _sCqL::P64;
           R2 = GHC.Show.$fShowTypeLitSort4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJbQ: // global
           R3 = _sCqL::P64;
           R2 = GHC.Show.$fShowTypeLitSort2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJbL_info" {
     block_cJbL_info:
         const _cJbL;
         const 1;
         const 12884901918;
         const SCNU_srt+728;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.824904062 UTC

[section ""data" . GHC.Show.$fShowTypeLitSort_$cshow_closure" {
     GHC.Show.$fShowTypeLitSort_$cshow_closure:
         const GHC.Show.$fShowTypeLitSort_$cshow_info;
         const 0;
 },
 GHC.Show.$fShowTypeLitSort_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cJco: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJcp; else goto cJcq;
       cJcp: // global
           R2 = R2;
           R1 = GHC.Show.$fShowTypeLitSort_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJcq: // global
           I64[Sp - 8] = block_cJch_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJcx; else goto cJci;
       uJcx: // global
           call _cJch(R1) args: 0, res: 0, upd: 0;
       cJci: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTypeLitSort_$cshow_info" {
     GHC.Show.$fShowTypeLitSort_$cshow_info:
         const GHC.Show.$fShowTypeLitSort_$cshow_entry;
         const 0;
         const 47244640270;
         const 4294967301;
         const SCNU_srt+728;
 },
 _cJch() //  [R1]
         { []
         }
     {offset
       cJch: // global
           if (R1 & 7 == 1) goto cJcl; else goto cJcm;
       cJcl: // global
           R1 = GHC.Show.$fShowTypeLitSort4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cJcm: // global
           R1 = GHC.Show.$fShowTypeLitSort2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJch_info" {
     block_cJch_info:
         const _cJch;
         const 0;
         const 12884901918;
         const SCNU_srt+728;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.831747892 UTC

[section ""data" . GHC.Show.$fShowTypeLitSort1_closure" {
     GHC.Show.$fShowTypeLitSort1_closure:
         const GHC.Show.$fShowTypeLitSort1_info;
         const 0;
 },
 GHC.Show.$fShowTypeLitSort1_entry() //  [R2, R3]
         { []
         }
     {offset
       cJcW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJcX; else goto cJcY;
       cJcX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowTypeLitSort1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJcY: // global
           I64[Sp - 16] = block_cJcP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uJd5; else goto cJcQ;
       uJd5: // global
           call _cJcP(R1) args: 0, res: 0, upd: 0;
       cJcQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTypeLitSort1_info" {
     GHC.Show.$fShowTypeLitSort1_info:
         const GHC.Show.$fShowTypeLitSort1_entry;
         const 0;
         const 81604378638;
         const 8589934607;
         const SCNU_srt+728;
 },
 _cJcP() //  [R1]
         { []
         }
     {offset
       cJcP: // global
           _sCqQ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cJcT; else goto cJcU;
       cJcT: // global
           R3 = _sCqQ::P64;
           R2 = GHC.Show.$fShowTypeLitSort4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJcU: // global
           R3 = _sCqQ::P64;
           R2 = GHC.Show.$fShowTypeLitSort2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJcP_info" {
     block_cJcP_info:
         const _cJcP;
         const 1;
         const 12884901918;
         const SCNU_srt+728;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.837739819 UTC

[section ""data" . GHC.Show.$fShowTypeLitSort_$cshowList_closure" {
     GHC.Show.$fShowTypeLitSort_$cshowList_closure:
         const GHC.Show.$fShowTypeLitSort_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShowTypeLitSort_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cJdl: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowTypeLitSort1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTypeLitSort_$cshowList_info" {
     GHC.Show.$fShowTypeLitSort_$cshowList_info:
         const GHC.Show.$fShowTypeLitSort_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SCNU_srt+760;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.840923304 UTC

[section ""data" . GHC.Show.$fShowTypeLitSort_closure" {
     GHC.Show.$fShowTypeLitSort_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowTypeLitSort_$cshowsPrec_closure+3;
         const GHC.Show.$fShowTypeLitSort_$cshow_closure+1;
         const GHC.Show.$fShowTypeLitSort_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.842993142 UTC

[section ""cstring" . GHC.Show.$fShowVecElem20_bytes" {
     GHC.Show.$fShowVecElem20_bytes:
         I8[] [73,110,116,56,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.845551161 UTC

[section ""data" . GHC.Show.$fShowVecElem19_closure" {
     GHC.Show.$fShowVecElem19_closure:
         const GHC.Show.$fShowVecElem19_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem19_entry() //  [R1]
         { []
         }
     {offset
       cJdA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJdB; else goto cJdC;
       cJdB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJdC: // global
           (_cJdx::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJdx::I64 == 0) goto cJdz; else goto cJdy;
       cJdz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJdy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJdx::I64;
           R2 = GHC.Show.$fShowVecElem20_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem19_info" {
     GHC.Show.$fShowVecElem19_info:
         const GHC.Show.$fShowVecElem19_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.8492109 UTC

[section ""cstring" . GHC.Show.$fShowVecElem18_bytes" {
     GHC.Show.$fShowVecElem18_bytes:
         I8[] [73,110,116,49,54,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.8520689 UTC

[section ""data" . GHC.Show.$fShowVecElem17_closure" {
     GHC.Show.$fShowVecElem17_closure:
         const GHC.Show.$fShowVecElem17_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem17_entry() //  [R1]
         { []
         }
     {offset
       cJdR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJdS; else goto cJdT;
       cJdS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJdT: // global
           (_cJdO::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJdO::I64 == 0) goto cJdQ; else goto cJdP;
       cJdQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJdP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJdO::I64;
           R2 = GHC.Show.$fShowVecElem18_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem17_info" {
     GHC.Show.$fShowVecElem17_info:
         const GHC.Show.$fShowVecElem17_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.855735236 UTC

[section ""cstring" . GHC.Show.$fShowVecElem16_bytes" {
     GHC.Show.$fShowVecElem16_bytes:
         I8[] [73,110,116,51,50,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.858064811 UTC

[section ""data" . GHC.Show.$fShowVecElem15_closure" {
     GHC.Show.$fShowVecElem15_closure:
         const GHC.Show.$fShowVecElem15_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem15_entry() //  [R1]
         { []
         }
     {offset
       cJe8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJe9; else goto cJea;
       cJe9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJea: // global
           (_cJe5::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJe5::I64 == 0) goto cJe7; else goto cJe6;
       cJe7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJe6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJe5::I64;
           R2 = GHC.Show.$fShowVecElem16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem15_info" {
     GHC.Show.$fShowVecElem15_info:
         const GHC.Show.$fShowVecElem15_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.862408148 UTC

[section ""cstring" . GHC.Show.$fShowVecElem14_bytes" {
     GHC.Show.$fShowVecElem14_bytes:
         I8[] [73,110,116,54,52,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.864783219 UTC

[section ""data" . GHC.Show.$fShowVecElem13_closure" {
     GHC.Show.$fShowVecElem13_closure:
         const GHC.Show.$fShowVecElem13_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem13_entry() //  [R1]
         { []
         }
     {offset
       cJep: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJeq; else goto cJer;
       cJeq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJer: // global
           (_cJem::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJem::I64 == 0) goto cJeo; else goto cJen;
       cJeo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJen: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJem::I64;
           R2 = GHC.Show.$fShowVecElem14_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem13_info" {
     GHC.Show.$fShowVecElem13_info:
         const GHC.Show.$fShowVecElem13_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.868510707 UTC

[section ""cstring" . GHC.Show.$fShowVecElem12_bytes" {
     GHC.Show.$fShowVecElem12_bytes:
         I8[] [87,111,114,100,56,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.871336437 UTC

[section ""data" . GHC.Show.$fShowVecElem11_closure" {
     GHC.Show.$fShowVecElem11_closure:
         const GHC.Show.$fShowVecElem11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem11_entry() //  [R1]
         { []
         }
     {offset
       cJeG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJeH; else goto cJeI;
       cJeH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJeI: // global
           (_cJeD::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJeD::I64 == 0) goto cJeF; else goto cJeE;
       cJeF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJeE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJeD::I64;
           R2 = GHC.Show.$fShowVecElem12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem11_info" {
     GHC.Show.$fShowVecElem11_info:
         const GHC.Show.$fShowVecElem11_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.875235014 UTC

[section ""cstring" . GHC.Show.$fShowVecElem10_bytes" {
     GHC.Show.$fShowVecElem10_bytes:
         I8[] [87,111,114,100,49,54,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.877660096 UTC

[section ""data" . GHC.Show.$fShowVecElem9_closure" {
     GHC.Show.$fShowVecElem9_closure:
         const GHC.Show.$fShowVecElem9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem9_entry() //  [R1]
         { []
         }
     {offset
       cJeX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJeY; else goto cJeZ;
       cJeY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJeZ: // global
           (_cJeU::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJeU::I64 == 0) goto cJeW; else goto cJeV;
       cJeW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJeV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJeU::I64;
           R2 = GHC.Show.$fShowVecElem10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem9_info" {
     GHC.Show.$fShowVecElem9_info:
         const GHC.Show.$fShowVecElem9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.881709966 UTC

[section ""cstring" . GHC.Show.$fShowVecElem8_bytes" {
     GHC.Show.$fShowVecElem8_bytes:
         I8[] [87,111,114,100,51,50,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.884019701 UTC

[section ""data" . GHC.Show.$fShowVecElem7_closure" {
     GHC.Show.$fShowVecElem7_closure:
         const GHC.Show.$fShowVecElem7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem7_entry() //  [R1]
         { []
         }
     {offset
       cJfe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJff; else goto cJfg;
       cJff: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJfg: // global
           (_cJfb::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJfb::I64 == 0) goto cJfd; else goto cJfc;
       cJfd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJfc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJfb::I64;
           R2 = GHC.Show.$fShowVecElem8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem7_info" {
     GHC.Show.$fShowVecElem7_info:
         const GHC.Show.$fShowVecElem7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.887808884 UTC

[section ""cstring" . GHC.Show.$fShowVecElem6_bytes" {
     GHC.Show.$fShowVecElem6_bytes:
         I8[] [87,111,114,100,54,52,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.89111527 UTC

[section ""data" . GHC.Show.$fShowVecElem5_closure" {
     GHC.Show.$fShowVecElem5_closure:
         const GHC.Show.$fShowVecElem5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem5_entry() //  [R1]
         { []
         }
     {offset
       cJfv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJfw; else goto cJfx;
       cJfw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJfx: // global
           (_cJfs::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJfs::I64 == 0) goto cJfu; else goto cJft;
       cJfu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJft: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJfs::I64;
           R2 = GHC.Show.$fShowVecElem6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem5_info" {
     GHC.Show.$fShowVecElem5_info:
         const GHC.Show.$fShowVecElem5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.89465779 UTC

[section ""cstring" . GHC.Show.$fShowVecElem4_bytes" {
     GHC.Show.$fShowVecElem4_bytes:
         I8[] [70,108,111,97,116,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.897017502 UTC

[section ""data" . GHC.Show.$fShowVecElem3_closure" {
     GHC.Show.$fShowVecElem3_closure:
         const GHC.Show.$fShowVecElem3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem3_entry() //  [R1]
         { []
         }
     {offset
       cJfM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJfN; else goto cJfO;
       cJfN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJfO: // global
           (_cJfJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJfJ::I64 == 0) goto cJfL; else goto cJfK;
       cJfL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJfK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJfJ::I64;
           R2 = GHC.Show.$fShowVecElem4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem3_info" {
     GHC.Show.$fShowVecElem3_info:
         const GHC.Show.$fShowVecElem3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.901227074 UTC

[section ""cstring" . GHC.Show.$fShowVecElem2_bytes" {
     GHC.Show.$fShowVecElem2_bytes:
         I8[] [68,111,117,98,108,101,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.90354924 UTC

[section ""data" . GHC.Show.$fShowVecElem1_closure" {
     GHC.Show.$fShowVecElem1_closure:
         const GHC.Show.$fShowVecElem1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem1_entry() //  [R1]
         { []
         }
     {offset
       cJg3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJg4; else goto cJg5;
       cJg4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJg5: // global
           (_cJg0::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJg0::I64 == 0) goto cJg2; else goto cJg1;
       cJg2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJg1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJg0::I64;
           R2 = GHC.Show.$fShowVecElem2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem1_info" {
     GHC.Show.$fShowVecElem1_info:
         const GHC.Show.$fShowVecElem1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.909089307 UTC

[section ""data" . GHC.Show.$w$cshowsPrec10_closure" {
     GHC.Show.$w$cshowsPrec10_closure:
         const GHC.Show.$w$cshowsPrec10_info;
         const 0;
 },
 GHC.Show.$w$cshowsPrec10_entry() //  [R2, R3]
         { []
         }
     {offset
       cJgw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJgx; else goto cJgy;
       cJgx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$w$cshowsPrec10_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJgy: // global
           I64[Sp - 16] = block_cJgh_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uJh3; else goto cJgi;
       uJh3: // global
           call _cJgh(R1) args: 0, res: 0, upd: 0;
       cJgi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec10_info" {
     GHC.Show.$w$cshowsPrec10_info:
         const GHC.Show.$w$cshowsPrec10_entry;
         const 0;
         const 8791798054926;
         const 8589934607;
         const SCNU_srt+768;
 },
 _cJgh() //  [R1]
         { []
         }
     {offset
       cJgh: // global
           _sCqV::P64 = P64[Sp + 8];
           switch [0 .. 9] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cJgl;
               case 1 : goto cJgm;
               case 2 : goto cJgn;
               case 3 : goto cJgo;
               case 4 : goto cJgp;
               case 5 : goto cJgq;
               case 6 : goto cJgr;
               case 7 : goto cJgs;
               case 8 : goto cJgt;
               case 9 : goto cJgu;
           }
       cJgu: // global
           R3 = _sCqV::P64;
           R2 = GHC.Show.$fShowVecElem1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJgt: // global
           R3 = _sCqV::P64;
           R2 = GHC.Show.$fShowVecElem3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJgs: // global
           R3 = _sCqV::P64;
           R2 = GHC.Show.$fShowVecElem5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJgr: // global
           R3 = _sCqV::P64;
           R2 = GHC.Show.$fShowVecElem7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJgq: // global
           R3 = _sCqV::P64;
           R2 = GHC.Show.$fShowVecElem9_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJgp: // global
           R3 = _sCqV::P64;
           R2 = GHC.Show.$fShowVecElem11_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJgo: // global
           R3 = _sCqV::P64;
           R2 = GHC.Show.$fShowVecElem13_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJgn: // global
           R3 = _sCqV::P64;
           R2 = GHC.Show.$fShowVecElem15_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJgm: // global
           R3 = _sCqV::P64;
           R2 = GHC.Show.$fShowVecElem17_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJgl: // global
           R3 = _sCqV::P64;
           R2 = GHC.Show.$fShowVecElem19_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJgh_info" {
     block_cJgh_info:
         const _cJgh;
         const 1;
         const 4393751543838;
         const SCNU_srt+776;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.916297089 UTC

[section ""data" . GHC.Show.$fShowVecElem_$cshowsPrec_closure" {
     GHC.Show.$fShowVecElem_$cshowsPrec_closure:
         const GHC.Show.$fShowVecElem_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShowVecElem_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       cJhk: // global
           _sCqY::P64 = R3;
           R3 = R4;
           R2 = _sCqY::P64;
           call GHC.Show.$w$cshowsPrec10_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem_$cshowsPrec_info" {
     GHC.Show.$fShowVecElem_$cshowsPrec_info:
         const GHC.Show.$fShowVecElem_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SCNU_srt+768;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.921641611 UTC

[section ""data" . GHC.Show.$fShowVecElem_$cshow_closure" {
     GHC.Show.$fShowVecElem_$cshow_closure:
         const GHC.Show.$fShowVecElem_$cshow_info;
         const 0;
 },
 GHC.Show.$fShowVecElem_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cJhK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJhL; else goto cJhM;
       cJhL: // global
           R2 = R2;
           R1 = GHC.Show.$fShowVecElem_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJhM: // global
           I64[Sp - 8] = block_cJhv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJih; else goto cJhw;
       uJih: // global
           call _cJhv(R1) args: 0, res: 0, upd: 0;
       cJhw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem_$cshow_info" {
     GHC.Show.$fShowVecElem_$cshow_info:
         const GHC.Show.$fShowVecElem_$cshow_entry;
         const 0;
         const 8791798054926;
         const 4294967301;
         const SCNU_srt+776;
 },
 _cJhv() //  [R1]
         { []
         }
     {offset
       cJhv: // global
           switch [0 .. 9] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cJhz;
               case 1 : goto cJhA;
               case 2 : goto cJhB;
               case 3 : goto cJhC;
               case 4 : goto cJhD;
               case 5 : goto cJhE;
               case 6 : goto cJhF;
               case 7 : goto cJhG;
               case 8 : goto cJhH;
               case 9 : goto cJhI;
           }
       cJhI: // global
           R1 = GHC.Show.$fShowVecElem1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cJhH: // global
           R1 = GHC.Show.$fShowVecElem3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cJhG: // global
           R1 = GHC.Show.$fShowVecElem5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cJhF: // global
           R1 = GHC.Show.$fShowVecElem7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cJhE: // global
           R1 = GHC.Show.$fShowVecElem9_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cJhD: // global
           R1 = GHC.Show.$fShowVecElem11_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cJhC: // global
           R1 = GHC.Show.$fShowVecElem13_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cJhB: // global
           R1 = GHC.Show.$fShowVecElem15_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cJhA: // global
           R1 = GHC.Show.$fShowVecElem17_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cJhz: // global
           R1 = GHC.Show.$fShowVecElem19_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJhv_info" {
     block_cJhv_info:
         const _cJhv;
         const 0;
         const 4393751543838;
         const SCNU_srt+776;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.928014908 UTC

[section ""data" . GHC.Show.$fShowVecElem_$cshowList_closure" {
     GHC.Show.$fShowVecElem_$cshowList_closure:
         const GHC.Show.$fShowVecElem_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShowVecElem_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cJiI: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$w$cshowsPrec10_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem_$cshowList_info" {
     GHC.Show.$fShowVecElem_$cshowList_info:
         const GHC.Show.$fShowVecElem_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SCNU_srt+768;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.931690103 UTC

[section ""data" . GHC.Show.$fShowVecElem_closure" {
     GHC.Show.$fShowVecElem_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowVecElem_$cshowsPrec_closure+3;
         const GHC.Show.$fShowVecElem_$cshow_closure+1;
         const GHC.Show.$fShowVecElem_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.933463987 UTC

[section ""cstring" . GHC.Show.$fShowVecCount12_bytes" {
     GHC.Show.$fShowVecCount12_bytes:
         I8[] [86,101,99,50]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.935711621 UTC

[section ""data" . GHC.Show.$fShowVecCount11_closure" {
     GHC.Show.$fShowVecCount11_closure:
         const GHC.Show.$fShowVecCount11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecCount11_entry() //  [R1]
         { []
         }
     {offset
       cJiX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJiY; else goto cJiZ;
       cJiY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJiZ: // global
           (_cJiU::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJiU::I64 == 0) goto cJiW; else goto cJiV;
       cJiW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJiV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJiU::I64;
           R2 = GHC.Show.$fShowVecCount12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecCount11_info" {
     GHC.Show.$fShowVecCount11_info:
         const GHC.Show.$fShowVecCount11_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.93970554 UTC

[section ""cstring" . GHC.Show.$fShowVecCount10_bytes" {
     GHC.Show.$fShowVecCount10_bytes:
         I8[] [86,101,99,52]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.942221118 UTC

[section ""data" . GHC.Show.$fShowVecCount9_closure" {
     GHC.Show.$fShowVecCount9_closure:
         const GHC.Show.$fShowVecCount9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecCount9_entry() //  [R1]
         { []
         }
     {offset
       cJje: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJjf; else goto cJjg;
       cJjf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJjg: // global
           (_cJjb::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJjb::I64 == 0) goto cJjd; else goto cJjc;
       cJjd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJjc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJjb::I64;
           R2 = GHC.Show.$fShowVecCount10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecCount9_info" {
     GHC.Show.$fShowVecCount9_info:
         const GHC.Show.$fShowVecCount9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.945846291 UTC

[section ""cstring" . GHC.Show.$fShowVecCount8_bytes" {
     GHC.Show.$fShowVecCount8_bytes:
         I8[] [86,101,99,56]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.94861503 UTC

[section ""data" . GHC.Show.$fShowVecCount7_closure" {
     GHC.Show.$fShowVecCount7_closure:
         const GHC.Show.$fShowVecCount7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecCount7_entry() //  [R1]
         { []
         }
     {offset
       cJjv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJjw; else goto cJjx;
       cJjw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJjx: // global
           (_cJjs::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJjs::I64 == 0) goto cJju; else goto cJjt;
       cJju: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJjt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJjs::I64;
           R2 = GHC.Show.$fShowVecCount8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecCount7_info" {
     GHC.Show.$fShowVecCount7_info:
         const GHC.Show.$fShowVecCount7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.952492221 UTC

[section ""cstring" . GHC.Show.$fShowVecCount6_bytes" {
     GHC.Show.$fShowVecCount6_bytes:
         I8[] [86,101,99,49,54]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.954921161 UTC

[section ""data" . GHC.Show.$fShowVecCount5_closure" {
     GHC.Show.$fShowVecCount5_closure:
         const GHC.Show.$fShowVecCount5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecCount5_entry() //  [R1]
         { []
         }
     {offset
       cJjM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJjN; else goto cJjO;
       cJjN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJjO: // global
           (_cJjJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJjJ::I64 == 0) goto cJjL; else goto cJjK;
       cJjL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJjK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJjJ::I64;
           R2 = GHC.Show.$fShowVecCount6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecCount5_info" {
     GHC.Show.$fShowVecCount5_info:
         const GHC.Show.$fShowVecCount5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.958990745 UTC

[section ""cstring" . GHC.Show.$fShowVecCount4_bytes" {
     GHC.Show.$fShowVecCount4_bytes:
         I8[] [86,101,99,51,50]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.961289864 UTC

[section ""data" . GHC.Show.$fShowVecCount3_closure" {
     GHC.Show.$fShowVecCount3_closure:
         const GHC.Show.$fShowVecCount3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecCount3_entry() //  [R1]
         { []
         }
     {offset
       cJk3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJk4; else goto cJk5;
       cJk4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJk5: // global
           (_cJk0::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJk0::I64 == 0) goto cJk2; else goto cJk1;
       cJk2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJk1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJk0::I64;
           R2 = GHC.Show.$fShowVecCount4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecCount3_info" {
     GHC.Show.$fShowVecCount3_info:
         const GHC.Show.$fShowVecCount3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.964888908 UTC

[section ""cstring" . GHC.Show.$fShowVecCount2_bytes" {
     GHC.Show.$fShowVecCount2_bytes:
         I8[] [86,101,99,54,52]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.968318233 UTC

[section ""data" . GHC.Show.$fShowVecCount1_closure" {
     GHC.Show.$fShowVecCount1_closure:
         const GHC.Show.$fShowVecCount1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecCount1_entry() //  [R1]
         { []
         }
     {offset
       cJkk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJkl; else goto cJkm;
       cJkl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJkm: // global
           (_cJkh::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJkh::I64 == 0) goto cJkj; else goto cJki;
       cJkj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJki: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJkh::I64;
           R2 = GHC.Show.$fShowVecCount2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecCount1_info" {
     GHC.Show.$fShowVecCount1_info:
         const GHC.Show.$fShowVecCount1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.973287846 UTC

[section ""data" . GHC.Show.$w$cshowsPrec9_closure" {
     GHC.Show.$w$cshowsPrec9_closure:
         const GHC.Show.$w$cshowsPrec9_info;
         const 0;
 },
 GHC.Show.$w$cshowsPrec9_entry() //  [R2, R3]
         { []
         }
     {offset
       cJkJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJkK; else goto cJkL;
       cJkK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$w$cshowsPrec9_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJkL: // global
           I64[Sp - 16] = block_cJky_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uJl4; else goto cJkz;
       uJl4: // global
           call _cJky(R1) args: 0, res: 0, upd: 0;
       cJkz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec9_info" {
     GHC.Show.$w$cshowsPrec9_info:
         const GHC.Show.$w$cshowsPrec9_entry;
         const 0;
         const 545460846606;
         const 8589934607;
         const SCNU_srt+864;
 },
 _cJky() //  [R1]
         { []
         }
     {offset
       cJky: // global
           _sCr5::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto cJkC;
               case 2 : goto cJkD;
               case 3 : goto cJkE;
               case 4 : goto cJkF;
               case 5 : goto cJkG;
               case 6 : goto cJkH;
           }
       cJkH: // global
           R3 = _sCr5::P64;
           R2 = GHC.Show.$fShowVecCount1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJkG: // global
           R3 = _sCr5::P64;
           R2 = GHC.Show.$fShowVecCount3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJkF: // global
           R3 = _sCr5::P64;
           R2 = GHC.Show.$fShowVecCount5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJkE: // global
           R3 = _sCr5::P64;
           R2 = GHC.Show.$fShowVecCount7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJkD: // global
           R3 = _sCr5::P64;
           R2 = GHC.Show.$fShowVecCount9_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJkC: // global
           R3 = _sCr5::P64;
           R2 = GHC.Show.$fShowVecCount11_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJky_info" {
     block_cJky_info:
         const _cJky;
         const 1;
         const 270582939678;
         const SCNU_srt+872;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.97975051 UTC

[section ""data" . GHC.Show.$fShowVecCount_$cshowsPrec_closure" {
     GHC.Show.$fShowVecCount_$cshowsPrec_closure:
         const GHC.Show.$fShowVecCount_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShowVecCount_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       cJll: // global
           _sCr8::P64 = R3;
           R3 = R4;
           R2 = _sCr8::P64;
           call GHC.Show.$w$cshowsPrec9_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecCount_$cshowsPrec_info" {
     GHC.Show.$fShowVecCount_$cshowsPrec_info:
         const GHC.Show.$fShowVecCount_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SCNU_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.983903179 UTC

[section ""data" . GHC.Show.$fShowVecCount_$cshow_closure" {
     GHC.Show.$fShowVecCount_$cshow_closure:
         const GHC.Show.$fShowVecCount_$cshow_info;
         const 0;
 },
 GHC.Show.$fShowVecCount_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cJlH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJlI; else goto cJlJ;
       cJlI: // global
           R2 = R2;
           R1 = GHC.Show.$fShowVecCount_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJlJ: // global
           I64[Sp - 8] = block_cJlw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJm2; else goto cJlx;
       uJm2: // global
           call _cJlw(R1) args: 0, res: 0, upd: 0;
       cJlx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecCount_$cshow_info" {
     GHC.Show.$fShowVecCount_$cshow_info:
         const GHC.Show.$fShowVecCount_$cshow_entry;
         const 0;
         const 545460846606;
         const 4294967301;
         const SCNU_srt+872;
 },
 _cJlw() //  [R1]
         { []
         }
     {offset
       cJlw: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto cJlA;
               case 2 : goto cJlB;
               case 3 : goto cJlC;
               case 4 : goto cJlD;
               case 5 : goto cJlE;
               case 6 : goto cJlF;
           }
       cJlF: // global
           R1 = GHC.Show.$fShowVecCount1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cJlE: // global
           R1 = GHC.Show.$fShowVecCount3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cJlD: // global
           R1 = GHC.Show.$fShowVecCount5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cJlC: // global
           R1 = GHC.Show.$fShowVecCount7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cJlB: // global
           R1 = GHC.Show.$fShowVecCount9_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cJlA: // global
           R1 = GHC.Show.$fShowVecCount11_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJlw_info" {
     block_cJlw_info:
         const _cJlw;
         const 0;
         const 270582939678;
         const SCNU_srt+872;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.990355726 UTC

[section ""data" . GHC.Show.$fShowVecCount_$cshowList_closure" {
     GHC.Show.$fShowVecCount_$cshowList_closure:
         const GHC.Show.$fShowVecCount_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShowVecCount_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cJmp: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$w$cshowsPrec9_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecCount_$cshowList_info" {
     GHC.Show.$fShowVecCount_$cshowList_info:
         const GHC.Show.$fShowVecCount_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SCNU_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.993527559 UTC

[section ""data" . GHC.Show.$fShowVecCount_closure" {
     GHC.Show.$fShowVecCount_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowVecCount_$cshowsPrec_closure+3;
         const GHC.Show.$fShowVecCount_$cshow_closure+1;
         const GHC.Show.$fShowVecCount_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.995181222 UTC

[section ""cstring" . GHC.Show.$fShowOrdering6_bytes" {
     GHC.Show.$fShowOrdering6_bytes:
         I8[] [76,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:17.998027803 UTC

[section ""data" . GHC.Show.$fShowOrdering5_closure" {
     GHC.Show.$fShowOrdering5_closure:
         const GHC.Show.$fShowOrdering5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowOrdering5_entry() //  [R1]
         { []
         }
     {offset
       cJmE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJmF; else goto cJmG;
       cJmF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJmG: // global
           (_cJmB::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJmB::I64 == 0) goto cJmD; else goto cJmC;
       cJmD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJmC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJmB::I64;
           R2 = GHC.Show.$fShowOrdering6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowOrdering5_info" {
     GHC.Show.$fShowOrdering5_info:
         const GHC.Show.$fShowOrdering5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.001602471 UTC

[section ""cstring" . GHC.Show.$fShowOrdering4_bytes" {
     GHC.Show.$fShowOrdering4_bytes:
         I8[] [69,81]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.003749508 UTC

[section ""data" . GHC.Show.$fShowOrdering3_closure" {
     GHC.Show.$fShowOrdering3_closure:
         const GHC.Show.$fShowOrdering3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowOrdering3_entry() //  [R1]
         { []
         }
     {offset
       cJmV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJmW; else goto cJmX;
       cJmW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJmX: // global
           (_cJmS::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJmS::I64 == 0) goto cJmU; else goto cJmT;
       cJmU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJmT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJmS::I64;
           R2 = GHC.Show.$fShowOrdering4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowOrdering3_info" {
     GHC.Show.$fShowOrdering3_info:
         const GHC.Show.$fShowOrdering3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.007437775 UTC

[section ""cstring" . GHC.Show.$fShowOrdering2_bytes" {
     GHC.Show.$fShowOrdering2_bytes:
         I8[] [71,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.009650396 UTC

[section ""data" . GHC.Show.$fShowOrdering1_closure" {
     GHC.Show.$fShowOrdering1_closure:
         const GHC.Show.$fShowOrdering1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowOrdering1_entry() //  [R1]
         { []
         }
     {offset
       cJnc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJnd; else goto cJne;
       cJnd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJne: // global
           (_cJn9::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJn9::I64 == 0) goto cJnb; else goto cJna;
       cJnb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJna: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJn9::I64;
           R2 = GHC.Show.$fShowOrdering2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowOrdering1_info" {
     GHC.Show.$fShowOrdering1_info:
         const GHC.Show.$fShowOrdering1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.014218762 UTC

[section ""data" . GHC.Show.$w$cshowsPrec8_closure" {
     GHC.Show.$w$cshowsPrec8_closure:
         const GHC.Show.$w$cshowsPrec8_info;
         const 0;
 },
 GHC.Show.$w$cshowsPrec8_entry() //  [R2, R3]
         { []
         }
     {offset
       cJny: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJnz; else goto cJnA;
       cJnz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$w$cshowsPrec8_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJnA: // global
           I64[Sp - 16] = block_cJnq_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uJnL; else goto cJnr;
       uJnL: // global
           call _cJnq(R1) args: 0, res: 0, upd: 0;
       cJnr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec8_info" {
     GHC.Show.$w$cshowsPrec8_info:
         const GHC.Show.$w$cshowsPrec8_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const SCNU_srt+928;
 },
 _cJnq() //  [R1]
         { []
         }
     {offset
       cJnq: // global
           _sCrf::P64 = P64[Sp + 8];
           _cJnx::P64 = R1 & 7;
           if (_cJnx::P64 < 3) goto uJnK; else goto cJnw;
       uJnK: // global
           if (_cJnx::P64 < 2) goto cJnu; else goto cJnv;
       cJnu: // global
           R3 = _sCrf::P64;
           R2 = GHC.Show.$fShowOrdering5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJnv: // global
           R3 = _sCrf::P64;
           R2 = GHC.Show.$fShowOrdering3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJnw: // global
           R3 = _sCrf::P64;
           R2 = GHC.Show.$fShowOrdering1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJnq_info" {
     block_cJnq_info:
         const _cJnq;
         const 1;
         const 30064771102;
         const SCNU_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.020533679 UTC

[section ""data" . GHC.Show.$fShowOrdering_$cshowsPrec_closure" {
     GHC.Show.$fShowOrdering_$cshowsPrec_closure:
         const GHC.Show.$fShowOrdering_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShowOrdering_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       cJo0: // global
           _sCri::P64 = R3;
           R3 = R4;
           R2 = _sCri::P64;
           call GHC.Show.$w$cshowsPrec8_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowOrdering_$cshowsPrec_info" {
     GHC.Show.$fShowOrdering_$cshowsPrec_info:
         const GHC.Show.$fShowOrdering_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SCNU_srt+928;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.024874594 UTC

[section ""data" . GHC.Show.$fShowOrdering_$cshow_closure" {
     GHC.Show.$fShowOrdering_$cshow_closure:
         const GHC.Show.$fShowOrdering_$cshow_info;
         const 0;
 },
 GHC.Show.$fShowOrdering_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cJoj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJok; else goto cJol;
       cJok: // global
           R2 = R2;
           R1 = GHC.Show.$fShowOrdering_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJol: // global
           I64[Sp - 8] = block_cJob_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJow; else goto cJoc;
       uJow: // global
           call _cJob(R1) args: 0, res: 0, upd: 0;
       cJoc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowOrdering_$cshow_info" {
     GHC.Show.$fShowOrdering_$cshow_info:
         const GHC.Show.$fShowOrdering_$cshow_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const SCNU_srt+936;
 },
 _cJob() //  [R1]
         { []
         }
     {offset
       cJob: // global
           _cJoi::P64 = R1 & 7;
           if (_cJoi::P64 < 3) goto uJov; else goto cJoh;
       uJov: // global
           if (_cJoi::P64 < 2) goto cJof; else goto cJog;
       cJof: // global
           R1 = GHC.Show.$fShowOrdering5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cJog: // global
           R1 = GHC.Show.$fShowOrdering3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cJoh: // global
           R1 = GHC.Show.$fShowOrdering1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJob_info" {
     block_cJob_info:
         const _cJob;
         const 0;
         const 30064771102;
         const SCNU_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.031022807 UTC

[section ""data" . GHC.Show.$fShowOrdering_$cshowList_closure" {
     GHC.Show.$fShowOrdering_$cshowList_closure:
         const GHC.Show.$fShowOrdering_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShowOrdering_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cJoO: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$w$cshowsPrec8_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowOrdering_$cshowList_info" {
     GHC.Show.$fShowOrdering_$cshowList_info:
         const GHC.Show.$fShowOrdering_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SCNU_srt+928;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.034334508 UTC

[section ""data" . GHC.Show.$fShowOrdering_closure" {
     GHC.Show.$fShowOrdering_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowOrdering_$cshowsPrec_closure+3;
         const GHC.Show.$fShowOrdering_$cshow_closure+1;
         const GHC.Show.$fShowOrdering_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.036511853 UTC

[section ""cstring" . GHC.Show.$fShowBool5_bytes" {
     GHC.Show.$fShowBool5_bytes:
         I8[] [70,97,108,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.039217085 UTC

[section ""data" . GHC.Show.$fShowBool4_closure" {
     GHC.Show.$fShowBool4_closure:
         const GHC.Show.$fShowBool4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowBool4_entry() //  [R1]
         { []
         }
     {offset
       cJp3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJp4; else goto cJp5;
       cJp4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJp5: // global
           (_cJp0::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJp0::I64 == 0) goto cJp2; else goto cJp1;
       cJp2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJp1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJp0::I64;
           R2 = GHC.Show.$fShowBool5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowBool4_info" {
     GHC.Show.$fShowBool4_info:
         const GHC.Show.$fShowBool4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.042840997 UTC

[section ""cstring" . GHC.Show.$fShowBool3_bytes" {
     GHC.Show.$fShowBool3_bytes:
         I8[] [84,114,117,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.045226757 UTC

[section ""data" . GHC.Show.$fShowBool2_closure" {
     GHC.Show.$fShowBool2_closure:
         const GHC.Show.$fShowBool2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowBool2_entry() //  [R1]
         { []
         }
     {offset
       cJpk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJpl; else goto cJpm;
       cJpl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJpm: // global
           (_cJph::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJph::I64 == 0) goto cJpj; else goto cJpi;
       cJpj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJpi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJph::I64;
           R2 = GHC.Show.$fShowBool3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowBool2_info" {
     GHC.Show.$fShowBool2_info:
         const GHC.Show.$fShowBool2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.050979126 UTC

[section ""data" . GHC.Show.$fShowBool_$cshowsPrec_closure" {
     GHC.Show.$fShowBool_$cshowsPrec_closure:
         const GHC.Show.$fShowBool_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShowBool_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cJpF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJpG; else goto cJpH;
       cJpG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowBool_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cJpH: // global
           I64[Sp - 16] = block_cJpy_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uJpO; else goto cJpz;
       uJpO: // global
           call _cJpy(R1) args: 0, res: 0, upd: 0;
       cJpz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowBool_$cshowsPrec_info" {
     GHC.Show.$fShowBool_$cshowsPrec_info:
         const GHC.Show.$fShowBool_$cshowsPrec_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const SCNU_srt+968;
 },
 _cJpy() //  [R1]
         { []
         }
     {offset
       cJpy: // global
           _sCrq::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cJpC; else goto cJpD;
       cJpC: // global
           R3 = _sCrq::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJpD: // global
           R3 = _sCrq::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJpy_info" {
     block_cJpy_info:
         const _cJpy;
         const 1;
         const 12884901918;
         const SCNU_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.057626048 UTC

[section ""data" . GHC.Show.$fShowBool_$cshow_closure" {
     GHC.Show.$fShowBool_$cshow_closure:
         const GHC.Show.$fShowBool_$cshow_info;
         const 0;
 },
 GHC.Show.$fShowBool_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cJqb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJqc; else goto cJqd;
       cJqc: // global
           R2 = R2;
           R1 = GHC.Show.$fShowBool_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJqd: // global
           I64[Sp - 8] = block_cJq4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJqk; else goto cJq5;
       uJqk: // global
           call _cJq4(R1) args: 0, res: 0, upd: 0;
       cJq5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowBool_$cshow_info" {
     GHC.Show.$fShowBool_$cshow_info:
         const GHC.Show.$fShowBool_$cshow_entry;
         const 0;
         const 47244640270;
         const 4294967301;
         const SCNU_srt+968;
 },
 _cJq4() //  [R1]
         { []
         }
     {offset
       cJq4: // global
           if (R1 & 7 == 1) goto cJq8; else goto cJq9;
       cJq8: // global
           R1 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cJq9: // global
           R1 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJq4_info" {
     block_cJq4_info:
         const _cJq4;
         const 0;
         const 12884901918;
         const SCNU_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.063418299 UTC

[section ""data" . GHC.Show.$fShowBool1_closure" {
     GHC.Show.$fShowBool1_closure:
         const GHC.Show.$fShowBool1_info;
         const 0;
 },
 GHC.Show.$fShowBool1_entry() //  [R2, R3]
         { []
         }
     {offset
       cJqJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJqK; else goto cJqL;
       cJqK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowBool1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJqL: // global
           I64[Sp - 16] = block_cJqC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uJqS; else goto cJqD;
       uJqS: // global
           call _cJqC(R1) args: 0, res: 0, upd: 0;
       cJqD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowBool1_info" {
     GHC.Show.$fShowBool1_info:
         const GHC.Show.$fShowBool1_entry;
         const 0;
         const 81604378638;
         const 8589934607;
         const SCNU_srt+968;
 },
 _cJqC() //  [R1]
         { []
         }
     {offset
       cJqC: // global
           _sCrv::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cJqG; else goto cJqH;
       cJqG: // global
           R3 = _sCrv::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJqH: // global
           R3 = _sCrv::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJqC_info" {
     block_cJqC_info:
         const _cJqC;
         const 1;
         const 12884901918;
         const SCNU_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.070415021 UTC

[section ""data" . GHC.Show.$fShowBool_$cshowList_closure" {
     GHC.Show.$fShowBool_$cshowList_closure:
         const GHC.Show.$fShowBool_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShowBool_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cJr8: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowBool1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowBool_$cshowList_info" {
     GHC.Show.$fShowBool_$cshowList_info:
         const GHC.Show.$fShowBool_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SCNU_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.07361767 UTC

[section ""data" . GHC.Show.$fShowBool_closure" {
     GHC.Show.$fShowBool_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowBool_$cshowsPrec_closure+3;
         const GHC.Show.$fShowBool_$cshow_closure+1;
         const GHC.Show.$fShowBool_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.075396885 UTC

[section ""cstring" . GHC.Show.$fShow()3_bytes" {
     GHC.Show.$fShow()3_bytes:
         I8[] [40,41]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.078102906 UTC

[section ""data" . GHC.Show.$fShow()2_closure" {
     GHC.Show.$fShow()2_closure:
         const GHC.Show.$fShow()2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShow()2_entry() //  [R1]
         { []
         }
     {offset
       cJrn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJro; else goto cJrp;
       cJro: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJrp: // global
           (_cJrk::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJrk::I64 == 0) goto cJrm; else goto cJrl;
       cJrm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJrl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJrk::I64;
           R2 = GHC.Show.$fShow()3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow()2_info" {
     GHC.Show.$fShow()2_info:
         const GHC.Show.$fShow()2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.082579227 UTC

[section ""data" . GHC.Show.$fShow()_$cshowsPrec_closure" {
     GHC.Show.$fShow()_$cshowsPrec_closure:
         const GHC.Show.$fShow()_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow()_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cJrE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJrF; else goto cJrG;
       cJrF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow()_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cJrG: // global
           I64[Sp - 16] = block_cJrB_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uJrK; else goto cJrC;
       uJrK: // global
           call _cJrB() args: 0, res: 0, upd: 0;
       cJrC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow()_$cshowsPrec_info" {
     GHC.Show.$fShow()_$cshowsPrec_info:
         const GHC.Show.$fShow()_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SCNU_srt+1008;
 },
 _cJrB() //  []
         { []
         }
     {offset
       cJrB: // global
           R3 = P64[Sp + 8];
           R2 = GHC.Show.$fShow()2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJrB_info" {
     block_cJrB_info:
         const _cJrB;
         const 1;
         const 4294967326;
         const SCNU_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.088507028 UTC

[section ""data" . GHC.Show.$fShow()_$cshow_closure" {
     GHC.Show.$fShow()_$cshow_closure:
         const GHC.Show.$fShow()_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow()_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cJs1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJs2; else goto cJs3;
       cJs2: // global
           R2 = R2;
           R1 = GHC.Show.$fShow()_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJs3: // global
           I64[Sp - 8] = block_cJrY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJs7; else goto cJrZ;
       uJs7: // global
           call _cJrY() args: 0, res: 0, upd: 0;
       cJrZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow()_$cshow_info" {
     GHC.Show.$fShow()_$cshow_info:
         const GHC.Show.$fShow()_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SCNU_srt+1008;
 },
 _cJrY() //  []
         { []
         }
     {offset
       cJrY: // global
           R1 = GHC.Show.$fShow()2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJrY_info" {
     block_cJrY_info:
         const _cJrY;
         const 0;
         const 4294967326;
         const SCNU_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.094250249 UTC

[section ""data" . GHC.Show.$fShow()1_closure" {
     GHC.Show.$fShow()1_closure:
         const GHC.Show.$fShow()1_info;
         const 0;
 },
 GHC.Show.$fShow()1_entry() //  [R2, R3]
         { []
         }
     {offset
       cJsp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJsq; else goto cJsr;
       cJsq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow()1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJsr: // global
           I64[Sp - 16] = block_cJsm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uJsv; else goto cJsn;
       uJsv: // global
           call _cJsm() args: 0, res: 0, upd: 0;
       cJsn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow()1_info" {
     GHC.Show.$fShow()1_info:
         const GHC.Show.$fShow()1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SCNU_srt+1008;
 },
 _cJsm() //  []
         { []
         }
     {offset
       cJsm: // global
           R3 = P64[Sp + 8];
           R2 = GHC.Show.$fShow()2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJsm_info" {
     block_cJsm_info:
         const _cJsm;
         const 1;
         const 4294967326;
         const SCNU_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.100134019 UTC

[section ""data" . GHC.Show.$fShow()_$cshowList_closure" {
     GHC.Show.$fShow()_$cshowList_closure:
         const GHC.Show.$fShow()_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow()_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cJsJ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShow()1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow()_$cshowList_info" {
     GHC.Show.$fShow()_$cshowList_info:
         const GHC.Show.$fShow()_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SCNU_srt+1032;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.103401839 UTC

[section ""data" . GHC.Show.$fShow()_closure" {
     GHC.Show.$fShow()_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShow()_$cshowsPrec_closure+3;
         const GHC.Show.$fShow()_$cshow_closure+1;
         const GHC.Show.$fShow()_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.10704531 UTC

[section ""data" . GHC.Show.$fShowTrName_$cshowsPrec_closure" {
     GHC.Show.$fShowTrName_$cshowsPrec_closure:
         const GHC.Show.$fShowTrName_$cshowsPrec_info;
 },
 sat_sCrO_entry() //  [R1]
         { []
         }
     {offset
       cJt4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJt5; else goto cJt6;
       cJt5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJt6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCrO_info" {
     sat_sCrO_info:
         const sat_sCrO_entry;
         const 4294967296;
         const 17;
 },
 GHC.Show.$fShowTrName_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cJtb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJtc; else goto cJtd;
       cJtc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowTrName_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJtd: // global
           I64[Sp - 8] = block_cJsV_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJtk; else goto cJsW;
       uJtk: // global
           call _cJsV(R1) args: 0, res: 0, upd: 0;
       cJsW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTrName_$cshowsPrec_info" {
     GHC.Show.$fShowTrName_$cshowsPrec_info:
         const GHC.Show.$fShowTrName_$cshowsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cJsV() //  [R1]
         { []
         }
     {offset
       cJsV: // global
           if (R1 & 7 == 1) goto cJt8; else goto cJt9;
       cJt8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJtg; else goto cJtf;
       cJtg: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cJtf: // global
           _sCrN::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sCrO_info;
           I64[Hp] = _sCrN::I64;
           R2 = Hp - 16;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cJt9: // global
           R2 = P64[R1 + 6];
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJsV_info" {
     block_cJsV_info:
         const _cJsV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.114988302 UTC

[section ""data" . GHC.Show.$fShowTrName_$cshow_closure" {
     GHC.Show.$fShowTrName_$cshow_closure:
         const GHC.Show.$fShowTrName_$cshow_info;
 },
 GHC.Show.$fShowTrName_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cJtL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJtM; else goto cJtN;
       cJtM: // global
           R2 = R2;
           R1 = GHC.Show.$fShowTrName_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJtN: // global
           I64[Sp - 8] = block_cJtE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJtU; else goto cJtF;
       uJtU: // global
           call _cJtE(R1) args: 0, res: 0, upd: 0;
       cJtF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTrName_$cshow_info" {
     GHC.Show.$fShowTrName_$cshow_info:
         const GHC.Show.$fShowTrName_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cJtE() //  [R1]
         { []
         }
     {offset
       cJtE: // global
           if (R1 & 7 == 1) goto cJtI; else goto cJtJ;
       cJtI: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 0, upd: 8;
       cJtJ: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJtE_info" {
     block_cJtE_info:
         const _cJtE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.121927003 UTC

[section ""data" . GHC.Show.$fShowTrName1_closure" {
     GHC.Show.$fShowTrName1_closure:
         const GHC.Show.$fShowTrName1_info;
 },
 sat_sCrX_entry() //  [R1]
         { []
         }
     {offset
       cJul: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJum; else goto cJun;
       cJum: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJun: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCrX_info" {
     sat_sCrX_info:
         const sat_sCrX_entry;
         const 4294967296;
         const 17;
 },
 GHC.Show.$fShowTrName1_entry() //  [R2]
         { []
         }
     {offset
       cJus: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJut; else goto cJuu;
       cJut: // global
           R2 = R2;
           R1 = GHC.Show.$fShowTrName1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJuu: // global
           I64[Sp - 8] = block_cJuc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJuB; else goto cJud;
       uJuB: // global
           call _cJuc(R1) args: 0, res: 0, upd: 0;
       cJud: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTrName1_info" {
     GHC.Show.$fShowTrName1_info:
         const GHC.Show.$fShowTrName1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cJuc() //  [R1]
         { []
         }
     {offset
       cJuc: // global
           if (R1 & 7 == 1) goto cJup; else goto cJuq;
       cJup: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJux; else goto cJuw;
       cJux: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cJuw: // global
           _sCrW::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sCrX_info;
           I64[Hp] = _sCrW::I64;
           R2 = Hp - 16;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cJuq: // global
           R2 = P64[R1 + 6];
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJuc_info" {
     block_cJuc_info:
         const _cJuc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.129959418 UTC

[section ""data" . GHC.Show.$fShowTrName_$cshowList_closure" {
     GHC.Show.$fShowTrName_$cshowList_closure:
         const GHC.Show.$fShowTrName_$cshowList_info;
 },
 GHC.Show.$fShowTrName_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cJuV: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowTrName1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTrName_$cshowList_info" {
     GHC.Show.$fShowTrName_$cshowList_info:
         const GHC.Show.$fShowTrName_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.133151124 UTC

[section ""data" . GHC.Show.$fShowTrName_closure" {
     GHC.Show.$fShowTrName_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowTrName_$cshowsPrec_closure+2;
         const GHC.Show.$fShowTrName_$cshow_closure+1;
         const GHC.Show.$fShowTrName_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.134866034 UTC

[section ""data" . GHC.Show.$fShowModule2_closure" {
     GHC.Show.$fShowModule2_closure:
         const GHC.Types.C#_con_info;
         const 58;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.140788658 UTC

[section ""data" . GHC.Show.$w$cshowsPrec6_closure" {
     GHC.Show.$w$cshowsPrec6_closure:
         const GHC.Show.$w$cshowsPrec6_info;
 },
 sat_sCs6_entry() //  [R1]
         { []
         }
     {offset
       cJvl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJvm; else goto cJvn;
       cJvm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJvn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCs6_info" {
     sat_sCs6_info:
         const sat_sCs6_entry;
         const 4294967296;
         const 17;
 },
 f12_sCs3_entry() //  [R1]
         { []
         }
     {offset
       cJvs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cJvt; else goto cJvu;
       cJvt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJvu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cJvc_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uJvB; else goto cJvd;
       uJvB: // global
           call _cJvc(R1) args: 0, res: 0, upd: 0;
       cJvd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . f12_sCs3_info" {
     f12_sCs3_info:
         const f12_sCs3_entry;
         const 1;
         const 16;
 },
 _cJvc() //  [R1]
         { []
         }
     {offset
       cJvc: // global
           if (R1 & 7 == 1) goto cJvp; else goto cJvq;
       cJvp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJvx; else goto cJvw;
       cJvx: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cJvw: // global
           _sCs5::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sCs6_info;
           I64[Hp] = _sCs5::I64;
           R2 = Hp - 16;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
       cJvq: // global
           R2 = P64[R1 + 6];
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cJvc_info" {
     block_cJvc_info:
         const _cJvc;
         const 0;
         const 30;
 },
 sat_sCsb_entry() //  [R1]
         { []
         }
     {offset
       cJvP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJvQ; else goto cJvR;
       cJvQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJvR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCsb_info" {
     sat_sCsb_info:
         const sat_sCsb_entry;
         const 4294967296;
         const 17;
 },
 g_sCs8_entry() //  [R1]
         { []
         }
     {offset
       cJvW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cJvX; else goto cJvY;
       cJvX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJvY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cJvG_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uJw5; else goto cJvH;
       uJw5: // global
           call _cJvG(R1) args: 0, res: 0, upd: 0;
       cJvH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . g_sCs8_info" {
     g_sCs8_info:
         const g_sCs8_entry;
         const 1;
         const 16;
 },
 _cJvG() //  [R1]
         { []
         }
     {offset
       cJvG: // global
           if (R1 & 7 == 1) goto cJvT; else goto cJvU;
       cJvT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJw1; else goto cJw0;
       cJw1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cJw0: // global
           _sCsa::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sCsb_info;
           I64[Hp] = _sCsa::I64;
           R2 = Hp - 16;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
       cJvU: // global
           R2 = P64[R1 + 6];
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cJvG_info" {
     block_cJvG_info:
         const _cJvG;
         const 0;
         const 30;
 },
 sat_sCsg_entry() //  [R1, R2]
         { []
         }
     {offset
       cJwd: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cJwh; else goto cJwg;
       cJwh: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJwg: // global
           _sCs3::P64 = P64[R1 + 7];
           _sCs8::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sCs8::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShowModule2_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sCs3::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCsg_info" {
     sat_sCsg_info:
         const sat_sCsg_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 GHC.Show.$w$cshowsPrec6_entry() //  [R2, R3]
         { []
         }
     {offset
       cJwi: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cJwm; else goto cJwl;
       cJwm: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$w$cshowsPrec6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJwl: // global
           I64[Hp - 64] = f12_sCs3_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = g_sCs8_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sCsg_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec6_info" {
     GHC.Show.$w$cshowsPrec6_info:
         const GHC.Show.$w$cshowsPrec6_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.158321659 UTC

[section ""data" . GHC.Show.$fShowModule_$cshowsPrec_closure" {
     GHC.Show.$fShowModule_$cshowsPrec_closure:
         const GHC.Show.$fShowModule_$cshowsPrec_info;
 },
 GHC.Show.$fShowModule_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cJx7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJx8; else goto cJx9;
       cJx8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowModule_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJx9: // global
           I64[Sp - 8] = block_cJx4_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJxd; else goto cJx5;
       uJxd: // global
           call _cJx4(R1) args: 0, res: 0, upd: 0;
       cJx5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowModule_$cshowsPrec_info" {
     GHC.Show.$fShowModule_$cshowsPrec_info:
         const GHC.Show.$fShowModule_$cshowsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cJx4() //  [R1]
         { []
         }
     {offset
       cJx4: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec6_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJx4_info" {
     block_cJx4_info:
         const _cJx4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.163855053 UTC

[section ""data" . GHC.Show.$fShowModule_$cshow_closure" {
     GHC.Show.$fShowModule_$cshow_closure:
         const GHC.Show.$fShowModule_$cshow_info;
 },
 GHC.Show.$fShowModule_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cJxu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJxv; else goto cJxw;
       cJxv: // global
           R2 = R2;
           R1 = GHC.Show.$fShowModule_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJxw: // global
           I64[Sp - 8] = block_cJxr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJxA; else goto cJxs;
       uJxA: // global
           call _cJxr(R1) args: 0, res: 0, upd: 0;
       cJxs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowModule_$cshow_info" {
     GHC.Show.$fShowModule_$cshow_info:
         const GHC.Show.$fShowModule_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cJxr() //  [R1]
         { []
         }
     {offset
       cJxr: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call GHC.Show.$w$cshowsPrec6_entry(R3,
                                              R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJxr_info" {
     block_cJxr_info:
         const _cJxr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.170035887 UTC

[section ""data" . GHC.Show.$fShowModule1_closure" {
     GHC.Show.$fShowModule1_closure:
         const GHC.Show.$fShowModule1_info;
 },
 GHC.Show.$fShowModule1_entry() //  [R2]
         { []
         }
     {offset
       cJxR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJxS; else goto cJxT;
       cJxS: // global
           R2 = R2;
           R1 = GHC.Show.$fShowModule1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJxT: // global
           I64[Sp - 8] = block_cJxO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJxX; else goto cJxP;
       uJxX: // global
           call _cJxO(R1) args: 0, res: 0, upd: 0;
       cJxP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowModule1_info" {
     GHC.Show.$fShowModule1_info:
         const GHC.Show.$fShowModule1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cJxO() //  [R1]
         { []
         }
     {offset
       cJxO: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec6_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJxO_info" {
     block_cJxO_info:
         const _cJxO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.175873789 UTC

[section ""data" . GHC.Show.$fShowModule_$cshowList_closure" {
     GHC.Show.$fShowModule_$cshowList_closure:
         const GHC.Show.$fShowModule_$cshowList_info;
 },
 GHC.Show.$fShowModule_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cJyb: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowModule1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowModule_$cshowList_info" {
     GHC.Show.$fShowModule_$cshowList_info:
         const GHC.Show.$fShowModule_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.179074753 UTC

[section ""data" . GHC.Show.$fShowModule_closure" {
     GHC.Show.$fShowModule_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowModule_$cshowsPrec_closure+2;
         const GHC.Show.$fShowModule_$cshow_closure+1;
         const GHC.Show.$fShowModule_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.181727471 UTC

[section ""data" . GHC.Show.$fShowTyCon_$cshowsPrec_closure" {
     GHC.Show.$fShowTyCon_$cshowsPrec_closure:
         const GHC.Show.$fShowTyCon_$cshowsPrec_info;
 },
 GHC.Show.$fShowTyCon_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cJyq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJyr; else goto cJys;
       cJyr: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowTyCon_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJys: // global
           I64[Sp - 16] = block_cJyn_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uJyw; else goto cJyo;
       uJyw: // global
           call _cJyn(R1) args: 0, res: 0, upd: 0;
       cJyo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTyCon_$cshowsPrec_info" {
     GHC.Show.$fShowTyCon_$cshowsPrec_info:
         const GHC.Show.$fShowTyCon_$cshowsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cJyn() //  [R1]
         { []
         }
     {offset
       cJyn: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Show.$fShowTrName_$cshowsPrec_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJyn_info" {
     block_cJyn_info:
         const _cJyn;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.188116592 UTC

[section ""data" . GHC.Show.$fShowTyCon_$cshow_closure" {
     GHC.Show.$fShowTyCon_$cshow_closure:
         const GHC.Show.$fShowTyCon_$cshow_info;
 },
 GHC.Show.$fShowTyCon_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cJyN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJyO; else goto cJyP;
       cJyO: // global
           R2 = R2;
           R1 = GHC.Show.$fShowTyCon_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJyP: // global
           I64[Sp - 8] = block_cJyK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJz7; else goto cJyL;
       uJz7: // global
           call _cJyK(R1) args: 0, res: 0, upd: 0;
       cJyL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTyCon_$cshow_info" {
     GHC.Show.$fShowTyCon_$cshow_info:
         const GHC.Show.$fShowTyCon_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cJyK() //  [R1]
         { []
         }
     {offset
       cJyK: // global
           I64[Sp] = block_cJyS_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto uJz6; else goto cJyU;
       uJz6: // global
           call _cJyS(R1) args: 0, res: 0, upd: 0;
       cJyU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cJyK_info" {
     block_cJyK_info:
         const _cJyK;
         const 0;
         const 30;
 },
 _cJyS() //  [R1]
         { []
         }
     {offset
       cJyS: // global
           if (R1 & 7 == 1) goto cJz0; else goto cJz4;
       cJz0: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 0, upd: 8;
       cJz4: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJyS_info" {
     block_cJyS_info:
         const _cJyS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.195771395 UTC

[section ""data" . GHC.Show.$fShowTyCon1_closure" {
     GHC.Show.$fShowTyCon1_closure:
         const GHC.Show.$fShowTyCon1_info;
 },
 GHC.Show.$fShowTyCon1_entry() //  [R2]
         { []
         }
     {offset
       cJzw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJzx; else goto cJzy;
       cJzx: // global
           R2 = R2;
           R1 = GHC.Show.$fShowTyCon1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJzy: // global
           I64[Sp - 8] = block_cJzt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJzC; else goto cJzu;
       uJzC: // global
           call _cJzt(R1) args: 0, res: 0, upd: 0;
       cJzu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTyCon1_info" {
     GHC.Show.$fShowTyCon1_info:
         const GHC.Show.$fShowTyCon1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cJzt() //  [R1]
         { []
         }
     {offset
       cJzt: // global
           R2 = P64[R1 + 15];
           Sp = Sp + 8;
           call GHC.Show.$fShowTrName1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJzt_info" {
     block_cJzt_info:
         const _cJzt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.200723486 UTC

[section ""data" . GHC.Show.$fShowTyCon_$cshowList_closure" {
     GHC.Show.$fShowTyCon_$cshowList_closure:
         const GHC.Show.$fShowTyCon_$cshowList_info;
 },
 GHC.Show.$fShowTyCon_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cJzQ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowTyCon1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTyCon_$cshowList_info" {
     GHC.Show.$fShowTyCon_$cshowList_info:
         const GHC.Show.$fShowTyCon_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.204535915 UTC

[section ""data" . GHC.Show.$fShowTyCon_closure" {
     GHC.Show.$fShowTyCon_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowTyCon_$cshowsPrec_closure+2;
         const GHC.Show.$fShowTyCon_$cshow_closure+1;
         const GHC.Show.$fShowTyCon_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.206261649 UTC

[section ""data" . GHC.Show.showSpace1_closure" {
     GHC.Show.showSpace1_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.208553943 UTC

[section ""data" . GHC.Show.showSpace_closure" {
     GHC.Show.showSpace_closure:
         const GHC.Show.showSpace_info;
 },
 GHC.Show.showSpace_entry() //  [R2]
         { []
         }
     {offset
       cJA4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJA8; else goto cJA7;
       cJA8: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Show.showSpace_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJA7: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showSpace_info" {
     GHC.Show.showSpace_info:
         const GHC.Show.showSpace_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.214462786 UTC

[section ""data" . GHC.Show.protectEsc_closure" {
     GHC.Show.protectEsc_closure:
         const GHC.Show.protectEsc_info;
 },
 sat_sCt8_entry() //  [R1]
         { []
         }
     {offset
       cJAt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cJAu; else goto cJAv;
       cJAu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJAv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cJAm_info;
           _sCt1::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sCt1::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uJAO; else goto cJAn;
       uJAO: // global
           call _cJAm(R1) args: 0, res: 0, upd: 0;
       cJAn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCt8_info" {
     sat_sCt8_info:
         const sat_sCt8_entry;
         const 2;
         const 18;
 },
 _cJAm() //  [R1]
         { []
         }
     {offset
       cJAm: // global
           if (R1 & 7 == 1) goto cJAq; else goto cJAr;
       cJAq: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cJAr: // global
           I64[Sp] = block_cJAB_info;
           R2 = P64[R1 + 6];
           _sCt4::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sCt4::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cJAm_info" {
     block_cJAm_info:
         const _cJAm;
         const 1;
         const 30;
 },
 _cJAB() //  [R1]
         { []
         }
     {offset
       cJAB: // global
           _sCt4::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cJAI; else goto cJAM;
       cJAI: // global
           R1 = _sCt4::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cJAM: // global
           R3 = _sCt4::P64;
           R2 = GHC.Show.showLitChar4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cJAB_info" {
     block_cJAB_info:
         const _cJAB;
         const 1;
         const 30;
 },
 GHC.Show.protectEsc_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cJAP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cJAT; else goto cJAS;
       cJAT: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.protectEsc_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cJAS: // global
           I64[Hp - 24] = sat_sCt8_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = Hp - 24;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.protectEsc_info" {
     GHC.Show.protectEsc_info:
         const GHC.Show.protectEsc_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.223586269 UTC

[section ""cstring" . GHC.Show.$trModule4_bytes" {
     GHC.Show.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.225303871 UTC

[section ""data" . GHC.Show.$trModule3_closure" {
     GHC.Show.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Show.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.226972293 UTC

[section ""cstring" . GHC.Show.$trModule2_bytes" {
     GHC.Show.$trModule2_bytes:
         I8[] [71,72,67,46,83,104,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.228678462 UTC

[section ""data" . GHC.Show.$trModule1_closure" {
     GHC.Show.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Show.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.230870328 UTC

[section ""data" . GHC.Show.$trModule_closure" {
     GHC.Show.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Show.$trModule3_closure+1;
         const GHC.Show.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.232592756 UTC

[section ""data" . $krep_rC0q_closure" {
     $krep_rC0q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.23437223 UTC

[section ""data" . $krep1_rC0r_closure" {
     $krep1_rC0r_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.236024192 UTC

[section ""data" . $krep2_rC0s_closure" {
     $krep2_rC0s_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.238093667 UTC

[section ""data" . $krep3_rC0t_closure" {
     $krep3_rC0t_closure:
         const :_con_info;
         const $krep_rC0q_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.240159551 UTC

[section ""data" . $krep4_rC0u_closure" {
     $krep4_rC0u_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep3_rC0t_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.24187425 UTC

[section ""data" . $krep5_rC0v_closure" {
     $krep5_rC0v_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rC0u_closure+1;
         const $krep4_rC0u_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.243512827 UTC

[section ""data" . GHC.Show.$tcShow1_closure" {
     GHC.Show.$tcShow1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep2_rC0s_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.245199241 UTC

[section ""data" . $krep6_rC0w_closure" {
     $krep6_rC0w_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.246980824 UTC

[section ""data" . $krep7_rC0x_closure" {
     $krep7_rC0x_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rC0w_closure+2;
         const $krep5_rC0v_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.248962908 UTC

[section ""data" . $krep8_rC0y_closure" {
     $krep8_rC0y_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rC0r_closure+1;
         const $krep7_rC0x_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.250658453 UTC

[section ""data" . $krep9_rC0z_closure" {
     $krep9_rC0z_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rC0w_closure+2;
         const $krep4_rC0u_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.252263607 UTC

[section ""data" . $krep10_rC0A_closure" {
     $krep10_rC0A_closure:
         const :_con_info;
         const $krep6_rC0w_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.254656819 UTC

[section ""data" . $krep11_rC0B_closure" {
     $krep11_rC0B_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep10_rC0A_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.2567634 UTC

[section ""data" . $krep12_rC0C_closure" {
     $krep12_rC0C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_rC0B_closure+1;
         const $krep5_rC0v_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.258387698 UTC

[section ""cstring" . GHC.Show.$tcShow3_bytes" {
     GHC.Show.$tcShow3_bytes:
         I8[] [83,104,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.25998565 UTC

[section ""data" . GHC.Show.$tcShow2_closure" {
     GHC.Show.$tcShow2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Show.$tcShow3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.261722776 UTC

[section ""data" . GHC.Show.$tcShow_closure" {
     GHC.Show.$tcShow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Show.$trModule_closure+1;
         const GHC.Show.$tcShow2_closure+1;
         const GHC.Show.$tcShow1_closure+4;
         const 10437143935872046625;
         const 8934823934159178042;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.263480803 UTC

[section ""data" . $krep13_rC0D_closure" {
     $krep13_rC0D_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Show.$tcShow_closure+1;
         const $krep10_rC0A_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.265673832 UTC

[section ""data" . $krep14_rC0E_closure" {
     $krep14_rC0E_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_rC0C_closure+4;
         const $krep13_rC0D_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.267390656 UTC

[section ""data" . $krep15_rC0F_closure" {
     $krep15_rC0F_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_rC0z_closure+4;
         const $krep14_rC0E_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.26908272 UTC

[section ""data" . GHC.Show.$tc'C:Show1_closure" {
     GHC.Show.$tc'C:Show1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rC0y_closure+4;
         const $krep15_rC0F_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.270858991 UTC

[section ""cstring" . GHC.Show.$tc'C:Show3_bytes" {
     GHC.Show.$tc'C:Show3_bytes:
         I8[] [39,67,58,83,104,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.272564468 UTC

[section ""data" . GHC.Show.$tc'C:Show2_closure" {
     GHC.Show.$tc'C:Show2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Show.$tc'C:Show3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.274980641 UTC

[section ""data" . GHC.Show.$tc'C:Show_closure" {
     GHC.Show.$tc'C:Show_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Show.$trModule_closure+1;
         const GHC.Show.$tc'C:Show2_closure+1;
         const GHC.Show.$tc'C:Show1_closure+4;
         const 4474575220627516169;
         const 12023205831716615459;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.278089926 UTC

[section ""data" . GHC.Show.$fShowInt_$cshow_closure" {
     GHC.Show.$fShowInt_$cshow_closure:
         const GHC.Show.$fShowInt_$cshow_info;
 },
 GHC.Show.$fShowInt_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cJBQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJBW; else goto cJBX;
       cJBW: // global
           R2 = R2;
           R1 = GHC.Show.$fShowInt_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJBX: // global
           I64[Sp - 8] = block_cJBN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJC2; else goto cJBO;
       uJC2: // global
           call _cJBN(R1) args: 0, res: 0, upd: 0;
       cJBO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInt_$cshow_info" {
     GHC.Show.$fShowInt_$cshow_info:
         const GHC.Show.$fShowInt_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cJBN() //  [R1]
         { []
         }
     {offset
       cJBN: // global
           I64[Sp] = block_cJBT_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cJBN_info" {
     block_cJBN_info:
         const _cJBN;
         const 0;
         const 30;
 },
 _cJBT() //  [R1, R2]
         { []
         }
     {offset
       cJBT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJC1; else goto cJC0;
       cJC1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cJC0: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJBT_info" {
     block_cJBT_info:
         const _cJBT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.286203256 UTC

[section ""data" . GHC.Show.$fShowInt1_closure" {
     GHC.Show.$fShowInt1_closure:
         const GHC.Show.$fShowInt1_info;
 },
 GHC.Show.$fShowInt1_entry() //  [R2, R3]
         { []
         }
     {offset
       cJCn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJCt; else goto cJCu;
       cJCt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowInt1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJCu: // global
           I64[Sp - 16] = block_cJCk_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uJCz; else goto cJCl;
       uJCz: // global
           call _cJCk(R1) args: 0, res: 0, upd: 0;
       cJCl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInt1_info" {
     GHC.Show.$fShowInt1_info:
         const GHC.Show.$fShowInt1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cJCk() //  [R1]
         { []
         }
     {offset
       cJCk: // global
           _sCtg::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cJCq_info;
           R4 = _sCtg::P64;
           R3 = I64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cJCk_info" {
     block_cJCk_info:
         const _cJCk;
         const 1;
         const 30;
 },
 _cJCq() //  [R1, R2]
         { []
         }
     {offset
       cJCq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJCy; else goto cJCx;
       cJCy: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cJCx: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJCq_info" {
     block_cJCq_info:
         const _cJCq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.294019909 UTC

[section ""data" . GHC.Show.$fShowInt_$cshowList_closure" {
     GHC.Show.$fShowInt_$cshowList_closure:
         const GHC.Show.$fShowInt_$cshowList_info;
 },
 GHC.Show.$fShowInt_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cJCR: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowInt1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInt_$cshowList_info" {
     GHC.Show.$fShowInt_$cshowList_info:
         const GHC.Show.$fShowInt_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.297326232 UTC

[section ""data" . GHC.Show.$fShowInt_closure" {
     GHC.Show.$fShowInt_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.showSignedInt_closure+3;
         const GHC.Show.$fShowInt_$cshow_closure+1;
         const GHC.Show.$fShowInt_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.300032012 UTC

[section ""data" . lvl12_rC0G_closure" {
     lvl12_rC0G_closure:
         const lvl12_rC0G_info;
 },
 lvl12_rC0G_entry() //  [R2]
         { []
         }
     {offset
       cJD6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJD7; else goto cJD8;
       cJD7: // global
           R2 = R2;
           R1 = lvl12_rC0G_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJD8: // global
           I64[Sp - 8] = block_cJD3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJDg; else goto cJD4;
       uJDg: // global
           call _cJD3(R1) args: 0, res: 0, upd: 0;
       cJD4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl12_rC0G_info" {
     lvl12_rC0G_info:
         const lvl12_rC0G_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cJD3() //  [R1]
         { []
         }
     {offset
       cJD3: // global
           if (I64[R1 + 7] == 10) goto cJDf; else goto cJDe;
       cJDf: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cJDe: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJD3_info" {
     block_cJD3_info:
         const _cJD3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.306106522 UTC

[section ""cstring" . lvl13_rC0H_bytes" {
     lvl13_rC0H_bytes:
         I8[] [92,110,92]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.308466811 UTC

[section ""data" . lvl14_rC0I_closure" {
     lvl14_rC0I_closure:
         const lvl14_rC0I_info;
         const 0;
         const 0;
         const 0;
 },
 lvl14_rC0I_entry() //  [R1]
         { []
         }
     {offset
       cJDz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJDA; else goto cJDB;
       cJDA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJDB: // global
           (_cJDw::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJDw::I64 == 0) goto cJDy; else goto cJDx;
       cJDy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJDx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJDw::I64;
           R2 = lvl13_rC0H_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl14_rC0I_info" {
     lvl14_rC0I_info:
         const lvl14_rC0I_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.31254458 UTC

[section ""cstring" . lvl15_rC0J_bytes" {
     lvl15_rC0J_bytes:
         I8[] [92,110,34]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.315435816 UTC

[section ""data" . lvl16_rC0K_closure" {
     lvl16_rC0K_closure:
         const lvl16_rC0K_info;
         const 0;
         const 0;
         const 0;
 },
 lvl16_rC0K_entry() //  [R1]
         { []
         }
     {offset
       cJDQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJDR; else goto cJDS;
       cJDR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJDS: // global
           (_cJDN::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJDN::I64 == 0) goto cJDP; else goto cJDO;
       cJDP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJDO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJDN::I64;
           R2 = lvl15_rC0J_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl16_rC0K_info" {
     lvl16_rC0K_info:
         const lvl16_rC0K_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.319038571 UTC

[section ""cstring" . lvl17_rC0L_bytes" {
     lvl17_rC0L_bytes:
         I8[] [34]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.321804534 UTC

[section ""data" . lvl18_rC0M_closure" {
     lvl18_rC0M_closure:
         const lvl18_rC0M_info;
         const 0;
         const 0;
         const 0;
 },
 lvl18_rC0M_entry() //  [R1]
         { []
         }
     {offset
       cJE7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJE8; else goto cJE9;
       cJE8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJE9: // global
           (_cJE4::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJE4::I64 == 0) goto cJE6; else goto cJE5;
       cJE6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJE5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJE4::I64;
           R2 = lvl17_rC0L_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl18_rC0M_info" {
     lvl18_rC0M_info:
         const lvl18_rC0M_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.330290898 UTC

[section ""data" . GHC.Show.$wgo_closure" {
     GHC.Show.$wgo_closure:
         const GHC.Show.$wgo_info;
         const 0;
 },
 sat_sCty_entry() //  [R1]
         { []
         }
     {offset
       cJEw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJEx; else goto cJEy;
       cJEx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJEy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl18_rC0M_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCty_info" {
     sat_sCty_info:
         const sat_sCty_entry;
         const 1;
         const 12884901904;
         const SCNU_srt+1040;
 },
 sat_sCtG_entry() //  [R1]
         { []
         }
     {offset
       cJER: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJES; else goto cJET;
       cJES: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJET: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl18_rC0M_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCtG_info" {
     sat_sCtG_info:
         const sat_sCtG_entry;
         const 1;
         const 12884901904;
         const SCNU_srt+1040;
 },
 sat_sCtI_entry() //  [R1]
         { []
         }
     {offset
       cJEZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJF0; else goto cJF1;
       cJF0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJF1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl16_rC0K_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCtI_info" {
     sat_sCtI_info:
         const sat_sCtI_entry;
         const 1;
         const 12884901904;
         const SCNU_srt+1048;
 },
 sat_sCtR_entry() //  [R1]
         { []
         }
     {offset
       cJFb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cJFc; else goto cJFd;
       cJFc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJFd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cJF8_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Show.showLitChar13_closure+1;
           Sp = Sp - 24;
           call GHC.Show.$wgo_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCtR_info" {
     sat_sCtR_info:
         const sat_sCtR_entry;
         const 1;
         const 4294967312;
         const SCNU_srt+1064;
 },
 _cJF8() //  [R1, R2]
         { []
         }
     {offset
       cJF8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJFg; else goto cJFf;
       cJFg: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cJFf: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cJF8_info" {
     block_cJF8_info:
         const _cJF8;
         const 0;
         const 30;
 },
 sat_sCtM_entry() //  [R1]
         { []
         }
     {offset
       cJFl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJFm; else goto cJFn;
       cJFm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJFn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl14_rC0I_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCtM_info" {
     sat_sCtM_info:
         const sat_sCtM_entry;
         const 1;
         const 38654705680;
         const SCNU_srt+1048;
 },
 GHC.Show.$wgo_entry() //  [R2, R3]
         { []
         }
     {offset
       cJFs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cJFt; else goto cJFu;
       cJFt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$wgo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJFu: // global
           I64[Sp - 16] = block_cJEl_info;
           R3 = R3;
           _sCts::P64 = R2;
           R2 = lvl12_rC0G_closure+1;
           P64[Sp - 8] = _sCts::P64;
           Sp = Sp - 16;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$wgo_info" {
     GHC.Show.$wgo_info:
         const GHC.Show.$wgo_entry;
         const 0;
         const 133143986190;
         const 8589934607;
         const SCNU_srt+1040;
 },
 _cJEl() //  [R1, R2]
         { []
         }
     {offset
       cJEl: // global
           I64[Sp - 8] = block_cJEn_info;
           _sCtv::P64 = R1;
           R1 = R2;
           P64[Sp] = _sCtv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJFS; else goto cJEo;
       uJFS: // global
           call _cJEn(R1) args: 0, res: 0, upd: 0;
       cJEo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cJEl_info" {
     block_cJEl_info:
         const _cJEl;
         const 1;
         const 133143986206;
         const SCNU_srt+1040;
 },
 _cJEn() //  [R1]
         { []
         }
     {offset
       cJEn: // global
           if (R1 & 7 == 1) goto cJFp; else goto cJFq;
       cJFp: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cJFz; else goto cJFy;
       cJFz: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cJFy: // global
           I64[Hp - 40] = sat_sCty_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 40;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cJFq: // global
           I64[Sp - 8] = block_cJEB_info;
           _sCtA::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sCtA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJFT; else goto cJEC;
       uJFT: // global
           call _cJEB(R1) args: 0, res: 0, upd: 0;
       cJEC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cJEn_info" {
     block_cJEn_info:
         const _cJEn;
         const 2;
         const 133143986206;
         const SCNU_srt+1040;
 },
 _cJEB() //  [R1]
         { []
         }
     {offset
       cJEB: // global
           if (R1 & 7 == 1) goto cJFD; else goto cJFN;
       cJFD: // global
           _sCtA::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cJEG_info;
           R1 = _sCtA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uJFU; else goto cJEH;
       uJFU: // global
           call _cJEG(R1) args: 0, res: 0, upd: 0;
       cJEH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cJFN: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cJFQ; else goto cJFP;
       cJFQ: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cJFP: // global
           I64[Hp - 64] = sat_sCtR_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = sat_sCtM_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJEB_info" {
     block_cJEB_info:
         const _cJEB;
         const 3;
         const 133143986206;
         const SCNU_srt+1040;
 },
 _cJEG() //  [R1]
         { []
         }
     {offset
       cJEG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cJFG; else goto cJFF;
       cJFG: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cJFF: // global
           _sCts::P64 = P64[Sp + 16];
           _sCtv::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 10) goto cJFL; else goto cJFJ;
       cJFL: // global
           I64[Hp - 40] = sat_sCtI_info;
           P64[Hp - 24] = _sCtv::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sCts::P64;
           P64[Hp] = Hp - 40;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cJFJ: // global
           I64[Hp - 40] = sat_sCtG_info;
           P64[Hp - 24] = _sCtv::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sCts::P64;
           P64[Hp] = Hp - 40;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJEG_info" {
     block_cJEG_info:
         const _cJEG;
         const 2;
         const 30064771102;
         const SCNU_srt+1040;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.353564373 UTC

[section ""data" . GHC.Show.showMultiLineString_go_closure" {
     GHC.Show.showMultiLineString_go_closure:
         const GHC.Show.showMultiLineString_go_info;
         const 0;
 },
 GHC.Show.showMultiLineString_go_entry() //  [R2, R3]
         { []
         }
     {offset
       cJH0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJH1; else goto cJH2;
       cJH1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.showMultiLineString_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJH2: // global
           I64[Sp - 8] = block_cJGX_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Show.$wgo_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showMultiLineString_go_info" {
     GHC.Show.showMultiLineString_go_info:
         const GHC.Show.showMultiLineString_go_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SCNU_srt+1064;
 },
 _cJGX() //  [R1, R2]
         { []
         }
     {offset
       cJGX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJH5; else goto cJH4;
       cJH5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cJH4: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJGX_info" {
     block_cJGX_info:
         const _cJGX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.359874877 UTC

[section ""data" . GHC.Show.showMultiLineString_closure" {
     GHC.Show.showMultiLineString_closure:
         const GHC.Show.showMultiLineString_info;
         const 0;
 },
 GHC.Show.showMultiLineString_entry() //  [R2]
         { []
         }
     {offset
       cJHm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJHn; else goto cJHo;
       cJHn: // global
           R2 = R2;
           R1 = GHC.Show.showMultiLineString_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJHo: // global
           I64[Sp - 8] = block_cJHj_info;
           R3 = R2;
           R2 = GHC.Show.$fShow(,)3_closure+1;
           Sp = Sp - 8;
           call GHC.Show.$wgo_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showMultiLineString_info" {
     GHC.Show.showMultiLineString_info:
         const GHC.Show.showMultiLineString_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const SCNU_srt+1064;
 },
 _cJHj() //  [R1, R2]
         { []
         }
     {offset
       cJHj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJHr; else goto cJHq;
       cJHr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cJHq: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJHj_info" {
     block_cJHj_info:
         const _cJHj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.364935826 UTC

[section ""data" . GHC.Show.$fShowChar3_closure" {
     GHC.Show.$fShowChar3_closure:
         const GHC.Types.C#_con_info;
         const 39;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.367065915 UTC

[section ""cstring" . GHC.Show.$fShowChar2_bytes" {
     GHC.Show.$fShowChar2_bytes:
         I8[] [39,92,39,39]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.369841517 UTC

[section ""data" . GHC.Show.$fShowChar1_closure" {
     GHC.Show.$fShowChar1_closure:
         const GHC.Show.$fShowChar1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowChar1_entry() //  [R1]
         { []
         }
     {offset
       cJHJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJHK; else goto cJHL;
       cJHK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJHL: // global
           (_cJHG::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJHG::I64 == 0) goto cJHI; else goto cJHH;
       cJHI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJHH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJHG::I64;
           R2 = GHC.Show.$fShowChar2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowChar1_info" {
     GHC.Show.$fShowChar1_info:
         const GHC.Show.$fShowChar1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.375021687 UTC

[section ""data" . GHC.Show.$w$cshowsPrec3_closure" {
     GHC.Show.$w$cshowsPrec3_closure:
         const GHC.Show.$w$cshowsPrec3_info;
         const 0;
 },
 sat_sCu5_entry() //  [R1]
         { []
         }
     {offset
       cJI4: // global
           _sCu5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cJI5; else goto cJI6;
       cJI6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJI8; else goto cJI7;
       cJI8: // global
           HpAlloc = 24;
           goto cJI5;
       cJI5: // global
           R1 = _sCu5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJI7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCu5::P64;
           _sCu2::P64 = P64[_sCu5::P64 + 16];
           _sCu3::I64 = I64[_sCu5::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShowChar3_closure+1;
           P64[Hp] = _sCu2::P64;
           R3 = Hp - 14;
           R2 = _sCu3::I64;
           Sp = Sp - 16;
           call GHC.Show.$wshowLitChar_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCu5_info" {
     sat_sCu5_info:
         const sat_sCu5_entry;
         const 4294967297;
         const 4294967315;
         const SCNU_srt+1096;
 },
 GHC.Show.$w$cshowsPrec3_entry() //  [R2, R3]
         { []
         }
     {offset
       cJIc: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cJIg; else goto cJIf;
       cJIg: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$w$cshowsPrec3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJIf: // global
           if (R2 == 39) goto cJIb; else goto cJIa;
       cJIb: // global
           Hp = Hp - 56;
           R3 = R3;
           R2 = GHC.Show.$fShowChar1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJIa: // global
           I64[Hp - 48] = sat_sCu5_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShowChar3_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec3_info" {
     GHC.Show.$w$cshowsPrec3_info:
         const GHC.Show.$w$cshowsPrec3_entry;
         const 0;
         const 30064771086;
         const 8589934605;
         const SCNU_srt+1096;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.381861105 UTC

[section ""data" . GHC.Show.$fShowChar_$cshowsPrec_closure" {
     GHC.Show.$fShowChar_$cshowsPrec_closure:
         const GHC.Show.$fShowChar_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShowChar_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cJIz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJIA; else goto cJIB;
       cJIA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowChar_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cJIB: // global
           I64[Sp - 16] = block_cJIw_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uJIF; else goto cJIx;
       uJIF: // global
           call _cJIw(R1) args: 0, res: 0, upd: 0;
       cJIx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowChar_$cshowsPrec_info" {
     GHC.Show.$fShowChar_$cshowsPrec_info:
         const GHC.Show.$fShowChar_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SCNU_srt+1112;
 },
 _cJIw() //  [R1]
         { []
         }
     {offset
       cJIw: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec3_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJIw_info" {
     block_cJIw_info:
         const _cJIw;
         const 1;
         const 4294967326;
         const SCNU_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.387494631 UTC

[section ""data" . lvl19_rC0N_closure" {
     lvl19_rC0N_closure:
         const :_con_info;
         const GHC.Show.$fShowChar3_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.390762409 UTC

[section ""data" . GHC.Show.$fShowChar_$cshow_closure" {
     GHC.Show.$fShowChar_$cshow_closure:
         const GHC.Show.$fShowChar_$cshow_info;
         const 0;
 },
 sat_sCuf_entry() //  [R1]
         { []
         }
     {offset
       cJJ5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJJ6; else goto cJJ7;
       cJJ6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJJ7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl19_rC0N_closure+2;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$wshowLitChar_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCuf_info" {
     sat_sCuf_info:
         const sat_sCuf_entry;
         const 4294967296;
         const 4294967313;
         const SCNU_srt+1096;
 },
 GHC.Show.$fShowChar_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cJJ8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJJ9; else goto cJJa;
       cJJ9: // global
           R2 = R2;
           R1 = GHC.Show.$fShowChar_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJJa: // global
           I64[Sp - 8] = block_cJIU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJJi; else goto cJIV;
       uJJi: // global
           call _cJIU(R1) args: 0, res: 0, upd: 0;
       cJIV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowChar_$cshow_info" {
     GHC.Show.$fShowChar_$cshow_info:
         const GHC.Show.$fShowChar_$cshow_entry;
         const 0;
         const 81604378638;
         const 4294967301;
         const SCNU_srt+1096;
 },
 _cJIU() //  [R1]
         { []
         }
     {offset
       cJIU: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cJJd; else goto cJJc;
       cJJd: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cJJc: // global
           _sCue::I64 = I64[R1 + 7];
           if (_sCue::I64 != 39) goto cJJg; else goto cJJh;
       cJJg: // global
           I64[Hp - 40] = sat_sCuf_info;
           I64[Hp - 24] = _sCue::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShowChar3_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cJJh: // global
           Hp = Hp - 48;
           R1 = GHC.Show.$fShowChar1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJIU_info" {
     block_cJIU_info:
         const _cJIU;
         const 0;
         const 12884901918;
         const SCNU_srt+1096;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.398731645 UTC

[section ""data" . GHC.Show.$fShowChar_closure" {
     GHC.Show.$fShowChar_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowChar_$cshowsPrec_closure+3;
         const GHC.Show.$fShowChar_$cshow_closure+1;
         const GHC.Show.$fShow(,)_$cshowList1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.400905703 UTC

[section ""data" . GHC.Show.$fShow[]_$s$cshowList_closure" {
     GHC.Show.$fShow[]_$s$cshowList_closure:
         const GHC.Show.$fShow[]_$s$cshowList_info;
 },
 GHC.Show.$fShow[]_$s$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cJJE: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowInt_$cshowList_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow[]_$s$cshowList_info" {
     GHC.Show.$fShow[]_$s$cshowList_info:
         const GHC.Show.$fShow[]_$s$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.404545765 UTC

[section ""data" . GHC.Show.$fShow[]_$s$cshow_closure" {
     GHC.Show.$fShow[]_$s$cshow_closure:
         const GHC.Show.$fShow[]_$s$cshow_info;
 },
 GHC.Show.$fShow[]_$s$cshow_entry() //  [R2]
         { []
         }
     {offset
       cJJP: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = R2;
           R2 = GHC.Show.$fShowInt1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow[]_$s$cshow_info" {
     GHC.Show.$fShow[]_$s$cshow_info:
         const GHC.Show.$fShow[]_$s$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.408636462 UTC

[section ""data" . $s$fShow[]1_rC0O_closure" {
     $s$fShow[]1_rC0O_closure:
         const $s$fShow[]1_rC0O_info;
         const 0;
 },
 $s$fShow[]1_rC0O_entry() //  [R3, R4]
         { []
         }
     {offset
       cJK0: // global
           _B2::P64 = R3;
           R3 = R4;
           R2 = _B2::P64;
           call GHC.Show.$fShow[]_$s$cshowList1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $s$fShow[]1_rC0O_info" {
     $s$fShow[]1_rC0O_info:
         const $s$fShow[]1_rC0O_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SCNU_srt+1136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.412205599 UTC

[section ""data" . GHC.Show.$fShow[]_$s$cshow2_closure" {
     GHC.Show.$fShow[]_$s$cshow2_closure:
         const GHC.Show.$fShow[]_$s$cshow2_info;
         const 0;
 },
 GHC.Show.$fShow[]_$s$cshow2_entry() //  [R2]
         { []
         }
     {offset
       cJKb: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = R2;
           R2 = GHC.Show.$fShow(,)_$cshowList1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow[]_$s$cshow2_info" {
     GHC.Show.$fShow[]_$s$cshow2_info:
         const GHC.Show.$fShow[]_$s$cshow2_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SCNU_srt+1144;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.416703805 UTC

[section ""data" . GHC.Show.$fShow[]_$cshow_closure" {
     GHC.Show.$fShow[]_$cshow_closure:
         const GHC.Show.$fShow[]_$cshow_info;
 },
 GHC.Show.$fShow[]_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cJKm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cJKn; else goto cJKo;
       cJKn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow[]_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJKo: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 24;
           call GHC.Show.showList_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow[]_$cshow_info" {
     GHC.Show.$fShow[]_$cshow_info:
         const GHC.Show.$fShow[]_$cshow_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.420494125 UTC

[section ""data" . GHC.Show.$fShow[]_$s$cshowList2_closure" {
     GHC.Show.$fShow[]_$s$cshowList2_closure:
         const GHC.Show.$fShow[]_$s$cshowList2_info;
         const 0;
 },
 GHC.Show.$fShow[]_$s$cshowList2_entry() //  [R2, R3]
         { []
         }
     {offset
       cJKy: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShow[]_$s$cshowList1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow[]_$s$cshowList2_info" {
     GHC.Show.$fShow[]_$s$cshowList2_info:
         const GHC.Show.$fShow[]_$s$cshowList2_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SCNU_srt+1136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.424172098 UTC

[section ""data" . GHC.Show.$fShow[]_$s$fShow[]2_closure" {
     GHC.Show.$fShow[]_$s$fShow[]2_closure:
         const GHC.Show.C:Show_con_info;
         const $s$fShow[]1_rC0O_closure+3;
         const GHC.Show.$fShow[]_$s$cshow2_closure+1;
         const GHC.Show.$fShow[]_$s$cshowList2_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.427134385 UTC

[section ""data" . GHC.Show.$fShow[]_$cshowList_closure" {
     GHC.Show.$fShow[]_$cshowList_closure:
         const GHC.Show.$fShow[]_$cshowList_info;
 },
 sat_sCus_entry() //  [R1]
         { []
         }
     {offset
       cJKO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJKP; else goto cJKQ;
       cJKP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJKQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCus_info" {
     sat_sCus_info:
         const sat_sCus_entry;
         const 1;
         const 16;
 },
 GHC.Show.$fShow[]_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cJKR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJKV; else goto cJKU;
       cJKV: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow[]_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cJKU: // global
           I64[Hp - 16] = sat_sCus_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 16;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow[]_$cshowList_info" {
     GHC.Show.$fShow[]_$cshowList_info:
         const GHC.Show.$fShow[]_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.432474746 UTC

[section ""data" . $s$fShow[]2_rC0P_closure" {
     $s$fShow[]2_rC0P_closure:
         const $s$fShow[]2_rC0P_info;
 },
 $s$fShow[]2_rC0P_entry() //  [R3, R4]
         { []
         }
     {offset
       cJL8: // global
           _sCuu::P64 = R3;
           R3 = R4;
           R2 = _sCuu::P64;
           call GHC.Show.$fShowInt_$cshowList_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $s$fShow[]2_rC0P_info" {
     $s$fShow[]2_rC0P_info:
         const $s$fShow[]2_rC0P_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.436249838 UTC

[section ""data" . GHC.Show.$fShow[]_$s$fShow[]_closure" {
     GHC.Show.$fShow[]_$s$fShow[]_closure:
         const GHC.Show.C:Show_con_info;
         const $s$fShow[]2_rC0P_closure+3;
         const GHC.Show.$fShow[]_$s$cshow_closure+1;
         const GHC.Show.$fShow[]_$s$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.439803279 UTC

[section ""data" . GHC.Show.$fShow[]_closure" {
     GHC.Show.$fShow[]_closure:
         const GHC.Show.$fShow[]_info;
 },
 lvl45_sCux_entry() //  [R1]
         { []
         }
     {offset
       cJLo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJLp; else goto cJLq;
       cJLp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJLq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl45_sCux_info" {
     lvl45_sCux_info:
         const lvl45_sCux_entry;
         const 1;
         const 16;
 },
 sat_sCuB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cJLw: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Show.$fShow[]_$cshowList_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCuB_info" {
     sat_sCuB_info:
         const sat_sCuB_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sCuA_entry() //  [R1, R2]
         { []
         }
     {offset
       cJLE: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Show.$fShow[]_$cshow_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCuA_info" {
     sat_sCuA_info:
         const sat_sCuA_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sCuz_entry() //  [R1]
         { []
         }
     {offset
       cJLM: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCuz_info" {
     sat_sCuz_info:
         const sat_sCuz_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 GHC.Show.$fShow[]_entry() //  [R2]
         { []
         }
     {offset
       cJLQ: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cJLU; else goto cJLT;
       cJLU: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = GHC.Show.$fShow[]_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJLT: // global
           I64[Hp - 96] = lvl45_sCux_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sCuB_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sCuA_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sCuz_info;
           P64[Hp - 32] = Hp - 96;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow[]_info" {
     GHC.Show.$fShow[]_info:
         const GHC.Show.$fShow[]_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.449598651 UTC

[section ""cstring" . lvl20_rC0Q_bytes" {
     lvl20_rC0Q_bytes:
         I8[] [68,111,117,98,108,101,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.452335114 UTC

[section ""data" . lvl21_rC0R_closure" {
     lvl21_rC0R_closure:
         const lvl21_rC0R_info;
         const 0;
         const 0;
         const 0;
 },
 lvl21_rC0R_entry() //  [R1]
         { []
         }
     {offset
       cJMo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJMp; else goto cJMq;
       cJMp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJMq: // global
           (_cJMl::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJMl::I64 == 0) goto cJMn; else goto cJMm;
       cJMn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJMm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJMl::I64;
           R2 = lvl20_rC0Q_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl21_rC0R_info" {
     lvl21_rC0R_info:
         const lvl21_rC0R_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.455872217 UTC

[section ""cstring" . lvl22_rC0S_bytes" {
     lvl22_rC0S_bytes:
         I8[] [70,108,111,97,116,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.458349022 UTC

[section ""data" . lvl23_rC0T_closure" {
     lvl23_rC0T_closure:
         const lvl23_rC0T_info;
         const 0;
         const 0;
         const 0;
 },
 lvl23_rC0T_entry() //  [R1]
         { []
         }
     {offset
       cJMF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJMG; else goto cJMH;
       cJMG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJMH: // global
           (_cJMC::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJMC::I64 == 0) goto cJME; else goto cJMD;
       cJME: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJMD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJMC::I64;
           R2 = lvl22_rC0S_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl23_rC0T_info" {
     lvl23_rC0T_info:
         const lvl23_rC0T_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.462151699 UTC

[section ""cstring" . lvl24_rC0U_bytes" {
     lvl24_rC0U_bytes:
         I8[] [65,100,100,114,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.464337747 UTC

[section ""data" . lvl25_rC0V_closure" {
     lvl25_rC0V_closure:
         const lvl25_rC0V_info;
         const 0;
         const 0;
         const 0;
 },
 lvl25_rC0V_entry() //  [R1]
         { []
         }
     {offset
       cJMW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJMX; else goto cJMY;
       cJMX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJMY: // global
           (_cJMT::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJMT::I64 == 0) goto cJMV; else goto cJMU;
       cJMV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJMU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJMT::I64;
           R2 = lvl24_rC0U_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl25_rC0V_info" {
     lvl25_rC0V_info:
         const lvl25_rC0V_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.467749118 UTC

[section ""cstring" . lvl26_rC0W_bytes" {
     lvl26_rC0W_bytes:
         I8[] [87,111,114,100,54,52,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.47030143 UTC

[section ""data" . lvl27_rC0X_closure" {
     lvl27_rC0X_closure:
         const lvl27_rC0X_info;
         const 0;
         const 0;
         const 0;
 },
 lvl27_rC0X_entry() //  [R1]
         { []
         }
     {offset
       cJNd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJNe; else goto cJNf;
       cJNe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJNf: // global
           (_cJNa::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJNa::I64 == 0) goto cJNc; else goto cJNb;
       cJNc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJNb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJNa::I64;
           R2 = lvl26_rC0W_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_rC0X_info" {
     lvl27_rC0X_info:
         const lvl27_rC0X_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.474037164 UTC

[section ""cstring" . lvl28_rC0Y_bytes" {
     lvl28_rC0Y_bytes:
         I8[] [73,110,116,54,52,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.476219139 UTC

[section ""data" . lvl29_rC0Z_closure" {
     lvl29_rC0Z_closure:
         const lvl29_rC0Z_info;
         const 0;
         const 0;
         const 0;
 },
 lvl29_rC0Z_entry() //  [R1]
         { []
         }
     {offset
       cJNu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJNv; else goto cJNw;
       cJNv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJNw: // global
           (_cJNr::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJNr::I64 == 0) goto cJNt; else goto cJNs;
       cJNt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJNs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJNr::I64;
           R2 = lvl28_rC0Y_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl29_rC0Z_info" {
     lvl29_rC0Z_info:
         const lvl29_rC0Z_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.480130436 UTC

[section ""cstring" . lvl30_rC10_bytes" {
     lvl30_rC10_bytes:
         I8[] [87,111,114,100,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.482403901 UTC

[section ""data" . lvl31_rC11_closure" {
     lvl31_rC11_closure:
         const lvl31_rC11_info;
         const 0;
         const 0;
         const 0;
 },
 lvl31_rC11_entry() //  [R1]
         { []
         }
     {offset
       cJNL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJNM; else goto cJNN;
       cJNM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJNN: // global
           (_cJNI::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJNI::I64 == 0) goto cJNK; else goto cJNJ;
       cJNK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJNJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJNI::I64;
           R2 = lvl30_rC10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl31_rC11_info" {
     lvl31_rC11_info:
         const lvl31_rC11_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.485836022 UTC

[section ""cstring" . lvl32_rC12_bytes" {
     lvl32_rC12_bytes:
         I8[] [73,110,116,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.488127788 UTC

[section ""data" . lvl33_rC13_closure" {
     lvl33_rC13_closure:
         const lvl33_rC13_info;
         const 0;
         const 0;
         const 0;
 },
 lvl33_rC13_entry() //  [R1]
         { []
         }
     {offset
       cJO2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJO3; else goto cJO4;
       cJO3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJO4: // global
           (_cJNZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJNZ::I64 == 0) goto cJO1; else goto cJO0;
       cJO1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJO0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJNZ::I64;
           R2 = lvl32_rC12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_rC13_info" {
     lvl33_rC13_info:
         const lvl33_rC13_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.492247225 UTC

[section ""cstring" . lvl34_rC14_bytes" {
     lvl34_rC14_bytes:
         I8[] [85,110,108,105,102,116,101,100,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.494581343 UTC

[section ""data" . lvl35_rC15_closure" {
     lvl35_rC15_closure:
         const lvl35_rC15_info;
         const 0;
         const 0;
         const 0;
 },
 lvl35_rC15_entry() //  [R1]
         { []
         }
     {offset
       cJOj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJOk; else goto cJOl;
       cJOk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJOl: // global
           (_cJOg::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJOg::I64 == 0) goto cJOi; else goto cJOh;
       cJOi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJOh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJOg::I64;
           R2 = lvl34_rC14_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl35_rC15_info" {
     lvl35_rC15_info:
         const lvl35_rC15_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.498185596 UTC

[section ""cstring" . lvl36_rC16_bytes" {
     lvl36_rC16_bytes:
         I8[] [76,105,102,116,101,100,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.500757282 UTC

[section ""data" . lvl37_rC17_closure" {
     lvl37_rC17_closure:
         const lvl37_rC17_info;
         const 0;
         const 0;
         const 0;
 },
 lvl37_rC17_entry() //  [R1]
         { []
         }
     {offset
       cJOA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJOB; else goto cJOC;
       cJOB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJOC: // global
           (_cJOx::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJOx::I64 == 0) goto cJOz; else goto cJOy;
       cJOz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJOy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJOx::I64;
           R2 = lvl36_rC16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl37_rC17_info" {
     lvl37_rC17_info:
         const lvl37_rC17_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.504367908 UTC

[section ""cstring" . lvl38_rC18_bytes" {
     lvl38_rC18_bytes:
         I8[] [83,117,109,82,101,112,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.506056997 UTC

[section ""cstring" . lvl39_rC19_bytes" {
     lvl39_rC19_bytes:
         I8[] [84,117,112,108,101,82,101,112,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.508195879 UTC

[section ""cstring" . lvl40_rC1a_bytes" {
     lvl40_rC1a_bytes:
         I8[] [86,101,99,82,101,112,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.527347934 UTC

[section ""data" . GHC.Show.$fShowRuntimeRep_$cshowsPrec_closure" {
     GHC.Show.$fShowRuntimeRep_$cshowsPrec_closure:
         const GHC.Show.$fShowRuntimeRep_$cshowsPrec_info;
         const 0;
 },
 sat_sCuM_entry() //  [R1]
         { []
         }
     {offset
       cJPe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJPf; else goto cJPg;
       cJPf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJPg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$w$cshowsPrec10_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCuM_info" {
     sat_sCuM_info:
         const sat_sCuM_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1152;
 },
 section ""relreadonly" . uJUm_srtd" {
     uJUm_srtd:
         const SCNU_srt+864;
         const 37;
         const 68719476737;
 },
 sat_sCuO_entry() //  [R1]
         { []
         }
     {offset
       cJPi: // global
           _sCuO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cJPj; else goto cJPk;
       cJPk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cJPm; else goto cJPl;
       cJPm: // global
           HpAlloc = 56;
           goto cJPj;
       cJPj: // global
           R1 = _sCuO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJPl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCuO::P64;
           _sCuG::P64 = P64[_sCuO::P64 + 16];
           _sCuH::P64 = P64[_sCuO::P64 + 24];
           _sCuL::P64 = P64[_sCuO::P64 + 32];
           I64[Hp - 48] = sat_sCuM_info;
           P64[Hp - 32] = _sCuH::P64;
           P64[Hp - 24] = _sCuL::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sCuG::P64;
           Sp = Sp - 16;
           call GHC.Show.$w$cshowsPrec9_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCuO_info" {
     sat_sCuO_info:
         const sat_sCuO_entry;
         const 3;
         const 18446744069414584335;
         const uJUm_srtd;
 },
 section ""relreadonly" . uJUn_srtd" {
     uJUn_srtd:
         const SCNU_srt+864;
         const 37;
         const 68719476737;
 },
 p_sCuK_entry() //  [R1, R2]
         { []
         }
     {offset
       cJPn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cJPr; else goto cJPq;
       cJPr: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJPq: // global
           _sCuG::P64 = P64[R1 + 7];
           _sCuH::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sCuO_info;
           P64[Hp - 16] = _sCuG::P64;
           P64[Hp - 8] = _sCuH::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = lvl40_rC1a_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_sCuK_info" {
     p_sCuK_info:
         const p_sCuK_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const uJUn_srtd;
 },
 section ""relreadonly" . uJUo_srtd" {
     uJUo_srtd:
         const SCNU_srt+864;
         const 37;
         const 68719476737;
 },
 sat_sCuR_entry() //  [R1]
         { []
         }
     {offset
       cJPB: // global
           _sCuR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cJPC; else goto cJPD;
       cJPD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJPF; else goto cJPE;
       cJPF: // global
           HpAlloc = 24;
           goto cJPC;
       cJPC: // global
           R1 = _sCuR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJPE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCuR::P64;
           _sCuE::P64 = P64[_sCuR::P64 + 16];
           _sCuK::P64 = P64[_sCuR::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sCuE::P64;
           R2 = Hp - 14;
           R1 = _sCuK::P64;
           Sp = Sp - 16;
           call p_sCuK_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCuR_info" {
     sat_sCuR_info:
         const sat_sCuR_entry;
         const 2;
         const 18446744069414584338;
         const uJUo_srtd;
 },
 sat_sCv7_entry() //  [R1]
         { []
         }
     {offset
       cJQr: // global
           _sCv7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cJQs; else goto cJQt;
       cJQt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cJQv; else goto cJQu;
       cJQv: // global
           HpAlloc = 32;
           goto cJQs;
       cJQs: // global
           R1 = _sCv7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJQu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCv7::P64;
           _sCv1::P64 = P64[_sCv7::P64 + 16];
           _sCv4::P64 = P64[_sCv7::P64 + 24];
           _sCv5::P64 = P64[_sCv7::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sCv1::P64;
           P64[Hp] = _sCv5::P64;
           R4 = Hp - 24;
           R3 = _sCv4::P64;
           R2 = GHC.Show.$fShow(,)1_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCv7_info" {
     sat_sCv7_info:
         const sat_sCv7_entry;
         const 3;
         const 4294967311;
         const SCNU_srt+1160;
 },
 showl_sCv1_entry() //  [R1, R2]
         { []
         }
     {offset
       cJQA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cJQB; else goto cJQC;
       cJQB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJQC: // global
           I64[Sp - 24] = block_cJQg_info;
           _sCv1::P64 = R1;
           _sCv0::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sCv0::P64;
           P64[Sp - 8] = _sCv1::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uJQJ; else goto cJQh;
       uJQJ: // global
           call _cJQg(R1) args: 0, res: 0, upd: 0;
       cJQh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . showl_sCv1_info" {
     showl_sCv1_info:
         const showl_sCv1_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SCNU_srt+1160;
 },
 _cJQg() //  [R1]
         { []
         }
     {offset
       cJQg: // global
           if (R1 & 7 == 1) goto cJQx; else goto cJQy;
       cJQx: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cJQy: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cJQI; else goto cJQH;
       cJQI: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cJQH: // global
           _sCv4::P64 = P64[R1 + 6];
           _sCv5::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sCv7_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _sCv4::P64;
           P64[Hp - 24] = _sCv5::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJQg_info" {
     block_cJQg_info:
         const _cJQg;
         const 2;
         const 4294967326;
         const SCNU_srt+1160;
 },
 sat_sCv8_entry() //  [R1]
         { []
         }
     {offset
       cJQK: // global
           _sCv8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cJQL; else goto cJQM;
       cJQM: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cJQO; else goto cJQN;
       cJQO: // global
           HpAlloc = 40;
           goto cJQL;
       cJQL: // global
           R1 = _sCv8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJQN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCv8::P64;
           _sCuW::P64 = P64[_sCv8::P64 + 16];
           _sCuZ::P64 = P64[_sCv8::P64 + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Show.showList__2_closure+1;
           P64[Hp - 16] = _sCuW::P64;
           I64[Hp - 8] = showl_sCv1_info;
           P64[Hp] = Hp - 30;
           R2 = _sCuZ::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call showl_sCv1_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCv8_info" {
     sat_sCv8_info:
         const sat_sCv8_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1160;
 },
 sat_sCv9_entry() //  [R1]
         { []
         }
     {offset
       cJQP: // global
           _sCv9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cJQQ; else goto cJQR;
       cJQR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cJQT; else goto cJQS;
       cJQT: // global
           HpAlloc = 32;
           goto cJQQ;
       cJQQ: // global
           R1 = _sCv9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJQS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCv9::P64;
           _sCuW::P64 = P64[_sCv9::P64 + 16];
           _sCuY::P64 = P64[_sCv9::P64 + 24];
           _sCuZ::P64 = P64[_sCv9::P64 + 32];
           I64[Hp - 24] = sat_sCv8_info;
           P64[Hp - 8] = _sCuW::P64;
           P64[Hp] = _sCuZ::P64;
           R4 = Hp - 24;
           R3 = _sCuY::P64;
           R2 = GHC.Show.$fShow(,)1_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCv9_info" {
     sat_sCv9_info:
         const sat_sCv9_entry;
         const 3;
         const 4294967311;
         const SCNU_srt+1160;
 },
 sat_sCva_entry() //  [R1]
         { []
         }
     {offset
       cJQY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cJQZ; else goto cJR0;
       cJQZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJR0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cJPW_info;
           _sCuW::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sCuW::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uJR7; else goto cJPX;
       uJR7: // global
           call _cJPW(R1) args: 0, res: 0, upd: 0;
       cJPX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCva_info" {
     sat_sCva_info:
         const sat_sCva_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1160;
 },
 _cJPW() //  [R1]
         { []
         }
     {offset
       cJPW: // global
           _sCuW::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cJQV; else goto cJQW;
       cJQV: // global
           R3 = _sCuW::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       cJQW: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cJR6; else goto cJR5;
       cJR6: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cJR5: // global
           _sCuY::P64 = P64[R1 + 6];
           _sCuZ::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sCv9_info;
           P64[Hp - 40] = _sCuW::P64;
           P64[Hp - 32] = _sCuY::P64;
           P64[Hp - 24] = _sCuZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cJPW_info" {
     block_cJPW_info:
         const _cJPW;
         const 1;
         const 4294967326;
         const SCNU_srt+1160;
 },
 p_sCuV_entry() //  [R1, R2]
         { []
         }
     {offset
       cJR8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cJRc; else goto cJRb;
       cJRc: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJRb: // global
           _sCuS::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sCva_info;
           P64[Hp - 8] = _sCuS::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = lvl39_rC19_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_sCuV_info" {
     p_sCuV_info:
         const p_sCuV_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SCNU_srt+1160;
 },
 sat_sCvd_entry() //  [R1]
         { []
         }
     {offset
       cJRm: // global
           _sCvd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cJRn; else goto cJRo;
       cJRo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJRq; else goto cJRp;
       cJRq: // global
           HpAlloc = 24;
           goto cJRn;
       cJRn: // global
           R1 = _sCvd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJRp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCvd::P64;
           _sCuE::P64 = P64[_sCvd::P64 + 16];
           _sCuV::P64 = P64[_sCvd::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sCuE::P64;
           R2 = Hp - 14;
           R1 = _sCuV::P64;
           Sp = Sp - 16;
           call p_sCuV_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCvd_info" {
     sat_sCvd_info:
         const sat_sCvd_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1160;
 },
 sat_sCvt_entry() //  [R1]
         { []
         }
     {offset
       cJSc: // global
           _sCvt::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cJSd; else goto cJSe;
       cJSe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cJSg; else goto cJSf;
       cJSg: // global
           HpAlloc = 32;
           goto cJSd;
       cJSd: // global
           R1 = _sCvt::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJSf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCvt::P64;
           _sCvn::P64 = P64[_sCvt::P64 + 16];
           _sCvq::P64 = P64[_sCvt::P64 + 24];
           _sCvr::P64 = P64[_sCvt::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sCvn::P64;
           P64[Hp] = _sCvr::P64;
           R4 = Hp - 24;
           R3 = _sCvq::P64;
           R2 = GHC.Show.$fShow(,)1_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCvt_info" {
     sat_sCvt_info:
         const sat_sCvt_entry;
         const 3;
         const 4294967311;
         const SCNU_srt+1160;
 },
 showl_sCvn_entry() //  [R1, R2]
         { []
         }
     {offset
       cJSl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cJSm; else goto cJSn;
       cJSm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJSn: // global
           I64[Sp - 24] = block_cJS1_info;
           _sCvn::P64 = R1;
           _sCvm::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sCvm::P64;
           P64[Sp - 8] = _sCvn::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uJSu; else goto cJS2;
       uJSu: // global
           call _cJS1(R1) args: 0, res: 0, upd: 0;
       cJS2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . showl_sCvn_info" {
     showl_sCvn_info:
         const showl_sCvn_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SCNU_srt+1160;
 },
 _cJS1() //  [R1]
         { []
         }
     {offset
       cJS1: // global
           if (R1 & 7 == 1) goto cJSi; else goto cJSj;
       cJSi: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cJSj: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cJSt; else goto cJSs;
       cJSt: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cJSs: // global
           _sCvq::P64 = P64[R1 + 6];
           _sCvr::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sCvt_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _sCvq::P64;
           P64[Hp - 24] = _sCvr::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJS1_info" {
     block_cJS1_info:
         const _cJS1;
         const 2;
         const 4294967326;
         const SCNU_srt+1160;
 },
 sat_sCvu_entry() //  [R1]
         { []
         }
     {offset
       cJSv: // global
           _sCvu::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cJSw; else goto cJSx;
       cJSx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cJSz; else goto cJSy;
       cJSz: // global
           HpAlloc = 40;
           goto cJSw;
       cJSw: // global
           R1 = _sCvu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJSy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCvu::P64;
           _sCvi::P64 = P64[_sCvu::P64 + 16];
           _sCvl::P64 = P64[_sCvu::P64 + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Show.showList__2_closure+1;
           P64[Hp - 16] = _sCvi::P64;
           I64[Hp - 8] = showl_sCvn_info;
           P64[Hp] = Hp - 30;
           R2 = _sCvl::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call showl_sCvn_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCvu_info" {
     sat_sCvu_info:
         const sat_sCvu_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1160;
 },
 sat_sCvv_entry() //  [R1]
         { []
         }
     {offset
       cJSA: // global
           _sCvv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cJSB; else goto cJSC;
       cJSC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cJSE; else goto cJSD;
       cJSE: // global
           HpAlloc = 32;
           goto cJSB;
       cJSB: // global
           R1 = _sCvv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJSD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCvv::P64;
           _sCvi::P64 = P64[_sCvv::P64 + 16];
           _sCvk::P64 = P64[_sCvv::P64 + 24];
           _sCvl::P64 = P64[_sCvv::P64 + 32];
           I64[Hp - 24] = sat_sCvu_info;
           P64[Hp - 8] = _sCvi::P64;
           P64[Hp] = _sCvl::P64;
           R4 = Hp - 24;
           R3 = _sCvk::P64;
           R2 = GHC.Show.$fShow(,)1_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCvv_info" {
     sat_sCvv_info:
         const sat_sCvv_entry;
         const 3;
         const 4294967311;
         const SCNU_srt+1160;
 },
 sat_sCvw_entry() //  [R1]
         { []
         }
     {offset
       cJSJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cJSK; else goto cJSL;
       cJSK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJSL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cJRH_info;
           _sCvi::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sCvi::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uJSS; else goto cJRI;
       uJSS: // global
           call _cJRH(R1) args: 0, res: 0, upd: 0;
       cJRI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCvw_info" {
     sat_sCvw_info:
         const sat_sCvw_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1160;
 },
 _cJRH() //  [R1]
         { []
         }
     {offset
       cJRH: // global
           _sCvi::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cJSG; else goto cJSH;
       cJSG: // global
           R3 = _sCvi::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       cJSH: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cJSR; else goto cJSQ;
       cJSR: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cJSQ: // global
           _sCvk::P64 = P64[R1 + 6];
           _sCvl::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sCvv_info;
           P64[Hp - 40] = _sCvi::P64;
           P64[Hp - 32] = _sCvk::P64;
           P64[Hp - 24] = _sCvl::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cJRH_info" {
     block_cJRH_info:
         const _cJRH;
         const 1;
         const 4294967326;
         const SCNU_srt+1160;
 },
 p_sCvh_entry() //  [R1, R2]
         { []
         }
     {offset
       cJST: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cJSX; else goto cJSW;
       cJSX: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJSW: // global
           _sCve::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sCvw_info;
           P64[Hp - 8] = _sCve::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = lvl38_rC18_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_sCvh_info" {
     p_sCvh_info:
         const p_sCvh_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SCNU_srt+1160;
 },
 sat_sCvz_entry() //  [R1]
         { []
         }
     {offset
       cJT7: // global
           _sCvz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cJT8; else goto cJT9;
       cJT9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJTb; else goto cJTa;
       cJTb: // global
           HpAlloc = 24;
           goto cJT8;
       cJT8: // global
           R1 = _sCvz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJTa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCvz::P64;
           _sCuE::P64 = P64[_sCvz::P64 + 16];
           _sCvh::P64 = P64[_sCvz::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sCuE::P64;
           R2 = Hp - 14;
           R1 = _sCvh::P64;
           Sp = Sp - 16;
           call p_sCvh_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCvz_info" {
     sat_sCvz_info:
         const sat_sCvz_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1160;
 },
 section ""relreadonly" . uJUp_srtd" {
     uJUp_srtd:
         const SCNU_srt+864;
         const 47;
         const 140668768878593;
 },
 GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cJTq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cJTr; else goto cJTs;
       cJTr: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowRuntimeRep_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cJTs: // global
           I64[Sp - 24] = block_cJOR_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uJUl; else goto cJOS;
       uJUl: // global
           call _cJOR(R1) args: 0, res: 0, upd: 0;
       cJOS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowRuntimeRep_$cshowsPrec_info" {
     GHC.Show.$fShowRuntimeRep_$cshowsPrec_info:
         const GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const uJUp_srtd;
 },
 section ""relreadonly" . uJUq_srtd" {
     uJUq_srtd:
         const SCNU_srt+864;
         const 47;
         const 140668768878593;
 },
 _cJOR() //  [R1]
         { []
         }
     {offset
       cJOR: // global
           _sCuC::P64 = P64[Sp + 8];
           _sCuE::P64 = P64[Sp + 16];
           switch [0 .. 11] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cJTd;
               case 1 : goto cJTe;
               case 2 : goto cJTf;
               case 3 : goto cJTg;
               case 4 : goto cJTh;
               case 5 : goto cJTi;
               case 6 : goto cJTj;
               case 7 : goto cJTk;
               case 8 : goto cJTl;
               case 9 : goto cJTm;
               case 10 : goto cJTn;
               case 11 : goto cJTo;
           }
       cJTo: // global
           R3 = _sCuE::P64;
           R2 = lvl21_rC0R_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJTn: // global
           R3 = _sCuE::P64;
           R2 = lvl23_rC0T_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJTm: // global
           R3 = _sCuE::P64;
           R2 = lvl25_rC0V_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJTl: // global
           R3 = _sCuE::P64;
           R2 = lvl27_rC0X_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJTk: // global
           R3 = _sCuE::P64;
           R2 = lvl29_rC0Z_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJTj: // global
           R3 = _sCuE::P64;
           R2 = lvl31_rC11_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJTi: // global
           R3 = _sCuE::P64;
           R2 = lvl33_rC13_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJTh: // global
           R3 = _sCuE::P64;
           R2 = lvl35_rC15_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJTg: // global
           R3 = _sCuE::P64;
           R2 = lvl37_rC17_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cJTf: // global
           I64[Sp] = block_cJRt_info;
           _sCve::P64 = P64[R1 + 7];
           R1 = _sCuC::P64;
           P64[Sp + 8] = _sCve::P64;
           if (R1 & 7 != 0) goto uJUk; else goto cJRu;
       uJUk: // global
           call _cJRt(R1) args: 0, res: 0, upd: 0;
       cJRu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cJTe: // global
           I64[Sp] = block_cJPI_info;
           _sCuS::P64 = P64[R1 + 7];
           R1 = _sCuC::P64;
           P64[Sp + 8] = _sCuS::P64;
           if (R1 & 7 != 0) goto uJUj; else goto cJPJ;
       uJUj: // global
           call _cJPI(R1) args: 0, res: 0, upd: 0;
       cJPJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cJTd: // global
           I64[Sp - 8] = block_cJOW_info;
           _sCuG::P64 = P64[R1 + 7];
           _sCuH::P64 = P64[R1 + 15];
           R1 = _sCuC::P64;
           P64[Sp] = _sCuH::P64;
           P64[Sp + 8] = _sCuG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJUi; else goto cJOX;
       uJUi: // global
           call _cJOW(R1) args: 0, res: 0, upd: 0;
       cJOX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cJOR_info" {
     block_cJOR_info:
         const _cJOR;
         const 2;
         const 18446744069414584350;
         const uJUq_srtd;
 },
 _cJRt() //  [R1]
         { []
         }
     {offset
       cJRt: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cJTM; else goto cJTL;
       cJTM: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cJTL: // global
           _sCvg::I64 = I64[R1 + 7];
           I64[Hp - 64] = p_sCvh_info;
           P64[Hp - 56] = P64[Sp + 8];
           _sCuE::P64 = P64[Sp + 16];
           _cJRy::P64 = Hp - 63;
           if (%MO_S_Lt_W64(_sCvg::I64, 11)) goto cJTO; else goto cJTQ;
       cJTO: // global
           Hp = Hp - 56;
           R2 = _sCuE::P64;
           R1 = _cJRy::P64;
           Sp = Sp + 24;
           call p_sCvh_entry(R2, R1) args: 8, res: 0, upd: 8;
       cJTQ: // global
           I64[Hp - 48] = sat_sCvz_info;
           P64[Hp - 32] = _sCuE::P64;
           P64[Hp - 24] = _cJRy::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJRt_info" {
     block_cJRt_info:
         const _cJRt;
         const 2;
         const 4294967326;
         const SCNU_srt+1160;
 },
 _cJPI() //  [R1]
         { []
         }
     {offset
       cJPI: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cJTE; else goto cJTD;
       cJTE: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cJTD: // global
           _sCuU::I64 = I64[R1 + 7];
           I64[Hp - 64] = p_sCuV_info;
           P64[Hp - 56] = P64[Sp + 8];
           _sCuE::P64 = P64[Sp + 16];
           _cJPN::P64 = Hp - 63;
           if (%MO_S_Lt_W64(_sCuU::I64, 11)) goto cJTG; else goto cJTI;
       cJTG: // global
           Hp = Hp - 56;
           R2 = _sCuE::P64;
           R1 = _cJPN::P64;
           Sp = Sp + 24;
           call p_sCuV_entry(R2, R1) args: 8, res: 0, upd: 8;
       cJTI: // global
           I64[Hp - 48] = sat_sCvd_info;
           P64[Hp - 32] = _sCuE::P64;
           P64[Hp - 24] = _cJPN::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJPI_info" {
     block_cJPI_info:
         const _cJPI;
         const 2;
         const 4294967326;
         const SCNU_srt+1160;
 },
 section ""relreadonly" . uJUr_srtd" {
     uJUr_srtd:
         const SCNU_srt+864;
         const 37;
         const 68719476737;
 },
 _cJOW() //  [R1]
         { []
         }
     {offset
       cJOW: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cJTw; else goto cJTv;
       cJTw: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cJTv: // global
           _sCuJ::I64 = I64[R1 + 7];
           I64[Hp - 72] = p_sCuK_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 8];
           _sCuE::P64 = P64[Sp + 24];
           _cJP1::P64 = Hp - 71;
           if (%MO_S_Lt_W64(_sCuJ::I64, 11)) goto cJTy; else goto cJTA;
       cJTy: // global
           Hp = Hp - 56;
           R2 = _sCuE::P64;
           R1 = _cJP1::P64;
           Sp = Sp + 32;
           call p_sCuK_entry(R2, R1) args: 8, res: 0, upd: 8;
       cJTA: // global
           I64[Hp - 48] = sat_sCuR_info;
           P64[Hp - 32] = _sCuE::P64;
           P64[Hp - 24] = _cJP1::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJOW_info" {
     block_cJOW_info:
         const _cJOW;
         const 3;
         const 18446744069414584350;
         const uJUr_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.587851839 UTC

[section ""data" . GHC.Show.$fShowRuntimeRep1_closure" {
     GHC.Show.$fShowRuntimeRep1_closure:
         const GHC.Show.$fShowRuntimeRep1_info;
         const 0;
 },
 GHC.Show.$fShowRuntimeRep1_entry() //  [R2, R3]
         { []
         }
     {offset
       cJWU: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShow(,)1_closure+1;
           call GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowRuntimeRep1_info" {
     GHC.Show.$fShowRuntimeRep1_info:
         const GHC.Show.$fShowRuntimeRep1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SCNU_srt+1160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.591936614 UTC

[section ""data" . GHC.Show.$fShowRuntimeRep_$cshowList_closure" {
     GHC.Show.$fShowRuntimeRep_$cshowList_closure:
         const GHC.Show.$fShowRuntimeRep_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShowRuntimeRep_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cJX5: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowRuntimeRep1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowRuntimeRep_$cshowList_info" {
     GHC.Show.$fShowRuntimeRep_$cshowList_info:
         const GHC.Show.$fShowRuntimeRep_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SCNU_srt+1240;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.595772384 UTC

[section ""data" . GHC.Show.$fShowRuntimeRep_$cshow_closure" {
     GHC.Show.$fShowRuntimeRep_$cshow_closure:
         const GHC.Show.$fShowRuntimeRep_$cshow_info;
         const 0;
 },
 GHC.Show.$fShowRuntimeRep_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cJXg: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = R2;
           R2 = GHC.Show.$fShow(,)1_closure+1;
           call GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowRuntimeRep_$cshow_info" {
     GHC.Show.$fShowRuntimeRep_$cshow_info:
         const GHC.Show.$fShowRuntimeRep_$cshow_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SCNU_srt+1160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.599149658 UTC

[section ""data" . GHC.Show.$fShowRuntimeRep_closure" {
     GHC.Show.$fShowRuntimeRep_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowRuntimeRep_$cshowsPrec_closure+3;
         const GHC.Show.$fShowRuntimeRep_$cshow_closure+1;
         const GHC.Show.$fShowRuntimeRep_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.602505385 UTC

[section ""data" . GHC.Show.$fShowCallStack2_closure" {
     GHC.Show.$fShowCallStack2_closure:
         const GHC.Show.$fShowCallStack2_info;
         const 0;
 },
 GHC.Show.$fShowCallStack2_entry() //  [R2, R3]
         { []
         }
     {offset
       cJXv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJXB; else goto cJXC;
       cJXB: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowCallStack2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJXC: // global
           I64[Sp - 16] = block_cJXs_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uJXH; else goto cJXt;
       uJXH: // global
           call _cJXs(R1) args: 0, res: 0, upd: 0;
       cJXt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowCallStack2_info" {
     GHC.Show.$fShowCallStack2_info:
         const GHC.Show.$fShowCallStack2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SCNU_srt+1248;
 },
 _cJXs() //  [R1]
         { []
         }
     {offset
       cJXs: // global
           _sCvE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cJXy_info;
           R4 = _sCvE::P64;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Show.$w$s$cshowsPrec_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cJXs_info" {
     block_cJXs_info:
         const _cJXs;
         const 1;
         const 4294967326;
         const SCNU_srt+1256;
 },
 _cJXy() //  [R1, R2]
         { []
         }
     {offset
       cJXy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJXG; else goto cJXF;
       cJXG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cJXF: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJXy_info" {
     block_cJXy_info:
         const _cJXy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.610460796 UTC

[section ""data" . GHC.Show.$fShowCallStack_$cshowsPrec_closure" {
     GHC.Show.$fShowCallStack_$cshowsPrec_closure:
         const GHC.Show.$fShowCallStack_$cshowsPrec_info;
         const 0;
 },
 ls_sCvN_entry() //  [R1]
         { []
         }
     {offset
       cJY3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJY4; else goto cJY5;
       cJY4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJY5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ls_sCvN_info" {
     ls_sCvN_info:
         const ls_sCvN_entry;
         const 1;
         const 16;
 },
 GHC.Show.$fShowCallStack_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cJY6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJYa; else goto cJY9;
       cJYa: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowCallStack_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cJY9: // global
           I64[Hp - 16] = ls_sCvN_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowCallStack2_closure+2;
           R1 = GHC.Show.showList___closure+3;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowCallStack_$cshowsPrec_info" {
     GHC.Show.$fShowCallStack_$cshowsPrec_info:
         const GHC.Show.$fShowCallStack_$cshowsPrec_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SCNU_srt+1248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.616012039 UTC

[section ""data" . GHC.Show.$fShowCallStack3_closure" {
     GHC.Show.$fShowCallStack3_closure:
         const GHC.Show.$fShowCallStack3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowCallStack3_entry() //  [R1]
         { []
         }
     {offset
       cJYp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJYq; else goto cJYr;
       cJYq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJYr: // global
           (_cJYm::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cJYm::I64 == 0) goto cJYo; else goto cJYn;
       cJYo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cJYn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cJYm::I64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowCallStack3_info" {
     GHC.Show.$fShowCallStack3_info:
         const GHC.Show.$fShowCallStack3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.620408869 UTC

[section ""data" . lvl41_rC1b_closure" {
     lvl41_rC1b_closure:
         const :_con_info;
         const GHC.Show.showList__2_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.624960786 UTC

[section ""data" . GHC.Show.$fShowCallStack_showl_closure" {
     GHC.Show.$fShowCallStack_showl_closure:
         const GHC.Show.$fShowCallStack_showl_info;
         const 0;
 },
 sat_sCvW_entry() //  [R1]
         { []
         }
     {offset
       cJYX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cJYY; else goto cJYZ;
       cJYY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJYZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$fShowCallStack_showl_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCvW_info" {
     sat_sCvW_info:
         const sat_sCvW_entry;
         const 1;
         const 4294967312;
         const SCNU_srt+1272;
 },
 sat_sCw0_entry() //  [R1]
         { []
         }
     {offset
       cJZ0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cJZ4; else goto cJZ5;
       cJZ4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cJZ5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cJYO_info;
           _sCvS::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sCvS::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uJZc; else goto cJYP;
       uJZc: // global
           call _cJYO(R1) args: 0, res: 0, upd: 0;
       cJYP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCw0_info" {
     sat_sCw0_info:
         const sat_sCw0_entry;
         const 2;
         const 21474836498;
         const SCNU_srt+1256;
 },
 _cJYO() //  [R1]
         { []
         }
     {offset
       cJYO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJZ8; else goto cJZ7;
       cJZ8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cJZ7: // global
           _sCvU::P64 = P64[R1 + 7];
           _sCvV::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_sCvW_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cJZ1_info;
           R4 = Hp - 16;
           R3 = _sCvV::P64;
           R2 = _sCvU::P64;
           Sp = Sp + 8;
           call GHC.Show.$w$s$cshowsPrec_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cJYO_info" {
     block_cJYO_info:
         const _cJYO;
         const 1;
         const 21474836510;
         const SCNU_srt+1256;
 },
 _cJZ1() //  [R1, R2]
         { []
         }
     {offset
       cJZ1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cJZb; else goto cJZa;
       cJZb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cJZa: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cJZ1_info" {
     block_cJZ1_info:
         const _cJZ1;
         const 0;
         const 30;
 },
 GHC.Show.$fShowCallStack_showl_entry() //  [R2]
         { []
         }
     {offset
       cJZh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cJZi; else goto cJZj;
       cJZi: // global
           R2 = R2;
           R1 = GHC.Show.$fShowCallStack_showl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cJZj: // global
           I64[Sp - 8] = block_cJYE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uJZq; else goto cJYF;
       uJZq: // global
           call _cJYE(R1) args: 0, res: 0, upd: 0;
       cJYF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowCallStack_showl_info" {
     GHC.Show.$fShowCallStack_showl_info:
         const GHC.Show.$fShowCallStack_showl_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SCNU_srt+1256;
 },
 _cJYE() //  [R1]
         { []
         }
     {offset
       cJYE: // global
           if (R1 & 7 == 1) goto cJZe; else goto cJZf;
       cJZe: // global
           R1 = lvl41_rC1b_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cJZf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cJZp; else goto cJZo;
       cJZp: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cJZo: // global
           _sCvR::P64 = P64[R1 + 6];
           _sCvS::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_sCw0_info;
           P64[Hp - 32] = _sCvR::P64;
           P64[Hp - 24] = _sCvS::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cJYE_info" {
     block_cJYE_info:
         const _cJYE;
         const 0;
         const 21474836510;
         const SCNU_srt+1256;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.641770932 UTC

[section ""data" . GHC.Show.$fShowCallStack_$cshow_closure" {
     GHC.Show.$fShowCallStack_$cshow_closure:
         const GHC.Show.$fShowCallStack_$cshow_info;
         const 0;
 },
 sat_sCw8_entry() //  [R1]
         { []
         }
     {offset
       cK0i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cK0j; else goto cK0k;
       cK0j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cK0k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$fShowCallStack_showl_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCw8_info" {
     sat_sCw8_info:
         const sat_sCw8_entry;
         const 1;
         const 4294967312;
         const SCNU_srt+1272;
 },
 sat_sCwc_entry() //  [R1]
         { []
         }
     {offset
       cK0l: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cK0p; else goto cK0q;
       cK0p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cK0q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cK09_info;
           _sCw4::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sCw4::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uK0x; else goto cK0a;
       uK0x: // global
           call _cK09(R1) args: 0, res: 0, upd: 0;
       cK0a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCwc_info" {
     sat_sCwc_info:
         const sat_sCwc_entry;
         const 2;
         const 21474836498;
         const SCNU_srt+1256;
 },
 _cK09() //  [R1]
         { []
         }
     {offset
       cK09: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cK0t; else goto cK0s;
       cK0t: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cK0s: // global
           _sCw6::P64 = P64[R1 + 7];
           _sCw7::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_sCw8_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cK0m_info;
           R4 = Hp - 16;
           R3 = _sCw7::P64;
           R2 = _sCw6::P64;
           Sp = Sp + 8;
           call GHC.Show.$w$s$cshowsPrec_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cK09_info" {
     block_cK09_info:
         const _cK09;
         const 1;
         const 21474836510;
         const SCNU_srt+1256;
 },
 _cK0m() //  [R1, R2]
         { []
         }
     {offset
       cK0m: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cK0w; else goto cK0v;
       cK0w: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cK0v: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cK0m_info" {
     block_cK0m_info:
         const _cK0m;
         const 0;
         const 30;
 },
 GHC.Show.$fShowCallStack_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cK0C: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cK0D; else goto cK0E;
       cK0D: // global
           R2 = R2;
           R1 = GHC.Show.$fShowCallStack_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cK0E: // global
           I64[Sp - 8] = block_cK00_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowCallStack_$cshow_info" {
     GHC.Show.$fShowCallStack_$cshow_info:
         const GHC.Show.$fShowCallStack_$cshow_entry;
         const 0;
         const 124554051598;
         const 4294967301;
         const SCNU_srt+1256;
 },
 _cK00() //  [R1]
         { []
         }
     {offset
       cK00: // global
           if (R1 & 7 == 1) goto cK0z; else goto cK0A;
       cK0z: // global
           R1 = GHC.Show.$fShowCallStack3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cK0A: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cK0K; else goto cK0J;
       cK0K: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cK0J: // global
           _sCw3::P64 = P64[R1 + 6];
           _sCw4::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_sCwc_info;
           P64[Hp - 32] = _sCw3::P64;
           P64[Hp - 24] = _sCw4::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cK00_info" {
     block_cK00_info:
         const _cK00;
         const 0;
         const 90194313246;
         const SCNU_srt+1256;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.656409075 UTC

[section ""data" . GHC.Show.$fShowCallStack1_closure" {
     GHC.Show.$fShowCallStack1_closure:
         const GHC.Show.$fShowCallStack1_info;
         const 0;
 },
 ls_sCwe_entry() //  [R1]
         { []
         }
     {offset
       cK1n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cK1o; else goto cK1p;
       cK1o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cK1p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ls_sCwe_info" {
     ls_sCwe_info:
         const ls_sCwe_entry;
         const 1;
         const 16;
 },
 GHC.Show.$fShowCallStack1_entry() //  [R2]
         { []
         }
     {offset
       cK1q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cK1u; else goto cK1t;
       cK1u: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Show.$fShowCallStack1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cK1t: // global
           I64[Hp - 16] = ls_sCwe_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowCallStack2_closure+2;
           R1 = GHC.Show.showList___closure+3;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowCallStack1_info" {
     GHC.Show.$fShowCallStack1_info:
         const GHC.Show.$fShowCallStack1_entry;
         const 0;
         const 279172874254;
         const 4294967301;
         const SCNU_srt+1248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.662200572 UTC

[section ""data" . GHC.Show.$fShowCallStack_$cshowList_closure" {
     GHC.Show.$fShowCallStack_$cshowList_closure:
         const GHC.Show.$fShowCallStack_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShowCallStack_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cK1H: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowCallStack1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowCallStack_$cshowList_info" {
     GHC.Show.$fShowCallStack_$cshowList_info:
         const GHC.Show.$fShowCallStack_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SCNU_srt+1296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.666068117 UTC

[section ""data" . GHC.Show.$fShowCallStack_closure" {
     GHC.Show.$fShowCallStack_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowCallStack_$cshowsPrec_closure+2;
         const GHC.Show.$fShowCallStack_$cshow_closure+1;
         const GHC.Show.$fShowCallStack_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.66780152 UTC

[section ""data" . GHC.Show.$fShowNonEmpty2_closure" {
     GHC.Show.$fShowNonEmpty2_closure:
         const GHC.Types.I#_con_info;
         const 6;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.66963243 UTC

[section ""cstring" . GHC.Show.$fShowNonEmpty1_bytes" {
     GHC.Show.$fShowNonEmpty1_bytes:
         I8[] [32,58,124,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.676869118 UTC

[section ""data" . GHC.Show.$w$cshowsPrec7_closure" {
     GHC.Show.$w$cshowsPrec7_closure:
         const GHC.Show.$w$cshowsPrec7_info;
 },
 GHC.Show.$w$cshowsPrec7_slow() //  [R1]
         { []
         }
     {offset
       cK1S: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Show.$w$cshowsPrec7_entry(R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 f12_sCwm_entry() //  [R1]
         { []
         }
     {offset
       cK20: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cK21; else goto cK22;
       cK21: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cK22: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShowNonEmpty2_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f12_sCwm_info" {
     f12_sCwm_info:
         const f12_sCwm_entry;
         const 2;
         const 18;
 },
 g_sCwn_entry() //  [R1]
         { []
         }
     {offset
       cK27: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cK28; else goto cK29;
       cK28: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cK29: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Show.showList_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sCwn_info" {
     g_sCwn_info:
         const g_sCwn_entry;
         const 2;
         const 18;
 },
 sat_sCwr_entry() //  [R1]
         { []
         }
     {offset
       cK2n: // global
           _sCwr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cK2o; else goto cK2p;
       cK2p: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cK2r; else goto cK2q;
       cK2r: // global
           HpAlloc = 32;
           goto cK2o;
       cK2o: // global
           R1 = _sCwr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cK2q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCwr::P64;
           _sCwn::P64 = P64[_sCwr::P64 + 16];
           _sCwp::P64 = P64[_sCwr::P64 + 24];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sCwn::P64;
           P64[Hp] = _sCwp::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowNonEmpty1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCwr_info" {
     sat_sCwr_info:
         const sat_sCwr_entry;
         const 2;
         const 18;
 },
 sat_sCws_entry() //  [R1, R2]
         { []
         }
     {offset
       cK2s: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cK2w; else goto cK2v;
       cK2w: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cK2v: // global
           _sCwm::P64 = P64[R1 + 7];
           _sCwn::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sCwr_info;
           P64[Hp - 8] = _sCwn::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _sCwm::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCws_info" {
     sat_sCws_info:
         const sat_sCws_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sCwv_entry() //  [R1]
         { []
         }
     {offset
       cK2Q: // global
           _sCwv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cK2R; else goto cK2S;
       cK2S: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cK2U; else goto cK2T;
       cK2U: // global
           HpAlloc = 24;
           goto cK2R;
       cK2R: // global
           R1 = _sCwv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cK2T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCwv::P64;
           _sCwn::P64 = P64[_sCwv::P64 + 16];
           _sCwt::P64 = P64[_sCwv::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sCwt::P64;
           R2 = Hp - 14;
           R1 = _sCwn::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCwv_info" {
     sat_sCwv_info:
         const sat_sCwv_entry;
         const 2;
         const 18;
 },
 sat_sCww_entry() //  [R1]
         { []
         }
     {offset
       cK2V: // global
           _sCww::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cK2W; else goto cK2X;
       cK2X: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cK2Z; else goto cK2Y;
       cK2Z: // global
           HpAlloc = 32;
           goto cK2W;
       cK2W: // global
           R1 = _sCww::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cK2Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCww::P64;
           _sCwn::P64 = P64[_sCww::P64 + 16];
           _sCwt::P64 = P64[_sCww::P64 + 24];
           I64[Hp - 24] = sat_sCwv_info;
           P64[Hp - 8] = _sCwn::P64;
           P64[Hp] = _sCwt::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowNonEmpty1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCww_info" {
     sat_sCww_info:
         const sat_sCww_entry;
         const 2;
         const 18;
 },
 sat_sCwx_entry() //  [R1]
         { []
         }
     {offset
       cK30: // global
           _sCwx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cK31; else goto cK32;
       cK32: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cK34; else goto cK33;
       cK34: // global
           HpAlloc = 32;
           goto cK31;
       cK31: // global
           R1 = _sCwx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cK33: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCwx::P64;
           _sCwm::P64 = P64[_sCwx::P64 + 16];
           _sCwn::P64 = P64[_sCwx::P64 + 24];
           _sCwt::P64 = P64[_sCwx::P64 + 32];
           I64[Hp - 24] = sat_sCww_info;
           P64[Hp - 8] = _sCwn::P64;
           P64[Hp] = _sCwt::P64;
           R2 = Hp - 24;
           R1 = _sCwm::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCwx_info" {
     sat_sCwx_info:
         const sat_sCwx_entry;
         const 3;
         const 15;
 },
 sat_sCwy_entry() //  [R1, R2]
         { []
         }
     {offset
       cK36: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cK3a; else goto cK39;
       cK3a: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cK39: // global
           _sCwm::P64 = P64[R1 + 7];
           _sCwn::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sCwx_info;
           P64[Hp - 40] = _sCwm::P64;
           P64[Hp - 32] = _sCwn::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCwy_info" {
     sat_sCwy_info:
         const sat_sCwy_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 GHC.Show.$w$cshowsPrec7_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cK3e: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cK3i; else goto cK3h;
       cK3i: // global
           HpAlloc = 88;
           R1 = GHC.Show.$w$cshowsPrec7_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cK3h: // global
           I64[Hp - 80] = f12_sCwm_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = g_sCwn_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R5;
           _cK1W::P64 = Hp - 80;
           _cK23::P64 = Hp - 48;
           if (%MO_S_Lt_W64(R3, 6)) goto cK3c; else goto cK3d;
       cK3c: // global
           I64[Hp - 16] = sat_sCws_info;
           P64[Hp - 8] = _cK1W::P64;
           P64[Hp] = _cK23::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cK3d: // global
           I64[Hp - 16] = sat_sCwy_info;
           P64[Hp - 8] = _cK1W::P64;
           P64[Hp] = _cK23::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec7_info" {
     GHC.Show.$w$cshowsPrec7_info:
         const GHC.Show.$w$cshowsPrec7_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 132;
         const GHC.Show.$w$cshowsPrec7_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.698163848 UTC

[section ""data" . GHC.Show.$fShowNonEmpty_$cshowsPrec_closure" {
     GHC.Show.$fShowNonEmpty_$cshowsPrec_closure:
         const GHC.Show.$fShowNonEmpty_$cshowsPrec_info;
 },
 GHC.Show.$fShowNonEmpty_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cK46: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cK4a; else goto cK4b;
       cK4a: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowNonEmpty_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cK4b: // global
           I64[Sp - 24] = block_cK43_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uK4j; else goto cK44;
       uK4j: // global
           call _cK43(R1) args: 0, res: 0, upd: 0;
       cK44: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowNonEmpty_$cshowsPrec_info" {
     GHC.Show.$fShowNonEmpty_$cshowsPrec_info:
         const GHC.Show.$fShowNonEmpty_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cK43() //  [R1]
         { []
         }
     {offset
       cK43: // global
           I64[Sp] = block_cK49_info;
           _sCwD::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sCwD::I64;
           if (R1 & 7 != 0) goto uK4i; else goto cK4d;
       uK4i: // global
           call _cK49(R1) args: 0, res: 0, upd: 0;
       cK4d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cK43_info" {
     block_cK43_info:
         const _cK43;
         const 2;
         const 30;
 },
 _cK49() //  [R1]
         { []
         }
     {offset
       cK49: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Show.$w$cshowsPrec7_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cK49_info" {
     block_cK49_info:
         const _cK49;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.707091778 UTC

[section ""data" . GHC.Show.$w$cshow_closure" {
     GHC.Show.$w$cshow_closure:
         const GHC.Show.$w$cshow_info;
 },
 sat_sCwK_entry() //  [R1]
         { []
         }
     {offset
       cK4J: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cK4K; else goto cK4L;
       cK4K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cK4L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call GHC.Show.showList_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCwK_info" {
     sat_sCwK_info:
         const sat_sCwK_entry;
         const 2;
         const 18;
 },
 sat_sCwL_entry() //  [R1]
         { []
         }
     {offset
       cK4M: // global
           _sCwL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cK4N; else goto cK4O;
       cK4O: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cK4Q; else goto cK4P;
       cK4Q: // global
           HpAlloc = 32;
           goto cK4N;
       cK4N: // global
           R1 = _sCwL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cK4P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCwL::P64;
           _sCwH::P64 = P64[_sCwL::P64 + 16];
           _sCwJ::P64 = P64[_sCwL::P64 + 24];
           I64[Hp - 24] = sat_sCwK_info;
           P64[Hp - 8] = _sCwH::P64;
           P64[Hp] = _sCwJ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowNonEmpty1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCwL_info" {
     sat_sCwL_info:
         const sat_sCwL_entry;
         const 2;
         const 18;
 },
 GHC.Show.$w$cshow_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cK4R: // global
           _sCwJ::P64 = R4;
           _sCwI::P64 = R3;
           _sCwH::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cK4S; else goto cK4T;
       cK4T: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cK4V; else goto cK4U;
       cK4V: // global
           HpAlloc = 32;
           goto cK4S;
       cK4S: // global
           R4 = _sCwJ::P64;
           R3 = _sCwI::P64;
           R2 = _sCwH::P64;
           R1 = GHC.Show.$w$cshow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cK4U: // global
           I64[Hp - 24] = sat_sCwL_info;
           P64[Hp - 8] = _sCwH::P64;
           P64[Hp] = _sCwJ::P64;
           R2 = _sCwH::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Show.$fShowNonEmpty2_closure+1;
           P64[Sp - 16] = _sCwI::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshow_info" {
     GHC.Show.$w$cshow_info:
         const GHC.Show.$w$cshow_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.715696772 UTC

[section ""data" . GHC.Show.$fShowNonEmpty_$cshow_closure" {
     GHC.Show.$fShowNonEmpty_$cshow_closure:
         const GHC.Show.$fShowNonEmpty_$cshow_info;
 },
 GHC.Show.$fShowNonEmpty_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cK5i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cK5j; else goto cK5k;
       cK5j: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowNonEmpty_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cK5k: // global
           I64[Sp - 16] = block_cK5f_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uK5o; else goto cK5g;
       uK5o: // global
           call _cK5f(R1) args: 0, res: 0, upd: 0;
       cK5g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowNonEmpty_$cshow_info" {
     GHC.Show.$fShowNonEmpty_$cshow_info:
         const GHC.Show.$fShowNonEmpty_$cshow_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cK5f() //  [R1]
         { []
         }
     {offset
       cK5f: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Show.$w$cshow_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cK5f_info" {
     block_cK5f_info:
         const _cK5f;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.722679571 UTC

[section ""data" . GHC.Show.$fShowNonEmpty_$cshowList_closure" {
     GHC.Show.$fShowNonEmpty_$cshowList_closure:
         const GHC.Show.$fShowNonEmpty_$cshowList_info;
 },
 sat_sCwY_entry() //  [R1, R2]
         { []
         }
     {offset
       cK5K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cK5L; else goto cK5M;
       cK5L: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cK5M: // global
           I64[Sp - 16] = block_cK5H_info;
           _sCwR::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sCwR::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uK5Q; else goto cK5I;
       uK5Q: // global
           call _cK5H(R1) args: 0, res: 0, upd: 0;
       cK5I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCwY_info" {
     sat_sCwY_info:
         const sat_sCwY_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cK5H() //  [R1]
         { []
         }
     {offset
       cK5H: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = 0;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec7_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cK5H_info" {
     block_cK5H_info:
         const _cK5H;
         const 1;
         const 30;
 },
 GHC.Show.$fShowNonEmpty_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cK5R: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cK5V; else goto cK5U;
       cK5V: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowNonEmpty_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cK5U: // global
           I64[Hp - 8] = sat_sCwY_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowNonEmpty_$cshowList_info" {
     GHC.Show.$fShowNonEmpty_$cshowList_info:
         const GHC.Show.$fShowNonEmpty_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.731258855 UTC

[section ""data" . GHC.Show.$fShowNonEmpty_closure" {
     GHC.Show.$fShowNonEmpty_closure:
         const GHC.Show.$fShowNonEmpty_info;
 },
 sat_sCx2_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cK6h: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Show.$fShowNonEmpty_$cshowList_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCx2_info" {
     sat_sCx2_info:
         const sat_sCx2_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sCx1_entry() //  [R1, R2]
         { []
         }
     {offset
       cK6p: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Show.$fShowNonEmpty_$cshow_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCx1_info" {
     sat_sCx1_info:
         const sat_sCx1_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sCx0_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cK6x: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Show.$fShowNonEmpty_$cshowsPrec_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCx0_info" {
     sat_sCx0_info:
         const sat_sCx0_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 GHC.Show.$fShowNonEmpty_entry() //  [R2]
         { []
         }
     {offset
       cK6B: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cK6F; else goto cK6E;
       cK6F: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = GHC.Show.$fShowNonEmpty_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cK6E: // global
           I64[Hp - 72] = sat_sCx2_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sCx1_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sCx0_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowNonEmpty_info" {
     GHC.Show.$fShowNonEmpty_info:
         const GHC.Show.$fShowNonEmpty_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.739529442 UTC

[section ""cstring" . GHC.Show.$fShowMaybe5_bytes" {
     GHC.Show.$fShowMaybe5_bytes:
         I8[] [78,111,116,104,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.742004542 UTC

[section ""data" . GHC.Show.$fShowMaybe4_closure" {
     GHC.Show.$fShowMaybe4_closure:
         const GHC.Show.$fShowMaybe4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowMaybe4_entry() //  [R1]
         { []
         }
     {offset
       cK74: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cK75; else goto cK76;
       cK75: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cK76: // global
           (_cK71::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cK71::I64 == 0) goto cK73; else goto cK72;
       cK73: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cK72: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cK71::I64;
           R2 = GHC.Show.$fShowMaybe5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowMaybe4_info" {
     GHC.Show.$fShowMaybe4_info:
         const GHC.Show.$fShowMaybe4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.746672153 UTC

[section ""data" . GHC.Show.$fShowMaybe3_closure" {
     GHC.Show.$fShowMaybe3_closure:
         const GHC.Show.$fShowMaybe3_info;
         const 0;
 },
 GHC.Show.$fShowMaybe3_entry() //  [R2]
         { []
         }
     {offset
       cK7i: // global
           R3 = R2;
           R2 = GHC.Show.$fShowMaybe4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowMaybe3_info" {
     GHC.Show.$fShowMaybe3_info:
         const GHC.Show.$fShowMaybe3_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SCNU_srt+1304;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.750327956 UTC

[section ""cstring" . GHC.Show.$fShowMaybe2_bytes" {
     GHC.Show.$fShowMaybe2_bytes:
         I8[] [74,117,115,116,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.752595127 UTC

[section ""data" . GHC.Show.$fShowMaybe1_closure" {
     GHC.Show.$fShowMaybe1_closure:
         const GHC.Show.$fShowMaybe1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowMaybe1_entry() //  [R1]
         { []
         }
     {offset
       cK7w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cK7x; else goto cK7y;
       cK7x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cK7y: // global
           (_cK7t::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cK7t::I64 == 0) goto cK7v; else goto cK7u;
       cK7v: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cK7u: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cK7t::I64;
           R2 = GHC.Show.$fShowMaybe2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowMaybe1_info" {
     GHC.Show.$fShowMaybe1_info:
         const GHC.Show.$fShowMaybe1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.761431548 UTC

[section ""data" . GHC.Show.$fShowMaybe_$cshowsPrec_closure" {
     GHC.Show.$fShowMaybe_$cshowsPrec_closure:
         const GHC.Show.$fShowMaybe_$cshowsPrec_info;
         const 0;
 },
 g_sCxa_entry() //  [R1]
         { []
         }
     {offset
       cK7Z: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cK80; else goto cK81;
       cK80: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cK81: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.appPrec1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sCxa_info" {
     g_sCxa_info:
         const g_sCxa_entry;
         const 2;
         const 18;
 },
 sat_sCxd_entry() //  [R1]
         { []
         }
     {offset
       cK8e: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCxd_info" {
     sat_sCxd_info:
         const sat_sCxd_entry;
         const 2;
         const 18;
 },
 sat_sCxe_entry() //  [R1, R2]
         { []
         }
     {offset
       cK8h: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cK8l; else goto cK8k;
       cK8l: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cK8k: // global
           _sCxa::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sCxd_info;
           P64[Hp - 8] = _sCxa::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowMaybe1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCxe_info" {
     sat_sCxe_info:
         const sat_sCxe_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SCNU_srt+1312;
 },
 sat_sCxh_entry() //  [R1]
         { []
         }
     {offset
       cK8B: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cK8F; else goto cK8E;
       cK8F: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cK8E: // global
           _sCxa::P64 = P64[R1 + 16];
           _sCxf::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sCxf::P64;
           R2 = Hp - 14;
           R1 = _sCxa::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCxh_info" {
     sat_sCxh_info:
         const sat_sCxh_entry;
         const 2;
         const 18;
 },
 sat_sCxi_entry() //  [R1]
         { []
         }
     {offset
       cK8G: // global
           _sCxi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cK8H; else goto cK8I;
       cK8I: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cK8K; else goto cK8J;
       cK8K: // global
           HpAlloc = 32;
           goto cK8H;
       cK8H: // global
           R1 = _sCxi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cK8J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCxi::P64;
           _sCxa::P64 = P64[_sCxi::P64 + 16];
           _sCxf::P64 = P64[_sCxi::P64 + 24];
           I64[Hp - 24] = sat_sCxh_info;
           P64[Hp - 8] = _sCxa::P64;
           P64[Hp] = _sCxf::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowMaybe1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCxi_info" {
     sat_sCxi_info:
         const sat_sCxi_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1312;
 },
 sat_sCxj_entry() //  [R1, R2]
         { []
         }
     {offset
       cK8M: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cK8Q; else goto cK8P;
       cK8Q: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cK8P: // global
           _sCxa::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sCxi_info;
           P64[Hp - 32] = _sCxa::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCxj_info" {
     sat_sCxj_info:
         const sat_sCxj_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SCNU_srt+1312;
 },
 GHC.Show.$fShowMaybe_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cK8V: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cK8W; else goto cK8X;
       cK8W: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowMaybe_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cK8X: // global
           I64[Sp - 24] = block_cK7K_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uK98; else goto cK7L;
       uK98: // global
           call _cK7K(R1) args: 0, res: 0, upd: 0;
       cK7L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowMaybe_$cshowsPrec_info" {
     GHC.Show.$fShowMaybe_$cshowsPrec_info:
         const GHC.Show.$fShowMaybe_$cshowsPrec_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const SCNU_srt+1312;
 },
 _cK7K() //  [R1]
         { []
         }
     {offset
       cK7K: // global
           if (R1 & 7 == 1) goto cK8S; else goto cK8T;
       cK8S: // global
           R1 = GHC.Show.$fShowMaybe3_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cK8T: // global
           I64[Sp] = block_cK7Q_info;
           _sCx7::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sCx7::P64;
           if (R1 & 7 != 0) goto uK97; else goto cK7R;
       uK97: // global
           call _cK7Q(R1) args: 0, res: 0, upd: 0;
       cK7R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cK7K_info" {
     block_cK7K_info:
         const _cK7K;
         const 2;
         const 21474836510;
         const SCNU_srt+1312;
 },
 _cK7Q() //  [R1]
         { []
         }
     {offset
       cK7Q: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cK93; else goto cK92;
       cK93: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cK92: // global
           _sCx9::I64 = I64[R1 + 7];
           I64[Hp - 40] = g_sCxa_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           _cK7V::P64 = Hp - 40;
           if (%MO_S_Lt_W64(_sCx9::I64, 11)) goto cK95; else goto cK96;
       cK95: // global
           I64[Hp - 8] = sat_sCxe_info;
           P64[Hp] = _cK7V::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cK96: // global
           I64[Hp - 8] = sat_sCxj_info;
           P64[Hp] = _cK7V::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cK7Q_info" {
     block_cK7Q_info:
         const _cK7Q;
         const 2;
         const 4294967326;
         const SCNU_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.780814105 UTC

[section ""data" . GHC.Show.$fShowMaybe_$cshow_closure" {
     GHC.Show.$fShowMaybe_$cshow_closure:
         const GHC.Show.$fShowMaybe_$cshow_info;
         const 0;
 },
 sat_sCxo_entry() //  [R1]
         { []
         }
     {offset
       cKa4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cKa5; else goto cKa6;
       cKa5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKa6: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Show.appPrec1_closure+1;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCxo_info" {
     sat_sCxo_info:
         const sat_sCxo_entry;
         const 2;
         const 18;
 },
 GHC.Show.$fShowMaybe_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cKab: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKac; else goto cKad;
       cKac: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowMaybe_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cKad: // global
           I64[Sp - 16] = block_cK9U_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uKaj; else goto cK9V;
       uKaj: // global
           call _cK9U(R1) args: 0, res: 0, upd: 0;
       cK9V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowMaybe_$cshow_info" {
     GHC.Show.$fShowMaybe_$cshow_info:
         const GHC.Show.$fShowMaybe_$cshow_entry;
         const 0;
         const 81604378638;
         const 8589934607;
         const SCNU_srt+1304;
 },
 _cK9U() //  [R1]
         { []
         }
     {offset
       cK9U: // global
           if (R1 & 7 == 1) goto cKa8; else goto cKa9;
       cKa8: // global
           R1 = GHC.Show.$fShowMaybe4_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cKa9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKai; else goto cKah;
       cKai: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cKah: // global
           _sCxn::P64 = P64[R1 + 6];
           I64[Hp - 24] = sat_sCxo_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sCxn::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowMaybe1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cK9U_info" {
     block_cK9U_info:
         const _cK9U;
         const 1;
         const 12884901918;
         const SCNU_srt+1304;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.789625023 UTC

[section ""data" . GHC.Show.$fShowMaybe_$cshowList_closure" {
     GHC.Show.$fShowMaybe_$cshowList_closure:
         const GHC.Show.$fShowMaybe_$cshowList_info;
         const 0;
 },
 sat_sCxs_entry() //  [R1, R2]
         { []
         }
     {offset
       cKaL: // global
           R4 = R2;
           R3 = GHC.Show.$fShow(,)1_closure+1;
           R2 = P64[R1 + 7];
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCxs_info" {
     sat_sCxs_info:
         const sat_sCxs_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SCNU_srt+1320;
 },
 GHC.Show.$fShowMaybe_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cKaO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cKaS; else goto cKaR;
       cKaS: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowMaybe_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cKaR: // global
           I64[Hp - 8] = sat_sCxs_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowMaybe_$cshowList_info" {
     GHC.Show.$fShowMaybe_$cshowList_info:
         const GHC.Show.$fShowMaybe_$cshowList_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const SCNU_srt+1320;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.796406701 UTC

[section ""data" . GHC.Show.$fShowMaybe_closure" {
     GHC.Show.$fShowMaybe_closure:
         const GHC.Show.$fShowMaybe_info;
         const 0;
 },
 sat_sCxw_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cKb9: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Show.$fShowMaybe_$cshowList_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCxw_info" {
     sat_sCxw_info:
         const sat_sCxw_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SCNU_srt+1344;
 },
 sat_sCxv_entry() //  [R1, R2]
         { []
         }
     {offset
       cKbh: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Show.$fShowMaybe_$cshow_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCxv_info" {
     sat_sCxv_info:
         const sat_sCxv_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SCNU_srt+1336;
 },
 sat_sCxu_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cKbp: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCxu_info" {
     sat_sCxu_info:
         const sat_sCxu_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SCNU_srt+1320;
 },
 GHC.Show.$fShowMaybe_entry() //  [R2]
         { []
         }
     {offset
       cKbt: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cKbx; else goto cKbw;
       cKbx: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = GHC.Show.$fShowMaybe_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKbw: // global
           I64[Hp - 72] = sat_sCxw_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sCxv_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sCxu_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowMaybe_info" {
     GHC.Show.$fShowMaybe_info:
         const GHC.Show.$fShowMaybe_entry;
         const 0;
         const 124554051598;
         const 4294967301;
         const SCNU_srt+1320;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.804699298 UTC

[section ""cstring" . f_rC1c_bytes" {
     f_rC1c_bytes:
         I8[] [75,105,110,100,82,101,112,84,121,112,101,76,105,116,68,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.807025607 UTC

[section ""data" . f1_rC1d_closure" {
     f1_rC1d_closure:
         const f1_rC1d_info;
         const 0;
         const 0;
         const 0;
 },
 f1_rC1d_entry() //  [R1]
         { []
         }
     {offset
       cKbW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKbX; else goto cKbY;
       cKbX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKbY: // global
           (_cKbT::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cKbT::I64 == 0) goto cKbV; else goto cKbU;
       cKbV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cKbU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cKbT::I64;
           R2 = f_rC1c_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_rC1d_info" {
     f1_rC1d_info:
         const f1_rC1d_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.810666386 UTC

[section ""cstring" . f2_rC1e_bytes" {
     f2_rC1e_bytes:
         I8[] [75,105,110,100,82,101,112,84,121,112,101,76,105,116,83,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.812970114 UTC

[section ""data" . f3_rC1f_closure" {
     f3_rC1f_closure:
         const f3_rC1f_info;
         const 0;
         const 0;
         const 0;
 },
 f3_rC1f_entry() //  [R1]
         { []
         }
     {offset
       cKcd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKce; else goto cKcf;
       cKce: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKcf: // global
           (_cKca::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cKca::I64 == 0) goto cKcc; else goto cKcb;
       cKcc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cKcb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cKca::I64;
           R2 = f2_rC1e_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f3_rC1f_info" {
     f3_rC1f_info:
         const f3_rC1f_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.816859205 UTC

[section ""cstring" . f4_rC1g_bytes" {
     f4_rC1g_bytes:
         I8[] [75,105,110,100,82,101,112,84,89,80,69,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.819167082 UTC

[section ""data" . f5_rC1h_closure" {
     f5_rC1h_closure:
         const f5_rC1h_info;
         const 0;
         const 0;
         const 0;
 },
 f5_rC1h_entry() //  [R1]
         { []
         }
     {offset
       cKcu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKcv; else goto cKcw;
       cKcv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKcw: // global
           (_cKcr::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cKcr::I64 == 0) goto cKct; else goto cKcs;
       cKct: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cKcs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cKcr::I64;
           R2 = f4_rC1g_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f5_rC1h_info" {
     f5_rC1h_info:
         const f5_rC1h_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.823132102 UTC

[section ""cstring" . f6_rC1i_bytes" {
     f6_rC1i_bytes:
         I8[] [75,105,110,100,82,101,112,70,117,110,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.825768094 UTC

[section ""data" . f7_rC1j_closure" {
     f7_rC1j_closure:
         const f7_rC1j_info;
         const 0;
         const 0;
         const 0;
 },
 f7_rC1j_entry() //  [R1]
         { []
         }
     {offset
       cKcL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKcM; else goto cKcN;
       cKcM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKcN: // global
           (_cKcI::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cKcI::I64 == 0) goto cKcK; else goto cKcJ;
       cKcK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cKcJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cKcI::I64;
           R2 = f6_rC1i_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f7_rC1j_info" {
     f7_rC1j_info:
         const f7_rC1j_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.829367426 UTC

[section ""cstring" . f8_rC1k_bytes" {
     f8_rC1k_bytes:
         I8[] [75,105,110,100,82,101,112,65,112,112,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.832097807 UTC

[section ""data" . f9_rC1l_closure" {
     f9_rC1l_closure:
         const f9_rC1l_info;
         const 0;
         const 0;
         const 0;
 },
 f9_rC1l_entry() //  [R1]
         { []
         }
     {offset
       cKd2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKd3; else goto cKd4;
       cKd3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKd4: // global
           (_cKcZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cKcZ::I64 == 0) goto cKd1; else goto cKd0;
       cKd1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cKd0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cKcZ::I64;
           R2 = f8_rC1k_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f9_rC1l_info" {
     f9_rC1l_info:
         const f9_rC1l_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.835925295 UTC

[section ""cstring" . f10_rC1m_bytes" {
     f10_rC1m_bytes:
         I8[] [75,105,110,100,82,101,112,86,97,114,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.838338377 UTC

[section ""data" . f11_rC1n_closure" {
     f11_rC1n_closure:
         const f11_rC1n_info;
         const 0;
         const 0;
         const 0;
 },
 f11_rC1n_entry() //  [R1]
         { []
         }
     {offset
       cKdj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKdk; else goto cKdl;
       cKdk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKdl: // global
           (_cKdg::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cKdg::I64 == 0) goto cKdi; else goto cKdh;
       cKdi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cKdh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cKdg::I64;
           R2 = f10_rC1m_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f11_rC1n_info" {
     f11_rC1n_info:
         const f11_rC1n_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.842413122 UTC

[section ""cstring" . lvl42_rC1o_bytes" {
     lvl42_rC1o_bytes:
         I8[] [32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.844089789 UTC

[section ""cstring" . lvl43_rC1p_bytes" {
     lvl43_rC1p_bytes:
         I8[] [75,105,110,100,82,101,112,84,121,67,111,110,65,112,112,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:18.897498243 UTC

[section ""data" . GHC.Show.$w$cshowsPrec5_closure" {
     GHC.Show.$w$cshowsPrec5_closure:
         const GHC.Show.$w$cshowsPrec5_info;
         const 0;
 },
 sat_sCxM_entry() //  [R1]
         { []
         }
     {offset
       cKdW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKdX; else goto cKdY;
       cKdX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKdY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCxM_info" {
     sat_sCxM_info:
         const sat_sCxM_entry;
         const 4294967296;
         const 17;
 },
 f12_sCxC_entry() //  [R1]
         { []
         }
     {offset
       cKdZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cKe0; else goto cKe1;
       cKe0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKe1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cKdI_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uKee; else goto cKdJ;
       uKee: // global
           call _cKdI(R1) args: 0, res: 0, upd: 0;
       cKdJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . f12_sCxC_info" {
     f12_sCxC_info:
         const f12_sCxC_entry;
         const 1;
         const 16;
 },
 _cKdI() //  [R1]
         { []
         }
     {offset
       cKdI: // global
           I64[Sp] = block_cKdN_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto uKed; else goto cKdO;
       uKed: // global
           call _cKdN(R1) args: 0, res: 0, upd: 0;
       cKdO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cKdI_info" {
     block_cKdI_info:
         const _cKdI;
         const 0;
         const 30;
 },
 _cKdN() //  [R1]
         { []
         }
     {offset
       cKdN: // global
           if (R1 & 7 == 1) goto cKe4; else goto cKeb;
       cKe4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKe7; else goto cKe6;
       cKe7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cKe6: // global
           _sCxL::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sCxM_info;
           I64[Hp] = _sCxL::I64;
           R2 = Hp - 16;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
       cKeb: // global
           R2 = P64[R1 + 6];
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cKdN_info" {
     block_cKdN_info:
         const _cKdN;
         const 0;
         const 30;
 },
 sat_sCy0_entry() //  [R1]
         { []
         }
     {offset
       cKf1: // global
           _sCy0::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cKf2; else goto cKf3;
       cKf3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKf5; else goto cKf4;
       cKf5: // global
           HpAlloc = 32;
           goto cKf2;
       cKf2: // global
           R1 = _sCy0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKf4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCy0::P64;
           _sCxU::P64 = P64[_sCy0::P64 + 16];
           _sCxX::P64 = P64[_sCy0::P64 + 24];
           _sCxY::P64 = P64[_sCy0::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sCxU::P64;
           P64[Hp] = _sCxY::P64;
           R3 = _sCxX::P64;
           R2 = 0;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Show.$w$cshowsPrec5_entry(R3,
                                              R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCy0_info" {
     sat_sCy0_info:
         const sat_sCy0_entry;
         const 3;
         const 4294967311;
         const SCNU_srt+1360;
 },
 showl_sCxU_entry() //  [R1, R2]
         { []
         }
     {offset
       cKfa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cKfb; else goto cKfc;
       cKfb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKfc: // global
           I64[Sp - 24] = block_cKeQ_info;
           _sCxU::P64 = R1;
           _sCxT::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sCxT::P64;
           P64[Sp - 8] = _sCxU::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uKfj; else goto cKeR;
       uKfj: // global
           call _cKeQ(R1) args: 0, res: 0, upd: 0;
       cKeR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . showl_sCxU_info" {
     showl_sCxU_info:
         const showl_sCxU_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SCNU_srt+1360;
 },
 _cKeQ() //  [R1]
         { []
         }
     {offset
       cKeQ: // global
           if (R1 & 7 == 1) goto cKf7; else goto cKf8;
       cKf7: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cKf8: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cKfi; else goto cKfh;
       cKfi: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cKfh: // global
           _sCxX::P64 = P64[R1 + 6];
           _sCxY::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sCy0_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _sCxX::P64;
           P64[Hp - 24] = _sCxY::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKeQ_info" {
     block_cKeQ_info:
         const _cKeQ;
         const 2;
         const 4294967326;
         const SCNU_srt+1360;
 },
 sat_sCy1_entry() //  [R1]
         { []
         }
     {offset
       cKfk: // global
           _sCy1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKfl; else goto cKfm;
       cKfm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cKfo; else goto cKfn;
       cKfo: // global
           HpAlloc = 40;
           goto cKfl;
       cKfl: // global
           R1 = _sCy1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKfn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCy1::P64;
           _sCxP::P64 = P64[_sCy1::P64 + 16];
           _sCxS::P64 = P64[_sCy1::P64 + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Show.showList__2_closure+1;
           P64[Hp - 16] = _sCxP::P64;
           I64[Hp - 8] = showl_sCxU_info;
           P64[Hp] = Hp - 30;
           R2 = _sCxS::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call showl_sCxU_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCy1_info" {
     sat_sCy1_info:
         const sat_sCy1_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1360;
 },
 sat_sCy2_entry() //  [R1]
         { []
         }
     {offset
       cKfp: // global
           _sCy2::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cKfq; else goto cKfr;
       cKfr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKft; else goto cKfs;
       cKft: // global
           HpAlloc = 32;
           goto cKfq;
       cKfq: // global
           R1 = _sCy2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKfs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCy2::P64;
           _sCxP::P64 = P64[_sCy2::P64 + 16];
           _sCxR::P64 = P64[_sCy2::P64 + 24];
           _sCxS::P64 = P64[_sCy2::P64 + 32];
           I64[Hp - 24] = sat_sCy1_info;
           P64[Hp - 8] = _sCxP::P64;
           P64[Hp] = _sCxS::P64;
           R3 = _sCxR::P64;
           R2 = 0;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Show.$w$cshowsPrec5_entry(R3,
                                              R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCy2_info" {
     sat_sCy2_info:
         const sat_sCy2_entry;
         const 3;
         const 4294967311;
         const SCNU_srt+1360;
 },
 sat_sCy3_entry() //  [R1]
         { []
         }
     {offset
       cKfy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cKfz; else goto cKfA;
       cKfz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKfA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cKew_info;
           _sCxP::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sCxP::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uKfH; else goto cKex;
       uKfH: // global
           call _cKew(R1) args: 0, res: 0, upd: 0;
       cKex: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCy3_info" {
     sat_sCy3_info:
         const sat_sCy3_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1360;
 },
 _cKew() //  [R1]
         { []
         }
     {offset
       cKew: // global
           _sCxP::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cKfv; else goto cKfw;
       cKfv: // global
           R3 = _sCxP::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       cKfw: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cKfG; else goto cKfF;
       cKfG: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cKfF: // global
           _sCxR::P64 = P64[R1 + 6];
           _sCxS::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sCy2_info;
           P64[Hp - 40] = _sCxP::P64;
           P64[Hp - 32] = _sCxR::P64;
           P64[Hp - 24] = _sCxS::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cKew_info" {
     block_cKew_info:
         const _cKew;
         const 1;
         const 4294967326;
         const SCNU_srt+1360;
 },
 sat_sCy4_entry() //  [R1]
         { []
         }
     {offset
       cKfI: // global
           _sCy4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKfJ; else goto cKfK;
       cKfK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKfM; else goto cKfL;
       cKfM: // global
           HpAlloc = 32;
           goto cKfJ;
       cKfJ: // global
           R1 = _sCy4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKfL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCy4::P64;
           _sCxB::P64 = P64[_sCy4::P64 + 16];
           _sCxP::P64 = P64[_sCy4::P64 + 24];
           I64[Hp - 24] = sat_sCy3_info;
           P64[Hp - 8] = _sCxB::P64;
           P64[Hp] = _sCxP::P64;
           R3 = Hp - 24;
           R2 = lvl42_rC1o_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCy4_info" {
     sat_sCy4_info:
         const sat_sCy4_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1360;
 },
 sat_sCy5_entry() //  [R1]
         { []
         }
     {offset
       cKfN: // global
           _sCy5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKfO; else goto cKfP;
       cKfP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKfR; else goto cKfQ;
       cKfR: // global
           HpAlloc = 32;
           goto cKfO;
       cKfO: // global
           R1 = _sCy5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKfQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCy5::P64;
           _sCxB::P64 = P64[_sCy5::P64 + 16];
           _sCxC::P64 = P64[_sCy5::P64 + 24];
           _sCxP::P64 = P64[_sCy5::P64 + 32];
           I64[Hp - 24] = sat_sCy4_info;
           P64[Hp - 8] = _sCxB::P64;
           P64[Hp] = _sCxP::P64;
           R2 = Hp - 24;
           R1 = _sCxC::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCy5_info" {
     sat_sCy5_info:
         const sat_sCy5_entry;
         const 3;
         const 4294967311;
         const SCNU_srt+1360;
 },
 p1_sCxO_entry() //  [R1, R2]
         { []
         }
     {offset
       cKfS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cKfW; else goto cKfV;
       cKfW: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKfV: // global
           _sCxB::P64 = P64[R1 + 7];
           _sCxC::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sCy5_info;
           P64[Hp - 16] = _sCxB::P64;
           P64[Hp - 8] = _sCxC::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = lvl43_rC1p_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p1_sCxO_info" {
     p1_sCxO_info:
         const p1_sCxO_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SCNU_srt+1360;
 },
 sat_sCy9_entry() //  [R1]
         { []
         }
     {offset
       cKgb: // global
           _sCy9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKgc; else goto cKgd;
       cKgd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKgf; else goto cKge;
       cKgf: // global
           HpAlloc = 24;
           goto cKgc;
       cKgc: // global
           R1 = _sCy9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKge: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCy9::P64;
           _sCxO::P64 = P64[_sCy9::P64 + 16];
           _sCy7::P64 = P64[_sCy9::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sCy7::P64;
           R2 = Hp - 14;
           R1 = _sCxO::P64;
           Sp = Sp - 16;
           call p1_sCxO_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCy9_info" {
     sat_sCy9_info:
         const sat_sCy9_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1360;
 },
 sat_sCya_entry() //  [R1, R2]
         { []
         }
     {offset
       cKgh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cKgl; else goto cKgk;
       cKgl: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKgk: // global
           _sCxO::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sCy9_info;
           P64[Hp - 32] = _sCxO::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCya_info" {
     sat_sCya_info:
         const sat_sCya_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SCNU_srt+1360;
 },
 sat_sCym_entry() //  [R1]
         { []
         }
     {offset
       cKgM: // global
           _sCym::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cKgN; else goto cKgO;
       cKgO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKgQ; else goto cKgP;
       cKgQ: // global
           HpAlloc = 24;
           goto cKgN;
       cKgN: // global
           R1 = _sCym::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKgP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCym::P64;
           _sCyd::P64 = P64[_sCym::P64 + 16];
           _sCyb::I64 = I64[_sCym::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sCyd::P64;
           I64[Sp - 24] = block_cKgJ_info;
           R3 = Hp - 14;
           R2 = _sCyb::I64;
           Sp = Sp - 24;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCym_info" {
     sat_sCym_info:
         const sat_sCym_entry;
         const 4294967297;
         const 19;
 },
 _cKgJ() //  [R1, R2]
         { []
         }
     {offset
       cKgJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKgT; else goto cKgS;
       cKgT: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cKgS: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cKgJ_info" {
     block_cKgJ_info:
         const _cKgJ;
         const 0;
         const 30;
 },
 sat_sCyn_entry() //  [R1]
         { []
         }
     {offset
       cKgX: // global
           _sCyn::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cKgY; else goto cKgZ;
       cKgZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cKh1; else goto cKh0;
       cKh1: // global
           HpAlloc = 56;
           goto cKgY;
       cKgY: // global
           R1 = _sCyn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKh0: // global
           _sCyd::P64 = P64[_sCyn::P64 + 16];
           _sCyb::I64 = I64[_sCyn::P64 + 24];
           if (%MO_S_Ge_W64(_sCyb::I64, 0)) goto cKgV; else goto cKgW;
       cKgV: // global
           Hp = Hp - 56;
           I64[Sp - 8] = block_cKh2_info;
           R3 = _sCyd::P64;
           R2 = _sCyb::I64;
           Sp = Sp - 8;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 8;
       cKgW: // global
           I64[Hp - 48] = sat_sCym_info;
           P64[Hp - 32] = _sCyd::P64;
           I64[Hp - 24] = _sCyb::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCyn_info" {
     sat_sCyn_info:
         const sat_sCyn_entry;
         const 4294967297;
         const 19;
 },
 _cKh2() //  [R1, R2]
         { []
         }
     {offset
       cKh2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKh7; else goto cKh6;
       cKh7: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cKh6: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKh2_info" {
     block_cKh2_info:
         const _cKh2;
         const 0;
         const 30;
 },
 sat_sCyo_entry() //  [R1, R2]
         { []
         }
     {offset
       cKh9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKhd; else goto cKhc;
       cKhd: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKhc: // global
           _sCyb::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_sCyn_info;
           P64[Hp - 8] = R2;
           I64[Hp] = _sCyb::I64;
           R3 = Hp - 24;
           R2 = f11_rC1n_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCyo_info" {
     sat_sCyo_info:
         const sat_sCyo_entry;
         const 4294967296;
         const 4294967306;
         const 4294967301;
         const SCNU_srt+1368;
 },
 sat_sCyA_entry() //  [R1]
         { []
         }
     {offset
       cKhF: // global
           _sCyA::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cKhG; else goto cKhH;
       cKhH: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cKhJ; else goto cKhI;
       cKhJ: // global
           HpAlloc = 48;
           goto cKhG;
       cKhG: // global
           R1 = _sCyA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKhI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCyA::P64;
           _sCyp::P64 = P64[_sCyA::P64 + 16];
           _sCyb::I64 = I64[_sCyA::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 24] = _sCyp::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = Hp - 38;
           I64[Sp - 24] = block_cKhC_info;
           R3 = Hp - 14;
           R2 = _sCyb::I64;
           Sp = Sp - 24;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCyA_info" {
     sat_sCyA_info:
         const sat_sCyA_entry;
         const 4294967297;
         const 19;
 },
 _cKhC() //  [R1, R2]
         { []
         }
     {offset
       cKhC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKhM; else goto cKhL;
       cKhM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cKhL: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cKhC_info" {
     block_cKhC_info:
         const _cKhC;
         const 0;
         const 30;
 },
 sat_sCyB_entry() //  [R1]
         { []
         }
     {offset
       cKhQ: // global
           _sCyB::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cKhR; else goto cKhS;
       cKhS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cKhU; else goto cKhT;
       cKhU: // global
           HpAlloc = 56;
           goto cKhR;
       cKhR: // global
           R1 = _sCyB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKhT: // global
           _sCyp::P64 = P64[_sCyB::P64 + 16];
           _sCyb::I64 = I64[_sCyB::P64 + 24];
           if (%MO_S_Ge_W64(_sCyb::I64, 0)) goto cKhO; else goto cKhP;
       cKhO: // global
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 32] = _sCyp::P64;
           _cKhV::P64 = Hp - 46;
           Hp = Hp - 32;
           I64[Sp - 8] = block_cKhW_info;
           R3 = _cKhV::P64;
           R2 = _sCyb::I64;
           Sp = Sp - 8;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 8;
       cKhP: // global
           I64[Hp - 48] = sat_sCyA_info;
           P64[Hp - 32] = _sCyp::P64;
           I64[Hp - 24] = _sCyb::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCyB_info" {
     sat_sCyB_info:
         const sat_sCyB_entry;
         const 4294967297;
         const 19;
 },
 _cKhW() //  [R1, R2]
         { []
         }
     {offset
       cKhW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKi1; else goto cKi0;
       cKi1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cKi0: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKhW_info" {
     block_cKhW_info:
         const _cKhW;
         const 0;
         const 30;
 },
 sat_sCyC_entry() //  [R1]
         { []
         }
     {offset
       cKi3: // global
           _sCyC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKi4; else goto cKi5;
       cKi5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKi7; else goto cKi6;
       cKi7: // global
           HpAlloc = 32;
           goto cKi4;
       cKi4: // global
           R1 = _sCyC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKi6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCyC::P64;
           _sCyp::P64 = P64[_sCyC::P64 + 16];
           _sCyb::I64 = I64[_sCyC::P64 + 24];
           I64[Hp - 24] = sat_sCyB_info;
           P64[Hp - 8] = _sCyp::P64;
           I64[Hp] = _sCyb::I64;
           R3 = Hp - 24;
           R2 = f11_rC1n_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCyC_info" {
     sat_sCyC_info:
         const sat_sCyC_entry;
         const 4294967297;
         const 4294967315;
         const SCNU_srt+1368;
 },
 sat_sCyD_entry() //  [R1, R2]
         { []
         }
     {offset
       cKi9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cKid; else goto cKic;
       cKid: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKic: // global
           _sCyb::I64 = I64[R1 + 7];
           I64[Hp - 48] = sat_sCyC_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = _sCyb::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCyD_info" {
     sat_sCyD_info:
         const sat_sCyD_entry;
         const 4294967296;
         const 4294967306;
         const 4294967301;
         const SCNU_srt+1368;
 },
 f12_sCyG_entry() //  [R1]
         { []
         }
     {offset
       cKik: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKil; else goto cKim;
       cKil: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKim: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = 11;
           Sp = Sp - 16;
           call GHC.Show.$w$cshowsPrec5_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f12_sCyG_info" {
     f12_sCyG_info:
         const f12_sCyG_entry;
         const 1;
         const 4294967312;
         const SCNU_srt+1360;
 },
 g_sCyH_entry() //  [R1]
         { []
         }
     {offset
       cKir: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKis; else goto cKit;
       cKis: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKit: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = 11;
           Sp = Sp - 16;
           call GHC.Show.$w$cshowsPrec5_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sCyH_info" {
     g_sCyH_info:
         const g_sCyH_entry;
         const 1;
         const 4294967312;
         const SCNU_srt+1360;
 },
 sat_sCyL_entry() //  [R1]
         { []
         }
     {offset
       cKiL: // global
           _sCyL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKiM; else goto cKiN;
       cKiN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKiP; else goto cKiO;
       cKiP: // global
           HpAlloc = 32;
           goto cKiM;
       cKiM: // global
           R1 = _sCyL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKiO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCyL::P64;
           _sCyH::P64 = P64[_sCyL::P64 + 16];
           _sCyJ::P64 = P64[_sCyL::P64 + 24];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sCyH::P64;
           P64[Hp] = _sCyJ::P64;
           R3 = Hp - 24;
           R2 = lvl42_rC1o_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCyL_info" {
     sat_sCyL_info:
         const sat_sCyL_entry;
         const 2;
         const 18;
 },
 sat_sCyM_entry() //  [R1]
         { []
         }
     {offset
       cKiQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKiU; else goto cKiT;
       cKiU: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKiT: // global
           _sCyG::P64 = P64[R1 + 16];
           _sCyH::P64 = P64[R1 + 24];
           _sCyJ::P64 = P64[R1 + 32];
           I64[Hp - 24] = sat_sCyL_info;
           P64[Hp - 8] = _sCyH::P64;
           P64[Hp] = _sCyJ::P64;
           R2 = Hp - 24;
           R1 = _sCyG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCyM_info" {
     sat_sCyM_info:
         const sat_sCyM_entry;
         const 3;
         const 15;
 },
 sat_sCyN_entry() //  [R1, R2]
         { []
         }
     {offset
       cKiV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cKiZ; else goto cKiY;
       cKiZ: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKiY: // global
           _sCyG::P64 = P64[R1 + 7];
           _sCyH::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sCyM_info;
           P64[Hp - 16] = _sCyG::P64;
           P64[Hp - 8] = _sCyH::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = f9_rC1l_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCyN_info" {
     sat_sCyN_info:
         const sat_sCyN_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SCNU_srt+1376;
 },
 sat_sCyQ_entry() //  [R1]
         { []
         }
     {offset
       cKjn: // global
           _sCyQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKjo; else goto cKjp;
       cKjp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKjr; else goto cKjq;
       cKjr: // global
           HpAlloc = 24;
           goto cKjo;
       cKjo: // global
           R1 = _sCyQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKjq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCyQ::P64;
           _sCyH::P64 = P64[_sCyQ::P64 + 16];
           _sCyO::P64 = P64[_sCyQ::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sCyO::P64;
           R2 = Hp - 14;
           R1 = _sCyH::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCyQ_info" {
     sat_sCyQ_info:
         const sat_sCyQ_entry;
         const 2;
         const 18;
 },
 sat_sCyR_entry() //  [R1]
         { []
         }
     {offset
       cKjs: // global
           _sCyR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKjt; else goto cKju;
       cKju: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKjw; else goto cKjv;
       cKjw: // global
           HpAlloc = 32;
           goto cKjt;
       cKjt: // global
           R1 = _sCyR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKjv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCyR::P64;
           _sCyH::P64 = P64[_sCyR::P64 + 16];
           _sCyO::P64 = P64[_sCyR::P64 + 24];
           I64[Hp - 24] = sat_sCyQ_info;
           P64[Hp - 8] = _sCyH::P64;
           P64[Hp] = _sCyO::P64;
           R3 = Hp - 24;
           R2 = lvl42_rC1o_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCyR_info" {
     sat_sCyR_info:
         const sat_sCyR_entry;
         const 2;
         const 18;
 },
 sat_sCyS_entry() //  [R1]
         { []
         }
     {offset
       cKjx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKjB; else goto cKjA;
       cKjB: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKjA: // global
           _sCyG::P64 = P64[R1 + 16];
           _sCyH::P64 = P64[R1 + 24];
           _sCyO::P64 = P64[R1 + 32];
           I64[Hp - 24] = sat_sCyR_info;
           P64[Hp - 8] = _sCyH::P64;
           P64[Hp] = _sCyO::P64;
           R2 = Hp - 24;
           R1 = _sCyG::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCyS_info" {
     sat_sCyS_info:
         const sat_sCyS_entry;
         const 3;
         const 15;
 },
 sat_sCyT_entry() //  [R1]
         { []
         }
     {offset
       cKjC: // global
           _sCyT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKjD; else goto cKjE;
       cKjE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cKjG; else goto cKjF;
       cKjG: // global
           HpAlloc = 40;
           goto cKjD;
       cKjD: // global
           R1 = _sCyT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKjF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCyT::P64;
           _sCyG::P64 = P64[_sCyT::P64 + 16];
           _sCyH::P64 = P64[_sCyT::P64 + 24];
           _sCyO::P64 = P64[_sCyT::P64 + 32];
           I64[Hp - 32] = sat_sCyS_info;
           P64[Hp - 16] = _sCyG::P64;
           P64[Hp - 8] = _sCyH::P64;
           P64[Hp] = _sCyO::P64;
           R3 = Hp - 32;
           R2 = f9_rC1l_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCyT_info" {
     sat_sCyT_info:
         const sat_sCyT_entry;
         const 3;
         const 4294967311;
         const SCNU_srt+1376;
 },
 sat_sCyU_entry() //  [R1, R2]
         { []
         }
     {offset
       cKjI: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cKjM; else goto cKjL;
       cKjM: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKjL: // global
           _sCyG::P64 = P64[R1 + 7];
           _sCyH::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sCyT_info;
           P64[Hp - 40] = _sCyG::P64;
           P64[Hp - 32] = _sCyH::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCyU_info" {
     sat_sCyU_info:
         const sat_sCyU_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SCNU_srt+1376;
 },
 f12_sCyX_entry() //  [R1]
         { []
         }
     {offset
       cKjT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKjU; else goto cKjV;
       cKjU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKjV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = 11;
           Sp = Sp - 16;
           call GHC.Show.$w$cshowsPrec5_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f12_sCyX_info" {
     f12_sCyX_info:
         const f12_sCyX_entry;
         const 1;
         const 4294967312;
         const SCNU_srt+1360;
 },
 g_sCyY_entry() //  [R1]
         { []
         }
     {offset
       cKk0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKk1; else goto cKk2;
       cKk1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKk2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = 11;
           Sp = Sp - 16;
           call GHC.Show.$w$cshowsPrec5_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sCyY_info" {
     g_sCyY_info:
         const g_sCyY_entry;
         const 1;
         const 4294967312;
         const SCNU_srt+1360;
 },
 sat_sCz2_entry() //  [R1]
         { []
         }
     {offset
       cKkk: // global
           _sCz2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKkl; else goto cKkm;
       cKkm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKko; else goto cKkn;
       cKko: // global
           HpAlloc = 32;
           goto cKkl;
       cKkl: // global
           R1 = _sCz2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKkn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCz2::P64;
           _sCyY::P64 = P64[_sCz2::P64 + 16];
           _sCz0::P64 = P64[_sCz2::P64 + 24];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sCyY::P64;
           P64[Hp] = _sCz0::P64;
           R3 = Hp - 24;
           R2 = lvl42_rC1o_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCz2_info" {
     sat_sCz2_info:
         const sat_sCz2_entry;
         const 2;
         const 18;
 },
 sat_sCz3_entry() //  [R1]
         { []
         }
     {offset
       cKkp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKkt; else goto cKks;
       cKkt: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKks: // global
           _sCyX::P64 = P64[R1 + 16];
           _sCyY::P64 = P64[R1 + 24];
           _sCz0::P64 = P64[R1 + 32];
           I64[Hp - 24] = sat_sCz2_info;
           P64[Hp - 8] = _sCyY::P64;
           P64[Hp] = _sCz0::P64;
           R2 = Hp - 24;
           R1 = _sCyX::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCz3_info" {
     sat_sCz3_info:
         const sat_sCz3_entry;
         const 3;
         const 15;
 },
 sat_sCz4_entry() //  [R1, R2]
         { []
         }
     {offset
       cKku: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cKky; else goto cKkx;
       cKky: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKkx: // global
           _sCyX::P64 = P64[R1 + 7];
           _sCyY::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sCz3_info;
           P64[Hp - 16] = _sCyX::P64;
           P64[Hp - 8] = _sCyY::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = f7_rC1j_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCz4_info" {
     sat_sCz4_info:
         const sat_sCz4_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SCNU_srt+1384;
 },
 sat_sCz7_entry() //  [R1]
         { []
         }
     {offset
       cKkW: // global
           _sCz7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKkX; else goto cKkY;
       cKkY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKl0; else goto cKkZ;
       cKl0: // global
           HpAlloc = 24;
           goto cKkX;
       cKkX: // global
           R1 = _sCz7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKkZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCz7::P64;
           _sCyY::P64 = P64[_sCz7::P64 + 16];
           _sCz5::P64 = P64[_sCz7::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sCz5::P64;
           R2 = Hp - 14;
           R1 = _sCyY::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCz7_info" {
     sat_sCz7_info:
         const sat_sCz7_entry;
         const 2;
         const 18;
 },
 sat_sCz8_entry() //  [R1]
         { []
         }
     {offset
       cKl1: // global
           _sCz8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKl2; else goto cKl3;
       cKl3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKl5; else goto cKl4;
       cKl5: // global
           HpAlloc = 32;
           goto cKl2;
       cKl2: // global
           R1 = _sCz8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKl4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCz8::P64;
           _sCyY::P64 = P64[_sCz8::P64 + 16];
           _sCz5::P64 = P64[_sCz8::P64 + 24];
           I64[Hp - 24] = sat_sCz7_info;
           P64[Hp - 8] = _sCyY::P64;
           P64[Hp] = _sCz5::P64;
           R3 = Hp - 24;
           R2 = lvl42_rC1o_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCz8_info" {
     sat_sCz8_info:
         const sat_sCz8_entry;
         const 2;
         const 18;
 },
 sat_sCz9_entry() //  [R1]
         { []
         }
     {offset
       cKl6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKla; else goto cKl9;
       cKla: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKl9: // global
           _sCyX::P64 = P64[R1 + 16];
           _sCyY::P64 = P64[R1 + 24];
           _sCz5::P64 = P64[R1 + 32];
           I64[Hp - 24] = sat_sCz8_info;
           P64[Hp - 8] = _sCyY::P64;
           P64[Hp] = _sCz5::P64;
           R2 = Hp - 24;
           R1 = _sCyX::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCz9_info" {
     sat_sCz9_info:
         const sat_sCz9_entry;
         const 3;
         const 15;
 },
 sat_sCza_entry() //  [R1]
         { []
         }
     {offset
       cKlb: // global
           _sCza::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKlc; else goto cKld;
       cKld: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cKlf; else goto cKle;
       cKlf: // global
           HpAlloc = 40;
           goto cKlc;
       cKlc: // global
           R1 = _sCza::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKle: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCza::P64;
           _sCyX::P64 = P64[_sCza::P64 + 16];
           _sCyY::P64 = P64[_sCza::P64 + 24];
           _sCz5::P64 = P64[_sCza::P64 + 32];
           I64[Hp - 32] = sat_sCz9_info;
           P64[Hp - 16] = _sCyX::P64;
           P64[Hp - 8] = _sCyY::P64;
           P64[Hp] = _sCz5::P64;
           R3 = Hp - 32;
           R2 = f7_rC1j_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCza_info" {
     sat_sCza_info:
         const sat_sCza_entry;
         const 3;
         const 4294967311;
         const SCNU_srt+1384;
 },
 sat_sCzb_entry() //  [R1, R2]
         { []
         }
     {offset
       cKlh: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cKll; else goto cKlk;
       cKll: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKlk: // global
           _sCyX::P64 = P64[R1 + 7];
           _sCyY::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sCza_info;
           P64[Hp - 40] = _sCyX::P64;
           P64[Hp - 32] = _sCyY::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCzb_info" {
     sat_sCzb_info:
         const sat_sCzb_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SCNU_srt+1384;
 },
 sat_sCzf_entry() //  [R1]
         { []
         }
     {offset
       cKlA: // global
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = GHC.Show.appPrec1_closure+1;
           call GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCzf_info" {
     sat_sCzf_info:
         const sat_sCzf_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1160;
 },
 sat_sCzg_entry() //  [R1, R2]
         { []
         }
     {offset
       cKlD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKlH; else goto cKlG;
       cKlH: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKlG: // global
           _sCzc::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sCzf_info;
           P64[Hp - 8] = _sCzc::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = f5_rC1h_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCzg_info" {
     sat_sCzg_info:
         const sat_sCzg_entry;
         const 1;
         const 2305843013508661257;
         const 4294967301;
         const SCNU_srt+1160;
 },
 sat_sCzj_entry() //  [R1]
         { []
         }
     {offset
       cKlX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKm1; else goto cKm0;
       cKm1: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKm0: // global
           _sCzc::P64 = P64[R1 + 16];
           _sCzh::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sCzh::P64;
           R4 = Hp - 14;
           R3 = _sCzc::P64;
           R2 = GHC.Show.appPrec1_closure+1;
           call GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCzj_info" {
     sat_sCzj_info:
         const sat_sCzj_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1160;
 },
 sat_sCzk_entry() //  [R1]
         { []
         }
     {offset
       cKm2: // global
           _sCzk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKm3; else goto cKm4;
       cKm4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKm6; else goto cKm5;
       cKm6: // global
           HpAlloc = 32;
           goto cKm3;
       cKm3: // global
           R1 = _sCzk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKm5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCzk::P64;
           _sCzc::P64 = P64[_sCzk::P64 + 16];
           _sCzh::P64 = P64[_sCzk::P64 + 24];
           I64[Hp - 24] = sat_sCzj_info;
           P64[Hp - 8] = _sCzc::P64;
           P64[Hp] = _sCzh::P64;
           R3 = Hp - 24;
           R2 = f5_rC1h_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCzk_info" {
     sat_sCzk_info:
         const sat_sCzk_entry;
         const 2;
         const 2305843013508661266;
         const SCNU_srt+1160;
 },
 sat_sCzl_entry() //  [R1, R2]
         { []
         }
     {offset
       cKm8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cKmc; else goto cKmb;
       cKmc: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKmb: // global
           _sCzc::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sCzk_info;
           P64[Hp - 32] = _sCzc::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCzl_info" {
     sat_sCzl_info:
         const sat_sCzl_entry;
         const 1;
         const 2305843013508661257;
         const 4294967301;
         const SCNU_srt+1160;
 },
 cs_sCzo_entry() //  [R1]
         { []
         }
     {offset
       cKmj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKmk; else goto cKml;
       cKmk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKml: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . cs_sCzo_info" {
     cs_sCzo_info:
         const cs_sCzo_entry;
         const 4294967296;
         const 17;
 },
 sat_sCzt_entry() //  [R1]
         { []
         }
     {offset
       cKmM: // global
           _sCzt::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKmN; else goto cKmO;
       cKmO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKmQ; else goto cKmP;
       cKmQ: // global
           HpAlloc = 24;
           goto cKmN;
       cKmN: // global
           R1 = _sCzt::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKmP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCzt::P64;
           _sCzo::P64 = P64[_sCzt::P64 + 16];
           _sCzq::P64 = P64[_sCzt::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = _sCzq::P64;
           R3 = Hp - 14;
           R2 = _sCzo::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCzt_info" {
     sat_sCzt_info:
         const sat_sCzt_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1400;
 },
 sat_sCzv_entry() //  [R1]
         { []
         }
     {offset
       cKmS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cKmW; else goto cKmV;
       cKmW: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKmV: // global
           _sCzo::P64 = P64[R1 + 16];
           _sCzq::P64 = P64[R1 + 24];
           I64[Hp - 48] = sat_sCzt_info;
           P64[Hp - 32] = _sCzo::P64;
           P64[Hp - 24] = _sCzq::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = lvl42_rC1o_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCzv_info" {
     sat_sCzv_info:
         const sat_sCzv_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1400;
 },
 sat_sCzx_entry() //  [R1]
         { []
         }
     {offset
       cKn8: // global
           _sCzx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKn9; else goto cKna;
       cKna: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKnc; else goto cKnb;
       cKnc: // global
           HpAlloc = 24;
           goto cKn9;
       cKn9: // global
           R1 = _sCzx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKnb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCzx::P64;
           _sCzo::P64 = P64[_sCzx::P64 + 16];
           _sCzq::P64 = P64[_sCzx::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = _sCzq::P64;
           R3 = Hp - 14;
           R2 = _sCzo::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCzx_info" {
     sat_sCzx_info:
         const sat_sCzx_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1400;
 },
 sat_sCzz_entry() //  [R1]
         { []
         }
     {offset
       cKne: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cKni; else goto cKnh;
       cKni: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKnh: // global
           _sCzo::P64 = P64[R1 + 16];
           _sCzq::P64 = P64[R1 + 24];
           I64[Hp - 48] = sat_sCzx_info;
           P64[Hp - 32] = _sCzo::P64;
           P64[Hp - 24] = _sCzq::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = lvl42_rC1o_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCzz_info" {
     sat_sCzz_info:
         const sat_sCzz_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1400;
 },
 section ""relreadonly" . uKsD_srtd" {
     uKsD_srtd:
         const SCNU_srt+728;
         const 85;
         const 3;
         const 1048576;
 },
 sat_sCzA_entry() //  [R1]
         { []
         }
     {offset
       cKnn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cKno; else goto cKnp;
       cKno: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKnp: // global
           I64[Sp - 24] = block_cKmy_info;
           _sCzo::P64 = P64[R1 + 24];
           _sCzq::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 16] = _sCzo::P64;
           P64[Sp - 8] = _sCzq::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uKnw; else goto cKmz;
       uKnw: // global
           call _cKmy(R1) args: 0, res: 0, upd: 0;
       cKmz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCzA_info" {
     sat_sCzA_info:
         const sat_sCzA_entry;
         const 3;
         const 18446744069414584335;
         const uKsD_srtd;
 },
 section ""relreadonly" . uKsE_srtd" {
     uKsE_srtd:
         const SCNU_srt+728;
         const 85;
         const 3;
         const 1048576;
 },
 _cKmy() //  [R1]
         { []
         }
     {offset
       cKmy: // global
           _sCzo::P64 = P64[Sp + 8];
           _sCzq::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cKnk; else goto cKnl;
       cKnk: // global
           Hp = Hp + 32;
           _sCzr::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cKnv; else goto cKnr;
       cKnr: // global
           I64[Hp - 24] = sat_sCzv_info;
           P64[Hp - 8] = _sCzo::P64;
           P64[Hp] = _sCzq::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowTypeLitSort4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cKnl: // global
           Hp = Hp + 32;
           _sCzr::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cKnv; else goto cKnu;
       cKnv: // global
           HpAlloc = 32;
           R1 = _sCzr::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cKnu: // global
           I64[Hp - 24] = sat_sCzz_info;
           P64[Hp - 8] = _sCzo::P64;
           P64[Hp] = _sCzq::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowTypeLitSort2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKmy_info" {
     block_cKmy_info:
         const _cKmy;
         const 2;
         const 18446744069414584350;
         const uKsE_srtd;
 },
 section ""relreadonly" . uKsF_srtd" {
     uKsF_srtd:
         const SCNU_srt+728;
         const 86;
         const 3;
         const 3145728;
 },
 sat_sCzB_entry() //  [R1, R2]
         { []
         }
     {offset
       cKnx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cKnB; else goto cKnA;
       cKnB: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKnA: // global
           _sCzm::P64 = P64[R1 + 7];
           _sCzo::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sCzA_info;
           P64[Hp - 16] = _sCzm::P64;
           P64[Hp - 8] = _sCzo::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = f3_rC1f_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCzB_info" {
     sat_sCzB_info:
         const sat_sCzB_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const uKsF_srtd;
 },
 sat_sCzG_entry() //  [R1]
         { []
         }
     {offset
       cKo5: // global
           _sCzG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKo6; else goto cKo7;
       cKo7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cKo9; else goto cKo8;
       cKo9: // global
           HpAlloc = 48;
           goto cKo6;
       cKo6: // global
           R1 = _sCzG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKo8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCzG::P64;
           _sCzo::P64 = P64[_sCzG::P64 + 16];
           _sCzC::P64 = P64[_sCzG::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 24] = _sCzC::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _sCzo::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCzG_info" {
     sat_sCzG_info:
         const sat_sCzG_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1400;
 },
 sat_sCzI_entry() //  [R1]
         { []
         }
     {offset
       cKob: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cKof; else goto cKoe;
       cKof: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKoe: // global
           _sCzo::P64 = P64[R1 + 16];
           _sCzC::P64 = P64[R1 + 24];
           I64[Hp - 48] = sat_sCzG_info;
           P64[Hp - 32] = _sCzo::P64;
           P64[Hp - 24] = _sCzC::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = lvl42_rC1o_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCzI_info" {
     sat_sCzI_info:
         const sat_sCzI_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1400;
 },
 sat_sCzL_entry() //  [R1]
         { []
         }
     {offset
       cKos: // global
           _sCzL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKot; else goto cKou;
       cKou: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cKow; else goto cKov;
       cKow: // global
           HpAlloc = 48;
           goto cKot;
       cKot: // global
           R1 = _sCzL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKov: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCzL::P64;
           _sCzo::P64 = P64[_sCzL::P64 + 16];
           _sCzC::P64 = P64[_sCzL::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 24] = _sCzC::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _sCzo::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCzL_info" {
     sat_sCzL_info:
         const sat_sCzL_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1400;
 },
 sat_sCzN_entry() //  [R1]
         { []
         }
     {offset
       cKoy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cKoC; else goto cKoB;
       cKoC: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKoB: // global
           _sCzo::P64 = P64[R1 + 16];
           _sCzC::P64 = P64[R1 + 24];
           I64[Hp - 48] = sat_sCzL_info;
           P64[Hp - 32] = _sCzo::P64;
           P64[Hp - 24] = _sCzC::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = lvl42_rC1o_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCzN_info" {
     sat_sCzN_info:
         const sat_sCzN_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1400;
 },
 section ""relreadonly" . uKsG_srtd" {
     uKsG_srtd:
         const SCNU_srt+728;
         const 85;
         const 3;
         const 1048576;
 },
 sat_sCzO_entry() //  [R1]
         { []
         }
     {offset
       cKoH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cKoI; else goto cKoJ;
       cKoI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKoJ: // global
           I64[Sp - 24] = block_cKnQ_info;
           _sCzo::P64 = P64[R1 + 24];
           _sCzC::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 16] = _sCzo::P64;
           P64[Sp - 8] = _sCzC::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uKoQ; else goto cKnR;
       uKoQ: // global
           call _cKnQ(R1) args: 0, res: 0, upd: 0;
       cKnR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCzO_info" {
     sat_sCzO_info:
         const sat_sCzO_entry;
         const 3;
         const 18446744069414584335;
         const uKsG_srtd;
 },
 section ""relreadonly" . uKsH_srtd" {
     uKsH_srtd:
         const SCNU_srt+728;
         const 85;
         const 3;
         const 1048576;
 },
 _cKnQ() //  [R1]
         { []
         }
     {offset
       cKnQ: // global
           _sCzo::P64 = P64[Sp + 8];
           _sCzC::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cKoE; else goto cKoF;
       cKoE: // global
           Hp = Hp + 32;
           _sCzD::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cKoP; else goto cKoL;
       cKoL: // global
           I64[Hp - 24] = sat_sCzI_info;
           P64[Hp - 8] = _sCzo::P64;
           P64[Hp] = _sCzC::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowTypeLitSort4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cKoF: // global
           Hp = Hp + 32;
           _sCzD::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cKoP; else goto cKoO;
       cKoP: // global
           HpAlloc = 32;
           R1 = _sCzD::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cKoO: // global
           I64[Hp - 24] = sat_sCzN_info;
           P64[Hp - 8] = _sCzo::P64;
           P64[Hp] = _sCzC::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowTypeLitSort2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKnQ_info" {
     block_cKnQ_info:
         const _cKnQ;
         const 2;
         const 18446744069414584350;
         const uKsH_srtd;
 },
 section ""relreadonly" . uKsI_srtd" {
     uKsI_srtd:
         const SCNU_srt+728;
         const 86;
         const 3;
         const 3145728;
 },
 sat_sCzP_entry() //  [R1]
         { []
         }
     {offset
       cKoR: // global
           _sCzP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKoS; else goto cKoT;
       cKoT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cKoV; else goto cKoU;
       cKoV: // global
           HpAlloc = 40;
           goto cKoS;
       cKoS: // global
           R1 = _sCzP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKoU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCzP::P64;
           _sCzm::P64 = P64[_sCzP::P64 + 16];
           _sCzo::P64 = P64[_sCzP::P64 + 24];
           _sCzC::P64 = P64[_sCzP::P64 + 32];
           I64[Hp - 32] = sat_sCzO_info;
           P64[Hp - 16] = _sCzm::P64;
           P64[Hp - 8] = _sCzo::P64;
           P64[Hp] = _sCzC::P64;
           R3 = Hp - 32;
           R2 = f3_rC1f_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCzP_info" {
     sat_sCzP_info:
         const sat_sCzP_entry;
         const 3;
         const 18446744069414584335;
         const uKsI_srtd;
 },
 section ""relreadonly" . uKsJ_srtd" {
     uKsJ_srtd:
         const SCNU_srt+728;
         const 86;
         const 3;
         const 3145728;
 },
 sat_sCzQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cKoX: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cKp1; else goto cKp0;
       cKp1: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKp0: // global
           _sCzm::P64 = P64[R1 + 7];
           _sCzo::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sCzP_info;
           P64[Hp - 40] = _sCzm::P64;
           P64[Hp - 32] = _sCzo::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCzQ_info" {
     sat_sCzQ_info:
         const sat_sCzQ_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const uKsJ_srtd;
 },
 sat_sCzX_entry() //  [R1]
         { []
         }
     {offset
       cKpu: // global
           _sCzX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKpv; else goto cKpw;
       cKpw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKpy; else goto cKpx;
       cKpy: // global
           HpAlloc = 24;
           goto cKpv;
       cKpv: // global
           R1 = _sCzX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKpx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCzX::P64;
           _sCzS::P64 = P64[_sCzX::P64 + 16];
           _sCzU::P64 = P64[_sCzX::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = _sCzU::P64;
           R3 = Hp - 14;
           R2 = _sCzS::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCzX_info" {
     sat_sCzX_info:
         const sat_sCzX_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1400;
 },
 sat_sCzZ_entry() //  [R1]
         { []
         }
     {offset
       cKpA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cKpE; else goto cKpD;
       cKpE: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKpD: // global
           _sCzS::P64 = P64[R1 + 16];
           _sCzU::P64 = P64[R1 + 24];
           I64[Hp - 48] = sat_sCzX_info;
           P64[Hp - 32] = _sCzS::P64;
           P64[Hp - 24] = _sCzU::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = lvl42_rC1o_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCzZ_info" {
     sat_sCzZ_info:
         const sat_sCzZ_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1400;
 },
 sat_sCA1_entry() //  [R1]
         { []
         }
     {offset
       cKpQ: // global
           _sCA1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKpR; else goto cKpS;
       cKpS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKpU; else goto cKpT;
       cKpU: // global
           HpAlloc = 24;
           goto cKpR;
       cKpR: // global
           R1 = _sCA1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKpT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCA1::P64;
           _sCzS::P64 = P64[_sCA1::P64 + 16];
           _sCzU::P64 = P64[_sCA1::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = _sCzU::P64;
           R3 = Hp - 14;
           R2 = _sCzS::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCA1_info" {
     sat_sCA1_info:
         const sat_sCA1_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1400;
 },
 sat_sCA3_entry() //  [R1]
         { []
         }
     {offset
       cKpW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cKq0; else goto cKpZ;
       cKq0: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKpZ: // global
           _sCzS::P64 = P64[R1 + 16];
           _sCzU::P64 = P64[R1 + 24];
           I64[Hp - 48] = sat_sCA1_info;
           P64[Hp - 32] = _sCzS::P64;
           P64[Hp - 24] = _sCzU::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = lvl42_rC1o_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCA3_info" {
     sat_sCA3_info:
         const sat_sCA3_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1400;
 },
 section ""relreadonly" . uKsK_srtd" {
     uKsK_srtd:
         const SCNU_srt+728;
         const 85;
         const 3;
         const 1048576;
 },
 sat_sCA4_entry() //  [R1]
         { []
         }
     {offset
       cKq5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cKq6; else goto cKq7;
       cKq6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKq7: // global
           I64[Sp - 24] = block_cKpg_info;
           _sCzS::P64 = P64[R1 + 24];
           _sCzU::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 16] = _sCzS::P64;
           P64[Sp - 8] = _sCzU::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uKqe; else goto cKph;
       uKqe: // global
           call _cKpg(R1) args: 0, res: 0, upd: 0;
       cKph: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCA4_info" {
     sat_sCA4_info:
         const sat_sCA4_entry;
         const 3;
         const 18446744069414584335;
         const uKsK_srtd;
 },
 section ""relreadonly" . uKsL_srtd" {
     uKsL_srtd:
         const SCNU_srt+728;
         const 85;
         const 3;
         const 1048576;
 },
 _cKpg() //  [R1]
         { []
         }
     {offset
       cKpg: // global
           _sCzS::P64 = P64[Sp + 8];
           _sCzU::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cKq2; else goto cKq3;
       cKq2: // global
           Hp = Hp + 32;
           _sCzV::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cKqd; else goto cKq9;
       cKq9: // global
           I64[Hp - 24] = sat_sCzZ_info;
           P64[Hp - 8] = _sCzS::P64;
           P64[Hp] = _sCzU::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowTypeLitSort4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cKq3: // global
           Hp = Hp + 32;
           _sCzV::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cKqd; else goto cKqc;
       cKqd: // global
           HpAlloc = 32;
           R1 = _sCzV::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cKqc: // global
           I64[Hp - 24] = sat_sCA3_info;
           P64[Hp - 8] = _sCzS::P64;
           P64[Hp] = _sCzU::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowTypeLitSort2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKpg_info" {
     block_cKpg_info:
         const _cKpg;
         const 2;
         const 18446744069414584350;
         const uKsL_srtd;
 },
 section ""relreadonly" . uKsM_srtd" {
     uKsM_srtd:
         const SCNU_srt+728;
         const 87;
         const 3;
         const 5242880;
 },
 sat_sCA5_entry() //  [R1, R2]
         { []
         }
     {offset
       cKqf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cKqj; else goto cKqi;
       cKqj: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKqi: // global
           _sCzR::P64 = P64[R1 + 7];
           _sCzS::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sCA4_info;
           P64[Hp - 16] = _sCzR::P64;
           P64[Hp - 8] = _sCzS::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = f1_rC1d_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCA5_info" {
     sat_sCA5_info:
         const sat_sCA5_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const uKsM_srtd;
 },
 sat_sCAa_entry() //  [R1]
         { []
         }
     {offset
       cKqN: // global
           _sCAa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKqO; else goto cKqP;
       cKqP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cKqR; else goto cKqQ;
       cKqR: // global
           HpAlloc = 48;
           goto cKqO;
       cKqO: // global
           R1 = _sCAa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKqQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCAa::P64;
           _sCzS::P64 = P64[_sCAa::P64 + 16];
           _sCA6::P64 = P64[_sCAa::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 24] = _sCA6::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _sCzS::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCAa_info" {
     sat_sCAa_info:
         const sat_sCAa_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1400;
 },
 sat_sCAc_entry() //  [R1]
         { []
         }
     {offset
       cKqT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cKqX; else goto cKqW;
       cKqX: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKqW: // global
           _sCzS::P64 = P64[R1 + 16];
           _sCA6::P64 = P64[R1 + 24];
           I64[Hp - 48] = sat_sCAa_info;
           P64[Hp - 32] = _sCzS::P64;
           P64[Hp - 24] = _sCA6::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = lvl42_rC1o_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCAc_info" {
     sat_sCAc_info:
         const sat_sCAc_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1400;
 },
 sat_sCAf_entry() //  [R1]
         { []
         }
     {offset
       cKra: // global
           _sCAf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKrb; else goto cKrc;
       cKrc: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cKre; else goto cKrd;
       cKre: // global
           HpAlloc = 48;
           goto cKrb;
       cKrb: // global
           R1 = _sCAf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKrd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCAf::P64;
           _sCzS::P64 = P64[_sCAf::P64 + 16];
           _sCA6::P64 = P64[_sCAf::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 24] = _sCA6::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _sCzS::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCAf_info" {
     sat_sCAf_info:
         const sat_sCAf_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1400;
 },
 sat_sCAh_entry() //  [R1]
         { []
         }
     {offset
       cKrg: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cKrk; else goto cKrj;
       cKrk: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKrj: // global
           _sCzS::P64 = P64[R1 + 16];
           _sCA6::P64 = P64[R1 + 24];
           I64[Hp - 48] = sat_sCAf_info;
           P64[Hp - 32] = _sCzS::P64;
           P64[Hp - 24] = _sCA6::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = lvl42_rC1o_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCAh_info" {
     sat_sCAh_info:
         const sat_sCAh_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1400;
 },
 section ""relreadonly" . uKsN_srtd" {
     uKsN_srtd:
         const SCNU_srt+728;
         const 85;
         const 3;
         const 1048576;
 },
 sat_sCAi_entry() //  [R1]
         { []
         }
     {offset
       cKrp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cKrq; else goto cKrr;
       cKrq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKrr: // global
           I64[Sp - 24] = block_cKqy_info;
           _sCzS::P64 = P64[R1 + 24];
           _sCA6::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 16] = _sCzS::P64;
           P64[Sp - 8] = _sCA6::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uKry; else goto cKqz;
       uKry: // global
           call _cKqy(R1) args: 0, res: 0, upd: 0;
       cKqz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCAi_info" {
     sat_sCAi_info:
         const sat_sCAi_entry;
         const 3;
         const 18446744069414584335;
         const uKsN_srtd;
 },
 section ""relreadonly" . uKsO_srtd" {
     uKsO_srtd:
         const SCNU_srt+728;
         const 85;
         const 3;
         const 1048576;
 },
 _cKqy() //  [R1]
         { []
         }
     {offset
       cKqy: // global
           _sCzS::P64 = P64[Sp + 8];
           _sCA6::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cKrm; else goto cKrn;
       cKrm: // global
           Hp = Hp + 32;
           _sCA7::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cKrx; else goto cKrt;
       cKrt: // global
           I64[Hp - 24] = sat_sCAc_info;
           P64[Hp - 8] = _sCzS::P64;
           P64[Hp] = _sCA6::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowTypeLitSort4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cKrn: // global
           Hp = Hp + 32;
           _sCA7::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cKrx; else goto cKrw;
       cKrx: // global
           HpAlloc = 32;
           R1 = _sCA7::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cKrw: // global
           I64[Hp - 24] = sat_sCAh_info;
           P64[Hp - 8] = _sCzS::P64;
           P64[Hp] = _sCA6::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowTypeLitSort2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKqy_info" {
     block_cKqy_info:
         const _cKqy;
         const 2;
         const 18446744069414584350;
         const uKsO_srtd;
 },
 section ""relreadonly" . uKsP_srtd" {
     uKsP_srtd:
         const SCNU_srt+728;
         const 87;
         const 3;
         const 5242880;
 },
 sat_sCAj_entry() //  [R1]
         { []
         }
     {offset
       cKrz: // global
           _sCAj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKrA; else goto cKrB;
       cKrB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cKrD; else goto cKrC;
       cKrD: // global
           HpAlloc = 40;
           goto cKrA;
       cKrA: // global
           R1 = _sCAj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKrC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCAj::P64;
           _sCzR::P64 = P64[_sCAj::P64 + 16];
           _sCzS::P64 = P64[_sCAj::P64 + 24];
           _sCA6::P64 = P64[_sCAj::P64 + 32];
           I64[Hp - 32] = sat_sCAi_info;
           P64[Hp - 16] = _sCzR::P64;
           P64[Hp - 8] = _sCzS::P64;
           P64[Hp] = _sCA6::P64;
           R3 = Hp - 32;
           R2 = f1_rC1d_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCAj_info" {
     sat_sCAj_info:
         const sat_sCAj_entry;
         const 3;
         const 18446744069414584335;
         const uKsP_srtd;
 },
 section ""relreadonly" . uKsQ_srtd" {
     uKsQ_srtd:
         const SCNU_srt+728;
         const 87;
         const 3;
         const 5242880;
 },
 sat_sCAk_entry() //  [R1, R2]
         { []
         }
     {offset
       cKrF: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cKrJ; else goto cKrI;
       cKrJ: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKrI: // global
           _sCzR::P64 = P64[R1 + 7];
           _sCzS::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sCAj_info;
           P64[Hp - 40] = _sCzR::P64;
           P64[Hp - 32] = _sCzS::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sCAk_info" {
     sat_sCAk_info:
         const sat_sCAk_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const uKsQ_srtd;
 },
 section ""relreadonly" . uKsR_srtd" {
     uKsR_srtd:
         const SCNU_srt+728;
         const 87;
         const 18014398509481987;
         const 8355840;
 },
 GHC.Show.$w$cshowsPrec5_entry() //  [R2, R3]
         { []
         }
     {offset
       cKrT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKrU; else goto cKrV;
       cKrU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$w$cshowsPrec5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cKrV: // global
           I64[Sp - 16] = block_cKdz_info;
           R1 = R3;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uKsC; else goto cKdA;
       uKsC: // global
           call _cKdz(R1) args: 0, res: 0, upd: 0;
       cKdA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec5_info" {
     GHC.Show.$w$cshowsPrec5_info:
         const GHC.Show.$w$cshowsPrec5_entry;
         const 0;
         const 18446744069414584334;
         const 8589934605;
         const uKsR_srtd;
 },
 section ""relreadonly" . uKsS_srtd" {
     uKsS_srtd:
         const SCNU_srt+728;
         const 87;
         const 18014398509481987;
         const 8355840;
 },
 _cKdz() //  [R1]
         { []
         }
     {offset
       cKdz: // global
           _sCxx::I64 = I64[Sp + 8];
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto cKrL;
               case 2 : goto cKrM;
               case 3 : goto cKrN;
               case 4 : goto cKrO;
               case 5 : goto cKrP;
               case 6 : goto cKrQ;
               case 7 : goto cKrR;
           }
       cKrR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKsy; else goto cKsx;
       cKsy: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cKsx: // global
           _sCzR::P64 = P64[R1 + 1];
           _sCzS::P64 = P64[R1 + 9];
           if (%MO_S_Le_W64(_sCxx::I64, 10)) goto cKsA; else goto cKsB;
       cKsA: // global
           I64[Hp - 16] = sat_sCA5_info;
           P64[Hp - 8] = _sCzR::P64;
           P64[Hp] = _sCzS::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cKsB: // global
           I64[Hp - 16] = sat_sCAk_info;
           P64[Hp - 8] = _sCzR::P64;
           P64[Hp] = _sCzS::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cKrQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cKss; else goto cKsr;
       cKss: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cKsr: // global
           _sCzm::P64 = P64[R1 + 2];
           _sCzn::I64 = I64[R1 + 10];
           I64[Hp - 40] = cs_sCzo_info;
           I64[Hp - 24] = _sCzn::I64;
           _cKmf::P64 = Hp - 40;
           if (%MO_S_Le_W64(_sCxx::I64, 10)) goto cKsu; else goto cKsv;
       cKsu: // global
           I64[Hp - 16] = sat_sCzB_info;
           P64[Hp - 8] = _sCzm::P64;
           P64[Hp] = _cKmf::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cKsv: // global
           I64[Hp - 16] = sat_sCzQ_info;
           P64[Hp - 8] = _sCzm::P64;
           P64[Hp] = _cKmf::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cKrP: // global
           Hp = Hp + 16;
           _sCxz::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cKsm; else goto cKsl;
       cKsl: // global
           _sCzc::P64 = P64[_sCxz::P64 + 3];
           if (%MO_S_Le_W64(_sCxx::I64, 10)) goto cKso; else goto cKsp;
       cKso: // global
           I64[Hp - 8] = sat_sCzg_info;
           P64[Hp] = _sCzc::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cKsp: // global
           I64[Hp - 8] = sat_sCzl_info;
           P64[Hp] = _sCzc::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cKrO: // global
           Hp = Hp + 72;
           _sCxz::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cKsg; else goto cKsf;
       cKsf: // global
           _sCyV::P64 = P64[_sCxz::P64 + 4];
           _sCyW::P64 = P64[_sCxz::P64 + 12];
           I64[Hp - 64] = f12_sCyX_info;
           P64[Hp - 48] = _sCyV::P64;
           I64[Hp - 40] = g_sCyY_info;
           P64[Hp - 24] = _sCyW::P64;
           _cKjP::P64 = Hp - 64;
           _cKjW::P64 = Hp - 40;
           if (%MO_S_Le_W64(_sCxx::I64, 10)) goto cKsi; else goto cKsj;
       cKsi: // global
           I64[Hp - 16] = sat_sCz4_info;
           P64[Hp - 8] = _cKjP::P64;
           P64[Hp] = _cKjW::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cKsj: // global
           I64[Hp - 16] = sat_sCzb_info;
           P64[Hp - 8] = _cKjP::P64;
           P64[Hp] = _cKjW::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cKrN: // global
           Hp = Hp + 72;
           _sCxz::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cKsg; else goto cKs9;
       cKsg: // global
           HpAlloc = 72;
           R1 = _sCxz::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cKs9: // global
           _sCyE::P64 = P64[_sCxz::P64 + 5];
           _sCyF::P64 = P64[_sCxz::P64 + 13];
           I64[Hp - 64] = f12_sCyG_info;
           P64[Hp - 48] = _sCyE::P64;
           I64[Hp - 40] = g_sCyH_info;
           P64[Hp - 24] = _sCyF::P64;
           _cKig::P64 = Hp - 64;
           _cKin::P64 = Hp - 40;
           if (%MO_S_Le_W64(_sCxx::I64, 10)) goto cKsc; else goto cKsd;
       cKsc: // global
           I64[Hp - 16] = sat_sCyN_info;
           P64[Hp - 8] = _cKig::P64;
           P64[Hp] = _cKin::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cKsd: // global
           I64[Hp - 16] = sat_sCyU_info;
           P64[Hp - 8] = _cKig::P64;
           P64[Hp] = _cKin::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cKrM: // global
           Hp = Hp + 16;
           _sCxz::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cKsm; else goto cKs3;
       cKsm: // global
           HpAlloc = 16;
           R1 = _sCxz::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cKs3: // global
           _sCyb::I64 = I64[_sCxz::P64 + 6];
           if (%MO_S_Le_W64(_sCxx::I64, 10)) goto cKs6; else goto cKs7;
       cKs6: // global
           I64[Hp - 8] = sat_sCyo_info;
           I64[Hp] = _sCyb::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cKs7: // global
           I64[Hp - 8] = sat_sCyD_info;
           I64[Hp] = _sCyb::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cKrL: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cKrY; else goto cKrX;
       cKrY: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cKrX: // global
           _sCxA::P64 = P64[R1 + 7];
           _sCxB::P64 = P64[R1 + 15];
           I64[Hp - 56] = f12_sCxC_info;
           P64[Hp - 40] = _sCxA::P64;
           I64[Hp - 32] = p1_sCxO_info;
           P64[Hp - 24] = _sCxB::P64;
           P64[Hp - 16] = Hp - 56;
           _cKef::P64 = Hp - 31;
           if (%MO_S_Le_W64(_sCxx::I64, 10)) goto cKs0; else goto cKs1;
       cKs0: // global
           Hp = Hp - 16;
           R1 = _cKef::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cKs1: // global
           I64[Hp - 8] = sat_sCya_info;
           P64[Hp] = _cKef::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKdz_info" {
     block_cKdz_info:
         const _cKdz;
         const 65;
         const 18446744069414584350;
         const uKsS_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.075516196 UTC

[section ""data" . GHC.Show.$fShowKindRep_$cshowsPrec_closure" {
     GHC.Show.$fShowKindRep_$cshowsPrec_closure:
         const GHC.Show.$fShowKindRep_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShowKindRep_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cKzt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKzu; else goto cKzv;
       cKzu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowKindRep_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cKzv: // global
           I64[Sp - 16] = block_cKzq_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uKzz; else goto cKzr;
       uKzz: // global
           call _cKzq(R1) args: 0, res: 0, upd: 0;
       cKzr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowKindRep_$cshowsPrec_info" {
     GHC.Show.$fShowKindRep_$cshowsPrec_info:
         const GHC.Show.$fShowKindRep_$cshowsPrec_entry;
         const 0;
         const 1103806595086;
         const 8589934607;
         const SCNU_srt+1360;
 },
 _cKzq() //  [R1]
         { []
         }
     {offset
       cKzq: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKzq_info" {
     block_cKzq_info:
         const _cKzq;
         const 1;
         const 4294967326;
         const SCNU_srt+1360;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.083613675 UTC

[section ""data" . GHC.Show.$fShowKindRep1_closure" {
     GHC.Show.$fShowKindRep1_closure:
         const GHC.Show.$fShowKindRep1_info;
         const 0;
 },
 GHC.Show.$fShowKindRep1_entry() //  [R2]
         { []
         }
     {offset
       cKzN: // global
           R3 = R2;
           R2 = 0;
           call GHC.Show.$w$cshowsPrec5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowKindRep1_info" {
     GHC.Show.$fShowKindRep1_info:
         const GHC.Show.$fShowKindRep1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SCNU_srt+1360;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.087629579 UTC

[section ""data" . GHC.Show.$fShowKindRep_$cshowList_closure" {
     GHC.Show.$fShowKindRep_$cshowList_closure:
         const GHC.Show.$fShowKindRep_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShowKindRep_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cKzY: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowKindRep1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowKindRep_$cshowList_info" {
     GHC.Show.$fShowKindRep_$cshowList_info:
         const GHC.Show.$fShowKindRep_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SCNU_srt+1432;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.091606691 UTC

[section ""data" . GHC.Show.$fShowKindRep_$cshow_closure" {
     GHC.Show.$fShowKindRep_$cshow_closure:
         const GHC.Show.$fShowKindRep_$cshow_info;
         const 0;
 },
 GHC.Show.$fShowKindRep_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cKA9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKAa; else goto cKAb;
       cKAa: // global
           R2 = R2;
           R1 = GHC.Show.$fShowKindRep_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKAb: // global
           R3 = R2;
           R2 = 0;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$w$cshowsPrec5_entry(R3,
                                              R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowKindRep_$cshow_info" {
     GHC.Show.$fShowKindRep_$cshow_info:
         const GHC.Show.$fShowKindRep_$cshow_entry;
         const 0;
         const 4402341478414;
         const 4294967301;
         const SCNU_srt+1360;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.096144017 UTC

[section ""data" . GHC.Show.$fShowKindRep_closure" {
     GHC.Show.$fShowKindRep_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowKindRep_$cshowsPrec_closure+2;
         const GHC.Show.$fShowKindRep_$cshow_closure+1;
         const GHC.Show.$fShowKindRep_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.098234327 UTC

[section ""cstring" . lvl44_rC1q_bytes" {
     lvl44_rC1q_bytes:
         I8[] [67,104,97,114,46,105,110,116,84,111,68,105,103,105,116,58,32,110,111,116,32,97,32,100,105,103,105,116,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.102093716 UTC

[section ""data" . GHC.Show.intToDigit1_closure" {
     GHC.Show.intToDigit1_closure:
         const GHC.Show.intToDigit1_info;
         const 0;
 },
 sat_sCAx_entry() //  [R1]
         { []
         }
     {offset
       cKAu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cKAv; else goto cKAw;
       cKAv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKAw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cKAr_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = I64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCAx_info" {
     sat_sCAx_info:
         const sat_sCAx_entry;
         const 4294967296;
         const 17;
 },
 _cKAr() //  [R1, R2]
         { []
         }
     {offset
       cKAr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKAz; else goto cKAy;
       cKAz: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cKAy: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cKAr_info" {
     block_cKAr_info:
         const _cKAr;
         const 0;
         const 30;
 },
 GHC.Show.intToDigit1_entry() //  [R2]
         { []
         }
     {offset
       cKAC: // global
           _sCAt::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cKAD; else goto cKAE;
       cKAE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKAG; else goto cKAF;
       cKAG: // global
           HpAlloc = 24;
           goto cKAD;
       cKAD: // global
           R2 = _sCAt::I64;
           R1 = GHC.Show.intToDigit1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKAF: // global
           I64[Hp - 16] = sat_sCAx_info;
           I64[Hp] = _sCAt::I64;
           I64[Sp - 8] = block_cKAA_info;
           R3 = Hp - 16;
           R2 = lvl44_rC1q_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.intToDigit1_info" {
     GHC.Show.intToDigit1_info:
         const GHC.Show.intToDigit1_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const SCNU_srt+1448;
 },
 _cKAA() //  [R1]
         { []
         }
     {offset
       cKAA: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKAA_info" {
     block_cKAA_info:
         const _cKAA;
         const 0;
         const 4294967326;
         const SCNU_srt+1448;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.111536756 UTC

[section ""data" . GHC.Show.$wintToDigit_closure" {
     GHC.Show.$wintToDigit_closure:
         const GHC.Show.$wintToDigit_info;
         const 0;
 },
 GHC.Show.$wintToDigit_entry() //  [R2]
         { []
         }
     {offset
       cKBb: // global
           _sCAz::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto sCAA; else goto cKBa;
       cKBa: // global
           if (%MO_S_Gt_W64(_sCAz::I64, 9)) goto sCAA; else goto cKBP;
       sCAA: // global
           if (%MO_S_Lt_W64(_sCAz::I64, 10)) goto cKBr; else goto cKBC;
       cKBC: // global
           if (%MO_S_Gt_W64(_sCAz::I64, 15)) goto cKBr; else goto cKBB;
       cKBr: // global
           R2 = _sCAz::I64;
           call GHC.Show.intToDigit1_entry(R2) args: 8, res: 0, upd: 8;
       cKBB: // global
           R1 = _sCAz::I64 + 87;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cKBP: // global
           R1 = _sCAz::I64 + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$wintToDigit_info" {
     GHC.Show.$wintToDigit_info:
         const GHC.Show.$wintToDigit_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const SCNU_srt+1456;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.116692992 UTC

[section ""data" . GHC.Show.intToDigit_closure" {
     GHC.Show.intToDigit_closure:
         const GHC.Show.intToDigit_info;
         const 0;
 },
 GHC.Show.intToDigit_entry() //  [R2]
         { []
         }
     {offset
       cKC3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cKCb; else goto cKCc;
       cKCb: // global
           R2 = R2;
           R1 = GHC.Show.intToDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKCc: // global
           I64[Sp - 8] = block_cKC0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uKCh; else goto cKC1;
       uKCh: // global
           call _cKC0(R1) args: 0, res: 0, upd: 0;
       cKC1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.intToDigit_info" {
     GHC.Show.intToDigit_info:
         const GHC.Show.intToDigit_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SCNU_srt+1464;
 },
 _cKC0() //  [R1]
         { []
         }
     {offset
       cKC0: // global
           I64[Sp] = block_cKC6_info;
           R2 = I64[R1 + 7];
           call GHC.Show.$wintToDigit_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cKC0_info" {
     block_cKC0_info:
         const _cKC0;
         const 0;
         const 4294967326;
         const SCNU_srt+1472;
 },
 _cKC6() //  [R1]
         { []
         }
     {offset
       cKC6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cKCg; else goto cKCf;
       cKCg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cKCf: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKC6_info" {
     block_cKC6_info:
         const _cKC6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.124628437 UTC

[section ""data" . GHC.Show.$wjblock'_closure" {
     GHC.Show.$wjblock'_closure:
         const GHC.Show.$wjblock'_info;
 },
 GHC.Show.$wjblock'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cKCM: // global
           _sCAQ::P64 = R4;
           _sCAP::I64 = R3;
           _sCAO::I64 = R2;
           goto cKCw;
       cKCw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cKCQ; else goto cKCP;
       cKCQ: // global
           HpAlloc = 40;
           R4 = _sCAQ::P64;
           R3 = _sCAP::I64;
           R2 = _sCAO::I64;
           R1 = GHC.Show.$wjblock'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cKCP: // global
           if (_sCAO::I64 == 1) goto cKCL; else goto cKCK;
       cKCL: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _sCAP::I64 + 48;
           _cKCY::P64 = Hp - 31;
           Hp = Hp - 24;
           R2 = _sCAQ::P64;
           R1 = _cKCY::P64;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cKCK: // global
           (_sCAT::I64, _sCAU::I64) = call MO_S_QuotRem W64(_sCAP::I64, 10);
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _sCAU::I64 + 48;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _sCAQ::P64;
           _sCAQ::P64 = Hp - 14;
           _sCAP::I64 = _sCAT::I64;
           _sCAO::I64 = _sCAO::I64 - 1;
           goto cKCw;
     }
 },
 section ""relreadonly" . GHC.Show.$wjblock'_info" {
     GHC.Show.$wjblock'_info:
         const GHC.Show.$wjblock'_entry;
         const 0;
         const 14;
         const 12884901905;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.129056399 UTC

[section ""data" . sat_sCB4_closure" {
     sat_sCB4_closure:
         const GHC.Types.I#_con_info;
         const 465661287;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.131162747 UTC

[section ""data" . sat_sCB5_closure" {
     sat_sCB5_closure:
         const :_con_info;
         const sat_sCB4_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.132873399 UTC

[section ""data" . sat_sCB3_closure" {
     sat_sCB3_closure:
         const GHC.Types.I#_con_info;
         const 660865024;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.134633269 UTC

[section ""data" . sat_sCB6_closure" {
     sat_sCB6_closure:
         const :_con_info;
         const sat_sCB3_closure+1;
         const sat_sCB5_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.137044445 UTC

[section ""data" . GHC.Show.$fShowInteger3_closure" {
     GHC.Show.$fShowInteger3_closure:
         const GHC.Show.$fShowInteger3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowInteger3_entry() //  [R1]
         { []
         }
     {offset
       cKDk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKDl; else goto cKDm;
       cKDl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKDm: // global
           (_cKDh::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cKDh::I64 == 0) goto cKDj; else goto cKDi;
       cKDj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cKDi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cKDh::I64;
           R3 = sat_sCB6_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInteger3_info" {
     GHC.Show.$fShowInteger3_info:
         const GHC.Show.$fShowInteger3_entry;
         const 0;
         const 4294967317;
         const SCNU_srt+1480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.145780205 UTC

[section ""data" . GHC.Show.$fShowInteger_jprintb_closure" {
     GHC.Show.$fShowInteger_jprintb_closure:
         const GHC.Show.$fShowInteger_jprintb_info;
         const 0;
 },
 sat_sCBh_entry() //  [R1]
         { []
         }
     {offset
       cKDW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKDX; else goto cKDY;
       cKDX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKDY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShowInteger_jprintb_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCBh_info" {
     sat_sCBh_info:
         const sat_sCBh_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1488;
 },
 sat_sCBl_entry() //  [R1]
         { []
         }
     {offset
       cKDZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cKE3; else goto cKE4;
       cKE3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKE4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cKDO_info;
           R2 = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCBl_info" {
     sat_sCBl_info:
         const sat_sCBl_entry;
         const 3;
         const 4294967311;
         const SCNU_srt+1488;
 },
 _cKDO() //  [R1]
         { []
         }
     {offset
       cKDO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKE7; else goto cKE6;
       cKE7: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       cKE6: // global
           I64[Hp - 24] = sat_sCBh_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cKE0_info;
           R4 = Hp - 24;
           R3 = R1;
           R2 = 18;
           Sp = Sp + 16;
           call GHC.Show.$wjblock'_entry(R4, R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cKDO_info" {
     block_cKDO_info:
         const _cKDO;
         const 2;
         const 4294967326;
         const SCNU_srt+1488;
 },
 _cKE0() //  [R1, R2]
         { []
         }
     {offset
       cKE0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKEa; else goto cKE9;
       cKEa: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cKE9: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cKE0_info" {
     block_cKE0_info:
         const _cKE0;
         const 0;
         const 30;
 },
 GHC.Show.$fShowInteger_jprintb_entry() //  [R2, R3]
         { []
         }
     {offset
       cKEf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cKEg; else goto cKEh;
       cKEg: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowInteger_jprintb_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cKEh: // global
           I64[Sp - 16] = block_cKDy_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uKEv; else goto cKDz;
       uKEv: // global
           call _cKDy(R1) args: 0, res: 0, upd: 0;
       cKDz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInteger_jprintb_info" {
     GHC.Show.$fShowInteger_jprintb_info:
         const GHC.Show.$fShowInteger_jprintb_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SCNU_srt+1488;
 },
 _cKDy() //  [R1]
         { []
         }
     {offset
       cKDy: // global
           if (R1 & 7 == 1) goto cKEc; else goto cKEd;
       cKEc: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cKEd: // global
           I64[Sp - 8] = block_cKDE_info;
           R3 = GHC.Show.$fShowInteger3_closure;
           R2 = P64[R1 + 6];
           P64[Sp] = P64[R1 + 14];
           Sp = Sp - 8;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cKDy_info" {
     block_cKDy_info:
         const _cKDy;
         const 1;
         const 12884901918;
         const SCNU_srt+1488;
 },
 _cKDE() //  [R1, R2]
         { []
         }
     {offset
       cKDE: // global
           I64[Sp - 8] = block_cKDG_info;
           _sCBe::P64 = R2;
           R2 = R1;
           P64[Sp] = _sCBe::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cKDE_info" {
     block_cKDE_info:
         const _cKDE;
         const 2;
         const 4294967326;
         const SCNU_srt+1488;
 },
 _cKDG() //  [R1]
         { []
         }
     {offset
       cKDG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cKEr; else goto cKEq;
       cKEr: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cKEq: // global
           I64[Hp - 32] = sat_sCBl_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 24] = block_cKEk_info;
           R4 = Hp - 32;
           R3 = R1;
           R2 = 18;
           Sp = Sp + 24;
           call GHC.Show.$wjblock'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cKDG_info" {
     block_cKDG_info:
         const _cKDG;
         const 3;
         const 4294967326;
         const SCNU_srt+1488;
 },
 _cKEk() //  [R1, R2]
         { []
         }
     {offset
       cKEk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKEu; else goto cKEt;
       cKEu: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cKEt: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKEk_info" {
     block_cKEk_info:
         const _cKEk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.171678071 UTC

[section ""data" . jsplitb_rC1r_closure" {
     jsplitb_rC1r_closure:
         const jsplitb_rC1r_info;
 },
 sat_sCBx_entry() //  [R1]
         { []
         }
     {offset
       cKFw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKFx; else goto cKFy;
       cKFx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKFy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call jsplitb_rC1r_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCBx_info" {
     sat_sCBx_info:
         const sat_sCBx_entry;
         const 2;
         const 18;
 },
 jsplitb_rC1r_entry() //  [R2, R3]
         { []
         }
     {offset
       cKFD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cKFE; else goto cKFF;
       cKFE: // global
           R3 = R3;
           R2 = R2;
           R1 = jsplitb_rC1r_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cKFF: // global
           I64[Sp - 16] = block_cKFk_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uKFO; else goto cKFl;
       uKFO: // global
           call _cKFk(R1) args: 0, res: 0, upd: 0;
       cKFl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . jsplitb_rC1r_info" {
     jsplitb_rC1r_info:
         const jsplitb_rC1r_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cKFk() //  [R1]
         { []
         }
     {offset
       cKFk: // global
           if (R1 & 7 == 1) goto cKFA; else goto cKFB;
       cKFA: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cKFB: // global
           I64[Sp - 8] = block_cKFq_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 6];
           P64[Sp] = P64[R1 + 14];
           Sp = Sp - 8;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cKFk_info" {
     block_cKFk_info:
         const _cKFk;
         const 1;
         const 30;
 },
 _cKFq() //  [R1, R2]
         { []
         }
     {offset
       cKFq: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cKFN; else goto cKFM;
       cKFN: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cKFM: // global
           I64[Hp - 72] = sat_sCBx_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 8];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKFq_info" {
     block_cKFq_info:
         const _cKFq;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.182279952 UTC

[section ""data" . GHC.Show.$fShowInteger1_closure" {
     GHC.Show.$fShowInteger1_closure:
         const GHC.Show.$fShowInteger1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowInteger1_entry() //  [R1]
         { []
         }
     {offset
       cKGk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKGl; else goto cKGm;
       cKGl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKGm: // global
           (_cKGh::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cKGh::I64 == 0) goto cKGj; else goto cKGi;
       cKGj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cKGi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cKGh::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInteger1_info" {
     GHC.Show.$fShowInteger1_info:
         const GHC.Show.$fShowInteger1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.188818367 UTC

[section ""data" . GHC.Show.$wjsplitf_closure" {
     GHC.Show.$wjsplitf_closure:
         const GHC.Show.$wjsplitf_info;
         const 0;
 },
 sat_sCBK_entry() //  [R1]
         { []
         }
     {offset
       cKGS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKGT; else goto cKGU;
       cKGT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKGU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call jsplitb_rC1r_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCBK_info" {
     sat_sCBK_info:
         const sat_sCBK_entry;
         const 2;
         const 18;
 },
 sat_sCBL_entry() //  [R1]
         { []
         }
     {offset
       cKH1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKH2; else goto cKH3;
       cKH2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKH3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call jsplitb_rC1r_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCBL_info" {
     sat_sCBL_info:
         const sat_sCBL_entry;
         const 2;
         const 18;
 },
 GHC.Show.$wjsplitf_entry() //  [R2, R3]
         { []
         }
     {offset
       cKH7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cKH8; else goto cKH9;
       cKH8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$wjsplitf_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cKH9: // global
           I64[Sp - 24] = block_cKGy_info;
           _sCBA::P64 = R3;
           R3 = R3;
           _sCBz::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _sCBz::P64;
           P64[Sp - 8] = _sCBA::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$wjsplitf_info" {
     GHC.Show.$wjsplitf_info:
         const GHC.Show.$wjsplitf_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SCNU_srt+1504;
 },
 _cKGy() //  [R1]
         { []
         }
     {offset
       cKGy: // global
           if (R1 == 1) goto cKH6; else goto cKH5;
       cKH6: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cKH5: // global
           I64[Sp] = block_cKGC_info;
           _sCBz::P64 = P64[Sp + 8];
           R3 = _sCBz::P64;
           R2 = _sCBz::P64;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cKGy_info" {
     block_cKGy_info:
         const _cKGy;
         const 2;
         const 30064771102;
         const SCNU_srt+1504;
 },
 _cKGC() //  [R1]
         { []
         }
     {offset
       cKGC: // global
           I64[Sp] = block_cKGG_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Show.$wjsplitf_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cKGC_info" {
     block_cKGC_info:
         const _cKGC;
         const 2;
         const 12884901918;
         const SCNU_srt+1512;
 },
 _cKGG() //  [R1, R2]
         { []
         }
     {offset
       cKGG: // global
           I64[Sp] = block_cKGI_info;
           R3 = P64[Sp + 8];
           _sCBF::P64 = R2;
           R2 = R1;
           P64[Sp + 16] = _sCBF::P64;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cKGG_info" {
     block_cKGG_info:
         const _cKGG;
         const 130;
         const 4294967326;
         const SCNU_srt+1512;
 },
 _cKGI() //  [R1, R2]
         { []
         }
     {offset
       cKGI: // global
           I64[Sp - 16] = block_cKGK_info;
           R3 = GHC.Show.$fShowInteger1_closure;
           _sCBI::P64 = R2;
           R2 = R1;
           P64[Sp - 8] = _sCBI::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cKGI_info" {
     block_cKGI_info:
         const _cKGI;
         const 2;
         const 4294967326;
         const SCNU_srt+1512;
 },
 _cKGK() //  [R1]
         { []
         }
     {offset
       cKGK: // global
           _sCBz::P64 = P64[Sp + 24];
           _sCBF::P64 = P64[Sp + 32];
           _sCBI::P64 = P64[Sp + 8];
           if (R1 == 1) goto cKHk; else goto cKHf;
       cKHk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cKHn; else goto cKHm;
       cKHn: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cKHm: // global
           I64[Hp - 48] = sat_sCBL_info;
           P64[Hp - 32] = _sCBz::P64;
           P64[Hp - 24] = _sCBF::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sCBI::P64;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = P64[Sp + 16];
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cKHf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKHi; else goto cKHh;
       cKHi: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cKHh: // global
           I64[Hp - 24] = sat_sCBK_info;
           P64[Hp - 8] = _sCBz::P64;
           P64[Hp] = _sCBF::P64;
           R2 = Hp - 24;
           R1 = _sCBI::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKGK_info" {
     block_cKGK_info:
         const _cKGK;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.204604993 UTC

[section ""data" . sat_sCBQ_closure" {
     sat_sCBQ_closure:
         const GHC.Types.I#_con_info;
         const 100974195;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.206721104 UTC

[section ""data" . sat_sCBR_closure" {
     sat_sCBR_closure:
         const :_con_info;
         const sat_sCBQ_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.208414476 UTC

[section ""data" . sat_sCBP_closure" {
     sat_sCBP_closure:
         const GHC.Types.I#_con_info;
         const 1864637526;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.21014092 UTC

[section ""data" . sat_sCBS_closure" {
     sat_sCBS_closure:
         const :_con_info;
         const sat_sCBP_closure+1;
         const sat_sCBR_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.211783668 UTC

[section ""data" . sat_sCBO_closure" {
     sat_sCBO_closure:
         const GHC.Types.I#_con_info;
         const 1721187872;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.213497169 UTC

[section ""data" . sat_sCBT_closure" {
     sat_sCBT_closure:
         const :_con_info;
         const sat_sCBO_closure+1;
         const sat_sCBS_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.216036061 UTC

[section ""data" . sat_sCBN_closure" {
     sat_sCBN_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.218455648 UTC

[section ""data" . sat_sCBU_closure" {
     sat_sCBU_closure:
         const :_con_info;
         const sat_sCBN_closure+1;
         const sat_sCBT_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.220877972 UTC

[section ""data" . GHC.Show.$fShowInteger2_closure" {
     GHC.Show.$fShowInteger2_closure:
         const GHC.Show.$fShowInteger2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowInteger2_entry() //  [R1]
         { []
         }
     {offset
       cKIb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKIc; else goto cKId;
       cKIc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKId: // global
           (_cKI8::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cKI8::I64 == 0) goto cKIa; else goto cKI9;
       cKIa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cKI9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cKI8::I64;
           R3 = sat_sCBU_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInteger2_info" {
     GHC.Show.$fShowInteger2_info:
         const GHC.Show.$fShowInteger2_entry;
         const 0;
         const 4294967317;
         const SCNU_srt+1528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.230176744 UTC

[section ""data" . GHC.Show.$wintegerToString'_closure" {
     GHC.Show.$wintegerToString'_closure:
         const GHC.Show.$wintegerToString'_info;
         const 0;
 },
 sat_sCC7_entry() //  [R1]
         { []
         }
     {offset
       cKIM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKIN; else goto cKIO;
       cKIN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKIO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShowInteger_jprintb_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCC7_info" {
     sat_sCC7_info:
         const sat_sCC7_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1488;
 },
 sat_sCC9_entry() //  [R1]
         { []
         }
     {offset
       cKJ2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKJ3; else goto cKJ4;
       cKJ3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKJ4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShowInteger_jprintb_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCC9_info" {
     sat_sCC9_info:
         const sat_sCC9_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1488;
 },
 sat_sCCd_entry() //  [R1]
         { []
         }
     {offset
       cKJ5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cKJ9; else goto cKJa;
       cKJ9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKJa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cKIU_info;
           R2 = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCCd_info" {
     sat_sCCd_info:
         const sat_sCCd_entry;
         const 3;
         const 4294967311;
         const SCNU_srt+1488;
 },
 _cKIU() //  [R1]
         { []
         }
     {offset
       cKIU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKJd; else goto cKJc;
       cKJd: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       cKJc: // global
           I64[Hp - 24] = sat_sCC9_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cKJ6_info;
           R4 = Hp - 24;
           R3 = R1;
           R2 = 18;
           Sp = Sp + 16;
           call GHC.Show.$wjblock'_entry(R4, R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cKIU_info" {
     block_cKIU_info:
         const _cKIU;
         const 2;
         const 4294967326;
         const SCNU_srt+1488;
 },
 _cKJ6() //  [R1, R2]
         { []
         }
     {offset
       cKJ6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKJg; else goto cKJf;
       cKJg: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cKJf: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cKJ6_info" {
     block_cKJ6_info:
         const _cKJ6;
         const 0;
         const 30;
 },
 GHC.Show.$wintegerToString'_entry() //  [R2, R3]
         { []
         }
     {offset
       cKJk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cKJl; else goto cKJm;
       cKJl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$wintegerToString'_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cKJm: // global
           I64[Sp - 24] = block_cKIp_info;
           _sCBW::P64 = R3;
           R3 = GHC.Show.$fShowInteger3_closure;
           _sCBV::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _sCBV::P64;
           P64[Sp - 8] = _sCBW::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$wintegerToString'_info" {
     GHC.Show.$wintegerToString'_info:
         const GHC.Show.$wintegerToString'_entry;
         const 0;
         const 906238099470;
         const 8589934607;
         const SCNU_srt+1488;
 },
 _cKIp() //  [R1]
         { []
         }
     {offset
       cKIp: // global
           _sCBV::P64 = P64[Sp + 8];
           if (R1 == 1) goto cKJj; else goto cKJi;
       cKJj: // global
           I64[Sp + 8] = block_cKJB_info;
           R2 = _sCBV::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
       cKJi: // global
           I64[Sp + 8] = block_cKIt_info;
           R3 = _sCBV::P64;
           R2 = GHC.Show.$fShowInteger2_closure;
           Sp = Sp + 8;
           call GHC.Show.$wjsplitf_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cKIp_info" {
     block_cKIp_info:
         const _cKIp;
         const 2;
         const 631360192542;
         const SCNU_srt+1488;
 },
 _cKJB() //  [R1]
         { []
         }
     {offset
       cKJB: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Show.$witos'_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKJB_info" {
     block_cKJB_info:
         const _cKJB;
         const 1;
         const 30;
 },
 _cKIt() //  [R1, R2]
         { []
         }
     {offset
       cKIt: // global
           I64[Sp - 8] = block_cKIv_info;
           R3 = GHC.Show.$fShowInteger3_closure;
           _sCC0::P64 = R2;
           R2 = R1;
           P64[Sp] = _sCC0::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cKIt_info" {
     block_cKIt_info:
         const _cKIt;
         const 1;
         const 12884901918;
         const SCNU_srt+1488;
 },
 _cKIv() //  [R1, R2]
         { []
         }
     {offset
       cKIv: // global
           I64[Sp - 8] = block_cKIx_info;
           _sCC3::P64 = R2;
           R2 = R1;
           P64[Sp] = _sCC3::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cKIv_info" {
     block_cKIv_info:
         const _cKIv;
         const 2;
         const 4294967326;
         const SCNU_srt+1488;
 },
 _cKIx() //  [R1]
         { []
         }
     {offset
       cKIx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cKJs; else goto cKJr;
       cKJs: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cKJr: // global
           _sCC3::P64 = P64[Sp + 8];
           if (%MO_S_Le_W64(R1, 0)) goto cKJu; else goto cKJy;
       cKJu: // global
           Hp = Hp - 40;
           I64[Sp + 8] = block_cKIE_info;
           R2 = _sCC3::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
       cKJy: // global
           I64[Hp - 32] = sat_sCCd_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sCC3::P64;
           R3 = Hp - 32;
           R2 = R1;
           Sp = Sp + 32;
           call GHC.Show.$witos'_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKIx_info" {
     block_cKIx_info:
         const _cKIx;
         const 3;
         const 4294967326;
         const SCNU_srt+1488;
 },
 _cKIE() //  [R1]
         { []
         }
     {offset
       cKIE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKJx; else goto cKJw;
       cKJx: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cKJw: // global
           I64[Hp - 24] = sat_sCC7_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 24;
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Show.$witos'_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKIE_info" {
     block_cKIE_info:
         const _cKIE;
         const 2;
         const 4294967326;
         const SCNU_srt+1488;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.259023029 UTC

[section ""data" . GHC.Show.$wintegerToString_closure" {
     GHC.Show.$wintegerToString_closure:
         const GHC.Show.$wintegerToString_info;
         const 0;
 },
 sat_sCCm_entry() //  [R1]
         { []
         }
     {offset
       cKKK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cKKQ; else goto cKKR;
       cKKQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKKR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cKKI_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCCm_info" {
     sat_sCCm_info:
         const sat_sCCm_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1536;
 },
 _cKKI() //  [R1]
         { []
         }
     {offset
       cKKI: // global
           _sCCg::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cKKN_info;
           R3 = _sCCg::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Show.$wintegerToString'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cKKI_info" {
     block_cKKI_info:
         const _cKKI;
         const 1;
         const 4294967326;
         const SCNU_srt+1536;
 },
 _cKKN() //  [R1, R2]
         { []
         }
     {offset
       cKKN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKKV; else goto cKKU;
       cKKV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cKKU: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cKKN_info" {
     block_cKKN_info:
         const _cKKN;
         const 0;
         const 30;
 },
 GHC.Show.$wintegerToString_entry() //  [R2, R3]
         { []
         }
     {offset
       cKKZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cKL0; else goto cKL1;
       cKL0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$wintegerToString_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cKL1: // global
           I64[Sp - 24] = block_cKKz_info;
           _sCCg::P64 = R3;
           R3 = GHC.Show.$fShowInteger1_closure;
           _sCCf::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _sCCf::P64;
           P64[Sp - 8] = _sCCg::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$wintegerToString_info" {
     GHC.Show.$wintegerToString_info:
         const GHC.Show.$wintegerToString_entry;
         const 0;
         const 176093659150;
         const 8589934607;
         const SCNU_srt+1512;
 },
 _cKKz() //  [R1]
         { []
         }
     {offset
       cKKz: // global
           _sCCf::P64 = P64[Sp + 8];
           _sCCg::P64 = P64[Sp + 16];
           if (R1 == 1) goto cKKY; else goto cKKX;
       cKKY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKL6; else goto cKL5;
       cKL6: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cKL5: // global
           I64[Hp - 24] = sat_sCCm_info;
           P64[Hp - 8] = _sCCf::P64;
           P64[Hp] = _sCCg::P64;
           R2 = Hp - 24;
           R1 = GHC.Show.showLitChar1_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cKKX: // global
           R3 = _sCCg::P64;
           R2 = _sCCf::P64;
           Sp = Sp + 24;
           call GHC.Show.$wintegerToString'_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKKz_info" {
     block_cKKz_info:
         const _cKKz;
         const 2;
         const 4294967326;
         const SCNU_srt+1536;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.280064615 UTC

[section ""data" . GHC.Show.$w$cshowsPrec4_closure" {
     GHC.Show.$w$cshowsPrec4_closure:
         const GHC.Show.$w$cshowsPrec4_info;
         const 0;
 },
 sat_sCCw_entry() //  [R1]
         { []
         }
     {offset
       cKLN: // global
           _sCCw::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cKLO; else goto cKLP;
       cKLP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKLR; else goto cKLQ;
       cKLR: // global
           HpAlloc = 24;
           goto cKLO;
       cKLO: // global
           R1 = _sCCw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKLQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCCw::P64;
           _sCCo::P64 = P64[_sCCw::P64 + 16];
           _sCCp::P64 = P64[_sCCw::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sCCp::P64;
           I64[Sp - 24] = block_cKLK_info;
           R3 = Hp - 14;
           R2 = _sCCo::P64;
           Sp = Sp - 24;
           call GHC.Show.$wintegerToString_entry(R3,
                                                 R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCCw_info" {
     sat_sCCw_info:
         const sat_sCCw_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1552;
 },
 _cKLK() //  [R1, R2]
         { []
         }
     {offset
       cKLK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKLU; else goto cKLT;
       cKLU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cKLT: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cKLK_info" {
     block_cKLK_info:
         const _cKLK;
         const 0;
         const 30;
 },
 GHC.Show.$w$cshowsPrec4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cKLY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cKLZ; else goto cKM0;
       cKLZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$w$cshowsPrec4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cKM0: // global
           if (%MO_S_Le_W64(R2, 6)) goto uKM9; else goto cKLX;
       uKM9: // global
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call _cKM4() args: 0, res: 0, upd: 0;
       cKLX: // global
           I64[Sp - 24] = block_cKLA_info;
           _sCCo::P64 = R3;
           R3 = GHC.Show.$fShowInteger1_closure;
           R2 = _sCCo::P64;
           P64[Sp - 16] = _sCCo::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec4_info" {
     GHC.Show.$w$cshowsPrec4_info:
         const GHC.Show.$w$cshowsPrec4_entry;
         const 0;
         const 416611827726;
         const 12884901907;
         const SCNU_srt+1512;
 },
 _cKLA() //  [R1]
         { []
         }
     {offset
       cKLA: // global
           if (R1 == 1) goto cKM5; else goto uKMa;
       cKM5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKM8; else goto cKM7;
       cKM8: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cKM7: // global
           I64[Hp - 24] = sat_sCCw_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 24;
           R1 = GHC.Show.$fShow(,)4_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       uKMa: // global
           Sp = Sp + 8;
           call _cKM4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cKLA_info" {
     block_cKLA_info:
         const _cKLA;
         const 2;
         const 4294967326;
         const SCNU_srt+1552;
 },
 _cKM4() //  []
         { []
         }
     {offset
       cKM4: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           Sp = Sp + 16;
           call GHC.Show.$wintegerToString_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.298529015 UTC

[section ""data" . GHC.Show.$fShowInteger_$cshowsPrec_closure" {
     GHC.Show.$fShowInteger_$cshowsPrec_closure:
         const GHC.Show.$fShowInteger_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShowInteger_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cKMF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cKML; else goto cKMM;
       cKML: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowInteger_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cKMM: // global
           I64[Sp - 24] = block_cKMC_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uKMR; else goto cKMD;
       uKMR: // global
           call _cKMC(R1) args: 0, res: 0, upd: 0;
       cKMD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInteger_$cshowsPrec_info" {
     GHC.Show.$fShowInteger_$cshowsPrec_info:
         const GHC.Show.$fShowInteger_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SCNU_srt+1560;
 },
 _cKMC() //  [R1]
         { []
         }
     {offset
       cKMC: // global
           _sCCz::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cKMI_info;
           R4 = _sCCz::P64;
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cKMC_info" {
     block_cKMC_info:
         const _cKMC;
         const 2;
         const 4294967326;
         const SCNU_srt+1560;
 },
 _cKMI() //  [R1, R2]
         { []
         }
     {offset
       cKMI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKMQ; else goto cKMP;
       cKMQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cKMP: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKMI_info" {
     block_cKMI_info:
         const _cKMI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.309158635 UTC

[section ""data" . GHC.Show.$fShowInteger_$cshow_closure" {
     GHC.Show.$fShowInteger_$cshow_closure:
         const GHC.Show.$fShowInteger_$cshow_info;
         const 0;
 },
 GHC.Show.$fShowInteger_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cKNc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cKNd; else goto cKNe;
       cKNd: // global
           R2 = R2;
           R1 = GHC.Show.$fShowInteger_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKNe: // global
           I64[Sp - 8] = block_cKN9_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = R2;
           R2 = 0;
           Sp = Sp - 8;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInteger_$cshow_info" {
     GHC.Show.$fShowInteger_$cshow_info:
         const GHC.Show.$fShowInteger_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SCNU_srt+1560;
 },
 _cKN9() //  [R1, R2]
         { []
         }
     {offset
       cKN9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKNh; else goto cKNg;
       cKNh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cKNg: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKN9_info" {
     block_cKN9_info:
         const _cKN9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.319639617 UTC

[section ""data" . GHC.Show.$fShowInteger_$cshowList_closure" {
     GHC.Show.$fShowInteger_$cshowList_closure:
         const GHC.Show.$fShowInteger_$cshowList_info;
         const 0;
 },
 sat_sCCY_entry() //  [R1]
         { []
         }
     {offset
       cKO3: // global
           _sCCY::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cKO4; else goto cKO5;
       cKO5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKO7; else goto cKO6;
       cKO7: // global
           HpAlloc = 32;
           goto cKO4;
       cKO4: // global
           R1 = _sCCY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKO6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCCY::P64;
           _sCCP::P64 = P64[_sCCY::P64 + 16];
           _sCCS::P64 = P64[_sCCY::P64 + 24];
           _sCCT::P64 = P64[_sCCY::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sCCP::P64;
           P64[Hp] = _sCCT::P64;
           I64[Sp - 24] = block_cKO0_info;
           R4 = Hp - 24;
           R3 = _sCCS::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCCY_info" {
     sat_sCCY_info:
         const sat_sCCY_entry;
         const 3;
         const 4294967311;
         const SCNU_srt+1560;
 },
 _cKO0() //  [R1, R2]
         { []
         }
     {offset
       cKO0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKOa; else goto cKO9;
       cKOa: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cKO9: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cKO0_info" {
     block_cKO0_info:
         const _cKO0;
         const 0;
         const 30;
 },
 showl_sCCP_entry() //  [R1, R2]
         { []
         }
     {offset
       cKOf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cKOg; else goto cKOh;
       cKOg: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cKOh: // global
           I64[Sp - 24] = block_cKNP_info;
           _sCCP::P64 = R1;
           _sCCO::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sCCO::P64;
           P64[Sp - 8] = _sCCP::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uKOo; else goto cKNQ;
       uKOo: // global
           call _cKNP(R1) args: 0, res: 0, upd: 0;
       cKNQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . showl_sCCP_info" {
     showl_sCCP_info:
         const showl_sCCP_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SCNU_srt+1560;
 },
 _cKNP() //  [R1]
         { []
         }
     {offset
       cKNP: // global
           if (R1 & 7 == 1) goto cKOc; else goto cKOd;
       cKOc: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cKOd: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cKOn; else goto cKOm;
       cKOn: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cKOm: // global
           _sCCS::P64 = P64[R1 + 6];
           _sCCT::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sCCY_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _sCCS::P64;
           P64[Hp - 24] = _sCCT::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKNP_info" {
     block_cKNP_info:
         const _cKNP;
         const 2;
         const 4294967326;
         const SCNU_srt+1560;
 },
 sat_sCCZ_entry() //  [R1]
         { []
         }
     {offset
       cKOp: // global
           _sCCZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cKOq; else goto cKOr;
       cKOr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cKOt; else goto cKOs;
       cKOt: // global
           HpAlloc = 40;
           goto cKOq;
       cKOq: // global
           R1 = _sCCZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKOs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCCZ::P64;
           _sCCK::P64 = P64[_sCCZ::P64 + 16];
           _sCCN::P64 = P64[_sCCZ::P64 + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Show.showList__2_closure+1;
           P64[Hp - 16] = _sCCK::P64;
           I64[Hp - 8] = showl_sCCP_info;
           P64[Hp] = Hp - 30;
           R2 = _sCCN::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call showl_sCCP_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCCZ_info" {
     sat_sCCZ_info:
         const sat_sCCZ_entry;
         const 2;
         const 4294967314;
         const SCNU_srt+1560;
 },
 sat_sCD3_entry() //  [R1]
         { []
         }
     {offset
       cKOx: // global
           _sCD3::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cKOy; else goto cKOz;
       cKOz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKOB; else goto cKOA;
       cKOB: // global
           HpAlloc = 32;
           goto cKOy;
       cKOy: // global
           R1 = _sCD3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKOA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sCD3::P64;
           _sCCK::P64 = P64[_sCD3::P64 + 16];
           _sCCM::P64 = P64[_sCD3::P64 + 24];
           _sCCN::P64 = P64[_sCD3::P64 + 32];
           I64[Hp - 24] = sat_sCCZ_info;
           P64[Hp - 8] = _sCCK::P64;
           P64[Hp] = _sCCN::P64;
           I64[Sp - 24] = block_cKOu_info;
           R4 = Hp - 24;
           R3 = _sCCM::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sCD3_info" {
     sat_sCD3_info:
         const sat_sCD3_entry;
         const 3;
         const 4294967311;
         const SCNU_srt+1560;
 },
 _cKOu() //  [R1, R2]
         { []
         }
     {offset
       cKOu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cKOE; else goto cKOD;
       cKOE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cKOD: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cKOu_info" {
     block_cKOu_info:
         const _cKOu;
         const 0;
         const 30;
 },
 GHC.Show.$fShowInteger_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cKOJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cKOK; else goto cKOL;
       cKOK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowInteger_$cshowList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cKOL: // global
           I64[Sp - 16] = block_cKNv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uKOS; else goto cKNw;
       uKOS: // global
           call _cKNv(R1) args: 0, res: 0, upd: 0;
       cKNw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInteger_$cshowList_info" {
     GHC.Show.$fShowInteger_$cshowList_info:
         const GHC.Show.$fShowInteger_$cshowList_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SCNU_srt+1560;
 },
 _cKNv() //  [R1]
         { []
         }
     {offset
       cKNv: // global
           _sCCK::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cKOG; else goto cKOH;
       cKOG: // global
           R3 = _sCCK::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cKOH: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cKOR; else goto cKOQ;
       cKOR: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cKOQ: // global
           _sCCM::P64 = P64[R1 + 6];
           _sCCN::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sCD3_info;
           P64[Hp - 40] = _sCCK::P64;
           P64[Hp - 32] = _sCCM::P64;
           P64[Hp - 24] = _sCCN::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cKNv_info" {
     block_cKNv_info:
         const _cKNv;
         const 1;
         const 4294967326;
         const SCNU_srt+1560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.342454745 UTC

[section ""data" . GHC.Show.$fShowInteger_closure" {
     GHC.Show.$fShowInteger_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowInteger_$cshowsPrec_closure+3;
         const GHC.Show.$fShowInteger_$cshow_closure+1;
         const GHC.Show.$fShowInteger_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.345401051 UTC

[section ""data" . GHC.Show.C:Show_closure" {
     GHC.Show.C:Show_closure:
         const GHC.Show.C:Show_info;
 },
 GHC.Show.C:Show_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cKPL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cKPP; else goto cKPO;
       cKPP: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.C:Show_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cKPO: // global
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.C:Show_info" {
     GHC.Show.C:Show_info:
         const GHC.Show.C:Show_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.348930129 UTC

[section ""cstring" . iH6X_str" {
     iH6X_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,104,111,119,46,67,58,83,104,111,119]
 },
 GHC.Show.C:Show_con_entry() //  [R1]
         { []
         }
     {offset
       cKPV: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.C:Show_con_info" {
     GHC.Show.C:Show_con_info:
         const GHC.Show.C:Show_con_entry;
         const 3;
         const 1;
         const iH6X_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:19.35389588 UTC

[section ""relreadonly" . SCNU_srt" {
     SCNU_srt:
         const GHC.List.$w!!_closure;
         const GHC.Show.asciiTab_closure;
         const GHC.Show.$wshowLitChar_closure;
         const GHC.Show.showLitChar_closure;
         const GHC.Show.showLitString_closure;
         const GHC.Show.$fShow(,)_$cshowList1_closure;
         const GHC.Show.$fShow[]_$s$cshow1_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.Show.$w$cshowsPrec_closure;
         const GHC.Show.$fShowSrcLoc_$cshowsPrec_closure;
         const GHC.Show.$fShowSrcLoc1_closure;
         const GHC.Show.$fShowSrcLoc_$cshow_closure;
         const GHC.List.errorEmptyList_closure;
         const go2_rC0p_closure;
         const lvl11_rC0o_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,)_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,)_closure;
         const GHC.Show.$fShow(,,,,,,,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,,,,,,)_closure;
         const GHC.Show.$fShow(,,,,,,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,,,,,)_closure;
         const GHC.Show.$fShow(,,,,,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,,,,)_closure;
         const GHC.Show.$fShow(,,,,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,,,)_closure;
         const GHC.Show.$fShow(,,,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,,)_closure;
         const GHC.Show.$fShow(,,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,)_closure;
         const GHC.Show.$fShow(,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,)_closure;
         const GHC.Show.$fShow(,,,)_go2_closure;
         const GHC.Show.$w$cshowsPrec2_closure;
         const GHC.Show.$fShow(,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,)_closure;
         const GHC.Show.$fShow(,,)_go2_closure;
         const GHC.Show.$w$cshowsPrec1_closure;
         const GHC.Show.$fShow(,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,)_$cshow_closure;
         const GHC.Show.$fShow(,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,)_closure;
         const GHC.Show.$fShow(,)_go2_closure;
         const GHC.Show.$w$cshowsPrec_closure;
         const GHC.Show.$fShow(,)_$cshowList1_closure;
         const GHC.Show.$w$s$cshowsPrec_closure;
         const GHC.Show.$fShow(,)_go1_closure;
         const GHC.Show.$fShow(,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,)_$cshow_closure;
         const GHC.Show.$fShow(,)_$cshowList_closure;
         const GHC.Show.$fShow(,)_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.Show.$fShowTypeLitSort2_closure;
         const GHC.Show.$fShowTypeLitSort4_closure;
         const GHC.Show.$fShowTypeLitSort_$cshowsPrec_closure;
         const GHC.Show.$fShowTypeLitSort_$cshow_closure;
         const GHC.Show.$fShowTypeLitSort1_closure;
         const GHC.Show.$w$cshowsPrec10_closure;
         const GHC.Show.$fShowVecElem1_closure;
         const GHC.Show.$fShowVecElem3_closure;
         const GHC.Show.$fShowVecElem5_closure;
         const GHC.Show.$fShowVecElem7_closure;
         const GHC.Show.$fShowVecElem9_closure;
         const GHC.Show.$fShowVecElem11_closure;
         const GHC.Show.$fShowVecElem13_closure;
         const GHC.Show.$fShowVecElem15_closure;
         const GHC.Show.$fShowVecElem17_closure;
         const GHC.Show.$fShowVecElem19_closure;
         const GHC.Show.$fShowVecElem_$cshow_closure;
         const GHC.Show.$w$cshowsPrec9_closure;
         const GHC.Show.$fShowVecCount1_closure;
         const GHC.Show.$fShowVecCount3_closure;
         const GHC.Show.$fShowVecCount5_closure;
         const GHC.Show.$fShowVecCount7_closure;
         const GHC.Show.$fShowVecCount9_closure;
         const GHC.Show.$fShowVecCount11_closure;
         const GHC.Show.$fShowVecCount_$cshow_closure;
         const GHC.Show.$w$cshowsPrec8_closure;
         const GHC.Show.$fShowOrdering1_closure;
         const GHC.Show.$fShowOrdering3_closure;
         const GHC.Show.$fShowOrdering5_closure;
         const GHC.Show.$fShowOrdering_$cshow_closure;
         const GHC.Show.$fShowBool2_closure;
         const GHC.Show.$fShowBool4_closure;
         const GHC.Show.$fShowBool_$cshowsPrec_closure;
         const GHC.Show.$fShowBool_$cshow_closure;
         const GHC.Show.$fShowBool1_closure;
         const GHC.Show.$fShow()2_closure;
         const GHC.Show.$fShow()_$cshowsPrec_closure;
         const GHC.Show.$fShow()_$cshow_closure;
         const GHC.Show.$fShow()1_closure;
         const lvl18_rC0M_closure;
         const GHC.Show.showLitString_closure;
         const lvl16_rC0K_closure;
         const GHC.Show.$wgo_closure;
         const lvl14_rC0I_closure;
         const GHC.Show.showMultiLineString_go_closure;
         const GHC.Show.showMultiLineString_closure;
         const GHC.Show.$wshowLitChar_closure;
         const GHC.Show.$fShowChar1_closure;
         const GHC.Show.$w$cshowsPrec3_closure;
         const GHC.Show.$fShowChar_$cshowsPrec_closure;
         const GHC.Show.$fShowChar_$cshow_closure;
         const GHC.Show.$fShow[]_$s$cshowList1_closure;
         const GHC.Show.$fShow(,)_$cshowList1_closure;
         const GHC.Show.$w$cshowsPrec10_closure;
         const GHC.Show.$fShowRuntimeRep_$cshowsPrec_closure;
         const lvl21_rC0R_closure;
         const lvl23_rC0T_closure;
         const lvl25_rC0V_closure;
         const lvl27_rC0X_closure;
         const lvl29_rC0Z_closure;
         const lvl31_rC11_closure;
         const lvl33_rC13_closure;
         const lvl35_rC15_closure;
         const lvl37_rC17_closure;
         const GHC.Show.$fShowRuntimeRep1_closure;
         const GHC.Show.$fShowCallStack2_closure;
         const GHC.Show.$w$s$cshowsPrec_closure;
         const GHC.Show.$fShowCallStack_$cshowsPrec_closure;
         const GHC.Show.$fShowCallStack_showl_closure;
         const GHC.Show.$fShowCallStack_$cshow_closure;
         const GHC.Show.$fShowCallStack3_closure;
         const GHC.Show.$fShowCallStack1_closure;
         const GHC.Show.$fShowMaybe4_closure;
         const GHC.Show.$fShowMaybe1_closure;
         const GHC.Show.$fShowMaybe_$cshowsPrec_closure;
         const GHC.Show.$fShowMaybe3_closure;
         const GHC.Show.$fShowMaybe_$cshow_closure;
         const GHC.Show.$fShowMaybe_$cshowList_closure;
         const GHC.Show.$fShowMaybe_closure;
         const GHC.Show.$w$cshowsPrec5_closure;
         const f11_rC1n_closure;
         const f9_rC1l_closure;
         const f7_rC1j_closure;
         const f5_rC1h_closure;
         const GHC.Show.showLitString_closure;
         const f3_rC1f_closure;
         const f1_rC1d_closure;
         const GHC.Show.$fShowKindRep_$cshowsPrec_closure;
         const GHC.Show.$fShowKindRep1_closure;
         const GHC.Show.$fShowKindRep_$cshow_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Show.intToDigit1_closure;
         const GHC.Show.intToDigit_closure;
         const GHC.Show.$wintToDigit_closure;
         const sat_sCB6_closure;
         const GHC.Show.$fShowInteger_jprintb_closure;
         const GHC.Show.$fShowInteger3_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Show.$fShowInteger1_closure;
         const GHC.Show.$wjsplitf_closure;
         const sat_sCBU_closure;
         const GHC.Show.$wintegerToString'_closure;
         const GHC.Show.$fShowInteger2_closure;
         const GHC.Show.$wintegerToString_closure;
         const GHC.Show.$w$cshowsPrec4_closure;
         const GHC.Show.$fShowInteger_$cshowsPrec_closure;
         const GHC.Show.$fShowInteger_$cshow_closure;
         const GHC.Show.$fShowInteger_$cshowList_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.157857573 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:55:31.159895999 UTC

[section ""data" . GHC.Show.showsPrec_closure" {
     GHC.Show.showsPrec_closure:
         const GHC.Show.showsPrec_info;
 },
 GHC.Show.showsPrec_entry() //  [R2]
         { []
         }
     {offset
       cLrK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cLrL; else goto cLrM;
       cLrL: // global
           R2 = R2;
           R1 = GHC.Show.showsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cLrM: // global
           I64[Sp - 8] = block_cLrH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uLrQ; else goto cLrI;
       uLrQ: // global
           call _cLrH(R1) args: 0, res: 0, upd: 0;
       cLrI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showsPrec_info" {
     GHC.Show.showsPrec_info:
         const GHC.Show.showsPrec_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cLrH() //  [R1]
         { []
         }
     {offset
       cLrH: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cLrH_info" {
     block_cLrH_info:
         const _cLrH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.2279607 UTC

[section ""data" . GHC.Show.show_closure" {
     GHC.Show.show_closure:
         const GHC.Show.show_info;
 },
 GHC.Show.show_entry() //  [R2]
         { []
         }
     {offset
       cLs8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cLs9; else goto cLsa;
       cLs9: // global
           R2 = R2;
           R1 = GHC.Show.show_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cLsa: // global
           I64[Sp - 8] = block_cLs5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uLse; else goto cLs6;
       uLse: // global
           call _cLs5(R1) args: 0, res: 0, upd: 0;
       cLs6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.show_info" {
     GHC.Show.show_info:
         const GHC.Show.show_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cLs5() //  [R1]
         { []
         }
     {offset
       cLs5: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cLs5_info" {
     block_cLs5_info:
         const _cLs5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.235828879 UTC

[section ""data" . GHC.Show.showList_closure" {
     GHC.Show.showList_closure:
         const GHC.Show.showList_info;
 },
 GHC.Show.showList_entry() //  [R2]
         { []
         }
     {offset
       cLsw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cLsx; else goto cLsy;
       cLsx: // global
           R2 = R2;
           R1 = GHC.Show.showList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cLsy: // global
           I64[Sp - 8] = block_cLst_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uLsC; else goto cLsu;
       uLsC: // global
           call _cLst(R1) args: 0, res: 0, upd: 0;
       cLsu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showList_info" {
     GHC.Show.showList_info:
         const GHC.Show.showList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cLst() //  [R1]
         { []
         }
     {offset
       cLst: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cLst_info" {
     block_cLst_info:
         const _cLst;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.243381566 UTC

[section ""cstring" . GHC.Show.showCommaSpace2_bytes" {
     GHC.Show.showCommaSpace2_bytes:
         I8[] [44,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.247385496 UTC

[section ""data" . GHC.Show.showCommaSpace1_closure" {
     GHC.Show.showCommaSpace1_closure:
         const GHC.Show.showCommaSpace1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.showCommaSpace1_entry() //  [R1]
         { []
         }
     {offset
       cLsU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLsV; else goto cLsW;
       cLsV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLsW: // global
           (_cLsR::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLsR::I64 == 0) goto cLsT; else goto cLsS;
       cLsT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLsS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLsR::I64;
           R2 = GHC.Show.showCommaSpace2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.showCommaSpace1_info" {
     GHC.Show.showCommaSpace1_info:
         const GHC.Show.showCommaSpace1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.251527639 UTC

[section ""data" . GHC.Show.showLitChar13_closure" {
     GHC.Show.showLitChar13_closure:
         const GHC.Types.C#_con_info;
         const 92;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.253216768 UTC

[section ""cstring" . GHC.Show.asciiTab98_bytes" {
     GHC.Show.asciiTab98_bytes:
         I8[] [78,85,76]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.255642567 UTC

[section ""data" . GHC.Show.asciiTab97_closure" {
     GHC.Show.asciiTab97_closure:
         const GHC.Show.asciiTab97_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab97_entry() //  [R1]
         { []
         }
     {offset
       cLtd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLte; else goto cLtf;
       cLte: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLtf: // global
           (_cLta::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLta::I64 == 0) goto cLtc; else goto cLtb;
       cLtc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLtb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLta::I64;
           R2 = GHC.Show.asciiTab98_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab97_info" {
     GHC.Show.asciiTab97_info:
         const GHC.Show.asciiTab97_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.259649273 UTC

[section ""cstring" . GHC.Show.asciiTab96_bytes" {
     GHC.Show.asciiTab96_bytes:
         I8[] [83,79,72]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.262600939 UTC

[section ""data" . GHC.Show.asciiTab95_closure" {
     GHC.Show.asciiTab95_closure:
         const GHC.Show.asciiTab95_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab95_entry() //  [R1]
         { []
         }
     {offset
       cLtv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLtw; else goto cLtx;
       cLtw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLtx: // global
           (_cLts::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLts::I64 == 0) goto cLtu; else goto cLtt;
       cLtu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLtt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLts::I64;
           R2 = GHC.Show.asciiTab96_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab95_info" {
     GHC.Show.asciiTab95_info:
         const GHC.Show.asciiTab95_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.267380215 UTC

[section ""cstring" . GHC.Show.asciiTab94_bytes" {
     GHC.Show.asciiTab94_bytes:
         I8[] [83,84,88]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.269958963 UTC

[section ""data" . GHC.Show.asciiTab93_closure" {
     GHC.Show.asciiTab93_closure:
         const GHC.Show.asciiTab93_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab93_entry() //  [R1]
         { []
         }
     {offset
       cLtN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLtO; else goto cLtP;
       cLtO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLtP: // global
           (_cLtK::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLtK::I64 == 0) goto cLtM; else goto cLtL;
       cLtM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLtL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLtK::I64;
           R2 = GHC.Show.asciiTab94_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab93_info" {
     GHC.Show.asciiTab93_info:
         const GHC.Show.asciiTab93_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.275151764 UTC

[section ""cstring" . GHC.Show.asciiTab92_bytes" {
     GHC.Show.asciiTab92_bytes:
         I8[] [69,84,88]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.278564992 UTC

[section ""data" . GHC.Show.asciiTab91_closure" {
     GHC.Show.asciiTab91_closure:
         const GHC.Show.asciiTab91_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab91_entry() //  [R1]
         { []
         }
     {offset
       cLu5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLu6; else goto cLu7;
       cLu6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLu7: // global
           (_cLu2::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLu2::I64 == 0) goto cLu4; else goto cLu3;
       cLu4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLu3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLu2::I64;
           R2 = GHC.Show.asciiTab92_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab91_info" {
     GHC.Show.asciiTab91_info:
         const GHC.Show.asciiTab91_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.28348294 UTC

[section ""cstring" . GHC.Show.asciiTab90_bytes" {
     GHC.Show.asciiTab90_bytes:
         I8[] [69,79,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.286722182 UTC

[section ""data" . GHC.Show.asciiTab89_closure" {
     GHC.Show.asciiTab89_closure:
         const GHC.Show.asciiTab89_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab89_entry() //  [R1]
         { []
         }
     {offset
       cLun: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLuo; else goto cLup;
       cLuo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLup: // global
           (_cLuk::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLuk::I64 == 0) goto cLum; else goto cLul;
       cLum: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLul: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLuk::I64;
           R2 = GHC.Show.asciiTab90_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab89_info" {
     GHC.Show.asciiTab89_info:
         const GHC.Show.asciiTab89_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.291713572 UTC

[section ""cstring" . GHC.Show.asciiTab88_bytes" {
     GHC.Show.asciiTab88_bytes:
         I8[] [69,78,81]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.295555172 UTC

[section ""data" . GHC.Show.asciiTab87_closure" {
     GHC.Show.asciiTab87_closure:
         const GHC.Show.asciiTab87_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab87_entry() //  [R1]
         { []
         }
     {offset
       cLuF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLuG; else goto cLuH;
       cLuG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLuH: // global
           (_cLuC::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLuC::I64 == 0) goto cLuE; else goto cLuD;
       cLuE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLuD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLuC::I64;
           R2 = GHC.Show.asciiTab88_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab87_info" {
     GHC.Show.asciiTab87_info:
         const GHC.Show.asciiTab87_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.300906623 UTC

[section ""cstring" . GHC.Show.asciiTab86_bytes" {
     GHC.Show.asciiTab86_bytes:
         I8[] [65,67,75]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.303693208 UTC

[section ""data" . GHC.Show.asciiTab85_closure" {
     GHC.Show.asciiTab85_closure:
         const GHC.Show.asciiTab85_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab85_entry() //  [R1]
         { []
         }
     {offset
       cLuX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLuY; else goto cLuZ;
       cLuY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLuZ: // global
           (_cLuU::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLuU::I64 == 0) goto cLuW; else goto cLuV;
       cLuW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLuV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLuU::I64;
           R2 = GHC.Show.asciiTab86_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab85_info" {
     GHC.Show.asciiTab85_info:
         const GHC.Show.asciiTab85_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.307979883 UTC

[section ""cstring" . GHC.Show.asciiTab84_bytes" {
     GHC.Show.asciiTab84_bytes:
         I8[] [66,69,76]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.310576042 UTC

[section ""data" . GHC.Show.asciiTab83_closure" {
     GHC.Show.asciiTab83_closure:
         const GHC.Show.asciiTab83_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab83_entry() //  [R1]
         { []
         }
     {offset
       cLvf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLvg; else goto cLvh;
       cLvg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLvh: // global
           (_cLvc::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLvc::I64 == 0) goto cLve; else goto cLvd;
       cLve: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLvd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLvc::I64;
           R2 = GHC.Show.asciiTab84_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab83_info" {
     GHC.Show.asciiTab83_info:
         const GHC.Show.asciiTab83_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.314407124 UTC

[section ""cstring" . GHC.Show.asciiTab82_bytes" {
     GHC.Show.asciiTab82_bytes:
         I8[] [66,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.317047244 UTC

[section ""data" . GHC.Show.asciiTab81_closure" {
     GHC.Show.asciiTab81_closure:
         const GHC.Show.asciiTab81_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab81_entry() //  [R1]
         { []
         }
     {offset
       cLvx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLvy; else goto cLvz;
       cLvy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLvz: // global
           (_cLvu::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLvu::I64 == 0) goto cLvw; else goto cLvv;
       cLvw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLvv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLvu::I64;
           R2 = GHC.Show.asciiTab82_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab81_info" {
     GHC.Show.asciiTab81_info:
         const GHC.Show.asciiTab81_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.320732592 UTC

[section ""cstring" . GHC.Show.asciiTab80_bytes" {
     GHC.Show.asciiTab80_bytes:
         I8[] [72,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.323043556 UTC

[section ""data" . GHC.Show.asciiTab79_closure" {
     GHC.Show.asciiTab79_closure:
         const GHC.Show.asciiTab79_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab79_entry() //  [R1]
         { []
         }
     {offset
       cLvP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLvQ; else goto cLvR;
       cLvQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLvR: // global
           (_cLvM::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLvM::I64 == 0) goto cLvO; else goto cLvN;
       cLvO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLvN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLvM::I64;
           R2 = GHC.Show.asciiTab80_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab79_info" {
     GHC.Show.asciiTab79_info:
         const GHC.Show.asciiTab79_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.327461783 UTC

[section ""cstring" . GHC.Show.asciiTab78_bytes" {
     GHC.Show.asciiTab78_bytes:
         I8[] [76,70]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.330184362 UTC

[section ""data" . GHC.Show.asciiTab77_closure" {
     GHC.Show.asciiTab77_closure:
         const GHC.Show.asciiTab77_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab77_entry() //  [R1]
         { []
         }
     {offset
       cLw7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLw8; else goto cLw9;
       cLw8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLw9: // global
           (_cLw4::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLw4::I64 == 0) goto cLw6; else goto cLw5;
       cLw6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLw5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLw4::I64;
           R2 = GHC.Show.asciiTab78_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab77_info" {
     GHC.Show.asciiTab77_info:
         const GHC.Show.asciiTab77_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.334848337 UTC

[section ""cstring" . GHC.Show.asciiTab76_bytes" {
     GHC.Show.asciiTab76_bytes:
         I8[] [86,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.337822764 UTC

[section ""data" . GHC.Show.asciiTab75_closure" {
     GHC.Show.asciiTab75_closure:
         const GHC.Show.asciiTab75_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab75_entry() //  [R1]
         { []
         }
     {offset
       cLwp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLwq; else goto cLwr;
       cLwq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLwr: // global
           (_cLwm::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLwm::I64 == 0) goto cLwo; else goto cLwn;
       cLwo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLwn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLwm::I64;
           R2 = GHC.Show.asciiTab76_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab75_info" {
     GHC.Show.asciiTab75_info:
         const GHC.Show.asciiTab75_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.341475362 UTC

[section ""cstring" . GHC.Show.asciiTab74_bytes" {
     GHC.Show.asciiTab74_bytes:
         I8[] [70,70]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.344260686 UTC

[section ""data" . GHC.Show.asciiTab73_closure" {
     GHC.Show.asciiTab73_closure:
         const GHC.Show.asciiTab73_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab73_entry() //  [R1]
         { []
         }
     {offset
       cLwH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLwI; else goto cLwJ;
       cLwI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLwJ: // global
           (_cLwE::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLwE::I64 == 0) goto cLwG; else goto cLwF;
       cLwG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLwF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLwE::I64;
           R2 = GHC.Show.asciiTab74_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab73_info" {
     GHC.Show.asciiTab73_info:
         const GHC.Show.asciiTab73_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.34784308 UTC

[section ""cstring" . GHC.Show.asciiTab72_bytes" {
     GHC.Show.asciiTab72_bytes:
         I8[] [67,82]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.350722435 UTC

[section ""data" . GHC.Show.asciiTab71_closure" {
     GHC.Show.asciiTab71_closure:
         const GHC.Show.asciiTab71_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab71_entry() //  [R1]
         { []
         }
     {offset
       cLwZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLx0; else goto cLx1;
       cLx0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLx1: // global
           (_cLwW::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLwW::I64 == 0) goto cLwY; else goto cLwX;
       cLwY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLwX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLwW::I64;
           R2 = GHC.Show.asciiTab72_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab71_info" {
     GHC.Show.asciiTab71_info:
         const GHC.Show.asciiTab71_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.355253384 UTC

[section ""cstring" . GHC.Show.asciiTab70_bytes" {
     GHC.Show.asciiTab70_bytes:
         I8[] [83,79]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.358917557 UTC

[section ""data" . GHC.Show.asciiTab69_closure" {
     GHC.Show.asciiTab69_closure:
         const GHC.Show.asciiTab69_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab69_entry() //  [R1]
         { []
         }
     {offset
       cLxh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLxi; else goto cLxj;
       cLxi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLxj: // global
           (_cLxe::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLxe::I64 == 0) goto cLxg; else goto cLxf;
       cLxg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLxf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLxe::I64;
           R2 = GHC.Show.asciiTab70_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab69_info" {
     GHC.Show.asciiTab69_info:
         const GHC.Show.asciiTab69_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.363274169 UTC

[section ""cstring" . GHC.Show.asciiTab68_bytes" {
     GHC.Show.asciiTab68_bytes:
         I8[] [83,73]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.366899275 UTC

[section ""data" . GHC.Show.asciiTab67_closure" {
     GHC.Show.asciiTab67_closure:
         const GHC.Show.asciiTab67_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab67_entry() //  [R1]
         { []
         }
     {offset
       cLxz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLxA; else goto cLxB;
       cLxA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLxB: // global
           (_cLxw::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLxw::I64 == 0) goto cLxy; else goto cLxx;
       cLxy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLxx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLxw::I64;
           R2 = GHC.Show.asciiTab68_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab67_info" {
     GHC.Show.asciiTab67_info:
         const GHC.Show.asciiTab67_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.373915981 UTC

[section ""cstring" . GHC.Show.asciiTab66_bytes" {
     GHC.Show.asciiTab66_bytes:
         I8[] [68,76,69]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.377712634 UTC

[section ""data" . GHC.Show.asciiTab65_closure" {
     GHC.Show.asciiTab65_closure:
         const GHC.Show.asciiTab65_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab65_entry() //  [R1]
         { []
         }
     {offset
       cLxR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLxS; else goto cLxT;
       cLxS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLxT: // global
           (_cLxO::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLxO::I64 == 0) goto cLxQ; else goto cLxP;
       cLxQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLxP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLxO::I64;
           R2 = GHC.Show.asciiTab66_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab65_info" {
     GHC.Show.asciiTab65_info:
         const GHC.Show.asciiTab65_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.384427302 UTC

[section ""cstring" . GHC.Show.asciiTab64_bytes" {
     GHC.Show.asciiTab64_bytes:
         I8[] [68,67,49]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.389370435 UTC

[section ""data" . GHC.Show.asciiTab63_closure" {
     GHC.Show.asciiTab63_closure:
         const GHC.Show.asciiTab63_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab63_entry() //  [R1]
         { []
         }
     {offset
       cLy9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLya; else goto cLyb;
       cLya: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLyb: // global
           (_cLy6::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLy6::I64 == 0) goto cLy8; else goto cLy7;
       cLy8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLy7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLy6::I64;
           R2 = GHC.Show.asciiTab64_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab63_info" {
     GHC.Show.asciiTab63_info:
         const GHC.Show.asciiTab63_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.395213825 UTC

[section ""cstring" . GHC.Show.asciiTab62_bytes" {
     GHC.Show.asciiTab62_bytes:
         I8[] [68,67,50]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.398911601 UTC

[section ""data" . GHC.Show.asciiTab61_closure" {
     GHC.Show.asciiTab61_closure:
         const GHC.Show.asciiTab61_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab61_entry() //  [R1]
         { []
         }
     {offset
       cLyr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLys; else goto cLyt;
       cLys: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLyt: // global
           (_cLyo::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLyo::I64 == 0) goto cLyq; else goto cLyp;
       cLyq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLyp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLyo::I64;
           R2 = GHC.Show.asciiTab62_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab61_info" {
     GHC.Show.asciiTab61_info:
         const GHC.Show.asciiTab61_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.40462933 UTC

[section ""cstring" . GHC.Show.asciiTab60_bytes" {
     GHC.Show.asciiTab60_bytes:
         I8[] [68,67,51]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.408319701 UTC

[section ""data" . GHC.Show.asciiTab59_closure" {
     GHC.Show.asciiTab59_closure:
         const GHC.Show.asciiTab59_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab59_entry() //  [R1]
         { []
         }
     {offset
       cLyJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLyK; else goto cLyL;
       cLyK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLyL: // global
           (_cLyG::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLyG::I64 == 0) goto cLyI; else goto cLyH;
       cLyI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLyH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLyG::I64;
           R2 = GHC.Show.asciiTab60_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab59_info" {
     GHC.Show.asciiTab59_info:
         const GHC.Show.asciiTab59_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.414431331 UTC

[section ""cstring" . GHC.Show.asciiTab58_bytes" {
     GHC.Show.asciiTab58_bytes:
         I8[] [68,67,52]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.418692769 UTC

[section ""data" . GHC.Show.asciiTab57_closure" {
     GHC.Show.asciiTab57_closure:
         const GHC.Show.asciiTab57_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab57_entry() //  [R1]
         { []
         }
     {offset
       cLz1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLz2; else goto cLz3;
       cLz2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLz3: // global
           (_cLyY::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLyY::I64 == 0) goto cLz0; else goto cLyZ;
       cLz0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLyZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLyY::I64;
           R2 = GHC.Show.asciiTab58_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab57_info" {
     GHC.Show.asciiTab57_info:
         const GHC.Show.asciiTab57_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.424490159 UTC

[section ""cstring" . GHC.Show.asciiTab56_bytes" {
     GHC.Show.asciiTab56_bytes:
         I8[] [78,65,75]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.428173114 UTC

[section ""data" . GHC.Show.asciiTab55_closure" {
     GHC.Show.asciiTab55_closure:
         const GHC.Show.asciiTab55_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab55_entry() //  [R1]
         { []
         }
     {offset
       cLzj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLzk; else goto cLzl;
       cLzk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLzl: // global
           (_cLzg::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLzg::I64 == 0) goto cLzi; else goto cLzh;
       cLzi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLzh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLzg::I64;
           R2 = GHC.Show.asciiTab56_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab55_info" {
     GHC.Show.asciiTab55_info:
         const GHC.Show.asciiTab55_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.43422103 UTC

[section ""cstring" . GHC.Show.asciiTab54_bytes" {
     GHC.Show.asciiTab54_bytes:
         I8[] [83,89,78]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.437768944 UTC

[section ""data" . GHC.Show.asciiTab53_closure" {
     GHC.Show.asciiTab53_closure:
         const GHC.Show.asciiTab53_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab53_entry() //  [R1]
         { []
         }
     {offset
       cLzB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLzC; else goto cLzD;
       cLzC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLzD: // global
           (_cLzy::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLzy::I64 == 0) goto cLzA; else goto cLzz;
       cLzA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLzz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLzy::I64;
           R2 = GHC.Show.asciiTab54_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab53_info" {
     GHC.Show.asciiTab53_info:
         const GHC.Show.asciiTab53_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.442018746 UTC

[section ""cstring" . GHC.Show.asciiTab52_bytes" {
     GHC.Show.asciiTab52_bytes:
         I8[] [69,84,66]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.444414811 UTC

[section ""data" . GHC.Show.asciiTab51_closure" {
     GHC.Show.asciiTab51_closure:
         const GHC.Show.asciiTab51_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab51_entry() //  [R1]
         { []
         }
     {offset
       cLzT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLzU; else goto cLzV;
       cLzU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLzV: // global
           (_cLzQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLzQ::I64 == 0) goto cLzS; else goto cLzR;
       cLzS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLzR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLzQ::I64;
           R2 = GHC.Show.asciiTab52_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab51_info" {
     GHC.Show.asciiTab51_info:
         const GHC.Show.asciiTab51_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.448091172 UTC

[section ""cstring" . GHC.Show.asciiTab50_bytes" {
     GHC.Show.asciiTab50_bytes:
         I8[] [67,65,78]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.450439828 UTC

[section ""data" . GHC.Show.asciiTab49_closure" {
     GHC.Show.asciiTab49_closure:
         const GHC.Show.asciiTab49_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab49_entry() //  [R1]
         { []
         }
     {offset
       cLAb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLAc; else goto cLAd;
       cLAc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLAd: // global
           (_cLA8::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLA8::I64 == 0) goto cLAa; else goto cLA9;
       cLAa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLA9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLA8::I64;
           R2 = GHC.Show.asciiTab50_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab49_info" {
     GHC.Show.asciiTab49_info:
         const GHC.Show.asciiTab49_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.454251387 UTC

[section ""cstring" . GHC.Show.asciiTab48_bytes" {
     GHC.Show.asciiTab48_bytes:
         I8[] [69,77]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.456563765 UTC

[section ""data" . GHC.Show.asciiTab47_closure" {
     GHC.Show.asciiTab47_closure:
         const GHC.Show.asciiTab47_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab47_entry() //  [R1]
         { []
         }
     {offset
       cLAt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLAu; else goto cLAv;
       cLAu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLAv: // global
           (_cLAq::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLAq::I64 == 0) goto cLAs; else goto cLAr;
       cLAs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLAr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLAq::I64;
           R2 = GHC.Show.asciiTab48_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab47_info" {
     GHC.Show.asciiTab47_info:
         const GHC.Show.asciiTab47_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.460219351 UTC

[section ""cstring" . GHC.Show.asciiTab46_bytes" {
     GHC.Show.asciiTab46_bytes:
         I8[] [83,85,66]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.462802569 UTC

[section ""data" . GHC.Show.asciiTab45_closure" {
     GHC.Show.asciiTab45_closure:
         const GHC.Show.asciiTab45_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab45_entry() //  [R1]
         { []
         }
     {offset
       cLAL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLAM; else goto cLAN;
       cLAM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLAN: // global
           (_cLAI::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLAI::I64 == 0) goto cLAK; else goto cLAJ;
       cLAK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLAJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLAI::I64;
           R2 = GHC.Show.asciiTab46_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab45_info" {
     GHC.Show.asciiTab45_info:
         const GHC.Show.asciiTab45_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.466456914 UTC

[section ""cstring" . GHC.Show.asciiTab44_bytes" {
     GHC.Show.asciiTab44_bytes:
         I8[] [69,83,67]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.468788474 UTC

[section ""data" . GHC.Show.asciiTab43_closure" {
     GHC.Show.asciiTab43_closure:
         const GHC.Show.asciiTab43_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab43_entry() //  [R1]
         { []
         }
     {offset
       cLB3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLB4; else goto cLB5;
       cLB4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLB5: // global
           (_cLB0::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLB0::I64 == 0) goto cLB2; else goto cLB1;
       cLB2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLB1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLB0::I64;
           R2 = GHC.Show.asciiTab44_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab43_info" {
     GHC.Show.asciiTab43_info:
         const GHC.Show.asciiTab43_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.472615281 UTC

[section ""cstring" . GHC.Show.asciiTab42_bytes" {
     GHC.Show.asciiTab42_bytes:
         I8[] [70,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.476079382 UTC

[section ""data" . GHC.Show.asciiTab41_closure" {
     GHC.Show.asciiTab41_closure:
         const GHC.Show.asciiTab41_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab41_entry() //  [R1]
         { []
         }
     {offset
       cLBl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLBm; else goto cLBn;
       cLBm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLBn: // global
           (_cLBi::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLBi::I64 == 0) goto cLBk; else goto cLBj;
       cLBk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLBj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLBi::I64;
           R2 = GHC.Show.asciiTab42_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab41_info" {
     GHC.Show.asciiTab41_info:
         const GHC.Show.asciiTab41_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.479689635 UTC

[section ""cstring" . GHC.Show.asciiTab40_bytes" {
     GHC.Show.asciiTab40_bytes:
         I8[] [71,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.482117665 UTC

[section ""data" . GHC.Show.asciiTab39_closure" {
     GHC.Show.asciiTab39_closure:
         const GHC.Show.asciiTab39_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab39_entry() //  [R1]
         { []
         }
     {offset
       cLBD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLBE; else goto cLBF;
       cLBE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLBF: // global
           (_cLBA::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLBA::I64 == 0) goto cLBC; else goto cLBB;
       cLBC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLBB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLBA::I64;
           R2 = GHC.Show.asciiTab40_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab39_info" {
     GHC.Show.asciiTab39_info:
         const GHC.Show.asciiTab39_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.485778988 UTC

[section ""cstring" . GHC.Show.asciiTab38_bytes" {
     GHC.Show.asciiTab38_bytes:
         I8[] [82,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.488221648 UTC

[section ""data" . GHC.Show.asciiTab37_closure" {
     GHC.Show.asciiTab37_closure:
         const GHC.Show.asciiTab37_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab37_entry() //  [R1]
         { []
         }
     {offset
       cLBV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLBW; else goto cLBX;
       cLBW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLBX: // global
           (_cLBS::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLBS::I64 == 0) goto cLBU; else goto cLBT;
       cLBU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLBT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLBS::I64;
           R2 = GHC.Show.asciiTab38_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab37_info" {
     GHC.Show.asciiTab37_info:
         const GHC.Show.asciiTab37_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.492142751 UTC

[section ""cstring" . GHC.Show.asciiTab36_bytes" {
     GHC.Show.asciiTab36_bytes:
         I8[] [85,83]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.494464153 UTC

[section ""data" . GHC.Show.asciiTab35_closure" {
     GHC.Show.asciiTab35_closure:
         const GHC.Show.asciiTab35_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab35_entry() //  [R1]
         { []
         }
     {offset
       cLCd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLCe; else goto cLCf;
       cLCe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLCf: // global
           (_cLCa::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLCa::I64 == 0) goto cLCc; else goto cLCb;
       cLCc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLCb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLCa::I64;
           R2 = GHC.Show.asciiTab36_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab35_info" {
     GHC.Show.asciiTab35_info:
         const GHC.Show.asciiTab35_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.498145175 UTC

[section ""cstring" . GHC.Show.asciiTab34_bytes" {
     GHC.Show.asciiTab34_bytes:
         I8[] [83,80]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.500498486 UTC

[section ""data" . GHC.Show.asciiTab33_closure" {
     GHC.Show.asciiTab33_closure:
         const GHC.Show.asciiTab33_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.asciiTab33_entry() //  [R1]
         { []
         }
     {offset
       cLCv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLCw; else goto cLCx;
       cLCw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLCx: // global
           (_cLCs::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cLCs::I64 == 0) goto cLCu; else goto cLCt;
       cLCu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cLCt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cLCs::I64;
           R2 = GHC.Show.asciiTab34_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.asciiTab33_info" {
     GHC.Show.asciiTab33_info:
         const GHC.Show.asciiTab33_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.504086732 UTC

[section ""data" . GHC.Show.asciiTab32_closure" {
     GHC.Show.asciiTab32_closure:
         const :_con_info;
         const GHC.Show.asciiTab33_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.506432838 UTC

[section ""data" . GHC.Show.asciiTab31_closure" {
     GHC.Show.asciiTab31_closure:
         const :_con_info;
         const GHC.Show.asciiTab35_closure;
         const GHC.Show.asciiTab32_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.508334962 UTC

[section ""data" . GHC.Show.asciiTab30_closure" {
     GHC.Show.asciiTab30_closure:
         const :_con_info;
         const GHC.Show.asciiTab37_closure;
         const GHC.Show.asciiTab31_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.510128863 UTC

[section ""data" . GHC.Show.asciiTab29_closure" {
     GHC.Show.asciiTab29_closure:
         const :_con_info;
         const GHC.Show.asciiTab39_closure;
         const GHC.Show.asciiTab30_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.511903771 UTC

[section ""data" . GHC.Show.asciiTab28_closure" {
     GHC.Show.asciiTab28_closure:
         const :_con_info;
         const GHC.Show.asciiTab41_closure;
         const GHC.Show.asciiTab29_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.513684371 UTC

[section ""data" . GHC.Show.asciiTab27_closure" {
     GHC.Show.asciiTab27_closure:
         const :_con_info;
         const GHC.Show.asciiTab43_closure;
         const GHC.Show.asciiTab28_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.515406076 UTC

[section ""data" . GHC.Show.asciiTab26_closure" {
     GHC.Show.asciiTab26_closure:
         const :_con_info;
         const GHC.Show.asciiTab45_closure;
         const GHC.Show.asciiTab27_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.517131193 UTC

[section ""data" . GHC.Show.asciiTab25_closure" {
     GHC.Show.asciiTab25_closure:
         const :_con_info;
         const GHC.Show.asciiTab47_closure;
         const GHC.Show.asciiTab26_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.518970287 UTC

[section ""data" . GHC.Show.asciiTab24_closure" {
     GHC.Show.asciiTab24_closure:
         const :_con_info;
         const GHC.Show.asciiTab49_closure;
         const GHC.Show.asciiTab25_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.5206833 UTC

[section ""data" . GHC.Show.asciiTab23_closure" {
     GHC.Show.asciiTab23_closure:
         const :_con_info;
         const GHC.Show.asciiTab51_closure;
         const GHC.Show.asciiTab24_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.522908466 UTC

[section ""data" . GHC.Show.asciiTab22_closure" {
     GHC.Show.asciiTab22_closure:
         const :_con_info;
         const GHC.Show.asciiTab53_closure;
         const GHC.Show.asciiTab23_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.52465933 UTC

[section ""data" . GHC.Show.asciiTab21_closure" {
     GHC.Show.asciiTab21_closure:
         const :_con_info;
         const GHC.Show.asciiTab55_closure;
         const GHC.Show.asciiTab22_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.526411729 UTC

[section ""data" . GHC.Show.asciiTab20_closure" {
     GHC.Show.asciiTab20_closure:
         const :_con_info;
         const GHC.Show.asciiTab57_closure;
         const GHC.Show.asciiTab21_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.528090253 UTC

[section ""data" . GHC.Show.asciiTab19_closure" {
     GHC.Show.asciiTab19_closure:
         const :_con_info;
         const GHC.Show.asciiTab59_closure;
         const GHC.Show.asciiTab20_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.529902966 UTC

[section ""data" . GHC.Show.asciiTab18_closure" {
     GHC.Show.asciiTab18_closure:
         const :_con_info;
         const GHC.Show.asciiTab61_closure;
         const GHC.Show.asciiTab19_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.531626496 UTC

[section ""data" . GHC.Show.asciiTab17_closure" {
     GHC.Show.asciiTab17_closure:
         const :_con_info;
         const GHC.Show.asciiTab63_closure;
         const GHC.Show.asciiTab18_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.534354593 UTC

[section ""data" . GHC.Show.asciiTab16_closure" {
     GHC.Show.asciiTab16_closure:
         const :_con_info;
         const GHC.Show.asciiTab65_closure;
         const GHC.Show.asciiTab17_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.536123345 UTC

[section ""data" . GHC.Show.asciiTab15_closure" {
     GHC.Show.asciiTab15_closure:
         const :_con_info;
         const GHC.Show.asciiTab67_closure;
         const GHC.Show.asciiTab16_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.5378987 UTC

[section ""data" . GHC.Show.asciiTab14_closure" {
     GHC.Show.asciiTab14_closure:
         const :_con_info;
         const GHC.Show.asciiTab69_closure;
         const GHC.Show.asciiTab15_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.539538536 UTC

[section ""data" . GHC.Show.asciiTab13_closure" {
     GHC.Show.asciiTab13_closure:
         const :_con_info;
         const GHC.Show.asciiTab71_closure;
         const GHC.Show.asciiTab14_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.541383777 UTC

[section ""data" . GHC.Show.asciiTab12_closure" {
     GHC.Show.asciiTab12_closure:
         const :_con_info;
         const GHC.Show.asciiTab73_closure;
         const GHC.Show.asciiTab13_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.543210352 UTC

[section ""data" . GHC.Show.asciiTab11_closure" {
     GHC.Show.asciiTab11_closure:
         const :_con_info;
         const GHC.Show.asciiTab75_closure;
         const GHC.Show.asciiTab12_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.544935387 UTC

[section ""data" . GHC.Show.asciiTab10_closure" {
     GHC.Show.asciiTab10_closure:
         const :_con_info;
         const GHC.Show.asciiTab77_closure;
         const GHC.Show.asciiTab11_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.546765302 UTC

[section ""data" . GHC.Show.asciiTab9_closure" {
     GHC.Show.asciiTab9_closure:
         const :_con_info;
         const GHC.Show.asciiTab79_closure;
         const GHC.Show.asciiTab10_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.548532912 UTC

[section ""data" . GHC.Show.asciiTab8_closure" {
     GHC.Show.asciiTab8_closure:
         const :_con_info;
         const GHC.Show.asciiTab81_closure;
         const GHC.Show.asciiTab9_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.550351774 UTC

[section ""data" . GHC.Show.asciiTab7_closure" {
     GHC.Show.asciiTab7_closure:
         const :_con_info;
         const GHC.Show.asciiTab83_closure;
         const GHC.Show.asciiTab8_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.552294775 UTC

[section ""data" . GHC.Show.asciiTab6_closure" {
     GHC.Show.asciiTab6_closure:
         const :_con_info;
         const GHC.Show.asciiTab85_closure;
         const GHC.Show.asciiTab7_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.554692113 UTC

[section ""data" . GHC.Show.asciiTab5_closure" {
     GHC.Show.asciiTab5_closure:
         const :_con_info;
         const GHC.Show.asciiTab87_closure;
         const GHC.Show.asciiTab6_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.556431934 UTC

[section ""data" . GHC.Show.asciiTab4_closure" {
     GHC.Show.asciiTab4_closure:
         const :_con_info;
         const GHC.Show.asciiTab89_closure;
         const GHC.Show.asciiTab5_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.558321054 UTC

[section ""data" . GHC.Show.asciiTab3_closure" {
     GHC.Show.asciiTab3_closure:
         const :_con_info;
         const GHC.Show.asciiTab91_closure;
         const GHC.Show.asciiTab4_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.560580107 UTC

[section ""data" . GHC.Show.asciiTab2_closure" {
     GHC.Show.asciiTab2_closure:
         const :_con_info;
         const GHC.Show.asciiTab93_closure;
         const GHC.Show.asciiTab3_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.562886435 UTC

[section ""data" . GHC.Show.asciiTab1_closure" {
     GHC.Show.asciiTab1_closure:
         const :_con_info;
         const GHC.Show.asciiTab95_closure;
         const GHC.Show.asciiTab2_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.564621074 UTC

[section ""data" . GHC.Show.asciiTab_closure" {
     GHC.Show.asciiTab_closure:
         const :_con_info;
         const GHC.Show.asciiTab97_closure;
         const GHC.Show.asciiTab1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.566401221 UTC

[section ""data" . GHC.Show.$fShow(,)2_closure" {
     GHC.Show.$fShow(,)2_closure:
         const GHC.Types.C#_con_info;
         const 41;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.568072218 UTC

[section ""data" . GHC.Show.$fShow(,)4_closure" {
     GHC.Show.$fShow(,)4_closure:
         const GHC.Types.C#_con_info;
         const 40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.569952186 UTC

[section ""data" . GHC.Show.showLitChar1_closure" {
     GHC.Show.showLitChar1_closure:
         const GHC.Types.C#_con_info;
         const 45;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.572833037 UTC

[section ""data" . GHC.Show.$witos'_closure" {
     GHC.Show.$witos'_closure:
         const GHC.Show.$witos'_info;
 },
 GHC.Show.$witos'_entry() //  [R2, R3]
         { []
         }
     {offset
       cLDy: // global
           _sKQi::P64 = R3;
           _sKQh::I64 = R2;
           goto cLDh;
       cLDh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cLDC; else goto cLDB;
       cLDC: // global
           HpAlloc = 40;
           R3 = _sKQi::P64;
           R2 = _sKQh::I64;
           R1 = GHC.Show.$witos'_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cLDB: // global
           if (%MO_S_Ge_W64(_sKQh::I64, 10)) goto cLDw; else goto cLDx;
       cLDw: // global
           (_sKQl::I64, _sKQm::I64) = call MO_S_QuotRem W64(_sKQh::I64, 10);
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _sKQm::I64 + 48;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _sKQi::P64;
           _sKQi::P64 = Hp - 14;
           _sKQh::I64 = _sKQl::I64;
           goto cLDh;
       cLDx: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _sKQh::I64 + 48;
           _cLDK::P64 = Hp - 31;
           Hp = Hp - 24;
           R2 = _sKQi::P64;
           R1 = _cLDK::P64;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$witos'_info" {
     GHC.Show.$witos'_info:
         const GHC.Show.$witos'_entry;
         const 0;
         const 14;
         const 8589934605;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.581158245 UTC

[section ""data" . GHC.Show.$witos_closure" {
     GHC.Show.$witos_closure:
         const GHC.Show.$witos_info;
 },
 sat_sKQC_entry() //  [R1]
         { []
         }
     {offset
       cLEe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cLEj; else goto cLEk;
       cLEj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLEk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cLEg_info;
           R3 = P64[R1 + 16];
           R2 = -I64[R1 + 24];
           Sp = Sp - 24;
           call GHC.Show.$witos'_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKQC_info" {
     sat_sKQC_info:
         const sat_sKQC_entry;
         const 4294967297;
         const 19;
 },
 _cLEg() //  [R1, R2]
         { []
         }
     {offset
       cLEg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cLEn; else goto cLEm;
       cLEn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cLEm: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cLEg_info" {
     block_cLEg_info:
         const _cLEg;
         const 0;
         const 30;
 },
 sat_sKQL_entry() //  [R1]
         { []
         }
     {offset
       cLEz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cLEE; else goto cLEF;
       cLEE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLEF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cLEB_info;
           R3 = P64[R1 + 16];
           R2 = -I64[R1 + 24];
           Sp = Sp - 24;
           call GHC.Show.$witos'_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKQL_info" {
     sat_sKQL_info:
         const sat_sKQL_entry;
         const 4294967297;
         const 19;
 },
 _cLEB() //  [R1, R2]
         { []
         }
     {offset
       cLEB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cLEI; else goto cLEH;
       cLEI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cLEH: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cLEB_info" {
     block_cLEB_info:
         const _cLEB;
         const 0;
         const 30;
 },
 sat_sKQP_entry() //  [R1]
         { []
         }
     {offset
       cLEL: // global
           _sKQP::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cLEQ; else goto cLER;
       cLER: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cLET; else goto cLES;
       cLET: // global
           HpAlloc = 32;
           goto cLEQ;
       cLEQ: // global
           R1 = _sKQP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLES: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKQP::P64;
           _sKQv::P64 = P64[_sKQP::P64 + 16];
           (_sKQE::I64, _sKQF::I64) = call MO_S_QuotRem W64((-9223372036854775808), 10);
           I64[Hp - 24] = sat_sKQL_info;
           P64[Hp - 8] = _sKQv::P64;
           I64[Hp] = _sKQF::I64;
           I64[Sp - 24] = block_cLEN_info;
           R3 = Hp - 24;
           R2 = -_sKQE::I64;
           Sp = Sp - 24;
           call GHC.Show.$witos'_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKQP_info" {
     sat_sKQP_info:
         const sat_sKQP_entry;
         const 1;
         const 16;
 },
 _cLEN() //  [R1, R2]
         { []
         }
     {offset
       cLEN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cLEW; else goto cLEV;
       cLEW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cLEV: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cLEN_info" {
     block_cLEN_info:
         const _cLEN;
         const 0;
         const 30;
 },
 GHC.Show.$witos_entry() //  [R2, R3]
         { []
         }
     {offset
       cLF0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cLF4; else goto cLF3;
       cLF4: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$witos_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cLF3: // global
           if (%MO_S_Ge_W64(R2, 0)) goto cLEY; else goto cLEZ;
       cLEY: // global
           Hp = Hp - 32;
           R3 = R3;
           R2 = R2;
           call GHC.Show.$witos'_entry(R3, R2) args: 8, res: 0, upd: 8;
       cLEZ: // global
           if (R2 == (-9223372036854775808)) goto cLF7; else goto cLF6;
       cLF7: // global
           I64[Hp - 24] = sat_sKQP_info;
           P64[Hp - 8] = R3;
           _cLEp::P64 = Hp - 24;
           Hp = Hp - 8;
           R2 = _cLEp::P64;
           R1 = GHC.Show.showLitChar1_closure+1;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cLF6: // global
           I64[Hp - 24] = sat_sKQC_info;
           P64[Hp - 8] = R3;
           I64[Hp] = R2;
           R2 = Hp - 24;
           R1 = GHC.Show.showLitChar1_closure+1;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$witos_info" {
     GHC.Show.$witos_info:
         const GHC.Show.$witos_entry;
         const 0;
         const 14;
         const 8589934605;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.600900025 UTC

[section ""data" . GHC.Show.$wshowSignedInt_closure" {
     GHC.Show.$wshowSignedInt_closure:
         const GHC.Show.$wshowSignedInt_info;
 },
 sat_sKQZ_entry() //  [R1]
         { []
         }
     {offset
       cLGa: // global
           _sKQZ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cLGb; else goto cLGc;
       cLGc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cLGe; else goto cLGd;
       cLGe: // global
           HpAlloc = 24;
           goto cLGb;
       cLGb: // global
           R1 = _sKQZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLGd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKQZ::P64;
           _sKQS::P64 = P64[_sKQZ::P64 + 16];
           _sKQR::I64 = I64[_sKQZ::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sKQS::P64;
           I64[Sp - 24] = block_cLG7_info;
           R3 = Hp - 14;
           R2 = _sKQR::I64;
           Sp = Sp - 24;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKQZ_info" {
     sat_sKQZ_info:
         const sat_sKQZ_entry;
         const 4294967297;
         const 19;
 },
 _cLG7() //  [R1, R2]
         { []
         }
     {offset
       cLG7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cLGh; else goto cLGg;
       cLGh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cLGg: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cLG7_info" {
     block_cLG7_info:
         const _cLG7;
         const 0;
         const 30;
 },
 GHC.Show.$wshowSignedInt_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cLGl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cLGp; else goto cLGo;
       cLGp: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$wshowSignedInt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cLGo: // global
           _sKQS::P64 = R4;
           _sKQR::I64 = R3;
           if (%MO_S_Ge_W64(R3, 0)) goto cLGr; else goto cLGk;
       cLGk: // global
           if (%MO_S_Le_W64(R2, 6)) goto cLGr; else goto cLGs;
       cLGr: // global
           Hp = Hp - 32;
           R3 = _sKQS::P64;
           R2 = _sKQR::I64;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 0, upd: 8;
       cLGs: // global
           I64[Hp - 24] = sat_sKQZ_info;
           P64[Hp - 8] = _sKQS::P64;
           I64[Hp] = _sKQR::I64;
           R2 = Hp - 24;
           R1 = GHC.Show.$fShow(,)4_closure+1;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$wshowSignedInt_info" {
     GHC.Show.$wshowSignedInt_info:
         const GHC.Show.$wshowSignedInt_entry;
         const 0;
         const 14;
         const 12884901905;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.613788204 UTC

[section ""data" . GHC.Show.showSignedInt_closure" {
     GHC.Show.showSignedInt_closure:
         const GHC.Show.showSignedInt_info;
 },
 GHC.Show.showSignedInt_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cLGT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cLH4; else goto cLH5;
       cLH4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.showSignedInt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cLH5: // global
           I64[Sp - 24] = block_cLGQ_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uLHc; else goto cLGR;
       uLHc: // global
           call _cLGQ(R1) args: 0, res: 0, upd: 0;
       cLGR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showSignedInt_info" {
     GHC.Show.showSignedInt_info:
         const GHC.Show.showSignedInt_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cLGQ() //  [R1]
         { []
         }
     {offset
       cLGQ: // global
           I64[Sp] = block_cLGW_info;
           _sKR4::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sKR4::I64;
           if (R1 & 7 != 0) goto uLHb; else goto cLGX;
       uLHb: // global
           call _cLGW(R1) args: 0, res: 0, upd: 0;
       cLGX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cLGQ_info" {
     block_cLGQ_info:
         const _cLGQ;
         const 2;
         const 30;
 },
 _cLGW() //  [R1]
         { []
         }
     {offset
       cLGW: // global
           _sKR2::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cLH1_info;
           R4 = _sKR2::P64;
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cLGW_info" {
     block_cLGW_info:
         const _cLGW;
         const 66;
         const 30;
 },
 _cLH1() //  [R1, R2]
         { []
         }
     {offset
       cLH1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cLHa; else goto cLH9;
       cLHa: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cLH9: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cLH1_info" {
     block_cLH1_info:
         const _cLH1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.6224841 UTC

[section ""cstring" . GHC.Show.showLitChar12_bytes" {
     GHC.Show.showLitChar12_bytes:
         I8[] [92,97]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.624169576 UTC

[section ""cstring" . GHC.Show.showLitChar11_bytes" {
     GHC.Show.showLitChar11_bytes:
         I8[] [92,98]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.625943118 UTC

[section ""cstring" . GHC.Show.showLitChar10_bytes" {
     GHC.Show.showLitChar10_bytes:
         I8[] [92,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.627672323 UTC

[section ""cstring" . GHC.Show.showLitChar9_bytes" {
     GHC.Show.showLitChar9_bytes:
         I8[] [92,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.629428364 UTC

[section ""cstring" . GHC.Show.showLitChar8_bytes" {
     GHC.Show.showLitChar8_bytes:
         I8[] [92,118]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.631120289 UTC

[section ""cstring" . GHC.Show.showLitChar7_bytes" {
     GHC.Show.showLitChar7_bytes:
         I8[] [92,102]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.632840525 UTC

[section ""cstring" . GHC.Show.showLitChar6_bytes" {
     GHC.Show.showLitChar6_bytes:
         I8[] [92,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.634632843 UTC

[section ""cstring" . GHC.Show.showLitChar5_bytes" {
     GHC.Show.showLitChar5_bytes:
         I8[] [92,83,79]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.636876545 UTC

[section ""cstring" . GHC.Show.showLitChar4_bytes" {
     GHC.Show.showLitChar4_bytes:
         I8[] [92,38]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.638732655 UTC

[section ""cstring" . GHC.Show.showLitChar3_bytes" {
     GHC.Show.showLitChar3_bytes:
         I8[] [92,92]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.640363063 UTC

[section ""cstring" . GHC.Show.showLitChar2_bytes" {
     GHC.Show.showLitChar2_bytes:
         I8[] [92,68,69,76]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.649034257 UTC

[section ""data" . GHC.Show.$wshowLitChar_closure" {
     GHC.Show.$wshowLitChar_closure:
         const GHC.Show.$wshowLitChar_info;
         const 0;
 },
 sat_sKRh_entry() //  [R1]
         { []
         }
     {offset
       cLI3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLI4; else goto cLI5;
       cLI4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLI5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 16];
           R2 = GHC.Show.asciiTab_closure+2;
           Sp = Sp - 16;
           call GHC.List.$w!!_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKRh_info" {
     sat_sKRh_info:
         const sat_sKRh_entry;
         const 4294967296;
         const 12884901905;
         const SLKe_srt;
 },
 sat_sKRp_entry() //  [R1]
         { []
         }
     {offset
       cLIp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cLIq; else goto cLIr;
       cLIq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLIr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cLIi_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uLIJ; else goto cLIj;
       uLIJ: // global
           call _cLIi(R1) args: 0, res: 0, upd: 0;
       cLIj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKRp_info" {
     sat_sKRp_info:
         const sat_sKRp_entry;
         const 1;
         const 16;
 },
 _cLIi() //  [R1]
         { []
         }
     {offset
       cLIi: // global
           if (R1 & 7 == 1) goto cLIm; else goto cLIn;
       cLIm: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cLIn: // global
           I64[Sp - 8] = block_cLIx_info;
           _sKRj::P64 = R1;
           R1 = P64[R1 + 6];
           P64[Sp] = _sKRj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uLII; else goto cLIz;
       uLII: // global
           call _cLIx(R1) args: 0, res: 0, upd: 0;
       cLIz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cLIi_info" {
     block_cLIi_info:
         const _cLIi;
         const 0;
         const 30;
 },
 _cLIx() //  [R1]
         { []
         }
     {offset
       cLIx: // global
           _sKRj::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 72) goto cLIH; else goto cLIG;
       cLIH: // global
           R3 = _sKRj::P64;
           R2 = GHC.Show.showLitChar4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       cLIG: // global
           R1 = _sKRj::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cLIx_info" {
     block_cLIx_info:
         const _cLIx;
         const 1;
         const 30;
 },
 sat_sKRz_entry() //  [R1]
         { []
         }
     {offset
       cLJ0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cLJ1; else goto cLJ2;
       cLJ1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLJ2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cLIT_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uLJs; else goto cLIU;
       uLJs: // global
           call _cLIT(R1) args: 0, res: 0, upd: 0;
       cLIU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKRz_info" {
     sat_sKRz_info:
         const sat_sKRz_entry;
         const 1;
         const 16;
 },
 _cLIT() //  [R1]
         { []
         }
     {offset
       cLIT: // global
           if (R1 & 7 == 1) goto cLIX; else goto cLIY;
       cLIX: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cLIY: // global
           I64[Sp - 8] = block_cLJ8_info;
           _sKRs::P64 = R1;
           R1 = P64[R1 + 6];
           P64[Sp] = _sKRs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uLJr; else goto cLJa;
       uLJr: // global
           call _cLJ8(R1) args: 0, res: 0, upd: 0;
       cLJa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cLIT_info" {
     block_cLIT_info:
         const _cLIT;
         const 0;
         const 30;
 },
 _cLJ8() //  [R1]
         { []
         }
     {offset
       cLJ8: // global
           _sKRs::P64 = P64[Sp + 8];
           _sKRw::I64 = I64[R1 + 7];
           if (_sKRw::I64 < 48) goto cLJo; else goto cLJq;
       cLJq: // global
           if (_sKRw::I64 > 57) goto cLJo; else goto cLJp;
       cLJo: // global
           R1 = _sKRs::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cLJp: // global
           R3 = _sKRs::P64;
           R2 = GHC.Show.showLitChar4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cLJ8_info" {
     block_cLJ8_info:
         const _cLJ8;
         const 1;
         const 30;
 },
 sat_sKRD_entry() //  [R1]
         { []
         }
     {offset
       cLJv: // global
           _sKRD::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cLJA; else goto cLJB;
       cLJB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cLJD; else goto cLJC;
       cLJD: // global
           HpAlloc = 24;
           goto cLJA;
       cLJA: // global
           R1 = _sKRD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLJC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKRD::P64;
           _sKRb::P64 = P64[_sKRD::P64 + 16];
           _sKRa::I64 = I64[_sKRD::P64 + 24];
           I64[Hp - 16] = sat_sKRz_info;
           P64[Hp] = _sKRb::P64;
           I64[Sp - 24] = block_cLJx_info;
           R3 = Hp - 16;
           R2 = _sKRa::I64;
           Sp = Sp - 24;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKRD_info" {
     sat_sKRD_info:
         const sat_sKRD_entry;
         const 4294967297;
         const 19;
 },
 _cLJx() //  [R1, R2]
         { []
         }
     {offset
       cLJx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cLJG; else goto cLJF;
       cLJG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cLJF: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cLJx_info" {
     block_cLJx_info:
         const _cLJx;
         const 0;
         const 30;
 },
 GHC.Show.$wshowLitChar_entry() //  [R2, R3]
         { []
         }
     {offset
       cLJK: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cLJO; else goto cLJN;
       cLJO: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$wshowLitChar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cLJN: // global
           if (R2 <= 127) goto cLJI; else goto cLJJ;
       cLJI: // global
           if (R2 == 92) goto cLK8; else goto uLKb;
       cLK8: // global
           Hp = Hp - 56;
           R3 = R3;
           R2 = GHC.Show.showLitChar3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       uLKb: // global
           if (R2 == 127) goto cLK9; else goto cLK7;
       cLK9: // global
           Hp = Hp - 56;
           R3 = R3;
           R2 = GHC.Show.showLitChar2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cLK7: // global
           if (R2 < 32) goto cLK1; else goto cLK5;
       cLK1: // global
           _sKRb::P64 = R3;
           _sKRf::I64 = R2;
           if (R2 >= 15) goto cLJR; else goto uLKc;
       uLKc: // global
           if (_sKRf::I64 < 7) goto cLJR; else goto uLKd;
       cLJR: // global
           I64[Hp - 48] = sat_sKRh_info;
           I64[Hp - 32] = _sKRf::I64;
           I64[Hp - 24] = :_con_info;
           P64[Hp - 16] = GHC.Show.showLitChar13_closure+1;
           P64[Hp - 8] = Hp - 48;
           _cLJP::P64 = Hp - 22;
           Hp = Hp - 8;
           R3 = _sKRb::P64;
           R2 = _cLJP::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       uLKd: // global
           switch [7 .. 14] _sKRf::I64 {
               case 7 : goto cLJS;
               case 8 : goto cLJT;
               case 9 : goto cLJU;
               case 10 : goto cLJV;
               case 11 : goto cLJW;
               case 12 : goto cLJX;
               case 13 : goto cLJY;
               case 14 : goto cLJZ;
           }
       cLJZ: // global
           I64[Hp - 48] = sat_sKRp_info;
           P64[Hp - 32] = _sKRb::P64;
           _cLIe::P64 = Hp - 48;
           Hp = Hp - 32;
           R3 = _cLIe::P64;
           R2 = GHC.Show.showLitChar5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cLJY: // global
           Hp = Hp - 56;
           R3 = _sKRb::P64;
           R2 = GHC.Show.showLitChar6_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cLJX: // global
           Hp = Hp - 56;
           R3 = _sKRb::P64;
           R2 = GHC.Show.showLitChar7_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cLJW: // global
           Hp = Hp - 56;
           R3 = _sKRb::P64;
           R2 = GHC.Show.showLitChar8_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cLJV: // global
           Hp = Hp - 56;
           R3 = _sKRb::P64;
           R2 = GHC.Show.showLitChar9_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cLJU: // global
           Hp = Hp - 56;
           R3 = _sKRb::P64;
           R2 = GHC.Show.showLitChar10_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cLJT: // global
           Hp = Hp - 56;
           R3 = _sKRb::P64;
           R2 = GHC.Show.showLitChar11_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cLJS: // global
           Hp = Hp - 56;
           R3 = _sKRb::P64;
           R2 = GHC.Show.showLitChar12_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cLK5: // global
           I64[Hp - 48] = GHC.Types.C#_con_info;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = R3;
           _cLK4::P64 = Hp - 30;
           Hp = Hp - 16;
           R1 = _cLK4::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cLJJ: // global
           I64[Hp - 48] = sat_sKRD_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showLitChar13_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$wshowLitChar_info" {
     GHC.Show.$wshowLitChar_info:
         const GHC.Show.$wshowLitChar_entry;
         const 0;
         const 30064771086;
         const 8589934605;
         const SLKe_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.672920792 UTC

[section ""data" . GHC.Show.showLitChar_closure" {
     GHC.Show.showLitChar_closure:
         const GHC.Show.showLitChar_info;
         const 0;
 },
 GHC.Show.showLitChar_entry() //  [R2, R3]
         { []
         }
     {offset
       cLLF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLLG; else goto cLLH;
       cLLG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.showLitChar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cLLH: // global
           I64[Sp - 16] = block_cLLC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uLLL; else goto cLLD;
       uLLL: // global
           call _cLLC(R1) args: 0, res: 0, upd: 0;
       cLLD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showLitChar_info" {
     GHC.Show.showLitChar_info:
         const GHC.Show.showLitChar_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SLKe_srt+16;
 },
 _cLLC() //  [R1]
         { []
         }
     {offset
       cLLC: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.$wshowLitChar_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cLLC_info" {
     block_cLLC_info:
         const _cLLC;
         const 1;
         const 4294967326;
         const SLKe_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.68020676 UTC

[section ""data" . GHC.Show.$dmshowsPrec_closure" {
     GHC.Show.$dmshowsPrec_closure:
         const GHC.Show.$dmshowsPrec_info;
 },
 GHC.Show.$dmshowsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cLM2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cLM3; else goto cLM4;
       cLM3: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$dmshowsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cLM4: // global
           I64[Sp - 16] = block_cLM0_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Show.show_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$dmshowsPrec_info" {
     GHC.Show.$dmshowsPrec_info:
         const GHC.Show.$dmshowsPrec_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cLM0() //  [R1]
         { []
         }
     {offset
       cLM0: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cLM0_info" {
     block_cLM0_info:
         const _cLM0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.685942575 UTC

[section ""data" . GHC.Show.showList__3_closure" {
     GHC.Show.showList__3_closure:
         const GHC.Types.C#_con_info;
         const 91;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.687605675 UTC

[section ""data" . GHC.Show.showList__2_closure" {
     GHC.Show.showList__2_closure:
         const GHC.Types.C#_con_info;
         const 93;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.689334303 UTC

[section ""data" . GHC.Show.showList__1_closure" {
     GHC.Show.showList__1_closure:
         const GHC.Types.C#_con_info;
         const 44;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.691022313 UTC

[section ""cstring" . GHC.Show.showList__4_bytes" {
     GHC.Show.showList__4_bytes:
         I8[] [91,93]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.697830386 UTC

[section ""data" . GHC.Show.showList___closure" {
     GHC.Show.showList___closure:
         const GHC.Show.showList___info;
 },
 sat_sKS0_entry() //  [R1]
         { []
         }
     {offset
       cLMV: // global
           _sKS0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cLMW; else goto cLMX;
       cLMX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cLMZ; else goto cLMY;
       cLMZ: // global
           HpAlloc = 32;
           goto cLMW;
       cLMW: // global
           R1 = _sKS0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLMY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKS0::P64;
           _sKRN::P64 = P64[_sKS0::P64 + 16];
           _sKRU::P64 = P64[_sKS0::P64 + 24];
           _sKRX::P64 = P64[_sKS0::P64 + 32];
           _sKRY::P64 = P64[_sKS0::P64 + 40];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sKRU::P64;
           P64[Hp] = _sKRY::P64;
           R3 = Hp - 24;
           R2 = _sKRX::P64;
           R1 = _sKRN::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKS0_info" {
     sat_sKS0_info:
         const sat_sKS0_entry;
         const 4;
         const 15;
 },
 showl_sKRU_entry() //  [R1, R2]
         { []
         }
     {offset
       cLN4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cLN5; else goto cLN6;
       cLN5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cLN6: // global
           I64[Sp - 32] = block_cLMK_info;
           _sKRU::P64 = R1;
           _sKRN::P64 = P64[R1 + 7];
           _sKRT::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sKRN::P64;
           P64[Sp - 16] = _sKRT::P64;
           P64[Sp - 8] = _sKRU::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uLNd; else goto cLML;
       uLNd: // global
           call _cLMK(R1) args: 0, res: 0, upd: 0;
       cLML: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . showl_sKRU_info" {
     showl_sKRU_info:
         const showl_sKRU_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cLMK() //  [R1]
         { []
         }
     {offset
       cLMK: // global
           if (R1 & 7 == 1) goto cLN1; else goto cLN2;
       cLN1: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cLN2: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cLNc; else goto cLNb;
       cLNc: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cLNb: // global
           _sKRX::P64 = P64[R1 + 6];
           _sKRY::P64 = P64[R1 + 14];
           I64[Hp - 64] = sat_sKS0_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = _sKRX::P64;
           P64[Hp - 24] = _sKRY::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cLMK_info" {
     block_cLMK_info:
         const _cLMK;
         const 3;
         const 30;
 },
 sat_sKS1_entry() //  [R1]
         { []
         }
     {offset
       cLNe: // global
           _sKS1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cLNf; else goto cLNg;
       cLNg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cLNi; else goto cLNh;
       cLNi: // global
           HpAlloc = 48;
           goto cLNf;
       cLNf: // global
           R1 = _sKS1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLNh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKS1::P64;
           _sKRN::P64 = P64[_sKS1::P64 + 16];
           _sKRP::P64 = P64[_sKS1::P64 + 24];
           _sKRS::P64 = P64[_sKS1::P64 + 32];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.showList__2_closure+1;
           P64[Hp - 24] = _sKRP::P64;
           I64[Hp - 16] = showl_sKRU_info;
           P64[Hp - 8] = _sKRN::P64;
           P64[Hp] = Hp - 38;
           R2 = _sKRS::P64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call showl_sKRU_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKS1_info" {
     sat_sKS1_info:
         const sat_sKS1_entry;
         const 3;
         const 15;
 },
 sat_sKS2_entry() //  [R1]
         { []
         }
     {offset
       cLNj: // global
           _sKS2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cLNk; else goto cLNl;
       cLNl: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cLNn; else goto cLNm;
       cLNn: // global
           HpAlloc = 40;
           goto cLNk;
       cLNk: // global
           R1 = _sKS2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLNm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKS2::P64;
           _sKRN::P64 = P64[_sKS2::P64 + 16];
           _sKRP::P64 = P64[_sKS2::P64 + 24];
           _sKRR::P64 = P64[_sKS2::P64 + 32];
           _sKRS::P64 = P64[_sKS2::P64 + 40];
           I64[Hp - 32] = sat_sKS1_info;
           P64[Hp - 16] = _sKRN::P64;
           P64[Hp - 8] = _sKRP::P64;
           P64[Hp] = _sKRS::P64;
           R3 = Hp - 32;
           R2 = _sKRR::P64;
           R1 = _sKRN::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKS2_info" {
     sat_sKS2_info:
         const sat_sKS2_entry;
         const 4;
         const 15;
 },
 GHC.Show.showList___entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cLNs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cLNt; else goto cLNu;
       cLNt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.showList___closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cLNu: // global
           I64[Sp - 24] = block_cLMq_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uLNB; else goto cLMr;
       uLNB: // global
           call _cLMq(R1) args: 0, res: 0, upd: 0;
       cLMr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showList___info" {
     GHC.Show.showList___info:
         const GHC.Show.showList___entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cLMq() //  [R1]
         { []
         }
     {offset
       cLMq: // global
           _sKRP::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cLNp; else goto cLNq;
       cLNp: // global
           R3 = _sKRP::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cLNq: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cLNA; else goto cLNz;
       cLNA: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cLNz: // global
           _sKRR::P64 = P64[R1 + 6];
           _sKRS::P64 = P64[R1 + 14];
           I64[Hp - 64] = sat_sKS2_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _sKRP::P64;
           P64[Hp - 32] = _sKRR::P64;
           P64[Hp - 24] = _sKRS::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure+1;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cLMq_info" {
     block_cLMq_info:
         const _cLMq;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.714032376 UTC

[section ""cstring" . lvl_rC0c_bytes" {
     lvl_rC0c_bytes:
         I8[] [92,34]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.718374707 UTC

[section ""data" . GHC.Show.showLitString_closure" {
     GHC.Show.showLitString_closure:
         const GHC.Show.showLitString_info;
         const 0;
 },
 sat_sKSb_entry() //  [R1]
         { []
         }
     {offset
       cLOU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLOV; else goto cLOW;
       cLOV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLOW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKSb_info" {
     sat_sKSb_info:
         const sat_sKSb_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+32;
 },
 sat_sKSc_entry() //  [R1]
         { []
         }
     {offset
       cLP2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLP3; else goto cLP4;
       cLP3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLP4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKSc_info" {
     sat_sKSc_info:
         const sat_sKSc_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+32;
 },
 GHC.Show.showLitString_entry() //  [R2, R3]
         { []
         }
     {offset
       cLP9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cLPa; else goto cLPb;
       cLPa: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.showLitString_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cLPb: // global
           I64[Sp - 16] = block_cLOD_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uLPm; else goto cLOE;
       uLPm: // global
           call _cLOD(R1) args: 0, res: 0, upd: 0;
       cLOE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showLitString_info" {
     GHC.Show.showLitString_info:
         const GHC.Show.showLitString_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SLKe_srt+16;
 },
 _cLOD() //  [R1]
         { []
         }
     {offset
       cLOD: // global
           if (R1 & 7 == 1) goto cLP6; else goto cLP7;
       cLP6: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cLP7: // global
           I64[Sp - 8] = block_cLOJ_info;
           _sKS7::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sKS7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uLPl; else goto cLOK;
       uLPl: // global
           call _cLOJ(R1) args: 0, res: 0, upd: 0;
       cLOK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cLOD_info" {
     block_cLOD_info:
         const _cLOD;
         const 1;
         const 21474836510;
         const SLKe_srt+16;
 },
 _cLOJ() //  [R1]
         { []
         }
     {offset
       cLOJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cLPh; else goto cLPg;
       cLPh: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cLPg: // global
           _sKS4::P64 = P64[Sp + 16];
           _sKS7::P64 = P64[Sp + 8];
           _sKSa::I64 = I64[R1 + 7];
           if (_sKSa::I64 != 34) goto cLPj; else goto cLPk;
       cLPj: // global
           I64[Hp - 24] = sat_sKSb_info;
           P64[Hp - 8] = _sKS4::P64;
           P64[Hp] = _sKS7::P64;
           R3 = Hp - 24;
           R2 = _sKSa::I64;
           Sp = Sp + 24;
           call GHC.Show.$wshowLitChar_entry(R3, R2) args: 8, res: 0, upd: 8;
       cLPk: // global
           I64[Hp - 24] = sat_sKSc_info;
           P64[Hp - 8] = _sKS4::P64;
           P64[Hp] = _sKS7::P64;
           R3 = Hp - 24;
           R2 = lvl_rC0c_bytes;
           Sp = Sp + 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cLOJ_info" {
     block_cLOJ_info:
         const _cLOJ;
         const 2;
         const 21474836510;
         const SLKe_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.730526886 UTC

[section ""data" . GHC.Show.$fShow(,)3_closure" {
     GHC.Show.$fShow(,)3_closure:
         const GHC.Types.C#_con_info;
         const 34;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.734849958 UTC

[section ""data" . GHC.Show.$fShow(,)_$cshowList1_closure" {
     GHC.Show.$fShow(,)_$cshowList1_closure:
         const GHC.Show.$fShow(,)_$cshowList1_info;
         const 0;
 },
 sat_sKSg_entry() //  [R1]
         { []
         }
     {offset
       cLQ2: // global
           _sKSg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cLQ3; else goto cLQ4;
       cLQ4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cLQ6; else goto cLQ5;
       cLQ6: // global
           HpAlloc = 24;
           goto cLQ3;
       cLQ3: // global
           R1 = _sKSg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLQ5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKSg::P64;
           _sKSd::P64 = P64[_sKSg::P64 + 16];
           _sKSe::P64 = P64[_sKSg::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = _sKSe::P64;
           R3 = Hp - 14;
           R2 = _sKSd::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKSg_info" {
     sat_sKSg_info:
         const sat_sKSg_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+32;
 },
 GHC.Show.$fShow(,)_$cshowList1_entry() //  [R2, R3]
         { []
         }
     {offset
       cLQ8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cLQc; else goto cLQb;
       cLQc: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,)_$cshowList1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cLQb: // global
           I64[Hp - 48] = sat_sKSg_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,)_$cshowList1_info" {
     GHC.Show.$fShow(,)_$cshowList1_info:
         const GHC.Show.$fShow(,)_$cshowList1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SLKe_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.741868636 UTC

[section ""data" . $s$fShow[]_rC0d_closure" {
     $s$fShow[]_rC0d_closure:
         const $s$fShow[]_rC0d_info;
         const 0;
 },
 $s$fShow[]_rC0d_entry() //  [R3, R4]
         { []
         }
     {offset
       cLQx: // global
           _sKSi::P64 = R3;
           R3 = R4;
           R2 = _sKSi::P64;
           call GHC.Show.$fShow(,)_$cshowList1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $s$fShow[]_rC0d_info" {
     $s$fShow[]_rC0d_info:
         const $s$fShow[]_rC0d_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SLKe_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.746008189 UTC

[section ""data" . GHC.Show.$fShow[]_$s$cshowList1_closure" {
     GHC.Show.$fShow[]_$s$cshowList1_closure:
         const GHC.Show.$fShow[]_$s$cshowList1_info;
         const 0;
 },
 GHC.Show.$fShow[]_$s$cshowList1_entry() //  [R2, R3]
         { []
         }
     {offset
       cLQI: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShow(,)_$cshowList1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow[]_$s$cshowList1_info" {
     GHC.Show.$fShow[]_$s$cshowList1_info:
         const GHC.Show.$fShow[]_$s$cshowList1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SLKe_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.749887385 UTC

[section ""data" . GHC.Show.$fShow[]1_closure" {
     GHC.Show.$fShow[]1_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)3_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.752661307 UTC

[section ""data" . GHC.Show.$fShow[]_$s$cshow1_closure" {
     GHC.Show.$fShow[]_$s$cshow1_closure:
         const GHC.Show.$fShow[]_$s$cshow1_info;
         const 0;
 },
 sat_sKSn_entry() //  [R1]
         { []
         }
     {offset
       cLQY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLQZ; else goto cLR0;
       cLQZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLR0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Show.$fShow[]1_closure+2;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKSn_info" {
     sat_sKSn_info:
         const sat_sKSn_entry;
         const 1;
         const 4294967312;
         const SLKe_srt+32;
 },
 GHC.Show.$fShow[]_$s$cshow1_entry() //  [R2]
         { []
         }
     {offset
       cLR2: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cLR6; else goto cLR5;
       cLR6: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = GHC.Show.$fShow[]_$s$cshow1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cLR5: // global
           I64[Hp - 40] = sat_sKSn_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow[]_$s$cshow1_info" {
     GHC.Show.$fShow[]_$s$cshow1_info:
         const GHC.Show.$fShow[]_$s$cshow1_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SLKe_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.758070602 UTC

[section ""data" . GHC.Show.$fShow[]_$s$fShow[]1_closure" {
     GHC.Show.$fShow[]_$s$fShow[]1_closure:
         const GHC.Show.C:Show_con_info;
         const $s$fShow[]_rC0d_closure+3;
         const GHC.Show.$fShow[]_$s$cshow1_closure+1;
         const GHC.Show.$fShow[]_$s$cshowList1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.759740354 UTC

[section ""data" . GHC.Show.$fShow(,)1_closure" {
     GHC.Show.$fShow(,)1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.761419122 UTC

[section ""cstring" . lvl1_rC0e_bytes" {
     lvl1_rC0e_bytes:
         I8[] [83,114,99,76,111,99,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.763586212 UTC

[section ""cstring" . lvl2_rC0f_bytes" {
     lvl2_rC0f_bytes:
         I8[] [115,114,99,76,111,99,80,97,99,107,97,103,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.765198364 UTC

[section ""cstring" . lvl3_rC0g_bytes" {
     lvl3_rC0g_bytes:
         I8[] [115,114,99,76,111,99,77,111,100,117,108,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.767152834 UTC

[section ""cstring" . lvl4_rC0h_bytes" {
     lvl4_rC0h_bytes:
         I8[] [115,114,99,76,111,99,70,105,108,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.768769405 UTC

[section ""cstring" . lvl5_rC0i_bytes" {
     lvl5_rC0i_bytes:
         I8[] [115,114,99,76,111,99,83,116,97,114,116,76,105,110,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.77041729 UTC

[section ""cstring" . lvl6_rC0j_bytes" {
     lvl6_rC0j_bytes:
         I8[] [115,114,99,76,111,99,83,116,97,114,116,67,111,108,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.772127769 UTC

[section ""cstring" . lvl7_rC0k_bytes" {
     lvl7_rC0k_bytes:
         I8[] [115,114,99,76,111,99,69,110,100,76,105,110,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.774092961 UTC

[section ""cstring" . lvl8_rC0l_bytes" {
     lvl8_rC0l_bytes:
         I8[] [115,114,99,76,111,99,69,110,100,67,111,108,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.775851671 UTC

[section ""cstring" . lvl9_rC0m_bytes" {
     lvl9_rC0m_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.799404612 UTC

[section ""data" . GHC.Show.$w$cshowsPrec_closure" {
     GHC.Show.$w$cshowsPrec_closure:
         const GHC.Show.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cLRx: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$w$cshowsPrec_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sKSH_entry() //  [R1]
         { []
         }
     {offset
       cLTm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cLTn; else goto cLTo;
       cLTn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLTo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl9_rC0m_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKSH_info" {
     sat_sKSH_info:
         const sat_sKSH_entry;
         const 1;
         const 16;
 },
 sat_sKSL_entry() //  [R1]
         { []
         }
     {offset
       cLTp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cLTt; else goto cLTu;
       cLTt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLTu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cLTd_info;
           _sKSy::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sKSy::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uLTB; else goto cLTe;
       uLTB: // global
           call _cLTd(R1) args: 0, res: 0, upd: 0;
       cLTe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKSL_info" {
     sat_sKSL_info:
         const sat_sKSL_entry;
         const 2;
         const 18;
 },
 _cLTd() //  [R1]
         { []
         }
     {offset
       cLTd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cLTx; else goto cLTw;
       cLTx: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cLTw: // global
           _sKSG::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sKSH_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cLTq_info;
           R3 = Hp - 16;
           R2 = _sKSG::I64;
           Sp = Sp + 8;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cLTd_info" {
     block_cLTd_info:
         const _cLTd;
         const 1;
         const 30;
 },
 _cLTq() //  [R1, R2]
         { []
         }
     {offset
       cLTq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cLTA; else goto cLTz;
       cLTA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cLTz: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cLTq_info" {
     block_cLTq_info:
         const _cLTq;
         const 0;
         const 30;
 },
 sat_sKSM_entry() //  [R1]
         { []
         }
     {offset
       cLTC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cLTG; else goto cLTF;
       cLTG: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLTF: // global
           _sKSv::P64 = P64[R1 + 16];
           _sKSy::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sKSL_info;
           P64[Hp - 8] = _sKSv::P64;
           P64[Hp] = _sKSy::P64;
           R3 = Hp - 24;
           R2 = lvl8_rC0l_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sKSM_info" {
     sat_sKSM_info:
         const sat_sKSM_entry;
         const 2;
         const 18;
 },
 sat_sKSN_entry() //  [R1]
         { []
         }
     {offset
       cLTH: // global
           _sKSN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cLTI; else goto cLTJ;
       cLTJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cLTL; else goto cLTK;
       cLTL: // global
           HpAlloc = 32;
           goto cLTI;
       cLTI: // global
           R1 = _sKSN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLTK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKSN::P64;
           _sKSv::P64 = P64[_sKSN::P64 + 16];
           _sKSy::P64 = P64[_sKSN::P64 + 24];
           I64[Hp - 24] = sat_sKSM_info;
           P64[Hp - 8] = _sKSv::P64;
           P64[Hp] = _sKSy::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKSN_info" {
     sat_sKSN_info:
         const sat_sKSN_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+56;
 },
 sat_sKSR_entry() //  [R1]
         { []
         }
     {offset
       cLTM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cLTQ; else goto cLTR;
       cLTQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLTR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cLSW_info;
           _sKSv::P64 = P64[R1 + 24];
           _sKSy::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sKSv::P64;
           P64[Sp - 24] = _sKSy::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uLTY; else goto cLSX;
       uLTY: // global
           call _cLSW(R1) args: 0, res: 0, upd: 0;
       cLSX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKSR_info" {
     sat_sKSR_info:
         const sat_sKSR_entry;
         const 3;
         const 4294967311;
         const SLKe_srt+56;
 },
 _cLSW() //  [R1]
         { []
         }
     {offset
       cLSW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cLTU; else goto cLTT;
       cLTU: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cLTT: // global
           _sKSE::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_sKSN_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cLTN_info;
           R3 = Hp - 24;
           R2 = _sKSE::I64;
           Sp = Sp + 16;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cLSW_info" {
     block_cLSW_info:
         const _cLSW;
         const 2;
         const 4294967326;
         const SLKe_srt+56;
 },
 _cLTN() //  [R1, R2]
         { []
         }
     {offset
       cLTN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cLTX; else goto cLTW;
       cLTX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cLTW: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cLTN_info" {
     block_cLTN_info:
         const _cLTN;
         const 0;
         const 30;
 },
 sat_sKSS_entry() //  [R1]
         { []
         }
     {offset
       cLTZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cLU3; else goto cLU2;
       cLU3: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLU2: // global
           _sKSu::P64 = P64[R1 + 16];
           _sKSv::P64 = P64[R1 + 24];
           _sKSy::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sKSR_info;
           P64[Hp - 16] = _sKSu::P64;
           P64[Hp - 8] = _sKSv::P64;
           P64[Hp] = _sKSy::P64;
           R3 = Hp - 32;
           R2 = lvl7_rC0k_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sKSS_info" {
     sat_sKSS_info:
         const sat_sKSS_entry;
         const 3;
         const 4294967311;
         const SLKe_srt+56;
 },
 sat_sKST_entry() //  [R1]
         { []
         }
     {offset
       cLU4: // global
           _sKST::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cLU5; else goto cLU6;
       cLU6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cLU8; else goto cLU7;
       cLU8: // global
           HpAlloc = 40;
           goto cLU5;
       cLU5: // global
           R1 = _sKST::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLU7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKST::P64;
           _sKSu::P64 = P64[_sKST::P64 + 16];
           _sKSv::P64 = P64[_sKST::P64 + 24];
           _sKSy::P64 = P64[_sKST::P64 + 32];
           I64[Hp - 32] = sat_sKSS_info;
           P64[Hp - 16] = _sKSu::P64;
           P64[Hp - 8] = _sKSv::P64;
           P64[Hp] = _sKSy::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKST_info" {
     sat_sKST_info:
         const sat_sKST_entry;
         const 3;
         const 4294967311;
         const SLKe_srt+56;
 },
 sat_sKSX_entry() //  [R1]
         { []
         }
     {offset
       cLU9: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cLUd; else goto cLUe;
       cLUd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLUe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cLSF_info;
           _sKSu::P64 = P64[R1 + 24];
           _sKSv::P64 = P64[R1 + 32];
           _sKSy::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _sKSu::P64;
           P64[Sp - 32] = _sKSv::P64;
           P64[Sp - 24] = _sKSy::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uLUl; else goto cLSG;
       uLUl: // global
           call _cLSF(R1) args: 0, res: 0, upd: 0;
       cLSG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKSX_info" {
     sat_sKSX_info:
         const sat_sKSX_entry;
         const 4;
         const 4294967311;
         const SLKe_srt+56;
 },
 _cLSF() //  [R1]
         { []
         }
     {offset
       cLSF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cLUh; else goto cLUg;
       cLUh: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cLUg: // global
           _sKSC::I64 = I64[R1 + 7];
           I64[Hp - 32] = sat_sKST_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_cLUa_info;
           R3 = Hp - 32;
           R2 = _sKSC::I64;
           Sp = Sp + 24;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cLSF_info" {
     block_cLSF_info:
         const _cLSF;
         const 3;
         const 4294967326;
         const SLKe_srt+56;
 },
 _cLUa() //  [R1, R2]
         { []
         }
     {offset
       cLUa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cLUk; else goto cLUj;
       cLUk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cLUj: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cLUa_info" {
     block_cLUa_info:
         const _cLUa;
         const 0;
         const 30;
 },
 sat_sKSY_entry() //  [R1]
         { []
         }
     {offset
       cLUm: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cLUq; else goto cLUp;
       cLUq: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLUp: // global
           _sKSt::P64 = P64[R1 + 16];
           _sKSu::P64 = P64[R1 + 24];
           _sKSv::P64 = P64[R1 + 32];
           _sKSy::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_sKSX_info;
           P64[Hp - 24] = _sKSt::P64;
           P64[Hp - 16] = _sKSu::P64;
           P64[Hp - 8] = _sKSv::P64;
           P64[Hp] = _sKSy::P64;
           R3 = Hp - 40;
           R2 = lvl6_rC0j_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sKSY_info" {
     sat_sKSY_info:
         const sat_sKSY_entry;
         const 4;
         const 4294967311;
         const SLKe_srt+56;
 },
 sat_sKSZ_entry() //  [R1]
         { []
         }
     {offset
       cLUr: // global
           _sKSZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cLUs; else goto cLUt;
       cLUt: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cLUv; else goto cLUu;
       cLUv: // global
           HpAlloc = 48;
           goto cLUs;
       cLUs: // global
           R1 = _sKSZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLUu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKSZ::P64;
           _sKSt::P64 = P64[_sKSZ::P64 + 16];
           _sKSu::P64 = P64[_sKSZ::P64 + 24];
           _sKSv::P64 = P64[_sKSZ::P64 + 32];
           _sKSy::P64 = P64[_sKSZ::P64 + 40];
           I64[Hp - 40] = sat_sKSY_info;
           P64[Hp - 24] = _sKSt::P64;
           P64[Hp - 16] = _sKSu::P64;
           P64[Hp - 8] = _sKSv::P64;
           P64[Hp] = _sKSy::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKSZ_info" {
     sat_sKSZ_info:
         const sat_sKSZ_entry;
         const 4;
         const 4294967311;
         const SLKe_srt+56;
 },
 sat_sKT3_entry() //  [R1]
         { []
         }
     {offset
       cLUw: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cLUA; else goto cLUB;
       cLUA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLUB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cLSo_info;
           _sKSt::P64 = P64[R1 + 24];
           _sKSu::P64 = P64[R1 + 32];
           _sKSv::P64 = P64[R1 + 40];
           _sKSy::P64 = P64[R1 + 48];
           R1 = P64[R1 + 16];
           P64[Sp - 48] = _sKSt::P64;
           P64[Sp - 40] = _sKSu::P64;
           P64[Sp - 32] = _sKSv::P64;
           P64[Sp - 24] = _sKSy::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto uLUI; else goto cLSp;
       uLUI: // global
           call _cLSo(R1) args: 0, res: 0, upd: 0;
       cLSp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKT3_info" {
     sat_sKT3_info:
         const sat_sKT3_entry;
         const 5;
         const 4294967311;
         const SLKe_srt+56;
 },
 _cLSo() //  [R1]
         { []
         }
     {offset
       cLSo: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cLUE; else goto cLUD;
       cLUE: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cLUD: // global
           _sKSA::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sKSZ_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_cLUx_info;
           R3 = Hp - 40;
           R2 = _sKSA::I64;
           Sp = Sp + 32;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cLSo_info" {
     block_cLSo_info:
         const _cLSo;
         const 4;
         const 4294967326;
         const SLKe_srt+56;
 },
 _cLUx() //  [R1, R2]
         { []
         }
     {offset
       cLUx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cLUH; else goto cLUG;
       cLUH: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cLUG: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cLUx_info" {
     block_cLUx_info:
         const _cLUx;
         const 0;
         const 30;
 },
 sat_sKT4_entry() //  [R1]
         { []
         }
     {offset
       cLUJ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cLUN; else goto cLUM;
       cLUN: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLUM: // global
           _sKSs::P64 = P64[R1 + 16];
           _sKSt::P64 = P64[R1 + 24];
           _sKSu::P64 = P64[R1 + 32];
           _sKSv::P64 = P64[R1 + 40];
           _sKSy::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_sKT3_info;
           P64[Hp - 32] = _sKSs::P64;
           P64[Hp - 24] = _sKSt::P64;
           P64[Hp - 16] = _sKSu::P64;
           P64[Hp - 8] = _sKSv::P64;
           P64[Hp] = _sKSy::P64;
           R3 = Hp - 48;
           R2 = lvl5_rC0i_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sKT4_info" {
     sat_sKT4_info:
         const sat_sKT4_entry;
         const 5;
         const 4294967311;
         const SLKe_srt+56;
 },
 sat_sKT5_entry() //  [R1]
         { []
         }
     {offset
       cLUO: // global
           _sKT5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cLUP; else goto cLUQ;
       cLUQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cLUS; else goto cLUR;
       cLUS: // global
           HpAlloc = 56;
           goto cLUP;
       cLUP: // global
           R1 = _sKT5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLUR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKT5::P64;
           _sKSs::P64 = P64[_sKT5::P64 + 16];
           _sKSt::P64 = P64[_sKT5::P64 + 24];
           _sKSu::P64 = P64[_sKT5::P64 + 32];
           _sKSv::P64 = P64[_sKT5::P64 + 40];
           _sKSy::P64 = P64[_sKT5::P64 + 48];
           I64[Hp - 48] = sat_sKT4_info;
           P64[Hp - 32] = _sKSs::P64;
           P64[Hp - 24] = _sKSt::P64;
           P64[Hp - 16] = _sKSu::P64;
           P64[Hp - 8] = _sKSv::P64;
           P64[Hp] = _sKSy::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKT5_info" {
     sat_sKT5_info:
         const sat_sKT5_entry;
         const 5;
         const 4294967311;
         const SLKe_srt+56;
 },
 sat_sKT7_entry() //  [R1]
         { []
         }
     {offset
       cLUU: // global
           _sKT7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cLUV; else goto cLUW;
       cLUW: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cLUY; else goto cLUX;
       cLUY: // global
           HpAlloc = 80;
           goto cLUV;
       cLUV: // global
           R1 = _sKT7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLUX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKT7::P64;
           _sKSr::P64 = P64[_sKT7::P64 + 16];
           _sKSs::P64 = P64[_sKT7::P64 + 24];
           _sKSt::P64 = P64[_sKT7::P64 + 32];
           _sKSu::P64 = P64[_sKT7::P64 + 40];
           _sKSv::P64 = P64[_sKT7::P64 + 48];
           _sKSy::P64 = P64[_sKT7::P64 + 56];
           I64[Hp - 72] = sat_sKT5_info;
           P64[Hp - 56] = _sKSs::P64;
           P64[Hp - 48] = _sKSt::P64;
           P64[Hp - 40] = _sKSu::P64;
           P64[Hp - 32] = _sKSv::P64;
           P64[Hp - 24] = _sKSy::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 72;
           R3 = Hp - 14;
           R2 = _sKSr::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKT7_info" {
     sat_sKT7_info:
         const sat_sKT7_entry;
         const 6;
         const 38654705679;
         const SLKe_srt+32;
 },
 sat_sKT9_entry() //  [R1]
         { []
         }
     {offset
       cLV0: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cLV4; else goto cLV3;
       cLV4: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLV3: // global
           _sKSr::P64 = P64[R1 + 16];
           _sKSs::P64 = P64[R1 + 24];
           _sKSt::P64 = P64[R1 + 32];
           _sKSu::P64 = P64[R1 + 40];
           _sKSv::P64 = P64[R1 + 48];
           _sKSy::P64 = P64[R1 + 56];
           I64[Hp - 80] = sat_sKT7_info;
           P64[Hp - 64] = _sKSr::P64;
           P64[Hp - 56] = _sKSs::P64;
           P64[Hp - 48] = _sKSt::P64;
           P64[Hp - 40] = _sKSu::P64;
           P64[Hp - 32] = _sKSv::P64;
           P64[Hp - 24] = _sKSy::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 80;
           R3 = Hp - 14;
           R2 = lvl4_rC0h_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sKT9_info" {
     sat_sKT9_info:
         const sat_sKT9_entry;
         const 6;
         const 38654705679;
         const SLKe_srt+32;
 },
 sat_sKTa_entry() //  [R1]
         { []
         }
     {offset
       cLV5: // global
           _sKTa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cLV6; else goto cLV7;
       cLV7: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cLV9; else goto cLV8;
       cLV9: // global
           HpAlloc = 64;
           goto cLV6;
       cLV6: // global
           R1 = _sKTa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLV8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKTa::P64;
           _sKSr::P64 = P64[_sKTa::P64 + 16];
           _sKSs::P64 = P64[_sKTa::P64 + 24];
           _sKSt::P64 = P64[_sKTa::P64 + 32];
           _sKSu::P64 = P64[_sKTa::P64 + 40];
           _sKSv::P64 = P64[_sKTa::P64 + 48];
           _sKSy::P64 = P64[_sKTa::P64 + 56];
           I64[Hp - 56] = sat_sKT9_info;
           P64[Hp - 40] = _sKSr::P64;
           P64[Hp - 32] = _sKSs::P64;
           P64[Hp - 24] = _sKSt::P64;
           P64[Hp - 16] = _sKSu::P64;
           P64[Hp - 8] = _sKSv::P64;
           P64[Hp] = _sKSy::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKTa_info" {
     sat_sKTa_info:
         const sat_sKTa_entry;
         const 6;
         const 38654705679;
         const SLKe_srt+32;
 },
 sat_sKTc_entry() //  [R1]
         { []
         }
     {offset
       cLVb: // global
           _sKTc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cLVc; else goto cLVd;
       cLVd: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cLVf; else goto cLVe;
       cLVf: // global
           HpAlloc = 88;
           goto cLVc;
       cLVc: // global
           R1 = _sKTc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLVe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKTc::P64;
           _sKSq::P64 = P64[_sKTc::P64 + 16];
           _sKSr::P64 = P64[_sKTc::P64 + 24];
           _sKSs::P64 = P64[_sKTc::P64 + 32];
           _sKSt::P64 = P64[_sKTc::P64 + 40];
           _sKSu::P64 = P64[_sKTc::P64 + 48];
           _sKSv::P64 = P64[_sKTc::P64 + 56];
           _sKSy::P64 = P64[_sKTc::P64 + 64];
           I64[Hp - 80] = sat_sKTa_info;
           P64[Hp - 64] = _sKSr::P64;
           P64[Hp - 56] = _sKSs::P64;
           P64[Hp - 48] = _sKSt::P64;
           P64[Hp - 40] = _sKSu::P64;
           P64[Hp - 32] = _sKSv::P64;
           P64[Hp - 24] = _sKSy::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 80;
           R3 = Hp - 14;
           R2 = _sKSq::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKTc_info" {
     sat_sKTc_info:
         const sat_sKTc_entry;
         const 7;
         const 38654705679;
         const SLKe_srt+32;
 },
 sat_sKTe_entry() //  [R1]
         { []
         }
     {offset
       cLVh: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cLVl; else goto cLVk;
       cLVl: // global
           HpAlloc = 96;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLVk: // global
           _sKSq::P64 = P64[R1 + 16];
           _sKSr::P64 = P64[R1 + 24];
           _sKSs::P64 = P64[R1 + 32];
           _sKSt::P64 = P64[R1 + 40];
           _sKSu::P64 = P64[R1 + 48];
           _sKSv::P64 = P64[R1 + 56];
           _sKSy::P64 = P64[R1 + 64];
           I64[Hp - 88] = sat_sKTc_info;
           P64[Hp - 72] = _sKSq::P64;
           P64[Hp - 64] = _sKSr::P64;
           P64[Hp - 56] = _sKSs::P64;
           P64[Hp - 48] = _sKSt::P64;
           P64[Hp - 40] = _sKSu::P64;
           P64[Hp - 32] = _sKSv::P64;
           P64[Hp - 24] = _sKSy::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 88;
           R3 = Hp - 14;
           R2 = lvl3_rC0g_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sKTe_info" {
     sat_sKTe_info:
         const sat_sKTe_entry;
         const 7;
         const 38654705679;
         const SLKe_srt+32;
 },
 sat_sKTf_entry() //  [R1]
         { []
         }
     {offset
       cLVm: // global
           _sKTf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cLVn; else goto cLVo;
       cLVo: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cLVq; else goto cLVp;
       cLVq: // global
           HpAlloc = 72;
           goto cLVn;
       cLVn: // global
           R1 = _sKTf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLVp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKTf::P64;
           _sKSq::P64 = P64[_sKTf::P64 + 16];
           _sKSr::P64 = P64[_sKTf::P64 + 24];
           _sKSs::P64 = P64[_sKTf::P64 + 32];
           _sKSt::P64 = P64[_sKTf::P64 + 40];
           _sKSu::P64 = P64[_sKTf::P64 + 48];
           _sKSv::P64 = P64[_sKTf::P64 + 56];
           _sKSy::P64 = P64[_sKTf::P64 + 64];
           I64[Hp - 64] = sat_sKTe_info;
           P64[Hp - 48] = _sKSq::P64;
           P64[Hp - 40] = _sKSr::P64;
           P64[Hp - 32] = _sKSs::P64;
           P64[Hp - 24] = _sKSt::P64;
           P64[Hp - 16] = _sKSu::P64;
           P64[Hp - 8] = _sKSv::P64;
           P64[Hp] = _sKSy::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKTf_info" {
     sat_sKTf_info:
         const sat_sKTf_entry;
         const 7;
         const 38654705679;
         const SLKe_srt+32;
 },
 sat_sKTh_entry() //  [R1]
         { []
         }
     {offset
       cLVs: // global
           _sKTh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cLVt; else goto cLVu;
       cLVu: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cLVw; else goto cLVv;
       cLVw: // global
           HpAlloc = 96;
           goto cLVt;
       cLVt: // global
           R1 = _sKTh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLVv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKTh::P64;
           _sKSp::P64 = P64[_sKTh::P64 + 16];
           _sKSq::P64 = P64[_sKTh::P64 + 24];
           _sKSr::P64 = P64[_sKTh::P64 + 32];
           _sKSs::P64 = P64[_sKTh::P64 + 40];
           _sKSt::P64 = P64[_sKTh::P64 + 48];
           _sKSu::P64 = P64[_sKTh::P64 + 56];
           _sKSv::P64 = P64[_sKTh::P64 + 64];
           _sKSy::P64 = P64[_sKTh::P64 + 72];
           I64[Hp - 88] = sat_sKTf_info;
           P64[Hp - 72] = _sKSq::P64;
           P64[Hp - 64] = _sKSr::P64;
           P64[Hp - 56] = _sKSs::P64;
           P64[Hp - 48] = _sKSt::P64;
           P64[Hp - 40] = _sKSu::P64;
           P64[Hp - 32] = _sKSv::P64;
           P64[Hp - 24] = _sKSy::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 88;
           R3 = Hp - 14;
           R2 = _sKSp::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKTh_info" {
     sat_sKTh_info:
         const sat_sKTh_entry;
         const 8;
         const 38654705679;
         const SLKe_srt+32;
 },
 sat_sKTj_entry() //  [R1]
         { []
         }
     {offset
       cLVy: // global
           _sKTj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cLVz; else goto cLVA;
       cLVA: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cLVC; else goto cLVB;
       cLVC: // global
           HpAlloc = 104;
           goto cLVz;
       cLVz: // global
           R1 = _sKTj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLVB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKTj::P64;
           _sKSp::P64 = P64[_sKTj::P64 + 16];
           _sKSq::P64 = P64[_sKTj::P64 + 24];
           _sKSr::P64 = P64[_sKTj::P64 + 32];
           _sKSs::P64 = P64[_sKTj::P64 + 40];
           _sKSt::P64 = P64[_sKTj::P64 + 48];
           _sKSu::P64 = P64[_sKTj::P64 + 56];
           _sKSv::P64 = P64[_sKTj::P64 + 64];
           _sKSy::P64 = P64[_sKTj::P64 + 72];
           I64[Hp - 96] = sat_sKTh_info;
           P64[Hp - 80] = _sKSp::P64;
           P64[Hp - 72] = _sKSq::P64;
           P64[Hp - 64] = _sKSr::P64;
           P64[Hp - 56] = _sKSs::P64;
           P64[Hp - 48] = _sKSt::P64;
           P64[Hp - 40] = _sKSu::P64;
           P64[Hp - 32] = _sKSv::P64;
           P64[Hp - 24] = _sKSy::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 96;
           R3 = Hp - 14;
           R2 = lvl2_rC0f_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKTj_info" {
     sat_sKTj_info:
         const sat_sKTj_entry;
         const 8;
         const 38654705679;
         const SLKe_srt+32;
 },
 p_sKSx_entry() //  [R1, R2]
         { []
         }
     {offset
       cLVD: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cLVH; else goto cLVG;
       cLVH: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cLVG: // global
           _sKSp::P64 = P64[R1 + 7];
           _sKSq::P64 = P64[R1 + 15];
           _sKSr::P64 = P64[R1 + 23];
           _sKSs::P64 = P64[R1 + 31];
           _sKSt::P64 = P64[R1 + 39];
           _sKSu::P64 = P64[R1 + 47];
           _sKSv::P64 = P64[R1 + 55];
           I64[Hp - 72] = sat_sKTj_info;
           P64[Hp - 56] = _sKSp::P64;
           P64[Hp - 48] = _sKSq::P64;
           P64[Hp - 40] = _sKSr::P64;
           P64[Hp - 32] = _sKSs::P64;
           P64[Hp - 24] = _sKSt::P64;
           P64[Hp - 16] = _sKSu::P64;
           P64[Hp - 8] = _sKSv::P64;
           P64[Hp] = R2;
           R3 = Hp - 72;
           R2 = lvl1_rC0e_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_sKSx_info" {
     p_sKSx_info:
         const p_sKSx_entry;
         const 7;
         const 38654705672;
         const 4294967301;
         const SLKe_srt+32;
 },
 sat_sKTm_entry() //  [R1]
         { []
         }
     {offset
       cLVR: // global
           _sKTm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cLVS; else goto cLVT;
       cLVT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cLVV; else goto cLVU;
       cLVV: // global
           HpAlloc = 24;
           goto cLVS;
       cLVS: // global
           R1 = _sKTm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cLVU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKTm::P64;
           _sKSw::P64 = P64[_sKTm::P64 + 16];
           _sKSx::P64 = P64[_sKTm::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sKSw::P64;
           R2 = Hp - 14;
           R1 = _sKSx::P64;
           Sp = Sp - 16;
           call p_sKSx_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKTm_info" {
     sat_sKTm_info:
         const sat_sKTm_entry;
         const 2;
         const 38654705682;
         const SLKe_srt+32;
 },
 GHC.Show.$w$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cLVZ: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cLW3; else goto cLW2;
       cLW3: // global
           HpAlloc = 120;
           R1 = GHC.Show.$w$cshowsPrec_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cLW2: // global
           I64[Hp - 112] = p_sKSx_info;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = P64[Sp];
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           _sKSw::P64 = P64[Sp + 24];
           _cLRB::P64 = Hp - 111;
           if (%MO_S_Lt_W64(R2, 11)) goto cLVX; else goto cLVY;
       cLVX: // global
           Hp = Hp - 56;
           R2 = _sKSw::P64;
           R1 = _cLRB::P64;
           Sp = Sp + 32;
           call p_sKSx_entry(R2, R1) args: 8, res: 0, upd: 8;
       cLVY: // global
           I64[Hp - 48] = sat_sKTm_info;
           P64[Hp - 32] = _sKSw::P64;
           P64[Hp - 24] = _cLRB::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec_info" {
     GHC.Show.$w$cshowsPrec_info:
         const GHC.Show.$w$cshowsPrec_entry;
         const 0;
         const 107374182414;
         const 38654705664;
         const SLKe_srt+32;
         const 73;
         const GHC.Show.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.874265536 UTC

[section ""data" . GHC.Show.$fShowSrcLoc_$cshowsPrec_closure" {
     GHC.Show.$fShowSrcLoc_$cshowsPrec_closure:
         const GHC.Show.$fShowSrcLoc_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShowSrcLoc_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cLZB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cLZF; else goto cLZG;
       cLZF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowSrcLoc_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cLZG: // global
           I64[Sp - 24] = block_cLZy_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uLZO; else goto cLZz;
       uLZO: // global
           call _cLZy(R1) args: 0, res: 0, upd: 0;
       cLZz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowSrcLoc_$cshowsPrec_info" {
     GHC.Show.$fShowSrcLoc_$cshowsPrec_info:
         const GHC.Show.$fShowSrcLoc_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SLKe_srt+64;
 },
 _cLZy() //  [R1]
         { []
         }
     {offset
       cLZy: // global
           I64[Sp] = block_cLZE_info;
           _sKTr::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sKTr::I64;
           if (R1 & 7 != 0) goto uLZN; else goto cLZI;
       uLZN: // global
           call _cLZE(R1) args: 0, res: 0, upd: 0;
       cLZI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cLZy_info" {
     block_cLZy_info:
         const _cLZy;
         const 2;
         const 4294967326;
         const SLKe_srt+64;
 },
 _cLZE() //  [R1]
         { []
         }
     {offset
       cLZE: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 39];
           P64[Sp] = P64[R1 + 47];
           P64[Sp + 8] = P64[R1 + 55];
           Sp = Sp - 8;
           call GHC.Show.$w$cshowsPrec_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cLZE_info" {
     block_cLZE_info:
         const _cLZE;
         const 66;
         const 4294967326;
         const SLKe_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.88647401 UTC

[section ""data" . GHC.Show.$fShowSrcLoc1_closure" {
     GHC.Show.$fShowSrcLoc1_closure:
         const GHC.Show.$fShowSrcLoc1_info;
         const 0;
 },
 GHC.Show.$fShowSrcLoc1_entry() //  [R2, R3]
         { []
         }
     {offset
       cM0e: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cM0f; else goto cM0g;
       cM0f: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowSrcLoc1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cM0g: // global
           I64[Sp - 16] = block_cM0b_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uM0k; else goto cM0c;
       uM0k: // global
           call _cM0b(R1) args: 0, res: 0, upd: 0;
       cM0c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowSrcLoc1_info" {
     GHC.Show.$fShowSrcLoc1_info:
         const GHC.Show.$fShowSrcLoc1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SLKe_srt+64;
 },
 _cM0b() //  [R1]
         { []
         }
     {offset
       cM0b: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 16] = P64[R1 + 39];
           P64[Sp - 8] = P64[R1 + 47];
           P64[Sp] = P64[R1 + 55];
           Sp = Sp - 16;
           call GHC.Show.$w$cshowsPrec_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cM0b_info" {
     block_cM0b_info:
         const _cM0b;
         const 1;
         const 4294967326;
         const SLKe_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.893144639 UTC

[section ""data" . GHC.Show.$fShowSrcLoc_$cshowList_closure" {
     GHC.Show.$fShowSrcLoc_$cshowList_closure:
         const GHC.Show.$fShowSrcLoc_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShowSrcLoc_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cM0C: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowSrcLoc1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowSrcLoc_$cshowList_info" {
     GHC.Show.$fShowSrcLoc_$cshowList_info:
         const GHC.Show.$fShowSrcLoc_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SLKe_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.897940677 UTC

[section ""data" . GHC.Show.$fShowSrcLoc_$cshow_closure" {
     GHC.Show.$fShowSrcLoc_$cshow_closure:
         const GHC.Show.$fShowSrcLoc_$cshow_info;
         const 0;
 },
 GHC.Show.$fShowSrcLoc_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cM0Q: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cM0R; else goto cM0S;
       cM0R: // global
           R2 = R2;
           R1 = GHC.Show.$fShowSrcLoc_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cM0S: // global
           I64[Sp - 8] = block_cM0N_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uM0W; else goto cM0O;
       uM0W: // global
           call _cM0N(R1) args: 0, res: 0, upd: 0;
       cM0O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowSrcLoc_$cshow_info" {
     GHC.Show.$fShowSrcLoc_$cshow_info:
         const GHC.Show.$fShowSrcLoc_$cshow_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const SLKe_srt+64;
 },
 _cM0N() //  [R1]
         { []
         }
     {offset
       cM0N: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 24] = P64[R1 + 39];
           P64[Sp - 16] = P64[R1 + 47];
           P64[Sp - 8] = P64[R1 + 55];
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cM0N_info" {
     block_cM0N_info:
         const _cM0N;
         const 0;
         const 4294967326;
         const SLKe_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.903887495 UTC

[section ""data" . GHC.Show.$fShowSrcLoc_closure" {
     GHC.Show.$fShowSrcLoc_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowSrcLoc_$cshowsPrec_closure+3;
         const GHC.Show.$fShowSrcLoc_$cshow_closure+1;
         const GHC.Show.$fShowSrcLoc_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.90669585 UTC

[section ""data" . GHC.Show.appPrec_closure" {
     GHC.Show.appPrec_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.908675458 UTC

[section ""data" . GHC.Show.appPrec1_closure" {
     GHC.Show.appPrec1_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.911492438 UTC

[section ""data" . GHC.Show.$wshowWord_closure" {
     GHC.Show.$wshowWord_closure:
         const GHC.Show.$wshowWord_info;
 },
 GHC.Show.$wshowWord_entry() //  [R2, R3]
         { []
         }
     {offset
       cM1D: // global
           _sKTW::P64 = R3;
           _sKTV::I64 = R2;
           goto cM1g;
       cM1g: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cM1H; else goto cM1G;
       cM1H: // global
           HpAlloc = 40;
           R3 = _sKTW::P64;
           R2 = _sKTV::I64;
           R1 = GHC.Show.$wshowWord_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cM1G: // global
           if (_sKTV::I64 >= 10) goto cM1B; else goto cM1C;
       cM1B: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _sKTV::I64 % 10 + 48;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _sKTW::P64;
           _sKTW::P64 = Hp - 14;
           _sKTV::I64 = _sKTV::I64 / 10;
           goto cM1g;
       cM1C: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _sKTV::I64 + 48;
           _cM1S::P64 = Hp - 31;
           Hp = Hp - 24;
           R2 = _sKTW::P64;
           R1 = _cM1S::P64;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$wshowWord_info" {
     GHC.Show.$wshowWord_info:
         const GHC.Show.$wshowWord_entry;
         const 0;
         const 14;
         const 8589934605;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.916450928 UTC

[section ""data" . GHC.Show.showWord_closure" {
     GHC.Show.showWord_closure:
         const GHC.Show.showWord_info;
 },
 GHC.Show.showWord_entry() //  [R2, R3]
         { []
         }
     {offset
       cM2f: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cM2g; else goto cM2h;
       cM2g: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.showWord_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cM2h: // global
           I64[Sp - 8] = block_cM2c_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showWord_info" {
     GHC.Show.showWord_info:
         const GHC.Show.showWord_entry;
         const 0;
         const 14;
         const 8589934605;
 },
 _cM2c() //  [R1, R2]
         { []
         }
     {offset
       cM2c: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cM2k; else goto cM2j;
       cM2k: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cM2j: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cM2c_info" {
     block_cM2c_info:
         const _cM2c;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.923031306 UTC

[section ""data" . GHC.Show.$fShowWord_$cshowsPrec_closure" {
     GHC.Show.$fShowWord_$cshowsPrec_closure:
         const GHC.Show.$fShowWord_$cshowsPrec_info;
 },
 GHC.Show.$fShowWord_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cM2D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cM2E; else goto cM2F;
       cM2E: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowWord_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cM2F: // global
           I64[Sp - 16] = block_cM2A_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uM2J; else goto cM2B;
       uM2J: // global
           call _cM2A(R1) args: 0, res: 0, upd: 0;
       cM2B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowWord_$cshowsPrec_info" {
     GHC.Show.$fShowWord_$cshowsPrec_info:
         const GHC.Show.$fShowWord_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cM2A() //  [R1]
         { []
         }
     {offset
       cM2A: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.showWord_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cM2A_info" {
     block_cM2A_info:
         const _cM2A;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.928539281 UTC

[section ""data" . GHC.Show.shows_closure" {
     GHC.Show.shows_closure:
         const GHC.Show.shows_info;
 },
 GHC.Show.shows_entry() //  [R2]
         { []
         }
     {offset
       cM2Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cM2Z; else goto cM30;
       cM2Z: // global
           R2 = R2;
           R1 = GHC.Show.shows_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cM30: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Show.$fShow(,)1_closure+1;
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.shows_info" {
     GHC.Show.shows_info:
         const GHC.Show.shows_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.932547833 UTC

[section ""data" . GHC.Show.$dmshow_closure" {
     GHC.Show.$dmshow_closure:
         const GHC.Show.$dmshow_info;
 },
 GHC.Show.$dmshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cM3c: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cM3d; else goto cM3e;
       cM3d: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$dmshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cM3e: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$dmshow_info" {
     GHC.Show.$dmshow_info:
         const GHC.Show.$dmshow_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.937608885 UTC

[section ""data" . GHC.Show.$dmshowList_closure" {
     GHC.Show.$dmshowList_closure:
         const GHC.Show.$dmshowList_info;
 },
 sat_sKUp_entry() //  [R1]
         { []
         }
     {offset
       cM3w: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cM3x; else goto cM3y;
       cM3x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cM3y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKUp_info" {
     sat_sKUp_info:
         const sat_sKUp_entry;
         const 1;
         const 16;
 },
 GHC.Show.$dmshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cM3z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cM3D; else goto cM3C;
       cM3D: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$dmshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cM3C: // global
           I64[Hp - 16] = sat_sKUp_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 16;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$dmshowList_info" {
     GHC.Show.$dmshowList_info:
         const GHC.Show.$dmshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.944133349 UTC

[section ""data" . GHC.Show.$fShowWord1_closure" {
     GHC.Show.$fShowWord1_closure:
         const GHC.Show.$fShowWord1_info;
 },
 GHC.Show.$fShowWord1_entry() //  [R2, R3]
         { []
         }
     {offset
       cM3X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cM3Y; else goto cM3Z;
       cM3Y: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowWord1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cM3Z: // global
           I64[Sp - 16] = block_cM3U_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uM43; else goto cM3V;
       uM43: // global
           call _cM3U(R1) args: 0, res: 0, upd: 0;
       cM3V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowWord1_info" {
     GHC.Show.$fShowWord1_info:
         const GHC.Show.$fShowWord1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cM3U() //  [R1]
         { []
         }
     {offset
       cM3U: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.showWord_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cM3U_info" {
     block_cM3U_info:
         const _cM3U;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.949694684 UTC

[section ""data" . GHC.Show.$fShowWord_$cshowList_closure" {
     GHC.Show.$fShowWord_$cshowList_closure:
         const GHC.Show.$fShowWord_$cshowList_info;
 },
 GHC.Show.$fShowWord_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cM4i: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowWord1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowWord_$cshowList_info" {
     GHC.Show.$fShowWord_$cshowList_info:
         const GHC.Show.$fShowWord_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.954088093 UTC

[section ""data" . GHC.Show.$fShowWord_$cshow_closure" {
     GHC.Show.$fShowWord_$cshow_closure:
         const GHC.Show.$fShowWord_$cshow_info;
 },
 GHC.Show.$fShowWord_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cM4w: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cM4C; else goto cM4D;
       cM4C: // global
           R2 = R2;
           R1 = GHC.Show.$fShowWord_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cM4D: // global
           I64[Sp - 8] = block_cM4t_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uM4I; else goto cM4u;
       uM4I: // global
           call _cM4t(R1) args: 0, res: 0, upd: 0;
       cM4u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowWord_$cshow_info" {
     GHC.Show.$fShowWord_$cshow_info:
         const GHC.Show.$fShowWord_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cM4t() //  [R1]
         { []
         }
     {offset
       cM4t: // global
           I64[Sp] = block_cM4z_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = I64[R1 + 7];
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cM4t_info" {
     block_cM4t_info:
         const _cM4t;
         const 0;
         const 30;
 },
 _cM4z() //  [R1, R2]
         { []
         }
     {offset
       cM4z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cM4H; else goto cM4G;
       cM4H: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cM4G: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cM4z_info" {
     block_cM4z_info:
         const _cM4z;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.960796604 UTC

[section ""data" . GHC.Show.$fShowWord_closure" {
     GHC.Show.$fShowWord_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowWord_$cshowsPrec_closure+3;
         const GHC.Show.$fShowWord_$cshow_closure+1;
         const GHC.Show.$fShowWord_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.963633145 UTC

[section ""data" . GHC.Show.showChar_closure" {
     GHC.Show.showChar_closure:
         const GHC.Show.showChar_info;
 },
 GHC.Show.showChar_entry() //  [R2, R3]
         { []
         }
     {offset
       cM56: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cM5a; else goto cM59;
       cM5a: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.showChar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cM59: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showChar_info" {
     GHC.Show.showChar_info:
         const GHC.Show.showChar_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.97003385 UTC

[section ""data" . GHC.Show.showParen_closure" {
     GHC.Show.showParen_closure:
         const GHC.Show.showParen_info;
 },
 sat_sKUH_entry() //  [R1]
         { []
         }
     {offset
       cM5B: // global
           _sKUH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cM5C; else goto cM5D;
       cM5D: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cM5F; else goto cM5E;
       cM5F: // global
           HpAlloc = 24;
           goto cM5C;
       cM5C: // global
           R1 = _sKUH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cM5E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKUH::P64;
           _sKUD::P64 = P64[_sKUH::P64 + 16];
           _sKUF::P64 = P64[_sKUH::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sKUF::P64;
           R2 = Hp - 14;
           R1 = _sKUD::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKUH_info" {
     sat_sKUH_info:
         const sat_sKUH_entry;
         const 2;
         const 18;
 },
 sat_sKUI_entry() //  [R1, R2]
         { []
         }
     {offset
       cM5H: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cM5L; else goto cM5K;
       cM5L: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cM5K: // global
           _sKUD::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sKUH_info;
           P64[Hp - 32] = _sKUD::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sKUI_info" {
     sat_sKUI_info:
         const sat_sKUI_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 GHC.Show.showParen_entry() //  [R2, R3]
         { []
         }
     {offset
       cM5Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cM5R; else goto cM5S;
       cM5R: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.showParen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cM5S: // global
           I64[Sp - 16] = block_cM5l_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uM5Y; else goto cM5m;
       uM5Y: // global
           call _cM5l(R1) args: 0, res: 0, upd: 0;
       cM5m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showParen_info" {
     GHC.Show.showParen_info:
         const GHC.Show.showParen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cM5l() //  [R1]
         { []
         }
     {offset
       cM5l: // global
           _sKUD::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cM5N; else goto cM5O;
       cM5N: // global
           R1 = _sKUD::P64;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cM5O: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cM5X; else goto cM5W;
       cM5X: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cM5W: // global
           I64[Hp - 8] = sat_sKUI_info;
           P64[Hp] = _sKUD::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cM5l_info" {
     block_cM5l_info:
         const _cM5l;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.979593682 UTC

[section ""cstring" . lvl10_rC0n_bytes" {
     lvl10_rC0n_bytes:
         I8[] [102,111,108,100,114,49]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.98265457 UTC

[section ""data" . lvl11_rC0o_closure" {
     lvl11_rC0o_closure:
         const lvl11_rC0o_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_rC0o_entry() //  [R1]
         { []
         }
     {offset
       cM6B: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cM6C; else goto cM6D;
       cM6C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cM6D: // global
           (_cM6w::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cM6w::I64 == 0) goto cM6y; else goto cM6x;
       cM6y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cM6x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cM6w::I64;
           I64[Sp - 24] = block_cM6z_info;
           R2 = lvl10_rC0n_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_rC0o_info" {
     lvl11_rC0o_info:
         const lvl11_rC0o_entry;
         const 0;
         const 4294967317;
         const SLKe_srt+96;
 },
 _cM6z() //  [R1]
         { []
         }
     {offset
       cM6z: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.List.errorEmptyList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cM6z_info" {
     block_cM6z_info:
         const _cM6z;
         const 0;
         const 4294967326;
         const SLKe_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:31.990106069 UTC

[section ""data" . go2_rC0p_closure" {
     go2_rC0p_closure:
         const go2_rC0p_info;
         const 0;
 },
 sat_sKUT_entry() //  [R1]
         { []
         }
     {offset
       cM7d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cM7e; else goto cM7f;
       cM7e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cM7f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call go2_rC0p_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKUT_info" {
     sat_sKUT_info:
         const sat_sKUT_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+104;
 },
 go2_rC0p_entry() //  [R2, R3]
         { []
         }
     {offset
       cM7k: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cM7l; else goto cM7m;
       cM7l: // global
           R3 = R3;
           R2 = R2;
           R1 = go2_rC0p_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cM7m: // global
           I64[Sp - 16] = block_cM6X_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uM7B; else goto cM6Y;
       uM7B: // global
           call _cM6X(R1) args: 0, res: 0, upd: 0;
       cM6Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go2_rC0p_info" {
     go2_rC0p_info:
         const go2_rC0p_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SLKe_srt+104;
 },
 _cM6X() //  [R1]
         { []
         }
     {offset
       cM6X: // global
           if (R1 & 7 == 1) goto cM7h; else goto cM7i;
       cM7h: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cM7i: // global
           I64[Sp - 8] = block_cM73_info;
           _sKUO::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sKUO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uM7A; else goto cM74;
       uM7A: // global
           call _cM73(R1) args: 0, res: 0, upd: 0;
       cM74: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cM6X_info" {
     block_cM6X_info:
         const _cM6X;
         const 1;
         const 12884901918;
         const SLKe_srt+104;
 },
 _cM73() //  [R1]
         { []
         }
     {offset
       cM73: // global
           _sKUL::P64 = P64[Sp + 16];
           _sKUO::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cM7t; else goto cM7v;
       cM7t: // global
           R2 = _sKUL::P64;
           R1 = _sKUO::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cM7v: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cM7y; else goto cM7x;
       cM7y: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cM7x: // global
           I64[Hp - 48] = sat_sKUT_info;
           P64[Hp - 32] = _sKUL::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sKUO::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cM73_info" {
     block_cM73_info:
         const _cM73;
         const 2;
         const 4294967326;
         const SLKe_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.009849919 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cM85: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 112, res: 0, upd: 8;
     }
 },
 sat_sKVH_entry() //  [R1]
         { []
         }
     {offset
       cM8n: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cM8o; else goto cM8p;
       cM8o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cM8p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKVH_info" {
     sat_sKVH_info:
         const sat_sKVH_entry;
         const 2;
         const 18;
 },
 sat_sKVG_entry() //  [R1]
         { []
         }
     {offset
       cM8v: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cM8w; else goto cM8x;
       cM8w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cM8x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKVG_info" {
     sat_sKVG_info:
         const sat_sKVG_entry;
         const 2;
         const 18;
 },
 sat_sKVF_entry() //  [R1]
         { []
         }
     {offset
       cM8D: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cM8E; else goto cM8F;
       cM8E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cM8F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKVF_info" {
     sat_sKVF_info:
         const sat_sKVF_entry;
         const 2;
         const 18;
 },
 sat_sKVE_entry() //  [R1]
         { []
         }
     {offset
       cM8L: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cM8M; else goto cM8N;
       cM8M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cM8N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKVE_info" {
     sat_sKVE_info:
         const sat_sKVE_entry;
         const 2;
         const 18;
 },
 sat_sKVD_entry() //  [R1]
         { []
         }
     {offset
       cM8T: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cM8U; else goto cM8V;
       cM8U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cM8V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKVD_info" {
     sat_sKVD_info:
         const sat_sKVD_entry;
         const 2;
         const 18;
 },
 sat_sKVC_entry() //  [R1]
         { []
         }
     {offset
       cM91: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cM92; else goto cM93;
       cM92: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cM93: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKVC_info" {
     sat_sKVC_info:
         const sat_sKVC_entry;
         const 2;
         const 18;
 },
 sat_sKVB_entry() //  [R1]
         { []
         }
     {offset
       cM99: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cM9a; else goto cM9b;
       cM9a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cM9b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKVB_info" {
     sat_sKVB_info:
         const sat_sKVB_entry;
         const 2;
         const 18;
 },
 sat_sKVA_entry() //  [R1]
         { []
         }
     {offset
       cM9h: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cM9i; else goto cM9j;
       cM9i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cM9j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKVA_info" {
     sat_sKVA_info:
         const sat_sKVA_entry;
         const 2;
         const 18;
 },
 sat_sKVz_entry() //  [R1]
         { []
         }
     {offset
       cM9p: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cM9q; else goto cM9r;
       cM9q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cM9r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKVz_info" {
     sat_sKVz_info:
         const sat_sKVz_entry;
         const 2;
         const 18;
 },
 sat_sKVy_entry() //  [R1]
         { []
         }
     {offset
       cM9x: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cM9y; else goto cM9z;
       cM9y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cM9z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKVy_info" {
     sat_sKVy_info:
         const sat_sKVy_entry;
         const 2;
         const 18;
 },
 sat_sKVx_entry() //  [R1]
         { []
         }
     {offset
       cM9F: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cM9G; else goto cM9H;
       cM9G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cM9H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKVx_info" {
     sat_sKVx_info:
         const sat_sKVx_entry;
         const 2;
         const 18;
 },
 sat_sKVw_entry() //  [R1]
         { []
         }
     {offset
       cM9N: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cM9O; else goto cM9P;
       cM9O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cM9P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKVw_info" {
     sat_sKVw_info:
         const sat_sKVw_entry;
         const 2;
         const 18;
 },
 sat_sKVv_entry() //  [R1]
         { []
         }
     {offset
       cM9V: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cM9W; else goto cM9X;
       cM9W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cM9X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKVv_info" {
     sat_sKVv_info:
         const sat_sKVv_entry;
         const 2;
         const 18;
 },
 sat_sKVu_entry() //  [R1]
         { []
         }
     {offset
       cMa3: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMa4; else goto cMa5;
       cMa4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMa5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKVu_info" {
     sat_sKVu_info:
         const sat_sKVu_entry;
         const 2;
         const 18;
 },
 sat_sKVt_entry() //  [R1]
         { []
         }
     {offset
       cMab: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMac; else goto cMad;
       cMac: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMad: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKVt_info" {
     sat_sKVt_info:
         const sat_sKVt_entry;
         const 2;
         const 18;
 },
 sat_sKVY_entry() //  [R1]
         { []
         }
     {offset
       cMaf: // global
           _sKVY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cMag; else goto cMah;
       cMah: // global
           Hp = Hp + 864;
           if (Hp > HpLim) (likely: False) goto cMaj; else goto cMai;
       cMaj: // global
           HpAlloc = 864;
           goto cMag;
       cMag: // global
           R1 = _sKVY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMai: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKVY::P64;
           _sKUV::P64 = P64[_sKVY::P64 + 16];
           _sKUW::P64 = P64[_sKVY::P64 + 24];
           _sKUX::P64 = P64[_sKVY::P64 + 32];
           _sKUY::P64 = P64[_sKVY::P64 + 40];
           _sKUZ::P64 = P64[_sKVY::P64 + 48];
           _sKV0::P64 = P64[_sKVY::P64 + 56];
           _sKV1::P64 = P64[_sKVY::P64 + 64];
           _sKV2::P64 = P64[_sKVY::P64 + 72];
           _sKV3::P64 = P64[_sKVY::P64 + 80];
           _sKV4::P64 = P64[_sKVY::P64 + 88];
           _sKV5::P64 = P64[_sKVY::P64 + 96];
           _sKV6::P64 = P64[_sKVY::P64 + 104];
           _sKV7::P64 = P64[_sKVY::P64 + 112];
           _sKV8::P64 = P64[_sKVY::P64 + 120];
           _sKV9::P64 = P64[_sKVY::P64 + 128];
           _sKVc::P64 = P64[_sKVY::P64 + 136];
           _sKVe::P64 = P64[_sKVY::P64 + 144];
           _sKVf::P64 = P64[_sKVY::P64 + 152];
           _sKVg::P64 = P64[_sKVY::P64 + 160];
           _sKVh::P64 = P64[_sKVY::P64 + 168];
           _sKVi::P64 = P64[_sKVY::P64 + 176];
           _sKVj::P64 = P64[_sKVY::P64 + 184];
           _sKVk::P64 = P64[_sKVY::P64 + 192];
           _sKVl::P64 = P64[_sKVY::P64 + 200];
           _sKVm::P64 = P64[_sKVY::P64 + 208];
           _sKVn::P64 = P64[_sKVY::P64 + 216];
           _sKVo::P64 = P64[_sKVY::P64 + 224];
           _sKVp::P64 = P64[_sKVY::P64 + 232];
           _sKVq::P64 = P64[_sKVY::P64 + 240];
           _sKVr::P64 = P64[_sKVY::P64 + 248];
           _sKVs::P64 = P64[_sKVY::P64 + 256];
           I64[Hp - 856] = :_con_info;
           P64[Hp - 848] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 840] = _sKVc::P64;
           I64[Hp - 832] = sat_sKVH_info;
           P64[Hp - 816] = _sKV9::P64;
           P64[Hp - 808] = _sKVs::P64;
           I64[Hp - 800] = :_con_info;
           P64[Hp - 792] = Hp - 832;
           P64[Hp - 784] = GHC.Types.[]_closure+1;
           I64[Hp - 776] = sat_sKVG_info;
           P64[Hp - 760] = _sKV8::P64;
           P64[Hp - 752] = _sKVr::P64;
           I64[Hp - 744] = :_con_info;
           P64[Hp - 736] = Hp - 776;
           P64[Hp - 728] = Hp - 798;
           I64[Hp - 720] = sat_sKVF_info;
           P64[Hp - 704] = _sKV7::P64;
           P64[Hp - 696] = _sKVq::P64;
           I64[Hp - 688] = :_con_info;
           P64[Hp - 680] = Hp - 720;
           P64[Hp - 672] = Hp - 742;
           I64[Hp - 664] = sat_sKVE_info;
           P64[Hp - 648] = _sKV6::P64;
           P64[Hp - 640] = _sKVp::P64;
           I64[Hp - 632] = :_con_info;
           P64[Hp - 624] = Hp - 664;
           P64[Hp - 616] = Hp - 686;
           I64[Hp - 608] = sat_sKVD_info;
           P64[Hp - 592] = _sKV5::P64;
           P64[Hp - 584] = _sKVo::P64;
           I64[Hp - 576] = :_con_info;
           P64[Hp - 568] = Hp - 608;
           P64[Hp - 560] = Hp - 630;
           I64[Hp - 552] = sat_sKVC_info;
           P64[Hp - 536] = _sKV4::P64;
           P64[Hp - 528] = _sKVn::P64;
           I64[Hp - 520] = :_con_info;
           P64[Hp - 512] = Hp - 552;
           P64[Hp - 504] = Hp - 574;
           I64[Hp - 496] = sat_sKVB_info;
           P64[Hp - 480] = _sKV3::P64;
           P64[Hp - 472] = _sKVm::P64;
           I64[Hp - 464] = :_con_info;
           P64[Hp - 456] = Hp - 496;
           P64[Hp - 448] = Hp - 518;
           I64[Hp - 440] = sat_sKVA_info;
           P64[Hp - 424] = _sKV2::P64;
           P64[Hp - 416] = _sKVl::P64;
           I64[Hp - 408] = :_con_info;
           P64[Hp - 400] = Hp - 440;
           P64[Hp - 392] = Hp - 462;
           I64[Hp - 384] = sat_sKVz_info;
           P64[Hp - 368] = _sKV1::P64;
           P64[Hp - 360] = _sKVk::P64;
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = Hp - 384;
           P64[Hp - 336] = Hp - 406;
           I64[Hp - 328] = sat_sKVy_info;
           P64[Hp - 312] = _sKV0::P64;
           P64[Hp - 304] = _sKVj::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = Hp - 350;
           I64[Hp - 272] = sat_sKVx_info;
           P64[Hp - 256] = _sKUZ::P64;
           P64[Hp - 248] = _sKVi::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sKVw_info;
           P64[Hp - 200] = _sKUY::P64;
           P64[Hp - 192] = _sKVh::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sKVv_info;
           P64[Hp - 144] = _sKUX::P64;
           P64[Hp - 136] = _sKVg::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sKVu_info;
           P64[Hp - 88] = _sKUW::P64;
           P64[Hp - 80] = _sKVf::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sKVt_info;
           P64[Hp - 32] = _sKUV::P64;
           P64[Hp - 24] = _sKVe::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 854;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call go2_rC0p_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKVY_info" {
     sat_sKVY_info:
         const sat_sKVY_entry;
         const 31;
         const 4294967311;
         const SLKe_srt+104;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       cMak: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cMam; else goto cMan;
       cMam: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 152, res: 0, upd: 8;
       cMan: // global
           I64[Sp - 32] = block_cM89_info;
           R1 = P64[Sp + 88];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 80] = R3;
           P64[Sp + 88] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uMar; else goto cM8a;
       uMar: // global
           call _cM89(R1) args: 0, res: 0, upd: 0;
       cM8a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_entry;
         const 0;
         const 21474836494;
         const 77309411328;
         const SLKe_srt+104;
         const 18;
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_slow;
 },
 _cM89() //  [R1]
         { []
         }
     {offset
       cM89: // global
           Hp = Hp + 288;
           if (Hp > HpLim) (likely: False) goto cMaq; else goto cMap;
       cMaq: // global
           HpAlloc = 288;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cMap: // global
           _sKVe::P64 = P64[R1 + 7];
           _sKVf::P64 = P64[R1 + 15];
           _sKVg::P64 = P64[R1 + 23];
           _sKVh::P64 = P64[R1 + 31];
           _sKVi::P64 = P64[R1 + 39];
           _sKVj::P64 = P64[R1 + 47];
           _sKVk::P64 = P64[R1 + 55];
           _sKVl::P64 = P64[R1 + 63];
           _sKVm::P64 = P64[R1 + 71];
           _sKVn::P64 = P64[R1 + 79];
           _sKVo::P64 = P64[R1 + 87];
           _sKVp::P64 = P64[R1 + 95];
           _sKVq::P64 = P64[R1 + 103];
           _sKVr::P64 = P64[R1 + 111];
           _sKVs::P64 = P64[R1 + 119];
           I64[Hp - 280] = sat_sKVY_info;
           P64[Hp - 264] = P64[Sp + 120];
           P64[Hp - 256] = P64[Sp + 112];
           P64[Hp - 248] = P64[Sp + 8];
           P64[Hp - 240] = P64[Sp + 16];
           P64[Hp - 232] = P64[Sp + 24];
           P64[Hp - 224] = P64[Sp + 32];
           P64[Hp - 216] = P64[Sp + 40];
           P64[Hp - 208] = P64[Sp + 48];
           P64[Hp - 200] = P64[Sp + 56];
           P64[Hp - 192] = P64[Sp + 64];
           P64[Hp - 184] = P64[Sp + 72];
           P64[Hp - 176] = P64[Sp + 80];
           P64[Hp - 168] = P64[Sp + 88];
           P64[Hp - 160] = P64[Sp + 96];
           P64[Hp - 152] = P64[Sp + 104];
           P64[Hp - 144] = P64[Sp + 128];
           P64[Hp - 136] = _sKVe::P64;
           P64[Hp - 128] = _sKVf::P64;
           P64[Hp - 120] = _sKVg::P64;
           P64[Hp - 112] = _sKVh::P64;
           P64[Hp - 104] = _sKVi::P64;
           P64[Hp - 96] = _sKVj::P64;
           P64[Hp - 88] = _sKVk::P64;
           P64[Hp - 80] = _sKVl::P64;
           P64[Hp - 72] = _sKVm::P64;
           P64[Hp - 64] = _sKVn::P64;
           P64[Hp - 56] = _sKVo::P64;
           P64[Hp - 48] = _sKVp::P64;
           P64[Hp - 40] = _sKVq::P64;
           P64[Hp - 32] = _sKVr::P64;
           P64[Hp - 24] = _sKVs::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 280;
           R1 = Hp - 14;
           Sp = Sp + 136;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cM89_info" {
     block_cM89_info:
         const _cM89;
         const 16;
         const 4294967326;
         const SLKe_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.05062833 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cMe2: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 96, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cMe6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cMe7; else goto cMe8;
       cMe7: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 136, res: 0, upd: 8;
       cMe8: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = P64[Sp + 32];
           P64[Sp + 24] = P64[Sp + 40];
           P64[Sp + 32] = P64[Sp + 48];
           P64[Sp + 40] = P64[Sp + 56];
           P64[Sp + 48] = P64[Sp + 64];
           P64[Sp + 56] = P64[Sp + 72];
           P64[Sp + 64] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp + 72] = P64[Sp + 80];
           P64[Sp + 80] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 112, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 68719476736;
         const SLKe_srt+120;
         const 16;
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.057847293 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cMev: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 104, res: 0, upd: 8;
     }
 },
 sat_sKWw_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cMeE: // global
           if ((Sp + -104) < SpLim) (likely: False) goto cMeF; else goto cMeG;
       cMeF: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cMeG: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 104] = P64[R1 + 46];
           P64[Sp - 96] = P64[R1 + 54];
           P64[Sp - 88] = P64[R1 + 62];
           P64[Sp - 80] = P64[R1 + 70];
           P64[Sp - 72] = P64[R1 + 78];
           P64[Sp - 64] = P64[R1 + 86];
           P64[Sp - 56] = P64[R1 + 94];
           P64[Sp - 48] = P64[R1 + 102];
           P64[Sp - 40] = P64[R1 + 110];
           P64[Sp - 32] = P64[R1 + 118];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 104;
           call GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 112, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sKWw_info" {
     sat_sKWw_info:
         const sat_sKWw_entry;
         const 15;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+120;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       cMeH: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cMeL; else goto cMeK;
       cMeL: // global
           HpAlloc = 128;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 144, res: 0, upd: 8;
       cMeK: // global
           I64[Hp - 120] = sat_sKWw_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = P64[Sp];
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 64];
           P64[Hp] = P64[Sp + 72];
           R4 = P64[Sp + 88];
           R3 = P64[Sp + 80];
           R2 = Hp - 118;
           Sp = Sp + 96;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 73014444032;
         const SLKe_srt+120;
         const 17;
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.069740542 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       cMfj: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,,,)_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_sKWO_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cMfs: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cMft; else goto cMfu;
       cMft: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cMfu: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 96] = P64[R1 + 46];
           P64[Sp - 88] = P64[R1 + 54];
           P64[Sp - 80] = P64[R1 + 62];
           P64[Sp - 72] = P64[R1 + 70];
           P64[Sp - 64] = P64[R1 + 78];
           P64[Sp - 56] = P64[R1 + 86];
           P64[Sp - 48] = P64[R1 + 94];
           P64[Sp - 40] = P64[R1 + 102];
           P64[Sp - 32] = P64[R1 + 110];
           P64[Sp - 24] = P64[R1 + 118];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 96;
           call GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 104, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sKWO_info" {
     sat_sKWO_info:
         const sat_sKWO_entry;
         const 15;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+136;
 },
 sat_sKWN_entry() //  [R1, R2]
         { []
         }
     {offset
       cMfA: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cMfB; else goto cMfC;
       cMfB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cMfC: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 88] = P64[R1 + 47];
           P64[Sp - 80] = P64[R1 + 55];
           P64[Sp - 72] = P64[R1 + 63];
           P64[Sp - 64] = P64[R1 + 71];
           P64[Sp - 56] = P64[R1 + 79];
           P64[Sp - 48] = P64[R1 + 87];
           P64[Sp - 40] = P64[R1 + 95];
           P64[Sp - 32] = P64[R1 + 103];
           P64[Sp - 24] = P64[R1 + 111];
           P64[Sp - 16] = P64[R1 + 119];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 88;
           call GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 96, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sKWN_info" {
     sat_sKWN_info:
         const sat_sKWN_entry;
         const 15;
         const 4294967304;
         const 4294967301;
         const SLKe_srt+128;
 },
 sat_sKWM_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cMfI: // global
           if ((Sp + -104) < SpLim) (likely: False) goto cMfJ; else goto cMfK;
       cMfJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cMfK: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 104] = P64[R1 + 45];
           P64[Sp - 96] = P64[R1 + 53];
           P64[Sp - 88] = P64[R1 + 61];
           P64[Sp - 80] = P64[R1 + 69];
           P64[Sp - 72] = P64[R1 + 77];
           P64[Sp - 64] = P64[R1 + 85];
           P64[Sp - 56] = P64[R1 + 93];
           P64[Sp - 48] = P64[R1 + 101];
           P64[Sp - 40] = P64[R1 + 109];
           P64[Sp - 32] = P64[R1 + 117];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 104;
           call GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 112, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sKWM_info" {
     sat_sKWM_info:
         const sat_sKWM_entry;
         const 15;
         const 4294967304;
         const 12884901911;
         const SLKe_srt+120;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cMfM: // global
           Hp = Hp + 416;
           if (Hp > HpLim) (likely: False) goto cMfQ; else goto cMfP;
       cMfQ: // global
           HpAlloc = 416;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       cMfP: // global
           I64[Hp - 408] = sat_sKWO_info;
           P64[Hp - 400] = R2;
           P64[Hp - 392] = R3;
           P64[Hp - 384] = R4;
           P64[Hp - 376] = R5;
           P64[Hp - 368] = R6;
           _sKWC::P64 = P64[Sp];
           P64[Hp - 360] = _sKWC::P64;
           _sKWD::P64 = P64[Sp + 8];
           P64[Hp - 352] = _sKWD::P64;
           _sKWE::P64 = P64[Sp + 16];
           P64[Hp - 344] = _sKWE::P64;
           _sKWF::P64 = P64[Sp + 24];
           P64[Hp - 336] = _sKWF::P64;
           _sKWG::P64 = P64[Sp + 32];
           P64[Hp - 328] = _sKWG::P64;
           _sKWH::P64 = P64[Sp + 40];
           P64[Hp - 320] = _sKWH::P64;
           _sKWI::P64 = P64[Sp + 48];
           P64[Hp - 312] = _sKWI::P64;
           _sKWJ::P64 = P64[Sp + 56];
           P64[Hp - 304] = _sKWJ::P64;
           _sKWK::P64 = P64[Sp + 64];
           P64[Hp - 296] = _sKWK::P64;
           _sKWL::P64 = P64[Sp + 72];
           P64[Hp - 288] = _sKWL::P64;
           I64[Hp - 280] = sat_sKWN_info;
           P64[Hp - 272] = R2;
           P64[Hp - 264] = R3;
           P64[Hp - 256] = R4;
           P64[Hp - 248] = R5;
           P64[Hp - 240] = R6;
           P64[Hp - 232] = _sKWC::P64;
           P64[Hp - 224] = _sKWD::P64;
           P64[Hp - 216] = _sKWE::P64;
           P64[Hp - 208] = _sKWF::P64;
           P64[Hp - 200] = _sKWG::P64;
           P64[Hp - 192] = _sKWH::P64;
           P64[Hp - 184] = _sKWI::P64;
           P64[Hp - 176] = _sKWJ::P64;
           P64[Hp - 168] = _sKWK::P64;
           P64[Hp - 160] = _sKWL::P64;
           I64[Hp - 152] = sat_sKWM_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           P64[Hp - 128] = R4;
           P64[Hp - 120] = R5;
           P64[Hp - 112] = R6;
           P64[Hp - 104] = _sKWC::P64;
           P64[Hp - 96] = _sKWD::P64;
           P64[Hp - 88] = _sKWE::P64;
           P64[Hp - 80] = _sKWF::P64;
           P64[Hp - 72] = _sKWG::P64;
           P64[Hp - 64] = _sKWH::P64;
           P64[Hp - 56] = _sKWI::P64;
           P64[Hp - 48] = _sKWJ::P64;
           P64[Hp - 40] = _sKWK::P64;
           P64[Hp - 32] = _sKWL::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 149;
           P64[Hp - 8] = Hp - 279;
           P64[Hp] = Hp - 406;
           R1 = Hp - 23;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,,,)_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,,,)_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_entry;
         const 0;
         const 64424509454;
         const 64424509440;
         const SLKe_srt+120;
         const 15;
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.087647434 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_info;
         const 0;
 },
 sat_sKWY_entry() //  [R1]
         { []
         }
     {offset
       cMh5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cMh6; else goto cMh7;
       cMh6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMh7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKWY_info" {
     sat_sKWY_info:
         const sat_sKWY_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+152;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cMhc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cMhd; else goto cMhe;
       cMhd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cMhe: // global
           I64[Sp - 16] = block_cMgP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uMht; else goto cMgQ;
       uMht: // global
           call _cMgP(R1) args: 0, res: 0, upd: 0;
       cMgQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_entry;
         const 0;
         const 141733920782;
         const 8589934607;
         const SLKe_srt+112;
 },
 _cMgP() //  [R1]
         { []
         }
     {offset
       cMgP: // global
           if (R1 & 7 == 1) goto cMh9; else goto cMha;
       cMh9: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cMha: // global
           I64[Sp - 8] = block_cMgV_info;
           _sKWT::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sKWT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uMhs; else goto cMgW;
       uMhs: // global
           call _cMgV(R1) args: 0, res: 0, upd: 0;
       cMgW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cMgP_info" {
     block_cMgP_info:
         const _cMgP;
         const 1;
         const 141733920798;
         const SLKe_srt+112;
 },
 _cMgV() //  [R1]
         { []
         }
     {offset
       cMgV: // global
           _sKWQ::P64 = P64[Sp + 16];
           _sKWT::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cMhl; else goto cMhn;
       cMhl: // global
           R2 = _sKWQ::P64;
           R1 = _sKWT::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cMhn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cMhq; else goto cMhp;
       cMhq: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cMhp: // global
           I64[Hp - 48] = sat_sKWY_info;
           P64[Hp - 32] = _sKWQ::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sKWT::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cMgV_info" {
     block_cMgV_info:
         const _cMgV;
         const 2;
         const 4294967326;
         const SLKe_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.111766093 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cMhX: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 104, res: 0, upd: 8;
     }
 },
 sat_sKXJ_entry() //  [R1]
         { []
         }
     {offset
       cMif: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMig; else goto cMih;
       cMig: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMih: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKXJ_info" {
     sat_sKXJ_info:
         const sat_sKXJ_entry;
         const 2;
         const 18;
 },
 sat_sKXI_entry() //  [R1]
         { []
         }
     {offset
       cMin: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMio; else goto cMip;
       cMio: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMip: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKXI_info" {
     sat_sKXI_info:
         const sat_sKXI_entry;
         const 2;
         const 18;
 },
 sat_sKXH_entry() //  [R1]
         { []
         }
     {offset
       cMiv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMiw; else goto cMix;
       cMiw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMix: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKXH_info" {
     sat_sKXH_info:
         const sat_sKXH_entry;
         const 2;
         const 18;
 },
 sat_sKXG_entry() //  [R1]
         { []
         }
     {offset
       cMiD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMiE; else goto cMiF;
       cMiE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMiF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKXG_info" {
     sat_sKXG_info:
         const sat_sKXG_entry;
         const 2;
         const 18;
 },
 sat_sKXF_entry() //  [R1]
         { []
         }
     {offset
       cMiL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMiM; else goto cMiN;
       cMiM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMiN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKXF_info" {
     sat_sKXF_info:
         const sat_sKXF_entry;
         const 2;
         const 18;
 },
 sat_sKXE_entry() //  [R1]
         { []
         }
     {offset
       cMiT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMiU; else goto cMiV;
       cMiU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMiV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKXE_info" {
     sat_sKXE_info:
         const sat_sKXE_entry;
         const 2;
         const 18;
 },
 sat_sKXD_entry() //  [R1]
         { []
         }
     {offset
       cMj1: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMj2; else goto cMj3;
       cMj2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMj3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKXD_info" {
     sat_sKXD_info:
         const sat_sKXD_entry;
         const 2;
         const 18;
 },
 sat_sKXC_entry() //  [R1]
         { []
         }
     {offset
       cMj9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMja; else goto cMjb;
       cMja: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMjb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKXC_info" {
     sat_sKXC_info:
         const sat_sKXC_entry;
         const 2;
         const 18;
 },
 sat_sKXB_entry() //  [R1]
         { []
         }
     {offset
       cMjh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMji; else goto cMjj;
       cMji: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMjj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKXB_info" {
     sat_sKXB_info:
         const sat_sKXB_entry;
         const 2;
         const 18;
 },
 sat_sKXA_entry() //  [R1]
         { []
         }
     {offset
       cMjp: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMjq; else goto cMjr;
       cMjq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMjr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKXA_info" {
     sat_sKXA_info:
         const sat_sKXA_entry;
         const 2;
         const 18;
 },
 sat_sKXz_entry() //  [R1]
         { []
         }
     {offset
       cMjx: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMjy; else goto cMjz;
       cMjy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMjz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKXz_info" {
     sat_sKXz_info:
         const sat_sKXz_entry;
         const 2;
         const 18;
 },
 sat_sKXy_entry() //  [R1]
         { []
         }
     {offset
       cMjF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMjG; else goto cMjH;
       cMjG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMjH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKXy_info" {
     sat_sKXy_info:
         const sat_sKXy_entry;
         const 2;
         const 18;
 },
 sat_sKXx_entry() //  [R1]
         { []
         }
     {offset
       cMjN: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMjO; else goto cMjP;
       cMjO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMjP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKXx_info" {
     sat_sKXx_info:
         const sat_sKXx_entry;
         const 2;
         const 18;
 },
 sat_sKXw_entry() //  [R1]
         { []
         }
     {offset
       cMjV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMjW; else goto cMjX;
       cMjW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMjX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKXw_info" {
     sat_sKXw_info:
         const sat_sKXw_entry;
         const 2;
         const 18;
 },
 sat_sKXZ_entry() //  [R1]
         { []
         }
     {offset
       cMjZ: // global
           _sKXZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cMk0; else goto cMk1;
       cMk1: // global
           Hp = Hp + 808;
           if (Hp > HpLim) (likely: False) goto cMk3; else goto cMk2;
       cMk3: // global
           HpAlloc = 808;
           goto cMk0;
       cMk0: // global
           R1 = _sKXZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMk2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKXZ::P64;
           _sKX0::P64 = P64[_sKXZ::P64 + 16];
           _sKX1::P64 = P64[_sKXZ::P64 + 24];
           _sKX2::P64 = P64[_sKXZ::P64 + 32];
           _sKX3::P64 = P64[_sKXZ::P64 + 40];
           _sKX4::P64 = P64[_sKXZ::P64 + 48];
           _sKX5::P64 = P64[_sKXZ::P64 + 56];
           _sKX6::P64 = P64[_sKXZ::P64 + 64];
           _sKX7::P64 = P64[_sKXZ::P64 + 72];
           _sKX8::P64 = P64[_sKXZ::P64 + 80];
           _sKX9::P64 = P64[_sKXZ::P64 + 88];
           _sKXa::P64 = P64[_sKXZ::P64 + 96];
           _sKXb::P64 = P64[_sKXZ::P64 + 104];
           _sKXc::P64 = P64[_sKXZ::P64 + 112];
           _sKXd::P64 = P64[_sKXZ::P64 + 120];
           _sKXg::P64 = P64[_sKXZ::P64 + 128];
           _sKXi::P64 = P64[_sKXZ::P64 + 136];
           _sKXj::P64 = P64[_sKXZ::P64 + 144];
           _sKXk::P64 = P64[_sKXZ::P64 + 152];
           _sKXl::P64 = P64[_sKXZ::P64 + 160];
           _sKXm::P64 = P64[_sKXZ::P64 + 168];
           _sKXn::P64 = P64[_sKXZ::P64 + 176];
           _sKXo::P64 = P64[_sKXZ::P64 + 184];
           _sKXp::P64 = P64[_sKXZ::P64 + 192];
           _sKXq::P64 = P64[_sKXZ::P64 + 200];
           _sKXr::P64 = P64[_sKXZ::P64 + 208];
           _sKXs::P64 = P64[_sKXZ::P64 + 216];
           _sKXt::P64 = P64[_sKXZ::P64 + 224];
           _sKXu::P64 = P64[_sKXZ::P64 + 232];
           _sKXv::P64 = P64[_sKXZ::P64 + 240];
           I64[Hp - 800] = :_con_info;
           P64[Hp - 792] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 784] = _sKXg::P64;
           I64[Hp - 776] = sat_sKXJ_info;
           P64[Hp - 760] = _sKXd::P64;
           P64[Hp - 752] = _sKXv::P64;
           I64[Hp - 744] = :_con_info;
           P64[Hp - 736] = Hp - 776;
           P64[Hp - 728] = GHC.Types.[]_closure+1;
           I64[Hp - 720] = sat_sKXI_info;
           P64[Hp - 704] = _sKXc::P64;
           P64[Hp - 696] = _sKXu::P64;
           I64[Hp - 688] = :_con_info;
           P64[Hp - 680] = Hp - 720;
           P64[Hp - 672] = Hp - 742;
           I64[Hp - 664] = sat_sKXH_info;
           P64[Hp - 648] = _sKXb::P64;
           P64[Hp - 640] = _sKXt::P64;
           I64[Hp - 632] = :_con_info;
           P64[Hp - 624] = Hp - 664;
           P64[Hp - 616] = Hp - 686;
           I64[Hp - 608] = sat_sKXG_info;
           P64[Hp - 592] = _sKXa::P64;
           P64[Hp - 584] = _sKXs::P64;
           I64[Hp - 576] = :_con_info;
           P64[Hp - 568] = Hp - 608;
           P64[Hp - 560] = Hp - 630;
           I64[Hp - 552] = sat_sKXF_info;
           P64[Hp - 536] = _sKX9::P64;
           P64[Hp - 528] = _sKXr::P64;
           I64[Hp - 520] = :_con_info;
           P64[Hp - 512] = Hp - 552;
           P64[Hp - 504] = Hp - 574;
           I64[Hp - 496] = sat_sKXE_info;
           P64[Hp - 480] = _sKX8::P64;
           P64[Hp - 472] = _sKXq::P64;
           I64[Hp - 464] = :_con_info;
           P64[Hp - 456] = Hp - 496;
           P64[Hp - 448] = Hp - 518;
           I64[Hp - 440] = sat_sKXD_info;
           P64[Hp - 424] = _sKX7::P64;
           P64[Hp - 416] = _sKXp::P64;
           I64[Hp - 408] = :_con_info;
           P64[Hp - 400] = Hp - 440;
           P64[Hp - 392] = Hp - 462;
           I64[Hp - 384] = sat_sKXC_info;
           P64[Hp - 368] = _sKX6::P64;
           P64[Hp - 360] = _sKXo::P64;
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = Hp - 384;
           P64[Hp - 336] = Hp - 406;
           I64[Hp - 328] = sat_sKXB_info;
           P64[Hp - 312] = _sKX5::P64;
           P64[Hp - 304] = _sKXn::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = Hp - 350;
           I64[Hp - 272] = sat_sKXA_info;
           P64[Hp - 256] = _sKX4::P64;
           P64[Hp - 248] = _sKXm::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sKXz_info;
           P64[Hp - 200] = _sKX3::P64;
           P64[Hp - 192] = _sKXl::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sKXy_info;
           P64[Hp - 144] = _sKX2::P64;
           P64[Hp - 136] = _sKXk::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sKXx_info;
           P64[Hp - 88] = _sKX1::P64;
           P64[Hp - 80] = _sKXj::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sKXw_info;
           P64[Hp - 32] = _sKX0::P64;
           P64[Hp - 24] = _sKXi::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 798;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKXZ_info" {
     sat_sKXZ_info:
         const sat_sKXZ_entry;
         const 29;
         const 4294967311;
         const SLKe_srt+152;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       cMk4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cMk6; else goto cMk7;
       cMk6: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 144, res: 0, upd: 8;
       cMk7: // global
           I64[Sp - 32] = block_cMi1_info;
           R1 = P64[Sp + 80];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 72] = R3;
           P64[Sp + 80] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uMkb; else goto cMi2;
       uMkb: // global
           call _cMi1(R1) args: 0, res: 0, upd: 0;
       cMi2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 73014444032;
         const SLKe_srt+152;
         const 17;
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_slow;
 },
 _cMi1() //  [R1]
         { []
         }
     {offset
       cMi1: // global
           Hp = Hp + 272;
           if (Hp > HpLim) (likely: False) goto cMka; else goto cMk9;
       cMka: // global
           HpAlloc = 272;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cMk9: // global
           _sKXi::P64 = P64[R1 + 7];
           _sKXj::P64 = P64[R1 + 15];
           _sKXk::P64 = P64[R1 + 23];
           _sKXl::P64 = P64[R1 + 31];
           _sKXm::P64 = P64[R1 + 39];
           _sKXn::P64 = P64[R1 + 47];
           _sKXo::P64 = P64[R1 + 55];
           _sKXp::P64 = P64[R1 + 63];
           _sKXq::P64 = P64[R1 + 71];
           _sKXr::P64 = P64[R1 + 79];
           _sKXs::P64 = P64[R1 + 87];
           _sKXt::P64 = P64[R1 + 95];
           _sKXu::P64 = P64[R1 + 103];
           _sKXv::P64 = P64[R1 + 111];
           I64[Hp - 264] = sat_sKXZ_info;
           P64[Hp - 248] = P64[Sp + 112];
           P64[Hp - 240] = P64[Sp + 104];
           P64[Hp - 232] = P64[Sp + 8];
           P64[Hp - 224] = P64[Sp + 16];
           P64[Hp - 216] = P64[Sp + 24];
           P64[Hp - 208] = P64[Sp + 32];
           P64[Hp - 200] = P64[Sp + 40];
           P64[Hp - 192] = P64[Sp + 48];
           P64[Hp - 184] = P64[Sp + 56];
           P64[Hp - 176] = P64[Sp + 64];
           P64[Hp - 168] = P64[Sp + 72];
           P64[Hp - 160] = P64[Sp + 80];
           P64[Hp - 152] = P64[Sp + 88];
           P64[Hp - 144] = P64[Sp + 96];
           P64[Hp - 136] = P64[Sp + 120];
           P64[Hp - 128] = _sKXi::P64;
           P64[Hp - 120] = _sKXj::P64;
           P64[Hp - 112] = _sKXk::P64;
           P64[Hp - 104] = _sKXl::P64;
           P64[Hp - 96] = _sKXm::P64;
           P64[Hp - 88] = _sKXn::P64;
           P64[Hp - 80] = _sKXo::P64;
           P64[Hp - 72] = _sKXp::P64;
           P64[Hp - 64] = _sKXq::P64;
           P64[Hp - 56] = _sKXr::P64;
           P64[Hp - 48] = _sKXs::P64;
           P64[Hp - 40] = _sKXt::P64;
           P64[Hp - 32] = _sKXu::P64;
           P64[Hp - 24] = _sKXv::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 264;
           R1 = Hp - 14;
           Sp = Sp + 128;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cMi1_info" {
     block_cMi1_info:
         const _cMi1;
         const 15;
         const 4294967326;
         const SLKe_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.158570046 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cMnz: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2,
                                                            R1) args: 88, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cMnD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cMnE; else goto cMnF;
       cMnE: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       cMnF: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = P64[Sp + 32];
           P64[Sp + 24] = P64[Sp + 40];
           P64[Sp + 32] = P64[Sp + 48];
           P64[Sp + 40] = P64[Sp + 56];
           P64[Sp + 48] = P64[Sp + 64];
           P64[Sp + 56] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp + 64] = P64[Sp + 72];
           P64[Sp + 72] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 104, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 64424509440;
         const SLKe_srt+160;
         const 15;
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.166176218 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cMo1: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2,
                                                                R1) args: 96, res: 0, upd: 8;
     }
 },
 sat_sKYv_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cMoa: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cMob; else goto cMoc;
       cMob: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cMoc: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 96] = P64[R1 + 46];
           P64[Sp - 88] = P64[R1 + 54];
           P64[Sp - 80] = P64[R1 + 62];
           P64[Sp - 72] = P64[R1 + 70];
           P64[Sp - 64] = P64[R1 + 78];
           P64[Sp - 56] = P64[R1 + 86];
           P64[Sp - 48] = P64[R1 + 94];
           P64[Sp - 40] = P64[R1 + 102];
           P64[Sp - 32] = P64[R1 + 110];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 96;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 104, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sKYv_info" {
     sat_sKYv_info:
         const sat_sKYv_entry;
         const 14;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+160;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       cMod: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cMoh; else goto cMog;
       cMoh: // global
           HpAlloc = 120;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 136, res: 0, upd: 8;
       cMog: // global
           I64[Hp - 112] = sat_sKYv_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           R4 = P64[Sp + 80];
           R3 = P64[Sp + 72];
           R2 = Hp - 110;
           Sp = Sp + 88;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 68719476736;
         const SLKe_srt+160;
         const 16;
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.179410924 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       cMoN: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_sKYM_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cMoW: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cMoX; else goto cMoY;
       cMoX: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cMoY: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 88] = P64[R1 + 46];
           P64[Sp - 80] = P64[R1 + 54];
           P64[Sp - 72] = P64[R1 + 62];
           P64[Sp - 64] = P64[R1 + 70];
           P64[Sp - 56] = P64[R1 + 78];
           P64[Sp - 48] = P64[R1 + 86];
           P64[Sp - 40] = P64[R1 + 94];
           P64[Sp - 32] = P64[R1 + 102];
           P64[Sp - 24] = P64[R1 + 110];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 88;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 96, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sKYM_info" {
     sat_sKYM_info:
         const sat_sKYM_entry;
         const 14;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+176;
 },
 sat_sKYL_entry() //  [R1, R2]
         { []
         }
     {offset
       cMp4: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cMp5; else goto cMp6;
       cMp5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cMp6: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 80] = P64[R1 + 47];
           P64[Sp - 72] = P64[R1 + 55];
           P64[Sp - 64] = P64[R1 + 63];
           P64[Sp - 56] = P64[R1 + 71];
           P64[Sp - 48] = P64[R1 + 79];
           P64[Sp - 40] = P64[R1 + 87];
           P64[Sp - 32] = P64[R1 + 95];
           P64[Sp - 24] = P64[R1 + 103];
           P64[Sp - 16] = P64[R1 + 111];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 80;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 88, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sKYL_info" {
     sat_sKYL_info:
         const sat_sKYL_entry;
         const 14;
         const 4294967304;
         const 4294967301;
         const SLKe_srt+168;
 },
 sat_sKYK_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cMpc: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cMpd; else goto cMpe;
       cMpd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cMpe: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 96] = P64[R1 + 45];
           P64[Sp - 88] = P64[R1 + 53];
           P64[Sp - 80] = P64[R1 + 61];
           P64[Sp - 72] = P64[R1 + 69];
           P64[Sp - 64] = P64[R1 + 77];
           P64[Sp - 56] = P64[R1 + 85];
           P64[Sp - 48] = P64[R1 + 93];
           P64[Sp - 40] = P64[R1 + 101];
           P64[Sp - 32] = P64[R1 + 109];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 96;
           call GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 104, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sKYK_info" {
     sat_sKYK_info:
         const sat_sKYK_entry;
         const 14;
         const 4294967304;
         const 12884901911;
         const SLKe_srt+160;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cMpg: // global
           Hp = Hp + 392;
           if (Hp > HpLim) (likely: False) goto cMpk; else goto cMpj;
       cMpk: // global
           HpAlloc = 392;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       cMpj: // global
           I64[Hp - 384] = sat_sKYM_info;
           P64[Hp - 376] = R2;
           P64[Hp - 368] = R3;
           P64[Hp - 360] = R4;
           P64[Hp - 352] = R5;
           P64[Hp - 344] = R6;
           _sKYB::P64 = P64[Sp];
           P64[Hp - 336] = _sKYB::P64;
           _sKYC::P64 = P64[Sp + 8];
           P64[Hp - 328] = _sKYC::P64;
           _sKYD::P64 = P64[Sp + 16];
           P64[Hp - 320] = _sKYD::P64;
           _sKYE::P64 = P64[Sp + 24];
           P64[Hp - 312] = _sKYE::P64;
           _sKYF::P64 = P64[Sp + 32];
           P64[Hp - 304] = _sKYF::P64;
           _sKYG::P64 = P64[Sp + 40];
           P64[Hp - 296] = _sKYG::P64;
           _sKYH::P64 = P64[Sp + 48];
           P64[Hp - 288] = _sKYH::P64;
           _sKYI::P64 = P64[Sp + 56];
           P64[Hp - 280] = _sKYI::P64;
           _sKYJ::P64 = P64[Sp + 64];
           P64[Hp - 272] = _sKYJ::P64;
           I64[Hp - 264] = sat_sKYL_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           P64[Hp - 240] = R4;
           P64[Hp - 232] = R5;
           P64[Hp - 224] = R6;
           P64[Hp - 216] = _sKYB::P64;
           P64[Hp - 208] = _sKYC::P64;
           P64[Hp - 200] = _sKYD::P64;
           P64[Hp - 192] = _sKYE::P64;
           P64[Hp - 184] = _sKYF::P64;
           P64[Hp - 176] = _sKYG::P64;
           P64[Hp - 168] = _sKYH::P64;
           P64[Hp - 160] = _sKYI::P64;
           P64[Hp - 152] = _sKYJ::P64;
           I64[Hp - 144] = sat_sKYK_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           P64[Hp - 112] = R5;
           P64[Hp - 104] = R6;
           P64[Hp - 96] = _sKYB::P64;
           P64[Hp - 88] = _sKYC::P64;
           P64[Hp - 80] = _sKYD::P64;
           P64[Hp - 72] = _sKYE::P64;
           P64[Hp - 64] = _sKYF::P64;
           P64[Hp - 56] = _sKYG::P64;
           P64[Hp - 48] = _sKYH::P64;
           P64[Hp - 40] = _sKYI::P64;
           P64[Hp - 32] = _sKYJ::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 141;
           P64[Hp - 8] = Hp - 263;
           P64[Hp] = Hp - 382;
           R1 = Hp - 23;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,,)_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,,)_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_entry;
         const 0;
         const 64424509454;
         const 60129542144;
         const SLKe_srt+160;
         const 14;
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.195792725 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_go2_info;
         const 0;
 },
 sat_sKYW_entry() //  [R1]
         { []
         }
     {offset
       cMqw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cMqx; else goto cMqy;
       cMqx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMqy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_go2_entry(R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKYW_info" {
     sat_sKYW_info:
         const sat_sKYW_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+192;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cMqD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cMqE; else goto cMqF;
       cMqE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cMqF: // global
           I64[Sp - 16] = block_cMqg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uMqU; else goto cMqh;
       uMqU: // global
           call _cMqg(R1) args: 0, res: 0, upd: 0;
       cMqh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_go2_entry;
         const 0;
         const 4402341478414;
         const 8589934607;
         const SLKe_srt+112;
 },
 _cMqg() //  [R1]
         { []
         }
     {offset
       cMqg: // global
           if (R1 & 7 == 1) goto cMqA; else goto cMqB;
       cMqA: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cMqB: // global
           I64[Sp - 8] = block_cMqm_info;
           _sKYR::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sKYR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uMqT; else goto cMqn;
       uMqT: // global
           call _cMqm(R1) args: 0, res: 0, upd: 0;
       cMqn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cMqg_info" {
     block_cMqg_info:
         const _cMqg;
         const 1;
         const 4402341478430;
         const SLKe_srt+112;
 },
 _cMqm() //  [R1]
         { []
         }
     {offset
       cMqm: // global
           _sKYO::P64 = P64[Sp + 16];
           _sKYR::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cMqM; else goto cMqO;
       cMqM: // global
           R2 = _sKYO::P64;
           R1 = _sKYR::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cMqO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cMqR; else goto cMqQ;
       cMqR: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cMqQ: // global
           I64[Hp - 48] = sat_sKYW_info;
           P64[Hp - 32] = _sKYO::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sKYR::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cMqm_info" {
     block_cMqm_info:
         const _cMqm;
         const 2;
         const 4294967326;
         const SLKe_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.22689488 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cMro: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2,
                                                                R1) args: 96, res: 0, upd: 8;
     }
 },
 sat_sKZE_entry() //  [R1]
         { []
         }
     {offset
       cMrG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMrH; else goto cMrI;
       cMrH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMrI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKZE_info" {
     sat_sKZE_info:
         const sat_sKZE_entry;
         const 2;
         const 18;
 },
 sat_sKZD_entry() //  [R1]
         { []
         }
     {offset
       cMrO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMrP; else goto cMrQ;
       cMrP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMrQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKZD_info" {
     sat_sKZD_info:
         const sat_sKZD_entry;
         const 2;
         const 18;
 },
 sat_sKZC_entry() //  [R1]
         { []
         }
     {offset
       cMrW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMrX; else goto cMrY;
       cMrX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMrY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKZC_info" {
     sat_sKZC_info:
         const sat_sKZC_entry;
         const 2;
         const 18;
 },
 sat_sKZB_entry() //  [R1]
         { []
         }
     {offset
       cMs4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMs5; else goto cMs6;
       cMs5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMs6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKZB_info" {
     sat_sKZB_info:
         const sat_sKZB_entry;
         const 2;
         const 18;
 },
 sat_sKZA_entry() //  [R1]
         { []
         }
     {offset
       cMsc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMsd; else goto cMse;
       cMsd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMse: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKZA_info" {
     sat_sKZA_info:
         const sat_sKZA_entry;
         const 2;
         const 18;
 },
 sat_sKZz_entry() //  [R1]
         { []
         }
     {offset
       cMsk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMsl; else goto cMsm;
       cMsl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMsm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKZz_info" {
     sat_sKZz_info:
         const sat_sKZz_entry;
         const 2;
         const 18;
 },
 sat_sKZy_entry() //  [R1]
         { []
         }
     {offset
       cMss: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMst; else goto cMsu;
       cMst: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMsu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKZy_info" {
     sat_sKZy_info:
         const sat_sKZy_entry;
         const 2;
         const 18;
 },
 sat_sKZx_entry() //  [R1]
         { []
         }
     {offset
       cMsA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMsB; else goto cMsC;
       cMsB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMsC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKZx_info" {
     sat_sKZx_info:
         const sat_sKZx_entry;
         const 2;
         const 18;
 },
 sat_sKZw_entry() //  [R1]
         { []
         }
     {offset
       cMsI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMsJ; else goto cMsK;
       cMsJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMsK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKZw_info" {
     sat_sKZw_info:
         const sat_sKZw_entry;
         const 2;
         const 18;
 },
 sat_sKZv_entry() //  [R1]
         { []
         }
     {offset
       cMsQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMsR; else goto cMsS;
       cMsR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMsS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKZv_info" {
     sat_sKZv_info:
         const sat_sKZv_entry;
         const 2;
         const 18;
 },
 sat_sKZu_entry() //  [R1]
         { []
         }
     {offset
       cMsY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMsZ; else goto cMt0;
       cMsZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMt0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKZu_info" {
     sat_sKZu_info:
         const sat_sKZu_entry;
         const 2;
         const 18;
 },
 sat_sKZt_entry() //  [R1]
         { []
         }
     {offset
       cMt6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMt7; else goto cMt8;
       cMt7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMt8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKZt_info" {
     sat_sKZt_info:
         const sat_sKZt_entry;
         const 2;
         const 18;
 },
 sat_sKZs_entry() //  [R1]
         { []
         }
     {offset
       cMte: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMtf; else goto cMtg;
       cMtf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMtg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKZs_info" {
     sat_sKZs_info:
         const sat_sKZs_entry;
         const 2;
         const 18;
 },
 sat_sKZT_entry() //  [R1]
         { []
         }
     {offset
       cMti: // global
           _sKZT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cMtj; else goto cMtk;
       cMtk: // global
           Hp = Hp + 752;
           if (Hp > HpLim) (likely: False) goto cMtm; else goto cMtl;
       cMtm: // global
           HpAlloc = 752;
           goto cMtj;
       cMtj: // global
           R1 = _sKZT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMtl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sKZT::P64;
           _sKYY::P64 = P64[_sKZT::P64 + 16];
           _sKYZ::P64 = P64[_sKZT::P64 + 24];
           _sKZ0::P64 = P64[_sKZT::P64 + 32];
           _sKZ1::P64 = P64[_sKZT::P64 + 40];
           _sKZ2::P64 = P64[_sKZT::P64 + 48];
           _sKZ3::P64 = P64[_sKZT::P64 + 56];
           _sKZ4::P64 = P64[_sKZT::P64 + 64];
           _sKZ5::P64 = P64[_sKZT::P64 + 72];
           _sKZ6::P64 = P64[_sKZT::P64 + 80];
           _sKZ7::P64 = P64[_sKZT::P64 + 88];
           _sKZ8::P64 = P64[_sKZT::P64 + 96];
           _sKZ9::P64 = P64[_sKZT::P64 + 104];
           _sKZa::P64 = P64[_sKZT::P64 + 112];
           _sKZd::P64 = P64[_sKZT::P64 + 120];
           _sKZf::P64 = P64[_sKZT::P64 + 128];
           _sKZg::P64 = P64[_sKZT::P64 + 136];
           _sKZh::P64 = P64[_sKZT::P64 + 144];
           _sKZi::P64 = P64[_sKZT::P64 + 152];
           _sKZj::P64 = P64[_sKZT::P64 + 160];
           _sKZk::P64 = P64[_sKZT::P64 + 168];
           _sKZl::P64 = P64[_sKZT::P64 + 176];
           _sKZm::P64 = P64[_sKZT::P64 + 184];
           _sKZn::P64 = P64[_sKZT::P64 + 192];
           _sKZo::P64 = P64[_sKZT::P64 + 200];
           _sKZp::P64 = P64[_sKZT::P64 + 208];
           _sKZq::P64 = P64[_sKZT::P64 + 216];
           _sKZr::P64 = P64[_sKZT::P64 + 224];
           I64[Hp - 744] = :_con_info;
           P64[Hp - 736] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 728] = _sKZd::P64;
           I64[Hp - 720] = sat_sKZE_info;
           P64[Hp - 704] = _sKZa::P64;
           P64[Hp - 696] = _sKZr::P64;
           I64[Hp - 688] = :_con_info;
           P64[Hp - 680] = Hp - 720;
           P64[Hp - 672] = GHC.Types.[]_closure+1;
           I64[Hp - 664] = sat_sKZD_info;
           P64[Hp - 648] = _sKZ9::P64;
           P64[Hp - 640] = _sKZq::P64;
           I64[Hp - 632] = :_con_info;
           P64[Hp - 624] = Hp - 664;
           P64[Hp - 616] = Hp - 686;
           I64[Hp - 608] = sat_sKZC_info;
           P64[Hp - 592] = _sKZ8::P64;
           P64[Hp - 584] = _sKZp::P64;
           I64[Hp - 576] = :_con_info;
           P64[Hp - 568] = Hp - 608;
           P64[Hp - 560] = Hp - 630;
           I64[Hp - 552] = sat_sKZB_info;
           P64[Hp - 536] = _sKZ7::P64;
           P64[Hp - 528] = _sKZo::P64;
           I64[Hp - 520] = :_con_info;
           P64[Hp - 512] = Hp - 552;
           P64[Hp - 504] = Hp - 574;
           I64[Hp - 496] = sat_sKZA_info;
           P64[Hp - 480] = _sKZ6::P64;
           P64[Hp - 472] = _sKZn::P64;
           I64[Hp - 464] = :_con_info;
           P64[Hp - 456] = Hp - 496;
           P64[Hp - 448] = Hp - 518;
           I64[Hp - 440] = sat_sKZz_info;
           P64[Hp - 424] = _sKZ5::P64;
           P64[Hp - 416] = _sKZm::P64;
           I64[Hp - 408] = :_con_info;
           P64[Hp - 400] = Hp - 440;
           P64[Hp - 392] = Hp - 462;
           I64[Hp - 384] = sat_sKZy_info;
           P64[Hp - 368] = _sKZ4::P64;
           P64[Hp - 360] = _sKZl::P64;
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = Hp - 384;
           P64[Hp - 336] = Hp - 406;
           I64[Hp - 328] = sat_sKZx_info;
           P64[Hp - 312] = _sKZ3::P64;
           P64[Hp - 304] = _sKZk::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = Hp - 350;
           I64[Hp - 272] = sat_sKZw_info;
           P64[Hp - 256] = _sKZ2::P64;
           P64[Hp - 248] = _sKZj::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sKZv_info;
           P64[Hp - 200] = _sKZ1::P64;
           P64[Hp - 192] = _sKZi::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sKZu_info;
           P64[Hp - 144] = _sKZ0::P64;
           P64[Hp - 136] = _sKZh::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sKZt_info;
           P64[Hp - 88] = _sKYZ::P64;
           P64[Hp - 80] = _sKZg::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sKZs_info;
           P64[Hp - 32] = _sKYY::P64;
           P64[Hp - 24] = _sKZf::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 742;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_go2_entry(R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sKZT_info" {
     sat_sKZT_info:
         const sat_sKZT_entry;
         const 27;
         const 4294967311;
         const SLKe_srt+192;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       cMtn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cMtp; else goto cMtq;
       cMtp: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 136, res: 0, upd: 8;
       cMtq: // global
           I64[Sp - 32] = block_cMrs_info;
           R1 = P64[Sp + 72];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 64] = R3;
           P64[Sp + 72] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uMtu; else goto cMrt;
       uMtu: // global
           call _cMrs(R1) args: 0, res: 0, upd: 0;
       cMrt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 68719476736;
         const SLKe_srt+192;
         const 16;
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_slow;
 },
 _cMrs() //  [R1]
         { []
         }
     {offset
       cMrs: // global
           Hp = Hp + 256;
           if (Hp > HpLim) (likely: False) goto cMtt; else goto cMts;
       cMtt: // global
           HpAlloc = 256;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cMts: // global
           _sKZf::P64 = P64[R1 + 7];
           _sKZg::P64 = P64[R1 + 15];
           _sKZh::P64 = P64[R1 + 23];
           _sKZi::P64 = P64[R1 + 31];
           _sKZj::P64 = P64[R1 + 39];
           _sKZk::P64 = P64[R1 + 47];
           _sKZl::P64 = P64[R1 + 55];
           _sKZm::P64 = P64[R1 + 63];
           _sKZn::P64 = P64[R1 + 71];
           _sKZo::P64 = P64[R1 + 79];
           _sKZp::P64 = P64[R1 + 87];
           _sKZq::P64 = P64[R1 + 95];
           _sKZr::P64 = P64[R1 + 103];
           I64[Hp - 248] = sat_sKZT_info;
           P64[Hp - 232] = P64[Sp + 104];
           P64[Hp - 224] = P64[Sp + 96];
           P64[Hp - 216] = P64[Sp + 8];
           P64[Hp - 208] = P64[Sp + 16];
           P64[Hp - 200] = P64[Sp + 24];
           P64[Hp - 192] = P64[Sp + 32];
           P64[Hp - 184] = P64[Sp + 40];
           P64[Hp - 176] = P64[Sp + 48];
           P64[Hp - 168] = P64[Sp + 56];
           P64[Hp - 160] = P64[Sp + 64];
           P64[Hp - 152] = P64[Sp + 72];
           P64[Hp - 144] = P64[Sp + 80];
           P64[Hp - 136] = P64[Sp + 88];
           P64[Hp - 128] = P64[Sp + 112];
           P64[Hp - 120] = _sKZf::P64;
           P64[Hp - 112] = _sKZg::P64;
           P64[Hp - 104] = _sKZh::P64;
           P64[Hp - 96] = _sKZi::P64;
           P64[Hp - 88] = _sKZj::P64;
           P64[Hp - 80] = _sKZk::P64;
           P64[Hp - 72] = _sKZl::P64;
           P64[Hp - 64] = _sKZm::P64;
           P64[Hp - 56] = _sKZn::P64;
           P64[Hp - 48] = _sKZo::P64;
           P64[Hp - 40] = _sKZp::P64;
           P64[Hp - 32] = _sKZq::P64;
           P64[Hp - 24] = _sKZr::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 248;
           R1 = Hp - 14;
           Sp = Sp + 120;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cMrs_info" {
     block_cMrs_info:
         const _cMrs;
         const 14;
         const 4294967326;
         const SLKe_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.284099401 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cMwF: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2,
                                                           R1) args: 80, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cMwJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cMwK; else goto cMwL;
       cMwK: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       cMwL: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = P64[Sp + 32];
           P64[Sp + 24] = P64[Sp + 40];
           P64[Sp + 32] = P64[Sp + 48];
           P64[Sp + 40] = P64[Sp + 56];
           P64[Sp + 48] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp + 56] = P64[Sp + 64];
           P64[Sp + 64] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 96, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 60129542144;
         const SLKe_srt+200;
         const 14;
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.296707515 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cMx6: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2,
                                                               R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_sL0n_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cMxf: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cMxg; else goto cMxh;
       cMxg: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cMxh: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 88] = P64[R1 + 46];
           P64[Sp - 80] = P64[R1 + 54];
           P64[Sp - 72] = P64[R1 + 62];
           P64[Sp - 64] = P64[R1 + 70];
           P64[Sp - 56] = P64[R1 + 78];
           P64[Sp - 48] = P64[R1 + 86];
           P64[Sp - 40] = P64[R1 + 94];
           P64[Sp - 32] = P64[R1 + 102];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 88;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 96, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL0n_info" {
     sat_sL0n_info:
         const sat_sL0n_entry;
         const 13;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+200;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       cMxi: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cMxm; else goto cMxl;
       cMxm: // global
           HpAlloc = 112;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       cMxl: // global
           I64[Hp - 104] = sat_sL0n_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           P64[Hp - 64] = R6;
           P64[Hp - 56] = P64[Sp];
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           R4 = P64[Sp + 72];
           R3 = P64[Sp + 64];
           R2 = Hp - 102;
           Sp = Sp + 80;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 64424509440;
         const SLKe_srt+200;
         const 15;
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.313554794 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       cMxQ: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_sL0D_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cMxZ: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cMy0; else goto cMy1;
       cMy0: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cMy1: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 80] = P64[R1 + 46];
           P64[Sp - 72] = P64[R1 + 54];
           P64[Sp - 64] = P64[R1 + 62];
           P64[Sp - 56] = P64[R1 + 70];
           P64[Sp - 48] = P64[R1 + 78];
           P64[Sp - 40] = P64[R1 + 86];
           P64[Sp - 32] = P64[R1 + 94];
           P64[Sp - 24] = P64[R1 + 102];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 80;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 88, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL0D_info" {
     sat_sL0D_info:
         const sat_sL0D_entry;
         const 13;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+216;
 },
 sat_sL0C_entry() //  [R1, R2]
         { []
         }
     {offset
       cMy7: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cMy8; else goto cMy9;
       cMy8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cMy9: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 72] = P64[R1 + 47];
           P64[Sp - 64] = P64[R1 + 55];
           P64[Sp - 56] = P64[R1 + 63];
           P64[Sp - 48] = P64[R1 + 71];
           P64[Sp - 40] = P64[R1 + 79];
           P64[Sp - 32] = P64[R1 + 87];
           P64[Sp - 24] = P64[R1 + 95];
           P64[Sp - 16] = P64[R1 + 103];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 72;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 80, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL0C_info" {
     sat_sL0C_info:
         const sat_sL0C_entry;
         const 13;
         const 4294967304;
         const 4294967301;
         const SLKe_srt+208;
 },
 sat_sL0B_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cMyf: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cMyg; else goto cMyh;
       cMyg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cMyh: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 88] = P64[R1 + 45];
           P64[Sp - 80] = P64[R1 + 53];
           P64[Sp - 72] = P64[R1 + 61];
           P64[Sp - 64] = P64[R1 + 69];
           P64[Sp - 56] = P64[R1 + 77];
           P64[Sp - 48] = P64[R1 + 85];
           P64[Sp - 40] = P64[R1 + 93];
           P64[Sp - 32] = P64[R1 + 101];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 88;
           call GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 96, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL0B_info" {
     sat_sL0B_info:
         const sat_sL0B_entry;
         const 13;
         const 4294967304;
         const 12884901911;
         const SLKe_srt+200;
 },
 GHC.Show.$fShow(,,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cMyj: // global
           Hp = Hp + 368;
           if (Hp > HpLim) (likely: False) goto cMyn; else goto cMym;
       cMyn: // global
           HpAlloc = 368;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       cMym: // global
           I64[Hp - 360] = sat_sL0D_info;
           P64[Hp - 352] = R2;
           P64[Hp - 344] = R3;
           P64[Hp - 336] = R4;
           P64[Hp - 328] = R5;
           P64[Hp - 320] = R6;
           _sL0t::P64 = P64[Sp];
           P64[Hp - 312] = _sL0t::P64;
           _sL0u::P64 = P64[Sp + 8];
           P64[Hp - 304] = _sL0u::P64;
           _sL0v::P64 = P64[Sp + 16];
           P64[Hp - 296] = _sL0v::P64;
           _sL0w::P64 = P64[Sp + 24];
           P64[Hp - 288] = _sL0w::P64;
           _sL0x::P64 = P64[Sp + 32];
           P64[Hp - 280] = _sL0x::P64;
           _sL0y::P64 = P64[Sp + 40];
           P64[Hp - 272] = _sL0y::P64;
           _sL0z::P64 = P64[Sp + 48];
           P64[Hp - 264] = _sL0z::P64;
           _sL0A::P64 = P64[Sp + 56];
           P64[Hp - 256] = _sL0A::P64;
           I64[Hp - 248] = sat_sL0C_info;
           P64[Hp - 240] = R2;
           P64[Hp - 232] = R3;
           P64[Hp - 224] = R4;
           P64[Hp - 216] = R5;
           P64[Hp - 208] = R6;
           P64[Hp - 200] = _sL0t::P64;
           P64[Hp - 192] = _sL0u::P64;
           P64[Hp - 184] = _sL0v::P64;
           P64[Hp - 176] = _sL0w::P64;
           P64[Hp - 168] = _sL0x::P64;
           P64[Hp - 160] = _sL0y::P64;
           P64[Hp - 152] = _sL0z::P64;
           P64[Hp - 144] = _sL0A::P64;
           I64[Hp - 136] = sat_sL0B_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           P64[Hp - 104] = R5;
           P64[Hp - 96] = R6;
           P64[Hp - 88] = _sL0t::P64;
           P64[Hp - 80] = _sL0u::P64;
           P64[Hp - 72] = _sL0v::P64;
           P64[Hp - 64] = _sL0w::P64;
           P64[Hp - 56] = _sL0x::P64;
           P64[Hp - 48] = _sL0y::P64;
           P64[Hp - 40] = _sL0z::P64;
           P64[Hp - 32] = _sL0A::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 133;
           P64[Hp - 8] = Hp - 247;
           P64[Hp] = Hp - 358;
           R1 = Hp - 23;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,,)_info" {
     GHC.Show.$fShow(,,,,,,,,,,,,)_info:
         const GHC.Show.$fShow(,,,,,,,,,,,,)_entry;
         const 0;
         const 64424509454;
         const 55834574848;
         const SLKe_srt+200;
         const 13;
         const GHC.Show.$fShow(,,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.327921581 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,)_go2_info;
         const 0;
 },
 sat_sL0N_entry() //  [R1]
         { []
         }
     {offset
       cMzw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cMzx; else goto cMzy;
       cMzx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMzy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,)_go2_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL0N_info" {
     sat_sL0N_info:
         const sat_sL0N_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+232;
 },
 GHC.Show.$fShow(,,,,,,,,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cMzD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cMzE; else goto cMzF;
       cMzE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cMzF: // global
           I64[Sp - 16] = block_cMzg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uMzU; else goto cMzh;
       uMzU: // global
           call _cMzg(R1) args: 0, res: 0, upd: 0;
       cMzh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,,,,,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,,,,,,,,)_go2_entry;
         const 0;
         const 140741783322638;
         const 8589934607;
         const SLKe_srt+112;
 },
 _cMzg() //  [R1]
         { []
         }
     {offset
       cMzg: // global
           if (R1 & 7 == 1) goto cMzA; else goto cMzB;
       cMzA: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cMzB: // global
           I64[Sp - 8] = block_cMzm_info;
           _sL0I::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sL0I::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uMzT; else goto cMzn;
       uMzT: // global
           call _cMzm(R1) args: 0, res: 0, upd: 0;
       cMzn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cMzg_info" {
     block_cMzg_info:
         const _cMzg;
         const 1;
         const 140741783322654;
         const SLKe_srt+112;
 },
 _cMzm() //  [R1]
         { []
         }
     {offset
       cMzm: // global
           _sL0F::P64 = P64[Sp + 16];
           _sL0I::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cMzM; else goto cMzO;
       cMzM: // global
           R2 = _sL0F::P64;
           R1 = _sL0I::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cMzO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cMzR; else goto cMzQ;
       cMzR: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cMzQ: // global
           I64[Hp - 48] = sat_sL0N_info;
           P64[Hp - 32] = _sL0F::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sL0I::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cMzm_info" {
     block_cMzm_info:
         const _cMzm;
         const 2;
         const 4294967326;
         const SLKe_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.35071584 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cMAo: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2,
                                                               R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_sL1s_entry() //  [R1]
         { []
         }
     {offset
       cMAG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMAH; else goto cMAI;
       cMAH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMAI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL1s_info" {
     sat_sL1s_info:
         const sat_sL1s_entry;
         const 2;
         const 18;
 },
 sat_sL1r_entry() //  [R1]
         { []
         }
     {offset
       cMAO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMAP; else goto cMAQ;
       cMAP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMAQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL1r_info" {
     sat_sL1r_info:
         const sat_sL1r_entry;
         const 2;
         const 18;
 },
 sat_sL1q_entry() //  [R1]
         { []
         }
     {offset
       cMAW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMAX; else goto cMAY;
       cMAX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMAY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL1q_info" {
     sat_sL1q_info:
         const sat_sL1q_entry;
         const 2;
         const 18;
 },
 sat_sL1p_entry() //  [R1]
         { []
         }
     {offset
       cMB4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMB5; else goto cMB6;
       cMB5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMB6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL1p_info" {
     sat_sL1p_info:
         const sat_sL1p_entry;
         const 2;
         const 18;
 },
 sat_sL1o_entry() //  [R1]
         { []
         }
     {offset
       cMBc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMBd; else goto cMBe;
       cMBd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMBe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL1o_info" {
     sat_sL1o_info:
         const sat_sL1o_entry;
         const 2;
         const 18;
 },
 sat_sL1n_entry() //  [R1]
         { []
         }
     {offset
       cMBk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMBl; else goto cMBm;
       cMBl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMBm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL1n_info" {
     sat_sL1n_info:
         const sat_sL1n_entry;
         const 2;
         const 18;
 },
 sat_sL1m_entry() //  [R1]
         { []
         }
     {offset
       cMBs: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMBt; else goto cMBu;
       cMBt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMBu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL1m_info" {
     sat_sL1m_info:
         const sat_sL1m_entry;
         const 2;
         const 18;
 },
 sat_sL1l_entry() //  [R1]
         { []
         }
     {offset
       cMBA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMBB; else goto cMBC;
       cMBB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMBC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL1l_info" {
     sat_sL1l_info:
         const sat_sL1l_entry;
         const 2;
         const 18;
 },
 sat_sL1k_entry() //  [R1]
         { []
         }
     {offset
       cMBI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMBJ; else goto cMBK;
       cMBJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMBK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL1k_info" {
     sat_sL1k_info:
         const sat_sL1k_entry;
         const 2;
         const 18;
 },
 sat_sL1j_entry() //  [R1]
         { []
         }
     {offset
       cMBQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMBR; else goto cMBS;
       cMBR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMBS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL1j_info" {
     sat_sL1j_info:
         const sat_sL1j_entry;
         const 2;
         const 18;
 },
 sat_sL1i_entry() //  [R1]
         { []
         }
     {offset
       cMBY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMBZ; else goto cMC0;
       cMBZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMC0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL1i_info" {
     sat_sL1i_info:
         const sat_sL1i_entry;
         const 2;
         const 18;
 },
 sat_sL1h_entry() //  [R1]
         { []
         }
     {offset
       cMC6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMC7; else goto cMC8;
       cMC7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMC8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL1h_info" {
     sat_sL1h_info:
         const sat_sL1h_entry;
         const 2;
         const 18;
 },
 sat_sL1G_entry() //  [R1]
         { []
         }
     {offset
       cMCa: // global
           _sL1G::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cMCb; else goto cMCc;
       cMCc: // global
           Hp = Hp + 696;
           if (Hp > HpLim) (likely: False) goto cMCe; else goto cMCd;
       cMCe: // global
           HpAlloc = 696;
           goto cMCb;
       cMCb: // global
           R1 = _sL1G::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMCd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sL1G::P64;
           _sL0P::P64 = P64[_sL1G::P64 + 16];
           _sL0Q::P64 = P64[_sL1G::P64 + 24];
           _sL0R::P64 = P64[_sL1G::P64 + 32];
           _sL0S::P64 = P64[_sL1G::P64 + 40];
           _sL0T::P64 = P64[_sL1G::P64 + 48];
           _sL0U::P64 = P64[_sL1G::P64 + 56];
           _sL0V::P64 = P64[_sL1G::P64 + 64];
           _sL0W::P64 = P64[_sL1G::P64 + 72];
           _sL0X::P64 = P64[_sL1G::P64 + 80];
           _sL0Y::P64 = P64[_sL1G::P64 + 88];
           _sL0Z::P64 = P64[_sL1G::P64 + 96];
           _sL10::P64 = P64[_sL1G::P64 + 104];
           _sL13::P64 = P64[_sL1G::P64 + 112];
           _sL15::P64 = P64[_sL1G::P64 + 120];
           _sL16::P64 = P64[_sL1G::P64 + 128];
           _sL17::P64 = P64[_sL1G::P64 + 136];
           _sL18::P64 = P64[_sL1G::P64 + 144];
           _sL19::P64 = P64[_sL1G::P64 + 152];
           _sL1a::P64 = P64[_sL1G::P64 + 160];
           _sL1b::P64 = P64[_sL1G::P64 + 168];
           _sL1c::P64 = P64[_sL1G::P64 + 176];
           _sL1d::P64 = P64[_sL1G::P64 + 184];
           _sL1e::P64 = P64[_sL1G::P64 + 192];
           _sL1f::P64 = P64[_sL1G::P64 + 200];
           _sL1g::P64 = P64[_sL1G::P64 + 208];
           I64[Hp - 688] = :_con_info;
           P64[Hp - 680] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 672] = _sL13::P64;
           I64[Hp - 664] = sat_sL1s_info;
           P64[Hp - 648] = _sL10::P64;
           P64[Hp - 640] = _sL1g::P64;
           I64[Hp - 632] = :_con_info;
           P64[Hp - 624] = Hp - 664;
           P64[Hp - 616] = GHC.Types.[]_closure+1;
           I64[Hp - 608] = sat_sL1r_info;
           P64[Hp - 592] = _sL0Z::P64;
           P64[Hp - 584] = _sL1f::P64;
           I64[Hp - 576] = :_con_info;
           P64[Hp - 568] = Hp - 608;
           P64[Hp - 560] = Hp - 630;
           I64[Hp - 552] = sat_sL1q_info;
           P64[Hp - 536] = _sL0Y::P64;
           P64[Hp - 528] = _sL1e::P64;
           I64[Hp - 520] = :_con_info;
           P64[Hp - 512] = Hp - 552;
           P64[Hp - 504] = Hp - 574;
           I64[Hp - 496] = sat_sL1p_info;
           P64[Hp - 480] = _sL0X::P64;
           P64[Hp - 472] = _sL1d::P64;
           I64[Hp - 464] = :_con_info;
           P64[Hp - 456] = Hp - 496;
           P64[Hp - 448] = Hp - 518;
           I64[Hp - 440] = sat_sL1o_info;
           P64[Hp - 424] = _sL0W::P64;
           P64[Hp - 416] = _sL1c::P64;
           I64[Hp - 408] = :_con_info;
           P64[Hp - 400] = Hp - 440;
           P64[Hp - 392] = Hp - 462;
           I64[Hp - 384] = sat_sL1n_info;
           P64[Hp - 368] = _sL0V::P64;
           P64[Hp - 360] = _sL1b::P64;
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = Hp - 384;
           P64[Hp - 336] = Hp - 406;
           I64[Hp - 328] = sat_sL1m_info;
           P64[Hp - 312] = _sL0U::P64;
           P64[Hp - 304] = _sL1a::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = Hp - 350;
           I64[Hp - 272] = sat_sL1l_info;
           P64[Hp - 256] = _sL0T::P64;
           P64[Hp - 248] = _sL19::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sL1k_info;
           P64[Hp - 200] = _sL0S::P64;
           P64[Hp - 192] = _sL18::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sL1j_info;
           P64[Hp - 144] = _sL0R::P64;
           P64[Hp - 136] = _sL17::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sL1i_info;
           P64[Hp - 88] = _sL0Q::P64;
           P64[Hp - 80] = _sL16::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sL1h_info;
           P64[Hp - 32] = _sL0P::P64;
           P64[Hp - 24] = _sL15::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 686;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,)_go2_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL1G_info" {
     sat_sL1G_info:
         const sat_sL1G_entry;
         const 25;
         const 4294967311;
         const SLKe_srt+232;
 },
 GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       cMCf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cMCh; else goto cMCi;
       cMCh: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       cMCi: // global
           I64[Sp - 32] = block_cMAs_info;
           R1 = P64[Sp + 64];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 56] = R3;
           P64[Sp + 64] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uMCm; else goto cMAt;
       uMCm: // global
           call _cMAs(R1) args: 0, res: 0, upd: 0;
       cMAt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 64424509440;
         const SLKe_srt+232;
         const 15;
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_slow;
 },
 _cMAs() //  [R1]
         { []
         }
     {offset
       cMAs: // global
           Hp = Hp + 240;
           if (Hp > HpLim) (likely: False) goto cMCl; else goto cMCk;
       cMCl: // global
           HpAlloc = 240;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cMCk: // global
           _sL15::P64 = P64[R1 + 7];
           _sL16::P64 = P64[R1 + 15];
           _sL17::P64 = P64[R1 + 23];
           _sL18::P64 = P64[R1 + 31];
           _sL19::P64 = P64[R1 + 39];
           _sL1a::P64 = P64[R1 + 47];
           _sL1b::P64 = P64[R1 + 55];
           _sL1c::P64 = P64[R1 + 63];
           _sL1d::P64 = P64[R1 + 71];
           _sL1e::P64 = P64[R1 + 79];
           _sL1f::P64 = P64[R1 + 87];
           _sL1g::P64 = P64[R1 + 95];
           I64[Hp - 232] = sat_sL1G_info;
           P64[Hp - 216] = P64[Sp + 96];
           P64[Hp - 208] = P64[Sp + 88];
           P64[Hp - 200] = P64[Sp + 8];
           P64[Hp - 192] = P64[Sp + 16];
           P64[Hp - 184] = P64[Sp + 24];
           P64[Hp - 176] = P64[Sp + 32];
           P64[Hp - 168] = P64[Sp + 40];
           P64[Hp - 160] = P64[Sp + 48];
           P64[Hp - 152] = P64[Sp + 56];
           P64[Hp - 144] = P64[Sp + 64];
           P64[Hp - 136] = P64[Sp + 72];
           P64[Hp - 128] = P64[Sp + 80];
           P64[Hp - 120] = P64[Sp + 104];
           P64[Hp - 112] = _sL15::P64;
           P64[Hp - 104] = _sL16::P64;
           P64[Hp - 96] = _sL17::P64;
           P64[Hp - 88] = _sL18::P64;
           P64[Hp - 80] = _sL19::P64;
           P64[Hp - 72] = _sL1a::P64;
           P64[Hp - 64] = _sL1b::P64;
           P64[Hp - 56] = _sL1c::P64;
           P64[Hp - 48] = _sL1d::P64;
           P64[Hp - 40] = _sL1e::P64;
           P64[Hp - 32] = _sL1f::P64;
           P64[Hp - 24] = _sL1g::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 232;
           R1 = Hp - 14;
           Sp = Sp + 112;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cMAs_info" {
     block_cMAs_info:
         const _cMAs;
         const 13;
         const 4294967326;
         const SLKe_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.403930843 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cMFk: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 72, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cMFo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cMFp; else goto cMFq;
       cMFp: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       cMFq: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = P64[Sp + 32];
           P64[Sp + 24] = P64[Sp + 40];
           P64[Sp + 32] = P64[Sp + 48];
           P64[Sp + 40] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp + 48] = P64[Sp + 56];
           P64[Sp + 56] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 88, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 55834574848;
         const SLKe_srt+240;
         const 13;
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.411341907 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cMFK: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_sL28_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cMFT: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cMFU; else goto cMFV;
       cMFU: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cMFV: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 80] = P64[R1 + 46];
           P64[Sp - 72] = P64[R1 + 54];
           P64[Sp - 64] = P64[R1 + 62];
           P64[Sp - 56] = P64[R1 + 70];
           P64[Sp - 48] = P64[R1 + 78];
           P64[Sp - 40] = P64[R1 + 86];
           P64[Sp - 32] = P64[R1 + 94];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 80;
           call GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 88, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL28_info" {
     sat_sL28_info:
         const sat_sL28_entry;
         const 12;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+240;
 },
 GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       cMFW: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cMG0; else goto cMFZ;
       cMG0: // global
           HpAlloc = 104;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       cMFZ: // global
           I64[Hp - 96] = sat_sL28_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           P64[Hp - 56] = R6;
           P64[Hp - 48] = P64[Sp];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           R4 = P64[Sp + 64];
           R3 = P64[Sp + 56];
           R2 = Hp - 94;
           Sp = Sp + 72;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 60129542144;
         const SLKe_srt+240;
         const 14;
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.423266231 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,,,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       cMGs: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,,)_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_sL2n_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cMGB: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cMGC; else goto cMGD;
       cMGC: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cMGD: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 72] = P64[R1 + 46];
           P64[Sp - 64] = P64[R1 + 54];
           P64[Sp - 56] = P64[R1 + 62];
           P64[Sp - 48] = P64[R1 + 70];
           P64[Sp - 40] = P64[R1 + 78];
           P64[Sp - 32] = P64[R1 + 86];
           P64[Sp - 24] = P64[R1 + 94];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 72;
           call GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 80, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL2n_info" {
     sat_sL2n_info:
         const sat_sL2n_entry;
         const 12;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+256;
 },
 sat_sL2m_entry() //  [R1, R2]
         { []
         }
     {offset
       cMGJ: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cMGK; else goto cMGL;
       cMGK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cMGL: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 64] = P64[R1 + 47];
           P64[Sp - 56] = P64[R1 + 55];
           P64[Sp - 48] = P64[R1 + 63];
           P64[Sp - 40] = P64[R1 + 71];
           P64[Sp - 32] = P64[R1 + 79];
           P64[Sp - 24] = P64[R1 + 87];
           P64[Sp - 16] = P64[R1 + 95];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 64;
           call GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 72, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL2m_info" {
     sat_sL2m_info:
         const sat_sL2m_entry;
         const 12;
         const 4294967304;
         const 4294967301;
         const SLKe_srt+248;
 },
 sat_sL2l_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cMGR: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cMGS; else goto cMGT;
       cMGS: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cMGT: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 80] = P64[R1 + 45];
           P64[Sp - 72] = P64[R1 + 53];
           P64[Sp - 64] = P64[R1 + 61];
           P64[Sp - 56] = P64[R1 + 69];
           P64[Sp - 48] = P64[R1 + 77];
           P64[Sp - 40] = P64[R1 + 85];
           P64[Sp - 32] = P64[R1 + 93];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 80;
           call GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 88, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL2l_info" {
     sat_sL2l_info:
         const sat_sL2l_entry;
         const 12;
         const 4294967304;
         const 12884901911;
         const SLKe_srt+240;
 },
 GHC.Show.$fShow(,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cMGV: // global
           Hp = Hp + 344;
           if (Hp > HpLim) (likely: False) goto cMGZ; else goto cMGY;
       cMGZ: // global
           HpAlloc = 344;
           R1 = GHC.Show.$fShow(,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       cMGY: // global
           I64[Hp - 336] = sat_sL2n_info;
           P64[Hp - 328] = R2;
           P64[Hp - 320] = R3;
           P64[Hp - 312] = R4;
           P64[Hp - 304] = R5;
           P64[Hp - 296] = R6;
           _sL2e::P64 = P64[Sp];
           P64[Hp - 288] = _sL2e::P64;
           _sL2f::P64 = P64[Sp + 8];
           P64[Hp - 280] = _sL2f::P64;
           _sL2g::P64 = P64[Sp + 16];
           P64[Hp - 272] = _sL2g::P64;
           _sL2h::P64 = P64[Sp + 24];
           P64[Hp - 264] = _sL2h::P64;
           _sL2i::P64 = P64[Sp + 32];
           P64[Hp - 256] = _sL2i::P64;
           _sL2j::P64 = P64[Sp + 40];
           P64[Hp - 248] = _sL2j::P64;
           _sL2k::P64 = P64[Sp + 48];
           P64[Hp - 240] = _sL2k::P64;
           I64[Hp - 232] = sat_sL2m_info;
           P64[Hp - 224] = R2;
           P64[Hp - 216] = R3;
           P64[Hp - 208] = R4;
           P64[Hp - 200] = R5;
           P64[Hp - 192] = R6;
           P64[Hp - 184] = _sL2e::P64;
           P64[Hp - 176] = _sL2f::P64;
           P64[Hp - 168] = _sL2g::P64;
           P64[Hp - 160] = _sL2h::P64;
           P64[Hp - 152] = _sL2i::P64;
           P64[Hp - 144] = _sL2j::P64;
           P64[Hp - 136] = _sL2k::P64;
           I64[Hp - 128] = sat_sL2l_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           P64[Hp - 88] = R6;
           P64[Hp - 80] = _sL2e::P64;
           P64[Hp - 72] = _sL2f::P64;
           P64[Hp - 64] = _sL2g::P64;
           P64[Hp - 56] = _sL2h::P64;
           P64[Hp - 48] = _sL2i::P64;
           P64[Hp - 40] = _sL2j::P64;
           P64[Hp - 32] = _sL2k::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 125;
           P64[Hp - 8] = Hp - 231;
           P64[Hp] = Hp - 334;
           R1 = Hp - 23;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,,)_info" {
     GHC.Show.$fShow(,,,,,,,,,,,)_info:
         const GHC.Show.$fShow(,,,,,,,,,,,)_entry;
         const 0;
         const 64424509454;
         const 51539607552;
         const SLKe_srt+240;
         const 12;
         const GHC.Show.$fShow(,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.437863694 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,,,,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,,,,,,,)_go2_info;
         const 0;
 },
 sat_sL2x_entry() //  [R1]
         { []
         }
     {offset
       cMI5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cMI6; else goto cMI7;
       cMI6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMI7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,)_go2_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL2x_info" {
     sat_sL2x_info:
         const sat_sL2x_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+272;
 },
 GHC.Show.$fShow(,,,,,,,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cMIc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cMId; else goto cMIe;
       cMId: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,,,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cMIe: // global
           I64[Sp - 16] = block_cMHP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uMIt; else goto cMHQ;
       uMIt: // global
           call _cMHP(R1) args: 0, res: 0, upd: 0;
       cMHQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,,,,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,,,,,,,)_go2_entry;
         const 0;
         const 4503603922337806;
         const 8589934607;
         const SLKe_srt+112;
 },
 _cMHP() //  [R1]
         { []
         }
     {offset
       cMHP: // global
           if (R1 & 7 == 1) goto cMI9; else goto cMIa;
       cMI9: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cMIa: // global
           I64[Sp - 8] = block_cMHV_info;
           _sL2s::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sL2s::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uMIs; else goto cMHW;
       uMIs: // global
           call _cMHV(R1) args: 0, res: 0, upd: 0;
       cMHW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cMHP_info" {
     block_cMHP_info:
         const _cMHP;
         const 1;
         const 4503603922337822;
         const SLKe_srt+112;
 },
 _cMHV() //  [R1]
         { []
         }
     {offset
       cMHV: // global
           _sL2p::P64 = P64[Sp + 16];
           _sL2s::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cMIl; else goto cMIn;
       cMIl: // global
           R2 = _sL2p::P64;
           R1 = _sL2s::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cMIn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cMIq; else goto cMIp;
       cMIq: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cMIp: // global
           I64[Hp - 48] = sat_sL2x_info;
           P64[Hp - 32] = _sL2p::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sL2s::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cMHV_info" {
     block_cMHV_info:
         const _cMHV;
         const 2;
         const 4294967326;
         const SLKe_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.456124707 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cMIX: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_sL39_entry() //  [R1]
         { []
         }
     {offset
       cMJf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMJg; else goto cMJh;
       cMJg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMJh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL39_info" {
     sat_sL39_info:
         const sat_sL39_entry;
         const 2;
         const 18;
 },
 sat_sL38_entry() //  [R1]
         { []
         }
     {offset
       cMJn: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMJo; else goto cMJp;
       cMJo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMJp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL38_info" {
     sat_sL38_info:
         const sat_sL38_entry;
         const 2;
         const 18;
 },
 sat_sL37_entry() //  [R1]
         { []
         }
     {offset
       cMJv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMJw; else goto cMJx;
       cMJw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMJx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL37_info" {
     sat_sL37_info:
         const sat_sL37_entry;
         const 2;
         const 18;
 },
 sat_sL36_entry() //  [R1]
         { []
         }
     {offset
       cMJD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMJE; else goto cMJF;
       cMJE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMJF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL36_info" {
     sat_sL36_info:
         const sat_sL36_entry;
         const 2;
         const 18;
 },
 sat_sL35_entry() //  [R1]
         { []
         }
     {offset
       cMJL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMJM; else goto cMJN;
       cMJM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMJN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL35_info" {
     sat_sL35_info:
         const sat_sL35_entry;
         const 2;
         const 18;
 },
 sat_sL34_entry() //  [R1]
         { []
         }
     {offset
       cMJT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMJU; else goto cMJV;
       cMJU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMJV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL34_info" {
     sat_sL34_info:
         const sat_sL34_entry;
         const 2;
         const 18;
 },
 sat_sL33_entry() //  [R1]
         { []
         }
     {offset
       cMK1: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMK2; else goto cMK3;
       cMK2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMK3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL33_info" {
     sat_sL33_info:
         const sat_sL33_entry;
         const 2;
         const 18;
 },
 sat_sL32_entry() //  [R1]
         { []
         }
     {offset
       cMK9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMKa; else goto cMKb;
       cMKa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMKb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL32_info" {
     sat_sL32_info:
         const sat_sL32_entry;
         const 2;
         const 18;
 },
 sat_sL31_entry() //  [R1]
         { []
         }
     {offset
       cMKh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMKi; else goto cMKj;
       cMKi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMKj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL31_info" {
     sat_sL31_info:
         const sat_sL31_entry;
         const 2;
         const 18;
 },
 sat_sL30_entry() //  [R1]
         { []
         }
     {offset
       cMKp: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMKq; else goto cMKr;
       cMKq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMKr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL30_info" {
     sat_sL30_info:
         const sat_sL30_entry;
         const 2;
         const 18;
 },
 sat_sL2Z_entry() //  [R1]
         { []
         }
     {offset
       cMKx: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMKy; else goto cMKz;
       cMKy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMKz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL2Z_info" {
     sat_sL2Z_info:
         const sat_sL2Z_entry;
         const 2;
         const 18;
 },
 sat_sL3m_entry() //  [R1]
         { []
         }
     {offset
       cMKB: // global
           _sL3m::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cMKC; else goto cMKD;
       cMKD: // global
           Hp = Hp + 640;
           if (Hp > HpLim) (likely: False) goto cMKF; else goto cMKE;
       cMKF: // global
           HpAlloc = 640;
           goto cMKC;
       cMKC: // global
           R1 = _sL3m::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMKE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sL3m::P64;
           _sL2z::P64 = P64[_sL3m::P64 + 16];
           _sL2A::P64 = P64[_sL3m::P64 + 24];
           _sL2B::P64 = P64[_sL3m::P64 + 32];
           _sL2C::P64 = P64[_sL3m::P64 + 40];
           _sL2D::P64 = P64[_sL3m::P64 + 48];
           _sL2E::P64 = P64[_sL3m::P64 + 56];
           _sL2F::P64 = P64[_sL3m::P64 + 64];
           _sL2G::P64 = P64[_sL3m::P64 + 72];
           _sL2H::P64 = P64[_sL3m::P64 + 80];
           _sL2I::P64 = P64[_sL3m::P64 + 88];
           _sL2J::P64 = P64[_sL3m::P64 + 96];
           _sL2M::P64 = P64[_sL3m::P64 + 104];
           _sL2O::P64 = P64[_sL3m::P64 + 112];
           _sL2P::P64 = P64[_sL3m::P64 + 120];
           _sL2Q::P64 = P64[_sL3m::P64 + 128];
           _sL2R::P64 = P64[_sL3m::P64 + 136];
           _sL2S::P64 = P64[_sL3m::P64 + 144];
           _sL2T::P64 = P64[_sL3m::P64 + 152];
           _sL2U::P64 = P64[_sL3m::P64 + 160];
           _sL2V::P64 = P64[_sL3m::P64 + 168];
           _sL2W::P64 = P64[_sL3m::P64 + 176];
           _sL2X::P64 = P64[_sL3m::P64 + 184];
           _sL2Y::P64 = P64[_sL3m::P64 + 192];
           I64[Hp - 632] = :_con_info;
           P64[Hp - 624] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 616] = _sL2M::P64;
           I64[Hp - 608] = sat_sL39_info;
           P64[Hp - 592] = _sL2J::P64;
           P64[Hp - 584] = _sL2Y::P64;
           I64[Hp - 576] = :_con_info;
           P64[Hp - 568] = Hp - 608;
           P64[Hp - 560] = GHC.Types.[]_closure+1;
           I64[Hp - 552] = sat_sL38_info;
           P64[Hp - 536] = _sL2I::P64;
           P64[Hp - 528] = _sL2X::P64;
           I64[Hp - 520] = :_con_info;
           P64[Hp - 512] = Hp - 552;
           P64[Hp - 504] = Hp - 574;
           I64[Hp - 496] = sat_sL37_info;
           P64[Hp - 480] = _sL2H::P64;
           P64[Hp - 472] = _sL2W::P64;
           I64[Hp - 464] = :_con_info;
           P64[Hp - 456] = Hp - 496;
           P64[Hp - 448] = Hp - 518;
           I64[Hp - 440] = sat_sL36_info;
           P64[Hp - 424] = _sL2G::P64;
           P64[Hp - 416] = _sL2V::P64;
           I64[Hp - 408] = :_con_info;
           P64[Hp - 400] = Hp - 440;
           P64[Hp - 392] = Hp - 462;
           I64[Hp - 384] = sat_sL35_info;
           P64[Hp - 368] = _sL2F::P64;
           P64[Hp - 360] = _sL2U::P64;
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = Hp - 384;
           P64[Hp - 336] = Hp - 406;
           I64[Hp - 328] = sat_sL34_info;
           P64[Hp - 312] = _sL2E::P64;
           P64[Hp - 304] = _sL2T::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = Hp - 350;
           I64[Hp - 272] = sat_sL33_info;
           P64[Hp - 256] = _sL2D::P64;
           P64[Hp - 248] = _sL2S::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sL32_info;
           P64[Hp - 200] = _sL2C::P64;
           P64[Hp - 192] = _sL2R::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sL31_info;
           P64[Hp - 144] = _sL2B::P64;
           P64[Hp - 136] = _sL2Q::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sL30_info;
           P64[Hp - 88] = _sL2A::P64;
           P64[Hp - 80] = _sL2P::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sL2Z_info;
           P64[Hp - 32] = _sL2z::P64;
           P64[Hp - 24] = _sL2O::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 630;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,)_go2_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL3m_info" {
     sat_sL3m_info:
         const sat_sL3m_entry;
         const 23;
         const 4294967311;
         const SLKe_srt+272;
 },
 GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       cMKG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cMKI; else goto cMKJ;
       cMKI: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       cMKJ: // global
           I64[Sp - 32] = block_cMJ1_info;
           R1 = P64[Sp + 56];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 48] = R3;
           P64[Sp + 56] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uMKN; else goto cMJ2;
       uMKN: // global
           call _cMJ1(R1) args: 0, res: 0, upd: 0;
       cMJ2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 60129542144;
         const SLKe_srt+272;
         const 14;
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_slow;
 },
 _cMJ1() //  [R1]
         { []
         }
     {offset
       cMJ1: // global
           Hp = Hp + 224;
           if (Hp > HpLim) (likely: False) goto cMKM; else goto cMKL;
       cMKM: // global
           HpAlloc = 224;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cMKL: // global
           _sL2O::P64 = P64[R1 + 7];
           _sL2P::P64 = P64[R1 + 15];
           _sL2Q::P64 = P64[R1 + 23];
           _sL2R::P64 = P64[R1 + 31];
           _sL2S::P64 = P64[R1 + 39];
           _sL2T::P64 = P64[R1 + 47];
           _sL2U::P64 = P64[R1 + 55];
           _sL2V::P64 = P64[R1 + 63];
           _sL2W::P64 = P64[R1 + 71];
           _sL2X::P64 = P64[R1 + 79];
           _sL2Y::P64 = P64[R1 + 87];
           I64[Hp - 216] = sat_sL3m_info;
           P64[Hp - 200] = P64[Sp + 88];
           P64[Hp - 192] = P64[Sp + 80];
           P64[Hp - 184] = P64[Sp + 8];
           P64[Hp - 176] = P64[Sp + 16];
           P64[Hp - 168] = P64[Sp + 24];
           P64[Hp - 160] = P64[Sp + 32];
           P64[Hp - 152] = P64[Sp + 40];
           P64[Hp - 144] = P64[Sp + 48];
           P64[Hp - 136] = P64[Sp + 56];
           P64[Hp - 128] = P64[Sp + 64];
           P64[Hp - 120] = P64[Sp + 72];
           P64[Hp - 112] = P64[Sp + 96];
           P64[Hp - 104] = _sL2O::P64;
           P64[Hp - 96] = _sL2P::P64;
           P64[Hp - 88] = _sL2Q::P64;
           P64[Hp - 80] = _sL2R::P64;
           P64[Hp - 72] = _sL2S::P64;
           P64[Hp - 64] = _sL2T::P64;
           P64[Hp - 56] = _sL2U::P64;
           P64[Hp - 48] = _sL2V::P64;
           P64[Hp - 40] = _sL2W::P64;
           P64[Hp - 32] = _sL2X::P64;
           P64[Hp - 24] = _sL2Y::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 216;
           R1 = Hp - 14;
           Sp = Sp + 104;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cMJ1_info" {
     block_cMJ1_info:
         const _cMJ1;
         const 12;
         const 4294967326;
         const SLKe_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.490484087 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cMNy: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,)_$cshow_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 64, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,,,,,,)_$cshow_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cMNC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cMND; else goto cMNE;
       cMND: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       cMNE: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = P64[Sp + 32];
           P64[Sp + 24] = P64[Sp + 40];
           P64[Sp + 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp + 40] = P64[Sp + 48];
           P64[Sp + 48] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 80, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 51539607552;
         const SLKe_srt+280;
         const 12;
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.497379491 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cMNX: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_sL3M_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cMO6: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cMO7; else goto cMO8;
       cMO7: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cMO8: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 72] = P64[R1 + 46];
           P64[Sp - 64] = P64[R1 + 54];
           P64[Sp - 56] = P64[R1 + 62];
           P64[Sp - 48] = P64[R1 + 70];
           P64[Sp - 40] = P64[R1 + 78];
           P64[Sp - 32] = P64[R1 + 86];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 72;
           call GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 80, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL3M_info" {
     sat_sL3M_info:
         const sat_sL3M_entry;
         const 11;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+280;
 },
 GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cMO9: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cMOd; else goto cMOc;
       cMOd: // global
           HpAlloc = 96;
           R1 = GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       cMOc: // global
           I64[Hp - 88] = sat_sL3M_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           P64[Hp - 48] = R6;
           P64[Hp - 40] = P64[Sp];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R4 = P64[Sp + 56];
           R3 = P64[Sp + 48];
           R2 = Hp - 86;
           Sp = Sp + 64;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 55834574848;
         const SLKe_srt+280;
         const 13;
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.508008506 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       cMOD: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,,)_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_sL40_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cMOM: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cMON; else goto cMOO;
       cMON: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cMOO: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 64] = P64[R1 + 46];
           P64[Sp - 56] = P64[R1 + 54];
           P64[Sp - 48] = P64[R1 + 62];
           P64[Sp - 40] = P64[R1 + 70];
           P64[Sp - 32] = P64[R1 + 78];
           P64[Sp - 24] = P64[R1 + 86];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 64;
           call GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 72, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL40_info" {
     sat_sL40_info:
         const sat_sL40_entry;
         const 11;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+296;
 },
 sat_sL3Z_entry() //  [R1, R2]
         { []
         }
     {offset
       cMOU: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cMOV; else goto cMOW;
       cMOV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cMOW: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 56] = P64[R1 + 47];
           P64[Sp - 48] = P64[R1 + 55];
           P64[Sp - 40] = P64[R1 + 63];
           P64[Sp - 32] = P64[R1 + 71];
           P64[Sp - 24] = P64[R1 + 79];
           P64[Sp - 16] = P64[R1 + 87];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 56;
           call GHC.Show.$fShow(,,,,,,,,,,)_$cshow_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL3Z_info" {
     sat_sL3Z_info:
         const sat_sL3Z_entry;
         const 11;
         const 4294967304;
         const 4294967301;
         const SLKe_srt+288;
 },
 sat_sL3Y_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cMP2: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cMP3; else goto cMP4;
       cMP3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cMP4: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 72] = P64[R1 + 45];
           P64[Sp - 64] = P64[R1 + 53];
           P64[Sp - 56] = P64[R1 + 61];
           P64[Sp - 48] = P64[R1 + 69];
           P64[Sp - 40] = P64[R1 + 77];
           P64[Sp - 32] = P64[R1 + 85];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 72;
           call GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 80, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL3Y_info" {
     sat_sL3Y_info:
         const sat_sL3Y_entry;
         const 11;
         const 4294967304;
         const 12884901911;
         const SLKe_srt+280;
 },
 GHC.Show.$fShow(,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cMP6: // global
           Hp = Hp + 320;
           if (Hp > HpLim) (likely: False) goto cMPa; else goto cMP9;
       cMPa: // global
           HpAlloc = 320;
           R1 = GHC.Show.$fShow(,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       cMP9: // global
           I64[Hp - 312] = sat_sL40_info;
           P64[Hp - 304] = R2;
           P64[Hp - 296] = R3;
           P64[Hp - 288] = R4;
           P64[Hp - 280] = R5;
           P64[Hp - 272] = R6;
           _sL3S::P64 = P64[Sp];
           P64[Hp - 264] = _sL3S::P64;
           _sL3T::P64 = P64[Sp + 8];
           P64[Hp - 256] = _sL3T::P64;
           _sL3U::P64 = P64[Sp + 16];
           P64[Hp - 248] = _sL3U::P64;
           _sL3V::P64 = P64[Sp + 24];
           P64[Hp - 240] = _sL3V::P64;
           _sL3W::P64 = P64[Sp + 32];
           P64[Hp - 232] = _sL3W::P64;
           _sL3X::P64 = P64[Sp + 40];
           P64[Hp - 224] = _sL3X::P64;
           I64[Hp - 216] = sat_sL3Z_info;
           P64[Hp - 208] = R2;
           P64[Hp - 200] = R3;
           P64[Hp - 192] = R4;
           P64[Hp - 184] = R5;
           P64[Hp - 176] = R6;
           P64[Hp - 168] = _sL3S::P64;
           P64[Hp - 160] = _sL3T::P64;
           P64[Hp - 152] = _sL3U::P64;
           P64[Hp - 144] = _sL3V::P64;
           P64[Hp - 136] = _sL3W::P64;
           P64[Hp - 128] = _sL3X::P64;
           I64[Hp - 120] = sat_sL3Y_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = _sL3S::P64;
           P64[Hp - 64] = _sL3T::P64;
           P64[Hp - 56] = _sL3U::P64;
           P64[Hp - 48] = _sL3V::P64;
           P64[Hp - 40] = _sL3W::P64;
           P64[Hp - 32] = _sL3X::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 117;
           P64[Hp - 8] = Hp - 215;
           P64[Hp] = Hp - 310;
           R1 = Hp - 23;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,,)_info" {
     GHC.Show.$fShow(,,,,,,,,,,)_info:
         const GHC.Show.$fShow(,,,,,,,,,,)_entry;
         const 0;
         const 64424509454;
         const 47244640256;
         const SLKe_srt+280;
         const 11;
         const GHC.Show.$fShow(,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.522442465 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,,,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,,,,,,)_go2_info;
         const 0;
 },
 sat_sL4a_entry() //  [R1]
         { []
         }
     {offset
       cMQd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cMQe; else goto cMQf;
       cMQe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMQf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,)_go2_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL4a_info" {
     sat_sL4a_info:
         const sat_sL4a_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+312;
 },
 GHC.Show.$fShow(,,,,,,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cMQk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cMQl; else goto cMQm;
       cMQl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cMQm: // global
           I64[Sp - 16] = block_cMPX_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uMQB; else goto cMPY;
       uMQB: // global
           call _cMPX(R1) args: 0, res: 0, upd: 0;
       cMPY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,,,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,,,,,,)_go2_entry;
         const 0;
         const 144115192370823182;
         const 8589934607;
         const SLKe_srt+112;
 },
 _cMPX() //  [R1]
         { []
         }
     {offset
       cMPX: // global
           if (R1 & 7 == 1) goto cMQh; else goto cMQi;
       cMQh: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cMQi: // global
           I64[Sp - 8] = block_cMQ3_info;
           _sL45::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sL45::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uMQA; else goto cMQ4;
       uMQA: // global
           call _cMQ3(R1) args: 0, res: 0, upd: 0;
       cMQ4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cMPX_info" {
     block_cMPX_info:
         const _cMPX;
         const 1;
         const 144115192370823198;
         const SLKe_srt+112;
 },
 _cMQ3() //  [R1]
         { []
         }
     {offset
       cMQ3: // global
           _sL42::P64 = P64[Sp + 16];
           _sL45::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cMQt; else goto cMQv;
       cMQt: // global
           R2 = _sL42::P64;
           R1 = _sL45::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cMQv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cMQy; else goto cMQx;
       cMQy: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cMQx: // global
           I64[Hp - 48] = sat_sL4a_info;
           P64[Hp - 32] = _sL42::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sL45::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cMQ3_info" {
     block_cMQ3_info:
         const _cMQ3;
         const 2;
         const 4294967326;
         const SLKe_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.539953543 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cMR5: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_sL4J_entry() //  [R1]
         { []
         }
     {offset
       cMRn: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMRo; else goto cMRp;
       cMRo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMRp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL4J_info" {
     sat_sL4J_info:
         const sat_sL4J_entry;
         const 2;
         const 18;
 },
 sat_sL4I_entry() //  [R1]
         { []
         }
     {offset
       cMRv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMRw; else goto cMRx;
       cMRw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMRx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL4I_info" {
     sat_sL4I_info:
         const sat_sL4I_entry;
         const 2;
         const 18;
 },
 sat_sL4H_entry() //  [R1]
         { []
         }
     {offset
       cMRD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMRE; else goto cMRF;
       cMRE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMRF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL4H_info" {
     sat_sL4H_info:
         const sat_sL4H_entry;
         const 2;
         const 18;
 },
 sat_sL4G_entry() //  [R1]
         { []
         }
     {offset
       cMRL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMRM; else goto cMRN;
       cMRM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMRN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL4G_info" {
     sat_sL4G_info:
         const sat_sL4G_entry;
         const 2;
         const 18;
 },
 sat_sL4F_entry() //  [R1]
         { []
         }
     {offset
       cMRT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMRU; else goto cMRV;
       cMRU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMRV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL4F_info" {
     sat_sL4F_info:
         const sat_sL4F_entry;
         const 2;
         const 18;
 },
 sat_sL4E_entry() //  [R1]
         { []
         }
     {offset
       cMS1: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMS2; else goto cMS3;
       cMS2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMS3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL4E_info" {
     sat_sL4E_info:
         const sat_sL4E_entry;
         const 2;
         const 18;
 },
 sat_sL4D_entry() //  [R1]
         { []
         }
     {offset
       cMS9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMSa; else goto cMSb;
       cMSa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMSb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL4D_info" {
     sat_sL4D_info:
         const sat_sL4D_entry;
         const 2;
         const 18;
 },
 sat_sL4C_entry() //  [R1]
         { []
         }
     {offset
       cMSh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMSi; else goto cMSj;
       cMSi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMSj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL4C_info" {
     sat_sL4C_info:
         const sat_sL4C_entry;
         const 2;
         const 18;
 },
 sat_sL4B_entry() //  [R1]
         { []
         }
     {offset
       cMSp: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMSq; else goto cMSr;
       cMSq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMSr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL4B_info" {
     sat_sL4B_info:
         const sat_sL4B_entry;
         const 2;
         const 18;
 },
 sat_sL4A_entry() //  [R1]
         { []
         }
     {offset
       cMSx: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMSy; else goto cMSz;
       cMSy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMSz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL4A_info" {
     sat_sL4A_info:
         const sat_sL4A_entry;
         const 2;
         const 18;
 },
 sat_sL4V_entry() //  [R1]
         { []
         }
     {offset
       cMSB: // global
           _sL4V::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cMSC; else goto cMSD;
       cMSD: // global
           Hp = Hp + 584;
           if (Hp > HpLim) (likely: False) goto cMSF; else goto cMSE;
       cMSF: // global
           HpAlloc = 584;
           goto cMSC;
       cMSC: // global
           R1 = _sL4V::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMSE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sL4V::P64;
           _sL4c::P64 = P64[_sL4V::P64 + 16];
           _sL4d::P64 = P64[_sL4V::P64 + 24];
           _sL4e::P64 = P64[_sL4V::P64 + 32];
           _sL4f::P64 = P64[_sL4V::P64 + 40];
           _sL4g::P64 = P64[_sL4V::P64 + 48];
           _sL4h::P64 = P64[_sL4V::P64 + 56];
           _sL4i::P64 = P64[_sL4V::P64 + 64];
           _sL4j::P64 = P64[_sL4V::P64 + 72];
           _sL4k::P64 = P64[_sL4V::P64 + 80];
           _sL4l::P64 = P64[_sL4V::P64 + 88];
           _sL4o::P64 = P64[_sL4V::P64 + 96];
           _sL4q::P64 = P64[_sL4V::P64 + 104];
           _sL4r::P64 = P64[_sL4V::P64 + 112];
           _sL4s::P64 = P64[_sL4V::P64 + 120];
           _sL4t::P64 = P64[_sL4V::P64 + 128];
           _sL4u::P64 = P64[_sL4V::P64 + 136];
           _sL4v::P64 = P64[_sL4V::P64 + 144];
           _sL4w::P64 = P64[_sL4V::P64 + 152];
           _sL4x::P64 = P64[_sL4V::P64 + 160];
           _sL4y::P64 = P64[_sL4V::P64 + 168];
           _sL4z::P64 = P64[_sL4V::P64 + 176];
           I64[Hp - 576] = :_con_info;
           P64[Hp - 568] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 560] = _sL4o::P64;
           I64[Hp - 552] = sat_sL4J_info;
           P64[Hp - 536] = _sL4l::P64;
           P64[Hp - 528] = _sL4z::P64;
           I64[Hp - 520] = :_con_info;
           P64[Hp - 512] = Hp - 552;
           P64[Hp - 504] = GHC.Types.[]_closure+1;
           I64[Hp - 496] = sat_sL4I_info;
           P64[Hp - 480] = _sL4k::P64;
           P64[Hp - 472] = _sL4y::P64;
           I64[Hp - 464] = :_con_info;
           P64[Hp - 456] = Hp - 496;
           P64[Hp - 448] = Hp - 518;
           I64[Hp - 440] = sat_sL4H_info;
           P64[Hp - 424] = _sL4j::P64;
           P64[Hp - 416] = _sL4x::P64;
           I64[Hp - 408] = :_con_info;
           P64[Hp - 400] = Hp - 440;
           P64[Hp - 392] = Hp - 462;
           I64[Hp - 384] = sat_sL4G_info;
           P64[Hp - 368] = _sL4i::P64;
           P64[Hp - 360] = _sL4w::P64;
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = Hp - 384;
           P64[Hp - 336] = Hp - 406;
           I64[Hp - 328] = sat_sL4F_info;
           P64[Hp - 312] = _sL4h::P64;
           P64[Hp - 304] = _sL4v::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = Hp - 350;
           I64[Hp - 272] = sat_sL4E_info;
           P64[Hp - 256] = _sL4g::P64;
           P64[Hp - 248] = _sL4u::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sL4D_info;
           P64[Hp - 200] = _sL4f::P64;
           P64[Hp - 192] = _sL4t::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sL4C_info;
           P64[Hp - 144] = _sL4e::P64;
           P64[Hp - 136] = _sL4s::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sL4B_info;
           P64[Hp - 88] = _sL4d::P64;
           P64[Hp - 80] = _sL4r::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sL4A_info;
           P64[Hp - 32] = _sL4c::P64;
           P64[Hp - 24] = _sL4q::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 574;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,)_go2_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL4V_info" {
     sat_sL4V_info:
         const sat_sL4V_entry;
         const 21;
         const 4294967311;
         const SLKe_srt+312;
 },
 GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cMSG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cMSI; else goto cMSJ;
       cMSI: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       cMSJ: // global
           I64[Sp - 32] = block_cMR9_info;
           R1 = P64[Sp + 48];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 40] = R3;
           P64[Sp + 48] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uMSN; else goto cMRa;
       uMSN: // global
           call _cMR9(R1) args: 0, res: 0, upd: 0;
       cMRa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 55834574848;
         const SLKe_srt+312;
         const 13;
         const GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_slow;
 },
 _cMR9() //  [R1]
         { []
         }
     {offset
       cMR9: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cMSM; else goto cMSL;
       cMSM: // global
           HpAlloc = 208;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cMSL: // global
           _sL4q::P64 = P64[R1 + 7];
           _sL4r::P64 = P64[R1 + 15];
           _sL4s::P64 = P64[R1 + 23];
           _sL4t::P64 = P64[R1 + 31];
           _sL4u::P64 = P64[R1 + 39];
           _sL4v::P64 = P64[R1 + 47];
           _sL4w::P64 = P64[R1 + 55];
           _sL4x::P64 = P64[R1 + 63];
           _sL4y::P64 = P64[R1 + 71];
           _sL4z::P64 = P64[R1 + 79];
           I64[Hp - 200] = sat_sL4V_info;
           P64[Hp - 184] = P64[Sp + 80];
           P64[Hp - 176] = P64[Sp + 72];
           P64[Hp - 168] = P64[Sp + 8];
           P64[Hp - 160] = P64[Sp + 16];
           P64[Hp - 152] = P64[Sp + 24];
           P64[Hp - 144] = P64[Sp + 32];
           P64[Hp - 136] = P64[Sp + 40];
           P64[Hp - 128] = P64[Sp + 48];
           P64[Hp - 120] = P64[Sp + 56];
           P64[Hp - 112] = P64[Sp + 64];
           P64[Hp - 104] = P64[Sp + 88];
           P64[Hp - 96] = _sL4q::P64;
           P64[Hp - 88] = _sL4r::P64;
           P64[Hp - 80] = _sL4s::P64;
           P64[Hp - 72] = _sL4t::P64;
           P64[Hp - 64] = _sL4u::P64;
           P64[Hp - 56] = _sL4v::P64;
           P64[Hp - 48] = _sL4w::P64;
           P64[Hp - 40] = _sL4x::P64;
           P64[Hp - 32] = _sL4y::P64;
           P64[Hp - 24] = _sL4z::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 200;
           R1 = Hp - 14;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cMR9_info" {
     block_cMR9_info:
         const _cMR9;
         const 11;
         const 4294967326;
         const SLKe_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.586336505 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cMVl: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,)_$cshow_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 56, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,,,,,)_$cshow_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cMVp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cMVq; else goto cMVr;
       cMVq: // global
           R1 = GHC.Show.$fShow(,,,,,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       cMVr: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = P64[Sp + 32];
           P64[Sp + 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp + 32] = P64[Sp + 40];
           P64[Sp + 40] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 72, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 47244640256;
         const SLKe_srt+320;
         const 11;
         const GHC.Show.$fShow(,,,,,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.594100108 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cMVJ: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,)_$cshowList_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2,
                                                            R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_sL5j_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cMVS: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cMVT; else goto cMVU;
       cMVT: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cMVU: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 64] = P64[R1 + 46];
           P64[Sp - 56] = P64[R1 + 54];
           P64[Sp - 48] = P64[R1 + 62];
           P64[Sp - 40] = P64[R1 + 70];
           P64[Sp - 32] = P64[R1 + 78];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 64;
           call GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 72, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL5j_info" {
     sat_sL5j_info:
         const sat_sL5j_entry;
         const 10;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+320;
 },
 GHC.Show.$fShow(,,,,,,,,,)_$cshowList_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cMVV: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cMVZ; else goto cMVY;
       cMVZ: // global
           HpAlloc = 88;
           R1 = GHC.Show.$fShow(,,,,,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       cMVY: // global
           I64[Hp - 80] = sat_sL5j_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = P64[Sp];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 40];
           R2 = Hp - 78;
           Sp = Sp + 56;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 51539607552;
         const SLKe_srt+320;
         const 12;
         const GHC.Show.$fShow(,,,,,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.607965183 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,,,,,)_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       cMWn: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,,)_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_sL5w_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cMWw: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cMWx; else goto cMWy;
       cMWx: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cMWy: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 56] = P64[R1 + 46];
           P64[Sp - 48] = P64[R1 + 54];
           P64[Sp - 40] = P64[R1 + 62];
           P64[Sp - 32] = P64[R1 + 70];
           P64[Sp - 24] = P64[R1 + 78];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 56;
           call GHC.Show.$fShow(,,,,,,,,,)_$cshowList_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL5w_info" {
     sat_sL5w_info:
         const sat_sL5w_entry;
         const 10;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+336;
 },
 sat_sL5v_entry() //  [R1, R2]
         { []
         }
     {offset
       cMWE: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cMWF; else goto cMWG;
       cMWF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cMWG: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 48] = P64[R1 + 47];
           P64[Sp - 40] = P64[R1 + 55];
           P64[Sp - 32] = P64[R1 + 63];
           P64[Sp - 24] = P64[R1 + 71];
           P64[Sp - 16] = P64[R1 + 79];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 48;
           call GHC.Show.$fShow(,,,,,,,,,)_$cshow_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL5v_info" {
     sat_sL5v_info:
         const sat_sL5v_entry;
         const 10;
         const 4294967304;
         const 4294967301;
         const SLKe_srt+328;
 },
 sat_sL5u_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cMWM: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cMWN; else goto cMWO;
       cMWN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cMWO: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 64] = P64[R1 + 45];
           P64[Sp - 56] = P64[R1 + 53];
           P64[Sp - 48] = P64[R1 + 61];
           P64[Sp - 40] = P64[R1 + 69];
           P64[Sp - 32] = P64[R1 + 77];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 64;
           call GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 72, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL5u_info" {
     sat_sL5u_info:
         const sat_sL5u_entry;
         const 10;
         const 4294967304;
         const 12884901911;
         const SLKe_srt+320;
 },
 GHC.Show.$fShow(,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cMWQ: // global
           Hp = Hp + 296;
           if (Hp > HpLim) (likely: False) goto cMWU; else goto cMWT;
       cMWU: // global
           HpAlloc = 296;
           R1 = GHC.Show.$fShow(,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cMWT: // global
           I64[Hp - 288] = sat_sL5w_info;
           P64[Hp - 280] = R2;
           P64[Hp - 272] = R3;
           P64[Hp - 264] = R4;
           P64[Hp - 256] = R5;
           P64[Hp - 248] = R6;
           _sL5p::P64 = P64[Sp];
           P64[Hp - 240] = _sL5p::P64;
           _sL5q::P64 = P64[Sp + 8];
           P64[Hp - 232] = _sL5q::P64;
           _sL5r::P64 = P64[Sp + 16];
           P64[Hp - 224] = _sL5r::P64;
           _sL5s::P64 = P64[Sp + 24];
           P64[Hp - 216] = _sL5s::P64;
           _sL5t::P64 = P64[Sp + 32];
           P64[Hp - 208] = _sL5t::P64;
           I64[Hp - 200] = sat_sL5v_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           P64[Hp - 176] = R4;
           P64[Hp - 168] = R5;
           P64[Hp - 160] = R6;
           P64[Hp - 152] = _sL5p::P64;
           P64[Hp - 144] = _sL5q::P64;
           P64[Hp - 136] = _sL5r::P64;
           P64[Hp - 128] = _sL5s::P64;
           P64[Hp - 120] = _sL5t::P64;
           I64[Hp - 112] = sat_sL5u_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = _sL5p::P64;
           P64[Hp - 56] = _sL5q::P64;
           P64[Hp - 48] = _sL5r::P64;
           P64[Hp - 40] = _sL5s::P64;
           P64[Hp - 32] = _sL5t::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 109;
           P64[Hp - 8] = Hp - 199;
           P64[Hp] = Hp - 286;
           R1 = Hp - 23;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,,)_info" {
     GHC.Show.$fShow(,,,,,,,,,)_info:
         const GHC.Show.$fShow(,,,,,,,,,)_entry;
         const 0;
         const 64424509454;
         const 42949672960;
         const SLKe_srt+320;
         const 10;
         const GHC.Show.$fShow(,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.625726329 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,,,,,)_go2_info;
         const 0;
 },
 sat_sL5G_entry() //  [R1]
         { []
         }
     {offset
       cMXU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cMXV; else goto cMXW;
       cMXV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMXW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,)_go2_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL5G_info" {
     sat_sL5G_info:
         const sat_sL5G_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+352;
 },
 GHC.Show.$fShow(,,,,,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cMY1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cMY2; else goto cMY3;
       cMY2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cMY3: // global
           I64[Sp - 16] = block_cMXE_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uMYi; else goto cMXF;
       uMYi: // global
           call _cMXE(R1) args: 0, res: 0, upd: 0;
       cMXF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,,,,,)_go2_entry;
         const 0;
         const 4611686022722355214;
         const 8589934607;
         const SLKe_srt+112;
 },
 _cMXE() //  [R1]
         { []
         }
     {offset
       cMXE: // global
           if (R1 & 7 == 1) goto cMXY; else goto cMXZ;
       cMXY: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cMXZ: // global
           I64[Sp - 8] = block_cMXK_info;
           _sL5B::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sL5B::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uMYh; else goto cMXL;
       uMYh: // global
           call _cMXK(R1) args: 0, res: 0, upd: 0;
       cMXL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cMXE_info" {
     block_cMXE_info:
         const _cMXE;
         const 1;
         const 4611686022722355230;
         const SLKe_srt+112;
 },
 _cMXK() //  [R1]
         { []
         }
     {offset
       cMXK: // global
           _sL5y::P64 = P64[Sp + 16];
           _sL5B::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cMYa; else goto cMYc;
       cMYa: // global
           R2 = _sL5y::P64;
           R1 = _sL5B::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cMYc: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cMYf; else goto cMYe;
       cMYf: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cMYe: // global
           I64[Hp - 48] = sat_sL5G_info;
           P64[Hp - 32] = _sL5y::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sL5B::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cMXK_info" {
     block_cMXK_info:
         const _cMXK;
         const 2;
         const 4294967326;
         const SLKe_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.642483128 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cMYM: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2,
                                                            R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_sL6c_entry() //  [R1]
         { []
         }
     {offset
       cMZ4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMZ5; else goto cMZ6;
       cMZ5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMZ6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL6c_info" {
     sat_sL6c_info:
         const sat_sL6c_entry;
         const 2;
         const 18;
 },
 sat_sL6b_entry() //  [R1]
         { []
         }
     {offset
       cMZc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMZd; else goto cMZe;
       cMZd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMZe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL6b_info" {
     sat_sL6b_info:
         const sat_sL6b_entry;
         const 2;
         const 18;
 },
 sat_sL6a_entry() //  [R1]
         { []
         }
     {offset
       cMZk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMZl; else goto cMZm;
       cMZl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMZm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL6a_info" {
     sat_sL6a_info:
         const sat_sL6a_entry;
         const 2;
         const 18;
 },
 sat_sL69_entry() //  [R1]
         { []
         }
     {offset
       cMZs: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMZt; else goto cMZu;
       cMZt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMZu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL69_info" {
     sat_sL69_info:
         const sat_sL69_entry;
         const 2;
         const 18;
 },
 sat_sL68_entry() //  [R1]
         { []
         }
     {offset
       cMZA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMZB; else goto cMZC;
       cMZB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMZC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL68_info" {
     sat_sL68_info:
         const sat_sL68_entry;
         const 2;
         const 18;
 },
 sat_sL67_entry() //  [R1]
         { []
         }
     {offset
       cMZI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMZJ; else goto cMZK;
       cMZJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMZK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL67_info" {
     sat_sL67_info:
         const sat_sL67_entry;
         const 2;
         const 18;
 },
 sat_sL66_entry() //  [R1]
         { []
         }
     {offset
       cMZQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMZR; else goto cMZS;
       cMZR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cMZS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL66_info" {
     sat_sL66_info:
         const sat_sL66_entry;
         const 2;
         const 18;
 },
 sat_sL65_entry() //  [R1]
         { []
         }
     {offset
       cMZY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cMZZ; else goto cN00;
       cMZZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cN00: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL65_info" {
     sat_sL65_info:
         const sat_sL65_entry;
         const 2;
         const 18;
 },
 sat_sL64_entry() //  [R1]
         { []
         }
     {offset
       cN06: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cN07; else goto cN08;
       cN07: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cN08: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL64_info" {
     sat_sL64_info:
         const sat_sL64_entry;
         const 2;
         const 18;
 },
 sat_sL6n_entry() //  [R1]
         { []
         }
     {offset
       cN0a: // global
           _sL6n::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cN0b; else goto cN0c;
       cN0c: // global
           Hp = Hp + 528;
           if (Hp > HpLim) (likely: False) goto cN0e; else goto cN0d;
       cN0e: // global
           HpAlloc = 528;
           goto cN0b;
       cN0b: // global
           R1 = _sL6n::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cN0d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sL6n::P64;
           _sL5I::P64 = P64[_sL6n::P64 + 16];
           _sL5J::P64 = P64[_sL6n::P64 + 24];
           _sL5K::P64 = P64[_sL6n::P64 + 32];
           _sL5L::P64 = P64[_sL6n::P64 + 40];
           _sL5M::P64 = P64[_sL6n::P64 + 48];
           _sL5N::P64 = P64[_sL6n::P64 + 56];
           _sL5O::P64 = P64[_sL6n::P64 + 64];
           _sL5P::P64 = P64[_sL6n::P64 + 72];
           _sL5Q::P64 = P64[_sL6n::P64 + 80];
           _sL5T::P64 = P64[_sL6n::P64 + 88];
           _sL5V::P64 = P64[_sL6n::P64 + 96];
           _sL5W::P64 = P64[_sL6n::P64 + 104];
           _sL5X::P64 = P64[_sL6n::P64 + 112];
           _sL5Y::P64 = P64[_sL6n::P64 + 120];
           _sL5Z::P64 = P64[_sL6n::P64 + 128];
           _sL60::P64 = P64[_sL6n::P64 + 136];
           _sL61::P64 = P64[_sL6n::P64 + 144];
           _sL62::P64 = P64[_sL6n::P64 + 152];
           _sL63::P64 = P64[_sL6n::P64 + 160];
           I64[Hp - 520] = :_con_info;
           P64[Hp - 512] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 504] = _sL5T::P64;
           I64[Hp - 496] = sat_sL6c_info;
           P64[Hp - 480] = _sL5Q::P64;
           P64[Hp - 472] = _sL63::P64;
           I64[Hp - 464] = :_con_info;
           P64[Hp - 456] = Hp - 496;
           P64[Hp - 448] = GHC.Types.[]_closure+1;
           I64[Hp - 440] = sat_sL6b_info;
           P64[Hp - 424] = _sL5P::P64;
           P64[Hp - 416] = _sL62::P64;
           I64[Hp - 408] = :_con_info;
           P64[Hp - 400] = Hp - 440;
           P64[Hp - 392] = Hp - 462;
           I64[Hp - 384] = sat_sL6a_info;
           P64[Hp - 368] = _sL5O::P64;
           P64[Hp - 360] = _sL61::P64;
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = Hp - 384;
           P64[Hp - 336] = Hp - 406;
           I64[Hp - 328] = sat_sL69_info;
           P64[Hp - 312] = _sL5N::P64;
           P64[Hp - 304] = _sL60::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = Hp - 350;
           I64[Hp - 272] = sat_sL68_info;
           P64[Hp - 256] = _sL5M::P64;
           P64[Hp - 248] = _sL5Z::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sL67_info;
           P64[Hp - 200] = _sL5L::P64;
           P64[Hp - 192] = _sL5Y::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sL66_info;
           P64[Hp - 144] = _sL5K::P64;
           P64[Hp - 136] = _sL5X::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sL65_info;
           P64[Hp - 88] = _sL5J::P64;
           P64[Hp - 80] = _sL5W::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sL64_info;
           P64[Hp - 32] = _sL5I::P64;
           P64[Hp - 24] = _sL5V::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 518;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,)_go2_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL6n_info" {
     sat_sL6n_info:
         const sat_sL6n_entry;
         const 19;
         const 4294967311;
         const SLKe_srt+352;
 },
 GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cN0f: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cN0h; else goto cN0i;
       cN0h: // global
           R1 = GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       cN0i: // global
           I64[Sp - 32] = block_cMYQ_info;
           R1 = P64[Sp + 40];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 32] = R3;
           P64[Sp + 40] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uN0m; else goto cMYR;
       uN0m: // global
           call _cMYQ(R1) args: 0, res: 0, upd: 0;
       cMYR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 51539607552;
         const SLKe_srt+352;
         const 12;
         const GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_slow;
 },
 _cMYQ() //  [R1]
         { []
         }
     {offset
       cMYQ: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cN0l; else goto cN0k;
       cN0l: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cN0k: // global
           _sL5V::P64 = P64[R1 + 7];
           _sL5W::P64 = P64[R1 + 15];
           _sL5X::P64 = P64[R1 + 23];
           _sL5Y::P64 = P64[R1 + 31];
           _sL5Z::P64 = P64[R1 + 39];
           _sL60::P64 = P64[R1 + 47];
           _sL61::P64 = P64[R1 + 55];
           _sL62::P64 = P64[R1 + 63];
           _sL63::P64 = P64[R1 + 71];
           I64[Hp - 184] = sat_sL6n_info;
           P64[Hp - 168] = P64[Sp + 72];
           P64[Hp - 160] = P64[Sp + 64];
           P64[Hp - 152] = P64[Sp + 8];
           P64[Hp - 144] = P64[Sp + 16];
           P64[Hp - 136] = P64[Sp + 24];
           P64[Hp - 128] = P64[Sp + 32];
           P64[Hp - 120] = P64[Sp + 40];
           P64[Hp - 112] = P64[Sp + 48];
           P64[Hp - 104] = P64[Sp + 56];
           P64[Hp - 96] = P64[Sp + 80];
           P64[Hp - 88] = _sL5V::P64;
           P64[Hp - 80] = _sL5W::P64;
           P64[Hp - 72] = _sL5X::P64;
           P64[Hp - 64] = _sL5Y::P64;
           P64[Hp - 56] = _sL5Z::P64;
           P64[Hp - 48] = _sL60::P64;
           P64[Hp - 40] = _sL61::P64;
           P64[Hp - 32] = _sL62::P64;
           P64[Hp - 24] = _sL63::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 184;
           R1 = Hp - 14;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cMYQ_info" {
     block_cMYQ_info:
         const _cMYQ;
         const 10;
         const 4294967326;
         const SLKe_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.672578108 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cN2H: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,)_$cshow_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 48, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,,,,)_$cshow_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cN2L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cN2M; else goto cN2N;
       cN2M: // global
           R1 = GHC.Show.$fShow(,,,,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cN2N: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 16] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp + 24] = P64[Sp + 32];
           P64[Sp + 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 42949672960;
         const SLKe_srt+360;
         const 10;
         const GHC.Show.$fShow(,,,,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.679526007 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cN34: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,)_$cshowList_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2,
                                                           R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_sL6J_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cN3d: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cN3e; else goto cN3f;
       cN3e: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cN3f: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 56] = P64[R1 + 46];
           P64[Sp - 48] = P64[R1 + 54];
           P64[Sp - 40] = P64[R1 + 62];
           P64[Sp - 32] = P64[R1 + 70];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 56;
           call GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL6J_info" {
     sat_sL6J_info:
         const sat_sL6J_entry;
         const 9;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+360;
 },
 GHC.Show.$fShow(,,,,,,,,)_$cshowList_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cN3g: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cN3k; else goto cN3j;
       cN3k: // global
           HpAlloc = 80;
           R1 = GHC.Show.$fShow(,,,,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       cN3j: // global
           I64[Hp - 72] = sat_sL6J_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = Hp - 70;
           Sp = Sp + 48;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 47244640256;
         const SLKe_srt+360;
         const 11;
         const GHC.Show.$fShow(,,,,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.692133881 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,,,,)_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       cN3G: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,,)_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2,
                                                R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sL6V_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cN3P: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cN3Q; else goto cN3R;
       cN3Q: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cN3R: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 48] = P64[R1 + 46];
           P64[Sp - 40] = P64[R1 + 54];
           P64[Sp - 32] = P64[R1 + 62];
           P64[Sp - 24] = P64[R1 + 70];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 48;
           call GHC.Show.$fShow(,,,,,,,,)_$cshowList_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL6V_info" {
     sat_sL6V_info:
         const sat_sL6V_entry;
         const 9;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+376;
 },
 sat_sL6U_entry() //  [R1, R2]
         { []
         }
     {offset
       cN3X: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cN3Y; else goto cN3Z;
       cN3Y: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cN3Z: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 40] = P64[R1 + 47];
           P64[Sp - 32] = P64[R1 + 55];
           P64[Sp - 24] = P64[R1 + 63];
           P64[Sp - 16] = P64[R1 + 71];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call GHC.Show.$fShow(,,,,,,,,)_$cshow_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL6U_info" {
     sat_sL6U_info:
         const sat_sL6U_entry;
         const 9;
         const 4294967304;
         const 4294967301;
         const SLKe_srt+368;
 },
 sat_sL6T_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cN45: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cN46; else goto cN47;
       cN46: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cN47: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 56] = P64[R1 + 45];
           P64[Sp - 48] = P64[R1 + 53];
           P64[Sp - 40] = P64[R1 + 61];
           P64[Sp - 32] = P64[R1 + 69];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 56;
           call GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL6T_info" {
     sat_sL6T_info:
         const sat_sL6T_entry;
         const 9;
         const 4294967304;
         const 12884901911;
         const SLKe_srt+360;
 },
 GHC.Show.$fShow(,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cN49: // global
           Hp = Hp + 272;
           if (Hp > HpLim) (likely: False) goto cN4d; else goto cN4c;
       cN4d: // global
           HpAlloc = 272;
           R1 = GHC.Show.$fShow(,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cN4c: // global
           I64[Hp - 264] = sat_sL6V_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           P64[Hp - 240] = R4;
           P64[Hp - 232] = R5;
           P64[Hp - 224] = R6;
           _sL6P::P64 = P64[Sp];
           P64[Hp - 216] = _sL6P::P64;
           _sL6Q::P64 = P64[Sp + 8];
           P64[Hp - 208] = _sL6Q::P64;
           _sL6R::P64 = P64[Sp + 16];
           P64[Hp - 200] = _sL6R::P64;
           _sL6S::P64 = P64[Sp + 24];
           P64[Hp - 192] = _sL6S::P64;
           I64[Hp - 184] = sat_sL6U_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           P64[Hp - 160] = R4;
           P64[Hp - 152] = R5;
           P64[Hp - 144] = R6;
           P64[Hp - 136] = _sL6P::P64;
           P64[Hp - 128] = _sL6Q::P64;
           P64[Hp - 120] = _sL6R::P64;
           P64[Hp - 112] = _sL6S::P64;
           I64[Hp - 104] = sat_sL6T_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           P64[Hp - 64] = R6;
           P64[Hp - 56] = _sL6P::P64;
           P64[Hp - 48] = _sL6Q::P64;
           P64[Hp - 40] = _sL6R::P64;
           P64[Hp - 32] = _sL6S::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 101;
           P64[Hp - 8] = Hp - 183;
           P64[Hp] = Hp - 262;
           R1 = Hp - 23;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,,)_info" {
     GHC.Show.$fShow(,,,,,,,,)_info:
         const GHC.Show.$fShow(,,,,,,,,)_entry;
         const 0;
         const 64424509454;
         const 38654705664;
         const SLKe_srt+360;
         const 9;
         const GHC.Show.$fShow(,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.707561907 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,,,,)_go2_info;
         const 0;
 },
 sat_sL75_entry() //  [R1]
         { []
         }
     {offset
       cN5a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cN5b; else goto cN5c;
       cN5b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cN5c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,)_go2_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL75_info" {
     sat_sL75_info:
         const sat_sL75_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+392;
 },
 section ""relreadonly" . uN5z_srtd" {
     uN5z_srtd:
         const SLKe_srt+112;
         const 36;
         const 34359738369;
 },
 GHC.Show.$fShow(,,,,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cN5h: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cN5i; else goto cN5j;
       cN5i: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cN5j: // global
           I64[Sp - 16] = block_cN4U_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uN5y; else goto cN4V;
       uN5y: // global
           call _cN4U(R1) args: 0, res: 0, upd: 0;
       cN4V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,,,,)_go2_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uN5z_srtd;
 },
 section ""relreadonly" . uN5A_srtd" {
     uN5A_srtd:
         const SLKe_srt+112;
         const 36;
         const 34359738369;
 },
 _cN4U() //  [R1]
         { []
         }
     {offset
       cN4U: // global
           if (R1 & 7 == 1) goto cN5e; else goto cN5f;
       cN5e: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cN5f: // global
           I64[Sp - 8] = block_cN50_info;
           _sL70::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sL70::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uN5x; else goto cN51;
       uN5x: // global
           call _cN50(R1) args: 0, res: 0, upd: 0;
       cN51: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cN4U_info" {
     block_cN4U_info:
         const _cN4U;
         const 1;
         const 18446744069414584350;
         const uN5A_srtd;
 },
 _cN50() //  [R1]
         { []
         }
     {offset
       cN50: // global
           _sL6X::P64 = P64[Sp + 16];
           _sL70::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cN5q; else goto cN5s;
       cN5q: // global
           R2 = _sL6X::P64;
           R1 = _sL70::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cN5s: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cN5v; else goto cN5u;
       cN5v: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cN5u: // global
           I64[Hp - 48] = sat_sL75_info;
           P64[Hp - 32] = _sL6X::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sL70::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cN50_info" {
     block_cN50_info:
         const _cN50;
         const 2;
         const 4294967326;
         const SLKe_srt+392;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.725747663 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cN66: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2,
                                                           R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_sL7y_entry() //  [R1]
         { []
         }
     {offset
       cN6o: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cN6p; else goto cN6q;
       cN6p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cN6q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL7y_info" {
     sat_sL7y_info:
         const sat_sL7y_entry;
         const 2;
         const 18;
 },
 sat_sL7x_entry() //  [R1]
         { []
         }
     {offset
       cN6w: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cN6x; else goto cN6y;
       cN6x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cN6y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL7x_info" {
     sat_sL7x_info:
         const sat_sL7x_entry;
         const 2;
         const 18;
 },
 sat_sL7w_entry() //  [R1]
         { []
         }
     {offset
       cN6E: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cN6F; else goto cN6G;
       cN6F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cN6G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL7w_info" {
     sat_sL7w_info:
         const sat_sL7w_entry;
         const 2;
         const 18;
 },
 sat_sL7v_entry() //  [R1]
         { []
         }
     {offset
       cN6M: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cN6N; else goto cN6O;
       cN6N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cN6O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL7v_info" {
     sat_sL7v_info:
         const sat_sL7v_entry;
         const 2;
         const 18;
 },
 sat_sL7u_entry() //  [R1]
         { []
         }
     {offset
       cN6U: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cN6V; else goto cN6W;
       cN6V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cN6W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL7u_info" {
     sat_sL7u_info:
         const sat_sL7u_entry;
         const 2;
         const 18;
 },
 sat_sL7t_entry() //  [R1]
         { []
         }
     {offset
       cN72: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cN73; else goto cN74;
       cN73: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cN74: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL7t_info" {
     sat_sL7t_info:
         const sat_sL7t_entry;
         const 2;
         const 18;
 },
 sat_sL7s_entry() //  [R1]
         { []
         }
     {offset
       cN7a: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cN7b; else goto cN7c;
       cN7b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cN7c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL7s_info" {
     sat_sL7s_info:
         const sat_sL7s_entry;
         const 2;
         const 18;
 },
 sat_sL7r_entry() //  [R1]
         { []
         }
     {offset
       cN7i: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cN7j; else goto cN7k;
       cN7j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cN7k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL7r_info" {
     sat_sL7r_info:
         const sat_sL7r_entry;
         const 2;
         const 18;
 },
 sat_sL7I_entry() //  [R1]
         { []
         }
     {offset
       cN7m: // global
           _sL7I::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cN7n; else goto cN7o;
       cN7o: // global
           Hp = Hp + 472;
           if (Hp > HpLim) (likely: False) goto cN7q; else goto cN7p;
       cN7q: // global
           HpAlloc = 472;
           goto cN7n;
       cN7n: // global
           R1 = _sL7I::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cN7p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sL7I::P64;
           _sL77::P64 = P64[_sL7I::P64 + 16];
           _sL78::P64 = P64[_sL7I::P64 + 24];
           _sL79::P64 = P64[_sL7I::P64 + 32];
           _sL7a::P64 = P64[_sL7I::P64 + 40];
           _sL7b::P64 = P64[_sL7I::P64 + 48];
           _sL7c::P64 = P64[_sL7I::P64 + 56];
           _sL7d::P64 = P64[_sL7I::P64 + 64];
           _sL7e::P64 = P64[_sL7I::P64 + 72];
           _sL7h::P64 = P64[_sL7I::P64 + 80];
           _sL7j::P64 = P64[_sL7I::P64 + 88];
           _sL7k::P64 = P64[_sL7I::P64 + 96];
           _sL7l::P64 = P64[_sL7I::P64 + 104];
           _sL7m::P64 = P64[_sL7I::P64 + 112];
           _sL7n::P64 = P64[_sL7I::P64 + 120];
           _sL7o::P64 = P64[_sL7I::P64 + 128];
           _sL7p::P64 = P64[_sL7I::P64 + 136];
           _sL7q::P64 = P64[_sL7I::P64 + 144];
           I64[Hp - 464] = :_con_info;
           P64[Hp - 456] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 448] = _sL7h::P64;
           I64[Hp - 440] = sat_sL7y_info;
           P64[Hp - 424] = _sL7e::P64;
           P64[Hp - 416] = _sL7q::P64;
           I64[Hp - 408] = :_con_info;
           P64[Hp - 400] = Hp - 440;
           P64[Hp - 392] = GHC.Types.[]_closure+1;
           I64[Hp - 384] = sat_sL7x_info;
           P64[Hp - 368] = _sL7d::P64;
           P64[Hp - 360] = _sL7p::P64;
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = Hp - 384;
           P64[Hp - 336] = Hp - 406;
           I64[Hp - 328] = sat_sL7w_info;
           P64[Hp - 312] = _sL7c::P64;
           P64[Hp - 304] = _sL7o::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = Hp - 350;
           I64[Hp - 272] = sat_sL7v_info;
           P64[Hp - 256] = _sL7b::P64;
           P64[Hp - 248] = _sL7n::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sL7u_info;
           P64[Hp - 200] = _sL7a::P64;
           P64[Hp - 192] = _sL7m::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sL7t_info;
           P64[Hp - 144] = _sL79::P64;
           P64[Hp - 136] = _sL7l::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sL7s_info;
           P64[Hp - 88] = _sL78::P64;
           P64[Hp - 80] = _sL7k::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sL7r_info;
           P64[Hp - 32] = _sL77::P64;
           P64[Hp - 24] = _sL7j::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 462;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,)_go2_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL7I_info" {
     sat_sL7I_info:
         const sat_sL7I_entry;
         const 17;
         const 4294967311;
         const SLKe_srt+392;
 },
 GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cN7r: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cN7t; else goto cN7u;
       cN7t: // global
           R1 = GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       cN7u: // global
           I64[Sp - 32] = block_cN6a_info;
           R1 = P64[Sp + 32];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 24] = R3;
           P64[Sp + 32] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uN7y; else goto cN6b;
       uN7y: // global
           call _cN6a(R1) args: 0, res: 0, upd: 0;
       cN6b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 47244640256;
         const SLKe_srt+392;
         const 11;
         const GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_slow;
 },
 _cN6a() //  [R1]
         { []
         }
     {offset
       cN6a: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto cN7x; else goto cN7w;
       cN7x: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cN7w: // global
           _sL7j::P64 = P64[R1 + 7];
           _sL7k::P64 = P64[R1 + 15];
           _sL7l::P64 = P64[R1 + 23];
           _sL7m::P64 = P64[R1 + 31];
           _sL7n::P64 = P64[R1 + 39];
           _sL7o::P64 = P64[R1 + 47];
           _sL7p::P64 = P64[R1 + 55];
           _sL7q::P64 = P64[R1 + 63];
           I64[Hp - 168] = sat_sL7I_info;
           P64[Hp - 152] = P64[Sp + 64];
           P64[Hp - 144] = P64[Sp + 56];
           P64[Hp - 136] = P64[Sp + 8];
           P64[Hp - 128] = P64[Sp + 16];
           P64[Hp - 120] = P64[Sp + 24];
           P64[Hp - 112] = P64[Sp + 32];
           P64[Hp - 104] = P64[Sp + 40];
           P64[Hp - 96] = P64[Sp + 48];
           P64[Hp - 88] = P64[Sp + 72];
           P64[Hp - 80] = _sL7j::P64;
           P64[Hp - 72] = _sL7k::P64;
           P64[Hp - 64] = _sL7l::P64;
           P64[Hp - 56] = _sL7m::P64;
           P64[Hp - 48] = _sL7n::P64;
           P64[Hp - 40] = _sL7o::P64;
           P64[Hp - 32] = _sL7p::P64;
           P64[Hp - 24] = _sL7q::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 168;
           R1 = Hp - 14;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cN6a_info" {
     block_cN6a_info:
         const _cN6a;
         const 9;
         const 4294967326;
         const SLKe_srt+392;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.75351824 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cN9G: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,)_$cshow_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 40, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,,,)_$cshow_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cN9K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cN9L; else goto cN9M;
       cN9L: // global
           R1 = GHC.Show.$fShow(,,,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cN9M: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 16];
           P64[Sp + 8] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 38654705664;
         const SLKe_srt+400;
         const 9;
         const GHC.Show.$fShow(,,,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.760359924 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cNa2: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,)_$cshowList_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_sL82_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cNab: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cNac; else goto cNad;
       cNac: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNad: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 48] = P64[R1 + 46];
           P64[Sp - 40] = P64[R1 + 54];
           P64[Sp - 32] = P64[R1 + 62];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 48;
           call GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL82_info" {
     sat_sL82_info:
         const sat_sL82_entry;
         const 8;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+400;
 },
 GHC.Show.$fShow(,,,,,,,)_$cshowList_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cNae: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cNai; else goto cNah;
       cNai: // global
           HpAlloc = 72;
           R1 = GHC.Show.$fShow(,,,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cNah: // global
           I64[Hp - 64] = sat_sL82_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = R6;
           P64[Hp - 16] = P64[Sp];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = Hp - 62;
           Sp = Sp + 40;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 42949672960;
         const SLKe_srt+400;
         const 10;
         const GHC.Show.$fShow(,,,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.771014227 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,,,)_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       cNaC: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,,)_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sL8d_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cNaL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNaM; else goto cNaN;
       cNaM: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNaN: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 40] = P64[R1 + 46];
           P64[Sp - 32] = P64[R1 + 54];
           P64[Sp - 24] = P64[R1 + 62];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call GHC.Show.$fShow(,,,,,,,)_$cshowList_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL8d_info" {
     sat_sL8d_info:
         const sat_sL8d_entry;
         const 8;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+416;
 },
 sat_sL8c_entry() //  [R1, R2]
         { []
         }
     {offset
       cNaT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cNaU; else goto cNaV;
       cNaU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cNaV: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 32] = P64[R1 + 47];
           P64[Sp - 24] = P64[R1 + 55];
           P64[Sp - 16] = P64[R1 + 63];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call GHC.Show.$fShow(,,,,,,,)_$cshow_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL8c_info" {
     sat_sL8c_info:
         const sat_sL8c_entry;
         const 8;
         const 4294967304;
         const 4294967301;
         const SLKe_srt+408;
 },
 sat_sL8b_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cNb1: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cNb2; else goto cNb3;
       cNb2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cNb3: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 48] = P64[R1 + 45];
           P64[Sp - 40] = P64[R1 + 53];
           P64[Sp - 32] = P64[R1 + 61];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 48;
           call GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL8b_info" {
     sat_sL8b_info:
         const sat_sL8b_entry;
         const 8;
         const 4294967304;
         const 12884901911;
         const SLKe_srt+400;
 },
 GHC.Show.$fShow(,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNb5: // global
           Hp = Hp + 248;
           if (Hp > HpLim) (likely: False) goto cNb9; else goto cNb8;
       cNb9: // global
           HpAlloc = 248;
           R1 = GHC.Show.$fShow(,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cNb8: // global
           I64[Hp - 240] = sat_sL8d_info;
           P64[Hp - 232] = R2;
           P64[Hp - 224] = R3;
           P64[Hp - 216] = R4;
           P64[Hp - 208] = R5;
           P64[Hp - 200] = R6;
           _sL88::P64 = P64[Sp];
           P64[Hp - 192] = _sL88::P64;
           _sL89::P64 = P64[Sp + 8];
           P64[Hp - 184] = _sL89::P64;
           _sL8a::P64 = P64[Sp + 16];
           P64[Hp - 176] = _sL8a::P64;
           I64[Hp - 168] = sat_sL8c_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           P64[Hp - 144] = R4;
           P64[Hp - 136] = R5;
           P64[Hp - 128] = R6;
           P64[Hp - 120] = _sL88::P64;
           P64[Hp - 112] = _sL89::P64;
           P64[Hp - 104] = _sL8a::P64;
           I64[Hp - 96] = sat_sL8b_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           P64[Hp - 56] = R6;
           P64[Hp - 48] = _sL88::P64;
           P64[Hp - 40] = _sL89::P64;
           P64[Hp - 32] = _sL8a::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 93;
           P64[Hp - 8] = Hp - 167;
           P64[Hp] = Hp - 238;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,,)_info" {
     GHC.Show.$fShow(,,,,,,,)_info:
         const GHC.Show.$fShow(,,,,,,,)_entry;
         const 0;
         const 64424509454;
         const 34359738368;
         const SLKe_srt+400;
         const 8;
         const GHC.Show.$fShow(,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.785988817 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,,,)_go2_info;
         const 0;
 },
 sat_sL8n_entry() //  [R1]
         { []
         }
     {offset
       cNc3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNc4; else goto cNc5;
       cNc4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNc5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,)_go2_entry(R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL8n_info" {
     sat_sL8n_info:
         const sat_sL8n_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+432;
 },
 section ""relreadonly" . uNcs_srtd" {
     uNcs_srtd:
         const SLKe_srt+112;
         const 41;
         const 1099511627777;
 },
 GHC.Show.$fShow(,,,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cNca: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cNcb; else goto cNcc;
       cNcb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNcc: // global
           I64[Sp - 16] = block_cNbN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uNcr; else goto cNbO;
       uNcr: // global
           call _cNbN(R1) args: 0, res: 0, upd: 0;
       cNbO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,,,)_go2_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uNcs_srtd;
 },
 section ""relreadonly" . uNct_srtd" {
     uNct_srtd:
         const SLKe_srt+112;
         const 41;
         const 1099511627777;
 },
 _cNbN() //  [R1]
         { []
         }
     {offset
       cNbN: // global
           if (R1 & 7 == 1) goto cNc7; else goto cNc8;
       cNc7: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cNc8: // global
           I64[Sp - 8] = block_cNbT_info;
           _sL8i::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sL8i::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uNcq; else goto cNbU;
       uNcq: // global
           call _cNbT(R1) args: 0, res: 0, upd: 0;
       cNbU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cNbN_info" {
     block_cNbN_info:
         const _cNbN;
         const 1;
         const 18446744069414584350;
         const uNct_srtd;
 },
 _cNbT() //  [R1]
         { []
         }
     {offset
       cNbT: // global
           _sL8f::P64 = P64[Sp + 16];
           _sL8i::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cNcj; else goto cNcl;
       cNcj: // global
           R2 = _sL8f::P64;
           R1 = _sL8i::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cNcl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cNco; else goto cNcn;
       cNco: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cNcn: // global
           I64[Hp - 48] = sat_sL8n_info;
           P64[Hp - 32] = _sL8f::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sL8i::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNbT_info" {
     block_cNbT_info:
         const _cNbT;
         const 2;
         const 4294967326;
         const SLKe_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.803809523 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cNcZ: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,)_$cshowsPrec_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_sL8N_entry() //  [R1]
         { []
         }
     {offset
       cNdh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNdi; else goto cNdj;
       cNdi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNdj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL8N_info" {
     sat_sL8N_info:
         const sat_sL8N_entry;
         const 2;
         const 18;
 },
 sat_sL8M_entry() //  [R1]
         { []
         }
     {offset
       cNdp: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNdq; else goto cNdr;
       cNdq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNdr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL8M_info" {
     sat_sL8M_info:
         const sat_sL8M_entry;
         const 2;
         const 18;
 },
 sat_sL8L_entry() //  [R1]
         { []
         }
     {offset
       cNdx: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNdy; else goto cNdz;
       cNdy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNdz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL8L_info" {
     sat_sL8L_info:
         const sat_sL8L_entry;
         const 2;
         const 18;
 },
 sat_sL8K_entry() //  [R1]
         { []
         }
     {offset
       cNdF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNdG; else goto cNdH;
       cNdG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNdH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL8K_info" {
     sat_sL8K_info:
         const sat_sL8K_entry;
         const 2;
         const 18;
 },
 sat_sL8J_entry() //  [R1]
         { []
         }
     {offset
       cNdN: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNdO; else goto cNdP;
       cNdO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNdP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL8J_info" {
     sat_sL8J_info:
         const sat_sL8J_entry;
         const 2;
         const 18;
 },
 sat_sL8I_entry() //  [R1]
         { []
         }
     {offset
       cNdV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNdW; else goto cNdX;
       cNdW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNdX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL8I_info" {
     sat_sL8I_info:
         const sat_sL8I_entry;
         const 2;
         const 18;
 },
 sat_sL8H_entry() //  [R1]
         { []
         }
     {offset
       cNe3: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNe4; else goto cNe5;
       cNe4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNe5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL8H_info" {
     sat_sL8H_info:
         const sat_sL8H_entry;
         const 2;
         const 18;
 },
 sat_sL8W_entry() //  [R1]
         { []
         }
     {offset
       cNe7: // global
           _sL8W::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cNe8; else goto cNe9;
       cNe9: // global
           Hp = Hp + 416;
           if (Hp > HpLim) (likely: False) goto cNeb; else goto cNea;
       cNeb: // global
           HpAlloc = 416;
           goto cNe8;
       cNe8: // global
           R1 = _sL8W::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNea: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sL8W::P64;
           _sL8p::P64 = P64[_sL8W::P64 + 16];
           _sL8q::P64 = P64[_sL8W::P64 + 24];
           _sL8r::P64 = P64[_sL8W::P64 + 32];
           _sL8s::P64 = P64[_sL8W::P64 + 40];
           _sL8t::P64 = P64[_sL8W::P64 + 48];
           _sL8u::P64 = P64[_sL8W::P64 + 56];
           _sL8v::P64 = P64[_sL8W::P64 + 64];
           _sL8y::P64 = P64[_sL8W::P64 + 72];
           _sL8A::P64 = P64[_sL8W::P64 + 80];
           _sL8B::P64 = P64[_sL8W::P64 + 88];
           _sL8C::P64 = P64[_sL8W::P64 + 96];
           _sL8D::P64 = P64[_sL8W::P64 + 104];
           _sL8E::P64 = P64[_sL8W::P64 + 112];
           _sL8F::P64 = P64[_sL8W::P64 + 120];
           _sL8G::P64 = P64[_sL8W::P64 + 128];
           I64[Hp - 408] = :_con_info;
           P64[Hp - 400] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 392] = _sL8y::P64;
           I64[Hp - 384] = sat_sL8N_info;
           P64[Hp - 368] = _sL8v::P64;
           P64[Hp - 360] = _sL8G::P64;
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = Hp - 384;
           P64[Hp - 336] = GHC.Types.[]_closure+1;
           I64[Hp - 328] = sat_sL8M_info;
           P64[Hp - 312] = _sL8u::P64;
           P64[Hp - 304] = _sL8F::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = Hp - 350;
           I64[Hp - 272] = sat_sL8L_info;
           P64[Hp - 256] = _sL8t::P64;
           P64[Hp - 248] = _sL8E::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sL8K_info;
           P64[Hp - 200] = _sL8s::P64;
           P64[Hp - 192] = _sL8D::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sL8J_info;
           P64[Hp - 144] = _sL8r::P64;
           P64[Hp - 136] = _sL8C::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sL8I_info;
           P64[Hp - 88] = _sL8q::P64;
           P64[Hp - 80] = _sL8B::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sL8H_info;
           P64[Hp - 32] = _sL8p::P64;
           P64[Hp - 24] = _sL8A::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 406;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,)_go2_entry(R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL8W_info" {
     sat_sL8W_info:
         const sat_sL8W_entry;
         const 15;
         const 4294967311;
         const SLKe_srt+432;
 },
 GHC.Show.$fShow(,,,,,,)_$cshowsPrec_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cNec: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cNee; else goto cNef;
       cNee: // global
           R1 = GHC.Show.$fShow(,,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cNef: // global
           I64[Sp - 32] = block_cNd3_info;
           R1 = P64[Sp + 24];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 16] = R3;
           P64[Sp + 24] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uNej; else goto cNd4;
       uNej: // global
           call _cNd3(R1) args: 0, res: 0, upd: 0;
       cNd4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 42949672960;
         const SLKe_srt+432;
         const 10;
         const GHC.Show.$fShow(,,,,,,)_$cshowsPrec_slow;
 },
 _cNd3() //  [R1]
         { []
         }
     {offset
       cNd3: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto cNei; else goto cNeh;
       cNei: // global
           HpAlloc = 160;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cNeh: // global
           _sL8A::P64 = P64[R1 + 7];
           _sL8B::P64 = P64[R1 + 15];
           _sL8C::P64 = P64[R1 + 23];
           _sL8D::P64 = P64[R1 + 31];
           _sL8E::P64 = P64[R1 + 39];
           _sL8F::P64 = P64[R1 + 47];
           _sL8G::P64 = P64[R1 + 55];
           I64[Hp - 152] = sat_sL8W_info;
           P64[Hp - 136] = P64[Sp + 56];
           P64[Hp - 128] = P64[Sp + 48];
           P64[Hp - 120] = P64[Sp + 8];
           P64[Hp - 112] = P64[Sp + 16];
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 32];
           P64[Hp - 88] = P64[Sp + 40];
           P64[Hp - 80] = P64[Sp + 64];
           P64[Hp - 72] = _sL8A::P64;
           P64[Hp - 64] = _sL8B::P64;
           P64[Hp - 56] = _sL8C::P64;
           P64[Hp - 48] = _sL8D::P64;
           P64[Hp - 40] = _sL8E::P64;
           P64[Hp - 32] = _sL8F::P64;
           P64[Hp - 24] = _sL8G::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 152;
           R1 = Hp - 14;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNd3_info" {
     block_cNd3_info:
         const _cNd3;
         const 8;
         const 4294967326;
         const SLKe_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.828854111 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cNge: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,)_$cshow_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 32, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,,)_$cshow_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNgi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNgj; else goto cNgk;
       cNgj: // global
           R1 = GHC.Show.$fShow(,,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cNgk: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,,)_$cshowsPrec_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 34359738368;
         const SLKe_srt+440;
         const 8;
         const GHC.Show.$fShow(,,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.835701422 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cNgz: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,)_$cshowList_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sL9e_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cNgI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNgJ; else goto cNgK;
       cNgJ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNgK: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 40] = P64[R1 + 46];
           P64[Sp - 32] = P64[R1 + 54];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call GHC.Show.$fShow(,,,,,,)_$cshowsPrec_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL9e_info" {
     sat_sL9e_info:
         const sat_sL9e_entry;
         const 7;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+440;
 },
 GHC.Show.$fShow(,,,,,,)_$cshowList_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNgL: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cNgP; else goto cNgO;
       cNgP: // global
           HpAlloc = 64;
           R1 = GHC.Show.$fShow(,,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cNgO: // global
           I64[Hp - 56] = sat_sL9e_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = Hp - 54;
           Sp = Sp + 32;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 38654705664;
         const SLKe_srt+440;
         const 9;
         const GHC.Show.$fShow(,,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.846385597 UTC

[section ""data" . GHC.Show.$fShow(,,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,,)_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       cNh7: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,,)_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_sL9o_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cNhg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cNhh; else goto cNhi;
       cNhh: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNhi: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 32] = P64[R1 + 46];
           P64[Sp - 24] = P64[R1 + 54];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call GHC.Show.$fShow(,,,,,,)_$cshowList_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL9o_info" {
     sat_sL9o_info:
         const sat_sL9o_entry;
         const 7;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+456;
 },
 sat_sL9n_entry() //  [R1, R2]
         { []
         }
     {offset
       cNho: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cNhp; else goto cNhq;
       cNhp: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cNhq: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 47];
           P64[Sp - 16] = P64[R1 + 55];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call GHC.Show.$fShow(,,,,,,)_$cshow_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL9n_info" {
     sat_sL9n_info:
         const sat_sL9n_entry;
         const 7;
         const 4294967304;
         const 4294967301;
         const SLKe_srt+448;
 },
 sat_sL9m_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cNhw: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNhx; else goto cNhy;
       cNhx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cNhy: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 40] = P64[R1 + 45];
           P64[Sp - 32] = P64[R1 + 53];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call GHC.Show.$fShow(,,,,,,)_$cshowsPrec_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sL9m_info" {
     sat_sL9m_info:
         const sat_sL9m_entry;
         const 7;
         const 4294967304;
         const 12884901911;
         const SLKe_srt+440;
 },
 GHC.Show.$fShow(,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNhA: // global
           Hp = Hp + 224;
           if (Hp > HpLim) (likely: False) goto cNhE; else goto cNhD;
       cNhE: // global
           HpAlloc = 224;
           R1 = GHC.Show.$fShow(,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cNhD: // global
           I64[Hp - 216] = sat_sL9o_info;
           P64[Hp - 208] = R2;
           P64[Hp - 200] = R3;
           P64[Hp - 192] = R4;
           P64[Hp - 184] = R5;
           P64[Hp - 176] = R6;
           _sL9k::P64 = P64[Sp];
           P64[Hp - 168] = _sL9k::P64;
           _sL9l::P64 = P64[Sp + 8];
           P64[Hp - 160] = _sL9l::P64;
           I64[Hp - 152] = sat_sL9n_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           P64[Hp - 128] = R4;
           P64[Hp - 120] = R5;
           P64[Hp - 112] = R6;
           P64[Hp - 104] = _sL9k::P64;
           P64[Hp - 96] = _sL9l::P64;
           I64[Hp - 88] = sat_sL9m_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           P64[Hp - 48] = R6;
           P64[Hp - 40] = _sL9k::P64;
           P64[Hp - 32] = _sL9l::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 85;
           P64[Hp - 8] = Hp - 151;
           P64[Hp] = Hp - 214;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,,)_info" {
     GHC.Show.$fShow(,,,,,,)_info:
         const GHC.Show.$fShow(,,,,,,)_entry;
         const 0;
         const 64424509454;
         const 30064771072;
         const SLKe_srt+440;
         const 7;
         const GHC.Show.$fShow(,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.859975019 UTC

[section ""data" . GHC.Show.$fShow(,,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,,)_go2_info;
         const 0;
 },
 sat_sL9y_entry() //  [R1]
         { []
         }
     {offset
       cNiv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNiw; else goto cNix;
       cNiw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNix: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,)_go2_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL9y_info" {
     sat_sL9y_info:
         const sat_sL9y_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+472;
 },
 section ""relreadonly" . uNiU_srtd" {
     uNiU_srtd:
         const SLKe_srt+112;
         const 46;
         const 35184372088833;
 },
 GHC.Show.$fShow(,,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cNiC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cNiD; else goto cNiE;
       cNiD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNiE: // global
           I64[Sp - 16] = block_cNif_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uNiT; else goto cNig;
       uNiT: // global
           call _cNif(R1) args: 0, res: 0, upd: 0;
       cNig: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,,)_go2_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uNiU_srtd;
 },
 section ""relreadonly" . uNiV_srtd" {
     uNiV_srtd:
         const SLKe_srt+112;
         const 46;
         const 35184372088833;
 },
 _cNif() //  [R1]
         { []
         }
     {offset
       cNif: // global
           if (R1 & 7 == 1) goto cNiz; else goto cNiA;
       cNiz: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cNiA: // global
           I64[Sp - 8] = block_cNil_info;
           _sL9t::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sL9t::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uNiS; else goto cNim;
       uNiS: // global
           call _cNil(R1) args: 0, res: 0, upd: 0;
       cNim: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cNif_info" {
     block_cNif_info:
         const _cNif;
         const 1;
         const 18446744069414584350;
         const uNiV_srtd;
 },
 _cNil() //  [R1]
         { []
         }
     {offset
       cNil: // global
           _sL9q::P64 = P64[Sp + 16];
           _sL9t::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cNiL; else goto cNiN;
       cNiL: // global
           R2 = _sL9q::P64;
           R1 = _sL9t::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cNiN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cNiQ; else goto cNiP;
       cNiQ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cNiP: // global
           I64[Hp - 48] = sat_sL9y_info;
           P64[Hp - 32] = _sL9q::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sL9t::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNil_info" {
     block_cNil_info:
         const _cNil;
         const 2;
         const 4294967326;
         const SLKe_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.877144399 UTC

[section ""data" . GHC.Show.$fShow(,,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cNjr: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,)_$cshowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sL9V_entry() //  [R1]
         { []
         }
     {offset
       cNjJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNjK; else goto cNjL;
       cNjK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNjL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL9V_info" {
     sat_sL9V_info:
         const sat_sL9V_entry;
         const 2;
         const 18;
 },
 sat_sL9U_entry() //  [R1]
         { []
         }
     {offset
       cNjR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNjS; else goto cNjT;
       cNjS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNjT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL9U_info" {
     sat_sL9U_info:
         const sat_sL9U_entry;
         const 2;
         const 18;
 },
 sat_sL9T_entry() //  [R1]
         { []
         }
     {offset
       cNjZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNk0; else goto cNk1;
       cNk0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNk1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL9T_info" {
     sat_sL9T_info:
         const sat_sL9T_entry;
         const 2;
         const 18;
 },
 sat_sL9S_entry() //  [R1]
         { []
         }
     {offset
       cNk7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNk8; else goto cNk9;
       cNk8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNk9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL9S_info" {
     sat_sL9S_info:
         const sat_sL9S_entry;
         const 2;
         const 18;
 },
 sat_sL9R_entry() //  [R1]
         { []
         }
     {offset
       cNkf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNkg; else goto cNkh;
       cNkg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNkh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL9R_info" {
     sat_sL9R_info:
         const sat_sL9R_entry;
         const 2;
         const 18;
 },
 sat_sL9Q_entry() //  [R1]
         { []
         }
     {offset
       cNkn: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNko; else goto cNkp;
       cNko: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNkp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sL9Q_info" {
     sat_sL9Q_info:
         const sat_sL9Q_entry;
         const 2;
         const 18;
 },
 sat_sLa3_entry() //  [R1]
         { []
         }
     {offset
       cNkr: // global
           _sLa3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cNks; else goto cNkt;
       cNkt: // global
           Hp = Hp + 360;
           if (Hp > HpLim) (likely: False) goto cNkv; else goto cNku;
       cNkv: // global
           HpAlloc = 360;
           goto cNks;
       cNks: // global
           R1 = _sLa3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNku: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLa3::P64;
           _sL9A::P64 = P64[_sLa3::P64 + 16];
           _sL9B::P64 = P64[_sLa3::P64 + 24];
           _sL9C::P64 = P64[_sLa3::P64 + 32];
           _sL9D::P64 = P64[_sLa3::P64 + 40];
           _sL9E::P64 = P64[_sLa3::P64 + 48];
           _sL9F::P64 = P64[_sLa3::P64 + 56];
           _sL9I::P64 = P64[_sLa3::P64 + 64];
           _sL9K::P64 = P64[_sLa3::P64 + 72];
           _sL9L::P64 = P64[_sLa3::P64 + 80];
           _sL9M::P64 = P64[_sLa3::P64 + 88];
           _sL9N::P64 = P64[_sLa3::P64 + 96];
           _sL9O::P64 = P64[_sLa3::P64 + 104];
           _sL9P::P64 = P64[_sLa3::P64 + 112];
           I64[Hp - 352] = :_con_info;
           P64[Hp - 344] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 336] = _sL9I::P64;
           I64[Hp - 328] = sat_sL9V_info;
           P64[Hp - 312] = _sL9F::P64;
           P64[Hp - 304] = _sL9P::P64;
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = Hp - 328;
           P64[Hp - 280] = GHC.Types.[]_closure+1;
           I64[Hp - 272] = sat_sL9U_info;
           P64[Hp - 256] = _sL9E::P64;
           P64[Hp - 248] = _sL9O::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = Hp - 294;
           I64[Hp - 216] = sat_sL9T_info;
           P64[Hp - 200] = _sL9D::P64;
           P64[Hp - 192] = _sL9N::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sL9S_info;
           P64[Hp - 144] = _sL9C::P64;
           P64[Hp - 136] = _sL9M::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sL9R_info;
           P64[Hp - 88] = _sL9B::P64;
           P64[Hp - 80] = _sL9L::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sL9Q_info;
           P64[Hp - 32] = _sL9A::P64;
           P64[Hp - 24] = _sL9K::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 350;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,)_go2_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLa3_info" {
     sat_sLa3_info:
         const sat_sLa3_entry;
         const 13;
         const 4294967311;
         const SLKe_srt+472;
 },
 GHC.Show.$fShow(,,,,,)_$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNkw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cNky; else goto cNkz;
       cNky: // global
           R1 = GHC.Show.$fShow(,,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cNkz: // global
           I64[Sp - 32] = block_cNjv_info;
           R1 = P64[Sp + 16];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 8] = R3;
           P64[Sp + 16] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uNkD; else goto cNjw;
       uNkD: // global
           call _cNjv(R1) args: 0, res: 0, upd: 0;
       cNjw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 38654705664;
         const SLKe_srt+472;
         const 9;
         const GHC.Show.$fShow(,,,,,)_$cshowsPrec_slow;
 },
 _cNjv() //  [R1]
         { []
         }
     {offset
       cNjv: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cNkC; else goto cNkB;
       cNkC: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cNkB: // global
           _sL9K::P64 = P64[R1 + 7];
           _sL9L::P64 = P64[R1 + 15];
           _sL9M::P64 = P64[R1 + 23];
           _sL9N::P64 = P64[R1 + 31];
           _sL9O::P64 = P64[R1 + 39];
           _sL9P::P64 = P64[R1 + 47];
           I64[Hp - 136] = sat_sLa3_info;
           P64[Hp - 120] = P64[Sp + 48];
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = P64[Sp + 8];
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 32];
           P64[Hp - 72] = P64[Sp + 56];
           P64[Hp - 64] = _sL9K::P64;
           P64[Hp - 56] = _sL9L::P64;
           P64[Hp - 48] = _sL9M::P64;
           P64[Hp - 40] = _sL9N::P64;
           P64[Hp - 32] = _sL9O::P64;
           P64[Hp - 24] = _sL9P::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 136;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNjv_info" {
     block_cNjv_info:
         const _cNjv;
         const 7;
         const 4294967326;
         const SLKe_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.901148894 UTC

[section ""data" . GHC.Show.$fShow(,,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,)_$cshow_slow() //  [R1]
         { []
         }
     {offset
       cNml: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,)_$cshow_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,,,)_$cshow_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNmp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNmq; else goto cNmr;
       cNmq: // global
           R1 = GHC.Show.$fShow(,,,,,)_$cshow_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cNmr: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,)_$cshowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 30064771072;
         const SLKe_srt+480;
         const 7;
         const GHC.Show.$fShow(,,,,,)_$cshow_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.907871769 UTC

[section ""data" . GHC.Show.$fShow(,,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cNmF: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,,)_$cshowList_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sLaj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cNmO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cNmP; else goto cNmQ;
       cNmP: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNmQ: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 32] = P64[R1 + 46];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call GHC.Show.$fShow(,,,,,)_$cshowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLaj_info" {
     sat_sLaj_info:
         const sat_sLaj_entry;
         const 6;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+480;
 },
 GHC.Show.$fShow(,,,,,)_$cshowList_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNmR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cNmV; else goto cNmU;
       cNmV: // global
           HpAlloc = 56;
           R1 = GHC.Show.$fShow(,,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cNmU: // global
           I64[Hp - 48] = sat_sLaj_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = P64[Sp];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = Hp - 46;
           Sp = Sp + 24;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 34359738368;
         const SLKe_srt+480;
         const 8;
         const GHC.Show.$fShow(,,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.918707404 UTC

[section ""data" . GHC.Show.$fShow(,,,,,)_closure" {
     GHC.Show.$fShow(,,,,,)_closure:
         const GHC.Show.$fShow(,,,,,)_info;
         const 0;
 },
 sat_sLas_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cNnj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cNnk; else goto cNnl;
       cNnk: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNnl: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 46];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call GHC.Show.$fShow(,,,,,)_$cshowList_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLas_info" {
     sat_sLas_info:
         const sat_sLas_entry;
         const 6;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+496;
 },
 sat_sLar_entry() //  [R1, R2]
         { []
         }
     {offset
       cNnr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNns; else goto cNnt;
       cNns: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cNnt: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 16] = P64[R1 + 47];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,,)_$cshow_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLar_info" {
     sat_sLar_info:
         const sat_sLar_entry;
         const 6;
         const 4294967304;
         const 4294967301;
         const SLKe_srt+488;
 },
 sat_sLaq_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cNnz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cNnA; else goto cNnB;
       cNnA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cNnB: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 32] = P64[R1 + 45];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call GHC.Show.$fShow(,,,,,)_$cshowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLaq_info" {
     sat_sLaq_info:
         const sat_sLaq_entry;
         const 6;
         const 4294967304;
         const 12884901911;
         const SLKe_srt+480;
 },
 GHC.Show.$fShow(,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNnD: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cNnH; else goto cNnG;
       cNnH: // global
           HpAlloc = 200;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,,)_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cNnG: // global
           I64[Hp - 192] = sat_sLas_info;
           P64[Hp - 184] = R2;
           P64[Hp - 176] = R3;
           P64[Hp - 168] = R4;
           P64[Hp - 160] = R5;
           P64[Hp - 152] = R6;
           _sLap::P64 = P64[Sp];
           P64[Hp - 144] = _sLap::P64;
           I64[Hp - 136] = sat_sLar_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           P64[Hp - 104] = R5;
           P64[Hp - 96] = R6;
           P64[Hp - 88] = _sLap::P64;
           I64[Hp - 80] = sat_sLaq_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = _sLap::P64;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 77;
           P64[Hp - 8] = Hp - 135;
           P64[Hp] = Hp - 190;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,,)_info" {
     GHC.Show.$fShow(,,,,,)_info:
         const GHC.Show.$fShow(,,,,,)_entry;
         const 0;
         const 64424509454;
         const 25769803802;
         const SLKe_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.931484306 UTC

[section ""data" . GHC.Show.$fShow(,,,,)_go2_closure" {
     GHC.Show.$fShow(,,,,)_go2_closure:
         const GHC.Show.$fShow(,,,,)_go2_info;
         const 0;
 },
 sat_sLaC_entry() //  [R1]
         { []
         }
     {offset
       cNot: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNou; else goto cNov;
       cNou: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNov: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,)_go2_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLaC_info" {
     sat_sLaC_info:
         const sat_sLaC_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+512;
 },
 section ""relreadonly" . uNoS_srtd" {
     uNoS_srtd:
         const SLKe_srt+112;
         const 51;
         const 1125899906842625;
 },
 GHC.Show.$fShow(,,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cNoA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cNoB; else goto cNoC;
       cNoB: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNoC: // global
           I64[Sp - 16] = block_cNod_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uNoR; else goto cNoe;
       uNoR: // global
           call _cNod(R1) args: 0, res: 0, upd: 0;
       cNoe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,)_go2_info" {
     GHC.Show.$fShow(,,,,)_go2_info:
         const GHC.Show.$fShow(,,,,)_go2_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uNoS_srtd;
 },
 section ""relreadonly" . uNoT_srtd" {
     uNoT_srtd:
         const SLKe_srt+112;
         const 51;
         const 1125899906842625;
 },
 _cNod() //  [R1]
         { []
         }
     {offset
       cNod: // global
           if (R1 & 7 == 1) goto cNox; else goto cNoy;
       cNox: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cNoy: // global
           I64[Sp - 8] = block_cNoj_info;
           _sLax::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sLax::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uNoQ; else goto cNok;
       uNoQ: // global
           call _cNoj(R1) args: 0, res: 0, upd: 0;
       cNok: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cNod_info" {
     block_cNod_info:
         const _cNod;
         const 1;
         const 18446744069414584350;
         const uNoT_srtd;
 },
 _cNoj() //  [R1]
         { []
         }
     {offset
       cNoj: // global
           _sLau::P64 = P64[Sp + 16];
           _sLax::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cNoJ; else goto cNoL;
       cNoJ: // global
           R2 = _sLau::P64;
           R1 = _sLax::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cNoL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cNoO; else goto cNoN;
       cNoO: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cNoN: // global
           I64[Hp - 48] = sat_sLaC_info;
           P64[Hp - 32] = _sLau::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sLax::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNoj_info" {
     block_cNoj_info:
         const _cNoj;
         const 2;
         const 4294967326;
         const SLKe_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.947642566 UTC

[section ""data" . GHC.Show.$fShow(,,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cNpp: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,)_$cshowsPrec_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sLaW_entry() //  [R1]
         { []
         }
     {offset
       cNpH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNpI; else goto cNpJ;
       cNpI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNpJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLaW_info" {
     sat_sLaW_info:
         const sat_sLaW_entry;
         const 2;
         const 18;
 },
 sat_sLaV_entry() //  [R1]
         { []
         }
     {offset
       cNpP: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNpQ; else goto cNpR;
       cNpQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNpR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLaV_info" {
     sat_sLaV_info:
         const sat_sLaV_entry;
         const 2;
         const 18;
 },
 sat_sLaU_entry() //  [R1]
         { []
         }
     {offset
       cNpX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNpY; else goto cNpZ;
       cNpY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNpZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLaU_info" {
     sat_sLaU_info:
         const sat_sLaU_entry;
         const 2;
         const 18;
 },
 sat_sLaT_entry() //  [R1]
         { []
         }
     {offset
       cNq5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNq6; else goto cNq7;
       cNq6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNq7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLaT_info" {
     sat_sLaT_info:
         const sat_sLaT_entry;
         const 2;
         const 18;
 },
 sat_sLaS_entry() //  [R1]
         { []
         }
     {offset
       cNqd: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNqe; else goto cNqf;
       cNqe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNqf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLaS_info" {
     sat_sLaS_info:
         const sat_sLaS_entry;
         const 2;
         const 18;
 },
 sat_sLb3_entry() //  [R1]
         { []
         }
     {offset
       cNqh: // global
           _sLb3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cNqi; else goto cNqj;
       cNqj: // global
           Hp = Hp + 304;
           if (Hp > HpLim) (likely: False) goto cNql; else goto cNqk;
       cNql: // global
           HpAlloc = 304;
           goto cNqi;
       cNqi: // global
           R1 = _sLb3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNqk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLb3::P64;
           _sLaE::P64 = P64[_sLb3::P64 + 16];
           _sLaF::P64 = P64[_sLb3::P64 + 24];
           _sLaG::P64 = P64[_sLb3::P64 + 32];
           _sLaH::P64 = P64[_sLb3::P64 + 40];
           _sLaI::P64 = P64[_sLb3::P64 + 48];
           _sLaL::P64 = P64[_sLb3::P64 + 56];
           _sLaN::P64 = P64[_sLb3::P64 + 64];
           _sLaO::P64 = P64[_sLb3::P64 + 72];
           _sLaP::P64 = P64[_sLb3::P64 + 80];
           _sLaQ::P64 = P64[_sLb3::P64 + 88];
           _sLaR::P64 = P64[_sLb3::P64 + 96];
           I64[Hp - 296] = :_con_info;
           P64[Hp - 288] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 280] = _sLaL::P64;
           I64[Hp - 272] = sat_sLaW_info;
           P64[Hp - 256] = _sLaI::P64;
           P64[Hp - 248] = _sLaR::P64;
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = Hp - 272;
           P64[Hp - 224] = GHC.Types.[]_closure+1;
           I64[Hp - 216] = sat_sLaV_info;
           P64[Hp - 200] = _sLaH::P64;
           P64[Hp - 192] = _sLaQ::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = Hp - 238;
           I64[Hp - 160] = sat_sLaU_info;
           P64[Hp - 144] = _sLaG::P64;
           P64[Hp - 136] = _sLaP::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sLaT_info;
           P64[Hp - 88] = _sLaF::P64;
           P64[Hp - 80] = _sLaO::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sLaS_info;
           P64[Hp - 32] = _sLaE::P64;
           P64[Hp - 24] = _sLaN::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 294;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,)_go2_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLb3_info" {
     sat_sLb3_info:
         const sat_sLb3_entry;
         const 11;
         const 4294967311;
         const SLKe_srt+512;
 },
 GHC.Show.$fShow(,,,,)_$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNqm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cNqo; else goto cNqp;
       cNqo: // global
           R1 = GHC.Show.$fShow(,,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cNqp: // global
           I64[Sp - 32] = block_cNpt_info;
           R1 = P64[Sp + 8];
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R3;
           P64[Sp + 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uNqt; else goto cNpu;
       uNqt: // global
           call _cNpt(R1) args: 0, res: 0, upd: 0;
       cNpu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 34359738368;
         const SLKe_srt+512;
         const 8;
         const GHC.Show.$fShow(,,,,)_$cshowsPrec_slow;
 },
 _cNpt() //  [R1]
         { []
         }
     {offset
       cNpt: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cNqs; else goto cNqr;
       cNqs: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cNqr: // global
           _sLaN::P64 = P64[R1 + 7];
           _sLaO::P64 = P64[R1 + 15];
           _sLaP::P64 = P64[R1 + 23];
           _sLaQ::P64 = P64[R1 + 31];
           _sLaR::P64 = P64[R1 + 39];
           I64[Hp - 120] = sat_sLb3_info;
           P64[Hp - 104] = P64[Sp + 40];
           P64[Hp - 96] = P64[Sp + 32];
           P64[Hp - 88] = P64[Sp + 8];
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 48];
           P64[Hp - 56] = _sLaN::P64;
           P64[Hp - 48] = _sLaO::P64;
           P64[Hp - 40] = _sLaP::P64;
           P64[Hp - 32] = _sLaQ::P64;
           P64[Hp - 24] = _sLaR::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 120;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNpt_info" {
     block_cNpt_info:
         const _cNpt;
         const 6;
         const 4294967326;
         const SLKe_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.969621923 UTC

[section ""data" . GHC.Show.$fShow(,,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,)_$cshow_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNs1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNs2; else goto cNs3;
       cNs2: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,)_$cshow_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cNs3: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 16] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 8] = P64[Sp];
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,)_$cshowsPrec_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,,)_$cshow_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const SLKe_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.975278017 UTC

[section ""data" . GHC.Show.$fShow(,,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,,)_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow(,,,,)_$cshowList_slow() //  [R1]
         { []
         }
     {offset
       cNse: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,,)_$cshowList_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_sLbh_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cNsn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cNso; else goto cNsp;
       cNso: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNsp: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 24] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call GHC.Show.$fShow(,,,,)_$cshowsPrec_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLbh_info" {
     sat_sLbh_info:
         const sat_sLbh_entry;
         const 5;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+520;
 },
 GHC.Show.$fShow(,,,,)_$cshowList_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNsq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cNsu; else goto cNst;
       cNsu: // global
           HpAlloc = 48;
           R1 = GHC.Show.$fShow(,,,,)_$cshowList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cNst: // global
           I64[Hp - 40] = sat_sLbh_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R4 = P64[Sp + 8];
           R3 = P64[Sp];
           R2 = Hp - 38;
           Sp = Sp + 16;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,,)_$cshowList_entry;
         const 0;
         const 21474836494;
         const 30064771072;
         const SLKe_srt+520;
         const 7;
         const GHC.Show.$fShow(,,,,)_$cshowList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.985340252 UTC

[section ""data" . GHC.Show.$fShow(,,,,)_closure" {
     GHC.Show.$fShow(,,,,)_closure:
         const GHC.Show.$fShow(,,,,)_info;
         const 0;
 },
 sat_sLbp_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cNsQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNsR; else goto cNsS;
       cNsR: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNsS: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,,)_$cshowList_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLbp_info" {
     sat_sLbp_info:
         const sat_sLbp_entry;
         const 5;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+536;
 },
 sat_sLbo_entry() //  [R1, R2]
         { []
         }
     {offset
       cNsY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cNsZ; else goto cNt0;
       cNsZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cNt0: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Show.$fShow(,,,,)_$cshow_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLbo_info" {
     sat_sLbo_info:
         const sat_sLbo_entry;
         const 5;
         const 4294967304;
         const 4294967301;
         const SLKe_srt+528;
 },
 sat_sLbn_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cNt6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cNt7; else goto cNt8;
       cNt7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cNt8: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call GHC.Show.$fShow(,,,,)_$cshowsPrec_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLbn_info" {
     sat_sLbn_info:
         const sat_sLbn_entry;
         const 5;
         const 4294967304;
         const 12884901911;
         const SLKe_srt+520;
 },
 GHC.Show.$fShow(,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNta: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto cNte; else goto cNtd;
       cNte: // global
           HpAlloc = 176;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,,)_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cNtd: // global
           I64[Hp - 168] = sat_sLbp_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           P64[Hp - 144] = R4;
           P64[Hp - 136] = R5;
           P64[Hp - 128] = R6;
           I64[Hp - 120] = sat_sLbo_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           I64[Hp - 72] = sat_sLbn_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 69;
           P64[Hp - 8] = Hp - 119;
           P64[Hp] = Hp - 166;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,,)_info" {
     GHC.Show.$fShow(,,,,)_info:
         const GHC.Show.$fShow(,,,,)_entry;
         const 0;
         const 64424509454;
         const 21474836505;
         const SLKe_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:32.997875161 UTC

[section ""data" . GHC.Show.$fShow(,,,)_go2_closure" {
     GHC.Show.$fShow(,,,)_go2_closure:
         const GHC.Show.$fShow(,,,)_go2_info;
         const 0;
 },
 sat_sLbz_entry() //  [R1]
         { []
         }
     {offset
       cNtX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNtY; else goto cNtZ;
       cNtY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNtZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,)_go2_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLbz_info" {
     sat_sLbz_info:
         const sat_sLbz_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+552;
 },
 section ""relreadonly" . uNum_srtd" {
     uNum_srtd:
         const SLKe_srt+112;
         const 56;
         const 36028797018963969;
 },
 GHC.Show.$fShow(,,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cNu4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cNu5; else goto cNu6;
       cNu5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNu6: // global
           I64[Sp - 16] = block_cNtH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uNul; else goto cNtI;
       uNul: // global
           call _cNtH(R1) args: 0, res: 0, upd: 0;
       cNtI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,)_go2_info" {
     GHC.Show.$fShow(,,,)_go2_info:
         const GHC.Show.$fShow(,,,)_go2_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uNum_srtd;
 },
 section ""relreadonly" . uNun_srtd" {
     uNun_srtd:
         const SLKe_srt+112;
         const 56;
         const 36028797018963969;
 },
 _cNtH() //  [R1]
         { []
         }
     {offset
       cNtH: // global
           if (R1 & 7 == 1) goto cNu1; else goto cNu2;
       cNu1: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cNu2: // global
           I64[Sp - 8] = block_cNtN_info;
           _sLbu::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sLbu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uNuk; else goto cNtO;
       uNuk: // global
           call _cNtN(R1) args: 0, res: 0, upd: 0;
       cNtO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cNtH_info" {
     block_cNtH_info:
         const _cNtH;
         const 1;
         const 18446744069414584350;
         const uNun_srtd;
 },
 _cNtN() //  [R1]
         { []
         }
     {offset
       cNtN: // global
           _sLbr::P64 = P64[Sp + 16];
           _sLbu::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cNud; else goto cNuf;
       cNud: // global
           R2 = _sLbr::P64;
           R1 = _sLbu::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cNuf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cNui; else goto cNuh;
       cNui: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cNuh: // global
           I64[Hp - 48] = sat_sLbz_info;
           P64[Hp - 32] = _sLbr::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sLbu::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNtN_info" {
     block_cNtN_info:
         const _cNtN;
         const 2;
         const 4294967326;
         const SLKe_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.015087841 UTC

[section ""data" . GHC.Show.$w$cshowsPrec2_closure" {
     GHC.Show.$w$cshowsPrec2_closure:
         const GHC.Show.$w$cshowsPrec2_info;
         const 0;
 },
 GHC.Show.$w$cshowsPrec2_slow() //  [R1]
         { []
         }
     {offset
       cNuT: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$w$cshowsPrec2_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sLbN_entry() //  [R1]
         { []
         }
     {offset
       cNv6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNv7; else goto cNv8;
       cNv7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNv8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLbN_info" {
     sat_sLbN_info:
         const sat_sLbN_entry;
         const 2;
         const 18;
 },
 sat_sLbM_entry() //  [R1]
         { []
         }
     {offset
       cNve: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNvf; else goto cNvg;
       cNvf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNvg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLbM_info" {
     sat_sLbM_info:
         const sat_sLbM_entry;
         const 2;
         const 18;
 },
 sat_sLbL_entry() //  [R1]
         { []
         }
     {offset
       cNvm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNvn; else goto cNvo;
       cNvn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNvo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLbL_info" {
     sat_sLbL_info:
         const sat_sLbL_entry;
         const 2;
         const 18;
 },
 sat_sLbK_entry() //  [R1]
         { []
         }
     {offset
       cNvu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNvv; else goto cNvw;
       cNvv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNvw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLbK_info" {
     sat_sLbK_info:
         const sat_sLbK_entry;
         const 2;
         const 18;
 },
 sat_sLbT_entry() //  [R1]
         { []
         }
     {offset
       cNvy: // global
           _sLbT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cNvz; else goto cNvA;
       cNvA: // global
           Hp = Hp + 248;
           if (Hp > HpLim) (likely: False) goto cNvC; else goto cNvB;
       cNvC: // global
           HpAlloc = 248;
           goto cNvz;
       cNvz: // global
           R1 = _sLbT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNvB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLbT::P64;
           _sLbB::P64 = P64[_sLbT::P64 + 16];
           _sLbC::P64 = P64[_sLbT::P64 + 24];
           _sLbD::P64 = P64[_sLbT::P64 + 32];
           _sLbE::P64 = P64[_sLbT::P64 + 40];
           _sLbF::P64 = P64[_sLbT::P64 + 48];
           _sLbG::P64 = P64[_sLbT::P64 + 56];
           _sLbH::P64 = P64[_sLbT::P64 + 64];
           _sLbI::P64 = P64[_sLbT::P64 + 72];
           _sLbJ::P64 = P64[_sLbT::P64 + 80];
           I64[Hp - 240] = :_con_info;
           P64[Hp - 232] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 224] = _sLbJ::P64;
           I64[Hp - 216] = sat_sLbN_info;
           P64[Hp - 200] = _sLbE::P64;
           P64[Hp - 192] = _sLbI::P64;
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = Hp - 216;
           P64[Hp - 168] = GHC.Types.[]_closure+1;
           I64[Hp - 160] = sat_sLbM_info;
           P64[Hp - 144] = _sLbD::P64;
           P64[Hp - 136] = _sLbH::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = Hp - 182;
           I64[Hp - 104] = sat_sLbL_info;
           P64[Hp - 88] = _sLbC::P64;
           P64[Hp - 80] = _sLbG::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sLbK_info;
           P64[Hp - 32] = _sLbB::P64;
           P64[Hp - 24] = _sLbF::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 238;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,)_go2_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLbT_info" {
     sat_sLbT_info:
         const sat_sLbT_entry;
         const 9;
         const 4294967311;
         const SLKe_srt+552;
 },
 GHC.Show.$w$cshowsPrec2_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNvD: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cNvH; else goto cNvG;
       cNvH: // global
           HpAlloc = 88;
           R1 = GHC.Show.$w$cshowsPrec2_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cNvG: // global
           I64[Hp - 80] = sat_sLbT_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 80;
           R1 = GHC.Show.$fShow(,)4_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec2_info" {
     GHC.Show.$w$cshowsPrec2_info:
         const GHC.Show.$w$cshowsPrec2_entry;
         const 0;
         const 12884901902;
         const 38654705664;
         const SLKe_srt+552;
         const 9;
         const GHC.Show.$w$cshowsPrec2_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.040313478 UTC

[section ""data" . GHC.Show.$fShow(,,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,,)_$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cNwP: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$fShow(,,,)_$cshowsPrec_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Show.$fShow(,,,)_$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNwW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cNx2; else goto cNx3;
       cNx2: // global
           R1 = GHC.Show.$fShow(,,,)_$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cNx3: // global
           I64[Sp - 32] = block_cNwT_info;
           R1 = P64[Sp];
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           P64[Sp] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uNx8; else goto cNwU;
       uNx8: // global
           call _cNwT(R1) args: 0, res: 0, upd: 0;
       cNwU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 30064771072;
         const SLKe_srt+560;
         const 7;
         const GHC.Show.$fShow(,,,)_$cshowsPrec_slow;
 },
 _cNwT() //  [R1]
         { []
         }
     {offset
       cNwT: // global
           _sLc0::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cNwZ_info;
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 32];
           P64[Sp + 8] = P64[R1 + 15];
           P64[Sp + 16] = P64[R1 + 23];
           P64[Sp + 24] = P64[R1 + 31];
           P64[Sp + 32] = _sLc0::P64;
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec2_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cNwT_info" {
     block_cNwT_info:
         const _cNwT;
         const 5;
         const 4294967326;
         const SLKe_srt+560;
 },
 _cNwZ() //  [R1, R2]
         { []
         }
     {offset
       cNwZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cNx7; else goto cNx6;
       cNx7: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cNx6: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNwZ_info" {
     block_cNwZ_info:
         const _cNwZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.053332782 UTC

[section ""data" . GHC.Show.$fShow(,,,)_$cshow_closure" {
     GHC.Show.$fShow(,,,)_$cshow_closure:
         const GHC.Show.$fShow(,,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,,)_$cshow_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNxB: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNxH; else goto cNxI;
       cNxH: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,)_$cshow_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cNxI: // global
           I64[Sp - 40] = block_cNxy_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uNxN; else goto cNxz;
       uNxN: // global
           call _cNxy(R1) args: 0, res: 0, upd: 0;
       cNxz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,)_$cshow_info" {
     GHC.Show.$fShow(,,,)_$cshow_info:
         const GHC.Show.$fShow(,,,)_$cshow_entry;
         const 0;
         const 21474836494;
         const 21474836505;
         const SLKe_srt+560;
 },
 _cNxy() //  [R1]
         { []
         }
     {offset
       cNxy: // global
           _sLcc::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cNxE_info;
           R6 = P64[R1 + 7];
           R5 = _sLcc::P64;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 23];
           P64[Sp + 16] = P64[R1 + 31];
           P64[Sp + 24] = GHC.Types.[]_closure+1;
           call GHC.Show.$w$cshowsPrec2_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cNxy_info" {
     block_cNxy_info:
         const _cNxy;
         const 4;
         const 4294967326;
         const SLKe_srt+560;
 },
 _cNxE() //  [R1, R2]
         { []
         }
     {offset
       cNxE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cNxM; else goto cNxL;
       cNxM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cNxL: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNxE_info" {
     block_cNxE_info:
         const _cNxE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.063276655 UTC

[section ""data" . GHC.Show.$fShow(,,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,,)_$cshowList_info;
         const 0;
 },
 sat_sLcC_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cNyl: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cNyr; else goto cNys;
       cNyr: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNys: // global
           I64[Sp - 48] = block_cNyi_info;
           _sLcm::P64 = P64[R1 + 6];
           _sLcn::P64 = P64[R1 + 14];
           _sLco::P64 = P64[R1 + 22];
           _sLcp::P64 = P64[R1 + 30];
           R1 = R2;
           P64[Sp - 40] = _sLcm::P64;
           P64[Sp - 32] = _sLcn::P64;
           P64[Sp - 24] = _sLco::P64;
           P64[Sp - 16] = _sLcp::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uNyx; else goto cNyj;
       uNyx: // global
           call _cNyi(R1) args: 0, res: 0, upd: 0;
       cNyj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLcC_info" {
     sat_sLcC_info:
         const sat_sLcC_entry;
         const 4;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+560;
 },
 _cNyi() //  [R1]
         { []
         }
     {offset
       cNyi: // global
           _sLct::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cNyo_info;
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = P64[R1 + 15];
           P64[Sp + 16] = P64[R1 + 23];
           P64[Sp + 24] = P64[R1 + 31];
           P64[Sp + 32] = _sLct::P64;
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec2_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cNyi_info" {
     block_cNyi_info:
         const _cNyi;
         const 5;
         const 4294967326;
         const SLKe_srt+560;
 },
 _cNyo() //  [R1, R2]
         { []
         }
     {offset
       cNyo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cNyw; else goto cNyv;
       cNyw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cNyv: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNyo_info" {
     block_cNyo_info:
         const _cNyo;
         const 0;
         const 30;
 },
 GHC.Show.$fShow(,,,)_$cshowList_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNyy: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cNyC; else goto cNyB;
       cNyC: // global
           HpAlloc = 40;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,)_$cshowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cNyB: // global
           I64[Hp - 32] = sat_sLcC_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R4 = P64[Sp];
           R3 = R6;
           R2 = Hp - 30;
           Sp = Sp + 8;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,)_$cshowList_info" {
     GHC.Show.$fShow(,,,)_$cshowList_info:
         const GHC.Show.$fShow(,,,)_$cshowList_entry;
         const 0;
         const 38654705678;
         const 25769803802;
         const SLKe_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.074947686 UTC

[section ""data" . GHC.Show.$fShow(,,,)_closure" {
     GHC.Show.$fShow(,,,)_closure:
         const GHC.Show.$fShow(,,,)_info;
         const 0;
 },
 sat_sLcJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cNz9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cNza; else goto cNzb;
       cNza: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNzb: // global
           R6 = R2;
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Show.$fShow(,,,)_$cshowList_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLcJ_info" {
     sat_sLcJ_info:
         const sat_sLcJ_entry;
         const 4;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+584;
 },
 sat_sLcI_entry() //  [R1, R2]
         { []
         }
     {offset
       cNzh: // global
           R6 = R2;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Show.$fShow(,,,)_$cshow_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLcI_info" {
     sat_sLcI_info:
         const sat_sLcI_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const SLKe_srt+576;
 },
 sat_sLcH_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cNzp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNzq; else goto cNzr;
       cNzq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cNzr: // global
           R6 = R2;
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,,)_$cshowsPrec_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLcH_info" {
     sat_sLcH_info:
         const sat_sLcH_entry;
         const 4;
         const 4294967304;
         const 12884901911;
         const SLKe_srt+568;
 },
 GHC.Show.$fShow(,,,)_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cNzt: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cNzx; else goto cNzw;
       cNzx: // global
           HpAlloc = 152;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,,)_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cNzw: // global
           I64[Hp - 144] = sat_sLcJ_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           P64[Hp - 112] = R5;
           I64[Hp - 104] = sat_sLcI_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           I64[Hp - 64] = sat_sLcH_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 61;
           P64[Hp - 8] = Hp - 103;
           P64[Hp] = Hp - 142;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,,)_info" {
     GHC.Show.$fShow(,,,)_info:
         const GHC.Show.$fShow(,,,)_entry;
         const 0;
         const 64424509454;
         const 17179869208;
         const SLKe_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.087219951 UTC

[section ""data" . GHC.Show.$fShow(,,)_go2_closure" {
     GHC.Show.$fShow(,,)_go2_closure:
         const GHC.Show.$fShow(,,)_go2_info;
         const 0;
 },
 sat_sLcT_entry() //  [R1]
         { []
         }
     {offset
       cNAf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNAg; else goto cNAh;
       cNAg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNAh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,)_go2_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLcT_info" {
     sat_sLcT_info:
         const sat_sLcT_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+600;
 },
 section ""relreadonly" . uNAE_srtd" {
     uNAE_srtd:
         const SLKe_srt+112;
         const 62;
         const 2305843009213693953;
 },
 GHC.Show.$fShow(,,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cNAm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cNAn; else goto cNAo;
       cNAn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNAo: // global
           I64[Sp - 16] = block_cNzZ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uNAD; else goto cNA0;
       uNAD: // global
           call _cNzZ(R1) args: 0, res: 0, upd: 0;
       cNA0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,)_go2_info" {
     GHC.Show.$fShow(,,)_go2_info:
         const GHC.Show.$fShow(,,)_go2_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uNAE_srtd;
 },
 section ""relreadonly" . uNAF_srtd" {
     uNAF_srtd:
         const SLKe_srt+112;
         const 62;
         const 2305843009213693953;
 },
 _cNzZ() //  [R1]
         { []
         }
     {offset
       cNzZ: // global
           if (R1 & 7 == 1) goto cNAj; else goto cNAk;
       cNAj: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cNAk: // global
           I64[Sp - 8] = block_cNA5_info;
           _sLcO::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sLcO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uNAC; else goto cNA6;
       uNAC: // global
           call _cNA5(R1) args: 0, res: 0, upd: 0;
       cNA6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cNzZ_info" {
     block_cNzZ_info:
         const _cNzZ;
         const 1;
         const 18446744069414584350;
         const uNAF_srtd;
 },
 _cNA5() //  [R1]
         { []
         }
     {offset
       cNA5: // global
           _sLcL::P64 = P64[Sp + 16];
           _sLcO::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cNAv; else goto cNAx;
       cNAv: // global
           R2 = _sLcL::P64;
           R1 = _sLcO::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cNAx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cNAA; else goto cNAz;
       cNAA: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cNAz: // global
           I64[Hp - 48] = sat_sLcT_info;
           P64[Hp - 32] = _sLcL::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sLcO::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNA5_info" {
     block_cNA5_info:
         const _cNA5;
         const 2;
         const 4294967326;
         const SLKe_srt+600;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.101910786 UTC

[section ""data" . GHC.Show.$w$cshowsPrec1_closure" {
     GHC.Show.$w$cshowsPrec1_closure:
         const GHC.Show.$w$cshowsPrec1_info;
         const 0;
 },
 GHC.Show.$w$cshowsPrec1_slow() //  [R1]
         { []
         }
     {offset
       cNBb: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Show.$w$cshowsPrec1_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_sLd4_entry() //  [R1]
         { []
         }
     {offset
       cNBo: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNBp; else goto cNBq;
       cNBp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNBq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLd4_info" {
     sat_sLd4_info:
         const sat_sLd4_entry;
         const 2;
         const 18;
 },
 sat_sLd3_entry() //  [R1]
         { []
         }
     {offset
       cNBw: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNBx; else goto cNBy;
       cNBx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNBy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLd3_info" {
     sat_sLd3_info:
         const sat_sLd3_entry;
         const 2;
         const 18;
 },
 sat_sLd2_entry() //  [R1]
         { []
         }
     {offset
       cNBE: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNBF; else goto cNBG;
       cNBF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNBG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLd2_info" {
     sat_sLd2_info:
         const sat_sLd2_entry;
         const 2;
         const 18;
 },
 sat_sLd9_entry() //  [R1]
         { []
         }
     {offset
       cNBI: // global
           _sLd9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cNBJ; else goto cNBK;
       cNBK: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cNBM; else goto cNBL;
       cNBM: // global
           HpAlloc = 192;
           goto cNBJ;
       cNBJ: // global
           R1 = _sLd9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNBL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLd9::P64;
           _sLcV::P64 = P64[_sLd9::P64 + 16];
           _sLcW::P64 = P64[_sLd9::P64 + 24];
           _sLcX::P64 = P64[_sLd9::P64 + 32];
           _sLcY::P64 = P64[_sLd9::P64 + 40];
           _sLcZ::P64 = P64[_sLd9::P64 + 48];
           _sLd0::P64 = P64[_sLd9::P64 + 56];
           _sLd1::P64 = P64[_sLd9::P64 + 64];
           I64[Hp - 184] = :_con_info;
           P64[Hp - 176] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 168] = _sLd1::P64;
           I64[Hp - 160] = sat_sLd4_info;
           P64[Hp - 144] = _sLcX::P64;
           P64[Hp - 136] = _sLd0::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = Hp - 160;
           P64[Hp - 112] = GHC.Types.[]_closure+1;
           I64[Hp - 104] = sat_sLd3_info;
           P64[Hp - 88] = _sLcW::P64;
           P64[Hp - 80] = _sLcZ::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = Hp - 126;
           I64[Hp - 48] = sat_sLd2_info;
           P64[Hp - 32] = _sLcV::P64;
           P64[Hp - 24] = _sLcY::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 182;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,,)_go2_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLd9_info" {
     sat_sLd9_info:
         const sat_sLd9_entry;
         const 7;
         const 4294967311;
         const SLKe_srt+600;
 },
 GHC.Show.$w$cshowsPrec1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNBN: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cNBR; else goto cNBQ;
       cNBR: // global
           HpAlloc = 72;
           R1 = GHC.Show.$w$cshowsPrec1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cNBQ: // global
           I64[Hp - 64] = sat_sLd9_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 64;
           R1 = GHC.Show.$fShow(,)4_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec1_info" {
     GHC.Show.$w$cshowsPrec1_info:
         const GHC.Show.$w$cshowsPrec1_entry;
         const 0;
         const 12884901902;
         const 30064771072;
         const SLKe_srt+600;
         const 7;
         const GHC.Show.$w$cshowsPrec1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.116704787 UTC

[section ""data" . GHC.Show.$fShow(,,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,,)_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow(,,)_$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNCR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cNCX; else goto cNCY;
       cNCX: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,)_$cshowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cNCY: // global
           I64[Sp - 32] = block_cNCO_info;
           R1 = R6;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uND3; else goto cNCP;
       uND3: // global
           call _cNCO(R1) args: 0, res: 0, upd: 0;
       cNCP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const SLKe_srt+608;
 },
 _cNCO() //  [R1]
         { []
         }
     {offset
       cNCO: // global
           _sLdf::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cNCU_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 16] = P64[R1 + 23];
           P64[Sp + 24] = _sLdf::P64;
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec1_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cNCO_info" {
     block_cNCO_info:
         const _cNCO;
         const 4;
         const 4294967326;
         const SLKe_srt+608;
 },
 _cNCU() //  [R1, R2]
         { []
         }
     {offset
       cNCU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cND2; else goto cND1;
       cND2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cND1: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNCU_info" {
     block_cNCU_info:
         const _cNCU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.125938173 UTC

[section ""data" . GHC.Show.$fShow(,,)_$cshow_closure" {
     GHC.Show.$fShow(,,)_$cshow_closure:
         const GHC.Show.$fShow(,,)_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow(,,)_$cshow_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cNDs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cNDy; else goto cNDz;
       cNDy: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,)_$cshow_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cNDz: // global
           I64[Sp - 32] = block_cNDp_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uNDE; else goto cNDq;
       uNDE: // global
           call _cNDp(R1) args: 0, res: 0, upd: 0;
       cNDq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,)_$cshow_info" {
     GHC.Show.$fShow(,,)_$cshow_info:
         const GHC.Show.$fShow(,,)_$cshow_entry;
         const 0;
         const 21474836494;
         const 17179869208;
         const SLKe_srt+608;
 },
 _cNDp() //  [R1]
         { []
         }
     {offset
       cNDp: // global
           _sLdp::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cNDv_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = _sLdp::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = P64[R1 + 23];
           P64[Sp + 16] = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec1_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cNDp_info" {
     block_cNDp_info:
         const _cNDp;
         const 3;
         const 4294967326;
         const SLKe_srt+608;
 },
 _cNDv() //  [R1, R2]
         { []
         }
     {offset
       cNDv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cNDD; else goto cNDC;
       cNDD: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cNDC: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNDv_info" {
     block_cNDv_info:
         const _cNDv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.136654366 UTC

[section ""data" . GHC.Show.$fShow(,,)_$cshowList_closure" {
     GHC.Show.$fShow(,,)_$cshowList_closure:
         const GHC.Show.$fShow(,,)_$cshowList_info;
         const 0;
 },
 sat_sLdM_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cNEa: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNEg; else goto cNEh;
       cNEg: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNEh: // global
           I64[Sp - 40] = block_cNE7_info;
           _sLdy::P64 = P64[R1 + 6];
           _sLdz::P64 = P64[R1 + 14];
           _sLdA::P64 = P64[R1 + 22];
           R1 = R2;
           P64[Sp - 32] = _sLdy::P64;
           P64[Sp - 24] = _sLdz::P64;
           P64[Sp - 16] = _sLdA::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uNEm; else goto cNE8;
       uNEm: // global
           call _cNE7(R1) args: 0, res: 0, upd: 0;
       cNE8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLdM_info" {
     sat_sLdM_info:
         const sat_sLdM_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+608;
 },
 _cNE7() //  [R1]
         { []
         }
     {offset
       cNE7: // global
           _sLdE::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cNEd_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 16] = P64[R1 + 23];
           P64[Sp + 24] = _sLdE::P64;
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec1_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cNE7_info" {
     block_cNE7_info:
         const _cNE7;
         const 4;
         const 4294967326;
         const SLKe_srt+608;
 },
 _cNEd() //  [R1, R2]
         { []
         }
     {offset
       cNEd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cNEl; else goto cNEk;
       cNEl: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cNEk: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNEd_info" {
     block_cNEd_info:
         const _cNEd;
         const 0;
         const 30;
 },
 GHC.Show.$fShow(,,)_$cshowList_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNEn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cNEr; else goto cNEq;
       cNEr: // global
           HpAlloc = 32;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,)_$cshowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cNEq: // global
           I64[Hp - 24] = sat_sLdM_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R4 = R6;
           R3 = R5;
           R2 = Hp - 22;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,)_$cshowList_info" {
     GHC.Show.$fShow(,,)_$cshowList_info:
         const GHC.Show.$fShow(,,)_$cshowList_entry;
         const 0;
         const 38654705678;
         const 21474836505;
         const SLKe_srt+608;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.148113623 UTC

[section ""data" . GHC.Show.$fShow(,,)_closure" {
     GHC.Show.$fShow(,,)_closure:
         const GHC.Show.$fShow(,,)_info;
         const 0;
 },
 sat_sLdS_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cNEW: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Show.$fShow(,,)_$cshowList_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLdS_info" {
     sat_sLdS_info:
         const sat_sLdS_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const SLKe_srt+632;
 },
 sat_sLdR_entry() //  [R1, R2]
         { []
         }
     {offset
       cNF4: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Show.$fShow(,,)_$cshow_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLdR_info" {
     sat_sLdR_info:
         const sat_sLdR_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const SLKe_srt+624;
 },
 sat_sLdQ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cNFc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cNFd; else goto cNFe;
       cNFd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cNFe: // global
           R6 = R3;
           R5 = R2;
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Show.$fShow(,,)_$cshowsPrec_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLdQ_info" {
     sat_sLdQ_info:
         const sat_sLdQ_entry;
         const 3;
         const 4294967304;
         const 12884901911;
         const SLKe_srt+616;
 },
 GHC.Show.$fShow(,,)_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cNFg: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cNFk; else goto cNFj;
       cNFk: // global
           HpAlloc = 128;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,,)_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cNFj: // global
           I64[Hp - 120] = sat_sLdS_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           I64[Hp - 88] = sat_sLdR_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = sat_sLdQ_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 53;
           P64[Hp - 8] = Hp - 87;
           P64[Hp] = Hp - 118;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,,)_info" {
     GHC.Show.$fShow(,,)_info:
         const GHC.Show.$fShow(,,)_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const SLKe_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.159725336 UTC

[section ""data" . GHC.Show.$fShow(,)_go2_closure" {
     GHC.Show.$fShow(,)_go2_closure:
         const GHC.Show.$fShow(,)_go2_info;
         const 0;
 },
 sat_sLe2_entry() //  [R1]
         { []
         }
     {offset
       cNG1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNG2; else goto cNG3;
       cNG2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNG3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go2_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLe2_info" {
     sat_sLe2_info:
         const sat_sLe2_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+648;
 },
 section ""relreadonly" . uNGq_srtd" {
     uNGq_srtd:
         const SLKe_srt+112;
         const 68;
         const 1;
         const 8;
 },
 GHC.Show.$fShow(,)_go2_entry() //  [R2, R3]
         { []
         }
     {offset
       cNG8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cNG9; else goto cNGa;
       cNG9: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,)_go2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNGa: // global
           I64[Sp - 16] = block_cNFL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uNGp; else goto cNFM;
       uNGp: // global
           call _cNFL(R1) args: 0, res: 0, upd: 0;
       cNFM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,)_go2_info" {
     GHC.Show.$fShow(,)_go2_info:
         const GHC.Show.$fShow(,)_go2_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uNGq_srtd;
 },
 section ""relreadonly" . uNGr_srtd" {
     uNGr_srtd:
         const SLKe_srt+112;
         const 68;
         const 1;
         const 8;
 },
 _cNFL() //  [R1]
         { []
         }
     {offset
       cNFL: // global
           if (R1 & 7 == 1) goto cNG5; else goto cNG6;
       cNG5: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cNG6: // global
           I64[Sp - 8] = block_cNFR_info;
           _sLdX::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sLdX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uNGo; else goto cNFS;
       uNGo: // global
           call _cNFR(R1) args: 0, res: 0, upd: 0;
       cNFS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cNFL_info" {
     block_cNFL_info:
         const _cNFL;
         const 1;
         const 18446744069414584350;
         const uNGr_srtd;
 },
 _cNFR() //  [R1]
         { []
         }
     {offset
       cNFR: // global
           _sLdU::P64 = P64[Sp + 16];
           _sLdX::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cNGh; else goto cNGj;
       cNGh: // global
           R2 = _sLdU::P64;
           R1 = _sLdX::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cNGj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cNGm; else goto cNGl;
       cNGm: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cNGl: // global
           I64[Hp - 48] = sat_sLe2_info;
           P64[Hp - 32] = _sLdU::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sLdX::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNFR_info" {
     block_cNFR_info:
         const _cNFR;
         const 2;
         const 4294967326;
         const SLKe_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.17292359 UTC

[section ""data" . GHC.Show.$w$s$cshowsPrec_closure" {
     GHC.Show.$w$s$cshowsPrec_closure:
         const GHC.Show.$w$s$cshowsPrec_info;
         const 0;
 },
 sat_sLeh_entry() //  [R1, R2]
         { []
         }
     {offset
       cNHd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cNHe; else goto cNHf;
       cNHe: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cNHf: // global
           I64[Sp - 16] = block_cNHa_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uNHj; else goto cNHb;
       uNHj: // global
           call _cNHa(R1) args: 0, res: 0, upd: 0;
       cNHb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLeh_info" {
     sat_sLeh_info:
         const sat_sLeh_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SLKe_srt+656;
 },
 _cNHa() //  [R1]
         { []
         }
     {offset
       cNHa: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 16] = P64[R1 + 39];
           P64[Sp - 8] = P64[R1 + 47];
           P64[Sp] = P64[R1 + 55];
           Sp = Sp - 16;
           call GHC.Show.$w$cshowsPrec_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNHa_info" {
     block_cNHa_info:
         const _cNHa;
         const 1;
         const 4294967326;
         const SLKe_srt+656;
 },
 sat_sLe7_entry() //  [R1, R2]
         { []
         }
     {offset
       cNHq: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Show.$fShow(,)_$cshowList1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLe7_info" {
     sat_sLe7_info:
         const sat_sLe7_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SLKe_srt+664;
 },
 sat_sLel_entry() //  [R1]
         { []
         }
     {offset
       cNHu: // global
           _sLel::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cNHv; else goto cNHw;
       cNHw: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cNHy; else goto cNHx;
       cNHy: // global
           HpAlloc = 104;
           goto cNHv;
       cNHv: // global
           R1 = _sLel::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNHx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLel::P64;
           _sLe4::P64 = P64[_sLel::P64 + 16];
           _sLe5::P64 = P64[_sLel::P64 + 24];
           _sLe6::P64 = P64[_sLel::P64 + 32];
           I64[Hp - 96] = :_con_info;
           P64[Hp - 88] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 80] = _sLe6::P64;
           I64[Hp - 72] = sat_sLeh_info;
           P64[Hp - 64] = _sLe5::P64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           I64[Hp - 32] = sat_sLe7_info;
           P64[Hp - 24] = _sLe4::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 54;
           R3 = Hp - 94;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go2_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLel_info" {
     sat_sLel_info:
         const sat_sLel_entry;
         const 3;
         const 30064771087;
         const SLKe_srt+648;
 },
 GHC.Show.$w$s$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cNHz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cNHD; else goto cNHC;
       cNHD: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$w$s$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cNHC: // global
           I64[Hp - 32] = sat_sLel_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = GHC.Show.$fShow(,)4_closure+1;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$s$cshowsPrec_info" {
     GHC.Show.$w$s$cshowsPrec_info:
         const GHC.Show.$w$s$cshowsPrec_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const SLKe_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.185982543 UTC

[section ""data" . GHC.Show.$fShow(,)_go1_closure" {
     GHC.Show.$fShow(,)_go1_closure:
         const GHC.Show.$fShow(,)_go1_info;
         const 0;
 },
 sat_sLev_entry() //  [R1]
         { []
         }
     {offset
       cNIz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNIA; else goto cNIB;
       cNIA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNIB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLev_info" {
     sat_sLev_info:
         const sat_sLev_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+680;
 },
 section ""relreadonly" . uNIY_srtd" {
     uNIY_srtd:
         const SLKe_srt+112;
         const 72;
         const 1;
         const 128;
 },
 GHC.Show.$fShow(,)_go1_entry() //  [R2, R3]
         { []
         }
     {offset
       cNIG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cNIH; else goto cNII;
       cNIH: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,)_go1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNII: // global
           I64[Sp - 16] = block_cNIj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uNIX; else goto cNIk;
       uNIX: // global
           call _cNIj(R1) args: 0, res: 0, upd: 0;
       cNIk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,)_go1_info" {
     GHC.Show.$fShow(,)_go1_info:
         const GHC.Show.$fShow(,)_go1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const uNIY_srtd;
 },
 section ""relreadonly" . uNIZ_srtd" {
     uNIZ_srtd:
         const SLKe_srt+112;
         const 72;
         const 1;
         const 128;
 },
 _cNIj() //  [R1]
         { []
         }
     {offset
       cNIj: // global
           if (R1 & 7 == 1) goto cNID; else goto cNIE;
       cNID: // global
           R1 = lvl11_rC0o_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cNIE: // global
           I64[Sp - 8] = block_cNIp_info;
           _sLeq::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sLeq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uNIW; else goto cNIq;
       uNIW: // global
           call _cNIp(R1) args: 0, res: 0, upd: 0;
       cNIq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cNIj_info" {
     block_cNIj_info:
         const _cNIj;
         const 1;
         const 18446744069414584350;
         const uNIZ_srtd;
 },
 _cNIp() //  [R1]
         { []
         }
     {offset
       cNIp: // global
           _sLen::P64 = P64[Sp + 16];
           _sLeq::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cNIP; else goto cNIR;
       cNIP: // global
           R2 = _sLen::P64;
           R1 = _sLeq::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cNIR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cNIU; else goto cNIT;
       cNIU: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cNIT: // global
           I64[Hp - 48] = sat_sLev_info;
           P64[Hp - 32] = _sLen::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sLeq::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNIp_info" {
     block_cNIp_info:
         const _cNIp;
         const 2;
         const 4294967326;
         const SLKe_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.200088639 UTC

[section ""data" . GHC.Show.$fShow(,)_$cshowsPrec_closure" {
     GHC.Show.$fShow(,)_$cshowsPrec_closure:
         const GHC.Show.$fShow(,)_$cshowsPrec_info;
         const 0;
 },
 sat_sLeG_entry() //  [R1]
         { []
         }
     {offset
       cNJM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNJN; else goto cNJO;
       cNJN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNJO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLeG_info" {
     sat_sLeG_info:
         const sat_sLeG_entry;
         const 2;
         const 18;
 },
 sat_sLeF_entry() //  [R1]
         { []
         }
     {offset
       cNJU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNJV; else goto cNJW;
       cNJV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNJW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLeF_info" {
     sat_sLeF_info:
         const sat_sLeF_entry;
         const 2;
         const 18;
 },
 sat_sLeK_entry() //  [R1]
         { []
         }
     {offset
       cNJY: // global
           _sLeK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cNJZ; else goto cNK0;
       cNK0: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cNK2; else goto cNK1;
       cNK2: // global
           HpAlloc = 136;
           goto cNJZ;
       cNJZ: // global
           R1 = _sLeK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNK1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLeK::P64;
           _sLex::P64 = P64[_sLeK::P64 + 16];
           _sLey::P64 = P64[_sLeK::P64 + 24];
           _sLeB::P64 = P64[_sLeK::P64 + 32];
           _sLeD::P64 = P64[_sLeK::P64 + 40];
           _sLeE::P64 = P64[_sLeK::P64 + 48];
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 112] = _sLeB::P64;
           I64[Hp - 104] = sat_sLeG_info;
           P64[Hp - 88] = _sLey::P64;
           P64[Hp - 80] = _sLeE::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = GHC.Types.[]_closure+1;
           I64[Hp - 48] = sat_sLeF_info;
           P64[Hp - 32] = _sLex::P64;
           P64[Hp - 24] = _sLeD::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 126;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLeK_info" {
     sat_sLeK_info:
         const sat_sLeK_entry;
         const 5;
         const 4294967311;
         const SLKe_srt+680;
 },
 GHC.Show.$fShow(,)_$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cNK3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cNK5; else goto cNK6;
       cNK5: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,)_$cshowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cNK6: // global
           I64[Sp - 32] = block_cNJy_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R6;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uNKa; else goto cNJz;
       uNKa: // global
           call _cNJy(R1) args: 0, res: 0, upd: 0;
       cNJz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,)_$cshowsPrec_info" {
     GHC.Show.$fShow(,)_$cshowsPrec_info:
         const GHC.Show.$fShow(,)_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SLKe_srt+680;
 },
 _cNJy() //  [R1]
         { []
         }
     {offset
       cNJy: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cNK9; else goto cNK8;
       cNK9: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cNK8: // global
           _sLeD::P64 = P64[R1 + 7];
           _sLeE::P64 = P64[R1 + 15];
           I64[Hp - 72] = sat_sLeK_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = _sLeD::P64;
           P64[Hp - 24] = _sLeE::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNJy_info" {
     block_cNJy_info:
         const _cNJy;
         const 3;
         const 4294967326;
         const SLKe_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.214533044 UTC

[section ""data" . GHC.Show.$fShow(,)_$cshow_closure" {
     GHC.Show.$fShow(,)_$cshow_closure:
         const GHC.Show.$fShow(,)_$cshow_info;
         const 0;
 },
 sat_sLeS_entry() //  [R1]
         { []
         }
     {offset
       cNLh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNLi; else goto cNLj;
       cNLi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNLj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLeS_info" {
     sat_sLeS_info:
         const sat_sLeS_entry;
         const 2;
         const 18;
 },
 sat_sLeR_entry() //  [R1]
         { []
         }
     {offset
       cNLp: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNLq; else goto cNLr;
       cNLq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNLr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLeR_info" {
     sat_sLeR_info:
         const sat_sLeR_entry;
         const 2;
         const 18;
 },
 sat_sLeW_entry() //  [R1]
         { []
         }
     {offset
       cNLt: // global
           _sLeW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cNLu; else goto cNLv;
       cNLv: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cNLx; else goto cNLw;
       cNLx: // global
           HpAlloc = 136;
           goto cNLu;
       cNLu: // global
           R1 = _sLeW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNLw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLeW::P64;
           _sLeL::P64 = P64[_sLeW::P64 + 16];
           _sLeM::P64 = P64[_sLeW::P64 + 24];
           _sLeP::P64 = P64[_sLeW::P64 + 32];
           _sLeQ::P64 = P64[_sLeW::P64 + 40];
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 112] = GHC.Types.[]_closure+1;
           I64[Hp - 104] = sat_sLeS_info;
           P64[Hp - 88] = _sLeM::P64;
           P64[Hp - 80] = _sLeQ::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = GHC.Types.[]_closure+1;
           I64[Hp - 48] = sat_sLeR_info;
           P64[Hp - 32] = _sLeL::P64;
           P64[Hp - 24] = _sLeP::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 126;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLeW_info" {
     sat_sLeW_info:
         const sat_sLeW_entry;
         const 4;
         const 4294967311;
         const SLKe_srt+680;
 },
 GHC.Show.$fShow(,)_$cshow_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cNLy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cNLA; else goto cNLB;
       cNLA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,)_$cshow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cNLB: // global
           I64[Sp - 24] = block_cNL3_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uNLF; else goto cNL4;
       uNLF: // global
           call _cNL3(R1) args: 0, res: 0, upd: 0;
       cNL4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,)_$cshow_info" {
     GHC.Show.$fShow(,)_$cshow_info:
         const GHC.Show.$fShow(,)_$cshow_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const SLKe_srt+680;
 },
 _cNL3() //  [R1]
         { []
         }
     {offset
       cNL3: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cNLE; else goto cNLD;
       cNLE: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cNLD: // global
           _sLeP::P64 = P64[R1 + 7];
           _sLeQ::P64 = P64[R1 + 15];
           I64[Hp - 64] = sat_sLeW_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _sLeP::P64;
           P64[Hp - 24] = _sLeQ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNL3_info" {
     block_cNL3_info:
         const _cNL3;
         const 2;
         const 4294967326;
         const SLKe_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.229082956 UTC

[section ""data" . GHC.Show.$fShow(,)_$cshowList_closure" {
     GHC.Show.$fShow(,)_$cshowList_closure:
         const GHC.Show.$fShow(,)_$cshowList_info;
         const 0;
 },
 sat_sLf7_entry() //  [R1]
         { []
         }
     {offset
       cNMS: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNMT; else goto cNMU;
       cNMT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNMU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLf7_info" {
     sat_sLf7_info:
         const sat_sLf7_entry;
         const 2;
         const 18;
 },
 sat_sLf6_entry() //  [R1]
         { []
         }
     {offset
       cNN0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cNN1; else goto cNN2;
       cNN1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNN2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLf6_info" {
     sat_sLf6_info:
         const sat_sLf6_entry;
         const 2;
         const 18;
 },
 sat_sLfb_entry() //  [R1]
         { []
         }
     {offset
       cNN4: // global
           _sLfb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cNN5; else goto cNN6;
       cNN6: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cNN8; else goto cNN7;
       cNN8: // global
           HpAlloc = 136;
           goto cNN5;
       cNN5: // global
           R1 = _sLfb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNN7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLfb::P64;
           _sLeX::P64 = P64[_sLfb::P64 + 16];
           _sLeY::P64 = P64[_sLfb::P64 + 24];
           _sLf2::P64 = P64[_sLfb::P64 + 32];
           _sLf4::P64 = P64[_sLfb::P64 + 40];
           _sLf5::P64 = P64[_sLfb::P64 + 48];
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 112] = _sLf2::P64;
           I64[Hp - 104] = sat_sLf7_info;
           P64[Hp - 88] = _sLeY::P64;
           P64[Hp - 80] = _sLf5::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = GHC.Types.[]_closure+1;
           I64[Hp - 48] = sat_sLf6_info;
           P64[Hp - 32] = _sLeX::P64;
           P64[Hp - 24] = _sLf4::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 126;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLfb_info" {
     sat_sLfb_info:
         const sat_sLfb_entry;
         const 5;
         const 4294967311;
         const SLKe_srt+680;
 },
 sat_sLfc_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cNN9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cNNb; else goto cNNc;
       cNNb: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNNc: // global
           I64[Sp - 32] = block_cNME_info;
           _sLeX::P64 = P64[R1 + 6];
           _sLeY::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _sLeX::P64;
           P64[Sp - 16] = _sLeY::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uNNg; else goto cNMF;
       uNNg: // global
           call _cNME(R1) args: 0, res: 0, upd: 0;
       cNMF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLfc_info" {
     sat_sLfc_info:
         const sat_sLfc_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SLKe_srt+680;
 },
 _cNME() //  [R1]
         { []
         }
     {offset
       cNME: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cNNf; else goto cNNe;
       cNNf: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cNNe: // global
           _sLf4::P64 = P64[R1 + 7];
           _sLf5::P64 = P64[R1 + 15];
           I64[Hp - 72] = sat_sLfb_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = _sLf4::P64;
           P64[Hp - 24] = _sLf5::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNME_info" {
     block_cNME_info:
         const _cNME;
         const 3;
         const 4294967326;
         const SLKe_srt+680;
 },
 GHC.Show.$fShow(,)_$cshowList_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cNNh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cNNl; else goto cNNk;
       cNNl: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,)_$cshowList_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cNNk: // global
           I64[Hp - 16] = sat_sLfc_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _sLeZ::P64 = R4;
           R4 = R5;
           R3 = _sLeZ::P64;
           R2 = Hp - 14;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,)_$cshowList_info" {
     GHC.Show.$fShow(,)_$cshowList_info:
         const GHC.Show.$fShow(,)_$cshowList_entry;
         const 0;
         const 38654705678;
         const 17179869208;
         const SLKe_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.244930076 UTC

[section ""data" . GHC.Show.$fShow(,)_closure" {
     GHC.Show.$fShow(,)_closure:
         const GHC.Show.$fShow(,)_info;
         const 0;
 },
 sat_sLfh_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cNOn: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Show.$fShow(,)_$cshowList_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLfh_info" {
     sat_sLfh_info:
         const sat_sLfh_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SLKe_srt+704;
 },
 sat_sLfg_entry() //  [R1, R2]
         { []
         }
     {offset
       cNOv: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Show.$fShow(,)_$cshow_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLfg_info" {
     sat_sLfg_info:
         const sat_sLfg_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SLKe_srt+696;
 },
 sat_sLff_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cNOD: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call GHC.Show.$fShow(,)_$cshowsPrec_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLff_info" {
     sat_sLff_info:
         const sat_sLff_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const SLKe_srt+688;
 },
 GHC.Show.$fShow(,)_entry() //  [R2, R3]
         { []
         }
     {offset
       cNOH: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cNOL; else goto cNOK;
       cNOL: // global
           HpAlloc = 104;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow(,)_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNOK: // global
           I64[Hp - 96] = sat_sLfh_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = sat_sLfg_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_sLff_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 45;
           P64[Hp - 8] = Hp - 71;
           P64[Hp] = Hp - 94;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow(,)_info" {
     GHC.Show.$fShow(,)_info:
         const GHC.Show.$fShow(,)_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const SLKe_srt+688;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.25344455 UTC

[section ""data" . GHC.Show.showString_closure" {
     GHC.Show.showString_closure:
         const GHC.Show.showString_info;
 },
 GHC.Show.showString_entry() //  [R2, R3]
         { []
         }
     {offset
       cNPb: // global
           R3 = R3;
           R2 = R2;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showString_info" {
     GHC.Show.showString_info:
         const GHC.Show.showString_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.256837161 UTC

[section ""data" . GHC.Show.showCommaSpace_closure" {
     GHC.Show.showCommaSpace_closure:
         const GHC.Show.showCommaSpace_info;
         const 0;
 },
 GHC.Show.showCommaSpace_entry() //  [R2]
         { []
         }
     {offset
       cNPm: // global
           R3 = R2;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showCommaSpace_info" {
     GHC.Show.showCommaSpace_info:
         const GHC.Show.showCommaSpace_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SLKe_srt+720;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.260265111 UTC

[section ""cstring" . GHC.Show.$fShowTypeLitSort5_bytes" {
     GHC.Show.$fShowTypeLitSort5_bytes:
         I8[] [84,121,112,101,76,105,116,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.262624952 UTC

[section ""data" . GHC.Show.$fShowTypeLitSort4_closure" {
     GHC.Show.$fShowTypeLitSort4_closure:
         const GHC.Show.$fShowTypeLitSort4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowTypeLitSort4_entry() //  [R1]
         { []
         }
     {offset
       cNPA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNPB; else goto cNPC;
       cNPB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNPC: // global
           (_cNPx::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cNPx::I64 == 0) goto cNPz; else goto cNPy;
       cNPz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cNPy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cNPx::I64;
           R2 = GHC.Show.$fShowTypeLitSort5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTypeLitSort4_info" {
     GHC.Show.$fShowTypeLitSort4_info:
         const GHC.Show.$fShowTypeLitSort4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.266361937 UTC

[section ""cstring" . GHC.Show.$fShowTypeLitSort3_bytes" {
     GHC.Show.$fShowTypeLitSort3_bytes:
         I8[] [84,121,112,101,76,105,116,78,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.268684347 UTC

[section ""data" . GHC.Show.$fShowTypeLitSort2_closure" {
     GHC.Show.$fShowTypeLitSort2_closure:
         const GHC.Show.$fShowTypeLitSort2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowTypeLitSort2_entry() //  [R1]
         { []
         }
     {offset
       cNPS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNPT; else goto cNPU;
       cNPT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNPU: // global
           (_cNPP::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cNPP::I64 == 0) goto cNPR; else goto cNPQ;
       cNPR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cNPQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cNPP::I64;
           R2 = GHC.Show.$fShowTypeLitSort3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTypeLitSort2_info" {
     GHC.Show.$fShowTypeLitSort2_info:
         const GHC.Show.$fShowTypeLitSort2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.273510925 UTC

[section ""data" . GHC.Show.$fShowTypeLitSort_$cshowsPrec_closure" {
     GHC.Show.$fShowTypeLitSort_$cshowsPrec_closure:
         const GHC.Show.$fShowTypeLitSort_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShowTypeLitSort_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cNQe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNQf; else goto cNQg;
       cNQf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowTypeLitSort_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cNQg: // global
           I64[Sp - 16] = block_cNQ7_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uNQn; else goto cNQ8;
       uNQn: // global
           call _cNQ7(R1) args: 0, res: 0, upd: 0;
       cNQ8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTypeLitSort_$cshowsPrec_info" {
     GHC.Show.$fShowTypeLitSort_$cshowsPrec_info:
         const GHC.Show.$fShowTypeLitSort_$cshowsPrec_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const SLKe_srt+728;
 },
 _cNQ7() //  [R1]
         { []
         }
     {offset
       cNQ7: // global
           _sLfk::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cNQb; else goto cNQc;
       cNQb: // global
           R3 = _sLfk::P64;
           R2 = GHC.Show.$fShowTypeLitSort4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cNQc: // global
           R3 = _sLfk::P64;
           R2 = GHC.Show.$fShowTypeLitSort2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNQ7_info" {
     block_cNQ7_info:
         const _cNQ7;
         const 1;
         const 12884901918;
         const SLKe_srt+728;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.280587748 UTC

[section ""data" . GHC.Show.$fShowTypeLitSort_$cshow_closure" {
     GHC.Show.$fShowTypeLitSort_$cshow_closure:
         const GHC.Show.$fShowTypeLitSort_$cshow_info;
         const 0;
 },
 GHC.Show.$fShowTypeLitSort_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cNQL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cNQM; else goto cNQN;
       cNQM: // global
           R2 = R2;
           R1 = GHC.Show.$fShowTypeLitSort_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cNQN: // global
           I64[Sp - 8] = block_cNQE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uNQU; else goto cNQF;
       uNQU: // global
           call _cNQE(R1) args: 0, res: 0, upd: 0;
       cNQF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTypeLitSort_$cshow_info" {
     GHC.Show.$fShowTypeLitSort_$cshow_info:
         const GHC.Show.$fShowTypeLitSort_$cshow_entry;
         const 0;
         const 47244640270;
         const 4294967301;
         const SLKe_srt+728;
 },
 _cNQE() //  [R1]
         { []
         }
     {offset
       cNQE: // global
           if (R1 & 7 == 1) goto cNQI; else goto cNQJ;
       cNQI: // global
           R1 = GHC.Show.$fShowTypeLitSort4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cNQJ: // global
           R1 = GHC.Show.$fShowTypeLitSort2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNQE_info" {
     block_cNQE_info:
         const _cNQE;
         const 0;
         const 12884901918;
         const SLKe_srt+728;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.286984056 UTC

[section ""data" . GHC.Show.$fShowTypeLitSort1_closure" {
     GHC.Show.$fShowTypeLitSort1_closure:
         const GHC.Show.$fShowTypeLitSort1_info;
         const 0;
 },
 GHC.Show.$fShowTypeLitSort1_entry() //  [R2, R3]
         { []
         }
     {offset
       cNRk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNRl; else goto cNRm;
       cNRl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowTypeLitSort1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNRm: // global
           I64[Sp - 16] = block_cNRd_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uNRt; else goto cNRe;
       uNRt: // global
           call _cNRd(R1) args: 0, res: 0, upd: 0;
       cNRe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTypeLitSort1_info" {
     GHC.Show.$fShowTypeLitSort1_info:
         const GHC.Show.$fShowTypeLitSort1_entry;
         const 0;
         const 81604378638;
         const 8589934607;
         const SLKe_srt+728;
 },
 _cNRd() //  [R1]
         { []
         }
     {offset
       cNRd: // global
           _sLfp::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cNRh; else goto cNRi;
       cNRh: // global
           R3 = _sLfp::P64;
           R2 = GHC.Show.$fShowTypeLitSort4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cNRi: // global
           R3 = _sLfp::P64;
           R2 = GHC.Show.$fShowTypeLitSort2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNRd_info" {
     block_cNRd_info:
         const _cNRd;
         const 1;
         const 12884901918;
         const SLKe_srt+728;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.292630599 UTC

[section ""data" . GHC.Show.$fShowTypeLitSort_$cshowList_closure" {
     GHC.Show.$fShowTypeLitSort_$cshowList_closure:
         const GHC.Show.$fShowTypeLitSort_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShowTypeLitSort_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cNRK: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowTypeLitSort1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTypeLitSort_$cshowList_info" {
     GHC.Show.$fShowTypeLitSort_$cshowList_info:
         const GHC.Show.$fShowTypeLitSort_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SLKe_srt+760;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.295949841 UTC

[section ""data" . GHC.Show.$fShowTypeLitSort_closure" {
     GHC.Show.$fShowTypeLitSort_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowTypeLitSort_$cshowsPrec_closure+3;
         const GHC.Show.$fShowTypeLitSort_$cshow_closure+1;
         const GHC.Show.$fShowTypeLitSort_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.297722351 UTC

[section ""cstring" . GHC.Show.$fShowVecElem20_bytes" {
     GHC.Show.$fShowVecElem20_bytes:
         I8[] [73,110,116,56,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.300080179 UTC

[section ""data" . GHC.Show.$fShowVecElem19_closure" {
     GHC.Show.$fShowVecElem19_closure:
         const GHC.Show.$fShowVecElem19_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem19_entry() //  [R1]
         { []
         }
     {offset
       cNRZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNS0; else goto cNS1;
       cNS0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNS1: // global
           (_cNRW::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cNRW::I64 == 0) goto cNRY; else goto cNRX;
       cNRY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cNRX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cNRW::I64;
           R2 = GHC.Show.$fShowVecElem20_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem19_info" {
     GHC.Show.$fShowVecElem19_info:
         const GHC.Show.$fShowVecElem19_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.303809933 UTC

[section ""cstring" . GHC.Show.$fShowVecElem18_bytes" {
     GHC.Show.$fShowVecElem18_bytes:
         I8[] [73,110,116,49,54,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.306232184 UTC

[section ""data" . GHC.Show.$fShowVecElem17_closure" {
     GHC.Show.$fShowVecElem17_closure:
         const GHC.Show.$fShowVecElem17_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem17_entry() //  [R1]
         { []
         }
     {offset
       cNSh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNSi; else goto cNSj;
       cNSi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNSj: // global
           (_cNSe::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cNSe::I64 == 0) goto cNSg; else goto cNSf;
       cNSg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cNSf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cNSe::I64;
           R2 = GHC.Show.$fShowVecElem18_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem17_info" {
     GHC.Show.$fShowVecElem17_info:
         const GHC.Show.$fShowVecElem17_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.313223071 UTC

[section ""cstring" . GHC.Show.$fShowVecElem16_bytes" {
     GHC.Show.$fShowVecElem16_bytes:
         I8[] [73,110,116,51,50,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.316357394 UTC

[section ""data" . GHC.Show.$fShowVecElem15_closure" {
     GHC.Show.$fShowVecElem15_closure:
         const GHC.Show.$fShowVecElem15_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem15_entry() //  [R1]
         { []
         }
     {offset
       cNSz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNSA; else goto cNSB;
       cNSA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNSB: // global
           (_cNSw::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cNSw::I64 == 0) goto cNSy; else goto cNSx;
       cNSy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cNSx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cNSw::I64;
           R2 = GHC.Show.$fShowVecElem16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem15_info" {
     GHC.Show.$fShowVecElem15_info:
         const GHC.Show.$fShowVecElem15_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.321028749 UTC

[section ""cstring" . GHC.Show.$fShowVecElem14_bytes" {
     GHC.Show.$fShowVecElem14_bytes:
         I8[] [73,110,116,54,52,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.324044449 UTC

[section ""data" . GHC.Show.$fShowVecElem13_closure" {
     GHC.Show.$fShowVecElem13_closure:
         const GHC.Show.$fShowVecElem13_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem13_entry() //  [R1]
         { []
         }
     {offset
       cNSR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNSS; else goto cNST;
       cNSS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNST: // global
           (_cNSO::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cNSO::I64 == 0) goto cNSQ; else goto cNSP;
       cNSQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cNSP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cNSO::I64;
           R2 = GHC.Show.$fShowVecElem14_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem13_info" {
     GHC.Show.$fShowVecElem13_info:
         const GHC.Show.$fShowVecElem13_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.328209604 UTC

[section ""cstring" . GHC.Show.$fShowVecElem12_bytes" {
     GHC.Show.$fShowVecElem12_bytes:
         I8[] [87,111,114,100,56,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.330828134 UTC

[section ""data" . GHC.Show.$fShowVecElem11_closure" {
     GHC.Show.$fShowVecElem11_closure:
         const GHC.Show.$fShowVecElem11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem11_entry() //  [R1]
         { []
         }
     {offset
       cNT9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNTa; else goto cNTb;
       cNTa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNTb: // global
           (_cNT6::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cNT6::I64 == 0) goto cNT8; else goto cNT7;
       cNT8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cNT7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cNT6::I64;
           R2 = GHC.Show.$fShowVecElem12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem11_info" {
     GHC.Show.$fShowVecElem11_info:
         const GHC.Show.$fShowVecElem11_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.335545432 UTC

[section ""cstring" . GHC.Show.$fShowVecElem10_bytes" {
     GHC.Show.$fShowVecElem10_bytes:
         I8[] [87,111,114,100,49,54,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.338149035 UTC

[section ""data" . GHC.Show.$fShowVecElem9_closure" {
     GHC.Show.$fShowVecElem9_closure:
         const GHC.Show.$fShowVecElem9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem9_entry() //  [R1]
         { []
         }
     {offset
       cNTr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNTs; else goto cNTt;
       cNTs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNTt: // global
           (_cNTo::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cNTo::I64 == 0) goto cNTq; else goto cNTp;
       cNTq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cNTp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cNTo::I64;
           R2 = GHC.Show.$fShowVecElem10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem9_info" {
     GHC.Show.$fShowVecElem9_info:
         const GHC.Show.$fShowVecElem9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.342093816 UTC

[section ""cstring" . GHC.Show.$fShowVecElem8_bytes" {
     GHC.Show.$fShowVecElem8_bytes:
         I8[] [87,111,114,100,51,50,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.344503631 UTC

[section ""data" . GHC.Show.$fShowVecElem7_closure" {
     GHC.Show.$fShowVecElem7_closure:
         const GHC.Show.$fShowVecElem7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem7_entry() //  [R1]
         { []
         }
     {offset
       cNTJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNTK; else goto cNTL;
       cNTK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNTL: // global
           (_cNTG::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cNTG::I64 == 0) goto cNTI; else goto cNTH;
       cNTI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cNTH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cNTG::I64;
           R2 = GHC.Show.$fShowVecElem8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem7_info" {
     GHC.Show.$fShowVecElem7_info:
         const GHC.Show.$fShowVecElem7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.34832553 UTC

[section ""cstring" . GHC.Show.$fShowVecElem6_bytes" {
     GHC.Show.$fShowVecElem6_bytes:
         I8[] [87,111,114,100,54,52,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.351314011 UTC

[section ""data" . GHC.Show.$fShowVecElem5_closure" {
     GHC.Show.$fShowVecElem5_closure:
         const GHC.Show.$fShowVecElem5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem5_entry() //  [R1]
         { []
         }
     {offset
       cNU1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNU2; else goto cNU3;
       cNU2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNU3: // global
           (_cNTY::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cNTY::I64 == 0) goto cNU0; else goto cNTZ;
       cNU0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cNTZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cNTY::I64;
           R2 = GHC.Show.$fShowVecElem6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem5_info" {
     GHC.Show.$fShowVecElem5_info:
         const GHC.Show.$fShowVecElem5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.354865292 UTC

[section ""cstring" . GHC.Show.$fShowVecElem4_bytes" {
     GHC.Show.$fShowVecElem4_bytes:
         I8[] [70,108,111,97,116,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.357164297 UTC

[section ""data" . GHC.Show.$fShowVecElem3_closure" {
     GHC.Show.$fShowVecElem3_closure:
         const GHC.Show.$fShowVecElem3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem3_entry() //  [R1]
         { []
         }
     {offset
       cNUj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNUk; else goto cNUl;
       cNUk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNUl: // global
           (_cNUg::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cNUg::I64 == 0) goto cNUi; else goto cNUh;
       cNUi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cNUh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cNUg::I64;
           R2 = GHC.Show.$fShowVecElem4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem3_info" {
     GHC.Show.$fShowVecElem3_info:
         const GHC.Show.$fShowVecElem3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.361056661 UTC

[section ""cstring" . GHC.Show.$fShowVecElem2_bytes" {
     GHC.Show.$fShowVecElem2_bytes:
         I8[] [68,111,117,98,108,101,69,108,101,109,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.363373765 UTC

[section ""data" . GHC.Show.$fShowVecElem1_closure" {
     GHC.Show.$fShowVecElem1_closure:
         const GHC.Show.$fShowVecElem1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecElem1_entry() //  [R1]
         { []
         }
     {offset
       cNUB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNUC; else goto cNUD;
       cNUC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNUD: // global
           (_cNUy::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cNUy::I64 == 0) goto cNUA; else goto cNUz;
       cNUA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cNUz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cNUy::I64;
           R2 = GHC.Show.$fShowVecElem2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem1_info" {
     GHC.Show.$fShowVecElem1_info:
         const GHC.Show.$fShowVecElem1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.368941404 UTC

[section ""data" . GHC.Show.$w$cshowsPrec10_closure" {
     GHC.Show.$w$cshowsPrec10_closure:
         const GHC.Show.$w$cshowsPrec10_info;
         const 0;
 },
 GHC.Show.$w$cshowsPrec10_entry() //  [R2, R3]
         { []
         }
     {offset
       cNV5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNV6; else goto cNV7;
       cNV6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$w$cshowsPrec10_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNV7: // global
           I64[Sp - 16] = block_cNUQ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uNVC; else goto cNUR;
       uNVC: // global
           call _cNUQ(R1) args: 0, res: 0, upd: 0;
       cNUR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec10_info" {
     GHC.Show.$w$cshowsPrec10_info:
         const GHC.Show.$w$cshowsPrec10_entry;
         const 0;
         const 8791798054926;
         const 8589934607;
         const SLKe_srt+768;
 },
 _cNUQ() //  [R1]
         { []
         }
     {offset
       cNUQ: // global
           _sLfu::P64 = P64[Sp + 8];
           switch [0 .. 9] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cNUU;
               case 1 : goto cNUV;
               case 2 : goto cNUW;
               case 3 : goto cNUX;
               case 4 : goto cNUY;
               case 5 : goto cNUZ;
               case 6 : goto cNV0;
               case 7 : goto cNV1;
               case 8 : goto cNV2;
               case 9 : goto cNV3;
           }
       cNV3: // global
           R3 = _sLfu::P64;
           R2 = GHC.Show.$fShowVecElem1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cNV2: // global
           R3 = _sLfu::P64;
           R2 = GHC.Show.$fShowVecElem3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cNV1: // global
           R3 = _sLfu::P64;
           R2 = GHC.Show.$fShowVecElem5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cNV0: // global
           R3 = _sLfu::P64;
           R2 = GHC.Show.$fShowVecElem7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cNUZ: // global
           R3 = _sLfu::P64;
           R2 = GHC.Show.$fShowVecElem9_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cNUY: // global
           R3 = _sLfu::P64;
           R2 = GHC.Show.$fShowVecElem11_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cNUX: // global
           R3 = _sLfu::P64;
           R2 = GHC.Show.$fShowVecElem13_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cNUW: // global
           R3 = _sLfu::P64;
           R2 = GHC.Show.$fShowVecElem15_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cNUV: // global
           R3 = _sLfu::P64;
           R2 = GHC.Show.$fShowVecElem17_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cNUU: // global
           R3 = _sLfu::P64;
           R2 = GHC.Show.$fShowVecElem19_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNUQ_info" {
     block_cNUQ_info:
         const _cNUQ;
         const 1;
         const 4393751543838;
         const SLKe_srt+776;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.376354417 UTC

[section ""data" . GHC.Show.$fShowVecElem_$cshowsPrec_closure" {
     GHC.Show.$fShowVecElem_$cshowsPrec_closure:
         const GHC.Show.$fShowVecElem_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShowVecElem_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       cNVW: // global
           _sLfx::P64 = R3;
           R3 = R4;
           R2 = _sLfx::P64;
           call GHC.Show.$w$cshowsPrec10_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem_$cshowsPrec_info" {
     GHC.Show.$fShowVecElem_$cshowsPrec_info:
         const GHC.Show.$fShowVecElem_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SLKe_srt+768;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.381064729 UTC

[section ""data" . GHC.Show.$fShowVecElem_$cshow_closure" {
     GHC.Show.$fShowVecElem_$cshow_closure:
         const GHC.Show.$fShowVecElem_$cshow_info;
         const 0;
 },
 GHC.Show.$fShowVecElem_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cNWm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cNWn; else goto cNWo;
       cNWn: // global
           R2 = R2;
           R1 = GHC.Show.$fShowVecElem_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cNWo: // global
           I64[Sp - 8] = block_cNW7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uNWT; else goto cNW8;
       uNWT: // global
           call _cNW7(R1) args: 0, res: 0, upd: 0;
       cNW8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem_$cshow_info" {
     GHC.Show.$fShowVecElem_$cshow_info:
         const GHC.Show.$fShowVecElem_$cshow_entry;
         const 0;
         const 8791798054926;
         const 4294967301;
         const SLKe_srt+776;
 },
 _cNW7() //  [R1]
         { []
         }
     {offset
       cNW7: // global
           switch [0 .. 9] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cNWb;
               case 1 : goto cNWc;
               case 2 : goto cNWd;
               case 3 : goto cNWe;
               case 4 : goto cNWf;
               case 5 : goto cNWg;
               case 6 : goto cNWh;
               case 7 : goto cNWi;
               case 8 : goto cNWj;
               case 9 : goto cNWk;
           }
       cNWk: // global
           R1 = GHC.Show.$fShowVecElem1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cNWj: // global
           R1 = GHC.Show.$fShowVecElem3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cNWi: // global
           R1 = GHC.Show.$fShowVecElem5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cNWh: // global
           R1 = GHC.Show.$fShowVecElem7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cNWg: // global
           R1 = GHC.Show.$fShowVecElem9_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cNWf: // global
           R1 = GHC.Show.$fShowVecElem11_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cNWe: // global
           R1 = GHC.Show.$fShowVecElem13_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cNWd: // global
           R1 = GHC.Show.$fShowVecElem15_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cNWc: // global
           R1 = GHC.Show.$fShowVecElem17_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cNWb: // global
           R1 = GHC.Show.$fShowVecElem19_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNW7_info" {
     block_cNW7_info:
         const _cNW7;
         const 0;
         const 4393751543838;
         const SLKe_srt+776;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.387778825 UTC

[section ""data" . GHC.Show.$fShowVecElem_$cshowList_closure" {
     GHC.Show.$fShowVecElem_$cshowList_closure:
         const GHC.Show.$fShowVecElem_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShowVecElem_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cNXn: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$w$cshowsPrec10_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecElem_$cshowList_info" {
     GHC.Show.$fShowVecElem_$cshowList_info:
         const GHC.Show.$fShowVecElem_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SLKe_srt+768;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.391710673 UTC

[section ""data" . GHC.Show.$fShowVecElem_closure" {
     GHC.Show.$fShowVecElem_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowVecElem_$cshowsPrec_closure+3;
         const GHC.Show.$fShowVecElem_$cshow_closure+1;
         const GHC.Show.$fShowVecElem_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.393468301 UTC

[section ""cstring" . GHC.Show.$fShowVecCount12_bytes" {
     GHC.Show.$fShowVecCount12_bytes:
         I8[] [86,101,99,50]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.395821821 UTC

[section ""data" . GHC.Show.$fShowVecCount11_closure" {
     GHC.Show.$fShowVecCount11_closure:
         const GHC.Show.$fShowVecCount11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecCount11_entry() //  [R1]
         { []
         }
     {offset
       cNXC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNXD; else goto cNXE;
       cNXD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNXE: // global
           (_cNXz::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cNXz::I64 == 0) goto cNXB; else goto cNXA;
       cNXB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cNXA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cNXz::I64;
           R2 = GHC.Show.$fShowVecCount12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecCount11_info" {
     GHC.Show.$fShowVecCount11_info:
         const GHC.Show.$fShowVecCount11_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.399477077 UTC

[section ""cstring" . GHC.Show.$fShowVecCount10_bytes" {
     GHC.Show.$fShowVecCount10_bytes:
         I8[] [86,101,99,52]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.401869446 UTC

[section ""data" . GHC.Show.$fShowVecCount9_closure" {
     GHC.Show.$fShowVecCount9_closure:
         const GHC.Show.$fShowVecCount9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecCount9_entry() //  [R1]
         { []
         }
     {offset
       cNXU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNXV; else goto cNXW;
       cNXV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNXW: // global
           (_cNXR::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cNXR::I64 == 0) goto cNXT; else goto cNXS;
       cNXT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cNXS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cNXR::I64;
           R2 = GHC.Show.$fShowVecCount10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecCount9_info" {
     GHC.Show.$fShowVecCount9_info:
         const GHC.Show.$fShowVecCount9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.405693819 UTC

[section ""cstring" . GHC.Show.$fShowVecCount8_bytes" {
     GHC.Show.$fShowVecCount8_bytes:
         I8[] [86,101,99,56]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.408251986 UTC

[section ""data" . GHC.Show.$fShowVecCount7_closure" {
     GHC.Show.$fShowVecCount7_closure:
         const GHC.Show.$fShowVecCount7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecCount7_entry() //  [R1]
         { []
         }
     {offset
       cNYc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNYd; else goto cNYe;
       cNYd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNYe: // global
           (_cNY9::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cNY9::I64 == 0) goto cNYb; else goto cNYa;
       cNYb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cNYa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cNY9::I64;
           R2 = GHC.Show.$fShowVecCount8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecCount7_info" {
     GHC.Show.$fShowVecCount7_info:
         const GHC.Show.$fShowVecCount7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.412246549 UTC

[section ""cstring" . GHC.Show.$fShowVecCount6_bytes" {
     GHC.Show.$fShowVecCount6_bytes:
         I8[] [86,101,99,49,54]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.414719966 UTC

[section ""data" . GHC.Show.$fShowVecCount5_closure" {
     GHC.Show.$fShowVecCount5_closure:
         const GHC.Show.$fShowVecCount5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecCount5_entry() //  [R1]
         { []
         }
     {offset
       cNYu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNYv; else goto cNYw;
       cNYv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNYw: // global
           (_cNYr::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cNYr::I64 == 0) goto cNYt; else goto cNYs;
       cNYt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cNYs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cNYr::I64;
           R2 = GHC.Show.$fShowVecCount6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecCount5_info" {
     GHC.Show.$fShowVecCount5_info:
         const GHC.Show.$fShowVecCount5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.419509154 UTC

[section ""cstring" . GHC.Show.$fShowVecCount4_bytes" {
     GHC.Show.$fShowVecCount4_bytes:
         I8[] [86,101,99,51,50]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.42212444 UTC

[section ""data" . GHC.Show.$fShowVecCount3_closure" {
     GHC.Show.$fShowVecCount3_closure:
         const GHC.Show.$fShowVecCount3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecCount3_entry() //  [R1]
         { []
         }
     {offset
       cNYM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNYN; else goto cNYO;
       cNYN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNYO: // global
           (_cNYJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cNYJ::I64 == 0) goto cNYL; else goto cNYK;
       cNYL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cNYK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cNYJ::I64;
           R2 = GHC.Show.$fShowVecCount4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecCount3_info" {
     GHC.Show.$fShowVecCount3_info:
         const GHC.Show.$fShowVecCount3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.426968915 UTC

[section ""cstring" . GHC.Show.$fShowVecCount2_bytes" {
     GHC.Show.$fShowVecCount2_bytes:
         I8[] [86,101,99,54,52]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.429461459 UTC

[section ""data" . GHC.Show.$fShowVecCount1_closure" {
     GHC.Show.$fShowVecCount1_closure:
         const GHC.Show.$fShowVecCount1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowVecCount1_entry() //  [R1]
         { []
         }
     {offset
       cNZ4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNZ5; else goto cNZ6;
       cNZ5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cNZ6: // global
           (_cNZ1::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cNZ1::I64 == 0) goto cNZ3; else goto cNZ2;
       cNZ3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cNZ2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cNZ1::I64;
           R2 = GHC.Show.$fShowVecCount2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecCount1_info" {
     GHC.Show.$fShowVecCount1_info:
         const GHC.Show.$fShowVecCount1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.434838255 UTC

[section ""data" . GHC.Show.$w$cshowsPrec9_closure" {
     GHC.Show.$w$cshowsPrec9_closure:
         const GHC.Show.$w$cshowsPrec9_info;
         const 0;
 },
 GHC.Show.$w$cshowsPrec9_entry() //  [R2, R3]
         { []
         }
     {offset
       cNZu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cNZv; else goto cNZw;
       cNZv: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$w$cshowsPrec9_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cNZw: // global
           I64[Sp - 16] = block_cNZj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uNZP; else goto cNZk;
       uNZP: // global
           call _cNZj(R1) args: 0, res: 0, upd: 0;
       cNZk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec9_info" {
     GHC.Show.$w$cshowsPrec9_info:
         const GHC.Show.$w$cshowsPrec9_entry;
         const 0;
         const 545460846606;
         const 8589934607;
         const SLKe_srt+864;
 },
 _cNZj() //  [R1]
         { []
         }
     {offset
       cNZj: // global
           _sLfE::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto cNZn;
               case 2 : goto cNZo;
               case 3 : goto cNZp;
               case 4 : goto cNZq;
               case 5 : goto cNZr;
               case 6 : goto cNZs;
           }
       cNZs: // global
           R3 = _sLfE::P64;
           R2 = GHC.Show.$fShowVecCount1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cNZr: // global
           R3 = _sLfE::P64;
           R2 = GHC.Show.$fShowVecCount3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cNZq: // global
           R3 = _sLfE::P64;
           R2 = GHC.Show.$fShowVecCount5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cNZp: // global
           R3 = _sLfE::P64;
           R2 = GHC.Show.$fShowVecCount7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cNZo: // global
           R3 = _sLfE::P64;
           R2 = GHC.Show.$fShowVecCount9_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cNZn: // global
           R3 = _sLfE::P64;
           R2 = GHC.Show.$fShowVecCount11_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cNZj_info" {
     block_cNZj_info:
         const _cNZj;
         const 1;
         const 270582939678;
         const SLKe_srt+872;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.441075184 UTC

[section ""data" . GHC.Show.$fShowVecCount_$cshowsPrec_closure" {
     GHC.Show.$fShowVecCount_$cshowsPrec_closure:
         const GHC.Show.$fShowVecCount_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShowVecCount_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       cO09: // global
           _sLfH::P64 = R3;
           R3 = R4;
           R2 = _sLfH::P64;
           call GHC.Show.$w$cshowsPrec9_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecCount_$cshowsPrec_info" {
     GHC.Show.$fShowVecCount_$cshowsPrec_info:
         const GHC.Show.$fShowVecCount_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SLKe_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.446588225 UTC

[section ""data" . GHC.Show.$fShowVecCount_$cshow_closure" {
     GHC.Show.$fShowVecCount_$cshow_closure:
         const GHC.Show.$fShowVecCount_$cshow_info;
         const 0;
 },
 GHC.Show.$fShowVecCount_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cO0v: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cO0w; else goto cO0x;
       cO0w: // global
           R2 = R2;
           R1 = GHC.Show.$fShowVecCount_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cO0x: // global
           I64[Sp - 8] = block_cO0k_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uO0Q; else goto cO0l;
       uO0Q: // global
           call _cO0k(R1) args: 0, res: 0, upd: 0;
       cO0l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecCount_$cshow_info" {
     GHC.Show.$fShowVecCount_$cshow_info:
         const GHC.Show.$fShowVecCount_$cshow_entry;
         const 0;
         const 545460846606;
         const 4294967301;
         const SLKe_srt+872;
 },
 _cO0k() //  [R1]
         { []
         }
     {offset
       cO0k: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto cO0o;
               case 2 : goto cO0p;
               case 3 : goto cO0q;
               case 4 : goto cO0r;
               case 5 : goto cO0s;
               case 6 : goto cO0t;
           }
       cO0t: // global
           R1 = GHC.Show.$fShowVecCount1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cO0s: // global
           R1 = GHC.Show.$fShowVecCount3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cO0r: // global
           R1 = GHC.Show.$fShowVecCount5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cO0q: // global
           R1 = GHC.Show.$fShowVecCount7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cO0p: // global
           R1 = GHC.Show.$fShowVecCount9_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cO0o: // global
           R1 = GHC.Show.$fShowVecCount11_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cO0k_info" {
     block_cO0k_info:
         const _cO0k;
         const 0;
         const 270582939678;
         const SLKe_srt+872;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.45260764 UTC

[section ""data" . GHC.Show.$fShowVecCount_$cshowList_closure" {
     GHC.Show.$fShowVecCount_$cshowList_closure:
         const GHC.Show.$fShowVecCount_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShowVecCount_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cO1g: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$w$cshowsPrec9_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowVecCount_$cshowList_info" {
     GHC.Show.$fShowVecCount_$cshowList_info:
         const GHC.Show.$fShowVecCount_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SLKe_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.455776231 UTC

[section ""data" . GHC.Show.$fShowVecCount_closure" {
     GHC.Show.$fShowVecCount_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowVecCount_$cshowsPrec_closure+3;
         const GHC.Show.$fShowVecCount_$cshow_closure+1;
         const GHC.Show.$fShowVecCount_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.457549238 UTC

[section ""cstring" . GHC.Show.$fShowOrdering6_bytes" {
     GHC.Show.$fShowOrdering6_bytes:
         I8[] [76,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.459945755 UTC

[section ""data" . GHC.Show.$fShowOrdering5_closure" {
     GHC.Show.$fShowOrdering5_closure:
         const GHC.Show.$fShowOrdering5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowOrdering5_entry() //  [R1]
         { []
         }
     {offset
       cO1v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cO1w; else goto cO1x;
       cO1w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cO1x: // global
           (_cO1s::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cO1s::I64 == 0) goto cO1u; else goto cO1t;
       cO1u: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cO1t: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cO1s::I64;
           R2 = GHC.Show.$fShowOrdering6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowOrdering5_info" {
     GHC.Show.$fShowOrdering5_info:
         const GHC.Show.$fShowOrdering5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.464258203 UTC

[section ""cstring" . GHC.Show.$fShowOrdering4_bytes" {
     GHC.Show.$fShowOrdering4_bytes:
         I8[] [69,81]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.46660517 UTC

[section ""data" . GHC.Show.$fShowOrdering3_closure" {
     GHC.Show.$fShowOrdering3_closure:
         const GHC.Show.$fShowOrdering3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowOrdering3_entry() //  [R1]
         { []
         }
     {offset
       cO1N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cO1O; else goto cO1P;
       cO1O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cO1P: // global
           (_cO1K::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cO1K::I64 == 0) goto cO1M; else goto cO1L;
       cO1M: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cO1L: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cO1K::I64;
           R2 = GHC.Show.$fShowOrdering4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowOrdering3_info" {
     GHC.Show.$fShowOrdering3_info:
         const GHC.Show.$fShowOrdering3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.470783748 UTC

[section ""cstring" . GHC.Show.$fShowOrdering2_bytes" {
     GHC.Show.$fShowOrdering2_bytes:
         I8[] [71,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.47311429 UTC

[section ""data" . GHC.Show.$fShowOrdering1_closure" {
     GHC.Show.$fShowOrdering1_closure:
         const GHC.Show.$fShowOrdering1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowOrdering1_entry() //  [R1]
         { []
         }
     {offset
       cO25: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cO26; else goto cO27;
       cO26: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cO27: // global
           (_cO22::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cO22::I64 == 0) goto cO24; else goto cO23;
       cO24: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cO23: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cO22::I64;
           R2 = GHC.Show.$fShowOrdering2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowOrdering1_info" {
     GHC.Show.$fShowOrdering1_info:
         const GHC.Show.$fShowOrdering1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.478116775 UTC

[section ""data" . GHC.Show.$w$cshowsPrec8_closure" {
     GHC.Show.$w$cshowsPrec8_closure:
         const GHC.Show.$w$cshowsPrec8_info;
         const 0;
 },
 GHC.Show.$w$cshowsPrec8_entry() //  [R2, R3]
         { []
         }
     {offset
       cO2s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cO2t; else goto cO2u;
       cO2t: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$w$cshowsPrec8_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cO2u: // global
           I64[Sp - 16] = block_cO2k_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uO2F; else goto cO2l;
       uO2F: // global
           call _cO2k(R1) args: 0, res: 0, upd: 0;
       cO2l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec8_info" {
     GHC.Show.$w$cshowsPrec8_info:
         const GHC.Show.$w$cshowsPrec8_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const SLKe_srt+928;
 },
 _cO2k() //  [R1]
         { []
         }
     {offset
       cO2k: // global
           _sLfO::P64 = P64[Sp + 8];
           _cO2r::P64 = R1 & 7;
           if (_cO2r::P64 < 3) goto uO2E; else goto cO2q;
       uO2E: // global
           if (_cO2r::P64 < 2) goto cO2o; else goto cO2p;
       cO2o: // global
           R3 = _sLfO::P64;
           R2 = GHC.Show.$fShowOrdering5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cO2p: // global
           R3 = _sLfO::P64;
           R2 = GHC.Show.$fShowOrdering3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cO2q: // global
           R3 = _sLfO::P64;
           R2 = GHC.Show.$fShowOrdering1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cO2k_info" {
     block_cO2k_info:
         const _cO2k;
         const 1;
         const 30064771102;
         const SLKe_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.483949886 UTC

[section ""data" . GHC.Show.$fShowOrdering_$cshowsPrec_closure" {
     GHC.Show.$fShowOrdering_$cshowsPrec_closure:
         const GHC.Show.$fShowOrdering_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShowOrdering_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       cO2V: // global
           _sLfR::P64 = R3;
           R3 = R4;
           R2 = _sLfR::P64;
           call GHC.Show.$w$cshowsPrec8_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowOrdering_$cshowsPrec_info" {
     GHC.Show.$fShowOrdering_$cshowsPrec_info:
         const GHC.Show.$fShowOrdering_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SLKe_srt+928;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.488073344 UTC

[section ""data" . GHC.Show.$fShowOrdering_$cshow_closure" {
     GHC.Show.$fShowOrdering_$cshow_closure:
         const GHC.Show.$fShowOrdering_$cshow_info;
         const 0;
 },
 GHC.Show.$fShowOrdering_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cO3e: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cO3f; else goto cO3g;
       cO3f: // global
           R2 = R2;
           R1 = GHC.Show.$fShowOrdering_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cO3g: // global
           I64[Sp - 8] = block_cO36_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uO3r; else goto cO37;
       uO3r: // global
           call _cO36(R1) args: 0, res: 0, upd: 0;
       cO37: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowOrdering_$cshow_info" {
     GHC.Show.$fShowOrdering_$cshow_info:
         const GHC.Show.$fShowOrdering_$cshow_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const SLKe_srt+936;
 },
 _cO36() //  [R1]
         { []
         }
     {offset
       cO36: // global
           _cO3d::P64 = R1 & 7;
           if (_cO3d::P64 < 3) goto uO3q; else goto cO3c;
       uO3q: // global
           if (_cO3d::P64 < 2) goto cO3a; else goto cO3b;
       cO3a: // global
           R1 = GHC.Show.$fShowOrdering5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cO3b: // global
           R1 = GHC.Show.$fShowOrdering3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cO3c: // global
           R1 = GHC.Show.$fShowOrdering1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cO36_info" {
     block_cO36_info:
         const _cO36;
         const 0;
         const 30064771102;
         const SLKe_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.493920066 UTC

[section ""data" . GHC.Show.$fShowOrdering_$cshowList_closure" {
     GHC.Show.$fShowOrdering_$cshowList_closure:
         const GHC.Show.$fShowOrdering_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShowOrdering_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cO3K: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$w$cshowsPrec8_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowOrdering_$cshowList_info" {
     GHC.Show.$fShowOrdering_$cshowList_info:
         const GHC.Show.$fShowOrdering_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SLKe_srt+928;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.498334252 UTC

[section ""data" . GHC.Show.$fShowOrdering_closure" {
     GHC.Show.$fShowOrdering_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowOrdering_$cshowsPrec_closure+3;
         const GHC.Show.$fShowOrdering_$cshow_closure+1;
         const GHC.Show.$fShowOrdering_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.500024724 UTC

[section ""cstring" . GHC.Show.$fShowBool5_bytes" {
     GHC.Show.$fShowBool5_bytes:
         I8[] [70,97,108,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.502357963 UTC

[section ""data" . GHC.Show.$fShowBool4_closure" {
     GHC.Show.$fShowBool4_closure:
         const GHC.Show.$fShowBool4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowBool4_entry() //  [R1]
         { []
         }
     {offset
       cO3Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cO40; else goto cO41;
       cO40: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cO41: // global
           (_cO3W::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cO3W::I64 == 0) goto cO3Y; else goto cO3X;
       cO3Y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cO3X: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cO3W::I64;
           R2 = GHC.Show.$fShowBool5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowBool4_info" {
     GHC.Show.$fShowBool4_info:
         const GHC.Show.$fShowBool4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.506056321 UTC

[section ""cstring" . GHC.Show.$fShowBool3_bytes" {
     GHC.Show.$fShowBool3_bytes:
         I8[] [84,114,117,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.508457164 UTC

[section ""data" . GHC.Show.$fShowBool2_closure" {
     GHC.Show.$fShowBool2_closure:
         const GHC.Show.$fShowBool2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowBool2_entry() //  [R1]
         { []
         }
     {offset
       cO4h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cO4i; else goto cO4j;
       cO4i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cO4j: // global
           (_cO4e::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cO4e::I64 == 0) goto cO4g; else goto cO4f;
       cO4g: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cO4f: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cO4e::I64;
           R2 = GHC.Show.$fShowBool3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowBool2_info" {
     GHC.Show.$fShowBool2_info:
         const GHC.Show.$fShowBool2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.513487334 UTC

[section ""data" . GHC.Show.$fShowBool_$cshowsPrec_closure" {
     GHC.Show.$fShowBool_$cshowsPrec_closure:
         const GHC.Show.$fShowBool_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShowBool_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cO4D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cO4E; else goto cO4F;
       cO4E: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowBool_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cO4F: // global
           I64[Sp - 16] = block_cO4w_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uO4M; else goto cO4x;
       uO4M: // global
           call _cO4w(R1) args: 0, res: 0, upd: 0;
       cO4x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowBool_$cshowsPrec_info" {
     GHC.Show.$fShowBool_$cshowsPrec_info:
         const GHC.Show.$fShowBool_$cshowsPrec_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const SLKe_srt+968;
 },
 _cO4w() //  [R1]
         { []
         }
     {offset
       cO4w: // global
           _sLfZ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cO4A; else goto cO4B;
       cO4A: // global
           R3 = _sLfZ::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cO4B: // global
           R3 = _sLfZ::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cO4w_info" {
     block_cO4w_info:
         const _cO4w;
         const 1;
         const 12884901918;
         const SLKe_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.519567824 UTC

[section ""data" . GHC.Show.$fShowBool_$cshow_closure" {
     GHC.Show.$fShowBool_$cshow_closure:
         const GHC.Show.$fShowBool_$cshow_info;
         const 0;
 },
 GHC.Show.$fShowBool_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cO5a: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cO5b; else goto cO5c;
       cO5b: // global
           R2 = R2;
           R1 = GHC.Show.$fShowBool_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cO5c: // global
           I64[Sp - 8] = block_cO53_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uO5j; else goto cO54;
       uO5j: // global
           call _cO53(R1) args: 0, res: 0, upd: 0;
       cO54: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowBool_$cshow_info" {
     GHC.Show.$fShowBool_$cshow_info:
         const GHC.Show.$fShowBool_$cshow_entry;
         const 0;
         const 47244640270;
         const 4294967301;
         const SLKe_srt+968;
 },
 _cO53() //  [R1]
         { []
         }
     {offset
       cO53: // global
           if (R1 & 7 == 1) goto cO57; else goto cO58;
       cO57: // global
           R1 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cO58: // global
           R1 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cO53_info" {
     block_cO53_info:
         const _cO53;
         const 0;
         const 12884901918;
         const SLKe_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.526183693 UTC

[section ""data" . GHC.Show.$fShowBool1_closure" {
     GHC.Show.$fShowBool1_closure:
         const GHC.Show.$fShowBool1_info;
         const 0;
 },
 GHC.Show.$fShowBool1_entry() //  [R2, R3]
         { []
         }
     {offset
       cO5J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cO5K; else goto cO5L;
       cO5K: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowBool1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cO5L: // global
           I64[Sp - 16] = block_cO5C_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uO5S; else goto cO5D;
       uO5S: // global
           call _cO5C(R1) args: 0, res: 0, upd: 0;
       cO5D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowBool1_info" {
     GHC.Show.$fShowBool1_info:
         const GHC.Show.$fShowBool1_entry;
         const 0;
         const 81604378638;
         const 8589934607;
         const SLKe_srt+968;
 },
 _cO5C() //  [R1]
         { []
         }
     {offset
       cO5C: // global
           _sLg4::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cO5G; else goto cO5H;
       cO5G: // global
           R3 = _sLg4::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cO5H: // global
           R3 = _sLg4::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cO5C_info" {
     block_cO5C_info:
         const _cO5C;
         const 1;
         const 12884901918;
         const SLKe_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.531828878 UTC

[section ""data" . GHC.Show.$fShowBool_$cshowList_closure" {
     GHC.Show.$fShowBool_$cshowList_closure:
         const GHC.Show.$fShowBool_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShowBool_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cO69: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowBool1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowBool_$cshowList_info" {
     GHC.Show.$fShowBool_$cshowList_info:
         const GHC.Show.$fShowBool_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SLKe_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.535620952 UTC

[section ""data" . GHC.Show.$fShowBool_closure" {
     GHC.Show.$fShowBool_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowBool_$cshowsPrec_closure+3;
         const GHC.Show.$fShowBool_$cshow_closure+1;
         const GHC.Show.$fShowBool_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.537360952 UTC

[section ""cstring" . GHC.Show.$fShow()3_bytes" {
     GHC.Show.$fShow()3_bytes:
         I8[] [40,41]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.539959281 UTC

[section ""data" . GHC.Show.$fShow()2_closure" {
     GHC.Show.$fShow()2_closure:
         const GHC.Show.$fShow()2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShow()2_entry() //  [R1]
         { []
         }
     {offset
       cO6o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cO6p; else goto cO6q;
       cO6p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cO6q: // global
           (_cO6l::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cO6l::I64 == 0) goto cO6n; else goto cO6m;
       cO6n: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cO6m: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cO6l::I64;
           R2 = GHC.Show.$fShow()3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow()2_info" {
     GHC.Show.$fShow()2_info:
         const GHC.Show.$fShow()2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.544827286 UTC

[section ""data" . GHC.Show.$fShow()_$cshowsPrec_closure" {
     GHC.Show.$fShow()_$cshowsPrec_closure:
         const GHC.Show.$fShow()_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShow()_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cO6G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cO6H; else goto cO6I;
       cO6H: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow()_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cO6I: // global
           I64[Sp - 16] = block_cO6D_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uO6M; else goto cO6E;
       uO6M: // global
           call _cO6D() args: 0, res: 0, upd: 0;
       cO6E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow()_$cshowsPrec_info" {
     GHC.Show.$fShow()_$cshowsPrec_info:
         const GHC.Show.$fShow()_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SLKe_srt+1008;
 },
 _cO6D() //  []
         { []
         }
     {offset
       cO6D: // global
           R3 = P64[Sp + 8];
           R2 = GHC.Show.$fShow()2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cO6D_info" {
     block_cO6D_info:
         const _cO6D;
         const 1;
         const 4294967326;
         const SLKe_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.550673863 UTC

[section ""data" . GHC.Show.$fShow()_$cshow_closure" {
     GHC.Show.$fShow()_$cshow_closure:
         const GHC.Show.$fShow()_$cshow_info;
         const 0;
 },
 GHC.Show.$fShow()_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cO74: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cO75; else goto cO76;
       cO75: // global
           R2 = R2;
           R1 = GHC.Show.$fShow()_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cO76: // global
           I64[Sp - 8] = block_cO71_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uO7a; else goto cO72;
       uO7a: // global
           call _cO71() args: 0, res: 0, upd: 0;
       cO72: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow()_$cshow_info" {
     GHC.Show.$fShow()_$cshow_info:
         const GHC.Show.$fShow()_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SLKe_srt+1008;
 },
 _cO71() //  []
         { []
         }
     {offset
       cO71: // global
           R1 = GHC.Show.$fShow()2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cO71_info" {
     block_cO71_info:
         const _cO71;
         const 0;
         const 4294967326;
         const SLKe_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.556869494 UTC

[section ""data" . GHC.Show.$fShow()1_closure" {
     GHC.Show.$fShow()1_closure:
         const GHC.Show.$fShow()1_info;
         const 0;
 },
 GHC.Show.$fShow()1_entry() //  [R2, R3]
         { []
         }
     {offset
       cO7t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cO7u; else goto cO7v;
       cO7u: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow()1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cO7v: // global
           I64[Sp - 16] = block_cO7q_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uO7z; else goto cO7r;
       uO7z: // global
           call _cO7q() args: 0, res: 0, upd: 0;
       cO7r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow()1_info" {
     GHC.Show.$fShow()1_info:
         const GHC.Show.$fShow()1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SLKe_srt+1008;
 },
 _cO7q() //  []
         { []
         }
     {offset
       cO7q: // global
           R3 = P64[Sp + 8];
           R2 = GHC.Show.$fShow()2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cO7q_info" {
     block_cO7q_info:
         const _cO7q;
         const 1;
         const 4294967326;
         const SLKe_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.56267087 UTC

[section ""data" . GHC.Show.$fShow()_$cshowList_closure" {
     GHC.Show.$fShow()_$cshowList_closure:
         const GHC.Show.$fShow()_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShow()_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cO7O: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShow()1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow()_$cshowList_info" {
     GHC.Show.$fShow()_$cshowList_info:
         const GHC.Show.$fShow()_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SLKe_srt+1032;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.566081631 UTC

[section ""data" . GHC.Show.$fShow()_closure" {
     GHC.Show.$fShow()_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShow()_$cshowsPrec_closure+3;
         const GHC.Show.$fShow()_$cshow_closure+1;
         const GHC.Show.$fShow()_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.57079361 UTC

[section ""data" . GHC.Show.$fShowTrName_$cshowsPrec_closure" {
     GHC.Show.$fShowTrName_$cshowsPrec_closure:
         const GHC.Show.$fShowTrName_$cshowsPrec_info;
 },
 sat_sLgn_entry() //  [R1]
         { []
         }
     {offset
       cO89: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cO8a; else goto cO8b;
       cO8a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cO8b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLgn_info" {
     sat_sLgn_info:
         const sat_sLgn_entry;
         const 4294967296;
         const 17;
 },
 GHC.Show.$fShowTrName_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cO8g: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cO8h; else goto cO8i;
       cO8h: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowTrName_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cO8i: // global
           I64[Sp - 8] = block_cO80_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uO8p; else goto cO81;
       uO8p: // global
           call _cO80(R1) args: 0, res: 0, upd: 0;
       cO81: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTrName_$cshowsPrec_info" {
     GHC.Show.$fShowTrName_$cshowsPrec_info:
         const GHC.Show.$fShowTrName_$cshowsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cO80() //  [R1]
         { []
         }
     {offset
       cO80: // global
           if (R1 & 7 == 1) goto cO8d; else goto cO8e;
       cO8d: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cO8l; else goto cO8k;
       cO8l: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cO8k: // global
           _sLgm::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sLgn_info;
           I64[Hp] = _sLgm::I64;
           R2 = Hp - 16;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cO8e: // global
           R2 = P64[R1 + 6];
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cO80_info" {
     block_cO80_info:
         const _cO80;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.582593493 UTC

[section ""data" . GHC.Show.$fShowTrName_$cshow_closure" {
     GHC.Show.$fShowTrName_$cshow_closure:
         const GHC.Show.$fShowTrName_$cshow_info;
 },
 GHC.Show.$fShowTrName_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cO8V: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cO8W; else goto cO8X;
       cO8W: // global
           R2 = R2;
           R1 = GHC.Show.$fShowTrName_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cO8X: // global
           I64[Sp - 8] = block_cO8O_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uO94; else goto cO8P;
       uO94: // global
           call _cO8O(R1) args: 0, res: 0, upd: 0;
       cO8P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTrName_$cshow_info" {
     GHC.Show.$fShowTrName_$cshow_info:
         const GHC.Show.$fShowTrName_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cO8O() //  [R1]
         { []
         }
     {offset
       cO8O: // global
           if (R1 & 7 == 1) goto cO8S; else goto cO8T;
       cO8S: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 0, upd: 8;
       cO8T: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cO8O_info" {
     block_cO8O_info:
         const _cO8O;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.589504217 UTC

[section ""data" . GHC.Show.$fShowTrName1_closure" {
     GHC.Show.$fShowTrName1_closure:
         const GHC.Show.$fShowTrName1_info;
 },
 sat_sLgw_entry() //  [R1]
         { []
         }
     {offset
       cO9w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cO9x; else goto cO9y;
       cO9x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cO9y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLgw_info" {
     sat_sLgw_info:
         const sat_sLgw_entry;
         const 4294967296;
         const 17;
 },
 GHC.Show.$fShowTrName1_entry() //  [R2]
         { []
         }
     {offset
       cO9D: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cO9E; else goto cO9F;
       cO9E: // global
           R2 = R2;
           R1 = GHC.Show.$fShowTrName1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cO9F: // global
           I64[Sp - 8] = block_cO9n_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uO9M; else goto cO9o;
       uO9M: // global
           call _cO9n(R1) args: 0, res: 0, upd: 0;
       cO9o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTrName1_info" {
     GHC.Show.$fShowTrName1_info:
         const GHC.Show.$fShowTrName1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cO9n() //  [R1]
         { []
         }
     {offset
       cO9n: // global
           if (R1 & 7 == 1) goto cO9A; else goto cO9B;
       cO9A: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cO9I; else goto cO9H;
       cO9I: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cO9H: // global
           _sLgv::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sLgw_info;
           I64[Hp] = _sLgv::I64;
           R2 = Hp - 16;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cO9B: // global
           R2 = P64[R1 + 6];
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cO9n_info" {
     block_cO9n_info:
         const _cO9n;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.598038969 UTC

[section ""data" . GHC.Show.$fShowTrName_$cshowList_closure" {
     GHC.Show.$fShowTrName_$cshowList_closure:
         const GHC.Show.$fShowTrName_$cshowList_info;
 },
 GHC.Show.$fShowTrName_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cOab: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowTrName1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTrName_$cshowList_info" {
     GHC.Show.$fShowTrName_$cshowList_info:
         const GHC.Show.$fShowTrName_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.601373275 UTC

[section ""data" . GHC.Show.$fShowTrName_closure" {
     GHC.Show.$fShowTrName_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowTrName_$cshowsPrec_closure+2;
         const GHC.Show.$fShowTrName_$cshow_closure+1;
         const GHC.Show.$fShowTrName_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.603089226 UTC

[section ""data" . GHC.Show.$fShowModule2_closure" {
     GHC.Show.$fShowModule2_closure:
         const GHC.Types.C#_con_info;
         const 58;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.608884886 UTC

[section ""data" . GHC.Show.$w$cshowsPrec6_closure" {
     GHC.Show.$w$cshowsPrec6_closure:
         const GHC.Show.$w$cshowsPrec6_info;
 },
 sat_sLgF_entry() //  [R1]
         { []
         }
     {offset
       cOaB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOaC; else goto cOaD;
       cOaC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOaD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLgF_info" {
     sat_sLgF_info:
         const sat_sLgF_entry;
         const 4294967296;
         const 17;
 },
 f12_sLgC_entry() //  [R1]
         { []
         }
     {offset
       cOaI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cOaJ; else goto cOaK;
       cOaJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOaK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cOas_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uOaR; else goto cOat;
       uOaR: // global
           call _cOas(R1) args: 0, res: 0, upd: 0;
       cOat: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . f12_sLgC_info" {
     f12_sLgC_info:
         const f12_sLgC_entry;
         const 1;
         const 16;
 },
 _cOas() //  [R1]
         { []
         }
     {offset
       cOas: // global
           if (R1 & 7 == 1) goto cOaF; else goto cOaG;
       cOaF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOaN; else goto cOaM;
       cOaN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cOaM: // global
           _sLgE::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sLgF_info;
           I64[Hp] = _sLgE::I64;
           R2 = Hp - 16;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
       cOaG: // global
           R2 = P64[R1 + 6];
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cOas_info" {
     block_cOas_info:
         const _cOas;
         const 0;
         const 30;
 },
 sat_sLgK_entry() //  [R1]
         { []
         }
     {offset
       cOb5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOb6; else goto cOb7;
       cOb6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOb7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLgK_info" {
     sat_sLgK_info:
         const sat_sLgK_entry;
         const 4294967296;
         const 17;
 },
 g_sLgH_entry() //  [R1]
         { []
         }
     {offset
       cObc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cObd; else goto cObe;
       cObd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cObe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cOaW_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uObl; else goto cOaX;
       uObl: // global
           call _cOaW(R1) args: 0, res: 0, upd: 0;
       cOaX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . g_sLgH_info" {
     g_sLgH_info:
         const g_sLgH_entry;
         const 1;
         const 16;
 },
 _cOaW() //  [R1]
         { []
         }
     {offset
       cOaW: // global
           if (R1 & 7 == 1) goto cOb9; else goto cOba;
       cOb9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cObh; else goto cObg;
       cObh: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cObg: // global
           _sLgJ::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sLgK_info;
           I64[Hp] = _sLgJ::I64;
           R2 = Hp - 16;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
       cOba: // global
           R2 = P64[R1 + 6];
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cOaW_info" {
     block_cOaW_info:
         const _cOaW;
         const 0;
         const 30;
 },
 sat_sLgP_entry() //  [R1, R2]
         { []
         }
     {offset
       cObt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cObx; else goto cObw;
       cObx: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cObw: // global
           _sLgC::P64 = P64[R1 + 7];
           _sLgH::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sLgH::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShowModule2_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sLgC::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLgP_info" {
     sat_sLgP_info:
         const sat_sLgP_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 GHC.Show.$w$cshowsPrec6_entry() //  [R2, R3]
         { []
         }
     {offset
       cOby: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cObC; else goto cObB;
       cObC: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$w$cshowsPrec6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cObB: // global
           I64[Hp - 64] = f12_sLgC_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = g_sLgH_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sLgP_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec6_info" {
     GHC.Show.$w$cshowsPrec6_info:
         const GHC.Show.$w$cshowsPrec6_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.627191058 UTC

[section ""data" . GHC.Show.$fShowModule_$cshowsPrec_closure" {
     GHC.Show.$fShowModule_$cshowsPrec_closure:
         const GHC.Show.$fShowModule_$cshowsPrec_info;
 },
 GHC.Show.$fShowModule_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cOcF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cOcG; else goto cOcH;
       cOcG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowModule_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cOcH: // global
           I64[Sp - 8] = block_cOcC_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uOcL; else goto cOcD;
       uOcL: // global
           call _cOcC(R1) args: 0, res: 0, upd: 0;
       cOcD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowModule_$cshowsPrec_info" {
     GHC.Show.$fShowModule_$cshowsPrec_info:
         const GHC.Show.$fShowModule_$cshowsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cOcC() //  [R1]
         { []
         }
     {offset
       cOcC: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec6_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOcC_info" {
     block_cOcC_info:
         const _cOcC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.633332894 UTC

[section ""data" . GHC.Show.$fShowModule_$cshow_closure" {
     GHC.Show.$fShowModule_$cshow_closure:
         const GHC.Show.$fShowModule_$cshow_info;
 },
 GHC.Show.$fShowModule_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cOd3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOd4; else goto cOd5;
       cOd4: // global
           R2 = R2;
           R1 = GHC.Show.$fShowModule_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOd5: // global
           I64[Sp - 8] = block_cOd0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uOd9; else goto cOd1;
       uOd9: // global
           call _cOd0(R1) args: 0, res: 0, upd: 0;
       cOd1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowModule_$cshow_info" {
     GHC.Show.$fShowModule_$cshow_info:
         const GHC.Show.$fShowModule_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cOd0() //  [R1]
         { []
         }
     {offset
       cOd0: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call GHC.Show.$w$cshowsPrec6_entry(R3,
                                              R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOd0_info" {
     block_cOd0_info:
         const _cOd0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.639665928 UTC

[section ""data" . GHC.Show.$fShowModule1_closure" {
     GHC.Show.$fShowModule1_closure:
         const GHC.Show.$fShowModule1_info;
 },
 GHC.Show.$fShowModule1_entry() //  [R2]
         { []
         }
     {offset
       cOdu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cOdv; else goto cOdw;
       cOdv: // global
           R2 = R2;
           R1 = GHC.Show.$fShowModule1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOdw: // global
           I64[Sp - 8] = block_cOdr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uOdA; else goto cOds;
       uOdA: // global
           call _cOdr(R1) args: 0, res: 0, upd: 0;
       cOds: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowModule1_info" {
     GHC.Show.$fShowModule1_info:
         const GHC.Show.$fShowModule1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cOdr() //  [R1]
         { []
         }
     {offset
       cOdr: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec6_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOdr_info" {
     block_cOdr_info:
         const _cOdr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.645586789 UTC

[section ""data" . GHC.Show.$fShowModule_$cshowList_closure" {
     GHC.Show.$fShowModule_$cshowList_closure:
         const GHC.Show.$fShowModule_$cshowList_info;
 },
 GHC.Show.$fShowModule_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cOdP: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowModule1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowModule_$cshowList_info" {
     GHC.Show.$fShowModule_$cshowList_info:
         const GHC.Show.$fShowModule_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.648934507 UTC

[section ""data" . GHC.Show.$fShowModule_closure" {
     GHC.Show.$fShowModule_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowModule_$cshowsPrec_closure+2;
         const GHC.Show.$fShowModule_$cshow_closure+1;
         const GHC.Show.$fShowModule_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.651833703 UTC

[section ""data" . GHC.Show.$fShowTyCon_$cshowsPrec_closure" {
     GHC.Show.$fShowTyCon_$cshowsPrec_closure:
         const GHC.Show.$fShowTyCon_$cshowsPrec_info;
 },
 GHC.Show.$fShowTyCon_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cOe4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOe5; else goto cOe6;
       cOe5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowTyCon_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cOe6: // global
           I64[Sp - 16] = block_cOe1_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uOea; else goto cOe2;
       uOea: // global
           call _cOe1(R1) args: 0, res: 0, upd: 0;
       cOe2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTyCon_$cshowsPrec_info" {
     GHC.Show.$fShowTyCon_$cshowsPrec_info:
         const GHC.Show.$fShowTyCon_$cshowsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cOe1() //  [R1]
         { []
         }
     {offset
       cOe1: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Show.$fShowTrName_$cshowsPrec_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOe1_info" {
     block_cOe1_info:
         const _cOe1;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.659187607 UTC

[section ""data" . GHC.Show.$fShowTyCon_$cshow_closure" {
     GHC.Show.$fShowTyCon_$cshow_closure:
         const GHC.Show.$fShowTyCon_$cshow_info;
 },
 GHC.Show.$fShowTyCon_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cOes: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cOet; else goto cOeu;
       cOet: // global
           R2 = R2;
           R1 = GHC.Show.$fShowTyCon_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOeu: // global
           I64[Sp - 8] = block_cOep_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uOeM; else goto cOeq;
       uOeM: // global
           call _cOep(R1) args: 0, res: 0, upd: 0;
       cOeq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTyCon_$cshow_info" {
     GHC.Show.$fShowTyCon_$cshow_info:
         const GHC.Show.$fShowTyCon_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cOep() //  [R1]
         { []
         }
     {offset
       cOep: // global
           I64[Sp] = block_cOex_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto uOeL; else goto cOez;
       uOeL: // global
           call _cOex(R1) args: 0, res: 0, upd: 0;
       cOez: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cOep_info" {
     block_cOep_info:
         const _cOep;
         const 0;
         const 30;
 },
 _cOex() //  [R1]
         { []
         }
     {offset
       cOex: // global
           if (R1 & 7 == 1) goto cOeF; else goto cOeJ;
       cOeF: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 0, upd: 8;
       cOeJ: // global
           R1 = P64[R1 + 6] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOex_info" {
     block_cOex_info:
         const _cOex;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.666832363 UTC

[section ""data" . GHC.Show.$fShowTyCon1_closure" {
     GHC.Show.$fShowTyCon1_closure:
         const GHC.Show.$fShowTyCon1_info;
 },
 GHC.Show.$fShowTyCon1_entry() //  [R2]
         { []
         }
     {offset
       cOfd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cOfe; else goto cOff;
       cOfe: // global
           R2 = R2;
           R1 = GHC.Show.$fShowTyCon1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOff: // global
           I64[Sp - 8] = block_cOfa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uOfj; else goto cOfb;
       uOfj: // global
           call _cOfa(R1) args: 0, res: 0, upd: 0;
       cOfb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTyCon1_info" {
     GHC.Show.$fShowTyCon1_info:
         const GHC.Show.$fShowTyCon1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cOfa() //  [R1]
         { []
         }
     {offset
       cOfa: // global
           R2 = P64[R1 + 15];
           Sp = Sp + 8;
           call GHC.Show.$fShowTrName1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOfa_info" {
     block_cOfa_info:
         const _cOfa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.672158636 UTC

[section ""data" . GHC.Show.$fShowTyCon_$cshowList_closure" {
     GHC.Show.$fShowTyCon_$cshowList_closure:
         const GHC.Show.$fShowTyCon_$cshowList_info;
 },
 GHC.Show.$fShowTyCon_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cOfy: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowTyCon1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowTyCon_$cshowList_info" {
     GHC.Show.$fShowTyCon_$cshowList_info:
         const GHC.Show.$fShowTyCon_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.675514805 UTC

[section ""data" . GHC.Show.$fShowTyCon_closure" {
     GHC.Show.$fShowTyCon_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowTyCon_$cshowsPrec_closure+2;
         const GHC.Show.$fShowTyCon_$cshow_closure+1;
         const GHC.Show.$fShowTyCon_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.678258377 UTC

[section ""data" . GHC.Show.showSpace1_closure" {
     GHC.Show.showSpace1_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.680656457 UTC

[section ""data" . GHC.Show.showSpace_closure" {
     GHC.Show.showSpace_closure:
         const GHC.Show.showSpace_info;
 },
 GHC.Show.showSpace_entry() //  [R2]
         { []
         }
     {offset
       cOfM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOfQ; else goto cOfP;
       cOfQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Show.showSpace_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOfP: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showSpace_info" {
     GHC.Show.showSpace_info:
         const GHC.Show.showSpace_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.686591604 UTC

[section ""data" . GHC.Show.protectEsc_closure" {
     GHC.Show.protectEsc_closure:
         const GHC.Show.protectEsc_info;
 },
 sat_sLhH_entry() //  [R1]
         { []
         }
     {offset
       cOgd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cOge; else goto cOgf;
       cOge: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOgf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cOg6_info;
           _sLhA::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sLhA::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uOgy; else goto cOg7;
       uOgy: // global
           call _cOg6(R1) args: 0, res: 0, upd: 0;
       cOg7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLhH_info" {
     sat_sLhH_info:
         const sat_sLhH_entry;
         const 2;
         const 18;
 },
 _cOg6() //  [R1]
         { []
         }
     {offset
       cOg6: // global
           if (R1 & 7 == 1) goto cOga; else goto cOgb;
       cOga: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cOgb: // global
           I64[Sp] = block_cOgl_info;
           R2 = P64[R1 + 6];
           _sLhD::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sLhD::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cOg6_info" {
     block_cOg6_info:
         const _cOg6;
         const 1;
         const 30;
 },
 _cOgl() //  [R1]
         { []
         }
     {offset
       cOgl: // global
           _sLhD::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cOgs; else goto cOgw;
       cOgs: // global
           R1 = _sLhD::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cOgw: // global
           R3 = _sLhD::P64;
           R2 = GHC.Show.showLitChar4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cOgl_info" {
     block_cOgl_info:
         const _cOgl;
         const 1;
         const 30;
 },
 GHC.Show.protectEsc_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cOgz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cOgD; else goto cOgC;
       cOgD: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.protectEsc_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cOgC: // global
           I64[Hp - 24] = sat_sLhH_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = Hp - 24;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.protectEsc_info" {
     GHC.Show.protectEsc_info:
         const GHC.Show.protectEsc_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.696857387 UTC

[section ""cstring" . GHC.Show.$trModule4_bytes" {
     GHC.Show.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.698630537 UTC

[section ""data" . GHC.Show.$trModule3_closure" {
     GHC.Show.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Show.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.700415218 UTC

[section ""cstring" . GHC.Show.$trModule2_bytes" {
     GHC.Show.$trModule2_bytes:
         I8[] [71,72,67,46,83,104,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.702205616 UTC

[section ""data" . GHC.Show.$trModule1_closure" {
     GHC.Show.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Show.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.703987427 UTC

[section ""data" . GHC.Show.$trModule_closure" {
     GHC.Show.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Show.$trModule3_closure+1;
         const GHC.Show.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.705868349 UTC

[section ""data" . $krep_rC0q_closure" {
     $krep_rC0q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.707543789 UTC

[section ""data" . $krep1_rC0r_closure" {
     $krep1_rC0r_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.709399704 UTC

[section ""data" . $krep2_rC0s_closure" {
     $krep2_rC0s_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.711166303 UTC

[section ""data" . $krep3_rC0t_closure" {
     $krep3_rC0t_closure:
         const :_con_info;
         const $krep_rC0q_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.7129439 UTC

[section ""data" . $krep4_rC0u_closure" {
     $krep4_rC0u_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep3_rC0t_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.714725321 UTC

[section ""data" . $krep5_rC0v_closure" {
     $krep5_rC0v_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rC0u_closure+1;
         const $krep4_rC0u_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.716421417 UTC

[section ""data" . GHC.Show.$tcShow1_closure" {
     GHC.Show.$tcShow1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep2_rC0s_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.718880125 UTC

[section ""data" . $krep6_rC0w_closure" {
     $krep6_rC0w_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.720680287 UTC

[section ""data" . $krep7_rC0x_closure" {
     $krep7_rC0x_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rC0w_closure+2;
         const $krep5_rC0v_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.722526847 UTC

[section ""data" . $krep8_rC0y_closure" {
     $krep8_rC0y_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rC0r_closure+1;
         const $krep7_rC0x_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.724255484 UTC

[section ""data" . $krep9_rC0z_closure" {
     $krep9_rC0z_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rC0w_closure+2;
         const $krep4_rC0u_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.726053858 UTC

[section ""data" . $krep10_rC0A_closure" {
     $krep10_rC0A_closure:
         const :_con_info;
         const $krep6_rC0w_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.727798197 UTC

[section ""data" . $krep11_rC0B_closure" {
     $krep11_rC0B_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep10_rC0A_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.729551154 UTC

[section ""data" . $krep12_rC0C_closure" {
     $krep12_rC0C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_rC0B_closure+1;
         const $krep5_rC0v_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.73135863 UTC

[section ""cstring" . GHC.Show.$tcShow3_bytes" {
     GHC.Show.$tcShow3_bytes:
         I8[] [83,104,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.733155087 UTC

[section ""data" . GHC.Show.$tcShow2_closure" {
     GHC.Show.$tcShow2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Show.$tcShow3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.735224108 UTC

[section ""data" . GHC.Show.$tcShow_closure" {
     GHC.Show.$tcShow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Show.$trModule_closure+1;
         const GHC.Show.$tcShow2_closure+1;
         const GHC.Show.$tcShow1_closure+4;
         const 10437143935872046625;
         const 8934823934159178042;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.737102011 UTC

[section ""data" . $krep13_rC0D_closure" {
     $krep13_rC0D_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Show.$tcShow_closure+1;
         const $krep10_rC0A_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.739007313 UTC

[section ""data" . $krep14_rC0E_closure" {
     $krep14_rC0E_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_rC0C_closure+4;
         const $krep13_rC0D_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.740740444 UTC

[section ""data" . $krep15_rC0F_closure" {
     $krep15_rC0F_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_rC0z_closure+4;
         const $krep14_rC0E_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.742541358 UTC

[section ""data" . GHC.Show.$tc'C:Show1_closure" {
     GHC.Show.$tc'C:Show1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rC0y_closure+4;
         const $krep15_rC0F_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.744226355 UTC

[section ""cstring" . GHC.Show.$tc'C:Show3_bytes" {
     GHC.Show.$tc'C:Show3_bytes:
         I8[] [39,67,58,83,104,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.747485995 UTC

[section ""data" . GHC.Show.$tc'C:Show2_closure" {
     GHC.Show.$tc'C:Show2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Show.$tc'C:Show3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.749201262 UTC

[section ""data" . GHC.Show.$tc'C:Show_closure" {
     GHC.Show.$tc'C:Show_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Show.$trModule_closure+1;
         const GHC.Show.$tc'C:Show2_closure+1;
         const GHC.Show.$tc'C:Show1_closure+4;
         const 4474575220627516169;
         const 12023205831716615459;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.75223651 UTC

[section ""data" . GHC.Show.$fShowInt_$cshow_closure" {
     GHC.Show.$fShowInt_$cshow_closure:
         const GHC.Show.$fShowInt_$cshow_info;
 },
 GHC.Show.$fShowInt_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cOhF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cOhL; else goto cOhM;
       cOhL: // global
           R2 = R2;
           R1 = GHC.Show.$fShowInt_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOhM: // global
           I64[Sp - 8] = block_cOhC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uOhR; else goto cOhD;
       uOhR: // global
           call _cOhC(R1) args: 0, res: 0, upd: 0;
       cOhD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInt_$cshow_info" {
     GHC.Show.$fShowInt_$cshow_info:
         const GHC.Show.$fShowInt_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cOhC() //  [R1]
         { []
         }
     {offset
       cOhC: // global
           I64[Sp] = block_cOhI_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cOhC_info" {
     block_cOhC_info:
         const _cOhC;
         const 0;
         const 30;
 },
 _cOhI() //  [R1, R2]
         { []
         }
     {offset
       cOhI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOhQ; else goto cOhP;
       cOhQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cOhP: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOhI_info" {
     block_cOhI_info:
         const _cOhI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.760734511 UTC

[section ""data" . GHC.Show.$fShowInt1_closure" {
     GHC.Show.$fShowInt1_closure:
         const GHC.Show.$fShowInt1_info;
 },
 GHC.Show.$fShowInt1_entry() //  [R2, R3]
         { []
         }
     {offset
       cOig: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOim; else goto cOin;
       cOim: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowInt1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cOin: // global
           I64[Sp - 16] = block_cOid_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uOis; else goto cOie;
       uOis: // global
           call _cOid(R1) args: 0, res: 0, upd: 0;
       cOie: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInt1_info" {
     GHC.Show.$fShowInt1_info:
         const GHC.Show.$fShowInt1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cOid() //  [R1]
         { []
         }
     {offset
       cOid: // global
           _sLhP::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cOij_info;
           R4 = _sLhP::P64;
           R3 = I64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cOid_info" {
     block_cOid_info:
         const _cOid;
         const 1;
         const 30;
 },
 _cOij() //  [R1, R2]
         { []
         }
     {offset
       cOij: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOir; else goto cOiq;
       cOir: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cOiq: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOij_info" {
     block_cOij_info:
         const _cOij;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.767776952 UTC

[section ""data" . GHC.Show.$fShowInt_$cshowList_closure" {
     GHC.Show.$fShowInt_$cshowList_closure:
         const GHC.Show.$fShowInt_$cshowList_info;
 },
 GHC.Show.$fShowInt_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cOiN: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowInt1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInt_$cshowList_info" {
     GHC.Show.$fShowInt_$cshowList_info:
         const GHC.Show.$fShowInt_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.770898097 UTC

[section ""data" . GHC.Show.$fShowInt_closure" {
     GHC.Show.$fShowInt_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.showSignedInt_closure+3;
         const GHC.Show.$fShowInt_$cshow_closure+1;
         const GHC.Show.$fShowInt_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.77356263 UTC

[section ""data" . lvl12_rC0G_closure" {
     lvl12_rC0G_closure:
         const lvl12_rC0G_info;
 },
 lvl12_rC0G_entry() //  [R2]
         { []
         }
     {offset
       cOj2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cOj3; else goto cOj4;
       cOj3: // global
           R2 = R2;
           R1 = lvl12_rC0G_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOj4: // global
           I64[Sp - 8] = block_cOiZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uOjc; else goto cOj0;
       uOjc: // global
           call _cOiZ(R1) args: 0, res: 0, upd: 0;
       cOj0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl12_rC0G_info" {
     lvl12_rC0G_info:
         const lvl12_rC0G_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cOiZ() //  [R1]
         { []
         }
     {offset
       cOiZ: // global
           if (I64[R1 + 7] == 10) goto cOjb; else goto cOja;
       cOjb: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cOja: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOiZ_info" {
     block_cOiZ_info:
         const _cOiZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.778487207 UTC

[section ""cstring" . lvl13_rC0H_bytes" {
     lvl13_rC0H_bytes:
         I8[] [92,110,92]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.781816798 UTC

[section ""data" . lvl14_rC0I_closure" {
     lvl14_rC0I_closure:
         const lvl14_rC0I_info;
         const 0;
         const 0;
         const 0;
 },
 lvl14_rC0I_entry() //  [R1]
         { []
         }
     {offset
       cOjy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOjz; else goto cOjA;
       cOjz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOjA: // global
           (_cOjv::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOjv::I64 == 0) goto cOjx; else goto cOjw;
       cOjx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOjw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOjv::I64;
           R2 = lvl13_rC0H_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl14_rC0I_info" {
     lvl14_rC0I_info:
         const lvl14_rC0I_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.785561567 UTC

[section ""cstring" . lvl15_rC0J_bytes" {
     lvl15_rC0J_bytes:
         I8[] [92,110,34]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.787927535 UTC

[section ""data" . lvl16_rC0K_closure" {
     lvl16_rC0K_closure:
         const lvl16_rC0K_info;
         const 0;
         const 0;
         const 0;
 },
 lvl16_rC0K_entry() //  [R1]
         { []
         }
     {offset
       cOjQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOjR; else goto cOjS;
       cOjR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOjS: // global
           (_cOjN::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOjN::I64 == 0) goto cOjP; else goto cOjO;
       cOjP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOjO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOjN::I64;
           R2 = lvl15_rC0J_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl16_rC0K_info" {
     lvl16_rC0K_info:
         const lvl16_rC0K_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.791569144 UTC

[section ""cstring" . lvl17_rC0L_bytes" {
     lvl17_rC0L_bytes:
         I8[] [34]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.794143282 UTC

[section ""data" . lvl18_rC0M_closure" {
     lvl18_rC0M_closure:
         const lvl18_rC0M_info;
         const 0;
         const 0;
         const 0;
 },
 lvl18_rC0M_entry() //  [R1]
         { []
         }
     {offset
       cOk8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOk9; else goto cOka;
       cOk9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOka: // global
           (_cOk5::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOk5::I64 == 0) goto cOk7; else goto cOk6;
       cOk7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOk6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOk5::I64;
           R2 = lvl17_rC0L_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl18_rC0M_info" {
     lvl18_rC0M_info:
         const lvl18_rC0M_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.802948481 UTC

[section ""data" . GHC.Show.$wgo_closure" {
     GHC.Show.$wgo_closure:
         const GHC.Show.$wgo_info;
         const 0;
 },
 sat_sLi7_entry() //  [R1]
         { []
         }
     {offset
       cOky: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOkz; else goto cOkA;
       cOkz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOkA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl18_rC0M_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLi7_info" {
     sat_sLi7_info:
         const sat_sLi7_entry;
         const 1;
         const 12884901904;
         const SLKe_srt+1040;
 },
 sat_sLif_entry() //  [R1]
         { []
         }
     {offset
       cOkT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOkU; else goto cOkV;
       cOkU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOkV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl18_rC0M_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLif_info" {
     sat_sLif_info:
         const sat_sLif_entry;
         const 1;
         const 12884901904;
         const SLKe_srt+1040;
 },
 sat_sLih_entry() //  [R1]
         { []
         }
     {offset
       cOl1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOl2; else goto cOl3;
       cOl2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOl3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl16_rC0K_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLih_info" {
     sat_sLih_info:
         const sat_sLih_entry;
         const 1;
         const 12884901904;
         const SLKe_srt+1048;
 },
 sat_sLiq_entry() //  [R1]
         { []
         }
     {offset
       cOld: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cOle; else goto cOlf;
       cOle: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOlf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cOla_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Show.showLitChar13_closure+1;
           Sp = Sp - 24;
           call GHC.Show.$wgo_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLiq_info" {
     sat_sLiq_info:
         const sat_sLiq_entry;
         const 1;
         const 4294967312;
         const SLKe_srt+1064;
 },
 _cOla() //  [R1, R2]
         { []
         }
     {offset
       cOla: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOli; else goto cOlh;
       cOli: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cOlh: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cOla_info" {
     block_cOla_info:
         const _cOla;
         const 0;
         const 30;
 },
 sat_sLil_entry() //  [R1]
         { []
         }
     {offset
       cOln: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOlo; else goto cOlp;
       cOlo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOlp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl14_rC0I_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLil_info" {
     sat_sLil_info:
         const sat_sLil_entry;
         const 1;
         const 38654705680;
         const SLKe_srt+1048;
 },
 GHC.Show.$wgo_entry() //  [R2, R3]
         { []
         }
     {offset
       cOlu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cOlv; else goto cOlw;
       cOlv: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$wgo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cOlw: // global
           I64[Sp - 16] = block_cOkn_info;
           R3 = R3;
           _sLi1::P64 = R2;
           R2 = lvl12_rC0G_closure+1;
           P64[Sp - 8] = _sLi1::P64;
           Sp = Sp - 16;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$wgo_info" {
     GHC.Show.$wgo_info:
         const GHC.Show.$wgo_entry;
         const 0;
         const 133143986190;
         const 8589934607;
         const SLKe_srt+1040;
 },
 _cOkn() //  [R1, R2]
         { []
         }
     {offset
       cOkn: // global
           I64[Sp - 8] = block_cOkp_info;
           _sLi4::P64 = R1;
           R1 = R2;
           P64[Sp] = _sLi4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uOlU; else goto cOkq;
       uOlU: // global
           call _cOkp(R1) args: 0, res: 0, upd: 0;
       cOkq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cOkn_info" {
     block_cOkn_info:
         const _cOkn;
         const 1;
         const 133143986206;
         const SLKe_srt+1040;
 },
 _cOkp() //  [R1]
         { []
         }
     {offset
       cOkp: // global
           if (R1 & 7 == 1) goto cOlr; else goto cOls;
       cOlr: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cOlB; else goto cOlA;
       cOlB: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cOlA: // global
           I64[Hp - 40] = sat_sLi7_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 40;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cOls: // global
           I64[Sp - 8] = block_cOkD_info;
           _sLi9::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sLi9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uOlV; else goto cOkE;
       uOlV: // global
           call _cOkD(R1) args: 0, res: 0, upd: 0;
       cOkE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cOkp_info" {
     block_cOkp_info:
         const _cOkp;
         const 2;
         const 133143986206;
         const SLKe_srt+1040;
 },
 _cOkD() //  [R1]
         { []
         }
     {offset
       cOkD: // global
           if (R1 & 7 == 1) goto cOlF; else goto cOlP;
       cOlF: // global
           _sLi9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cOkI_info;
           R1 = _sLi9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uOlW; else goto cOkJ;
       uOlW: // global
           call _cOkI(R1) args: 0, res: 0, upd: 0;
       cOkJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cOlP: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cOlS; else goto cOlR;
       cOlS: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cOlR: // global
           I64[Hp - 64] = sat_sLiq_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = sat_sLil_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOkD_info" {
     block_cOkD_info:
         const _cOkD;
         const 3;
         const 133143986206;
         const SLKe_srt+1040;
 },
 _cOkI() //  [R1]
         { []
         }
     {offset
       cOkI: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cOlI; else goto cOlH;
       cOlI: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cOlH: // global
           _sLi1::P64 = P64[Sp + 16];
           _sLi4::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 10) goto cOlN; else goto cOlL;
       cOlN: // global
           I64[Hp - 40] = sat_sLih_info;
           P64[Hp - 24] = _sLi4::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sLi1::P64;
           P64[Hp] = Hp - 40;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cOlL: // global
           I64[Hp - 40] = sat_sLif_info;
           P64[Hp - 24] = _sLi4::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sLi1::P64;
           P64[Hp] = Hp - 40;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOkI_info" {
     block_cOkI_info:
         const _cOkI;
         const 2;
         const 30064771102;
         const SLKe_srt+1040;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.826703939 UTC

[section ""data" . GHC.Show.showMultiLineString_go_closure" {
     GHC.Show.showMultiLineString_go_closure:
         const GHC.Show.showMultiLineString_go_info;
         const 0;
 },
 GHC.Show.showMultiLineString_go_entry() //  [R2, R3]
         { []
         }
     {offset
       cOnp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cOnq; else goto cOnr;
       cOnq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.showMultiLineString_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cOnr: // global
           I64[Sp - 8] = block_cOnm_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Show.$wgo_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showMultiLineString_go_info" {
     GHC.Show.showMultiLineString_go_info:
         const GHC.Show.showMultiLineString_go_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SLKe_srt+1064;
 },
 _cOnm() //  [R1, R2]
         { []
         }
     {offset
       cOnm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOnu; else goto cOnt;
       cOnu: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cOnt: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOnm_info" {
     block_cOnm_info:
         const _cOnm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.832738859 UTC

[section ""data" . GHC.Show.showMultiLineString_closure" {
     GHC.Show.showMultiLineString_closure:
         const GHC.Show.showMultiLineString_info;
         const 0;
 },
 GHC.Show.showMultiLineString_entry() //  [R2]
         { []
         }
     {offset
       cOnN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cOnO; else goto cOnP;
       cOnO: // global
           R2 = R2;
           R1 = GHC.Show.showMultiLineString_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOnP: // global
           I64[Sp - 8] = block_cOnK_info;
           R3 = R2;
           R2 = GHC.Show.$fShow(,)3_closure+1;
           Sp = Sp - 8;
           call GHC.Show.$wgo_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.showMultiLineString_info" {
     GHC.Show.showMultiLineString_info:
         const GHC.Show.showMultiLineString_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const SLKe_srt+1064;
 },
 _cOnK() //  [R1, R2]
         { []
         }
     {offset
       cOnK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOnS; else goto cOnR;
       cOnS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cOnR: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOnK_info" {
     block_cOnK_info:
         const _cOnK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.838145185 UTC

[section ""data" . GHC.Show.$fShowChar3_closure" {
     GHC.Show.$fShowChar3_closure:
         const GHC.Types.C#_con_info;
         const 39;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.839715967 UTC

[section ""cstring" . GHC.Show.$fShowChar2_bytes" {
     GHC.Show.$fShowChar2_bytes:
         I8[] [39,92,39,39]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.842137137 UTC

[section ""data" . GHC.Show.$fShowChar1_closure" {
     GHC.Show.$fShowChar1_closure:
         const GHC.Show.$fShowChar1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowChar1_entry() //  [R1]
         { []
         }
     {offset
       cOoc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOod; else goto cOoe;
       cOod: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOoe: // global
           (_cOo9::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOo9::I64 == 0) goto cOob; else goto cOoa;
       cOob: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOoa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOo9::I64;
           R2 = GHC.Show.$fShowChar2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowChar1_info" {
     GHC.Show.$fShowChar1_info:
         const GHC.Show.$fShowChar1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.847415989 UTC

[section ""data" . GHC.Show.$w$cshowsPrec3_closure" {
     GHC.Show.$w$cshowsPrec3_closure:
         const GHC.Show.$w$cshowsPrec3_info;
         const 0;
 },
 sat_sLiE_entry() //  [R1]
         { []
         }
     {offset
       cOoy: // global
           _sLiE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cOoz; else goto cOoA;
       cOoA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOoC; else goto cOoB;
       cOoC: // global
           HpAlloc = 24;
           goto cOoz;
       cOoz: // global
           R1 = _sLiE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOoB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLiE::P64;
           _sLiB::P64 = P64[_sLiE::P64 + 16];
           _sLiC::I64 = I64[_sLiE::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShowChar3_closure+1;
           P64[Hp] = _sLiB::P64;
           R3 = Hp - 14;
           R2 = _sLiC::I64;
           Sp = Sp - 16;
           call GHC.Show.$wshowLitChar_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLiE_info" {
     sat_sLiE_info:
         const sat_sLiE_entry;
         const 4294967297;
         const 4294967315;
         const SLKe_srt+1096;
 },
 GHC.Show.$w$cshowsPrec3_entry() //  [R2, R3]
         { []
         }
     {offset
       cOoG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cOoK; else goto cOoJ;
       cOoK: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$w$cshowsPrec3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cOoJ: // global
           if (R2 == 39) goto cOoF; else goto cOoE;
       cOoF: // global
           Hp = Hp - 56;
           R3 = R3;
           R2 = GHC.Show.$fShowChar1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cOoE: // global
           I64[Hp - 48] = sat_sLiE_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShowChar3_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec3_info" {
     GHC.Show.$w$cshowsPrec3_info:
         const GHC.Show.$w$cshowsPrec3_entry;
         const 0;
         const 30064771086;
         const 8589934605;
         const SLKe_srt+1096;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.85407226 UTC

[section ""data" . GHC.Show.$fShowChar_$cshowsPrec_closure" {
     GHC.Show.$fShowChar_$cshowsPrec_closure:
         const GHC.Show.$fShowChar_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShowChar_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cOp9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOpa; else goto cOpb;
       cOpa: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowChar_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cOpb: // global
           I64[Sp - 16] = block_cOp6_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uOpf; else goto cOp7;
       uOpf: // global
           call _cOp6(R1) args: 0, res: 0, upd: 0;
       cOp7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowChar_$cshowsPrec_info" {
     GHC.Show.$fShowChar_$cshowsPrec_info:
         const GHC.Show.$fShowChar_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SLKe_srt+1112;
 },
 _cOp6() //  [R1]
         { []
         }
     {offset
       cOp6: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec3_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOp6_info" {
     block_cOp6_info:
         const _cOp6;
         const 1;
         const 4294967326;
         const SLKe_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.859986553 UTC

[section ""data" . lvl19_rC0N_closure" {
     lvl19_rC0N_closure:
         const :_con_info;
         const GHC.Show.$fShowChar3_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.863413258 UTC

[section ""data" . GHC.Show.$fShowChar_$cshow_closure" {
     GHC.Show.$fShowChar_$cshow_closure:
         const GHC.Show.$fShowChar_$cshow_info;
         const 0;
 },
 sat_sLiO_entry() //  [R1]
         { []
         }
     {offset
       cOpG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOpH; else goto cOpI;
       cOpH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOpI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl19_rC0N_closure+2;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$wshowLitChar_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLiO_info" {
     sat_sLiO_info:
         const sat_sLiO_entry;
         const 4294967296;
         const 4294967313;
         const SLKe_srt+1096;
 },
 GHC.Show.$fShowChar_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cOpJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cOpK; else goto cOpL;
       cOpK: // global
           R2 = R2;
           R1 = GHC.Show.$fShowChar_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOpL: // global
           I64[Sp - 8] = block_cOpv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uOpT; else goto cOpw;
       uOpT: // global
           call _cOpv(R1) args: 0, res: 0, upd: 0;
       cOpw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowChar_$cshow_info" {
     GHC.Show.$fShowChar_$cshow_info:
         const GHC.Show.$fShowChar_$cshow_entry;
         const 0;
         const 81604378638;
         const 4294967301;
         const SLKe_srt+1096;
 },
 _cOpv() //  [R1]
         { []
         }
     {offset
       cOpv: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cOpO; else goto cOpN;
       cOpO: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cOpN: // global
           _sLiN::I64 = I64[R1 + 7];
           if (_sLiN::I64 != 39) goto cOpR; else goto cOpS;
       cOpR: // global
           I64[Hp - 40] = sat_sLiO_info;
           I64[Hp - 24] = _sLiN::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShowChar3_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cOpS: // global
           Hp = Hp - 48;
           R1 = GHC.Show.$fShowChar1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOpv_info" {
     block_cOpv_info:
         const _cOpv;
         const 0;
         const 12884901918;
         const SLKe_srt+1096;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.870929888 UTC

[section ""data" . GHC.Show.$fShowChar_closure" {
     GHC.Show.$fShowChar_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowChar_$cshowsPrec_closure+3;
         const GHC.Show.$fShowChar_$cshow_closure+1;
         const GHC.Show.$fShow(,)_$cshowList1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.873294043 UTC

[section ""data" . GHC.Show.$fShow[]_$s$cshowList_closure" {
     GHC.Show.$fShow[]_$s$cshowList_closure:
         const GHC.Show.$fShow[]_$s$cshowList_info;
 },
 GHC.Show.$fShow[]_$s$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cOqk: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowInt_$cshowList_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow[]_$s$cshowList_info" {
     GHC.Show.$fShow[]_$s$cshowList_info:
         const GHC.Show.$fShow[]_$s$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.876833984 UTC

[section ""data" . GHC.Show.$fShow[]_$s$cshow_closure" {
     GHC.Show.$fShow[]_$s$cshow_closure:
         const GHC.Show.$fShow[]_$s$cshow_info;
 },
 GHC.Show.$fShow[]_$s$cshow_entry() //  [R2]
         { []
         }
     {offset
       cOqv: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = R2;
           R2 = GHC.Show.$fShowInt1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow[]_$s$cshow_info" {
     GHC.Show.$fShow[]_$s$cshow_info:
         const GHC.Show.$fShow[]_$s$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.880507507 UTC

[section ""data" . $s$fShow[]1_rC0O_closure" {
     $s$fShow[]1_rC0O_closure:
         const $s$fShow[]1_rC0O_info;
         const 0;
 },
 $s$fShow[]1_rC0O_entry() //  [R3, R4]
         { []
         }
     {offset
       cOqH: // global
           _B2::P64 = R3;
           R3 = R4;
           R2 = _B2::P64;
           call GHC.Show.$fShow[]_$s$cshowList1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $s$fShow[]1_rC0O_info" {
     $s$fShow[]1_rC0O_info:
         const $s$fShow[]1_rC0O_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SLKe_srt+1136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.884120397 UTC

[section ""data" . GHC.Show.$fShow[]_$s$cshow2_closure" {
     GHC.Show.$fShow[]_$s$cshow2_closure:
         const GHC.Show.$fShow[]_$s$cshow2_info;
         const 0;
 },
 GHC.Show.$fShow[]_$s$cshow2_entry() //  [R2]
         { []
         }
     {offset
       cOqS: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = R2;
           R2 = GHC.Show.$fShow(,)_$cshowList1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow[]_$s$cshow2_info" {
     GHC.Show.$fShow[]_$s$cshow2_info:
         const GHC.Show.$fShow[]_$s$cshow2_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SLKe_srt+1144;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.888132874 UTC

[section ""data" . GHC.Show.$fShow[]_$cshow_closure" {
     GHC.Show.$fShow[]_$cshow_closure:
         const GHC.Show.$fShow[]_$cshow_info;
 },
 GHC.Show.$fShow[]_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cOr4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cOr5; else goto cOr6;
       cOr5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow[]_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cOr6: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 24;
           call GHC.Show.showList_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow[]_$cshow_info" {
     GHC.Show.$fShow[]_$cshow_info:
         const GHC.Show.$fShow[]_$cshow_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.89185179 UTC

[section ""data" . GHC.Show.$fShow[]_$s$cshowList2_closure" {
     GHC.Show.$fShow[]_$s$cshowList2_closure:
         const GHC.Show.$fShow[]_$s$cshowList2_info;
         const 0;
 },
 GHC.Show.$fShow[]_$s$cshowList2_entry() //  [R2, R3]
         { []
         }
     {offset
       cOrj: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShow[]_$s$cshowList1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow[]_$s$cshowList2_info" {
     GHC.Show.$fShow[]_$s$cshowList2_info:
         const GHC.Show.$fShow[]_$s$cshowList2_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SLKe_srt+1136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.895772625 UTC

[section ""data" . GHC.Show.$fShow[]_$s$fShow[]2_closure" {
     GHC.Show.$fShow[]_$s$fShow[]2_closure:
         const GHC.Show.C:Show_con_info;
         const $s$fShow[]1_rC0O_closure+3;
         const GHC.Show.$fShow[]_$s$cshow2_closure+1;
         const GHC.Show.$fShow[]_$s$cshowList2_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.898526419 UTC

[section ""data" . GHC.Show.$fShow[]_$cshowList_closure" {
     GHC.Show.$fShow[]_$cshowList_closure:
         const GHC.Show.$fShow[]_$cshowList_info;
 },
 sat_sLj1_entry() //  [R1]
         { []
         }
     {offset
       cOrz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOrA; else goto cOrB;
       cOrA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOrB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLj1_info" {
     sat_sLj1_info:
         const sat_sLj1_entry;
         const 1;
         const 16;
 },
 GHC.Show.$fShow[]_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cOrC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOrG; else goto cOrF;
       cOrG: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShow[]_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cOrF: // global
           I64[Hp - 16] = sat_sLj1_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 16;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow[]_$cshowList_info" {
     GHC.Show.$fShow[]_$cshowList_info:
         const GHC.Show.$fShow[]_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.904524922 UTC

[section ""data" . $s$fShow[]2_rC0P_closure" {
     $s$fShow[]2_rC0P_closure:
         const $s$fShow[]2_rC0P_info;
 },
 $s$fShow[]2_rC0P_entry() //  [R3, R4]
         { []
         }
     {offset
       cOrV: // global
           _sLj3::P64 = R3;
           R3 = R4;
           R2 = _sLj3::P64;
           call GHC.Show.$fShowInt_$cshowList_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $s$fShow[]2_rC0P_info" {
     $s$fShow[]2_rC0P_info:
         const $s$fShow[]2_rC0P_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.907714308 UTC

[section ""data" . GHC.Show.$fShow[]_$s$fShow[]_closure" {
     GHC.Show.$fShow[]_$s$fShow[]_closure:
         const GHC.Show.C:Show_con_info;
         const $s$fShow[]2_rC0P_closure+3;
         const GHC.Show.$fShow[]_$s$cshow_closure+1;
         const GHC.Show.$fShow[]_$s$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.911365593 UTC

[section ""data" . GHC.Show.$fShow[]_closure" {
     GHC.Show.$fShow[]_closure:
         const GHC.Show.$fShow[]_info;
 },
 lvl45_sLj6_entry() //  [R1]
         { []
         }
     {offset
       cOsb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOsc; else goto cOsd;
       cOsc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOsd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl45_sLj6_info" {
     lvl45_sLj6_info:
         const lvl45_sLj6_entry;
         const 1;
         const 16;
 },
 sat_sLja_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cOsj: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Show.$fShow[]_$cshowList_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLja_info" {
     sat_sLja_info:
         const sat_sLja_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sLj9_entry() //  [R1, R2]
         { []
         }
     {offset
       cOsr: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Show.$fShow[]_$cshow_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLj9_info" {
     sat_sLj9_info:
         const sat_sLj9_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sLj8_entry() //  [R1]
         { []
         }
     {offset
       cOsz: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLj8_info" {
     sat_sLj8_info:
         const sat_sLj8_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 GHC.Show.$fShow[]_entry() //  [R2]
         { []
         }
     {offset
       cOsD: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cOsH; else goto cOsG;
       cOsH: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = GHC.Show.$fShow[]_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOsG: // global
           I64[Hp - 96] = lvl45_sLj6_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sLja_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sLj9_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sLj8_info;
           P64[Hp - 32] = Hp - 96;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShow[]_info" {
     GHC.Show.$fShow[]_info:
         const GHC.Show.$fShow[]_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.920753221 UTC

[section ""cstring" . lvl20_rC0Q_bytes" {
     lvl20_rC0Q_bytes:
         I8[] [68,111,117,98,108,101,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.9231785 UTC

[section ""data" . lvl21_rC0R_closure" {
     lvl21_rC0R_closure:
         const lvl21_rC0R_info;
         const 0;
         const 0;
         const 0;
 },
 lvl21_rC0R_entry() //  [R1]
         { []
         }
     {offset
       cOth: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOti; else goto cOtj;
       cOti: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOtj: // global
           (_cOte::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOte::I64 == 0) goto cOtg; else goto cOtf;
       cOtg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOtf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOte::I64;
           R2 = lvl20_rC0Q_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl21_rC0R_info" {
     lvl21_rC0R_info:
         const lvl21_rC0R_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.927319775 UTC

[section ""cstring" . lvl22_rC0S_bytes" {
     lvl22_rC0S_bytes:
         I8[] [70,108,111,97,116,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.930150587 UTC

[section ""data" . lvl23_rC0T_closure" {
     lvl23_rC0T_closure:
         const lvl23_rC0T_info;
         const 0;
         const 0;
         const 0;
 },
 lvl23_rC0T_entry() //  [R1]
         { []
         }
     {offset
       cOtz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOtA; else goto cOtB;
       cOtA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOtB: // global
           (_cOtw::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOtw::I64 == 0) goto cOty; else goto cOtx;
       cOty: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOtx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOtw::I64;
           R2 = lvl22_rC0S_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl23_rC0T_info" {
     lvl23_rC0T_info:
         const lvl23_rC0T_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.933654879 UTC

[section ""cstring" . lvl24_rC0U_bytes" {
     lvl24_rC0U_bytes:
         I8[] [65,100,100,114,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.935950716 UTC

[section ""data" . lvl25_rC0V_closure" {
     lvl25_rC0V_closure:
         const lvl25_rC0V_info;
         const 0;
         const 0;
         const 0;
 },
 lvl25_rC0V_entry() //  [R1]
         { []
         }
     {offset
       cOtR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOtS; else goto cOtT;
       cOtS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOtT: // global
           (_cOtO::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOtO::I64 == 0) goto cOtQ; else goto cOtP;
       cOtQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOtP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOtO::I64;
           R2 = lvl24_rC0U_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl25_rC0V_info" {
     lvl25_rC0V_info:
         const lvl25_rC0V_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.939620175 UTC

[section ""cstring" . lvl26_rC0W_bytes" {
     lvl26_rC0W_bytes:
         I8[] [87,111,114,100,54,52,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.94227165 UTC

[section ""data" . lvl27_rC0X_closure" {
     lvl27_rC0X_closure:
         const lvl27_rC0X_info;
         const 0;
         const 0;
         const 0;
 },
 lvl27_rC0X_entry() //  [R1]
         { []
         }
     {offset
       cOu9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOua; else goto cOub;
       cOua: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOub: // global
           (_cOu6::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOu6::I64 == 0) goto cOu8; else goto cOu7;
       cOu8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOu7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOu6::I64;
           R2 = lvl26_rC0W_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_rC0X_info" {
     lvl27_rC0X_info:
         const lvl27_rC0X_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.945827477 UTC

[section ""cstring" . lvl28_rC0Y_bytes" {
     lvl28_rC0Y_bytes:
         I8[] [73,110,116,54,52,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.948164327 UTC

[section ""data" . lvl29_rC0Z_closure" {
     lvl29_rC0Z_closure:
         const lvl29_rC0Z_info;
         const 0;
         const 0;
         const 0;
 },
 lvl29_rC0Z_entry() //  [R1]
         { []
         }
     {offset
       cOur: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOus; else goto cOut;
       cOus: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOut: // global
           (_cOuo::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOuo::I64 == 0) goto cOuq; else goto cOup;
       cOuq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOup: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOuo::I64;
           R2 = lvl28_rC0Y_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl29_rC0Z_info" {
     lvl29_rC0Z_info:
         const lvl29_rC0Z_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.951776471 UTC

[section ""cstring" . lvl30_rC10_bytes" {
     lvl30_rC10_bytes:
         I8[] [87,111,114,100,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.954369583 UTC

[section ""data" . lvl31_rC11_closure" {
     lvl31_rC11_closure:
         const lvl31_rC11_info;
         const 0;
         const 0;
         const 0;
 },
 lvl31_rC11_entry() //  [R1]
         { []
         }
     {offset
       cOuJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOuK; else goto cOuL;
       cOuK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOuL: // global
           (_cOuG::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOuG::I64 == 0) goto cOuI; else goto cOuH;
       cOuI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOuH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOuG::I64;
           R2 = lvl30_rC10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl31_rC11_info" {
     lvl31_rC11_info:
         const lvl31_rC11_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.957853118 UTC

[section ""cstring" . lvl32_rC12_bytes" {
     lvl32_rC12_bytes:
         I8[] [73,110,116,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.960690068 UTC

[section ""data" . lvl33_rC13_closure" {
     lvl33_rC13_closure:
         const lvl33_rC13_info;
         const 0;
         const 0;
         const 0;
 },
 lvl33_rC13_entry() //  [R1]
         { []
         }
     {offset
       cOv1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOv2; else goto cOv3;
       cOv2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOv3: // global
           (_cOuY::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOuY::I64 == 0) goto cOv0; else goto cOuZ;
       cOv0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOuZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOuY::I64;
           R2 = lvl32_rC12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_rC13_info" {
     lvl33_rC13_info:
         const lvl33_rC13_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.964491917 UTC

[section ""cstring" . lvl34_rC14_bytes" {
     lvl34_rC14_bytes:
         I8[] [85,110,108,105,102,116,101,100,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.966842021 UTC

[section ""data" . lvl35_rC15_closure" {
     lvl35_rC15_closure:
         const lvl35_rC15_info;
         const 0;
         const 0;
         const 0;
 },
 lvl35_rC15_entry() //  [R1]
         { []
         }
     {offset
       cOvj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOvk; else goto cOvl;
       cOvk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOvl: // global
           (_cOvg::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOvg::I64 == 0) goto cOvi; else goto cOvh;
       cOvi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOvh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOvg::I64;
           R2 = lvl34_rC14_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl35_rC15_info" {
     lvl35_rC15_info:
         const lvl35_rC15_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.970448637 UTC

[section ""cstring" . lvl36_rC16_bytes" {
     lvl36_rC16_bytes:
         I8[] [76,105,102,116,101,100,82,101,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.972878673 UTC

[section ""data" . lvl37_rC17_closure" {
     lvl37_rC17_closure:
         const lvl37_rC17_info;
         const 0;
         const 0;
         const 0;
 },
 lvl37_rC17_entry() //  [R1]
         { []
         }
     {offset
       cOvB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOvC; else goto cOvD;
       cOvC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOvD: // global
           (_cOvy::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOvy::I64 == 0) goto cOvA; else goto cOvz;
       cOvA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOvz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOvy::I64;
           R2 = lvl36_rC16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl37_rC17_info" {
     lvl37_rC17_info:
         const lvl37_rC17_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.976541616 UTC

[section ""cstring" . lvl38_rC18_bytes" {
     lvl38_rC18_bytes:
         I8[] [83,117,109,82,101,112,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.978267496 UTC

[section ""cstring" . lvl39_rC19_bytes" {
     lvl39_rC19_bytes:
         I8[] [84,117,112,108,101,82,101,112,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.979879567 UTC

[section ""cstring" . lvl40_rC1a_bytes" {
     lvl40_rC1a_bytes:
         I8[] [86,101,99,82,101,112,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:33.997784221 UTC

[section ""data" . GHC.Show.$fShowRuntimeRep_$cshowsPrec_closure" {
     GHC.Show.$fShowRuntimeRep_$cshowsPrec_closure:
         const GHC.Show.$fShowRuntimeRep_$cshowsPrec_info;
         const 0;
 },
 sat_sLjl_entry() //  [R1]
         { []
         }
     {offset
       cOwg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOwh; else goto cOwi;
       cOwh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOwi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$w$cshowsPrec10_entry(R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLjl_info" {
     sat_sLjl_info:
         const sat_sLjl_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1152;
 },
 section ""relreadonly" . uOBo_srtd" {
     uOBo_srtd:
         const SLKe_srt+864;
         const 37;
         const 68719476737;
 },
 sat_sLjn_entry() //  [R1]
         { []
         }
     {offset
       cOwk: // global
           _sLjn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cOwl; else goto cOwm;
       cOwm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cOwo; else goto cOwn;
       cOwo: // global
           HpAlloc = 56;
           goto cOwl;
       cOwl: // global
           R1 = _sLjn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOwn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLjn::P64;
           _sLjf::P64 = P64[_sLjn::P64 + 16];
           _sLjg::P64 = P64[_sLjn::P64 + 24];
           _sLjk::P64 = P64[_sLjn::P64 + 32];
           I64[Hp - 48] = sat_sLjl_info;
           P64[Hp - 32] = _sLjg::P64;
           P64[Hp - 24] = _sLjk::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sLjf::P64;
           Sp = Sp - 16;
           call GHC.Show.$w$cshowsPrec9_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLjn_info" {
     sat_sLjn_info:
         const sat_sLjn_entry;
         const 3;
         const 18446744069414584335;
         const uOBo_srtd;
 },
 section ""relreadonly" . uOBp_srtd" {
     uOBp_srtd:
         const SLKe_srt+864;
         const 37;
         const 68719476737;
 },
 p_sLjj_entry() //  [R1, R2]
         { []
         }
     {offset
       cOwp: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cOwt; else goto cOws;
       cOwt: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOws: // global
           _sLjf::P64 = P64[R1 + 7];
           _sLjg::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sLjn_info;
           P64[Hp - 16] = _sLjf::P64;
           P64[Hp - 8] = _sLjg::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = lvl40_rC1a_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_sLjj_info" {
     p_sLjj_info:
         const p_sLjj_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const uOBp_srtd;
 },
 section ""relreadonly" . uOBq_srtd" {
     uOBq_srtd:
         const SLKe_srt+864;
         const 37;
         const 68719476737;
 },
 sat_sLjq_entry() //  [R1]
         { []
         }
     {offset
       cOwD: // global
           _sLjq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cOwE; else goto cOwF;
       cOwF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOwH; else goto cOwG;
       cOwH: // global
           HpAlloc = 24;
           goto cOwE;
       cOwE: // global
           R1 = _sLjq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOwG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLjq::P64;
           _sLjd::P64 = P64[_sLjq::P64 + 16];
           _sLjj::P64 = P64[_sLjq::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sLjd::P64;
           R2 = Hp - 14;
           R1 = _sLjj::P64;
           Sp = Sp - 16;
           call p_sLjj_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLjq_info" {
     sat_sLjq_info:
         const sat_sLjq_entry;
         const 2;
         const 18446744069414584338;
         const uOBq_srtd;
 },
 sat_sLjG_entry() //  [R1]
         { []
         }
     {offset
       cOxt: // global
           _sLjG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cOxu; else goto cOxv;
       cOxv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cOxx; else goto cOxw;
       cOxx: // global
           HpAlloc = 32;
           goto cOxu;
       cOxu: // global
           R1 = _sLjG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOxw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLjG::P64;
           _sLjA::P64 = P64[_sLjG::P64 + 16];
           _sLjD::P64 = P64[_sLjG::P64 + 24];
           _sLjE::P64 = P64[_sLjG::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sLjA::P64;
           P64[Hp] = _sLjE::P64;
           R4 = Hp - 24;
           R3 = _sLjD::P64;
           R2 = GHC.Show.$fShow(,)1_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLjG_info" {
     sat_sLjG_info:
         const sat_sLjG_entry;
         const 3;
         const 4294967311;
         const SLKe_srt+1160;
 },
 showl_sLjA_entry() //  [R1, R2]
         { []
         }
     {offset
       cOxC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cOxD; else goto cOxE;
       cOxD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOxE: // global
           I64[Sp - 24] = block_cOxi_info;
           _sLjA::P64 = R1;
           _sLjz::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sLjz::P64;
           P64[Sp - 8] = _sLjA::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uOxL; else goto cOxj;
       uOxL: // global
           call _cOxi(R1) args: 0, res: 0, upd: 0;
       cOxj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . showl_sLjA_info" {
     showl_sLjA_info:
         const showl_sLjA_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SLKe_srt+1160;
 },
 _cOxi() //  [R1]
         { []
         }
     {offset
       cOxi: // global
           if (R1 & 7 == 1) goto cOxz; else goto cOxA;
       cOxz: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cOxA: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cOxK; else goto cOxJ;
       cOxK: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cOxJ: // global
           _sLjD::P64 = P64[R1 + 6];
           _sLjE::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sLjG_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _sLjD::P64;
           P64[Hp - 24] = _sLjE::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOxi_info" {
     block_cOxi_info:
         const _cOxi;
         const 2;
         const 4294967326;
         const SLKe_srt+1160;
 },
 sat_sLjH_entry() //  [R1]
         { []
         }
     {offset
       cOxM: // global
           _sLjH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cOxN; else goto cOxO;
       cOxO: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cOxQ; else goto cOxP;
       cOxQ: // global
           HpAlloc = 40;
           goto cOxN;
       cOxN: // global
           R1 = _sLjH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOxP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLjH::P64;
           _sLjv::P64 = P64[_sLjH::P64 + 16];
           _sLjy::P64 = P64[_sLjH::P64 + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Show.showList__2_closure+1;
           P64[Hp - 16] = _sLjv::P64;
           I64[Hp - 8] = showl_sLjA_info;
           P64[Hp] = Hp - 30;
           R2 = _sLjy::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call showl_sLjA_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLjH_info" {
     sat_sLjH_info:
         const sat_sLjH_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1160;
 },
 sat_sLjI_entry() //  [R1]
         { []
         }
     {offset
       cOxR: // global
           _sLjI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cOxS; else goto cOxT;
       cOxT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cOxV; else goto cOxU;
       cOxV: // global
           HpAlloc = 32;
           goto cOxS;
       cOxS: // global
           R1 = _sLjI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOxU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLjI::P64;
           _sLjv::P64 = P64[_sLjI::P64 + 16];
           _sLjx::P64 = P64[_sLjI::P64 + 24];
           _sLjy::P64 = P64[_sLjI::P64 + 32];
           I64[Hp - 24] = sat_sLjH_info;
           P64[Hp - 8] = _sLjv::P64;
           P64[Hp] = _sLjy::P64;
           R4 = Hp - 24;
           R3 = _sLjx::P64;
           R2 = GHC.Show.$fShow(,)1_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLjI_info" {
     sat_sLjI_info:
         const sat_sLjI_entry;
         const 3;
         const 4294967311;
         const SLKe_srt+1160;
 },
 sat_sLjJ_entry() //  [R1]
         { []
         }
     {offset
       cOy0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cOy1; else goto cOy2;
       cOy1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOy2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cOwY_info;
           _sLjv::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sLjv::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uOy9; else goto cOwZ;
       uOy9: // global
           call _cOwY(R1) args: 0, res: 0, upd: 0;
       cOwZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLjJ_info" {
     sat_sLjJ_info:
         const sat_sLjJ_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1160;
 },
 _cOwY() //  [R1]
         { []
         }
     {offset
       cOwY: // global
           _sLjv::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cOxX; else goto cOxY;
       cOxX: // global
           R3 = _sLjv::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       cOxY: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cOy8; else goto cOy7;
       cOy8: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cOy7: // global
           _sLjx::P64 = P64[R1 + 6];
           _sLjy::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sLjI_info;
           P64[Hp - 40] = _sLjv::P64;
           P64[Hp - 32] = _sLjx::P64;
           P64[Hp - 24] = _sLjy::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cOwY_info" {
     block_cOwY_info:
         const _cOwY;
         const 1;
         const 4294967326;
         const SLKe_srt+1160;
 },
 p_sLju_entry() //  [R1, R2]
         { []
         }
     {offset
       cOya: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cOye; else goto cOyd;
       cOye: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOyd: // global
           _sLjr::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sLjJ_info;
           P64[Hp - 8] = _sLjr::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = lvl39_rC19_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_sLju_info" {
     p_sLju_info:
         const p_sLju_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SLKe_srt+1160;
 },
 sat_sLjM_entry() //  [R1]
         { []
         }
     {offset
       cOyo: // global
           _sLjM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cOyp; else goto cOyq;
       cOyq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOys; else goto cOyr;
       cOys: // global
           HpAlloc = 24;
           goto cOyp;
       cOyp: // global
           R1 = _sLjM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOyr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLjM::P64;
           _sLjd::P64 = P64[_sLjM::P64 + 16];
           _sLju::P64 = P64[_sLjM::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sLjd::P64;
           R2 = Hp - 14;
           R1 = _sLju::P64;
           Sp = Sp - 16;
           call p_sLju_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLjM_info" {
     sat_sLjM_info:
         const sat_sLjM_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1160;
 },
 sat_sLk2_entry() //  [R1]
         { []
         }
     {offset
       cOze: // global
           _sLk2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cOzf; else goto cOzg;
       cOzg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cOzi; else goto cOzh;
       cOzi: // global
           HpAlloc = 32;
           goto cOzf;
       cOzf: // global
           R1 = _sLk2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOzh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLk2::P64;
           _sLjW::P64 = P64[_sLk2::P64 + 16];
           _sLjZ::P64 = P64[_sLk2::P64 + 24];
           _sLk0::P64 = P64[_sLk2::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sLjW::P64;
           P64[Hp] = _sLk0::P64;
           R4 = Hp - 24;
           R3 = _sLjZ::P64;
           R2 = GHC.Show.$fShow(,)1_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLk2_info" {
     sat_sLk2_info:
         const sat_sLk2_entry;
         const 3;
         const 4294967311;
         const SLKe_srt+1160;
 },
 showl_sLjW_entry() //  [R1, R2]
         { []
         }
     {offset
       cOzn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cOzo; else goto cOzp;
       cOzo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOzp: // global
           I64[Sp - 24] = block_cOz3_info;
           _sLjW::P64 = R1;
           _sLjV::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sLjV::P64;
           P64[Sp - 8] = _sLjW::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uOzw; else goto cOz4;
       uOzw: // global
           call _cOz3(R1) args: 0, res: 0, upd: 0;
       cOz4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . showl_sLjW_info" {
     showl_sLjW_info:
         const showl_sLjW_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SLKe_srt+1160;
 },
 _cOz3() //  [R1]
         { []
         }
     {offset
       cOz3: // global
           if (R1 & 7 == 1) goto cOzk; else goto cOzl;
       cOzk: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cOzl: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cOzv; else goto cOzu;
       cOzv: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cOzu: // global
           _sLjZ::P64 = P64[R1 + 6];
           _sLk0::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sLk2_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _sLjZ::P64;
           P64[Hp - 24] = _sLk0::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOz3_info" {
     block_cOz3_info:
         const _cOz3;
         const 2;
         const 4294967326;
         const SLKe_srt+1160;
 },
 sat_sLk3_entry() //  [R1]
         { []
         }
     {offset
       cOzx: // global
           _sLk3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cOzy; else goto cOzz;
       cOzz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cOzB; else goto cOzA;
       cOzB: // global
           HpAlloc = 40;
           goto cOzy;
       cOzy: // global
           R1 = _sLk3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOzA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLk3::P64;
           _sLjR::P64 = P64[_sLk3::P64 + 16];
           _sLjU::P64 = P64[_sLk3::P64 + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Show.showList__2_closure+1;
           P64[Hp - 16] = _sLjR::P64;
           I64[Hp - 8] = showl_sLjW_info;
           P64[Hp] = Hp - 30;
           R2 = _sLjU::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call showl_sLjW_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLk3_info" {
     sat_sLk3_info:
         const sat_sLk3_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1160;
 },
 sat_sLk4_entry() //  [R1]
         { []
         }
     {offset
       cOzC: // global
           _sLk4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cOzD; else goto cOzE;
       cOzE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cOzG; else goto cOzF;
       cOzG: // global
           HpAlloc = 32;
           goto cOzD;
       cOzD: // global
           R1 = _sLk4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOzF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLk4::P64;
           _sLjR::P64 = P64[_sLk4::P64 + 16];
           _sLjT::P64 = P64[_sLk4::P64 + 24];
           _sLjU::P64 = P64[_sLk4::P64 + 32];
           I64[Hp - 24] = sat_sLk3_info;
           P64[Hp - 8] = _sLjR::P64;
           P64[Hp] = _sLjU::P64;
           R4 = Hp - 24;
           R3 = _sLjT::P64;
           R2 = GHC.Show.$fShow(,)1_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLk4_info" {
     sat_sLk4_info:
         const sat_sLk4_entry;
         const 3;
         const 4294967311;
         const SLKe_srt+1160;
 },
 sat_sLk5_entry() //  [R1]
         { []
         }
     {offset
       cOzL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cOzM; else goto cOzN;
       cOzM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOzN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cOyJ_info;
           _sLjR::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sLjR::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uOzU; else goto cOyK;
       uOzU: // global
           call _cOyJ(R1) args: 0, res: 0, upd: 0;
       cOyK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLk5_info" {
     sat_sLk5_info:
         const sat_sLk5_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1160;
 },
 _cOyJ() //  [R1]
         { []
         }
     {offset
       cOyJ: // global
           _sLjR::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cOzI; else goto cOzJ;
       cOzI: // global
           R3 = _sLjR::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       cOzJ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cOzT; else goto cOzS;
       cOzT: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cOzS: // global
           _sLjT::P64 = P64[R1 + 6];
           _sLjU::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sLk4_info;
           P64[Hp - 40] = _sLjR::P64;
           P64[Hp - 32] = _sLjT::P64;
           P64[Hp - 24] = _sLjU::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cOyJ_info" {
     block_cOyJ_info:
         const _cOyJ;
         const 1;
         const 4294967326;
         const SLKe_srt+1160;
 },
 p_sLjQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cOzV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cOzZ; else goto cOzY;
       cOzZ: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOzY: // global
           _sLjN::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sLk5_info;
           P64[Hp - 8] = _sLjN::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = lvl38_rC18_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_sLjQ_info" {
     p_sLjQ_info:
         const p_sLjQ_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SLKe_srt+1160;
 },
 sat_sLk8_entry() //  [R1]
         { []
         }
     {offset
       cOA9: // global
           _sLk8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cOAa; else goto cOAb;
       cOAb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOAd; else goto cOAc;
       cOAd: // global
           HpAlloc = 24;
           goto cOAa;
       cOAa: // global
           R1 = _sLk8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOAc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLk8::P64;
           _sLjd::P64 = P64[_sLk8::P64 + 16];
           _sLjQ::P64 = P64[_sLk8::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sLjd::P64;
           R2 = Hp - 14;
           R1 = _sLjQ::P64;
           Sp = Sp - 16;
           call p_sLjQ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLk8_info" {
     sat_sLk8_info:
         const sat_sLk8_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1160;
 },
 section ""relreadonly" . uOBr_srtd" {
     uOBr_srtd:
         const SLKe_srt+864;
         const 47;
         const 140668768878593;
 },
 GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cOAs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cOAt; else goto cOAu;
       cOAt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowRuntimeRep_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cOAu: // global
           I64[Sp - 24] = block_cOvT_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uOBn; else goto cOvU;
       uOBn: // global
           call _cOvT(R1) args: 0, res: 0, upd: 0;
       cOvU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowRuntimeRep_$cshowsPrec_info" {
     GHC.Show.$fShowRuntimeRep_$cshowsPrec_info:
         const GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const uOBr_srtd;
 },
 section ""relreadonly" . uOBs_srtd" {
     uOBs_srtd:
         const SLKe_srt+864;
         const 47;
         const 140668768878593;
 },
 _cOvT() //  [R1]
         { []
         }
     {offset
       cOvT: // global
           _sLjb::P64 = P64[Sp + 8];
           _sLjd::P64 = P64[Sp + 16];
           switch [0 .. 11] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cOAf;
               case 1 : goto cOAg;
               case 2 : goto cOAh;
               case 3 : goto cOAi;
               case 4 : goto cOAj;
               case 5 : goto cOAk;
               case 6 : goto cOAl;
               case 7 : goto cOAm;
               case 8 : goto cOAn;
               case 9 : goto cOAo;
               case 10 : goto cOAp;
               case 11 : goto cOAq;
           }
       cOAq: // global
           R3 = _sLjd::P64;
           R2 = lvl21_rC0R_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cOAp: // global
           R3 = _sLjd::P64;
           R2 = lvl23_rC0T_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cOAo: // global
           R3 = _sLjd::P64;
           R2 = lvl25_rC0V_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cOAn: // global
           R3 = _sLjd::P64;
           R2 = lvl27_rC0X_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cOAm: // global
           R3 = _sLjd::P64;
           R2 = lvl29_rC0Z_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cOAl: // global
           R3 = _sLjd::P64;
           R2 = lvl31_rC11_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cOAk: // global
           R3 = _sLjd::P64;
           R2 = lvl33_rC13_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cOAj: // global
           R3 = _sLjd::P64;
           R2 = lvl35_rC15_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cOAi: // global
           R3 = _sLjd::P64;
           R2 = lvl37_rC17_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cOAh: // global
           I64[Sp] = block_cOyv_info;
           _sLjN::P64 = P64[R1 + 7];
           R1 = _sLjb::P64;
           P64[Sp + 8] = _sLjN::P64;
           if (R1 & 7 != 0) goto uOBm; else goto cOyw;
       uOBm: // global
           call _cOyv(R1) args: 0, res: 0, upd: 0;
       cOyw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cOAg: // global
           I64[Sp] = block_cOwK_info;
           _sLjr::P64 = P64[R1 + 7];
           R1 = _sLjb::P64;
           P64[Sp + 8] = _sLjr::P64;
           if (R1 & 7 != 0) goto uOBl; else goto cOwL;
       uOBl: // global
           call _cOwK(R1) args: 0, res: 0, upd: 0;
       cOwL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cOAf: // global
           I64[Sp - 8] = block_cOvY_info;
           _sLjf::P64 = P64[R1 + 7];
           _sLjg::P64 = P64[R1 + 15];
           R1 = _sLjb::P64;
           P64[Sp] = _sLjg::P64;
           P64[Sp + 8] = _sLjf::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uOBk; else goto cOvZ;
       uOBk: // global
           call _cOvY(R1) args: 0, res: 0, upd: 0;
       cOvZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cOvT_info" {
     block_cOvT_info:
         const _cOvT;
         const 2;
         const 18446744069414584350;
         const uOBs_srtd;
 },
 _cOyv() //  [R1]
         { []
         }
     {offset
       cOyv: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cOAO; else goto cOAN;
       cOAO: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cOAN: // global
           _sLjP::I64 = I64[R1 + 7];
           I64[Hp - 64] = p_sLjQ_info;
           P64[Hp - 56] = P64[Sp + 8];
           _sLjd::P64 = P64[Sp + 16];
           _cOyA::P64 = Hp - 63;
           if (%MO_S_Lt_W64(_sLjP::I64, 11)) goto cOAQ; else goto cOAS;
       cOAQ: // global
           Hp = Hp - 56;
           R2 = _sLjd::P64;
           R1 = _cOyA::P64;
           Sp = Sp + 24;
           call p_sLjQ_entry(R2, R1) args: 8, res: 0, upd: 8;
       cOAS: // global
           I64[Hp - 48] = sat_sLk8_info;
           P64[Hp - 32] = _sLjd::P64;
           P64[Hp - 24] = _cOyA::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOyv_info" {
     block_cOyv_info:
         const _cOyv;
         const 2;
         const 4294967326;
         const SLKe_srt+1160;
 },
 _cOwK() //  [R1]
         { []
         }
     {offset
       cOwK: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cOAG; else goto cOAF;
       cOAG: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cOAF: // global
           _sLjt::I64 = I64[R1 + 7];
           I64[Hp - 64] = p_sLju_info;
           P64[Hp - 56] = P64[Sp + 8];
           _sLjd::P64 = P64[Sp + 16];
           _cOwP::P64 = Hp - 63;
           if (%MO_S_Lt_W64(_sLjt::I64, 11)) goto cOAI; else goto cOAK;
       cOAI: // global
           Hp = Hp - 56;
           R2 = _sLjd::P64;
           R1 = _cOwP::P64;
           Sp = Sp + 24;
           call p_sLju_entry(R2, R1) args: 8, res: 0, upd: 8;
       cOAK: // global
           I64[Hp - 48] = sat_sLjM_info;
           P64[Hp - 32] = _sLjd::P64;
           P64[Hp - 24] = _cOwP::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOwK_info" {
     block_cOwK_info:
         const _cOwK;
         const 2;
         const 4294967326;
         const SLKe_srt+1160;
 },
 section ""relreadonly" . uOBt_srtd" {
     uOBt_srtd:
         const SLKe_srt+864;
         const 37;
         const 68719476737;
 },
 _cOvY() //  [R1]
         { []
         }
     {offset
       cOvY: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cOAy; else goto cOAx;
       cOAy: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cOAx: // global
           _sLji::I64 = I64[R1 + 7];
           I64[Hp - 72] = p_sLjj_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 8];
           _sLjd::P64 = P64[Sp + 24];
           _cOw3::P64 = Hp - 71;
           if (%MO_S_Lt_W64(_sLji::I64, 11)) goto cOAA; else goto cOAC;
       cOAA: // global
           Hp = Hp - 56;
           R2 = _sLjd::P64;
           R1 = _cOw3::P64;
           Sp = Sp + 32;
           call p_sLjj_entry(R2, R1) args: 8, res: 0, upd: 8;
       cOAC: // global
           I64[Hp - 48] = sat_sLjq_info;
           P64[Hp - 32] = _sLjd::P64;
           P64[Hp - 24] = _cOw3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOvY_info" {
     block_cOvY_info:
         const _cOvY;
         const 3;
         const 18446744069414584350;
         const uOBt_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.058546265 UTC

[section ""data" . GHC.Show.$fShowRuntimeRep1_closure" {
     GHC.Show.$fShowRuntimeRep1_closure:
         const GHC.Show.$fShowRuntimeRep1_info;
         const 0;
 },
 GHC.Show.$fShowRuntimeRep1_entry() //  [R2, R3]
         { []
         }
     {offset
       cOF3: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShow(,)1_closure+1;
           call GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowRuntimeRep1_info" {
     GHC.Show.$fShowRuntimeRep1_info:
         const GHC.Show.$fShowRuntimeRep1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SLKe_srt+1160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.062115669 UTC

[section ""data" . GHC.Show.$fShowRuntimeRep_$cshowList_closure" {
     GHC.Show.$fShowRuntimeRep_$cshowList_closure:
         const GHC.Show.$fShowRuntimeRep_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShowRuntimeRep_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cOFe: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowRuntimeRep1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowRuntimeRep_$cshowList_info" {
     GHC.Show.$fShowRuntimeRep_$cshowList_info:
         const GHC.Show.$fShowRuntimeRep_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SLKe_srt+1240;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.065962954 UTC

[section ""data" . GHC.Show.$fShowRuntimeRep_$cshow_closure" {
     GHC.Show.$fShowRuntimeRep_$cshow_closure:
         const GHC.Show.$fShowRuntimeRep_$cshow_info;
         const 0;
 },
 GHC.Show.$fShowRuntimeRep_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cOFp: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = R2;
           R2 = GHC.Show.$fShow(,)1_closure+1;
           call GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowRuntimeRep_$cshow_info" {
     GHC.Show.$fShowRuntimeRep_$cshow_info:
         const GHC.Show.$fShowRuntimeRep_$cshow_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SLKe_srt+1160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.069052012 UTC

[section ""data" . GHC.Show.$fShowRuntimeRep_closure" {
     GHC.Show.$fShowRuntimeRep_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowRuntimeRep_$cshowsPrec_closure+3;
         const GHC.Show.$fShowRuntimeRep_$cshow_closure+1;
         const GHC.Show.$fShowRuntimeRep_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.072130834 UTC

[section ""data" . GHC.Show.$fShowCallStack2_closure" {
     GHC.Show.$fShowCallStack2_closure:
         const GHC.Show.$fShowCallStack2_info;
         const 0;
 },
 GHC.Show.$fShowCallStack2_entry() //  [R2, R3]
         { []
         }
     {offset
       cOFF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOFL; else goto cOFM;
       cOFL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowCallStack2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cOFM: // global
           I64[Sp - 16] = block_cOFC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uOFR; else goto cOFD;
       uOFR: // global
           call _cOFC(R1) args: 0, res: 0, upd: 0;
       cOFD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowCallStack2_info" {
     GHC.Show.$fShowCallStack2_info:
         const GHC.Show.$fShowCallStack2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SLKe_srt+1248;
 },
 _cOFC() //  [R1]
         { []
         }
     {offset
       cOFC: // global
           _sLkd::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cOFI_info;
           R4 = _sLkd::P64;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Show.$w$s$cshowsPrec_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cOFC_info" {
     block_cOFC_info:
         const _cOFC;
         const 1;
         const 4294967326;
         const SLKe_srt+1256;
 },
 _cOFI() //  [R1, R2]
         { []
         }
     {offset
       cOFI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOFQ; else goto cOFP;
       cOFQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cOFP: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOFI_info" {
     block_cOFI_info:
         const _cOFI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.080242438 UTC

[section ""data" . GHC.Show.$fShowCallStack_$cshowsPrec_closure" {
     GHC.Show.$fShowCallStack_$cshowsPrec_closure:
         const GHC.Show.$fShowCallStack_$cshowsPrec_info;
         const 0;
 },
 ls_sLkm_entry() //  [R1]
         { []
         }
     {offset
       cOGg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOGh; else goto cOGi;
       cOGh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOGi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ls_sLkm_info" {
     ls_sLkm_info:
         const ls_sLkm_entry;
         const 1;
         const 16;
 },
 GHC.Show.$fShowCallStack_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cOGj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOGn; else goto cOGm;
       cOGn: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowCallStack_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cOGm: // global
           I64[Hp - 16] = ls_sLkm_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowCallStack2_closure+2;
           R1 = GHC.Show.showList___closure+3;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowCallStack_$cshowsPrec_info" {
     GHC.Show.$fShowCallStack_$cshowsPrec_info:
         const GHC.Show.$fShowCallStack_$cshowsPrec_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SLKe_srt+1248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.090077239 UTC

[section ""data" . GHC.Show.$fShowCallStack3_closure" {
     GHC.Show.$fShowCallStack3_closure:
         const GHC.Show.$fShowCallStack3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowCallStack3_entry() //  [R1]
         { []
         }
     {offset
       cOGE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOGF; else goto cOGG;
       cOGF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOGG: // global
           (_cOGB::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOGB::I64 == 0) goto cOGD; else goto cOGC;
       cOGD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOGC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOGB::I64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowCallStack3_info" {
     GHC.Show.$fShowCallStack3_info:
         const GHC.Show.$fShowCallStack3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.094591899 UTC

[section ""data" . lvl41_rC1b_closure" {
     lvl41_rC1b_closure:
         const :_con_info;
         const GHC.Show.showList__2_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.099764842 UTC

[section ""data" . GHC.Show.$fShowCallStack_showl_closure" {
     GHC.Show.$fShowCallStack_showl_closure:
         const GHC.Show.$fShowCallStack_showl_info;
         const 0;
 },
 sat_sLkv_entry() //  [R1]
         { []
         }
     {offset
       cOHd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOHe; else goto cOHf;
       cOHe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOHf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$fShowCallStack_showl_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLkv_info" {
     sat_sLkv_info:
         const sat_sLkv_entry;
         const 1;
         const 4294967312;
         const SLKe_srt+1272;
 },
 sat_sLkz_entry() //  [R1]
         { []
         }
     {offset
       cOHg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cOHk; else goto cOHl;
       cOHk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOHl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cOH4_info;
           _sLkr::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sLkr::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uOHs; else goto cOH5;
       uOHs: // global
           call _cOH4(R1) args: 0, res: 0, upd: 0;
       cOH5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLkz_info" {
     sat_sLkz_info:
         const sat_sLkz_entry;
         const 2;
         const 21474836498;
         const SLKe_srt+1256;
 },
 _cOH4() //  [R1]
         { []
         }
     {offset
       cOH4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOHo; else goto cOHn;
       cOHo: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cOHn: // global
           _sLkt::P64 = P64[R1 + 7];
           _sLku::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_sLkv_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cOHh_info;
           R4 = Hp - 16;
           R3 = _sLku::P64;
           R2 = _sLkt::P64;
           Sp = Sp + 8;
           call GHC.Show.$w$s$cshowsPrec_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cOH4_info" {
     block_cOH4_info:
         const _cOH4;
         const 1;
         const 21474836510;
         const SLKe_srt+1256;
 },
 _cOHh() //  [R1, R2]
         { []
         }
     {offset
       cOHh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOHr; else goto cOHq;
       cOHr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cOHq: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cOHh_info" {
     block_cOHh_info:
         const _cOHh;
         const 0;
         const 30;
 },
 GHC.Show.$fShowCallStack_showl_entry() //  [R2]
         { []
         }
     {offset
       cOHx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cOHy; else goto cOHz;
       cOHy: // global
           R2 = R2;
           R1 = GHC.Show.$fShowCallStack_showl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOHz: // global
           I64[Sp - 8] = block_cOGU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uOHG; else goto cOGV;
       uOHG: // global
           call _cOGU(R1) args: 0, res: 0, upd: 0;
       cOGV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowCallStack_showl_info" {
     GHC.Show.$fShowCallStack_showl_info:
         const GHC.Show.$fShowCallStack_showl_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SLKe_srt+1256;
 },
 _cOGU() //  [R1]
         { []
         }
     {offset
       cOGU: // global
           if (R1 & 7 == 1) goto cOHu; else goto cOHv;
       cOHu: // global
           R1 = lvl41_rC1b_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cOHv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cOHF; else goto cOHE;
       cOHF: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cOHE: // global
           _sLkq::P64 = P64[R1 + 6];
           _sLkr::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_sLkz_info;
           P64[Hp - 32] = _sLkq::P64;
           P64[Hp - 24] = _sLkr::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOGU_info" {
     block_cOGU_info:
         const _cOGU;
         const 0;
         const 21474836510;
         const SLKe_srt+1256;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.115306427 UTC

[section ""data" . GHC.Show.$fShowCallStack_$cshow_closure" {
     GHC.Show.$fShowCallStack_$cshow_closure:
         const GHC.Show.$fShowCallStack_$cshow_info;
         const 0;
 },
 sat_sLkH_entry() //  [R1]
         { []
         }
     {offset
       cOII: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOIJ; else goto cOIK;
       cOIJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOIK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$fShowCallStack_showl_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLkH_info" {
     sat_sLkH_info:
         const sat_sLkH_entry;
         const 1;
         const 4294967312;
         const SLKe_srt+1272;
 },
 sat_sLkL_entry() //  [R1]
         { []
         }
     {offset
       cOIL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cOIP; else goto cOIQ;
       cOIP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOIQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cOIz_info;
           _sLkD::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sLkD::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uOIX; else goto cOIA;
       uOIX: // global
           call _cOIz(R1) args: 0, res: 0, upd: 0;
       cOIA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLkL_info" {
     sat_sLkL_info:
         const sat_sLkL_entry;
         const 2;
         const 21474836498;
         const SLKe_srt+1256;
 },
 _cOIz() //  [R1]
         { []
         }
     {offset
       cOIz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOIT; else goto cOIS;
       cOIT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cOIS: // global
           _sLkF::P64 = P64[R1 + 7];
           _sLkG::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_sLkH_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cOIM_info;
           R4 = Hp - 16;
           R3 = _sLkG::P64;
           R2 = _sLkF::P64;
           Sp = Sp + 8;
           call GHC.Show.$w$s$cshowsPrec_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cOIz_info" {
     block_cOIz_info:
         const _cOIz;
         const 1;
         const 21474836510;
         const SLKe_srt+1256;
 },
 _cOIM() //  [R1, R2]
         { []
         }
     {offset
       cOIM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOIW; else goto cOIV;
       cOIW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cOIV: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cOIM_info" {
     block_cOIM_info:
         const _cOIM;
         const 0;
         const 30;
 },
 GHC.Show.$fShowCallStack_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cOJ2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cOJ3; else goto cOJ4;
       cOJ3: // global
           R2 = R2;
           R1 = GHC.Show.$fShowCallStack_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOJ4: // global
           I64[Sp - 8] = block_cOIq_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowCallStack_$cshow_info" {
     GHC.Show.$fShowCallStack_$cshow_info:
         const GHC.Show.$fShowCallStack_$cshow_entry;
         const 0;
         const 124554051598;
         const 4294967301;
         const SLKe_srt+1256;
 },
 _cOIq() //  [R1]
         { []
         }
     {offset
       cOIq: // global
           if (R1 & 7 == 1) goto cOIZ; else goto cOJ0;
       cOIZ: // global
           R1 = GHC.Show.$fShowCallStack3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cOJ0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cOJa; else goto cOJ9;
       cOJa: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cOJ9: // global
           _sLkC::P64 = P64[R1 + 6];
           _sLkD::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_sLkL_info;
           P64[Hp - 32] = _sLkC::P64;
           P64[Hp - 24] = _sLkD::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOIq_info" {
     block_cOIq_info:
         const _cOIq;
         const 0;
         const 90194313246;
         const SLKe_srt+1256;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.128901478 UTC

[section ""data" . GHC.Show.$fShowCallStack1_closure" {
     GHC.Show.$fShowCallStack1_closure:
         const GHC.Show.$fShowCallStack1_info;
         const 0;
 },
 ls_sLkN_entry() //  [R1]
         { []
         }
     {offset
       cOJX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOJY; else goto cOJZ;
       cOJY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOJZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ls_sLkN_info" {
     ls_sLkN_info:
         const ls_sLkN_entry;
         const 1;
         const 16;
 },
 GHC.Show.$fShowCallStack1_entry() //  [R2]
         { []
         }
     {offset
       cOK0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOK4; else goto cOK3;
       cOK4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Show.$fShowCallStack1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOK3: // global
           I64[Hp - 16] = ls_sLkN_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowCallStack2_closure+2;
           R1 = GHC.Show.showList___closure+3;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowCallStack1_info" {
     GHC.Show.$fShowCallStack1_info:
         const GHC.Show.$fShowCallStack1_entry;
         const 0;
         const 279172874254;
         const 4294967301;
         const SLKe_srt+1248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.135204563 UTC

[section ""data" . GHC.Show.$fShowCallStack_$cshowList_closure" {
     GHC.Show.$fShowCallStack_$cshowList_closure:
         const GHC.Show.$fShowCallStack_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShowCallStack_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cOKj: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowCallStack1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowCallStack_$cshowList_info" {
     GHC.Show.$fShowCallStack_$cshowList_info:
         const GHC.Show.$fShowCallStack_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SLKe_srt+1296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.13840996 UTC

[section ""data" . GHC.Show.$fShowCallStack_closure" {
     GHC.Show.$fShowCallStack_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowCallStack_$cshowsPrec_closure+2;
         const GHC.Show.$fShowCallStack_$cshow_closure+1;
         const GHC.Show.$fShowCallStack_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.140029831 UTC

[section ""data" . GHC.Show.$fShowNonEmpty2_closure" {
     GHC.Show.$fShowNonEmpty2_closure:
         const GHC.Types.I#_con_info;
         const 6;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.141735619 UTC

[section ""cstring" . GHC.Show.$fShowNonEmpty1_bytes" {
     GHC.Show.$fShowNonEmpty1_bytes:
         I8[] [32,58,124,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.148365909 UTC

[section ""data" . GHC.Show.$w$cshowsPrec7_closure" {
     GHC.Show.$w$cshowsPrec7_closure:
         const GHC.Show.$w$cshowsPrec7_info;
 },
 GHC.Show.$w$cshowsPrec7_slow() //  [R1]
         { []
         }
     {offset
       cOKu: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Show.$w$cshowsPrec7_entry(R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 f12_sLkV_entry() //  [R1]
         { []
         }
     {offset
       cOKC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cOKD; else goto cOKE;
       cOKD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOKE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShowNonEmpty2_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f12_sLkV_info" {
     f12_sLkV_info:
         const f12_sLkV_entry;
         const 2;
         const 18;
 },
 g_sLkW_entry() //  [R1]
         { []
         }
     {offset
       cOKJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cOKK; else goto cOKL;
       cOKK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOKL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Show.showList_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sLkW_info" {
     g_sLkW_info:
         const g_sLkW_entry;
         const 2;
         const 18;
 },
 sat_sLl0_entry() //  [R1]
         { []
         }
     {offset
       cOKZ: // global
           _sLl0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cOL0; else goto cOL1;
       cOL1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cOL3; else goto cOL2;
       cOL3: // global
           HpAlloc = 32;
           goto cOL0;
       cOL0: // global
           R1 = _sLl0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOL2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLl0::P64;
           _sLkW::P64 = P64[_sLl0::P64 + 16];
           _sLkY::P64 = P64[_sLl0::P64 + 24];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sLkW::P64;
           P64[Hp] = _sLkY::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowNonEmpty1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLl0_info" {
     sat_sLl0_info:
         const sat_sLl0_entry;
         const 2;
         const 18;
 },
 sat_sLl1_entry() //  [R1, R2]
         { []
         }
     {offset
       cOL4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cOL8; else goto cOL7;
       cOL8: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOL7: // global
           _sLkV::P64 = P64[R1 + 7];
           _sLkW::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sLl0_info;
           P64[Hp - 8] = _sLkW::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _sLkV::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLl1_info" {
     sat_sLl1_info:
         const sat_sLl1_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sLl4_entry() //  [R1]
         { []
         }
     {offset
       cOLs: // global
           _sLl4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cOLt; else goto cOLu;
       cOLu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOLw; else goto cOLv;
       cOLw: // global
           HpAlloc = 24;
           goto cOLt;
       cOLt: // global
           R1 = _sLl4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOLv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLl4::P64;
           _sLkW::P64 = P64[_sLl4::P64 + 16];
           _sLl2::P64 = P64[_sLl4::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sLl2::P64;
           R2 = Hp - 14;
           R1 = _sLkW::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLl4_info" {
     sat_sLl4_info:
         const sat_sLl4_entry;
         const 2;
         const 18;
 },
 sat_sLl5_entry() //  [R1]
         { []
         }
     {offset
       cOLx: // global
           _sLl5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cOLy; else goto cOLz;
       cOLz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cOLB; else goto cOLA;
       cOLB: // global
           HpAlloc = 32;
           goto cOLy;
       cOLy: // global
           R1 = _sLl5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOLA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLl5::P64;
           _sLkW::P64 = P64[_sLl5::P64 + 16];
           _sLl2::P64 = P64[_sLl5::P64 + 24];
           I64[Hp - 24] = sat_sLl4_info;
           P64[Hp - 8] = _sLkW::P64;
           P64[Hp] = _sLl2::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowNonEmpty1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLl5_info" {
     sat_sLl5_info:
         const sat_sLl5_entry;
         const 2;
         const 18;
 },
 sat_sLl6_entry() //  [R1]
         { []
         }
     {offset
       cOLC: // global
           _sLl6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cOLD; else goto cOLE;
       cOLE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cOLG; else goto cOLF;
       cOLG: // global
           HpAlloc = 32;
           goto cOLD;
       cOLD: // global
           R1 = _sLl6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOLF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLl6::P64;
           _sLkV::P64 = P64[_sLl6::P64 + 16];
           _sLkW::P64 = P64[_sLl6::P64 + 24];
           _sLl2::P64 = P64[_sLl6::P64 + 32];
           I64[Hp - 24] = sat_sLl5_info;
           P64[Hp - 8] = _sLkW::P64;
           P64[Hp] = _sLl2::P64;
           R2 = Hp - 24;
           R1 = _sLkV::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLl6_info" {
     sat_sLl6_info:
         const sat_sLl6_entry;
         const 3;
         const 15;
 },
 sat_sLl7_entry() //  [R1, R2]
         { []
         }
     {offset
       cOLI: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cOLM; else goto cOLL;
       cOLM: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOLL: // global
           _sLkV::P64 = P64[R1 + 7];
           _sLkW::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sLl6_info;
           P64[Hp - 40] = _sLkV::P64;
           P64[Hp - 32] = _sLkW::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLl7_info" {
     sat_sLl7_info:
         const sat_sLl7_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 GHC.Show.$w$cshowsPrec7_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cOLQ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cOLU; else goto cOLT;
       cOLU: // global
           HpAlloc = 88;
           R1 = GHC.Show.$w$cshowsPrec7_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cOLT: // global
           I64[Hp - 80] = f12_sLkV_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = g_sLkW_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R5;
           _cOKy::P64 = Hp - 80;
           _cOKF::P64 = Hp - 48;
           if (%MO_S_Lt_W64(R3, 6)) goto cOLO; else goto cOLP;
       cOLO: // global
           I64[Hp - 16] = sat_sLl1_info;
           P64[Hp - 8] = _cOKy::P64;
           P64[Hp] = _cOKF::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cOLP: // global
           I64[Hp - 16] = sat_sLl7_info;
           P64[Hp - 8] = _cOKy::P64;
           P64[Hp] = _cOKF::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec7_info" {
     GHC.Show.$w$cshowsPrec7_info:
         const GHC.Show.$w$cshowsPrec7_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 132;
         const GHC.Show.$w$cshowsPrec7_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.168744411 UTC

[section ""data" . GHC.Show.$fShowNonEmpty_$cshowsPrec_closure" {
     GHC.Show.$fShowNonEmpty_$cshowsPrec_closure:
         const GHC.Show.$fShowNonEmpty_$cshowsPrec_info;
 },
 GHC.Show.$fShowNonEmpty_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cON4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cON8; else goto cON9;
       cON8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowNonEmpty_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cON9: // global
           I64[Sp - 24] = block_cON1_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uONh; else goto cON2;
       uONh: // global
           call _cON1(R1) args: 0, res: 0, upd: 0;
       cON2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowNonEmpty_$cshowsPrec_info" {
     GHC.Show.$fShowNonEmpty_$cshowsPrec_info:
         const GHC.Show.$fShowNonEmpty_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cON1() //  [R1]
         { []
         }
     {offset
       cON1: // global
           I64[Sp] = block_cON7_info;
           _sLlc::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sLlc::I64;
           if (R1 & 7 != 0) goto uONg; else goto cONb;
       uONg: // global
           call _cON7(R1) args: 0, res: 0, upd: 0;
       cONb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cON1_info" {
     block_cON1_info:
         const _cON1;
         const 2;
         const 30;
 },
 _cON7() //  [R1]
         { []
         }
     {offset
       cON7: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Show.$w$cshowsPrec7_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cON7_info" {
     block_cON7_info:
         const _cON7;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.177597128 UTC

[section ""data" . GHC.Show.$w$cshow_closure" {
     GHC.Show.$w$cshow_closure:
         const GHC.Show.$w$cshow_info;
 },
 sat_sLlj_entry() //  [R1]
         { []
         }
     {offset
       cONJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cONK; else goto cONL;
       cONK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cONL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call GHC.Show.showList_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLlj_info" {
     sat_sLlj_info:
         const sat_sLlj_entry;
         const 2;
         const 18;
 },
 sat_sLlk_entry() //  [R1]
         { []
         }
     {offset
       cONM: // global
           _sLlk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cONN; else goto cONO;
       cONO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cONQ; else goto cONP;
       cONQ: // global
           HpAlloc = 32;
           goto cONN;
       cONN: // global
           R1 = _sLlk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cONP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLlk::P64;
           _sLlg::P64 = P64[_sLlk::P64 + 16];
           _sLli::P64 = P64[_sLlk::P64 + 24];
           I64[Hp - 24] = sat_sLlj_info;
           P64[Hp - 8] = _sLlg::P64;
           P64[Hp] = _sLli::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowNonEmpty1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLlk_info" {
     sat_sLlk_info:
         const sat_sLlk_entry;
         const 2;
         const 18;
 },
 GHC.Show.$w$cshow_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cONR: // global
           _sLli::P64 = R4;
           _sLlh::P64 = R3;
           _sLlg::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cONS; else goto cONT;
       cONT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cONV; else goto cONU;
       cONV: // global
           HpAlloc = 32;
           goto cONS;
       cONS: // global
           R4 = _sLli::P64;
           R3 = _sLlh::P64;
           R2 = _sLlg::P64;
           R1 = GHC.Show.$w$cshow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cONU: // global
           I64[Hp - 24] = sat_sLlk_info;
           P64[Hp - 8] = _sLlg::P64;
           P64[Hp] = _sLli::P64;
           R2 = _sLlg::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Show.$fShowNonEmpty2_closure+1;
           P64[Sp - 16] = _sLlh::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshow_info" {
     GHC.Show.$w$cshow_info:
         const GHC.Show.$w$cshow_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.185814803 UTC

[section ""data" . GHC.Show.$fShowNonEmpty_$cshow_closure" {
     GHC.Show.$fShowNonEmpty_$cshow_closure:
         const GHC.Show.$fShowNonEmpty_$cshow_info;
 },
 GHC.Show.$fShowNonEmpty_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cOOr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOOs; else goto cOOt;
       cOOs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowNonEmpty_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cOOt: // global
           I64[Sp - 16] = block_cOOo_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uOOx; else goto cOOp;
       uOOx: // global
           call _cOOo(R1) args: 0, res: 0, upd: 0;
       cOOp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowNonEmpty_$cshow_info" {
     GHC.Show.$fShowNonEmpty_$cshow_info:
         const GHC.Show.$fShowNonEmpty_$cshow_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cOOo() //  [R1]
         { []
         }
     {offset
       cOOo: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Show.$w$cshow_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOOo_info" {
     block_cOOo_info:
         const _cOOo;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.192418434 UTC

[section ""data" . GHC.Show.$fShowNonEmpty_$cshowList_closure" {
     GHC.Show.$fShowNonEmpty_$cshowList_closure:
         const GHC.Show.$fShowNonEmpty_$cshowList_info;
 },
 sat_sLlx_entry() //  [R1, R2]
         { []
         }
     {offset
       cOOU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOOV; else goto cOOW;
       cOOV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOOW: // global
           I64[Sp - 16] = block_cOOR_info;
           _sLlq::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sLlq::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uOP0; else goto cOOS;
       uOP0: // global
           call _cOOR(R1) args: 0, res: 0, upd: 0;
       cOOS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLlx_info" {
     sat_sLlx_info:
         const sat_sLlx_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cOOR() //  [R1]
         { []
         }
     {offset
       cOOR: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = 0;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec7_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOOR_info" {
     block_cOOR_info:
         const _cOOR;
         const 1;
         const 30;
 },
 GHC.Show.$fShowNonEmpty_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cOP1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cOP5; else goto cOP4;
       cOP5: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowNonEmpty_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cOP4: // global
           I64[Hp - 8] = sat_sLlx_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowNonEmpty_$cshowList_info" {
     GHC.Show.$fShowNonEmpty_$cshowList_info:
         const GHC.Show.$fShowNonEmpty_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.200355622 UTC

[section ""data" . GHC.Show.$fShowNonEmpty_closure" {
     GHC.Show.$fShowNonEmpty_closure:
         const GHC.Show.$fShowNonEmpty_info;
 },
 sat_sLlB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cOPt: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Show.$fShowNonEmpty_$cshowList_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLlB_info" {
     sat_sLlB_info:
         const sat_sLlB_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sLlA_entry() //  [R1, R2]
         { []
         }
     {offset
       cOPB: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Show.$fShowNonEmpty_$cshow_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLlA_info" {
     sat_sLlA_info:
         const sat_sLlA_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sLlz_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cOPJ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Show.$fShowNonEmpty_$cshowsPrec_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLlz_info" {
     sat_sLlz_info:
         const sat_sLlz_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 GHC.Show.$fShowNonEmpty_entry() //  [R2]
         { []
         }
     {offset
       cOPN: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cOPR; else goto cOPQ;
       cOPR: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = GHC.Show.$fShowNonEmpty_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOPQ: // global
           I64[Hp - 72] = sat_sLlB_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sLlA_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sLlz_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowNonEmpty_info" {
     GHC.Show.$fShowNonEmpty_info:
         const GHC.Show.$fShowNonEmpty_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.209830215 UTC

[section ""cstring" . GHC.Show.$fShowMaybe5_bytes" {
     GHC.Show.$fShowMaybe5_bytes:
         I8[] [78,111,116,104,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.212272523 UTC

[section ""data" . GHC.Show.$fShowMaybe4_closure" {
     GHC.Show.$fShowMaybe4_closure:
         const GHC.Show.$fShowMaybe4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowMaybe4_entry() //  [R1]
         { []
         }
     {offset
       cOQk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOQl; else goto cOQm;
       cOQl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOQm: // global
           (_cOQh::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOQh::I64 == 0) goto cOQj; else goto cOQi;
       cOQj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOQi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOQh::I64;
           R2 = GHC.Show.$fShowMaybe5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowMaybe4_info" {
     GHC.Show.$fShowMaybe4_info:
         const GHC.Show.$fShowMaybe4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.216360058 UTC

[section ""data" . GHC.Show.$fShowMaybe3_closure" {
     GHC.Show.$fShowMaybe3_closure:
         const GHC.Show.$fShowMaybe3_info;
         const 0;
 },
 GHC.Show.$fShowMaybe3_entry() //  [R2]
         { []
         }
     {offset
       cOQz: // global
           R3 = R2;
           R2 = GHC.Show.$fShowMaybe4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowMaybe3_info" {
     GHC.Show.$fShowMaybe3_info:
         const GHC.Show.$fShowMaybe3_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SLKe_srt+1304;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.219833076 UTC

[section ""cstring" . GHC.Show.$fShowMaybe2_bytes" {
     GHC.Show.$fShowMaybe2_bytes:
         I8[] [74,117,115,116,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.222173656 UTC

[section ""data" . GHC.Show.$fShowMaybe1_closure" {
     GHC.Show.$fShowMaybe1_closure:
         const GHC.Show.$fShowMaybe1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowMaybe1_entry() //  [R1]
         { []
         }
     {offset
       cOQN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOQO; else goto cOQP;
       cOQO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOQP: // global
           (_cOQK::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOQK::I64 == 0) goto cOQM; else goto cOQL;
       cOQM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOQL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOQK::I64;
           R2 = GHC.Show.$fShowMaybe2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowMaybe1_info" {
     GHC.Show.$fShowMaybe1_info:
         const GHC.Show.$fShowMaybe1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.230323512 UTC

[section ""data" . GHC.Show.$fShowMaybe_$cshowsPrec_closure" {
     GHC.Show.$fShowMaybe_$cshowsPrec_closure:
         const GHC.Show.$fShowMaybe_$cshowsPrec_info;
         const 0;
 },
 g_sLlJ_entry() //  [R1]
         { []
         }
     {offset
       cORh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cORi; else goto cORj;
       cORi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cORj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.appPrec1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sLlJ_info" {
     g_sLlJ_info:
         const g_sLlJ_entry;
         const 2;
         const 18;
 },
 sat_sLlM_entry() //  [R1]
         { []
         }
     {offset
       cORw: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLlM_info" {
     sat_sLlM_info:
         const sat_sLlM_entry;
         const 2;
         const 18;
 },
 sat_sLlN_entry() //  [R1, R2]
         { []
         }
     {offset
       cORz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cORD; else goto cORC;
       cORD: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cORC: // global
           _sLlJ::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sLlM_info;
           P64[Hp - 8] = _sLlJ::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowMaybe1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLlN_info" {
     sat_sLlN_info:
         const sat_sLlN_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SLKe_srt+1312;
 },
 sat_sLlQ_entry() //  [R1]
         { []
         }
     {offset
       cORT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cORX; else goto cORW;
       cORX: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cORW: // global
           _sLlJ::P64 = P64[R1 + 16];
           _sLlO::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sLlO::P64;
           R2 = Hp - 14;
           R1 = _sLlJ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLlQ_info" {
     sat_sLlQ_info:
         const sat_sLlQ_entry;
         const 2;
         const 18;
 },
 sat_sLlR_entry() //  [R1]
         { []
         }
     {offset
       cORY: // global
           _sLlR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cORZ; else goto cOS0;
       cOS0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cOS2; else goto cOS1;
       cOS2: // global
           HpAlloc = 32;
           goto cORZ;
       cORZ: // global
           R1 = _sLlR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOS1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLlR::P64;
           _sLlJ::P64 = P64[_sLlR::P64 + 16];
           _sLlO::P64 = P64[_sLlR::P64 + 24];
           I64[Hp - 24] = sat_sLlQ_info;
           P64[Hp - 8] = _sLlJ::P64;
           P64[Hp] = _sLlO::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowMaybe1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLlR_info" {
     sat_sLlR_info:
         const sat_sLlR_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1312;
 },
 sat_sLlS_entry() //  [R1, R2]
         { []
         }
     {offset
       cOS4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cOS8; else goto cOS7;
       cOS8: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOS7: // global
           _sLlJ::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sLlR_info;
           P64[Hp - 32] = _sLlJ::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLlS_info" {
     sat_sLlS_info:
         const sat_sLlS_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SLKe_srt+1312;
 },
 GHC.Show.$fShowMaybe_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cOSd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cOSe; else goto cOSf;
       cOSe: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowMaybe_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cOSf: // global
           I64[Sp - 24] = block_cOR2_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uOSq; else goto cOR3;
       uOSq: // global
           call _cOR2(R1) args: 0, res: 0, upd: 0;
       cOR3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowMaybe_$cshowsPrec_info" {
     GHC.Show.$fShowMaybe_$cshowsPrec_info:
         const GHC.Show.$fShowMaybe_$cshowsPrec_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const SLKe_srt+1312;
 },
 _cOR2() //  [R1]
         { []
         }
     {offset
       cOR2: // global
           if (R1 & 7 == 1) goto cOSa; else goto cOSb;
       cOSa: // global
           R1 = GHC.Show.$fShowMaybe3_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cOSb: // global
           I64[Sp] = block_cOR8_info;
           _sLlG::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sLlG::P64;
           if (R1 & 7 != 0) goto uOSp; else goto cOR9;
       uOSp: // global
           call _cOR8(R1) args: 0, res: 0, upd: 0;
       cOR9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cOR2_info" {
     block_cOR2_info:
         const _cOR2;
         const 2;
         const 21474836510;
         const SLKe_srt+1312;
 },
 _cOR8() //  [R1]
         { []
         }
     {offset
       cOR8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cOSl; else goto cOSk;
       cOSl: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cOSk: // global
           _sLlI::I64 = I64[R1 + 7];
           I64[Hp - 40] = g_sLlJ_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           _cORd::P64 = Hp - 40;
           if (%MO_S_Lt_W64(_sLlI::I64, 11)) goto cOSn; else goto cOSo;
       cOSn: // global
           I64[Hp - 8] = sat_sLlN_info;
           P64[Hp] = _cORd::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cOSo: // global
           I64[Hp - 8] = sat_sLlS_info;
           P64[Hp] = _cORd::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOR8_info" {
     block_cOR8_info:
         const _cOR8;
         const 2;
         const 4294967326;
         const SLKe_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.250373509 UTC

[section ""data" . GHC.Show.$fShowMaybe_$cshow_closure" {
     GHC.Show.$fShowMaybe_$cshow_closure:
         const GHC.Show.$fShowMaybe_$cshow_info;
         const 0;
 },
 sat_sLlX_entry() //  [R1]
         { []
         }
     {offset
       cOTC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cOTD; else goto cOTE;
       cOTD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOTE: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Show.appPrec1_closure+1;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLlX_info" {
     sat_sLlX_info:
         const sat_sLlX_entry;
         const 2;
         const 18;
 },
 GHC.Show.$fShowMaybe_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cOTJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOTK; else goto cOTL;
       cOTK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowMaybe_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cOTL: // global
           I64[Sp - 16] = block_cOTs_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uOTR; else goto cOTt;
       uOTR: // global
           call _cOTs(R1) args: 0, res: 0, upd: 0;
       cOTt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowMaybe_$cshow_info" {
     GHC.Show.$fShowMaybe_$cshow_info:
         const GHC.Show.$fShowMaybe_$cshow_entry;
         const 0;
         const 81604378638;
         const 8589934607;
         const SLKe_srt+1304;
 },
 _cOTs() //  [R1]
         { []
         }
     {offset
       cOTs: // global
           if (R1 & 7 == 1) goto cOTG; else goto cOTH;
       cOTG: // global
           R1 = GHC.Show.$fShowMaybe4_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cOTH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cOTQ; else goto cOTP;
       cOTQ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cOTP: // global
           _sLlW::P64 = P64[R1 + 6];
           I64[Hp - 24] = sat_sLlX_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sLlW::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowMaybe1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOTs_info" {
     block_cOTs_info:
         const _cOTs;
         const 1;
         const 12884901918;
         const SLKe_srt+1304;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.258848629 UTC

[section ""data" . GHC.Show.$fShowMaybe_$cshowList_closure" {
     GHC.Show.$fShowMaybe_$cshowList_closure:
         const GHC.Show.$fShowMaybe_$cshowList_info;
         const 0;
 },
 sat_sLm1_entry() //  [R1, R2]
         { []
         }
     {offset
       cOUp: // global
           R4 = R2;
           R3 = GHC.Show.$fShow(,)1_closure+1;
           R2 = P64[R1 + 7];
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLm1_info" {
     sat_sLm1_info:
         const sat_sLm1_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SLKe_srt+1320;
 },
 GHC.Show.$fShowMaybe_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cOUs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cOUw; else goto cOUv;
       cOUw: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowMaybe_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cOUv: // global
           I64[Hp - 8] = sat_sLm1_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowMaybe_$cshowList_info" {
     GHC.Show.$fShowMaybe_$cshowList_info:
         const GHC.Show.$fShowMaybe_$cshowList_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const SLKe_srt+1320;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.265423444 UTC

[section ""data" . GHC.Show.$fShowMaybe_closure" {
     GHC.Show.$fShowMaybe_closure:
         const GHC.Show.$fShowMaybe_info;
         const 0;
 },
 sat_sLm5_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cOUO: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Show.$fShowMaybe_$cshowList_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLm5_info" {
     sat_sLm5_info:
         const sat_sLm5_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SLKe_srt+1344;
 },
 sat_sLm4_entry() //  [R1, R2]
         { []
         }
     {offset
       cOUW: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Show.$fShowMaybe_$cshow_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLm4_info" {
     sat_sLm4_info:
         const sat_sLm4_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SLKe_srt+1336;
 },
 sat_sLm3_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cOV4: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLm3_info" {
     sat_sLm3_info:
         const sat_sLm3_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SLKe_srt+1320;
 },
 GHC.Show.$fShowMaybe_entry() //  [R2]
         { []
         }
     {offset
       cOV8: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cOVc; else goto cOVb;
       cOVc: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = GHC.Show.$fShowMaybe_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOVb: // global
           I64[Hp - 72] = sat_sLm5_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sLm4_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sLm3_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowMaybe_info" {
     GHC.Show.$fShowMaybe_info:
         const GHC.Show.$fShowMaybe_entry;
         const 0;
         const 124554051598;
         const 4294967301;
         const SLKe_srt+1320;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.273604081 UTC

[section ""cstring" . f_rC1c_bytes" {
     f_rC1c_bytes:
         I8[] [75,105,110,100,82,101,112,84,121,112,101,76,105,116,68,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.275998283 UTC

[section ""data" . f1_rC1d_closure" {
     f1_rC1d_closure:
         const f1_rC1d_info;
         const 0;
         const 0;
         const 0;
 },
 f1_rC1d_entry() //  [R1]
         { []
         }
     {offset
       cOVF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOVG; else goto cOVH;
       cOVG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOVH: // global
           (_cOVC::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOVC::I64 == 0) goto cOVE; else goto cOVD;
       cOVE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOVD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOVC::I64;
           R2 = f_rC1c_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_rC1d_info" {
     f1_rC1d_info:
         const f1_rC1d_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.279830614 UTC

[section ""cstring" . f2_rC1e_bytes" {
     f2_rC1e_bytes:
         I8[] [75,105,110,100,82,101,112,84,121,112,101,76,105,116,83,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.282189972 UTC

[section ""data" . f3_rC1f_closure" {
     f3_rC1f_closure:
         const f3_rC1f_info;
         const 0;
         const 0;
         const 0;
 },
 f3_rC1f_entry() //  [R1]
         { []
         }
     {offset
       cOVX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOVY; else goto cOVZ;
       cOVY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOVZ: // global
           (_cOVU::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOVU::I64 == 0) goto cOVW; else goto cOVV;
       cOVW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOVV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOVU::I64;
           R2 = f2_rC1e_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f3_rC1f_info" {
     f3_rC1f_info:
         const f3_rC1f_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.286469608 UTC

[section ""cstring" . f4_rC1g_bytes" {
     f4_rC1g_bytes:
         I8[] [75,105,110,100,82,101,112,84,89,80,69,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.288787164 UTC

[section ""data" . f5_rC1h_closure" {
     f5_rC1h_closure:
         const f5_rC1h_info;
         const 0;
         const 0;
         const 0;
 },
 f5_rC1h_entry() //  [R1]
         { []
         }
     {offset
       cOWf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOWg; else goto cOWh;
       cOWg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOWh: // global
           (_cOWc::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOWc::I64 == 0) goto cOWe; else goto cOWd;
       cOWe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOWd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOWc::I64;
           R2 = f4_rC1g_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f5_rC1h_info" {
     f5_rC1h_info:
         const f5_rC1h_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.292679408 UTC

[section ""cstring" . f6_rC1i_bytes" {
     f6_rC1i_bytes:
         I8[] [75,105,110,100,82,101,112,70,117,110,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.295020408 UTC

[section ""data" . f7_rC1j_closure" {
     f7_rC1j_closure:
         const f7_rC1j_info;
         const 0;
         const 0;
         const 0;
 },
 f7_rC1j_entry() //  [R1]
         { []
         }
     {offset
       cOWx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOWy; else goto cOWz;
       cOWy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOWz: // global
           (_cOWu::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOWu::I64 == 0) goto cOWw; else goto cOWv;
       cOWw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOWv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOWu::I64;
           R2 = f6_rC1i_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f7_rC1j_info" {
     f7_rC1j_info:
         const f7_rC1j_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.298735302 UTC

[section ""cstring" . f8_rC1k_bytes" {
     f8_rC1k_bytes:
         I8[] [75,105,110,100,82,101,112,65,112,112,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.301113743 UTC

[section ""data" . f9_rC1l_closure" {
     f9_rC1l_closure:
         const f9_rC1l_info;
         const 0;
         const 0;
         const 0;
 },
 f9_rC1l_entry() //  [R1]
         { []
         }
     {offset
       cOWP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOWQ; else goto cOWR;
       cOWQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOWR: // global
           (_cOWM::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOWM::I64 == 0) goto cOWO; else goto cOWN;
       cOWO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOWN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOWM::I64;
           R2 = f8_rC1k_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f9_rC1l_info" {
     f9_rC1l_info:
         const f9_rC1l_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.304663503 UTC

[section ""cstring" . f10_rC1m_bytes" {
     f10_rC1m_bytes:
         I8[] [75,105,110,100,82,101,112,86,97,114,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.307035863 UTC

[section ""data" . f11_rC1n_closure" {
     f11_rC1n_closure:
         const f11_rC1n_info;
         const 0;
         const 0;
         const 0;
 },
 f11_rC1n_entry() //  [R1]
         { []
         }
     {offset
       cOX7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOX8; else goto cOX9;
       cOX8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOX9: // global
           (_cOX4::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cOX4::I64 == 0) goto cOX6; else goto cOX5;
       cOX6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cOX5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cOX4::I64;
           R2 = f10_rC1m_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f11_rC1n_info" {
     f11_rC1n_info:
         const f11_rC1n_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.310693383 UTC

[section ""cstring" . lvl42_rC1o_bytes" {
     lvl42_rC1o_bytes:
         I8[] [32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.312330544 UTC

[section ""cstring" . lvl43_rC1p_bytes" {
     lvl43_rC1p_bytes:
         I8[] [75,105,110,100,82,101,112,84,121,67,111,110,65,112,112,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.363584281 UTC

[section ""data" . GHC.Show.$w$cshowsPrec5_closure" {
     GHC.Show.$w$cshowsPrec5_closure:
         const GHC.Show.$w$cshowsPrec5_info;
         const 0;
 },
 sat_sLml_entry() //  [R1]
         { []
         }
     {offset
       cOXL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cOXM; else goto cOXN;
       cOXM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOXN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLml_info" {
     sat_sLml_info:
         const sat_sLml_entry;
         const 4294967296;
         const 17;
 },
 f12_sLmb_entry() //  [R1]
         { []
         }
     {offset
       cOXO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cOXP; else goto cOXQ;
       cOXP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOXQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cOXx_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uOY3; else goto cOXy;
       uOY3: // global
           call _cOXx(R1) args: 0, res: 0, upd: 0;
       cOXy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . f12_sLmb_info" {
     f12_sLmb_info:
         const f12_sLmb_entry;
         const 1;
         const 16;
 },
 _cOXx() //  [R1]
         { []
         }
     {offset
       cOXx: // global
           I64[Sp] = block_cOXC_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto uOY2; else goto cOXD;
       uOY2: // global
           call _cOXC(R1) args: 0, res: 0, upd: 0;
       cOXD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cOXx_info" {
     block_cOXx_info:
         const _cOXx;
         const 0;
         const 30;
 },
 _cOXC() //  [R1]
         { []
         }
     {offset
       cOXC: // global
           if (R1 & 7 == 1) goto cOXT; else goto cOY0;
       cOXT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cOXW; else goto cOXV;
       cOXW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cOXV: // global
           _sLmk::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sLml_info;
           I64[Hp] = _sLmk::I64;
           R2 = Hp - 16;
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
       cOY0: // global
           R2 = P64[R1 + 6];
           R1 = GHC.Base.++_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cOXC_info" {
     block_cOXC_info:
         const _cOXC;
         const 0;
         const 30;
 },
 sat_sLmz_entry() //  [R1]
         { []
         }
     {offset
       cOYQ: // global
           _sLmz::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cOYR; else goto cOYS;
       cOYS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cOYU; else goto cOYT;
       cOYU: // global
           HpAlloc = 32;
           goto cOYR;
       cOYR: // global
           R1 = _sLmz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOYT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLmz::P64;
           _sLmt::P64 = P64[_sLmz::P64 + 16];
           _sLmw::P64 = P64[_sLmz::P64 + 24];
           _sLmx::P64 = P64[_sLmz::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sLmt::P64;
           P64[Hp] = _sLmx::P64;
           R3 = _sLmw::P64;
           R2 = 0;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Show.$w$cshowsPrec5_entry(R3,
                                              R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLmz_info" {
     sat_sLmz_info:
         const sat_sLmz_entry;
         const 3;
         const 4294967311;
         const SLKe_srt+1360;
 },
 showl_sLmt_entry() //  [R1, R2]
         { []
         }
     {offset
       cOYZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cOZ0; else goto cOZ1;
       cOZ0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOZ1: // global
           I64[Sp - 24] = block_cOYF_info;
           _sLmt::P64 = R1;
           _sLms::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sLms::P64;
           P64[Sp - 8] = _sLmt::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uOZ8; else goto cOYG;
       uOZ8: // global
           call _cOYF(R1) args: 0, res: 0, upd: 0;
       cOYG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . showl_sLmt_info" {
     showl_sLmt_info:
         const showl_sLmt_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SLKe_srt+1360;
 },
 _cOYF() //  [R1]
         { []
         }
     {offset
       cOYF: // global
           if (R1 & 7 == 1) goto cOYW; else goto cOYX;
       cOYW: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cOYX: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cOZ7; else goto cOZ6;
       cOZ7: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cOZ6: // global
           _sLmw::P64 = P64[R1 + 6];
           _sLmx::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sLmz_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _sLmw::P64;
           P64[Hp - 24] = _sLmx::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOYF_info" {
     block_cOYF_info:
         const _cOYF;
         const 2;
         const 4294967326;
         const SLKe_srt+1360;
 },
 sat_sLmA_entry() //  [R1]
         { []
         }
     {offset
       cOZ9: // global
           _sLmA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cOZa; else goto cOZb;
       cOZb: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cOZd; else goto cOZc;
       cOZd: // global
           HpAlloc = 40;
           goto cOZa;
       cOZa: // global
           R1 = _sLmA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOZc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLmA::P64;
           _sLmo::P64 = P64[_sLmA::P64 + 16];
           _sLmr::P64 = P64[_sLmA::P64 + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Show.showList__2_closure+1;
           P64[Hp - 16] = _sLmo::P64;
           I64[Hp - 8] = showl_sLmt_info;
           P64[Hp] = Hp - 30;
           R2 = _sLmr::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call showl_sLmt_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLmA_info" {
     sat_sLmA_info:
         const sat_sLmA_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1360;
 },
 sat_sLmB_entry() //  [R1]
         { []
         }
     {offset
       cOZe: // global
           _sLmB::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cOZf; else goto cOZg;
       cOZg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cOZi; else goto cOZh;
       cOZi: // global
           HpAlloc = 32;
           goto cOZf;
       cOZf: // global
           R1 = _sLmB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOZh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLmB::P64;
           _sLmo::P64 = P64[_sLmB::P64 + 16];
           _sLmq::P64 = P64[_sLmB::P64 + 24];
           _sLmr::P64 = P64[_sLmB::P64 + 32];
           I64[Hp - 24] = sat_sLmA_info;
           P64[Hp - 8] = _sLmo::P64;
           P64[Hp] = _sLmr::P64;
           R3 = _sLmq::P64;
           R2 = 0;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Show.$w$cshowsPrec5_entry(R3,
                                              R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLmB_info" {
     sat_sLmB_info:
         const sat_sLmB_entry;
         const 3;
         const 4294967311;
         const SLKe_srt+1360;
 },
 sat_sLmC_entry() //  [R1]
         { []
         }
     {offset
       cOZn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cOZo; else goto cOZp;
       cOZo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOZp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cOYl_info;
           _sLmo::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sLmo::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uOZw; else goto cOYm;
       uOZw: // global
           call _cOYl(R1) args: 0, res: 0, upd: 0;
       cOYm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLmC_info" {
     sat_sLmC_info:
         const sat_sLmC_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1360;
 },
 _cOYl() //  [R1]
         { []
         }
     {offset
       cOYl: // global
           _sLmo::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cOZk; else goto cOZl;
       cOZk: // global
           R3 = _sLmo::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       cOZl: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cOZv; else goto cOZu;
       cOZv: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cOZu: // global
           _sLmq::P64 = P64[R1 + 6];
           _sLmr::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sLmB_info;
           P64[Hp - 40] = _sLmo::P64;
           P64[Hp - 32] = _sLmq::P64;
           P64[Hp - 24] = _sLmr::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cOYl_info" {
     block_cOYl_info:
         const _cOYl;
         const 1;
         const 4294967326;
         const SLKe_srt+1360;
 },
 sat_sLmD_entry() //  [R1]
         { []
         }
     {offset
       cOZx: // global
           _sLmD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cOZy; else goto cOZz;
       cOZz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cOZB; else goto cOZA;
       cOZB: // global
           HpAlloc = 32;
           goto cOZy;
       cOZy: // global
           R1 = _sLmD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOZA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLmD::P64;
           _sLma::P64 = P64[_sLmD::P64 + 16];
           _sLmo::P64 = P64[_sLmD::P64 + 24];
           I64[Hp - 24] = sat_sLmC_info;
           P64[Hp - 8] = _sLma::P64;
           P64[Hp] = _sLmo::P64;
           R3 = Hp - 24;
           R2 = lvl42_rC1o_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLmD_info" {
     sat_sLmD_info:
         const sat_sLmD_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1360;
 },
 sat_sLmE_entry() //  [R1]
         { []
         }
     {offset
       cOZC: // global
           _sLmE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cOZD; else goto cOZE;
       cOZE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cOZG; else goto cOZF;
       cOZG: // global
           HpAlloc = 32;
           goto cOZD;
       cOZD: // global
           R1 = _sLmE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cOZF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLmE::P64;
           _sLma::P64 = P64[_sLmE::P64 + 16];
           _sLmb::P64 = P64[_sLmE::P64 + 24];
           _sLmo::P64 = P64[_sLmE::P64 + 32];
           I64[Hp - 24] = sat_sLmD_info;
           P64[Hp - 8] = _sLma::P64;
           P64[Hp] = _sLmo::P64;
           R2 = Hp - 24;
           R1 = _sLmb::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLmE_info" {
     sat_sLmE_info:
         const sat_sLmE_entry;
         const 3;
         const 4294967311;
         const SLKe_srt+1360;
 },
 p1_sLmn_entry() //  [R1, R2]
         { []
         }
     {offset
       cOZH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cOZL; else goto cOZK;
       cOZL: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cOZK: // global
           _sLma::P64 = P64[R1 + 7];
           _sLmb::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sLmE_info;
           P64[Hp - 16] = _sLma::P64;
           P64[Hp - 8] = _sLmb::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = lvl43_rC1p_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p1_sLmn_info" {
     p1_sLmn_info:
         const p1_sLmn_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SLKe_srt+1360;
 },
 sat_sLmI_entry() //  [R1]
         { []
         }
     {offset
       cP00: // global
           _sLmI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cP01; else goto cP02;
       cP02: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cP04; else goto cP03;
       cP04: // global
           HpAlloc = 24;
           goto cP01;
       cP01: // global
           R1 = _sLmI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP03: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLmI::P64;
           _sLmn::P64 = P64[_sLmI::P64 + 16];
           _sLmG::P64 = P64[_sLmI::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sLmG::P64;
           R2 = Hp - 14;
           R1 = _sLmn::P64;
           Sp = Sp - 16;
           call p1_sLmn_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLmI_info" {
     sat_sLmI_info:
         const sat_sLmI_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1360;
 },
 sat_sLmJ_entry() //  [R1, R2]
         { []
         }
     {offset
       cP06: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cP0a; else goto cP09;
       cP0a: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cP09: // global
           _sLmn::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sLmI_info;
           P64[Hp - 32] = _sLmn::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLmJ_info" {
     sat_sLmJ_info:
         const sat_sLmJ_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SLKe_srt+1360;
 },
 sat_sLmV_entry() //  [R1]
         { []
         }
     {offset
       cP0B: // global
           _sLmV::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cP0C; else goto cP0D;
       cP0D: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cP0F; else goto cP0E;
       cP0F: // global
           HpAlloc = 24;
           goto cP0C;
       cP0C: // global
           R1 = _sLmV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP0E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLmV::P64;
           _sLmM::P64 = P64[_sLmV::P64 + 16];
           _sLmK::I64 = I64[_sLmV::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sLmM::P64;
           I64[Sp - 24] = block_cP0y_info;
           R3 = Hp - 14;
           R2 = _sLmK::I64;
           Sp = Sp - 24;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLmV_info" {
     sat_sLmV_info:
         const sat_sLmV_entry;
         const 4294967297;
         const 19;
 },
 _cP0y() //  [R1, R2]
         { []
         }
     {offset
       cP0y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cP0I; else goto cP0H;
       cP0I: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cP0H: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cP0y_info" {
     block_cP0y_info:
         const _cP0y;
         const 0;
         const 30;
 },
 sat_sLmW_entry() //  [R1]
         { []
         }
     {offset
       cP0M: // global
           _sLmW::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cP0N; else goto cP0O;
       cP0O: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cP0Q; else goto cP0P;
       cP0Q: // global
           HpAlloc = 56;
           goto cP0N;
       cP0N: // global
           R1 = _sLmW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP0P: // global
           _sLmM::P64 = P64[_sLmW::P64 + 16];
           _sLmK::I64 = I64[_sLmW::P64 + 24];
           if (%MO_S_Ge_W64(_sLmK::I64, 0)) goto cP0K; else goto cP0L;
       cP0K: // global
           Hp = Hp - 56;
           I64[Sp - 8] = block_cP0R_info;
           R3 = _sLmM::P64;
           R2 = _sLmK::I64;
           Sp = Sp - 8;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 8;
       cP0L: // global
           I64[Hp - 48] = sat_sLmV_info;
           P64[Hp - 32] = _sLmM::P64;
           I64[Hp - 24] = _sLmK::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLmW_info" {
     sat_sLmW_info:
         const sat_sLmW_entry;
         const 4294967297;
         const 19;
 },
 _cP0R() //  [R1, R2]
         { []
         }
     {offset
       cP0R: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cP0W; else goto cP0V;
       cP0W: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cP0V: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cP0R_info" {
     block_cP0R_info:
         const _cP0R;
         const 0;
         const 30;
 },
 sat_sLmX_entry() //  [R1, R2]
         { []
         }
     {offset
       cP0Y: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cP12; else goto cP11;
       cP12: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cP11: // global
           _sLmK::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_sLmW_info;
           P64[Hp - 8] = R2;
           I64[Hp] = _sLmK::I64;
           R3 = Hp - 24;
           R2 = f11_rC1n_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLmX_info" {
     sat_sLmX_info:
         const sat_sLmX_entry;
         const 4294967296;
         const 4294967306;
         const 4294967301;
         const SLKe_srt+1368;
 },
 sat_sLn9_entry() //  [R1]
         { []
         }
     {offset
       cP1u: // global
           _sLn9::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cP1v; else goto cP1w;
       cP1w: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cP1y; else goto cP1x;
       cP1y: // global
           HpAlloc = 48;
           goto cP1v;
       cP1v: // global
           R1 = _sLn9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP1x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLn9::P64;
           _sLmY::P64 = P64[_sLn9::P64 + 16];
           _sLmK::I64 = I64[_sLn9::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 24] = _sLmY::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = Hp - 38;
           I64[Sp - 24] = block_cP1r_info;
           R3 = Hp - 14;
           R2 = _sLmK::I64;
           Sp = Sp - 24;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLn9_info" {
     sat_sLn9_info:
         const sat_sLn9_entry;
         const 4294967297;
         const 19;
 },
 _cP1r() //  [R1, R2]
         { []
         }
     {offset
       cP1r: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cP1B; else goto cP1A;
       cP1B: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cP1A: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cP1r_info" {
     block_cP1r_info:
         const _cP1r;
         const 0;
         const 30;
 },
 sat_sLna_entry() //  [R1]
         { []
         }
     {offset
       cP1F: // global
           _sLna::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cP1G; else goto cP1H;
       cP1H: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cP1J; else goto cP1I;
       cP1J: // global
           HpAlloc = 56;
           goto cP1G;
       cP1G: // global
           R1 = _sLna::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP1I: // global
           _sLmY::P64 = P64[_sLna::P64 + 16];
           _sLmK::I64 = I64[_sLna::P64 + 24];
           if (%MO_S_Ge_W64(_sLmK::I64, 0)) goto cP1D; else goto cP1E;
       cP1D: // global
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 32] = _sLmY::P64;
           _cP1K::P64 = Hp - 46;
           Hp = Hp - 32;
           I64[Sp - 8] = block_cP1L_info;
           R3 = _cP1K::P64;
           R2 = _sLmK::I64;
           Sp = Sp - 8;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 8;
       cP1E: // global
           I64[Hp - 48] = sat_sLn9_info;
           P64[Hp - 32] = _sLmY::P64;
           I64[Hp - 24] = _sLmK::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLna_info" {
     sat_sLna_info:
         const sat_sLna_entry;
         const 4294967297;
         const 19;
 },
 _cP1L() //  [R1, R2]
         { []
         }
     {offset
       cP1L: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cP1Q; else goto cP1P;
       cP1Q: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cP1P: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cP1L_info" {
     block_cP1L_info:
         const _cP1L;
         const 0;
         const 30;
 },
 sat_sLnb_entry() //  [R1]
         { []
         }
     {offset
       cP1S: // global
           _sLnb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cP1T; else goto cP1U;
       cP1U: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cP1W; else goto cP1V;
       cP1W: // global
           HpAlloc = 32;
           goto cP1T;
       cP1T: // global
           R1 = _sLnb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP1V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLnb::P64;
           _sLmY::P64 = P64[_sLnb::P64 + 16];
           _sLmK::I64 = I64[_sLnb::P64 + 24];
           I64[Hp - 24] = sat_sLna_info;
           P64[Hp - 8] = _sLmY::P64;
           I64[Hp] = _sLmK::I64;
           R3 = Hp - 24;
           R2 = f11_rC1n_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLnb_info" {
     sat_sLnb_info:
         const sat_sLnb_entry;
         const 4294967297;
         const 4294967315;
         const SLKe_srt+1368;
 },
 sat_sLnc_entry() //  [R1, R2]
         { []
         }
     {offset
       cP1Y: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cP22; else goto cP21;
       cP22: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cP21: // global
           _sLmK::I64 = I64[R1 + 7];
           I64[Hp - 48] = sat_sLnb_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = _sLmK::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLnc_info" {
     sat_sLnc_info:
         const sat_sLnc_entry;
         const 4294967296;
         const 4294967306;
         const 4294967301;
         const SLKe_srt+1368;
 },
 f12_sLnf_entry() //  [R1]
         { []
         }
     {offset
       cP29: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cP2a; else goto cP2b;
       cP2a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP2b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = 11;
           Sp = Sp - 16;
           call GHC.Show.$w$cshowsPrec5_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f12_sLnf_info" {
     f12_sLnf_info:
         const f12_sLnf_entry;
         const 1;
         const 4294967312;
         const SLKe_srt+1360;
 },
 g_sLng_entry() //  [R1]
         { []
         }
     {offset
       cP2g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cP2h; else goto cP2i;
       cP2h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP2i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = 11;
           Sp = Sp - 16;
           call GHC.Show.$w$cshowsPrec5_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sLng_info" {
     g_sLng_info:
         const g_sLng_entry;
         const 1;
         const 4294967312;
         const SLKe_srt+1360;
 },
 sat_sLnk_entry() //  [R1]
         { []
         }
     {offset
       cP2A: // global
           _sLnk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cP2B; else goto cP2C;
       cP2C: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cP2E; else goto cP2D;
       cP2E: // global
           HpAlloc = 32;
           goto cP2B;
       cP2B: // global
           R1 = _sLnk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP2D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLnk::P64;
           _sLng::P64 = P64[_sLnk::P64 + 16];
           _sLni::P64 = P64[_sLnk::P64 + 24];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sLng::P64;
           P64[Hp] = _sLni::P64;
           R3 = Hp - 24;
           R2 = lvl42_rC1o_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLnk_info" {
     sat_sLnk_info:
         const sat_sLnk_entry;
         const 2;
         const 18;
 },
 sat_sLnl_entry() //  [R1]
         { []
         }
     {offset
       cP2F: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cP2J; else goto cP2I;
       cP2J: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP2I: // global
           _sLnf::P64 = P64[R1 + 16];
           _sLng::P64 = P64[R1 + 24];
           _sLni::P64 = P64[R1 + 32];
           I64[Hp - 24] = sat_sLnk_info;
           P64[Hp - 8] = _sLng::P64;
           P64[Hp] = _sLni::P64;
           R2 = Hp - 24;
           R1 = _sLnf::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLnl_info" {
     sat_sLnl_info:
         const sat_sLnl_entry;
         const 3;
         const 15;
 },
 sat_sLnm_entry() //  [R1, R2]
         { []
         }
     {offset
       cP2K: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cP2O; else goto cP2N;
       cP2O: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cP2N: // global
           _sLnf::P64 = P64[R1 + 7];
           _sLng::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sLnl_info;
           P64[Hp - 16] = _sLnf::P64;
           P64[Hp - 8] = _sLng::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = f9_rC1l_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLnm_info" {
     sat_sLnm_info:
         const sat_sLnm_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SLKe_srt+1376;
 },
 sat_sLnp_entry() //  [R1]
         { []
         }
     {offset
       cP3c: // global
           _sLnp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cP3d; else goto cP3e;
       cP3e: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cP3g; else goto cP3f;
       cP3g: // global
           HpAlloc = 24;
           goto cP3d;
       cP3d: // global
           R1 = _sLnp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP3f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLnp::P64;
           _sLng::P64 = P64[_sLnp::P64 + 16];
           _sLnn::P64 = P64[_sLnp::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sLnn::P64;
           R2 = Hp - 14;
           R1 = _sLng::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLnp_info" {
     sat_sLnp_info:
         const sat_sLnp_entry;
         const 2;
         const 18;
 },
 sat_sLnq_entry() //  [R1]
         { []
         }
     {offset
       cP3h: // global
           _sLnq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cP3i; else goto cP3j;
       cP3j: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cP3l; else goto cP3k;
       cP3l: // global
           HpAlloc = 32;
           goto cP3i;
       cP3i: // global
           R1 = _sLnq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP3k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLnq::P64;
           _sLng::P64 = P64[_sLnq::P64 + 16];
           _sLnn::P64 = P64[_sLnq::P64 + 24];
           I64[Hp - 24] = sat_sLnp_info;
           P64[Hp - 8] = _sLng::P64;
           P64[Hp] = _sLnn::P64;
           R3 = Hp - 24;
           R2 = lvl42_rC1o_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLnq_info" {
     sat_sLnq_info:
         const sat_sLnq_entry;
         const 2;
         const 18;
 },
 sat_sLnr_entry() //  [R1]
         { []
         }
     {offset
       cP3m: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cP3q; else goto cP3p;
       cP3q: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP3p: // global
           _sLnf::P64 = P64[R1 + 16];
           _sLng::P64 = P64[R1 + 24];
           _sLnn::P64 = P64[R1 + 32];
           I64[Hp - 24] = sat_sLnq_info;
           P64[Hp - 8] = _sLng::P64;
           P64[Hp] = _sLnn::P64;
           R2 = Hp - 24;
           R1 = _sLnf::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLnr_info" {
     sat_sLnr_info:
         const sat_sLnr_entry;
         const 3;
         const 15;
 },
 sat_sLns_entry() //  [R1]
         { []
         }
     {offset
       cP3r: // global
           _sLns::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cP3s; else goto cP3t;
       cP3t: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cP3v; else goto cP3u;
       cP3v: // global
           HpAlloc = 40;
           goto cP3s;
       cP3s: // global
           R1 = _sLns::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP3u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLns::P64;
           _sLnf::P64 = P64[_sLns::P64 + 16];
           _sLng::P64 = P64[_sLns::P64 + 24];
           _sLnn::P64 = P64[_sLns::P64 + 32];
           I64[Hp - 32] = sat_sLnr_info;
           P64[Hp - 16] = _sLnf::P64;
           P64[Hp - 8] = _sLng::P64;
           P64[Hp] = _sLnn::P64;
           R3 = Hp - 32;
           R2 = f9_rC1l_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLns_info" {
     sat_sLns_info:
         const sat_sLns_entry;
         const 3;
         const 4294967311;
         const SLKe_srt+1376;
 },
 sat_sLnt_entry() //  [R1, R2]
         { []
         }
     {offset
       cP3x: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cP3B; else goto cP3A;
       cP3B: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cP3A: // global
           _sLnf::P64 = P64[R1 + 7];
           _sLng::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sLns_info;
           P64[Hp - 40] = _sLnf::P64;
           P64[Hp - 32] = _sLng::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLnt_info" {
     sat_sLnt_info:
         const sat_sLnt_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SLKe_srt+1376;
 },
 f12_sLnw_entry() //  [R1]
         { []
         }
     {offset
       cP3I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cP3J; else goto cP3K;
       cP3J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP3K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = 11;
           Sp = Sp - 16;
           call GHC.Show.$w$cshowsPrec5_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f12_sLnw_info" {
     f12_sLnw_info:
         const f12_sLnw_entry;
         const 1;
         const 4294967312;
         const SLKe_srt+1360;
 },
 g_sLnx_entry() //  [R1]
         { []
         }
     {offset
       cP3P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cP3Q; else goto cP3R;
       cP3Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP3R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = 11;
           Sp = Sp - 16;
           call GHC.Show.$w$cshowsPrec5_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sLnx_info" {
     g_sLnx_info:
         const g_sLnx_entry;
         const 1;
         const 4294967312;
         const SLKe_srt+1360;
 },
 sat_sLnB_entry() //  [R1]
         { []
         }
     {offset
       cP49: // global
           _sLnB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cP4a; else goto cP4b;
       cP4b: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cP4d; else goto cP4c;
       cP4d: // global
           HpAlloc = 32;
           goto cP4a;
       cP4a: // global
           R1 = _sLnB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP4c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLnB::P64;
           _sLnx::P64 = P64[_sLnB::P64 + 16];
           _sLnz::P64 = P64[_sLnB::P64 + 24];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sLnx::P64;
           P64[Hp] = _sLnz::P64;
           R3 = Hp - 24;
           R2 = lvl42_rC1o_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLnB_info" {
     sat_sLnB_info:
         const sat_sLnB_entry;
         const 2;
         const 18;
 },
 sat_sLnC_entry() //  [R1]
         { []
         }
     {offset
       cP4e: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cP4i; else goto cP4h;
       cP4i: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP4h: // global
           _sLnw::P64 = P64[R1 + 16];
           _sLnx::P64 = P64[R1 + 24];
           _sLnz::P64 = P64[R1 + 32];
           I64[Hp - 24] = sat_sLnB_info;
           P64[Hp - 8] = _sLnx::P64;
           P64[Hp] = _sLnz::P64;
           R2 = Hp - 24;
           R1 = _sLnw::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLnC_info" {
     sat_sLnC_info:
         const sat_sLnC_entry;
         const 3;
         const 15;
 },
 sat_sLnD_entry() //  [R1, R2]
         { []
         }
     {offset
       cP4j: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cP4n; else goto cP4m;
       cP4n: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cP4m: // global
           _sLnw::P64 = P64[R1 + 7];
           _sLnx::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sLnC_info;
           P64[Hp - 16] = _sLnw::P64;
           P64[Hp - 8] = _sLnx::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = f7_rC1j_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLnD_info" {
     sat_sLnD_info:
         const sat_sLnD_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SLKe_srt+1384;
 },
 sat_sLnG_entry() //  [R1]
         { []
         }
     {offset
       cP4L: // global
           _sLnG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cP4M; else goto cP4N;
       cP4N: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cP4P; else goto cP4O;
       cP4P: // global
           HpAlloc = 24;
           goto cP4M;
       cP4M: // global
           R1 = _sLnG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP4O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLnG::P64;
           _sLnx::P64 = P64[_sLnG::P64 + 16];
           _sLnE::P64 = P64[_sLnG::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sLnE::P64;
           R2 = Hp - 14;
           R1 = _sLnx::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLnG_info" {
     sat_sLnG_info:
         const sat_sLnG_entry;
         const 2;
         const 18;
 },
 sat_sLnH_entry() //  [R1]
         { []
         }
     {offset
       cP4Q: // global
           _sLnH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cP4R; else goto cP4S;
       cP4S: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cP4U; else goto cP4T;
       cP4U: // global
           HpAlloc = 32;
           goto cP4R;
       cP4R: // global
           R1 = _sLnH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP4T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLnH::P64;
           _sLnx::P64 = P64[_sLnH::P64 + 16];
           _sLnE::P64 = P64[_sLnH::P64 + 24];
           I64[Hp - 24] = sat_sLnG_info;
           P64[Hp - 8] = _sLnx::P64;
           P64[Hp] = _sLnE::P64;
           R3 = Hp - 24;
           R2 = lvl42_rC1o_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLnH_info" {
     sat_sLnH_info:
         const sat_sLnH_entry;
         const 2;
         const 18;
 },
 sat_sLnI_entry() //  [R1]
         { []
         }
     {offset
       cP4V: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cP4Z; else goto cP4Y;
       cP4Z: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP4Y: // global
           _sLnw::P64 = P64[R1 + 16];
           _sLnx::P64 = P64[R1 + 24];
           _sLnE::P64 = P64[R1 + 32];
           I64[Hp - 24] = sat_sLnH_info;
           P64[Hp - 8] = _sLnx::P64;
           P64[Hp] = _sLnE::P64;
           R2 = Hp - 24;
           R1 = _sLnw::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLnI_info" {
     sat_sLnI_info:
         const sat_sLnI_entry;
         const 3;
         const 15;
 },
 sat_sLnJ_entry() //  [R1]
         { []
         }
     {offset
       cP50: // global
           _sLnJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cP51; else goto cP52;
       cP52: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cP54; else goto cP53;
       cP54: // global
           HpAlloc = 40;
           goto cP51;
       cP51: // global
           R1 = _sLnJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP53: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLnJ::P64;
           _sLnw::P64 = P64[_sLnJ::P64 + 16];
           _sLnx::P64 = P64[_sLnJ::P64 + 24];
           _sLnE::P64 = P64[_sLnJ::P64 + 32];
           I64[Hp - 32] = sat_sLnI_info;
           P64[Hp - 16] = _sLnw::P64;
           P64[Hp - 8] = _sLnx::P64;
           P64[Hp] = _sLnE::P64;
           R3 = Hp - 32;
           R2 = f7_rC1j_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLnJ_info" {
     sat_sLnJ_info:
         const sat_sLnJ_entry;
         const 3;
         const 4294967311;
         const SLKe_srt+1384;
 },
 sat_sLnK_entry() //  [R1, R2]
         { []
         }
     {offset
       cP56: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cP5a; else goto cP59;
       cP5a: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cP59: // global
           _sLnw::P64 = P64[R1 + 7];
           _sLnx::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sLnJ_info;
           P64[Hp - 40] = _sLnw::P64;
           P64[Hp - 32] = _sLnx::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLnK_info" {
     sat_sLnK_info:
         const sat_sLnK_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SLKe_srt+1384;
 },
 sat_sLnO_entry() //  [R1]
         { []
         }
     {offset
       cP5p: // global
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = GHC.Show.appPrec1_closure+1;
           call GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLnO_info" {
     sat_sLnO_info:
         const sat_sLnO_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1160;
 },
 sat_sLnP_entry() //  [R1, R2]
         { []
         }
     {offset
       cP5s: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cP5w; else goto cP5v;
       cP5w: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cP5v: // global
           _sLnL::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sLnO_info;
           P64[Hp - 8] = _sLnL::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = f5_rC1h_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLnP_info" {
     sat_sLnP_info:
         const sat_sLnP_entry;
         const 1;
         const 2305843013508661257;
         const 4294967301;
         const SLKe_srt+1160;
 },
 sat_sLnS_entry() //  [R1]
         { []
         }
     {offset
       cP5M: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cP5Q; else goto cP5P;
       cP5Q: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP5P: // global
           _sLnL::P64 = P64[R1 + 16];
           _sLnQ::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sLnQ::P64;
           R4 = Hp - 14;
           R3 = _sLnL::P64;
           R2 = GHC.Show.appPrec1_closure+1;
           call GHC.Show.$fShowRuntimeRep_$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLnS_info" {
     sat_sLnS_info:
         const sat_sLnS_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1160;
 },
 sat_sLnT_entry() //  [R1]
         { []
         }
     {offset
       cP5R: // global
           _sLnT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cP5S; else goto cP5T;
       cP5T: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cP5V; else goto cP5U;
       cP5V: // global
           HpAlloc = 32;
           goto cP5S;
       cP5S: // global
           R1 = _sLnT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP5U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLnT::P64;
           _sLnL::P64 = P64[_sLnT::P64 + 16];
           _sLnQ::P64 = P64[_sLnT::P64 + 24];
           I64[Hp - 24] = sat_sLnS_info;
           P64[Hp - 8] = _sLnL::P64;
           P64[Hp] = _sLnQ::P64;
           R3 = Hp - 24;
           R2 = f5_rC1h_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLnT_info" {
     sat_sLnT_info:
         const sat_sLnT_entry;
         const 2;
         const 2305843013508661266;
         const SLKe_srt+1160;
 },
 sat_sLnU_entry() //  [R1, R2]
         { []
         }
     {offset
       cP5X: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cP61; else goto cP60;
       cP61: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cP60: // global
           _sLnL::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sLnT_info;
           P64[Hp - 32] = _sLnL::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLnU_info" {
     sat_sLnU_info:
         const sat_sLnU_entry;
         const 1;
         const 2305843013508661257;
         const 4294967301;
         const SLKe_srt+1160;
 },
 cs_sLnX_entry() //  [R1]
         { []
         }
     {offset
       cP68: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cP69; else goto cP6a;
       cP69: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP6a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . cs_sLnX_info" {
     cs_sLnX_info:
         const cs_sLnX_entry;
         const 4294967296;
         const 17;
 },
 sat_sLo2_entry() //  [R1]
         { []
         }
     {offset
       cP6B: // global
           _sLo2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cP6C; else goto cP6D;
       cP6D: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cP6F; else goto cP6E;
       cP6F: // global
           HpAlloc = 24;
           goto cP6C;
       cP6C: // global
           R1 = _sLo2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP6E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLo2::P64;
           _sLnX::P64 = P64[_sLo2::P64 + 16];
           _sLnZ::P64 = P64[_sLo2::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = _sLnZ::P64;
           R3 = Hp - 14;
           R2 = _sLnX::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLo2_info" {
     sat_sLo2_info:
         const sat_sLo2_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1400;
 },
 sat_sLo4_entry() //  [R1]
         { []
         }
     {offset
       cP6H: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cP6L; else goto cP6K;
       cP6L: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP6K: // global
           _sLnX::P64 = P64[R1 + 16];
           _sLnZ::P64 = P64[R1 + 24];
           I64[Hp - 48] = sat_sLo2_info;
           P64[Hp - 32] = _sLnX::P64;
           P64[Hp - 24] = _sLnZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = lvl42_rC1o_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLo4_info" {
     sat_sLo4_info:
         const sat_sLo4_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1400;
 },
 sat_sLo6_entry() //  [R1]
         { []
         }
     {offset
       cP6X: // global
           _sLo6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cP6Y; else goto cP6Z;
       cP6Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cP71; else goto cP70;
       cP71: // global
           HpAlloc = 24;
           goto cP6Y;
       cP6Y: // global
           R1 = _sLo6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP70: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLo6::P64;
           _sLnX::P64 = P64[_sLo6::P64 + 16];
           _sLnZ::P64 = P64[_sLo6::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = _sLnZ::P64;
           R3 = Hp - 14;
           R2 = _sLnX::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLo6_info" {
     sat_sLo6_info:
         const sat_sLo6_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1400;
 },
 sat_sLo8_entry() //  [R1]
         { []
         }
     {offset
       cP73: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cP77; else goto cP76;
       cP77: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP76: // global
           _sLnX::P64 = P64[R1 + 16];
           _sLnZ::P64 = P64[R1 + 24];
           I64[Hp - 48] = sat_sLo6_info;
           P64[Hp - 32] = _sLnX::P64;
           P64[Hp - 24] = _sLnZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = lvl42_rC1o_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLo8_info" {
     sat_sLo8_info:
         const sat_sLo8_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1400;
 },
 section ""relreadonly" . uPcs_srtd" {
     uPcs_srtd:
         const SLKe_srt+728;
         const 85;
         const 3;
         const 1048576;
 },
 sat_sLo9_entry() //  [R1]
         { []
         }
     {offset
       cP7c: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cP7d; else goto cP7e;
       cP7d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP7e: // global
           I64[Sp - 24] = block_cP6n_info;
           _sLnX::P64 = P64[R1 + 24];
           _sLnZ::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 16] = _sLnX::P64;
           P64[Sp - 8] = _sLnZ::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uP7l; else goto cP6o;
       uP7l: // global
           call _cP6n(R1) args: 0, res: 0, upd: 0;
       cP6o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLo9_info" {
     sat_sLo9_info:
         const sat_sLo9_entry;
         const 3;
         const 18446744069414584335;
         const uPcs_srtd;
 },
 section ""relreadonly" . uPct_srtd" {
     uPct_srtd:
         const SLKe_srt+728;
         const 85;
         const 3;
         const 1048576;
 },
 _cP6n() //  [R1]
         { []
         }
     {offset
       cP6n: // global
           _sLnX::P64 = P64[Sp + 8];
           _sLnZ::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cP79; else goto cP7a;
       cP79: // global
           Hp = Hp + 32;
           _sLo0::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cP7k; else goto cP7g;
       cP7g: // global
           I64[Hp - 24] = sat_sLo4_info;
           P64[Hp - 8] = _sLnX::P64;
           P64[Hp] = _sLnZ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowTypeLitSort4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cP7a: // global
           Hp = Hp + 32;
           _sLo0::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cP7k; else goto cP7j;
       cP7k: // global
           HpAlloc = 32;
           R1 = _sLo0::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cP7j: // global
           I64[Hp - 24] = sat_sLo8_info;
           P64[Hp - 8] = _sLnX::P64;
           P64[Hp] = _sLnZ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowTypeLitSort2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cP6n_info" {
     block_cP6n_info:
         const _cP6n;
         const 2;
         const 18446744069414584350;
         const uPct_srtd;
 },
 section ""relreadonly" . uPcu_srtd" {
     uPcu_srtd:
         const SLKe_srt+728;
         const 86;
         const 3;
         const 3145728;
 },
 sat_sLoa_entry() //  [R1, R2]
         { []
         }
     {offset
       cP7m: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cP7q; else goto cP7p;
       cP7q: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cP7p: // global
           _sLnV::P64 = P64[R1 + 7];
           _sLnX::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sLo9_info;
           P64[Hp - 16] = _sLnV::P64;
           P64[Hp - 8] = _sLnX::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = f3_rC1f_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLoa_info" {
     sat_sLoa_info:
         const sat_sLoa_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const uPcu_srtd;
 },
 sat_sLof_entry() //  [R1]
         { []
         }
     {offset
       cP7U: // global
           _sLof::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cP7V; else goto cP7W;
       cP7W: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cP7Y; else goto cP7X;
       cP7Y: // global
           HpAlloc = 48;
           goto cP7V;
       cP7V: // global
           R1 = _sLof::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP7X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLof::P64;
           _sLnX::P64 = P64[_sLof::P64 + 16];
           _sLob::P64 = P64[_sLof::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 24] = _sLob::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _sLnX::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLof_info" {
     sat_sLof_info:
         const sat_sLof_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1400;
 },
 sat_sLoh_entry() //  [R1]
         { []
         }
     {offset
       cP80: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cP84; else goto cP83;
       cP84: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP83: // global
           _sLnX::P64 = P64[R1 + 16];
           _sLob::P64 = P64[R1 + 24];
           I64[Hp - 48] = sat_sLof_info;
           P64[Hp - 32] = _sLnX::P64;
           P64[Hp - 24] = _sLob::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = lvl42_rC1o_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLoh_info" {
     sat_sLoh_info:
         const sat_sLoh_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1400;
 },
 sat_sLok_entry() //  [R1]
         { []
         }
     {offset
       cP8h: // global
           _sLok::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cP8i; else goto cP8j;
       cP8j: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cP8l; else goto cP8k;
       cP8l: // global
           HpAlloc = 48;
           goto cP8i;
       cP8i: // global
           R1 = _sLok::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP8k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLok::P64;
           _sLnX::P64 = P64[_sLok::P64 + 16];
           _sLob::P64 = P64[_sLok::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 24] = _sLob::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _sLnX::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLok_info" {
     sat_sLok_info:
         const sat_sLok_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1400;
 },
 sat_sLom_entry() //  [R1]
         { []
         }
     {offset
       cP8n: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cP8r; else goto cP8q;
       cP8r: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP8q: // global
           _sLnX::P64 = P64[R1 + 16];
           _sLob::P64 = P64[R1 + 24];
           I64[Hp - 48] = sat_sLok_info;
           P64[Hp - 32] = _sLnX::P64;
           P64[Hp - 24] = _sLob::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = lvl42_rC1o_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLom_info" {
     sat_sLom_info:
         const sat_sLom_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1400;
 },
 section ""relreadonly" . uPcv_srtd" {
     uPcv_srtd:
         const SLKe_srt+728;
         const 85;
         const 3;
         const 1048576;
 },
 sat_sLon_entry() //  [R1]
         { []
         }
     {offset
       cP8w: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cP8x; else goto cP8y;
       cP8x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP8y: // global
           I64[Sp - 24] = block_cP7F_info;
           _sLnX::P64 = P64[R1 + 24];
           _sLob::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 16] = _sLnX::P64;
           P64[Sp - 8] = _sLob::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uP8F; else goto cP7G;
       uP8F: // global
           call _cP7F(R1) args: 0, res: 0, upd: 0;
       cP7G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLon_info" {
     sat_sLon_info:
         const sat_sLon_entry;
         const 3;
         const 18446744069414584335;
         const uPcv_srtd;
 },
 section ""relreadonly" . uPcw_srtd" {
     uPcw_srtd:
         const SLKe_srt+728;
         const 85;
         const 3;
         const 1048576;
 },
 _cP7F() //  [R1]
         { []
         }
     {offset
       cP7F: // global
           _sLnX::P64 = P64[Sp + 8];
           _sLob::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cP8t; else goto cP8u;
       cP8t: // global
           Hp = Hp + 32;
           _sLoc::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cP8E; else goto cP8A;
       cP8A: // global
           I64[Hp - 24] = sat_sLoh_info;
           P64[Hp - 8] = _sLnX::P64;
           P64[Hp] = _sLob::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowTypeLitSort4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cP8u: // global
           Hp = Hp + 32;
           _sLoc::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cP8E; else goto cP8D;
       cP8E: // global
           HpAlloc = 32;
           R1 = _sLoc::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cP8D: // global
           I64[Hp - 24] = sat_sLom_info;
           P64[Hp - 8] = _sLnX::P64;
           P64[Hp] = _sLob::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowTypeLitSort2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cP7F_info" {
     block_cP7F_info:
         const _cP7F;
         const 2;
         const 18446744069414584350;
         const uPcw_srtd;
 },
 section ""relreadonly" . uPcx_srtd" {
     uPcx_srtd:
         const SLKe_srt+728;
         const 86;
         const 3;
         const 3145728;
 },
 sat_sLoo_entry() //  [R1]
         { []
         }
     {offset
       cP8G: // global
           _sLoo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cP8H; else goto cP8I;
       cP8I: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cP8K; else goto cP8J;
       cP8K: // global
           HpAlloc = 40;
           goto cP8H;
       cP8H: // global
           R1 = _sLoo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP8J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLoo::P64;
           _sLnV::P64 = P64[_sLoo::P64 + 16];
           _sLnX::P64 = P64[_sLoo::P64 + 24];
           _sLob::P64 = P64[_sLoo::P64 + 32];
           I64[Hp - 32] = sat_sLon_info;
           P64[Hp - 16] = _sLnV::P64;
           P64[Hp - 8] = _sLnX::P64;
           P64[Hp] = _sLob::P64;
           R3 = Hp - 32;
           R2 = f3_rC1f_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLoo_info" {
     sat_sLoo_info:
         const sat_sLoo_entry;
         const 3;
         const 18446744069414584335;
         const uPcx_srtd;
 },
 section ""relreadonly" . uPcy_srtd" {
     uPcy_srtd:
         const SLKe_srt+728;
         const 86;
         const 3;
         const 3145728;
 },
 sat_sLop_entry() //  [R1, R2]
         { []
         }
     {offset
       cP8M: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cP8Q; else goto cP8P;
       cP8Q: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cP8P: // global
           _sLnV::P64 = P64[R1 + 7];
           _sLnX::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sLoo_info;
           P64[Hp - 40] = _sLnV::P64;
           P64[Hp - 32] = _sLnX::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLop_info" {
     sat_sLop_info:
         const sat_sLop_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const uPcy_srtd;
 },
 sat_sLow_entry() //  [R1]
         { []
         }
     {offset
       cP9j: // global
           _sLow::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cP9k; else goto cP9l;
       cP9l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cP9n; else goto cP9m;
       cP9n: // global
           HpAlloc = 24;
           goto cP9k;
       cP9k: // global
           R1 = _sLow::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP9m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLow::P64;
           _sLor::P64 = P64[_sLow::P64 + 16];
           _sLot::P64 = P64[_sLow::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = _sLot::P64;
           R3 = Hp - 14;
           R2 = _sLor::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLow_info" {
     sat_sLow_info:
         const sat_sLow_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1400;
 },
 sat_sLoy_entry() //  [R1]
         { []
         }
     {offset
       cP9p: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cP9t; else goto cP9s;
       cP9t: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP9s: // global
           _sLor::P64 = P64[R1 + 16];
           _sLot::P64 = P64[R1 + 24];
           I64[Hp - 48] = sat_sLow_info;
           P64[Hp - 32] = _sLor::P64;
           P64[Hp - 24] = _sLot::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = lvl42_rC1o_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLoy_info" {
     sat_sLoy_info:
         const sat_sLoy_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1400;
 },
 sat_sLoA_entry() //  [R1]
         { []
         }
     {offset
       cP9F: // global
           _sLoA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cP9G; else goto cP9H;
       cP9H: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cP9J; else goto cP9I;
       cP9J: // global
           HpAlloc = 24;
           goto cP9G;
       cP9G: // global
           R1 = _sLoA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP9I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLoA::P64;
           _sLor::P64 = P64[_sLoA::P64 + 16];
           _sLot::P64 = P64[_sLoA::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = _sLot::P64;
           R3 = Hp - 14;
           R2 = _sLor::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLoA_info" {
     sat_sLoA_info:
         const sat_sLoA_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1400;
 },
 sat_sLoC_entry() //  [R1]
         { []
         }
     {offset
       cP9L: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cP9P; else goto cP9O;
       cP9P: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP9O: // global
           _sLor::P64 = P64[R1 + 16];
           _sLot::P64 = P64[R1 + 24];
           I64[Hp - 48] = sat_sLoA_info;
           P64[Hp - 32] = _sLor::P64;
           P64[Hp - 24] = _sLot::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = lvl42_rC1o_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLoC_info" {
     sat_sLoC_info:
         const sat_sLoC_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1400;
 },
 section ""relreadonly" . uPcz_srtd" {
     uPcz_srtd:
         const SLKe_srt+728;
         const 85;
         const 3;
         const 1048576;
 },
 sat_sLoD_entry() //  [R1]
         { []
         }
     {offset
       cP9U: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cP9V; else goto cP9W;
       cP9V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cP9W: // global
           I64[Sp - 24] = block_cP95_info;
           _sLor::P64 = P64[R1 + 24];
           _sLot::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 16] = _sLor::P64;
           P64[Sp - 8] = _sLot::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uPa3; else goto cP96;
       uPa3: // global
           call _cP95(R1) args: 0, res: 0, upd: 0;
       cP96: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLoD_info" {
     sat_sLoD_info:
         const sat_sLoD_entry;
         const 3;
         const 18446744069414584335;
         const uPcz_srtd;
 },
 section ""relreadonly" . uPcA_srtd" {
     uPcA_srtd:
         const SLKe_srt+728;
         const 85;
         const 3;
         const 1048576;
 },
 _cP95() //  [R1]
         { []
         }
     {offset
       cP95: // global
           _sLor::P64 = P64[Sp + 8];
           _sLot::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cP9R; else goto cP9S;
       cP9R: // global
           Hp = Hp + 32;
           _sLou::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cPa2; else goto cP9Y;
       cP9Y: // global
           I64[Hp - 24] = sat_sLoy_info;
           P64[Hp - 8] = _sLor::P64;
           P64[Hp] = _sLot::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowTypeLitSort4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cP9S: // global
           Hp = Hp + 32;
           _sLou::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cPa2; else goto cPa1;
       cPa2: // global
           HpAlloc = 32;
           R1 = _sLou::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cPa1: // global
           I64[Hp - 24] = sat_sLoC_info;
           P64[Hp - 8] = _sLor::P64;
           P64[Hp] = _sLot::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowTypeLitSort2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cP95_info" {
     block_cP95_info:
         const _cP95;
         const 2;
         const 18446744069414584350;
         const uPcA_srtd;
 },
 section ""relreadonly" . uPcB_srtd" {
     uPcB_srtd:
         const SLKe_srt+728;
         const 87;
         const 3;
         const 5242880;
 },
 sat_sLoE_entry() //  [R1, R2]
         { []
         }
     {offset
       cPa4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cPa8; else goto cPa7;
       cPa8: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cPa7: // global
           _sLoq::P64 = P64[R1 + 7];
           _sLor::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sLoD_info;
           P64[Hp - 16] = _sLoq::P64;
           P64[Hp - 8] = _sLor::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = f1_rC1d_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLoE_info" {
     sat_sLoE_info:
         const sat_sLoE_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const uPcB_srtd;
 },
 sat_sLoJ_entry() //  [R1]
         { []
         }
     {offset
       cPaC: // global
           _sLoJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cPaD; else goto cPaE;
       cPaE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cPaG; else goto cPaF;
       cPaG: // global
           HpAlloc = 48;
           goto cPaD;
       cPaD: // global
           R1 = _sLoJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPaF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLoJ::P64;
           _sLor::P64 = P64[_sLoJ::P64 + 16];
           _sLoF::P64 = P64[_sLoJ::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 24] = _sLoF::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _sLor::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLoJ_info" {
     sat_sLoJ_info:
         const sat_sLoJ_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1400;
 },
 sat_sLoL_entry() //  [R1]
         { []
         }
     {offset
       cPaI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cPaM; else goto cPaL;
       cPaM: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPaL: // global
           _sLor::P64 = P64[R1 + 16];
           _sLoF::P64 = P64[R1 + 24];
           I64[Hp - 48] = sat_sLoJ_info;
           P64[Hp - 32] = _sLor::P64;
           P64[Hp - 24] = _sLoF::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = lvl42_rC1o_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLoL_info" {
     sat_sLoL_info:
         const sat_sLoL_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1400;
 },
 sat_sLoO_entry() //  [R1]
         { []
         }
     {offset
       cPaZ: // global
           _sLoO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cPb0; else goto cPb1;
       cPb1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cPb3; else goto cPb2;
       cPb3: // global
           HpAlloc = 48;
           goto cPb0;
       cPb0: // global
           R1 = _sLoO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPb2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLoO::P64;
           _sLor::P64 = P64[_sLoO::P64 + 16];
           _sLoF::P64 = P64[_sLoO::P64 + 24];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp - 24] = _sLoF::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _sLor::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLoO_info" {
     sat_sLoO_info:
         const sat_sLoO_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1400;
 },
 sat_sLoQ_entry() //  [R1]
         { []
         }
     {offset
       cPb5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cPb9; else goto cPb8;
       cPb9: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPb8: // global
           _sLor::P64 = P64[R1 + 16];
           _sLoF::P64 = P64[R1 + 24];
           I64[Hp - 48] = sat_sLoO_info;
           P64[Hp - 32] = _sLor::P64;
           P64[Hp - 24] = _sLoF::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = lvl42_rC1o_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLoQ_info" {
     sat_sLoQ_info:
         const sat_sLoQ_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1400;
 },
 section ""relreadonly" . uPcC_srtd" {
     uPcC_srtd:
         const SLKe_srt+728;
         const 85;
         const 3;
         const 1048576;
 },
 sat_sLoR_entry() //  [R1]
         { []
         }
     {offset
       cPbe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cPbf; else goto cPbg;
       cPbf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPbg: // global
           I64[Sp - 24] = block_cPan_info;
           _sLor::P64 = P64[R1 + 24];
           _sLoF::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 16] = _sLor::P64;
           P64[Sp - 8] = _sLoF::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uPbn; else goto cPao;
       uPbn: // global
           call _cPan(R1) args: 0, res: 0, upd: 0;
       cPao: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLoR_info" {
     sat_sLoR_info:
         const sat_sLoR_entry;
         const 3;
         const 18446744069414584335;
         const uPcC_srtd;
 },
 section ""relreadonly" . uPcD_srtd" {
     uPcD_srtd:
         const SLKe_srt+728;
         const 85;
         const 3;
         const 1048576;
 },
 _cPan() //  [R1]
         { []
         }
     {offset
       cPan: // global
           _sLor::P64 = P64[Sp + 8];
           _sLoF::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cPbb; else goto cPbc;
       cPbb: // global
           Hp = Hp + 32;
           _sLoG::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cPbm; else goto cPbi;
       cPbi: // global
           I64[Hp - 24] = sat_sLoL_info;
           P64[Hp - 8] = _sLor::P64;
           P64[Hp] = _sLoF::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowTypeLitSort4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cPbc: // global
           Hp = Hp + 32;
           _sLoG::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cPbm; else goto cPbl;
       cPbm: // global
           HpAlloc = 32;
           R1 = _sLoG::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cPbl: // global
           I64[Hp - 24] = sat_sLoQ_info;
           P64[Hp - 8] = _sLor::P64;
           P64[Hp] = _sLoF::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowTypeLitSort2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cPan_info" {
     block_cPan_info:
         const _cPan;
         const 2;
         const 18446744069414584350;
         const uPcD_srtd;
 },
 section ""relreadonly" . uPcE_srtd" {
     uPcE_srtd:
         const SLKe_srt+728;
         const 87;
         const 3;
         const 5242880;
 },
 sat_sLoS_entry() //  [R1]
         { []
         }
     {offset
       cPbo: // global
           _sLoS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cPbp; else goto cPbq;
       cPbq: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cPbs; else goto cPbr;
       cPbs: // global
           HpAlloc = 40;
           goto cPbp;
       cPbp: // global
           R1 = _sLoS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPbr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLoS::P64;
           _sLoq::P64 = P64[_sLoS::P64 + 16];
           _sLor::P64 = P64[_sLoS::P64 + 24];
           _sLoF::P64 = P64[_sLoS::P64 + 32];
           I64[Hp - 32] = sat_sLoR_info;
           P64[Hp - 16] = _sLoq::P64;
           P64[Hp - 8] = _sLor::P64;
           P64[Hp] = _sLoF::P64;
           R3 = Hp - 32;
           R2 = f1_rC1d_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLoS_info" {
     sat_sLoS_info:
         const sat_sLoS_entry;
         const 3;
         const 18446744069414584335;
         const uPcE_srtd;
 },
 section ""relreadonly" . uPcF_srtd" {
     uPcF_srtd:
         const SLKe_srt+728;
         const 87;
         const 3;
         const 5242880;
 },
 sat_sLoT_entry() //  [R1, R2]
         { []
         }
     {offset
       cPbu: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cPby; else goto cPbx;
       cPby: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cPbx: // global
           _sLoq::P64 = P64[R1 + 7];
           _sLor::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sLoS_info;
           P64[Hp - 40] = _sLoq::P64;
           P64[Hp - 32] = _sLor::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sLoT_info" {
     sat_sLoT_info:
         const sat_sLoT_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const uPcF_srtd;
 },
 section ""relreadonly" . uPcG_srtd" {
     uPcG_srtd:
         const SLKe_srt+728;
         const 87;
         const 18014398509481987;
         const 8355840;
 },
 GHC.Show.$w$cshowsPrec5_entry() //  [R2, R3]
         { []
         }
     {offset
       cPbI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPbJ; else goto cPbK;
       cPbJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$w$cshowsPrec5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cPbK: // global
           I64[Sp - 16] = block_cOXo_info;
           R1 = R3;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uPcr; else goto cOXp;
       uPcr: // global
           call _cOXo(R1) args: 0, res: 0, upd: 0;
       cOXp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec5_info" {
     GHC.Show.$w$cshowsPrec5_info:
         const GHC.Show.$w$cshowsPrec5_entry;
         const 0;
         const 18446744069414584334;
         const 8589934605;
         const uPcG_srtd;
 },
 section ""relreadonly" . uPcH_srtd" {
     uPcH_srtd:
         const SLKe_srt+728;
         const 87;
         const 18014398509481987;
         const 8355840;
 },
 _cOXo() //  [R1]
         { []
         }
     {offset
       cOXo: // global
           _sLm6::I64 = I64[Sp + 8];
           switch [1 .. 7] (R1 & 7) {
               case 1 : goto cPbA;
               case 2 : goto cPbB;
               case 3 : goto cPbC;
               case 4 : goto cPbD;
               case 5 : goto cPbE;
               case 6 : goto cPbF;
               case 7 : goto cPbG;
           }
       cPbG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPcn; else goto cPcm;
       cPcn: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cPcm: // global
           _sLoq::P64 = P64[R1 + 1];
           _sLor::P64 = P64[R1 + 9];
           if (%MO_S_Le_W64(_sLm6::I64, 10)) goto cPcp; else goto cPcq;
       cPcp: // global
           I64[Hp - 16] = sat_sLoE_info;
           P64[Hp - 8] = _sLoq::P64;
           P64[Hp] = _sLor::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cPcq: // global
           I64[Hp - 16] = sat_sLoT_info;
           P64[Hp - 8] = _sLoq::P64;
           P64[Hp] = _sLor::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cPbF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cPch; else goto cPcg;
       cPch: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cPcg: // global
           _sLnV::P64 = P64[R1 + 2];
           _sLnW::I64 = I64[R1 + 10];
           I64[Hp - 40] = cs_sLnX_info;
           I64[Hp - 24] = _sLnW::I64;
           _cP64::P64 = Hp - 40;
           if (%MO_S_Le_W64(_sLm6::I64, 10)) goto cPcj; else goto cPck;
       cPcj: // global
           I64[Hp - 16] = sat_sLoa_info;
           P64[Hp - 8] = _sLnV::P64;
           P64[Hp] = _cP64::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cPck: // global
           I64[Hp - 16] = sat_sLop_info;
           P64[Hp - 8] = _sLnV::P64;
           P64[Hp] = _cP64::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cPbE: // global
           Hp = Hp + 16;
           _sLm8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cPcb; else goto cPca;
       cPca: // global
           _sLnL::P64 = P64[_sLm8::P64 + 3];
           if (%MO_S_Le_W64(_sLm6::I64, 10)) goto cPcd; else goto cPce;
       cPcd: // global
           I64[Hp - 8] = sat_sLnP_info;
           P64[Hp] = _sLnL::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cPce: // global
           I64[Hp - 8] = sat_sLnU_info;
           P64[Hp] = _sLnL::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cPbD: // global
           Hp = Hp + 72;
           _sLm8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cPc5; else goto cPc4;
       cPc4: // global
           _sLnu::P64 = P64[_sLm8::P64 + 4];
           _sLnv::P64 = P64[_sLm8::P64 + 12];
           I64[Hp - 64] = f12_sLnw_info;
           P64[Hp - 48] = _sLnu::P64;
           I64[Hp - 40] = g_sLnx_info;
           P64[Hp - 24] = _sLnv::P64;
           _cP3E::P64 = Hp - 64;
           _cP3L::P64 = Hp - 40;
           if (%MO_S_Le_W64(_sLm6::I64, 10)) goto cPc7; else goto cPc8;
       cPc7: // global
           I64[Hp - 16] = sat_sLnD_info;
           P64[Hp - 8] = _cP3E::P64;
           P64[Hp] = _cP3L::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cPc8: // global
           I64[Hp - 16] = sat_sLnK_info;
           P64[Hp - 8] = _cP3E::P64;
           P64[Hp] = _cP3L::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cPbC: // global
           Hp = Hp + 72;
           _sLm8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cPc5; else goto cPbY;
       cPc5: // global
           HpAlloc = 72;
           R1 = _sLm8::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cPbY: // global
           _sLnd::P64 = P64[_sLm8::P64 + 5];
           _sLne::P64 = P64[_sLm8::P64 + 13];
           I64[Hp - 64] = f12_sLnf_info;
           P64[Hp - 48] = _sLnd::P64;
           I64[Hp - 40] = g_sLng_info;
           P64[Hp - 24] = _sLne::P64;
           _cP25::P64 = Hp - 64;
           _cP2c::P64 = Hp - 40;
           if (%MO_S_Le_W64(_sLm6::I64, 10)) goto cPc1; else goto cPc2;
       cPc1: // global
           I64[Hp - 16] = sat_sLnm_info;
           P64[Hp - 8] = _cP25::P64;
           P64[Hp] = _cP2c::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cPc2: // global
           I64[Hp - 16] = sat_sLnt_info;
           P64[Hp - 8] = _cP25::P64;
           P64[Hp] = _cP2c::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cPbB: // global
           Hp = Hp + 16;
           _sLm8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cPcb; else goto cPbS;
       cPcb: // global
           HpAlloc = 16;
           R1 = _sLm8::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cPbS: // global
           _sLmK::I64 = I64[_sLm8::P64 + 6];
           if (%MO_S_Le_W64(_sLm6::I64, 10)) goto cPbV; else goto cPbW;
       cPbV: // global
           I64[Hp - 8] = sat_sLmX_info;
           I64[Hp] = _sLmK::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cPbW: // global
           I64[Hp - 8] = sat_sLnc_info;
           I64[Hp] = _sLmK::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cPbA: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cPbN; else goto cPbM;
       cPbN: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cPbM: // global
           _sLm9::P64 = P64[R1 + 7];
           _sLma::P64 = P64[R1 + 15];
           I64[Hp - 56] = f12_sLmb_info;
           P64[Hp - 40] = _sLm9::P64;
           I64[Hp - 32] = p1_sLmn_info;
           P64[Hp - 24] = _sLma::P64;
           P64[Hp - 16] = Hp - 56;
           _cOY4::P64 = Hp - 31;
           if (%MO_S_Le_W64(_sLm6::I64, 10)) goto cPbP; else goto cPbQ;
       cPbP: // global
           Hp = Hp - 16;
           R1 = _cOY4::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cPbQ: // global
           I64[Hp - 8] = sat_sLmJ_info;
           P64[Hp] = _cOY4::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cOXo_info" {
     block_cOXo_info:
         const _cOXo;
         const 65;
         const 18446744069414584350;
         const uPcH_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.538257521 UTC

[section ""data" . GHC.Show.$fShowKindRep_$cshowsPrec_closure" {
     GHC.Show.$fShowKindRep_$cshowsPrec_closure:
         const GHC.Show.$fShowKindRep_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShowKindRep_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cPmJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPmK; else goto cPmL;
       cPmK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowKindRep_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cPmL: // global
           I64[Sp - 16] = block_cPmG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uPmP; else goto cPmH;
       uPmP: // global
           call _cPmG(R1) args: 0, res: 0, upd: 0;
       cPmH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowKindRep_$cshowsPrec_info" {
     GHC.Show.$fShowKindRep_$cshowsPrec_info:
         const GHC.Show.$fShowKindRep_$cshowsPrec_entry;
         const 0;
         const 1103806595086;
         const 8589934607;
         const SLKe_srt+1360;
 },
 _cPmG() //  [R1]
         { []
         }
     {offset
       cPmG: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cPmG_info" {
     block_cPmG_info:
         const _cPmG;
         const 1;
         const 4294967326;
         const SLKe_srt+1360;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.543671256 UTC

[section ""data" . GHC.Show.$fShowKindRep1_closure" {
     GHC.Show.$fShowKindRep1_closure:
         const GHC.Show.$fShowKindRep1_info;
         const 0;
 },
 GHC.Show.$fShowKindRep1_entry() //  [R2]
         { []
         }
     {offset
       cPn4: // global
           R3 = R2;
           R2 = 0;
           call GHC.Show.$w$cshowsPrec5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowKindRep1_info" {
     GHC.Show.$fShowKindRep1_info:
         const GHC.Show.$fShowKindRep1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SLKe_srt+1360;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.54696288 UTC

[section ""data" . GHC.Show.$fShowKindRep_$cshowList_closure" {
     GHC.Show.$fShowKindRep_$cshowList_closure:
         const GHC.Show.$fShowKindRep_$cshowList_info;
         const 0;
 },
 GHC.Show.$fShowKindRep_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cPnf: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowKindRep1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowKindRep_$cshowList_info" {
     GHC.Show.$fShowKindRep_$cshowList_info:
         const GHC.Show.$fShowKindRep_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SLKe_srt+1432;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.550515384 UTC

[section ""data" . GHC.Show.$fShowKindRep_$cshow_closure" {
     GHC.Show.$fShowKindRep_$cshow_closure:
         const GHC.Show.$fShowKindRep_$cshow_info;
         const 0;
 },
 GHC.Show.$fShowKindRep_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cPnq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPnr; else goto cPns;
       cPnr: // global
           R2 = R2;
           R1 = GHC.Show.$fShowKindRep_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cPns: // global
           R3 = R2;
           R2 = 0;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.$w$cshowsPrec5_entry(R3,
                                              R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowKindRep_$cshow_info" {
     GHC.Show.$fShowKindRep_$cshow_info:
         const GHC.Show.$fShowKindRep_$cshow_entry;
         const 0;
         const 4402341478414;
         const 4294967301;
         const SLKe_srt+1360;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.554240262 UTC

[section ""data" . GHC.Show.$fShowKindRep_closure" {
     GHC.Show.$fShowKindRep_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowKindRep_$cshowsPrec_closure+2;
         const GHC.Show.$fShowKindRep_$cshow_closure+1;
         const GHC.Show.$fShowKindRep_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.555955072 UTC

[section ""cstring" . lvl44_rC1q_bytes" {
     lvl44_rC1q_bytes:
         I8[] [67,104,97,114,46,105,110,116,84,111,68,105,103,105,116,58,32,110,111,116,32,97,32,100,105,103,105,116,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.559269643 UTC

[section ""data" . GHC.Show.intToDigit1_closure" {
     GHC.Show.intToDigit1_closure:
         const GHC.Show.intToDigit1_info;
         const 0;
 },
 sat_sLp6_entry() //  [R1]
         { []
         }
     {offset
       cPnO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cPnP; else goto cPnQ;
       cPnP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPnQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cPnL_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = I64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLp6_info" {
     sat_sLp6_info:
         const sat_sLp6_entry;
         const 4294967296;
         const 17;
 },
 _cPnL() //  [R1, R2]
         { []
         }
     {offset
       cPnL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPnT; else goto cPnS;
       cPnT: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cPnS: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cPnL_info" {
     block_cPnL_info:
         const _cPnL;
         const 0;
         const 30;
 },
 GHC.Show.intToDigit1_entry() //  [R2]
         { []
         }
     {offset
       cPnW: // global
           _sLp2::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cPnX; else goto cPnY;
       cPnY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPo0; else goto cPnZ;
       cPo0: // global
           HpAlloc = 24;
           goto cPnX;
       cPnX: // global
           R2 = _sLp2::I64;
           R1 = GHC.Show.intToDigit1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cPnZ: // global
           I64[Hp - 16] = sat_sLp6_info;
           I64[Hp] = _sLp2::I64;
           I64[Sp - 8] = block_cPnU_info;
           R3 = Hp - 16;
           R2 = lvl44_rC1q_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.intToDigit1_info" {
     GHC.Show.intToDigit1_info:
         const GHC.Show.intToDigit1_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const SLKe_srt+1448;
 },
 _cPnU() //  [R1]
         { []
         }
     {offset
       cPnU: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cPnU_info" {
     block_cPnU_info:
         const _cPnU;
         const 0;
         const 4294967326;
         const SLKe_srt+1448;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.569336911 UTC

[section ""data" . GHC.Show.$wintToDigit_closure" {
     GHC.Show.$wintToDigit_closure:
         const GHC.Show.$wintToDigit_info;
         const 0;
 },
 GHC.Show.$wintToDigit_entry() //  [R2]
         { []
         }
     {offset
       cPoB: // global
           _sLp8::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto sLp9; else goto cPoA;
       cPoA: // global
           if (%MO_S_Gt_W64(_sLp8::I64, 9)) goto sLp9; else goto cPpf;
       sLp9: // global
           if (%MO_S_Lt_W64(_sLp8::I64, 10)) goto cPoR; else goto cPp2;
       cPp2: // global
           if (%MO_S_Gt_W64(_sLp8::I64, 15)) goto cPoR; else goto cPp1;
       cPoR: // global
           R2 = _sLp8::I64;
           call GHC.Show.intToDigit1_entry(R2) args: 8, res: 0, upd: 8;
       cPp1: // global
           R1 = _sLp8::I64 + 87;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cPpf: // global
           R1 = _sLp8::I64 + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$wintToDigit_info" {
     GHC.Show.$wintToDigit_info:
         const GHC.Show.$wintToDigit_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const SLKe_srt+1456;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.574787376 UTC

[section ""data" . GHC.Show.intToDigit_closure" {
     GHC.Show.intToDigit_closure:
         const GHC.Show.intToDigit_info;
         const 0;
 },
 GHC.Show.intToDigit_entry() //  [R2]
         { []
         }
     {offset
       cPpt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cPpB; else goto cPpC;
       cPpB: // global
           R2 = R2;
           R1 = GHC.Show.intToDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cPpC: // global
           I64[Sp - 8] = block_cPpq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uPpH; else goto cPpr;
       uPpH: // global
           call _cPpq(R1) args: 0, res: 0, upd: 0;
       cPpr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.intToDigit_info" {
     GHC.Show.intToDigit_info:
         const GHC.Show.intToDigit_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SLKe_srt+1464;
 },
 _cPpq() //  [R1]
         { []
         }
     {offset
       cPpq: // global
           I64[Sp] = block_cPpw_info;
           R2 = I64[R1 + 7];
           call GHC.Show.$wintToDigit_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cPpq_info" {
     block_cPpq_info:
         const _cPpq;
         const 0;
         const 4294967326;
         const SLKe_srt+1472;
 },
 _cPpw() //  [R1]
         { []
         }
     {offset
       cPpw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cPpG; else goto cPpF;
       cPpG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cPpF: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cPpw_info" {
     block_cPpw_info:
         const _cPpw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.58302836 UTC

[section ""data" . GHC.Show.$wjblock'_closure" {
     GHC.Show.$wjblock'_closure:
         const GHC.Show.$wjblock'_info;
 },
 GHC.Show.$wjblock'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cPqf: // global
           _sLpp::P64 = R4;
           _sLpo::I64 = R3;
           _sLpn::I64 = R2;
           goto cPpZ;
       cPpZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cPqj; else goto cPqi;
       cPqj: // global
           HpAlloc = 40;
           R4 = _sLpp::P64;
           R3 = _sLpo::I64;
           R2 = _sLpn::I64;
           R1 = GHC.Show.$wjblock'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cPqi: // global
           if (_sLpn::I64 == 1) goto cPqe; else goto cPqd;
       cPqe: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _sLpo::I64 + 48;
           _cPqr::P64 = Hp - 31;
           Hp = Hp - 24;
           R2 = _sLpp::P64;
           R1 = _cPqr::P64;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cPqd: // global
           (_sLps::I64, _sLpt::I64) = call MO_S_QuotRem W64(_sLpo::I64, 10);
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _sLpt::I64 + 48;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _sLpp::P64;
           _sLpp::P64 = Hp - 14;
           _sLpo::I64 = _sLps::I64;
           _sLpn::I64 = _sLpn::I64 - 1;
           goto cPpZ;
     }
 },
 section ""relreadonly" . GHC.Show.$wjblock'_info" {
     GHC.Show.$wjblock'_info:
         const GHC.Show.$wjblock'_entry;
         const 0;
         const 14;
         const 12884901905;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.587096857 UTC

[section ""data" . sat_sLpD_closure" {
     sat_sLpD_closure:
         const GHC.Types.I#_con_info;
         const 465661287;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.588743761 UTC

[section ""data" . sat_sLpE_closure" {
     sat_sLpE_closure:
         const :_con_info;
         const sat_sLpD_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.590623029 UTC

[section ""data" . sat_sLpC_closure" {
     sat_sLpC_closure:
         const GHC.Types.I#_con_info;
         const 660865024;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.592336515 UTC

[section ""data" . sat_sLpF_closure" {
     sat_sLpF_closure:
         const :_con_info;
         const sat_sLpC_closure+1;
         const sat_sLpE_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.595202072 UTC

[section ""data" . GHC.Show.$fShowInteger3_closure" {
     GHC.Show.$fShowInteger3_closure:
         const GHC.Show.$fShowInteger3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowInteger3_entry() //  [R1]
         { []
         }
     {offset
       cPqQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPqR; else goto cPqS;
       cPqR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPqS: // global
           (_cPqN::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cPqN::I64 == 0) goto cPqP; else goto cPqO;
       cPqP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cPqO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cPqN::I64;
           R3 = sat_sLpF_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInteger3_info" {
     GHC.Show.$fShowInteger3_info:
         const GHC.Show.$fShowInteger3_entry;
         const 0;
         const 4294967317;
         const SLKe_srt+1480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.602965551 UTC

[section ""data" . GHC.Show.$fShowInteger_jprintb_closure" {
     GHC.Show.$fShowInteger_jprintb_closure:
         const GHC.Show.$fShowInteger_jprintb_info;
         const 0;
 },
 sat_sLpQ_entry() //  [R1]
         { []
         }
     {offset
       cPru: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPrv; else goto cPrw;
       cPrv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPrw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShowInteger_jprintb_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLpQ_info" {
     sat_sLpQ_info:
         const sat_sLpQ_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1488;
 },
 sat_sLpU_entry() //  [R1]
         { []
         }
     {offset
       cPrx: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cPrB; else goto cPrC;
       cPrB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPrC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cPrm_info;
           R2 = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLpU_info" {
     sat_sLpU_info:
         const sat_sLpU_entry;
         const 3;
         const 4294967311;
         const SLKe_srt+1488;
 },
 _cPrm() //  [R1]
         { []
         }
     {offset
       cPrm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cPrF; else goto cPrE;
       cPrF: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       cPrE: // global
           I64[Hp - 24] = sat_sLpQ_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cPry_info;
           R4 = Hp - 24;
           R3 = R1;
           R2 = 18;
           Sp = Sp + 16;
           call GHC.Show.$wjblock'_entry(R4, R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cPrm_info" {
     block_cPrm_info:
         const _cPrm;
         const 2;
         const 4294967326;
         const SLKe_srt+1488;
 },
 _cPry() //  [R1, R2]
         { []
         }
     {offset
       cPry: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPrI; else goto cPrH;
       cPrI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cPrH: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cPry_info" {
     block_cPry_info:
         const _cPry;
         const 0;
         const 30;
 },
 GHC.Show.$fShowInteger_jprintb_entry() //  [R2, R3]
         { []
         }
     {offset
       cPrN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cPrO; else goto cPrP;
       cPrO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowInteger_jprintb_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cPrP: // global
           I64[Sp - 16] = block_cPr6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uPs3; else goto cPr7;
       uPs3: // global
           call _cPr6(R1) args: 0, res: 0, upd: 0;
       cPr7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInteger_jprintb_info" {
     GHC.Show.$fShowInteger_jprintb_info:
         const GHC.Show.$fShowInteger_jprintb_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SLKe_srt+1488;
 },
 _cPr6() //  [R1]
         { []
         }
     {offset
       cPr6: // global
           if (R1 & 7 == 1) goto cPrK; else goto cPrL;
       cPrK: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cPrL: // global
           I64[Sp - 8] = block_cPrc_info;
           R3 = GHC.Show.$fShowInteger3_closure;
           R2 = P64[R1 + 6];
           P64[Sp] = P64[R1 + 14];
           Sp = Sp - 8;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cPr6_info" {
     block_cPr6_info:
         const _cPr6;
         const 1;
         const 12884901918;
         const SLKe_srt+1488;
 },
 _cPrc() //  [R1, R2]
         { []
         }
     {offset
       cPrc: // global
           I64[Sp - 8] = block_cPre_info;
           _sLpN::P64 = R2;
           R2 = R1;
           P64[Sp] = _sLpN::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cPrc_info" {
     block_cPrc_info:
         const _cPrc;
         const 2;
         const 4294967326;
         const SLKe_srt+1488;
 },
 _cPre() //  [R1]
         { []
         }
     {offset
       cPre: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cPrZ; else goto cPrY;
       cPrZ: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cPrY: // global
           I64[Hp - 32] = sat_sLpU_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 24] = block_cPrS_info;
           R4 = Hp - 32;
           R3 = R1;
           R2 = 18;
           Sp = Sp + 24;
           call GHC.Show.$wjblock'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cPre_info" {
     block_cPre_info:
         const _cPre;
         const 3;
         const 4294967326;
         const SLKe_srt+1488;
 },
 _cPrS() //  [R1, R2]
         { []
         }
     {offset
       cPrS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPs2; else goto cPs1;
       cPs2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cPs1: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cPrS_info" {
     block_cPrS_info:
         const _cPrS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.621871331 UTC

[section ""data" . jsplitb_rC1r_closure" {
     jsplitb_rC1r_closure:
         const jsplitb_rC1r_info;
 },
 sat_sLq6_entry() //  [R1]
         { []
         }
     {offset
       cPtg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPth; else goto cPti;
       cPth: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPti: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call jsplitb_rC1r_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLq6_info" {
     sat_sLq6_info:
         const sat_sLq6_entry;
         const 2;
         const 18;
 },
 jsplitb_rC1r_entry() //  [R2, R3]
         { []
         }
     {offset
       cPtn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cPto; else goto cPtp;
       cPto: // global
           R3 = R3;
           R2 = R2;
           R1 = jsplitb_rC1r_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cPtp: // global
           I64[Sp - 16] = block_cPt4_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uPty; else goto cPt5;
       uPty: // global
           call _cPt4(R1) args: 0, res: 0, upd: 0;
       cPt5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . jsplitb_rC1r_info" {
     jsplitb_rC1r_info:
         const jsplitb_rC1r_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cPt4() //  [R1]
         { []
         }
     {offset
       cPt4: // global
           if (R1 & 7 == 1) goto cPtk; else goto cPtl;
       cPtk: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cPtl: // global
           I64[Sp - 8] = block_cPta_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 6];
           P64[Sp] = P64[R1 + 14];
           Sp = Sp - 8;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cPt4_info" {
     block_cPt4_info:
         const _cPt4;
         const 1;
         const 30;
 },
 _cPta() //  [R1, R2]
         { []
         }
     {offset
       cPta: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cPtx; else goto cPtw;
       cPtx: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cPtw: // global
           I64[Hp - 72] = sat_sLq6_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 8];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cPta_info" {
     block_cPta_info:
         const _cPta;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.631185093 UTC

[section ""data" . GHC.Show.$fShowInteger1_closure" {
     GHC.Show.$fShowInteger1_closure:
         const GHC.Show.$fShowInteger1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowInteger1_entry() //  [R1]
         { []
         }
     {offset
       cPub: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPuc; else goto cPud;
       cPuc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPud: // global
           (_cPu8::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cPu8::I64 == 0) goto cPua; else goto cPu9;
       cPua: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cPu9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cPu8::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInteger1_info" {
     GHC.Show.$fShowInteger1_info:
         const GHC.Show.$fShowInteger1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.638012298 UTC

[section ""data" . GHC.Show.$wjsplitf_closure" {
     GHC.Show.$wjsplitf_closure:
         const GHC.Show.$wjsplitf_info;
         const 0;
 },
 sat_sLqj_entry() //  [R1]
         { []
         }
     {offset
       cPuM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPuN; else goto cPuO;
       cPuN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPuO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call jsplitb_rC1r_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLqj_info" {
     sat_sLqj_info:
         const sat_sLqj_entry;
         const 2;
         const 18;
 },
 sat_sLqk_entry() //  [R1]
         { []
         }
     {offset
       cPuV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPuW; else goto cPuX;
       cPuW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPuX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call jsplitb_rC1r_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLqk_info" {
     sat_sLqk_info:
         const sat_sLqk_entry;
         const 2;
         const 18;
 },
 GHC.Show.$wjsplitf_entry() //  [R2, R3]
         { []
         }
     {offset
       cPv1: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cPv2; else goto cPv3;
       cPv2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$wjsplitf_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cPv3: // global
           I64[Sp - 24] = block_cPus_info;
           _sLq9::P64 = R3;
           R3 = R3;
           _sLq8::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _sLq8::P64;
           P64[Sp - 8] = _sLq9::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$wjsplitf_info" {
     GHC.Show.$wjsplitf_info:
         const GHC.Show.$wjsplitf_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SLKe_srt+1504;
 },
 _cPus() //  [R1]
         { []
         }
     {offset
       cPus: // global
           if (R1 == 1) goto cPv0; else goto cPuZ;
       cPv0: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cPuZ: // global
           I64[Sp] = block_cPuw_info;
           _sLq8::P64 = P64[Sp + 8];
           R3 = _sLq8::P64;
           R2 = _sLq8::P64;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cPus_info" {
     block_cPus_info:
         const _cPus;
         const 2;
         const 30064771102;
         const SLKe_srt+1504;
 },
 _cPuw() //  [R1]
         { []
         }
     {offset
       cPuw: // global
           I64[Sp] = block_cPuA_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Show.$wjsplitf_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cPuw_info" {
     block_cPuw_info:
         const _cPuw;
         const 2;
         const 12884901918;
         const SLKe_srt+1512;
 },
 _cPuA() //  [R1, R2]
         { []
         }
     {offset
       cPuA: // global
           I64[Sp] = block_cPuC_info;
           R3 = P64[Sp + 8];
           _sLqe::P64 = R2;
           R2 = R1;
           P64[Sp + 16] = _sLqe::P64;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cPuA_info" {
     block_cPuA_info:
         const _cPuA;
         const 130;
         const 4294967326;
         const SLKe_srt+1512;
 },
 _cPuC() //  [R1, R2]
         { []
         }
     {offset
       cPuC: // global
           I64[Sp - 16] = block_cPuE_info;
           R3 = GHC.Show.$fShowInteger1_closure;
           _sLqh::P64 = R2;
           R2 = R1;
           P64[Sp - 8] = _sLqh::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cPuC_info" {
     block_cPuC_info:
         const _cPuC;
         const 2;
         const 4294967326;
         const SLKe_srt+1512;
 },
 _cPuE() //  [R1]
         { []
         }
     {offset
       cPuE: // global
           _sLq8::P64 = P64[Sp + 24];
           _sLqe::P64 = P64[Sp + 32];
           _sLqh::P64 = P64[Sp + 8];
           if (R1 == 1) goto cPve; else goto cPv9;
       cPve: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cPvh; else goto cPvg;
       cPvh: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cPvg: // global
           I64[Hp - 48] = sat_sLqk_info;
           P64[Hp - 32] = _sLq8::P64;
           P64[Hp - 24] = _sLqe::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sLqh::P64;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = P64[Sp + 16];
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cPv9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cPvc; else goto cPvb;
       cPvc: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cPvb: // global
           I64[Hp - 24] = sat_sLqj_info;
           P64[Hp - 8] = _sLq8::P64;
           P64[Hp] = _sLqe::P64;
           R2 = Hp - 24;
           R1 = _sLqh::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cPuE_info" {
     block_cPuE_info:
         const _cPuE;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.653743796 UTC

[section ""data" . sat_sLqp_closure" {
     sat_sLqp_closure:
         const GHC.Types.I#_con_info;
         const 100974195;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.655467953 UTC

[section ""data" . sat_sLqq_closure" {
     sat_sLqq_closure:
         const :_con_info;
         const sat_sLqp_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.65713747 UTC

[section ""data" . sat_sLqo_closure" {
     sat_sLqo_closure:
         const GHC.Types.I#_con_info;
         const 1864637526;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.658884118 UTC

[section ""data" . sat_sLqr_closure" {
     sat_sLqr_closure:
         const :_con_info;
         const sat_sLqo_closure+1;
         const sat_sLqq_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.660639921 UTC

[section ""data" . sat_sLqn_closure" {
     sat_sLqn_closure:
         const GHC.Types.I#_con_info;
         const 1721187872;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.662671455 UTC

[section ""data" . sat_sLqs_closure" {
     sat_sLqs_closure:
         const :_con_info;
         const sat_sLqn_closure+1;
         const sat_sLqr_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.664333853 UTC

[section ""data" . sat_sLqm_closure" {
     sat_sLqm_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.666037757 UTC

[section ""data" . sat_sLqt_closure" {
     sat_sLqt_closure:
         const :_con_info;
         const sat_sLqm_closure+1;
         const sat_sLqs_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.668378495 UTC

[section ""data" . GHC.Show.$fShowInteger2_closure" {
     GHC.Show.$fShowInteger2_closure:
         const GHC.Show.$fShowInteger2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Show.$fShowInteger2_entry() //  [R1]
         { []
         }
     {offset
       cPwg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPwh; else goto cPwi;
       cPwh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPwi: // global
           (_cPwd::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cPwd::I64 == 0) goto cPwf; else goto cPwe;
       cPwf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cPwe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cPwd::I64;
           R3 = sat_sLqt_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInteger2_info" {
     GHC.Show.$fShowInteger2_info:
         const GHC.Show.$fShowInteger2_entry;
         const 0;
         const 4294967317;
         const SLKe_srt+1528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.676986789 UTC

[section ""data" . GHC.Show.$wintegerToString'_closure" {
     GHC.Show.$wintegerToString'_closure:
         const GHC.Show.$wintegerToString'_info;
         const 0;
 },
 sat_sLqG_entry() //  [R1]
         { []
         }
     {offset
       cPwT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPwU; else goto cPwV;
       cPwU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPwV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShowInteger_jprintb_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLqG_info" {
     sat_sLqG_info:
         const sat_sLqG_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1488;
 },
 sat_sLqI_entry() //  [R1]
         { []
         }
     {offset
       cPx9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPxa; else goto cPxb;
       cPxa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPxb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.$fShowInteger_jprintb_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLqI_info" {
     sat_sLqI_info:
         const sat_sLqI_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1488;
 },
 sat_sLqM_entry() //  [R1]
         { []
         }
     {offset
       cPxc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cPxg; else goto cPxh;
       cPxg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPxh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cPx1_info;
           R2 = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLqM_info" {
     sat_sLqM_info:
         const sat_sLqM_entry;
         const 3;
         const 4294967311;
         const SLKe_srt+1488;
 },
 _cPx1() //  [R1]
         { []
         }
     {offset
       cPx1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cPxk; else goto cPxj;
       cPxk: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       cPxj: // global
           I64[Hp - 24] = sat_sLqI_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cPxd_info;
           R4 = Hp - 24;
           R3 = R1;
           R2 = 18;
           Sp = Sp + 16;
           call GHC.Show.$wjblock'_entry(R4, R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cPx1_info" {
     block_cPx1_info:
         const _cPx1;
         const 2;
         const 4294967326;
         const SLKe_srt+1488;
 },
 _cPxd() //  [R1, R2]
         { []
         }
     {offset
       cPxd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPxn; else goto cPxm;
       cPxn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cPxm: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cPxd_info" {
     block_cPxd_info:
         const _cPxd;
         const 0;
         const 30;
 },
 GHC.Show.$wintegerToString'_entry() //  [R2, R3]
         { []
         }
     {offset
       cPxr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cPxs; else goto cPxt;
       cPxs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$wintegerToString'_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cPxt: // global
           I64[Sp - 24] = block_cPww_info;
           _sLqv::P64 = R3;
           R3 = GHC.Show.$fShowInteger3_closure;
           _sLqu::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _sLqu::P64;
           P64[Sp - 8] = _sLqv::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$wintegerToString'_info" {
     GHC.Show.$wintegerToString'_info:
         const GHC.Show.$wintegerToString'_entry;
         const 0;
         const 906238099470;
         const 8589934607;
         const SLKe_srt+1488;
 },
 _cPww() //  [R1]
         { []
         }
     {offset
       cPww: // global
           _sLqu::P64 = P64[Sp + 8];
           if (R1 == 1) goto cPxq; else goto cPxp;
       cPxq: // global
           I64[Sp + 8] = block_cPxI_info;
           R2 = _sLqu::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
       cPxp: // global
           I64[Sp + 8] = block_cPwA_info;
           R3 = _sLqu::P64;
           R2 = GHC.Show.$fShowInteger2_closure;
           Sp = Sp + 8;
           call GHC.Show.$wjsplitf_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cPww_info" {
     block_cPww_info:
         const _cPww;
         const 2;
         const 631360192542;
         const SLKe_srt+1488;
 },
 _cPxI() //  [R1]
         { []
         }
     {offset
       cPxI: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Show.$witos'_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cPxI_info" {
     block_cPxI_info:
         const _cPxI;
         const 1;
         const 30;
 },
 _cPwA() //  [R1, R2]
         { []
         }
     {offset
       cPwA: // global
           I64[Sp - 8] = block_cPwC_info;
           R3 = GHC.Show.$fShowInteger3_closure;
           _sLqz::P64 = R2;
           R2 = R1;
           P64[Sp] = _sLqz::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cPwA_info" {
     block_cPwA_info:
         const _cPwA;
         const 1;
         const 12884901918;
         const SLKe_srt+1488;
 },
 _cPwC() //  [R1, R2]
         { []
         }
     {offset
       cPwC: // global
           I64[Sp - 8] = block_cPwE_info;
           _sLqC::P64 = R2;
           R2 = R1;
           P64[Sp] = _sLqC::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cPwC_info" {
     block_cPwC_info:
         const _cPwC;
         const 2;
         const 4294967326;
         const SLKe_srt+1488;
 },
 _cPwE() //  [R1]
         { []
         }
     {offset
       cPwE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cPxz; else goto cPxy;
       cPxz: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cPxy: // global
           _sLqC::P64 = P64[Sp + 8];
           if (%MO_S_Le_W64(R1, 0)) goto cPxB; else goto cPxF;
       cPxB: // global
           Hp = Hp - 40;
           I64[Sp + 8] = block_cPwL_info;
           R2 = _sLqC::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
       cPxF: // global
           I64[Hp - 32] = sat_sLqM_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sLqC::P64;
           R3 = Hp - 32;
           R2 = R1;
           Sp = Sp + 32;
           call GHC.Show.$witos'_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cPwE_info" {
     block_cPwE_info:
         const _cPwE;
         const 3;
         const 4294967326;
         const SLKe_srt+1488;
 },
 _cPwL() //  [R1]
         { []
         }
     {offset
       cPwL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cPxE; else goto cPxD;
       cPxE: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cPxD: // global
           I64[Hp - 24] = sat_sLqG_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 24;
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Show.$witos'_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cPwL_info" {
     block_cPwL_info:
         const _cPwL;
         const 2;
         const 4294967326;
         const SLKe_srt+1488;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.701632931 UTC

[section ""data" . GHC.Show.$wintegerToString_closure" {
     GHC.Show.$wintegerToString_closure:
         const GHC.Show.$wintegerToString_info;
         const 0;
 },
 sat_sLqV_entry() //  [R1]
         { []
         }
     {offset
       cPz6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cPzc; else goto cPzd;
       cPzc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPzd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cPz4_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLqV_info" {
     sat_sLqV_info:
         const sat_sLqV_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1536;
 },
 _cPz4() //  [R1]
         { []
         }
     {offset
       cPz4: // global
           _sLqP::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cPz9_info;
           R3 = _sLqP::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Show.$wintegerToString'_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cPz4_info" {
     block_cPz4_info:
         const _cPz4;
         const 1;
         const 4294967326;
         const SLKe_srt+1536;
 },
 _cPz9() //  [R1, R2]
         { []
         }
     {offset
       cPz9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPzh; else goto cPzg;
       cPzh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cPzg: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cPz9_info" {
     block_cPz9_info:
         const _cPz9;
         const 0;
         const 30;
 },
 GHC.Show.$wintegerToString_entry() //  [R2, R3]
         { []
         }
     {offset
       cPzl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cPzm; else goto cPzn;
       cPzm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$wintegerToString_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cPzn: // global
           I64[Sp - 24] = block_cPyV_info;
           _sLqP::P64 = R3;
           R3 = GHC.Show.$fShowInteger1_closure;
           _sLqO::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _sLqO::P64;
           P64[Sp - 8] = _sLqP::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$wintegerToString_info" {
     GHC.Show.$wintegerToString_info:
         const GHC.Show.$wintegerToString_entry;
         const 0;
         const 176093659150;
         const 8589934607;
         const SLKe_srt+1512;
 },
 _cPyV() //  [R1]
         { []
         }
     {offset
       cPyV: // global
           _sLqO::P64 = P64[Sp + 8];
           _sLqP::P64 = P64[Sp + 16];
           if (R1 == 1) goto cPzk; else goto cPzj;
       cPzk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cPzs; else goto cPzr;
       cPzs: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cPzr: // global
           I64[Hp - 24] = sat_sLqV_info;
           P64[Hp - 8] = _sLqO::P64;
           P64[Hp] = _sLqP::P64;
           R2 = Hp - 24;
           R1 = GHC.Show.showLitChar1_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cPzj: // global
           R3 = _sLqP::P64;
           R2 = _sLqO::P64;
           Sp = Sp + 24;
           call GHC.Show.$wintegerToString'_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cPyV_info" {
     block_cPyV_info:
         const _cPyV;
         const 2;
         const 4294967326;
         const SLKe_srt+1536;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.715376938 UTC

[section ""data" . GHC.Show.$w$cshowsPrec4_closure" {
     GHC.Show.$w$cshowsPrec4_closure:
         const GHC.Show.$w$cshowsPrec4_info;
         const 0;
 },
 sat_sLr5_entry() //  [R1]
         { []
         }
     {offset
       cPAf: // global
           _sLr5::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cPAg; else goto cPAh;
       cPAh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPAj; else goto cPAi;
       cPAj: // global
           HpAlloc = 24;
           goto cPAg;
       cPAg: // global
           R1 = _sLr5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPAi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLr5::P64;
           _sLqX::P64 = P64[_sLr5::P64 + 16];
           _sLqY::P64 = P64[_sLr5::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure+1;
           P64[Hp] = _sLqY::P64;
           I64[Sp - 24] = block_cPAc_info;
           R3 = Hp - 14;
           R2 = _sLqX::P64;
           Sp = Sp - 24;
           call GHC.Show.$wintegerToString_entry(R3,
                                                 R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLr5_info" {
     sat_sLr5_info:
         const sat_sLr5_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1552;
 },
 _cPAc() //  [R1, R2]
         { []
         }
     {offset
       cPAc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPAm; else goto cPAl;
       cPAm: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cPAl: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cPAc_info" {
     block_cPAc_info:
         const _cPAc;
         const 0;
         const 30;
 },
 GHC.Show.$w$cshowsPrec4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cPAq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cPAr; else goto cPAs;
       cPAr: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$w$cshowsPrec4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cPAs: // global
           if (%MO_S_Le_W64(R2, 6)) goto uPAB; else goto cPAp;
       uPAB: // global
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call _cPAw() args: 0, res: 0, upd: 0;
       cPAp: // global
           I64[Sp - 24] = block_cPA2_info;
           _sLqX::P64 = R3;
           R3 = GHC.Show.$fShowInteger1_closure;
           R2 = _sLqX::P64;
           P64[Sp - 16] = _sLqX::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$w$cshowsPrec4_info" {
     GHC.Show.$w$cshowsPrec4_info:
         const GHC.Show.$w$cshowsPrec4_entry;
         const 0;
         const 416611827726;
         const 12884901907;
         const SLKe_srt+1512;
 },
 _cPA2() //  [R1]
         { []
         }
     {offset
       cPA2: // global
           if (R1 == 1) goto cPAx; else goto uPAC;
       cPAx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cPAA; else goto cPAz;
       cPAA: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cPAz: // global
           I64[Hp - 24] = sat_sLr5_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 24;
           R1 = GHC.Show.$fShow(,)4_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       uPAC: // global
           Sp = Sp + 8;
           call _cPAw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cPA2_info" {
     block_cPA2_info:
         const _cPA2;
         const 2;
         const 4294967326;
         const SLKe_srt+1552;
 },
 _cPAw() //  []
         { []
         }
     {offset
       cPAw: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           Sp = Sp + 16;
           call GHC.Show.$wintegerToString_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.726508666 UTC

[section ""data" . GHC.Show.$fShowInteger_$cshowsPrec_closure" {
     GHC.Show.$fShowInteger_$cshowsPrec_closure:
         const GHC.Show.$fShowInteger_$cshowsPrec_info;
         const 0;
 },
 GHC.Show.$fShowInteger_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cPBe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cPBk; else goto cPBl;
       cPBk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowInteger_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cPBl: // global
           I64[Sp - 24] = block_cPBb_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uPBq; else goto cPBc;
       uPBq: // global
           call _cPBb(R1) args: 0, res: 0, upd: 0;
       cPBc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInteger_$cshowsPrec_info" {
     GHC.Show.$fShowInteger_$cshowsPrec_info:
         const GHC.Show.$fShowInteger_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SLKe_srt+1560;
 },
 _cPBb() //  [R1]
         { []
         }
     {offset
       cPBb: // global
           _sLr8::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cPBh_info;
           R4 = _sLr8::P64;
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cPBb_info" {
     block_cPBb_info:
         const _cPBb;
         const 2;
         const 4294967326;
         const SLKe_srt+1560;
 },
 _cPBh() //  [R1, R2]
         { []
         }
     {offset
       cPBh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPBp; else goto cPBo;
       cPBp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cPBo: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cPBh_info" {
     block_cPBh_info:
         const _cPBh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.734003325 UTC

[section ""data" . GHC.Show.$fShowInteger_$cshow_closure" {
     GHC.Show.$fShowInteger_$cshow_closure:
         const GHC.Show.$fShowInteger_$cshow_info;
         const 0;
 },
 GHC.Show.$fShowInteger_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cPBO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cPBP; else goto cPBQ;
       cPBP: // global
           R2 = R2;
           R1 = GHC.Show.$fShowInteger_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cPBQ: // global
           I64[Sp - 8] = block_cPBL_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = R2;
           R2 = 0;
           Sp = Sp - 8;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInteger_$cshow_info" {
     GHC.Show.$fShowInteger_$cshow_info:
         const GHC.Show.$fShowInteger_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SLKe_srt+1560;
 },
 _cPBL() //  [R1, R2]
         { []
         }
     {offset
       cPBL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPBT; else goto cPBS;
       cPBT: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cPBS: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cPBL_info" {
     block_cPBL_info:
         const _cPBL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.743645574 UTC

[section ""data" . GHC.Show.$fShowInteger_$cshowList_closure" {
     GHC.Show.$fShowInteger_$cshowList_closure:
         const GHC.Show.$fShowInteger_$cshowList_info;
         const 0;
 },
 sat_sLrx_entry() //  [R1]
         { []
         }
     {offset
       cPCI: // global
           _sLrx::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cPCJ; else goto cPCK;
       cPCK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cPCM; else goto cPCL;
       cPCM: // global
           HpAlloc = 32;
           goto cPCJ;
       cPCJ: // global
           R1 = _sLrx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPCL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLrx::P64;
           _sLro::P64 = P64[_sLrx::P64 + 16];
           _sLrr::P64 = P64[_sLrx::P64 + 24];
           _sLrs::P64 = P64[_sLrx::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sLro::P64;
           P64[Hp] = _sLrs::P64;
           I64[Sp - 24] = block_cPCF_info;
           R4 = Hp - 24;
           R3 = _sLrr::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLrx_info" {
     sat_sLrx_info:
         const sat_sLrx_entry;
         const 3;
         const 4294967311;
         const SLKe_srt+1560;
 },
 _cPCF() //  [R1, R2]
         { []
         }
     {offset
       cPCF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPCP; else goto cPCO;
       cPCP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cPCO: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cPCF_info" {
     block_cPCF_info:
         const _cPCF;
         const 0;
         const 30;
 },
 showl_sLro_entry() //  [R1, R2]
         { []
         }
     {offset
       cPCU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cPCV; else goto cPCW;
       cPCV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cPCW: // global
           I64[Sp - 24] = block_cPCu_info;
           _sLro::P64 = R1;
           _sLrn::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sLrn::P64;
           P64[Sp - 8] = _sLro::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uPD3; else goto cPCv;
       uPD3: // global
           call _cPCu(R1) args: 0, res: 0, upd: 0;
       cPCv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . showl_sLro_info" {
     showl_sLro_info:
         const showl_sLro_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SLKe_srt+1560;
 },
 _cPCu() //  [R1]
         { []
         }
     {offset
       cPCu: // global
           if (R1 & 7 == 1) goto cPCR; else goto cPCS;
       cPCR: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cPCS: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cPD2; else goto cPD1;
       cPD2: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cPD1: // global
           _sLrr::P64 = P64[R1 + 6];
           _sLrs::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sLrx_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _sLrr::P64;
           P64[Hp - 24] = _sLrs::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cPCu_info" {
     block_cPCu_info:
         const _cPCu;
         const 2;
         const 4294967326;
         const SLKe_srt+1560;
 },
 sat_sLry_entry() //  [R1]
         { []
         }
     {offset
       cPD4: // global
           _sLry::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cPD5; else goto cPD6;
       cPD6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cPD8; else goto cPD7;
       cPD8: // global
           HpAlloc = 40;
           goto cPD5;
       cPD5: // global
           R1 = _sLry::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPD7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLry::P64;
           _sLrj::P64 = P64[_sLry::P64 + 16];
           _sLrm::P64 = P64[_sLry::P64 + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Show.showList__2_closure+1;
           P64[Hp - 16] = _sLrj::P64;
           I64[Hp - 8] = showl_sLro_info;
           P64[Hp] = Hp - 30;
           R2 = _sLrm::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call showl_sLro_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLry_info" {
     sat_sLry_info:
         const sat_sLry_entry;
         const 2;
         const 4294967314;
         const SLKe_srt+1560;
 },
 sat_sLrC_entry() //  [R1]
         { []
         }
     {offset
       cPDc: // global
           _sLrC::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cPDd; else goto cPDe;
       cPDe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cPDg; else goto cPDf;
       cPDg: // global
           HpAlloc = 32;
           goto cPDd;
       cPDd: // global
           R1 = _sLrC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cPDf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sLrC::P64;
           _sLrj::P64 = P64[_sLrC::P64 + 16];
           _sLrl::P64 = P64[_sLrC::P64 + 24];
           _sLrm::P64 = P64[_sLrC::P64 + 32];
           I64[Hp - 24] = sat_sLry_info;
           P64[Hp - 8] = _sLrj::P64;
           P64[Hp] = _sLrm::P64;
           I64[Sp - 24] = block_cPD9_info;
           R4 = Hp - 24;
           R3 = _sLrl::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sLrC_info" {
     sat_sLrC_info:
         const sat_sLrC_entry;
         const 3;
         const 4294967311;
         const SLKe_srt+1560;
 },
 _cPD9() //  [R1, R2]
         { []
         }
     {offset
       cPD9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPDj; else goto cPDi;
       cPDj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cPDi: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cPD9_info" {
     block_cPD9_info:
         const _cPD9;
         const 0;
         const 30;
 },
 GHC.Show.$fShowInteger_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cPDo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPDp; else goto cPDq;
       cPDp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.$fShowInteger_$cshowList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cPDq: // global
           I64[Sp - 16] = block_cPCa_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uPDx; else goto cPCb;
       uPDx: // global
           call _cPCa(R1) args: 0, res: 0, upd: 0;
       cPCb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.$fShowInteger_$cshowList_info" {
     GHC.Show.$fShowInteger_$cshowList_info:
         const GHC.Show.$fShowInteger_$cshowList_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SLKe_srt+1560;
 },
 _cPCa() //  [R1]
         { []
         }
     {offset
       cPCa: // global
           _sLrj::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cPDl; else goto cPDm;
       cPDl: // global
           R3 = _sLrj::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cPDm: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cPDw; else goto cPDv;
       cPDw: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cPDv: // global
           _sLrl::P64 = P64[R1 + 6];
           _sLrm::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sLrC_info;
           P64[Hp - 40] = _sLrj::P64;
           P64[Hp - 32] = _sLrl::P64;
           P64[Hp - 24] = _sLrm::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cPCa_info" {
     block_cPCa_info:
         const _cPCa;
         const 1;
         const 4294967326;
         const SLKe_srt+1560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.763166197 UTC

[section ""data" . GHC.Show.$fShowInteger_closure" {
     GHC.Show.$fShowInteger_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowInteger_$cshowsPrec_closure+3;
         const GHC.Show.$fShowInteger_$cshow_closure+1;
         const GHC.Show.$fShowInteger_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.76574716 UTC

[section ""data" . GHC.Show.C:Show_closure" {
     GHC.Show.C:Show_closure:
         const GHC.Show.C:Show_info;
 },
 GHC.Show.C:Show_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cPEK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cPEO; else goto cPEN;
       cPEO: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Show.C:Show_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cPEN: // global
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.C:Show_info" {
     GHC.Show.C:Show_info:
         const GHC.Show.C:Show_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.769427827 UTC

[section ""cstring" . iPEW_str" {
     iPEW_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,104,111,119,46,67,58,83,104,111,119]
 },
 GHC.Show.C:Show_con_entry() //  [R1]
         { []
         }
     {offset
       cPEV: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Show.C:Show_con_info" {
     GHC.Show.C:Show_con_info:
         const GHC.Show.C:Show_con_entry;
         const 3;
         const 1;
         const iPEW_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:34.773699654 UTC

[section ""relreadonly" . SLKe_srt" {
     SLKe_srt:
         const GHC.List.$w!!_closure;
         const GHC.Show.asciiTab_closure;
         const GHC.Show.$wshowLitChar_closure;
         const GHC.Show.showLitChar_closure;
         const GHC.Show.showLitString_closure;
         const GHC.Show.$fShow(,)_$cshowList1_closure;
         const GHC.Show.$fShow[]_$s$cshow1_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.Show.$w$cshowsPrec_closure;
         const GHC.Show.$fShowSrcLoc_$cshowsPrec_closure;
         const GHC.Show.$fShowSrcLoc1_closure;
         const GHC.Show.$fShowSrcLoc_$cshow_closure;
         const GHC.List.errorEmptyList_closure;
         const go2_rC0p_closure;
         const lvl11_rC0o_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,,,)_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,,)_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,,)_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,,,,,,,)_closure;
         const GHC.Show.$fShow(,,,,,,,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,,,,,,)_closure;
         const GHC.Show.$fShow(,,,,,,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,,,,,)_closure;
         const GHC.Show.$fShow(,,,,,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,,,,)_closure;
         const GHC.Show.$fShow(,,,,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,,,)_closure;
         const GHC.Show.$fShow(,,,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,,)_closure;
         const GHC.Show.$fShow(,,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,,)_closure;
         const GHC.Show.$fShow(,,,,)_go2_closure;
         const GHC.Show.$fShow(,,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,,)_closure;
         const GHC.Show.$fShow(,,,)_go2_closure;
         const GHC.Show.$w$cshowsPrec2_closure;
         const GHC.Show.$fShow(,,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,,)_$cshow_closure;
         const GHC.Show.$fShow(,,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,,)_closure;
         const GHC.Show.$fShow(,,)_go2_closure;
         const GHC.Show.$w$cshowsPrec1_closure;
         const GHC.Show.$fShow(,,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,,)_$cshow_closure;
         const GHC.Show.$fShow(,,)_$cshowList_closure;
         const GHC.Show.$fShow(,,)_closure;
         const GHC.Show.$fShow(,)_go2_closure;
         const GHC.Show.$w$cshowsPrec_closure;
         const GHC.Show.$fShow(,)_$cshowList1_closure;
         const GHC.Show.$w$s$cshowsPrec_closure;
         const GHC.Show.$fShow(,)_go1_closure;
         const GHC.Show.$fShow(,)_$cshowsPrec_closure;
         const GHC.Show.$fShow(,)_$cshow_closure;
         const GHC.Show.$fShow(,)_$cshowList_closure;
         const GHC.Show.$fShow(,)_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.Show.$fShowTypeLitSort2_closure;
         const GHC.Show.$fShowTypeLitSort4_closure;
         const GHC.Show.$fShowTypeLitSort_$cshowsPrec_closure;
         const GHC.Show.$fShowTypeLitSort_$cshow_closure;
         const GHC.Show.$fShowTypeLitSort1_closure;
         const GHC.Show.$w$cshowsPrec10_closure;
         const GHC.Show.$fShowVecElem1_closure;
         const GHC.Show.$fShowVecElem3_closure;
         const GHC.Show.$fShowVecElem5_closure;
         const GHC.Show.$fShowVecElem7_closure;
         const GHC.Show.$fShowVecElem9_closure;
         const GHC.Show.$fShowVecElem11_closure;
         const GHC.Show.$fShowVecElem13_closure;
         const GHC.Show.$fShowVecElem15_closure;
         const GHC.Show.$fShowVecElem17_closure;
         const GHC.Show.$fShowVecElem19_closure;
         const GHC.Show.$fShowVecElem_$cshow_closure;
         const GHC.Show.$w$cshowsPrec9_closure;
         const GHC.Show.$fShowVecCount1_closure;
         const GHC.Show.$fShowVecCount3_closure;
         const GHC.Show.$fShowVecCount5_closure;
         const GHC.Show.$fShowVecCount7_closure;
         const GHC.Show.$fShowVecCount9_closure;
         const GHC.Show.$fShowVecCount11_closure;
         const GHC.Show.$fShowVecCount_$cshow_closure;
         const GHC.Show.$w$cshowsPrec8_closure;
         const GHC.Show.$fShowOrdering1_closure;
         const GHC.Show.$fShowOrdering3_closure;
         const GHC.Show.$fShowOrdering5_closure;
         const GHC.Show.$fShowOrdering_$cshow_closure;
         const GHC.Show.$fShowBool2_closure;
         const GHC.Show.$fShowBool4_closure;
         const GHC.Show.$fShowBool_$cshowsPrec_closure;
         const GHC.Show.$fShowBool_$cshow_closure;
         const GHC.Show.$fShowBool1_closure;
         const GHC.Show.$fShow()2_closure;
         const GHC.Show.$fShow()_$cshowsPrec_closure;
         const GHC.Show.$fShow()_$cshow_closure;
         const GHC.Show.$fShow()1_closure;
         const lvl18_rC0M_closure;
         const GHC.Show.showLitString_closure;
         const lvl16_rC0K_closure;
         const GHC.Show.$wgo_closure;
         const lvl14_rC0I_closure;
         const GHC.Show.showMultiLineString_go_closure;
         const GHC.Show.showMultiLineString_closure;
         const GHC.Show.$wshowLitChar_closure;
         const GHC.Show.$fShowChar1_closure;
         const GHC.Show.$w$cshowsPrec3_closure;
         const GHC.Show.$fShowChar_$cshowsPrec_closure;
         const GHC.Show.$fShowChar_$cshow_closure;
         const GHC.Show.$fShow[]_$s$cshowList1_closure;
         const GHC.Show.$fShow(,)_$cshowList1_closure;
         const GHC.Show.$w$cshowsPrec10_closure;
         const GHC.Show.$fShowRuntimeRep_$cshowsPrec_closure;
         const lvl21_rC0R_closure;
         const lvl23_rC0T_closure;
         const lvl25_rC0V_closure;
         const lvl27_rC0X_closure;
         const lvl29_rC0Z_closure;
         const lvl31_rC11_closure;
         const lvl33_rC13_closure;
         const lvl35_rC15_closure;
         const lvl37_rC17_closure;
         const GHC.Show.$fShowRuntimeRep1_closure;
         const GHC.Show.$fShowCallStack2_closure;
         const GHC.Show.$w$s$cshowsPrec_closure;
         const GHC.Show.$fShowCallStack_$cshowsPrec_closure;
         const GHC.Show.$fShowCallStack_showl_closure;
         const GHC.Show.$fShowCallStack_$cshow_closure;
         const GHC.Show.$fShowCallStack3_closure;
         const GHC.Show.$fShowCallStack1_closure;
         const GHC.Show.$fShowMaybe4_closure;
         const GHC.Show.$fShowMaybe1_closure;
         const GHC.Show.$fShowMaybe_$cshowsPrec_closure;
         const GHC.Show.$fShowMaybe3_closure;
         const GHC.Show.$fShowMaybe_$cshow_closure;
         const GHC.Show.$fShowMaybe_$cshowList_closure;
         const GHC.Show.$fShowMaybe_closure;
         const GHC.Show.$w$cshowsPrec5_closure;
         const f11_rC1n_closure;
         const f9_rC1l_closure;
         const f7_rC1j_closure;
         const f5_rC1h_closure;
         const GHC.Show.showLitString_closure;
         const f3_rC1f_closure;
         const f1_rC1d_closure;
         const GHC.Show.$fShowKindRep_$cshowsPrec_closure;
         const GHC.Show.$fShowKindRep1_closure;
         const GHC.Show.$fShowKindRep_$cshow_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Show.intToDigit1_closure;
         const GHC.Show.intToDigit_closure;
         const GHC.Show.$wintToDigit_closure;
         const sat_sLpF_closure;
         const GHC.Show.$fShowInteger_jprintb_closure;
         const GHC.Show.$fShowInteger3_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Show.$fShowInteger1_closure;
         const GHC.Show.$wjsplitf_closure;
         const sat_sLqt_closure;
         const GHC.Show.$wintegerToString'_closure;
         const GHC.Show.$fShowInteger2_closure;
         const GHC.Show.$wintegerToString_closure;
         const GHC.Show.$w$cshowsPrec4_closure;
         const GHC.Show.$fShowInteger_$cshowsPrec_closure;
         const GHC.Show.$fShowInteger_$cshow_closure;
         const GHC.Show.$fShowInteger_$cshowList_closure;
 }]

