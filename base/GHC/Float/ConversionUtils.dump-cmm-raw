
==================== Raw Cmm ====================
2018-03-16 15:55:03.997583219 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:55:04.000499323 UTC

[section ""data" . GHC.Float.ConversionUtils.zeroCountArr_closure" {
     GHC.Float.ConversionUtils.zeroCountArr_closure:
         const GHC.Float.ConversionUtils.zeroCountArr_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.ConversionUtils.zeroCountArr_entry() //  [R1]
         { []
         }
     {offset
       cqzL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cqzM; else goto cqzN;
       cqzM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cqzN: // global
           (_cqzC::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cqzC::I64 == 0) goto cqzE; else goto cqzD;
       cqzE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cqzD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cqzC::I64;
           I64[Sp - 24] = block_cqzF_info;
           R1 = 256;
           Sp = Sp - 24;
           call stg_newByteArray#(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.ConversionUtils.zeroCountArr_info" {
     GHC.Float.ConversionUtils.zeroCountArr_info:
         const GHC.Float.ConversionUtils.zeroCountArr_entry;
         const 0;
         const 21;
 },
 _cqzF() //  [R1]
         { []
         }
     {offset
       cqzF: // global
           I8[R1 + 16] = 8 :: W8;
           _sqs7::P64 = R1;
           _sqsh::I64 = 1;
           _sqsg::I64 = 0;
           _sqsf::I64 = 2;
           goto cqzW;
       cqzW: // global
           if (%MO_S_Ge_W64(_sqsh::I64, 256)) goto cqA9; else goto cqAa;
       cqA9: // global
           if (%MO_S_Ge_W64(_sqsf::I64, 256)) goto uqAj; else goto cqA7;
       uqAj: // global
           P64[Sp] = _sqs7::P64;
           Sp = Sp - 8;
           call _cqzQ() args: 0, res: 0, upd: 0;
       cqA7: // global
           _sqsh::I64 = _sqsf::I64;
           _sqsg::I64 = _sqsg::I64 + 1;
           _sqsf::I64 = _sqsf::I64 << 1;
           goto cqzW;
       cqAa: // global
           I8[(_sqs7::P64 + 16) + _sqsh::I64] = %MO_UU_Conv_W64_W8(_sqsg::I64);
           _sqsh::I64 = _sqsh::I64 + _sqsf::I64;
           goto cqzW;
     }
 },
 section ""relreadonly" . block_cqzF_info" {
     block_cqzF_info:
         const _cqzF;
         const 0;
         const 30;
 },
 _cqzQ() //  []
         { []
         }
     {offset
       cqzQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cqzV; else goto cqzU;
       cqzV: // global
           HpAlloc = 16;
           I64[Sp] = block_cqzQ_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cqzU: // global
           I64[Hp - 8] = GHC.Float.ConversionUtils.BA_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cqzQ_info" {
     block_cqzQ_info:
         const _cqzQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.013378857 UTC

[section ""data" . GHC.Float.ConversionUtils.elimZerosInt#_closure" {
     GHC.Float.ConversionUtils.elimZerosInt#_closure:
         const GHC.Float.ConversionUtils.elimZerosInt#_info;
         const 0;
 },
 sat_sqsL_entry() //  [R1]
         { []
         }
     {offset
       cqBH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cqBI; else goto cqBJ;
       cqBI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cqBJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = %MO_S_Shr_W64(I64[R1 + 16], I64[R1 + 24]);
           Sp = Sp - 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sqsL_info" {
     sat_sqsL_info:
         const sat_sqsL_entry;
         const 8589934592;
         const 20;
 },
 sat_sqsO_entry() //  [R1]
         { []
         }
     {offset
       cqBR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cqBS; else goto cqBT;
       cqBS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cqBT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = %MO_S_Shr_W64(I64[R1 + 16], I64[R1 + 24]);
           Sp = Sp - 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sqsO_info" {
     sat_sqsO_info:
         const sat_sqsO_entry;
         const 8589934592;
         const 20;
 },
 sat_sqsS_entry() //  [R1]
         { []
         }
     {offset
       cqC4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cqC5; else goto cqC6;
       cqC5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cqC6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = %MO_S_Shr_W64(I64[R1 + 16], I64[R1 + 24]);
           Sp = Sp - 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sqsS_info" {
     sat_sqsS_info:
         const sat_sqsS_entry;
         const 8589934592;
         const 20;
 },
 sat_sqsV_entry() //  [R1]
         { []
         }
     {offset
       cqCe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cqCf; else goto cqCg;
       cqCf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cqCg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = %MO_S_Shr_W64(I64[R1 + 16], I64[R1 + 24]);
           Sp = Sp - 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sqsV_info" {
     sat_sqsV_info:
         const sat_sqsV_entry;
         const 8589934592;
         const 20;
 },
 GHC.Float.ConversionUtils.elimZerosInt#_entry() //  [R2, R3]
         { []
         }
     {offset
       cqCh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cqCi; else goto cqCj;
       cqCi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.ConversionUtils.elimZerosInt#_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cqCj: // global
           I64[Sp - 24] = block_cqAH_info;
           R1 = GHC.Float.ConversionUtils.zeroCountArr_closure;
           I64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uqCK; else goto cqAI;
       uqCK: // global
           call _cqAH(R1) args: 0, res: 0, upd: 0;
       cqAI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.ConversionUtils.elimZerosInt#_info" {
     GHC.Float.ConversionUtils.elimZerosInt#_info:
         const GHC.Float.ConversionUtils.elimZerosInt#_entry;
         const 0;
         const 12884901902;
         const 8589934604;
         const SqvT_srt;
 },
 _cqAH() //  [R1]
         { []
         }
     {offset
       cqAH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cqCm; else goto cqCl;
       cqCm: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cqCl: // global
           _sqsp::I64 = I64[Sp + 8];
           _sqsq::I64 = I64[Sp + 16];
           _sqss::P64 = P64[R1 + 7];
           _sqsw::I64 = %MO_SS_Conv_W8_W64(I8[(_sqss::P64 + 16) + _sqsp::I64 & 255]);
           if (%MO_S_Gt_W64(_sqsq::I64,
                            _sqsw::I64)) goto cqCA; else goto cqCB;
       cqCA: // global
           if (%MO_S_Ge_W64(_sqsw::I64, 8)) goto cqCx; else goto cqCy;
       cqCx: // global
           Hp = Hp - 32;
           I64[Sp] = _sqsq::I64 - 8;
           I64[Sp + 8] = %MO_S_Shr_W64(_sqsp::I64, 8);
           P64[Sp + 16] = _sqss::P64;
           Sp = Sp - 8;
           call _cqBc() args: 0, res: 0, upd: 0;
       cqCy: // global
           I64[Hp - 24] = sat_sqsS_info;
           I64[Hp - 8] = _sqsp::I64;
           I64[Hp] = _sqsw::I64;
           R2 = _sqsq::I64 - _sqsw::I64;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cqCB: // global
           I64[Hp - 24] = sat_sqsV_info;
           I64[Hp - 8] = _sqsp::I64;
           I64[Hp] = _sqsq::I64;
           R2 = 0;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cqAH_info" {
     block_cqAH_info:
         const _cqAH;
         const 194;
         const 30;
 },
 _cqBc() //  []
         { []
         }
     {offset
       cqBc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cqCp; else goto cqCo;
       cqCp: // global
           HpAlloc = 32;
           I64[Sp] = block_cqBc_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cqCo: // global
           _sqsA::I64 = I64[Sp + 16];
           _sqsB::I64 = I64[Sp + 8];
           _sqsF::I64 = %MO_SS_Conv_W8_W64(I8[P64[Sp + 24] + (_sqsA::I64 & 255 + 16)]);
           if (%MO_S_Gt_W64(_sqsB::I64,
                            _sqsF::I64)) goto cqCu; else goto cqCv;
       cqCu: // global
           if (%MO_S_Ge_W64(_sqsF::I64, 8)) goto cqCr; else goto cqCs;
       cqCr: // global
           Hp = Hp - 32;
           I64[Sp + 16] = %MO_S_Shr_W64(_sqsA::I64, 8);
           I64[Sp + 8] = _sqsB::I64 - 8;
           call _cqBc() args: 0, res: 0, upd: 0;
       cqCs: // global
           I64[Hp - 24] = sat_sqsL_info;
           I64[Hp - 8] = _sqsA::I64;
           I64[Hp] = _sqsF::I64;
           R2 = _sqsB::I64 - _sqsF::I64;
           R1 = Hp - 24;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cqCv: // global
           I64[Hp - 24] = sat_sqsO_info;
           I64[Hp - 8] = _sqsA::I64;
           I64[Hp] = _sqsB::I64;
           R2 = 0;
           R1 = Hp - 24;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cqBc_info" {
     block_cqBc_info:
         const _cqBc;
         const 195;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.031271793 UTC

[section ""data" . GHC.Float.ConversionUtils.elimZerosInteger_closure" {
     GHC.Float.ConversionUtils.elimZerosInteger_closure:
         const GHC.Float.ConversionUtils.elimZerosInteger_info;
         const 0;
 },
 GHC.Float.ConversionUtils.elimZerosInteger_entry() //  [R2, R3]
         { []
         }
     {offset
       cqDE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cqDF; else goto cqDG;
       cqDF: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.ConversionUtils.elimZerosInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cqDG: // global
           I64[Sp - 16] = block_cqDC_info;
           R2 = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.ConversionUtils.elimZerosInteger_info" {
     GHC.Float.ConversionUtils.elimZerosInteger_info:
         const GHC.Float.ConversionUtils.elimZerosInteger_entry;
         const 0;
         const 21474836494;
         const 8589934606;
         const SqvT_srt;
 },
 _cqDC() //  [R1]
         { []
         }
     {offset
       cqDC: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Float.ConversionUtils.elimZerosInt#_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cqDC_info" {
     block_cqDC_info:
         const _cqDC;
         const 65;
         const 4294967326;
         const SqvT_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.03701733 UTC

[section ""cstring" . GHC.Float.ConversionUtils.$trModule4_bytes" {
     GHC.Float.ConversionUtils.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.038923102 UTC

[section ""data" . GHC.Float.ConversionUtils.$trModule3_closure" {
     GHC.Float.ConversionUtils.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.ConversionUtils.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.040852683 UTC

[section ""cstring" . GHC.Float.ConversionUtils.$trModule2_bytes" {
     GHC.Float.ConversionUtils.$trModule2_bytes:
         I8[] [71,72,67,46,70,108,111,97,116,46,67,111,110,118,101,114,115,105,111,110,85,116,105,108,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.042874346 UTC

[section ""data" . GHC.Float.ConversionUtils.$trModule1_closure" {
     GHC.Float.ConversionUtils.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.ConversionUtils.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.044652823 UTC

[section ""data" . GHC.Float.ConversionUtils.$trModule_closure" {
     GHC.Float.ConversionUtils.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Float.ConversionUtils.$trModule3_closure+1;
         const GHC.Float.ConversionUtils.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.046713132 UTC

[section ""data" . $krep_rqs2_closure" {
     $krep_rqs2_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcByteArray#_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.048708973 UTC

[section ""cstring" . GHC.Float.ConversionUtils.$tcBA2_bytes" {
     GHC.Float.ConversionUtils.$tcBA2_bytes:
         I8[] [66,65]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.050543953 UTC

[section ""data" . GHC.Float.ConversionUtils.$tcBA1_closure" {
     GHC.Float.ConversionUtils.$tcBA1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.ConversionUtils.$tcBA2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.053133505 UTC

[section ""data" . GHC.Float.ConversionUtils.$tcBA_closure" {
     GHC.Float.ConversionUtils.$tcBA_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.ConversionUtils.$trModule_closure+1;
         const GHC.Float.ConversionUtils.$tcBA1_closure+1;
         const GHC.Types.krep$*_closure;
         const 2744518186030791563;
         const 15983957619153370905;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.055312292 UTC

[section ""data" . $krep1_rqs3_closure" {
     $krep1_rqs3_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Float.ConversionUtils.$tcBA_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.057401393 UTC

[section ""data" . GHC.Float.ConversionUtils.$tc'BA1_closure" {
     GHC.Float.ConversionUtils.$tc'BA1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rqs2_closure+1;
         const $krep1_rqs3_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.059303699 UTC

[section ""cstring" . GHC.Float.ConversionUtils.$tc'BA3_bytes" {
     GHC.Float.ConversionUtils.$tc'BA3_bytes:
         I8[] [39,66,65]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.061330184 UTC

[section ""data" . GHC.Float.ConversionUtils.$tc'BA2_closure" {
     GHC.Float.ConversionUtils.$tc'BA2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.ConversionUtils.$tc'BA3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.063328474 UTC

[section ""data" . GHC.Float.ConversionUtils.$tc'BA_closure" {
     GHC.Float.ConversionUtils.$tc'BA_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.ConversionUtils.$trModule_closure+1;
         const GHC.Float.ConversionUtils.$tc'BA2_closure+1;
         const GHC.Float.ConversionUtils.$tc'BA1_closure+4;
         const 2662423355322146026;
         const 17541892848942326139;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.066058044 UTC

[section ""data" . GHC.Float.ConversionUtils.BA_closure" {
     GHC.Float.ConversionUtils.BA_closure:
         const GHC.Float.ConversionUtils.BA_info;
 },
 GHC.Float.ConversionUtils.BA_entry() //  [R2]
         { []
         }
     {offset
       cqEb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cqEf; else goto cqEe;
       cqEf: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Float.ConversionUtils.BA_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cqEe: // global
           I64[Hp - 8] = GHC.Float.ConversionUtils.BA_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.ConversionUtils.BA_info" {
     GHC.Float.ConversionUtils.BA_info:
         const GHC.Float.ConversionUtils.BA_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.070168019 UTC

[section ""cstring" . iqzy_str" {
     iqzy_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,108,111,97,116,46,67,111,110,118,101,114,115,105,111,110,85,116,105,108,115,46,66,65]
 },
 GHC.Float.ConversionUtils.BA_con_entry() //  [R1]
         { []
         }
     {offset
       cqEl: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.ConversionUtils.BA_con_info" {
     GHC.Float.ConversionUtils.BA_con_info:
         const GHC.Float.ConversionUtils.BA_con_entry;
         const 1;
         const 2;
         const iqzy_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.118620545 UTC

[section ""relreadonly" . SqvT_srt" {
     SqvT_srt:
         const GHC.Float.ConversionUtils.elimZerosInt#_closure;
         const GHC.Float.ConversionUtils.zeroCountArr_closure;
         const GHC.Float.ConversionUtils.elimZerosInteger_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.245099748 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:55:04.24845025 UTC

[section ""data" . GHC.Float.ConversionUtils.zeroCountArr_closure" {
     GHC.Float.ConversionUtils.zeroCountArr_closure:
         const GHC.Float.ConversionUtils.zeroCountArr_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.ConversionUtils.zeroCountArr_entry() //  [R1]
         { []
         }
     {offset
       cqFy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cqFz; else goto cqFA;
       cqFz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cqFA: // global
           (_cqFp::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cqFp::I64 == 0) goto cqFr; else goto cqFq;
       cqFr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cqFq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cqFp::I64;
           I64[Sp - 24] = block_cqFs_info;
           R1 = 256;
           Sp = Sp - 24;
           call stg_newByteArray#(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.ConversionUtils.zeroCountArr_info" {
     GHC.Float.ConversionUtils.zeroCountArr_info:
         const GHC.Float.ConversionUtils.zeroCountArr_entry;
         const 0;
         const 21;
 },
 _cqFs() //  [R1]
         { []
         }
     {offset
       cqFs: // global
           I8[R1 + 16] = 8 :: W8;
           _sqEu::P64 = R1;
           _sqEE::I64 = 1;
           _sqED::I64 = 0;
           _sqEC::I64 = 2;
           goto cqFJ;
       cqFJ: // global
           if (%MO_S_Ge_W64(_sqEE::I64, 256)) goto cqFW; else goto cqFX;
       cqFW: // global
           if (%MO_S_Ge_W64(_sqEC::I64, 256)) goto uqG6; else goto cqFU;
       uqG6: // global
           P64[Sp] = _sqEu::P64;
           Sp = Sp - 8;
           call _cqFD() args: 0, res: 0, upd: 0;
       cqFU: // global
           _sqEE::I64 = _sqEC::I64;
           _sqED::I64 = _sqED::I64 + 1;
           _sqEC::I64 = _sqEC::I64 << 1;
           goto cqFJ;
       cqFX: // global
           I8[(_sqEu::P64 + 16) + _sqEE::I64] = %MO_UU_Conv_W64_W8(_sqED::I64);
           _sqEE::I64 = _sqEE::I64 + _sqEC::I64;
           goto cqFJ;
     }
 },
 section ""relreadonly" . block_cqFs_info" {
     block_cqFs_info:
         const _cqFs;
         const 0;
         const 30;
 },
 _cqFD() //  []
         { []
         }
     {offset
       cqFD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cqFI; else goto cqFH;
       cqFI: // global
           HpAlloc = 16;
           I64[Sp] = block_cqFD_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cqFH: // global
           I64[Hp - 8] = GHC.Float.ConversionUtils.BA_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cqFD_info" {
     block_cqFD_info:
         const _cqFD;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.259251048 UTC

[section ""data" . GHC.Float.ConversionUtils.elimZerosInt#_closure" {
     GHC.Float.ConversionUtils.elimZerosInt#_closure:
         const GHC.Float.ConversionUtils.elimZerosInt#_info;
         const 0;
 },
 sat_sqF8_entry() //  [R1]
         { []
         }
     {offset
       cqHy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cqHz; else goto cqHA;
       cqHz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cqHA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = %MO_S_Shr_W64(I64[R1 + 16], I64[R1 + 24]);
           Sp = Sp - 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sqF8_info" {
     sat_sqF8_info:
         const sat_sqF8_entry;
         const 8589934592;
         const 20;
 },
 sat_sqFb_entry() //  [R1]
         { []
         }
     {offset
       cqHI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cqHJ; else goto cqHK;
       cqHJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cqHK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = %MO_S_Shr_W64(I64[R1 + 16], I64[R1 + 24]);
           Sp = Sp - 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sqFb_info" {
     sat_sqFb_info:
         const sat_sqFb_entry;
         const 8589934592;
         const 20;
 },
 sat_sqFf_entry() //  [R1]
         { []
         }
     {offset
       cqHV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cqHW; else goto cqHX;
       cqHW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cqHX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = %MO_S_Shr_W64(I64[R1 + 16], I64[R1 + 24]);
           Sp = Sp - 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sqFf_info" {
     sat_sqFf_info:
         const sat_sqFf_entry;
         const 8589934592;
         const 20;
 },
 sat_sqFi_entry() //  [R1]
         { []
         }
     {offset
       cqI5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cqI6; else goto cqI7;
       cqI6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cqI7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = %MO_S_Shr_W64(I64[R1 + 16], I64[R1 + 24]);
           Sp = Sp - 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sqFi_info" {
     sat_sqFi_info:
         const sat_sqFi_entry;
         const 8589934592;
         const 20;
 },
 GHC.Float.ConversionUtils.elimZerosInt#_entry() //  [R2, R3]
         { []
         }
     {offset
       cqI8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cqI9; else goto cqIa;
       cqI9: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.ConversionUtils.elimZerosInt#_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cqIa: // global
           I64[Sp - 24] = block_cqGy_info;
           R1 = GHC.Float.ConversionUtils.zeroCountArr_closure;
           I64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uqIB; else goto cqGz;
       uqIB: // global
           call _cqGy(R1) args: 0, res: 0, upd: 0;
       cqGz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.ConversionUtils.elimZerosInt#_info" {
     GHC.Float.ConversionUtils.elimZerosInt#_info:
         const GHC.Float.ConversionUtils.elimZerosInt#_entry;
         const 0;
         const 12884901902;
         const 8589934604;
         const SqIC_srt;
 },
 _cqGy() //  [R1]
         { []
         }
     {offset
       cqGy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cqId; else goto cqIc;
       cqId: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cqIc: // global
           _sqEM::I64 = I64[Sp + 8];
           _sqEN::I64 = I64[Sp + 16];
           _sqEP::P64 = P64[R1 + 7];
           _sqET::I64 = %MO_SS_Conv_W8_W64(I8[(_sqEP::P64 + 16) + _sqEM::I64 & 255]);
           if (%MO_S_Gt_W64(_sqEN::I64,
                            _sqET::I64)) goto cqIr; else goto cqIs;
       cqIr: // global
           if (%MO_S_Ge_W64(_sqET::I64, 8)) goto cqIo; else goto cqIp;
       cqIo: // global
           Hp = Hp - 32;
           I64[Sp] = _sqEN::I64 - 8;
           I64[Sp + 8] = %MO_S_Shr_W64(_sqEM::I64, 8);
           P64[Sp + 16] = _sqEP::P64;
           Sp = Sp - 8;
           call _cqH3() args: 0, res: 0, upd: 0;
       cqIp: // global
           I64[Hp - 24] = sat_sqFf_info;
           I64[Hp - 8] = _sqEM::I64;
           I64[Hp] = _sqET::I64;
           R2 = _sqEN::I64 - _sqET::I64;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cqIs: // global
           I64[Hp - 24] = sat_sqFi_info;
           I64[Hp - 8] = _sqEM::I64;
           I64[Hp] = _sqEN::I64;
           R2 = 0;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cqGy_info" {
     block_cqGy_info:
         const _cqGy;
         const 194;
         const 30;
 },
 _cqH3() //  []
         { []
         }
     {offset
       cqH3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cqIg; else goto cqIf;
       cqIg: // global
           HpAlloc = 32;
           I64[Sp] = block_cqH3_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cqIf: // global
           _sqEX::I64 = I64[Sp + 16];
           _sqEY::I64 = I64[Sp + 8];
           _sqF2::I64 = %MO_SS_Conv_W8_W64(I8[P64[Sp + 24] + (_sqEX::I64 & 255 + 16)]);
           if (%MO_S_Gt_W64(_sqEY::I64,
                            _sqF2::I64)) goto cqIl; else goto cqIm;
       cqIl: // global
           if (%MO_S_Ge_W64(_sqF2::I64, 8)) goto cqIi; else goto cqIj;
       cqIi: // global
           Hp = Hp - 32;
           I64[Sp + 16] = %MO_S_Shr_W64(_sqEX::I64, 8);
           I64[Sp + 8] = _sqEY::I64 - 8;
           call _cqH3() args: 0, res: 0, upd: 0;
       cqIj: // global
           I64[Hp - 24] = sat_sqF8_info;
           I64[Hp - 8] = _sqEX::I64;
           I64[Hp] = _sqF2::I64;
           R2 = _sqEY::I64 - _sqF2::I64;
           R1 = Hp - 24;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cqIm: // global
           I64[Hp - 24] = sat_sqFb_info;
           I64[Hp - 8] = _sqEX::I64;
           I64[Hp] = _sqEY::I64;
           R2 = 0;
           R1 = Hp - 24;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cqH3_info" {
     block_cqH3_info:
         const _cqH3;
         const 195;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.276075293 UTC

[section ""data" . GHC.Float.ConversionUtils.elimZerosInteger_closure" {
     GHC.Float.ConversionUtils.elimZerosInteger_closure:
         const GHC.Float.ConversionUtils.elimZerosInteger_info;
         const 0;
 },
 GHC.Float.ConversionUtils.elimZerosInteger_entry() //  [R2, R3]
         { []
         }
     {offset
       cqJG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cqJH; else goto cqJI;
       cqJH: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.ConversionUtils.elimZerosInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cqJI: // global
           I64[Sp - 16] = block_cqJE_info;
           R2 = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.ConversionUtils.elimZerosInteger_info" {
     GHC.Float.ConversionUtils.elimZerosInteger_info:
         const GHC.Float.ConversionUtils.elimZerosInteger_entry;
         const 0;
         const 21474836494;
         const 8589934606;
         const SqIC_srt;
 },
 _cqJE() //  [R1]
         { []
         }
     {offset
       cqJE: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Float.ConversionUtils.elimZerosInt#_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cqJE_info" {
     block_cqJE_info:
         const _cqJE;
         const 65;
         const 4294967326;
         const SqIC_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.281284904 UTC

[section ""cstring" . GHC.Float.ConversionUtils.$trModule4_bytes" {
     GHC.Float.ConversionUtils.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.283095797 UTC

[section ""data" . GHC.Float.ConversionUtils.$trModule3_closure" {
     GHC.Float.ConversionUtils.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.ConversionUtils.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.285395293 UTC

[section ""cstring" . GHC.Float.ConversionUtils.$trModule2_bytes" {
     GHC.Float.ConversionUtils.$trModule2_bytes:
         I8[] [71,72,67,46,70,108,111,97,116,46,67,111,110,118,101,114,115,105,111,110,85,116,105,108,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.287062776 UTC

[section ""data" . GHC.Float.ConversionUtils.$trModule1_closure" {
     GHC.Float.ConversionUtils.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.ConversionUtils.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.288885548 UTC

[section ""data" . GHC.Float.ConversionUtils.$trModule_closure" {
     GHC.Float.ConversionUtils.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Float.ConversionUtils.$trModule3_closure+1;
         const GHC.Float.ConversionUtils.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.29076691 UTC

[section ""data" . $krep_rqs2_closure" {
     $krep_rqs2_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcByteArray#_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.292659 UTC

[section ""cstring" . GHC.Float.ConversionUtils.$tcBA2_bytes" {
     GHC.Float.ConversionUtils.$tcBA2_bytes:
         I8[] [66,65]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.294442109 UTC

[section ""data" . GHC.Float.ConversionUtils.$tcBA1_closure" {
     GHC.Float.ConversionUtils.$tcBA1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.ConversionUtils.$tcBA2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.296845724 UTC

[section ""data" . GHC.Float.ConversionUtils.$tcBA_closure" {
     GHC.Float.ConversionUtils.$tcBA_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.ConversionUtils.$trModule_closure+1;
         const GHC.Float.ConversionUtils.$tcBA1_closure+1;
         const GHC.Types.krep$*_closure;
         const 2744518186030791563;
         const 15983957619153370905;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.298862904 UTC

[section ""data" . $krep1_rqs3_closure" {
     $krep1_rqs3_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Float.ConversionUtils.$tcBA_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.300616497 UTC

[section ""data" . GHC.Float.ConversionUtils.$tc'BA1_closure" {
     GHC.Float.ConversionUtils.$tc'BA1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rqs2_closure+1;
         const $krep1_rqs3_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.302609942 UTC

[section ""cstring" . GHC.Float.ConversionUtils.$tc'BA3_bytes" {
     GHC.Float.ConversionUtils.$tc'BA3_bytes:
         I8[] [39,66,65]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.30445748 UTC

[section ""data" . GHC.Float.ConversionUtils.$tc'BA2_closure" {
     GHC.Float.ConversionUtils.$tc'BA2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.ConversionUtils.$tc'BA3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.306314041 UTC

[section ""data" . GHC.Float.ConversionUtils.$tc'BA_closure" {
     GHC.Float.ConversionUtils.$tc'BA_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.ConversionUtils.$trModule_closure+1;
         const GHC.Float.ConversionUtils.$tc'BA2_closure+1;
         const GHC.Float.ConversionUtils.$tc'BA1_closure+4;
         const 2662423355322146026;
         const 17541892848942326139;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.309655295 UTC

[section ""data" . GHC.Float.ConversionUtils.BA_closure" {
     GHC.Float.ConversionUtils.BA_closure:
         const GHC.Float.ConversionUtils.BA_info;
 },
 GHC.Float.ConversionUtils.BA_entry() //  [R2]
         { []
         }
     {offset
       cqKe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cqKi; else goto cqKh;
       cqKi: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Float.ConversionUtils.BA_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cqKh: // global
           I64[Hp - 8] = GHC.Float.ConversionUtils.BA_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.ConversionUtils.BA_info" {
     GHC.Float.ConversionUtils.BA_info:
         const GHC.Float.ConversionUtils.BA_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.313854792 UTC

[section ""cstring" . iqKq_str" {
     iqKq_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,108,111,97,116,46,67,111,110,118,101,114,115,105,111,110,85,116,105,108,115,46,66,65]
 },
 GHC.Float.ConversionUtils.BA_con_entry() //  [R1]
         { []
         }
     {offset
       cqKp: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.ConversionUtils.BA_con_info" {
     GHC.Float.ConversionUtils.BA_con_info:
         const GHC.Float.ConversionUtils.BA_con_entry;
         const 1;
         const 2;
         const iqKq_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:04.317287317 UTC

[section ""relreadonly" . SqIC_srt" {
     SqIC_srt:
         const GHC.Float.ConversionUtils.elimZerosInt#_closure;
         const GHC.Float.ConversionUtils.zeroCountArr_closure;
         const GHC.Float.ConversionUtils.elimZerosInteger_closure;
 }]

