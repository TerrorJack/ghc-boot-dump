
==================== Raw Cmm ====================
2018-03-16 15:55:39.895777758 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:55:39.897486627 UTC

[section ""data" . GHC.Enum.minBound_closure" {
     GHC.Enum.minBound_closure:
         const GHC.Enum.minBound_info;
 },
 GHC.Enum.minBound_entry() //  [R2]
         { []
         }
     {offset
       c122u: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c122v; else goto c122w;
       c122v: // global
           R2 = R2;
           R1 = GHC.Enum.minBound_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c122w: // global
           I64[Sp - 8] = block_c122r_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u122A; else goto c122s;
       u122A: // global
           call _c122r(R1) args: 0, res: 0, upd: 0;
       c122s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.minBound_info" {
     GHC.Enum.minBound_info:
         const GHC.Enum.minBound_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c122r() //  [R1]
         { []
         }
     {offset
       c122r: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c122r_info" {
     block_c122r_info:
         const _c122r;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.903109387 UTC

[section ""data" . GHC.Enum.maxBound_closure" {
     GHC.Enum.maxBound_closure:
         const GHC.Enum.maxBound_info;
 },
 GHC.Enum.maxBound_entry() //  [R2]
         { []
         }
     {offset
       c122R: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c122S; else goto c122T;
       c122S: // global
           R2 = R2;
           R1 = GHC.Enum.maxBound_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c122T: // global
           I64[Sp - 8] = block_c122O_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u122X; else goto c122P;
       u122X: // global
           call _c122O(R1) args: 0, res: 0, upd: 0;
       c122P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.maxBound_info" {
     GHC.Enum.maxBound_info:
         const GHC.Enum.maxBound_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c122O() //  [R1]
         { []
         }
     {offset
       c122O: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c122O_info" {
     block_c122O_info:
         const _c122O;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.908414202 UTC

[section ""data" . GHC.Enum.succ_closure" {
     GHC.Enum.succ_closure:
         const GHC.Enum.succ_info;
 },
 GHC.Enum.succ_entry() //  [R2]
         { []
         }
     {offset
       c123e: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c123f; else goto c123g;
       c123f: // global
           R2 = R2;
           R1 = GHC.Enum.succ_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c123g: // global
           I64[Sp - 8] = block_c123b_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u123k; else goto c123c;
       u123k: // global
           call _c123b(R1) args: 0, res: 0, upd: 0;
       c123c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.succ_info" {
     GHC.Enum.succ_info:
         const GHC.Enum.succ_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c123b() //  [R1]
         { []
         }
     {offset
       c123b: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c123b_info" {
     block_c123b_info:
         const _c123b;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.914493968 UTC

[section ""data" . GHC.Enum.pred_closure" {
     GHC.Enum.pred_closure:
         const GHC.Enum.pred_info;
 },
 GHC.Enum.pred_entry() //  [R2]
         { []
         }
     {offset
       c123B: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c123C; else goto c123D;
       c123C: // global
           R2 = R2;
           R1 = GHC.Enum.pred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c123D: // global
           I64[Sp - 8] = block_c123y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u123H; else goto c123z;
       u123H: // global
           call _c123y(R1) args: 0, res: 0, upd: 0;
       c123z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.pred_info" {
     GHC.Enum.pred_info:
         const GHC.Enum.pred_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c123y() //  [R1]
         { []
         }
     {offset
       c123y: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c123y_info" {
     block_c123y_info:
         const _c123y;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.919679552 UTC

[section ""data" . GHC.Enum.toEnum_closure" {
     GHC.Enum.toEnum_closure:
         const GHC.Enum.toEnum_info;
 },
 GHC.Enum.toEnum_entry() //  [R2]
         { []
         }
     {offset
       c123Y: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c123Z; else goto c1240;
       c123Z: // global
           R2 = R2;
           R1 = GHC.Enum.toEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1240: // global
           I64[Sp - 8] = block_c123V_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1244; else goto c123W;
       u1244: // global
           call _c123V(R1) args: 0, res: 0, upd: 0;
       c123W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.toEnum_info" {
     GHC.Enum.toEnum_info:
         const GHC.Enum.toEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c123V() //  [R1]
         { []
         }
     {offset
       c123V: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c123V_info" {
     block_c123V_info:
         const _c123V;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.925378225 UTC

[section ""data" . GHC.Enum.fromEnum_closure" {
     GHC.Enum.fromEnum_closure:
         const GHC.Enum.fromEnum_info;
 },
 GHC.Enum.fromEnum_entry() //  [R2]
         { []
         }
     {offset
       c124l: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c124m; else goto c124n;
       c124m: // global
           R2 = R2;
           R1 = GHC.Enum.fromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c124n: // global
           I64[Sp - 8] = block_c124i_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u124r; else goto c124j;
       u124r: // global
           call _c124i(R1) args: 0, res: 0, upd: 0;
       c124j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.fromEnum_info" {
     GHC.Enum.fromEnum_info:
         const GHC.Enum.fromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c124i() //  [R1]
         { []
         }
     {offset
       c124i: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c124i_info" {
     block_c124i_info:
         const _c124i;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.930702473 UTC

[section ""data" . GHC.Enum.enumFrom_closure" {
     GHC.Enum.enumFrom_closure:
         const GHC.Enum.enumFrom_info;
 },
 GHC.Enum.enumFrom_entry() //  [R2]
         { []
         }
     {offset
       c124I: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c124J; else goto c124K;
       c124J: // global
           R2 = R2;
           R1 = GHC.Enum.enumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c124K: // global
           I64[Sp - 8] = block_c124F_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u124O; else goto c124G;
       u124O: // global
           call _c124F(R1) args: 0, res: 0, upd: 0;
       c124G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumFrom_info" {
     GHC.Enum.enumFrom_info:
         const GHC.Enum.enumFrom_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c124F() //  [R1]
         { []
         }
     {offset
       c124F: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c124F_info" {
     block_c124F_info:
         const _c124F;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.936626569 UTC

[section ""data" . GHC.Enum.enumFromThen_closure" {
     GHC.Enum.enumFromThen_closure:
         const GHC.Enum.enumFromThen_info;
 },
 GHC.Enum.enumFromThen_entry() //  [R2]
         { []
         }
     {offset
       c1255: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1256; else goto c1257;
       c1256: // global
           R2 = R2;
           R1 = GHC.Enum.enumFromThen_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1257: // global
           I64[Sp - 8] = block_c1252_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u125b; else goto c1253;
       u125b: // global
           call _c1252(R1) args: 0, res: 0, upd: 0;
       c1253: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumFromThen_info" {
     GHC.Enum.enumFromThen_info:
         const GHC.Enum.enumFromThen_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1252() //  [R1]
         { []
         }
     {offset
       c1252: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1252_info" {
     block_c1252_info:
         const _c1252;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.942584393 UTC

[section ""data" . GHC.Enum.enumFromTo_closure" {
     GHC.Enum.enumFromTo_closure:
         const GHC.Enum.enumFromTo_info;
 },
 GHC.Enum.enumFromTo_entry() //  [R2]
         { []
         }
     {offset
       c125s: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c125t; else goto c125u;
       c125t: // global
           R2 = R2;
           R1 = GHC.Enum.enumFromTo_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c125u: // global
           I64[Sp - 8] = block_c125p_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u125y; else goto c125q;
       u125y: // global
           call _c125p(R1) args: 0, res: 0, upd: 0;
       c125q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumFromTo_info" {
     GHC.Enum.enumFromTo_info:
         const GHC.Enum.enumFromTo_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c125p() //  [R1]
         { []
         }
     {offset
       c125p: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c125p_info" {
     block_c125p_info:
         const _c125p;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.947839044 UTC

[section ""data" . GHC.Enum.enumFromThenTo_closure" {
     GHC.Enum.enumFromThenTo_closure:
         const GHC.Enum.enumFromThenTo_info;
 },
 GHC.Enum.enumFromThenTo_entry() //  [R2]
         { []
         }
     {offset
       c125P: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c125Q; else goto c125R;
       c125Q: // global
           R2 = R2;
           R1 = GHC.Enum.enumFromThenTo_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c125R: // global
           I64[Sp - 8] = block_c125M_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u125V; else goto c125N;
       u125V: // global
           call _c125M(R1) args: 0, res: 0, upd: 0;
       c125N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumFromThenTo_info" {
     GHC.Enum.enumFromThenTo_info:
         const GHC.Enum.enumFromThenTo_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c125M() //  [R1]
         { []
         }
     {offset
       c125M: // global
           R1 = P64[R1 + 63];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c125M_info" {
     block_c125M_info:
         const _c125M;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.95238451 UTC

[section ""data" . GHC.Enum.$fBoundedChar_$cmaxBound_closure" {
     GHC.Enum.$fBoundedChar_$cmaxBound_closure:
         const GHC.Types.C#_con_info;
         const 1114111;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.954005681 UTC

[section ""data" . GHC.Enum.$fBoundedChar_$cminBound_closure" {
     GHC.Enum.$fBoundedChar_$cminBound_closure:
         const GHC.Types.C#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.956223775 UTC

[section ""data" . GHC.Enum.$fBoundedChar_closure" {
     GHC.Enum.$fBoundedChar_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Enum.$fBoundedChar_$cminBound_closure+1;
         const GHC.Enum.$fBoundedChar_$cmaxBound_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.958538334 UTC

[section ""data" . GHC.Enum.$fBoundedInt_closure" {
     GHC.Enum.$fBoundedInt_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Base.minInt_closure;
         const GHC.Base.maxInt_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.960195461 UTC

[section ""data" . GHC.Enum.$fBoundedWord_$cmaxBound_closure" {
     GHC.Enum.$fBoundedWord_$cmaxBound_closure:
         const GHC.Types.W#_con_info;
         const 18446744073709551615;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.961804475 UTC

[section ""data" . GHC.Enum.$fBoundedWord_$cminBound_closure" {
     GHC.Enum.$fBoundedWord_$cminBound_closure:
         const GHC.Types.W#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.963449595 UTC

[section ""data" . GHC.Enum.$fBoundedWord_closure" {
     GHC.Enum.$fBoundedWord_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Enum.$fBoundedWord_$cminBound_closure+1;
         const GHC.Enum.$fBoundedWord_$cmaxBound_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.965086321 UTC

[section ""data" . GHC.Enum.$fEnum()_many_closure" {
     GHC.Enum.$fEnum()_many_closure:
         const :_con_info;
         const GHC.Tuple.()_closure+1;
         const GHC.Enum.$fEnum()_many_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.968151948 UTC

[section ""data" . GHC.Enum.$fEnum()_$cenumFromThenTo_closure" {
     GHC.Enum.$fEnum()_$cenumFromThenTo_closure:
         const GHC.Enum.$fEnum()_$cenumFromThenTo_info;
 },
 GHC.Enum.$fEnum()_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c126k: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c126t; else goto c126u;
       c126t: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnum()_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c126u: // global
           I64[Sp - 24] = block_c126h_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u126D; else goto c126i;
       u126D: // global
           call _c126h() args: 0, res: 0, upd: 0;
       c126i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()_$cenumFromThenTo_info" {
     GHC.Enum.$fEnum()_$cenumFromThenTo_info:
         const GHC.Enum.$fEnum()_$cenumFromThenTo_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c126h() //  []
         { []
         }
     {offset
       c126h: // global
           _sUTu::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c126n_info;
           R1 = _sUTu::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u126C; else goto c126o;
       u126C: // global
           call _c126n() args: 0, res: 0, upd: 0;
       c126o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c126h_info" {
     block_c126h_info:
         const _c126h;
         const 2;
         const 30;
 },
 _c126n() //  []
         { []
         }
     {offset
       c126n: // global
           _sUTv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c126s_info;
           R1 = _sUTv::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u126E; else goto c126x;
       u126E: // global
           call _c126s() args: 0, res: 0, upd: 0;
       c126x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c126n_info" {
     block_c126n_info:
         const _c126n;
         const 1;
         const 30;
 },
 _c126s() //  []
         { []
         }
     {offset
       c126s: // global
           R1 = GHC.Enum.$fEnum()_many_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c126s_info" {
     block_c126s_info:
         const _c126s;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.976837768 UTC

[section ""data" . GHC.Enum.$fEnum()1_closure" {
     GHC.Enum.$fEnum()1_closure:
         const :_con_info;
         const GHC.Tuple.()_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.979587537 UTC

[section ""data" . GHC.Enum.$fEnum()_$cenumFromTo_closure" {
     GHC.Enum.$fEnum()_$cenumFromTo_closure:
         const GHC.Enum.$fEnum()_$cenumFromTo_info;
 },
 GHC.Enum.$fEnum()_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c1275: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1279; else goto c127a;
       c1279: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnum()_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c127a: // global
           I64[Sp - 16] = block_c1272_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u127i; else goto c1273;
       u127i: // global
           call _c1272() args: 0, res: 0, upd: 0;
       c1273: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()_$cenumFromTo_info" {
     GHC.Enum.$fEnum()_$cenumFromTo_info:
         const GHC.Enum.$fEnum()_$cenumFromTo_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1272() //  []
         { []
         }
     {offset
       c1272: // global
           _sUTA::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1278_info;
           R1 = _sUTA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u127h; else goto c127c;
       u127h: // global
           call _c1278() args: 0, res: 0, upd: 0;
       c127c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1272_info" {
     block_c1272_info:
         const _c1272;
         const 1;
         const 30;
 },
 _c1278() //  []
         { []
         }
     {offset
       c1278: // global
           R1 = GHC.Enum.$fEnum()1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1278_info" {
     block_c1278_info:
         const _c1278;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.986569651 UTC

[section ""data" . GHC.Enum.$fEnum()_$cenumFromThen_closure" {
     GHC.Enum.$fEnum()_$cenumFromThen_closure:
         const GHC.Enum.$fEnum()_$cenumFromThen_info;
 },
 GHC.Enum.$fEnum()_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c127E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c127I; else goto c127J;
       c127I: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnum()_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c127J: // global
           I64[Sp - 16] = block_c127B_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u127R; else goto c127C;
       u127R: // global
           call _c127B() args: 0, res: 0, upd: 0;
       c127C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()_$cenumFromThen_info" {
     GHC.Enum.$fEnum()_$cenumFromThen_info:
         const GHC.Enum.$fEnum()_$cenumFromThen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c127B() //  []
         { []
         }
     {offset
       c127B: // global
           _sUTE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c127H_info;
           R1 = _sUTE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u127Q; else goto c127L;
       u127Q: // global
           call _c127H() args: 0, res: 0, upd: 0;
       c127L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c127B_info" {
     block_c127B_info:
         const _c127B;
         const 1;
         const 30;
 },
 _c127H() //  []
         { []
         }
     {offset
       c127H: // global
           R1 = GHC.Enum.$fEnum()_many_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c127H_info" {
     block_c127H_info:
         const _c127H;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.993800842 UTC

[section ""data" . GHC.Enum.$fEnum()_$cenumFrom_closure" {
     GHC.Enum.$fEnum()_$cenumFrom_closure:
         const GHC.Enum.$fEnum()_$cenumFrom_info;
 },
 GHC.Enum.$fEnum()_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c128d: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c128e; else goto c128f;
       c128e: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnum()_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c128f: // global
           I64[Sp - 8] = block_c128a_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u128j; else goto c128b;
       u128j: // global
           call _c128a() args: 0, res: 0, upd: 0;
       c128b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()_$cenumFrom_info" {
     GHC.Enum.$fEnum()_$cenumFrom_info:
         const GHC.Enum.$fEnum()_$cenumFrom_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c128a() //  []
         { []
         }
     {offset
       c128a: // global
           R1 = GHC.Enum.$fEnum()1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c128a_info" {
     block_c128a_info:
         const _c128a;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:39.998294838 UTC

[section ""data" . GHC.Enum.$fEnum()2_closure" {
     GHC.Enum.$fEnum()2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.000911874 UTC

[section ""data" . GHC.Enum.$fEnum()_$cfromEnum_closure" {
     GHC.Enum.$fEnum()_$cfromEnum_closure:
         const GHC.Enum.$fEnum()_$cfromEnum_info;
 },
 GHC.Enum.$fEnum()_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c128C: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c128D; else goto c128E;
       c128D: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnum()_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c128E: // global
           I64[Sp - 8] = block_c128z_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u128I; else goto c128A;
       u128I: // global
           call _c128z() args: 0, res: 0, upd: 0;
       c128A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()_$cfromEnum_info" {
     GHC.Enum.$fEnum()_$cfromEnum_info:
         const GHC.Enum.$fEnum()_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c128z() //  []
         { []
         }
     {offset
       c128z: // global
           R1 = GHC.Enum.$fEnum()2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c128z_info" {
     block_c128z_info:
         const _c128z;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.005352916 UTC

[section ""cstring" . lvl_rUQG_bytes" {
     lvl_rUQG_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,40,41,46,116,111,69,110,117,109,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.007643759 UTC

[section ""data" . GHC.Enum.$fEnum()3_closure" {
     GHC.Enum.$fEnum()3_closure:
         const GHC.Enum.$fEnum()3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnum()3_entry() //  [R1]
         { []
         }
     {offset
       c1292: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1293; else goto c1294;
       c1293: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1294: // global
           (_c128X::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c128X::I64 == 0) goto c128Z; else goto c128Y;
       c128Z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c128Y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c128X::I64;
           I64[Sp - 24] = block_c1290_info;
           R2 = lvl_rUQG_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()3_info" {
     GHC.Enum.$fEnum()3_info:
         const GHC.Enum.$fEnum()3_entry;
         const 0;
         const 4294967317;
         const SVzM_srt;
 },
 _c1290() //  [R1]
         { []
         }
     {offset
       c1290: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1290_info" {
     block_c1290_info:
         const _c1290;
         const 0;
         const 4294967326;
         const SVzM_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.013179175 UTC

[section ""data" . GHC.Enum.$fEnum()_$ctoEnum_closure" {
     GHC.Enum.$fEnum()_$ctoEnum_closure:
         const GHC.Enum.$fEnum()_$ctoEnum_info;
         const 0;
 },
 GHC.Enum.$fEnum()_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c129p: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c129q; else goto c129r;
       c129q: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnum()_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c129r: // global
           I64[Sp - 8] = block_c129m_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u129z; else goto c129n;
       u129z: // global
           call _c129m(R1) args: 0, res: 0, upd: 0;
       c129n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()_$ctoEnum_info" {
     GHC.Enum.$fEnum()_$ctoEnum_info:
         const GHC.Enum.$fEnum()_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+8;
 },
 _c129m() //  [R1]
         { []
         }
     {offset
       c129m: // global
           if (I64[R1 + 7] == 0) goto c129y; else goto c129x;
       c129y: // global
           R1 = ()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c129x: // global
           R1 = GHC.Enum.$fEnum()3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c129m_info" {
     block_c129m_info:
         const _c129m;
         const 0;
         const 4294967326;
         const SVzM_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.018762196 UTC

[section ""cstring" . GHC.Enum.$fEnum()5_bytes" {
     GHC.Enum.$fEnum()5_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,40,41,46,112,114,101,100,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.021575242 UTC

[section ""data" . GHC.Enum.$fEnum()4_closure" {
     GHC.Enum.$fEnum()4_closure:
         const GHC.Enum.$fEnum()4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnum()4_entry() //  [R1]
         { []
         }
     {offset
       c129S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c129T; else goto c129U;
       c129T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c129U: // global
           (_c129P::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c129P::I64 == 0) goto c129R; else goto c129Q;
       c129R: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c129Q: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c129P::I64;
           R2 = GHC.Enum.$fEnum()5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()4_info" {
     GHC.Enum.$fEnum()4_info:
         const GHC.Enum.$fEnum()4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.026312051 UTC

[section ""data" . GHC.Enum.$fEnum()_$cpred_closure" {
     GHC.Enum.$fEnum()_$cpred_closure:
         const GHC.Enum.$fEnum()_$cpred_info;
         const 0;
 },
 GHC.Enum.$fEnum()_$cpred_entry() //  []
         { []
         }
     {offset
       c12a6: // global
           R2 = GHC.Enum.$fEnum()4_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()_$cpred_info" {
     GHC.Enum.$fEnum()_$cpred_info:
         const GHC.Enum.$fEnum()_$cpred_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const SVzM_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.030195602 UTC

[section ""cstring" . GHC.Enum.$fEnum()7_bytes" {
     GHC.Enum.$fEnum()7_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,40,41,46,115,117,99,99,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.033040482 UTC

[section ""data" . GHC.Enum.$fEnum()6_closure" {
     GHC.Enum.$fEnum()6_closure:
         const GHC.Enum.$fEnum()6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnum()6_entry() //  [R1]
         { []
         }
     {offset
       c12ak: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12al; else goto c12am;
       c12al: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12am: // global
           (_c12ah::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c12ah::I64 == 0) goto c12aj; else goto c12ai;
       c12aj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c12ai: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c12ah::I64;
           R2 = GHC.Enum.$fEnum()7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()6_info" {
     GHC.Enum.$fEnum()6_info:
         const GHC.Enum.$fEnum()6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.038576601 UTC

[section ""data" . GHC.Enum.$fEnum()_$csucc_closure" {
     GHC.Enum.$fEnum()_$csucc_closure:
         const GHC.Enum.$fEnum()_$csucc_info;
         const 0;
 },
 GHC.Enum.$fEnum()_$csucc_entry() //  []
         { []
         }
     {offset
       c12ay: // global
           R2 = GHC.Enum.$fEnum()6_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()_$csucc_info" {
     GHC.Enum.$fEnum()_$csucc_info:
         const GHC.Enum.$fEnum()_$csucc_entry;
         const 0;
         const 73014444046;
         const 4294967301;
         const SVzM_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.042596161 UTC

[section ""data" . GHC.Enum.$fEnum()_closure" {
     GHC.Enum.$fEnum()_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnum()_$csucc_closure+1;
         const GHC.Enum.$fEnum()_$cpred_closure+1;
         const GHC.Enum.$fEnum()_$ctoEnum_closure+1;
         const GHC.Enum.$fEnum()_$cfromEnum_closure+1;
         const GHC.Enum.$fEnum()_$cenumFrom_closure+1;
         const GHC.Enum.$fEnum()_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnum()_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnum()_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.044857678 UTC

[section ""data" . GHC.Enum.$fEnumBool4_closure" {
     GHC.Enum.$fEnumBool4_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.047463953 UTC

[section ""data" . GHC.Enum.$fEnumBool_$cfromEnum_closure" {
     GHC.Enum.$fEnumBool_$cfromEnum_closure:
         const GHC.Enum.$fEnumBool_$cfromEnum_info;
 },
 GHC.Enum.$fEnumBool_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c12aS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c12aT; else goto c12aU;
       c12aT: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c12aU: // global
           I64[Sp - 8] = block_c12aL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u12b1; else goto c12aM;
       u12b1: // global
           call _c12aL(R1) args: 0, res: 0, upd: 0;
       c12aM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_$cfromEnum_info" {
     GHC.Enum.$fEnumBool_$cfromEnum_info:
         const GHC.Enum.$fEnumBool_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c12aL() //  [R1]
         { []
         }
     {offset
       c12aL: // global
           if (R1 & 7 == 1) goto c12aP; else goto c12aQ;
       c12aP: // global
           R1 = GHC.Enum.$fEnum()2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c12aQ: // global
           R1 = GHC.Enum.$fEnumBool4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c12aL_info" {
     block_c12aL_info:
         const _c12aL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.052785733 UTC

[section ""cstring" . lvl1_rUQH_bytes" {
     lvl1_rUQH_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,66,111,111,108,46,116,111,69,110,117,109,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.055427451 UTC

[section ""data" . GHC.Enum.$fEnumBool1_closure" {
     GHC.Enum.$fEnumBool1_closure:
         const GHC.Enum.$fEnumBool1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumBool1_entry() //  [R1]
         { []
         }
     {offset
       c12bo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c12bp; else goto c12bq;
       c12bp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12bq: // global
           (_c12bj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c12bj::I64 == 0) goto c12bl; else goto c12bk;
       c12bl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c12bk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c12bj::I64;
           I64[Sp - 24] = block_c12bm_info;
           R2 = lvl1_rUQH_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool1_info" {
     GHC.Enum.$fEnumBool1_info:
         const GHC.Enum.$fEnumBool1_entry;
         const 0;
         const 4294967317;
         const SVzM_srt;
 },
 _c12bm() //  [R1]
         { []
         }
     {offset
       c12bm: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c12bm_info" {
     block_c12bm_info:
         const _c12bm;
         const 0;
         const 4294967326;
         const SVzM_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.061944026 UTC

[section ""data" . GHC.Enum.$fEnumBool_$ctoEnum_closure" {
     GHC.Enum.$fEnumBool_$ctoEnum_closure:
         const GHC.Enum.$fEnumBool_$ctoEnum_info;
         const 0;
 },
 GHC.Enum.$fEnumBool_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c12bL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c12bM; else goto c12bN;
       c12bM: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c12bN: // global
           I64[Sp - 8] = block_c12bI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u12bX; else goto c12bJ;
       u12bX: // global
           call _c12bI(R1) args: 0, res: 0, upd: 0;
       c12bJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_$ctoEnum_info" {
     GHC.Enum.$fEnumBool_$ctoEnum_info:
         const GHC.Enum.$fEnumBool_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+40;
 },
 _c12bI() //  [R1]
         { []
         }
     {offset
       c12bI: // global
           _sUTY::I64 = I64[R1 + 7];
           if (_sUTY::I64 != 0) goto u12bW; else goto c12bU;
       u12bW: // global
           if (_sUTY::I64 != 1) goto c12bT; else goto c12bV;
       c12bT: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c12bV: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c12bU: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c12bI_info" {
     block_c12bI_info:
         const _c12bI;
         const 0;
         const 4294967326;
         const SVzM_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.068222022 UTC

[section ""cstring" . lvl2_rUQI_bytes" {
     lvl2_rUQI_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,66,111,111,108,46,112,114,101,100,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.072075506 UTC

[section ""data" . GHC.Enum.$fEnumBool5_closure" {
     GHC.Enum.$fEnumBool5_closure:
         const GHC.Enum.$fEnumBool5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumBool5_entry() //  [R1]
         { []
         }
     {offset
       c12cj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c12ck; else goto c12cl;
       c12ck: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12cl: // global
           (_c12ce::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c12ce::I64 == 0) goto c12cg; else goto c12cf;
       c12cg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c12cf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c12ce::I64;
           I64[Sp - 24] = block_c12ch_info;
           R2 = lvl2_rUQI_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool5_info" {
     GHC.Enum.$fEnumBool5_info:
         const GHC.Enum.$fEnumBool5_entry;
         const 0;
         const 4294967317;
         const SVzM_srt;
 },
 _c12ch() //  [R1]
         { []
         }
     {offset
       c12ch: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c12ch_info" {
     block_c12ch_info:
         const _c12ch;
         const 0;
         const 4294967326;
         const SVzM_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.080412611 UTC

[section ""data" . GHC.Enum.$fEnumBool_$cpred_closure" {
     GHC.Enum.$fEnumBool_$cpred_closure:
         const GHC.Enum.$fEnumBool_$cpred_info;
         const 0;
 },
 GHC.Enum.$fEnumBool_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c12cK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c12cL; else goto c12cM;
       c12cL: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c12cM: // global
           I64[Sp - 8] = block_c12cD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u12cT; else goto c12cE;
       u12cT: // global
           call _c12cD(R1) args: 0, res: 0, upd: 0;
       c12cE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_$cpred_info" {
     GHC.Enum.$fEnumBool_$cpred_info:
         const GHC.Enum.$fEnumBool_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+56;
 },
 _c12cD() //  [R1]
         { []
         }
     {offset
       c12cD: // global
           if (R1 & 7 == 1) goto c12cH; else goto c12cI;
       c12cH: // global
           R1 = GHC.Enum.$fEnumBool5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c12cI: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c12cD_info" {
     block_c12cD_info:
         const _c12cD;
         const 0;
         const 4294967326;
         const SVzM_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.087518584 UTC

[section ""cstring" . lvl3_rUQJ_bytes" {
     lvl3_rUQJ_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,66,111,111,108,46,115,117,99,99,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.090845118 UTC

[section ""data" . GHC.Enum.$fEnumBool6_closure" {
     GHC.Enum.$fEnumBool6_closure:
         const GHC.Enum.$fEnumBool6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumBool6_entry() //  [R1]
         { []
         }
     {offset
       c12dg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c12dh; else goto c12di;
       c12dh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12di: // global
           (_c12db::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c12db::I64 == 0) goto c12dd; else goto c12dc;
       c12dd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c12dc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c12db::I64;
           I64[Sp - 24] = block_c12de_info;
           R2 = lvl3_rUQJ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool6_info" {
     GHC.Enum.$fEnumBool6_info:
         const GHC.Enum.$fEnumBool6_entry;
         const 0;
         const 4294967317;
         const SVzM_srt;
 },
 _c12de() //  [R1]
         { []
         }
     {offset
       c12de: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c12de_info" {
     block_c12de_info:
         const _c12de;
         const 0;
         const 4294967326;
         const SVzM_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.100406541 UTC

[section ""data" . GHC.Enum.$fEnumBool_$csucc_closure" {
     GHC.Enum.$fEnumBool_$csucc_closure:
         const GHC.Enum.$fEnumBool_$csucc_info;
         const 0;
 },
 GHC.Enum.$fEnumBool_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c12dH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c12dI; else goto c12dJ;
       c12dI: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c12dJ: // global
           I64[Sp - 8] = block_c12dA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u12dQ; else goto c12dB;
       u12dQ: // global
           call _c12dA(R1) args: 0, res: 0, upd: 0;
       c12dB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_$csucc_info" {
     GHC.Enum.$fEnumBool_$csucc_info:
         const GHC.Enum.$fEnumBool_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+72;
 },
 _c12dA() //  [R1]
         { []
         }
     {offset
       c12dA: // global
           if (R1 & 7 == 1) goto c12dE; else goto c12dF;
       c12dE: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c12dF: // global
           R1 = GHC.Enum.$fEnumBool6_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c12dA_info" {
     block_c12dA_info:
         const _c12dA;
         const 0;
         const 4294967326;
         const SVzM_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.10811046 UTC

[section ""data" . GHC.Enum.$fEnumOrdering4_closure" {
     GHC.Enum.$fEnumOrdering4_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.111862013 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_$cfromEnum_closure" {
     GHC.Enum.$fEnumOrdering_$cfromEnum_closure:
         const GHC.Enum.$fEnumOrdering_$cfromEnum_info;
 },
 GHC.Enum.$fEnumOrdering_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c12eh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c12ei; else goto c12ej;
       c12ei: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c12ej: // global
           I64[Sp - 8] = block_c12e9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u12eu; else goto c12ea;
       u12eu: // global
           call _c12e9(R1) args: 0, res: 0, upd: 0;
       c12ea: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_$cfromEnum_info" {
     GHC.Enum.$fEnumOrdering_$cfromEnum_info:
         const GHC.Enum.$fEnumOrdering_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c12e9() //  [R1]
         { []
         }
     {offset
       c12e9: // global
           _c12eg::P64 = R1 & 7;
           if (_c12eg::P64 < 3) goto u12et; else goto c12ef;
       u12et: // global
           if (_c12eg::P64 < 2) goto c12ed; else goto c12ee;
       c12ed: // global
           R1 = GHC.Enum.$fEnum()2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c12ee: // global
           R1 = GHC.Enum.$fEnumBool4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c12ef: // global
           R1 = GHC.Enum.$fEnumOrdering4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c12e9_info" {
     block_c12e9_info:
         const _c12e9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.11916724 UTC

[section ""cstring" . lvl4_rUQK_bytes" {
     lvl4_rUQK_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,79,114,100,101,114,105,110,103,46,116,111,69,110,117,109,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.122579577 UTC

[section ""data" . GHC.Enum.$fEnumOrdering5_closure" {
     GHC.Enum.$fEnumOrdering5_closure:
         const GHC.Enum.$fEnumOrdering5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumOrdering5_entry() //  [R1]
         { []
         }
     {offset
       c12eR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c12eS; else goto c12eT;
       c12eS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12eT: // global
           (_c12eM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c12eM::I64 == 0) goto c12eO; else goto c12eN;
       c12eO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c12eN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c12eM::I64;
           I64[Sp - 24] = block_c12eP_info;
           R2 = lvl4_rUQK_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering5_info" {
     GHC.Enum.$fEnumOrdering5_info:
         const GHC.Enum.$fEnumOrdering5_entry;
         const 0;
         const 4294967317;
         const SVzM_srt;
 },
 _c12eP() //  [R1]
         { []
         }
     {offset
       c12eP: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c12eP_info" {
     block_c12eP_info:
         const _c12eP;
         const 0;
         const 4294967326;
         const SVzM_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.130559548 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_$ctoEnum_closure" {
     GHC.Enum.$fEnumOrdering_$ctoEnum_closure:
         const GHC.Enum.$fEnumOrdering_$ctoEnum_info;
         const 0;
 },
 GHC.Enum.$fEnumOrdering_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c12fe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c12ff; else goto c12fg;
       c12ff: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c12fg: // global
           I64[Sp - 8] = block_c12fb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u12ft; else goto c12fc;
       u12ft: // global
           call _c12fb(R1) args: 0, res: 0, upd: 0;
       c12fc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_$ctoEnum_info" {
     GHC.Enum.$fEnumOrdering_$ctoEnum_info:
         const GHC.Enum.$fEnumOrdering_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+88;
 },
 _c12fb() //  [R1]
         { []
         }
     {offset
       c12fb: // global
           _sUUb::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_sUUb::I64, 2)) goto u12fq; else goto u12fs;
       u12fq: // global
           if (%MO_S_Lt_W64(_sUUb::I64, 1)) goto u12fr; else goto c12fo;
       u12fr: // global
           if (%MO_S_Lt_W64(_sUUb::I64, 0)) goto c12fm; else goto c12fn;
       c12fn: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c12fo: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u12fs: // global
           if (%MO_S_Ge_W64(_sUUb::I64, 3)) goto c12fm; else goto c12fp;
       c12fm: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c12fp: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c12fb_info" {
     block_c12fb_info:
         const _c12fb;
         const 0;
         const 4294967326;
         const SVzM_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.136270932 UTC

[section ""cstring" . lvl5_rUQL_bytes" {
     lvl5_rUQL_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,79,114,100,101,114,105,110,103,46,112,114,101,100,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.138901537 UTC

[section ""data" . GHC.Enum.$fEnumOrdering6_closure" {
     GHC.Enum.$fEnumOrdering6_closure:
         const GHC.Enum.$fEnumOrdering6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumOrdering6_entry() //  [R1]
         { []
         }
     {offset
       c12fQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c12fR; else goto c12fS;
       c12fR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12fS: // global
           (_c12fL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c12fL::I64 == 0) goto c12fN; else goto c12fM;
       c12fN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c12fM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c12fL::I64;
           I64[Sp - 24] = block_c12fO_info;
           R2 = lvl5_rUQL_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering6_info" {
     GHC.Enum.$fEnumOrdering6_info:
         const GHC.Enum.$fEnumOrdering6_entry;
         const 0;
         const 4294967317;
         const SVzM_srt;
 },
 _c12fO() //  [R1]
         { []
         }
     {offset
       c12fO: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c12fO_info" {
     block_c12fO_info:
         const _c12fO;
         const 0;
         const 4294967326;
         const SVzM_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.14473794 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_$cpred_closure" {
     GHC.Enum.$fEnumOrdering_$cpred_closure:
         const GHC.Enum.$fEnumOrdering_$cpred_info;
         const 0;
 },
 GHC.Enum.$fEnumOrdering_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c12gi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c12gj; else goto c12gk;
       c12gj: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c12gk: // global
           I64[Sp - 8] = block_c12ga_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u12gv; else goto c12gb;
       u12gv: // global
           call _c12ga(R1) args: 0, res: 0, upd: 0;
       c12gb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_$cpred_info" {
     GHC.Enum.$fEnumOrdering_$cpred_info:
         const GHC.Enum.$fEnumOrdering_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+104;
 },
 _c12ga() //  [R1]
         { []
         }
     {offset
       c12ga: // global
           _c12gh::P64 = R1 & 7;
           if (_c12gh::P64 < 3) goto u12gu; else goto c12gg;
       u12gu: // global
           if (_c12gh::P64 < 2) goto c12ge; else goto c12gf;
       c12ge: // global
           R1 = GHC.Enum.$fEnumOrdering6_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c12gf: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c12gg: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c12ga_info" {
     block_c12ga_info:
         const _c12ga;
         const 0;
         const 4294967326;
         const SVzM_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.149768874 UTC

[section ""cstring" . lvl6_rUQM_bytes" {
     lvl6_rUQM_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,79,114,100,101,114,105,110,103,46,115,117,99,99,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.152318068 UTC

[section ""data" . GHC.Enum.$fEnumOrdering7_closure" {
     GHC.Enum.$fEnumOrdering7_closure:
         const GHC.Enum.$fEnumOrdering7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumOrdering7_entry() //  [R1]
         { []
         }
     {offset
       c12gS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c12gT; else goto c12gU;
       c12gT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12gU: // global
           (_c12gN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c12gN::I64 == 0) goto c12gP; else goto c12gO;
       c12gP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c12gO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c12gN::I64;
           I64[Sp - 24] = block_c12gQ_info;
           R2 = lvl6_rUQM_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering7_info" {
     GHC.Enum.$fEnumOrdering7_info:
         const GHC.Enum.$fEnumOrdering7_entry;
         const 0;
         const 4294967317;
         const SVzM_srt;
 },
 _c12gQ() //  [R1]
         { []
         }
     {offset
       c12gQ: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c12gQ_info" {
     block_c12gQ_info:
         const _c12gQ;
         const 0;
         const 4294967326;
         const SVzM_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.158834749 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_$csucc_closure" {
     GHC.Enum.$fEnumOrdering_$csucc_closure:
         const GHC.Enum.$fEnumOrdering_$csucc_info;
         const 0;
 },
 GHC.Enum.$fEnumOrdering_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c12hk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c12hl; else goto c12hm;
       c12hl: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c12hm: // global
           I64[Sp - 8] = block_c12hc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u12hx; else goto c12hd;
       u12hx: // global
           call _c12hc(R1) args: 0, res: 0, upd: 0;
       c12hd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_$csucc_info" {
     GHC.Enum.$fEnumOrdering_$csucc_info:
         const GHC.Enum.$fEnumOrdering_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+120;
 },
 _c12hc() //  [R1]
         { []
         }
     {offset
       c12hc: // global
           _c12hj::P64 = R1 & 7;
           if (_c12hj::P64 < 3) goto u12hw; else goto c12hi;
       u12hw: // global
           if (_c12hj::P64 < 2) goto c12hg; else goto c12hh;
       c12hg: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c12hh: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c12hi: // global
           R1 = GHC.Enum.$fEnumOrdering7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c12hc_info" {
     block_c12hc_info:
         const _c12hc;
         const 0;
         const 4294967326;
         const SVzM_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.164676474 UTC

[section ""cstring" . lvl7_rUQN_bytes" {
     lvl7_rUQN_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,67,104,97,114,46,112,114,101,100,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.167115762 UTC

[section ""data" . GHC.Enum.$fEnumChar1_closure" {
     GHC.Enum.$fEnumChar1_closure:
         const GHC.Enum.$fEnumChar1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumChar1_entry() //  [R1]
         { []
         }
     {offset
       c12hU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c12hV; else goto c12hW;
       c12hV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12hW: // global
           (_c12hP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c12hP::I64 == 0) goto c12hR; else goto c12hQ;
       c12hR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c12hQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c12hP::I64;
           I64[Sp - 24] = block_c12hS_info;
           R2 = lvl7_rUQN_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumChar1_info" {
     GHC.Enum.$fEnumChar1_info:
         const GHC.Enum.$fEnumChar1_entry;
         const 0;
         const 4294967317;
         const SVzM_srt;
 },
 _c12hS() //  [R1]
         { []
         }
     {offset
       c12hS: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c12hS_info" {
     block_c12hS_info:
         const _c12hS;
         const 0;
         const 4294967326;
         const SVzM_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.173290236 UTC

[section ""data" . GHC.Enum.$fEnumChar_$cpred_closure" {
     GHC.Enum.$fEnumChar_$cpred_closure:
         const GHC.Enum.$fEnumChar_$cpred_info;
         const 0;
 },
 GHC.Enum.$fEnumChar_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c12ih: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c12ii; else goto c12ij;
       c12ii: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumChar_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c12ij: // global
           I64[Sp - 8] = block_c12ie_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u12iO; else goto c12if;
       u12iO: // global
           call _c12ie(R1) args: 0, res: 0, upd: 0;
       c12if: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumChar_$cpred_info" {
     GHC.Enum.$fEnumChar_$cpred_info:
         const GHC.Enum.$fEnumChar_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+136;
 },
 _c12ie() //  [R1]
         { []
         }
     {offset
       c12ie: // global
           _sUUm::I64 = I64[R1 + 7];
           if (_sUUm::I64 != 0) goto u12iL; else goto c12iH;
       u12iL: // global
           I64[Sp] = _sUUm::I64;
           call _c12ir() args: 0, res: 0, upd: 0;
       c12iH: // global
           R1 = GHC.Enum.$fEnumChar1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c12ie_info" {
     block_c12ie_info:
         const _c12ie;
         const 0;
         const 4294967326;
         const SVzM_srt+144;
 },
 _c12ir() //  []
         { []
         }
     {offset
       c12ir: // global
           Hp = Hp + 16;
           _sUUm::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c12iE; else goto c12iD;
       c12iE: // global
           HpAlloc = 16;
           I64[Sp] = block_c12iq_info;
           R1 = _sUUm::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c12iD: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sUUm::I64 - 1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c12iq() //  [R1]
         { []
         }
     {offset
       c12iq: // global
           I64[Sp] = R1;
           call _c12ir() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c12iq_info" {
     block_c12iq_info:
         const _c12iq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.180925839 UTC

[section ""cstring" . lvl8_rUQO_bytes" {
     lvl8_rUQO_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,67,104,97,114,46,115,117,99,99,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.183771732 UTC

[section ""data" . GHC.Enum.$fEnumChar2_closure" {
     GHC.Enum.$fEnumChar2_closure:
         const GHC.Enum.$fEnumChar2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumChar2_entry() //  [R1]
         { []
         }
     {offset
       c12jg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c12jh; else goto c12ji;
       c12jh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12ji: // global
           (_c12jb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c12jb::I64 == 0) goto c12jd; else goto c12jc;
       c12jd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c12jc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c12jb::I64;
           I64[Sp - 24] = block_c12je_info;
           R2 = lvl8_rUQO_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumChar2_info" {
     GHC.Enum.$fEnumChar2_info:
         const GHC.Enum.$fEnumChar2_entry;
         const 0;
         const 4294967317;
         const SVzM_srt;
 },
 _c12je() //  [R1]
         { []
         }
     {offset
       c12je: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c12je_info" {
     block_c12je_info:
         const _c12je;
         const 0;
         const 4294967326;
         const SVzM_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.190312834 UTC

[section ""data" . GHC.Enum.$fEnumChar_$csucc_closure" {
     GHC.Enum.$fEnumChar_$csucc_closure:
         const GHC.Enum.$fEnumChar_$csucc_info;
         const 0;
 },
 GHC.Enum.$fEnumChar_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c12jD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c12jE; else goto c12jF;
       c12jE: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumChar_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c12jF: // global
           I64[Sp - 8] = block_c12jA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u12ka; else goto c12jB;
       u12ka: // global
           call _c12jA(R1) args: 0, res: 0, upd: 0;
       c12jB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumChar_$csucc_info" {
     GHC.Enum.$fEnumChar_$csucc_info:
         const GHC.Enum.$fEnumChar_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+152;
 },
 _c12jA() //  [R1]
         { []
         }
     {offset
       c12jA: // global
           _sUUt::I64 = I64[R1 + 7];
           if (_sUUt::I64 != 1114111) goto u12k7; else goto c12k3;
       u12k7: // global
           I64[Sp] = _sUUt::I64;
           call _c12jN() args: 0, res: 0, upd: 0;
       c12k3: // global
           R1 = GHC.Enum.$fEnumChar2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c12jA_info" {
     block_c12jA_info:
         const _c12jA;
         const 0;
         const 4294967326;
         const SVzM_srt+160;
 },
 _c12jN() //  []
         { []
         }
     {offset
       c12jN: // global
           Hp = Hp + 16;
           _sUUt::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c12k0; else goto c12jZ;
       c12k0: // global
           HpAlloc = 16;
           I64[Sp] = block_c12jM_info;
           R1 = _sUUt::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c12jZ: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sUUt::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c12jM() //  [R1]
         { []
         }
     {offset
       c12jM: // global
           I64[Sp] = R1;
           call _c12jN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c12jM_info" {
     block_c12jM_info:
         const _c12jM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.197995074 UTC

[section ""data" . GHC.Enum.$fEnumInt_$cfromEnum_closure" {
     GHC.Enum.$fEnumInt_$cfromEnum_closure:
         const GHC.Enum.$fEnumInt_$cfromEnum_info;
 },
 GHC.Enum.$fEnumInt_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c12kx: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInt_$cfromEnum_info" {
     GHC.Enum.$fEnumInt_$cfromEnum_info:
         const GHC.Enum.$fEnumInt_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.201728884 UTC

[section ""cstring" . lvl9_rUQP_bytes" {
     lvl9_rUQP_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,112,114,101,100,123,73,110,116,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,109,105,110,66,111,117,110,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.204097788 UTC

[section ""data" . GHC.Enum.$fEnumInt1_closure" {
     GHC.Enum.$fEnumInt1_closure:
         const GHC.Enum.$fEnumInt1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumInt1_entry() //  [R1]
         { []
         }
     {offset
       c12kP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c12kQ; else goto c12kR;
       c12kQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12kR: // global
           (_c12kK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c12kK::I64 == 0) goto c12kM; else goto c12kL;
       c12kM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c12kL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c12kK::I64;
           I64[Sp - 24] = block_c12kN_info;
           R2 = lvl9_rUQP_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInt1_info" {
     GHC.Enum.$fEnumInt1_info:
         const GHC.Enum.$fEnumInt1_entry;
         const 0;
         const 4294967317;
         const SVzM_srt;
 },
 _c12kN() //  [R1]
         { []
         }
     {offset
       c12kN: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c12kN_info" {
     block_c12kN_info:
         const _c12kN;
         const 0;
         const 4294967326;
         const SVzM_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.210399233 UTC

[section ""data" . GHC.Enum.$fEnumInt_$cpred_closure" {
     GHC.Enum.$fEnumInt_$cpred_closure:
         const GHC.Enum.$fEnumInt_$cpred_info;
         const 0;
 },
 GHC.Enum.$fEnumInt_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c12lc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c12ld; else goto c12le;
       c12ld: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumInt_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c12le: // global
           I64[Sp - 8] = block_c12l9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u12lt; else goto c12la;
       u12lt: // global
           call _c12l9(R1) args: 0, res: 0, upd: 0;
       c12la: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInt_$cpred_info" {
     GHC.Enum.$fEnumInt_$cpred_info:
         const GHC.Enum.$fEnumInt_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+168;
 },
 _c12l9() //  [R1]
         { []
         }
     {offset
       c12l9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c12lj; else goto c12li;
       c12lj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c12li: // global
           _sUUB::I64 = I64[R1 + 7];
           if (_sUUB::I64 != (-9223372036854775808)) goto c12lr; else goto c12ls;
       c12lr: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sUUB::I64 - 1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c12ls: // global
           Hp = Hp - 16;
           R1 = GHC.Enum.$fEnumInt1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c12l9_info" {
     block_c12l9_info:
         const _c12l9;
         const 0;
         const 4294967326;
         const SVzM_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.215668352 UTC

[section ""cstring" . lvl10_rUQQ_bytes" {
     lvl10_rUQQ_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,115,117,99,99,123,73,110,116,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,109,97,120,66,111,117,110,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.218253192 UTC

[section ""data" . GHC.Enum.$fEnumInt2_closure" {
     GHC.Enum.$fEnumInt2_closure:
         const GHC.Enum.$fEnumInt2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumInt2_entry() //  [R1]
         { []
         }
     {offset
       c12lQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c12lR; else goto c12lS;
       c12lR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12lS: // global
           (_c12lL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c12lL::I64 == 0) goto c12lN; else goto c12lM;
       c12lN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c12lM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c12lL::I64;
           I64[Sp - 24] = block_c12lO_info;
           R2 = lvl10_rUQQ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInt2_info" {
     GHC.Enum.$fEnumInt2_info:
         const GHC.Enum.$fEnumInt2_entry;
         const 0;
         const 4294967317;
         const SVzM_srt;
 },
 _c12lO() //  [R1]
         { []
         }
     {offset
       c12lO: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c12lO_info" {
     block_c12lO_info:
         const _c12lO;
         const 0;
         const 4294967326;
         const SVzM_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.225205831 UTC

[section ""data" . GHC.Enum.$fEnumInt_$csucc_closure" {
     GHC.Enum.$fEnumInt_$csucc_closure:
         const GHC.Enum.$fEnumInt_$csucc_info;
         const 0;
 },
 GHC.Enum.$fEnumInt_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c12md: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c12me; else goto c12mf;
       c12me: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumInt_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c12mf: // global
           I64[Sp - 8] = block_c12ma_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u12mu; else goto c12mb;
       u12mu: // global
           call _c12ma(R1) args: 0, res: 0, upd: 0;
       c12mb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInt_$csucc_info" {
     GHC.Enum.$fEnumInt_$csucc_info:
         const GHC.Enum.$fEnumInt_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+184;
 },
 _c12ma() //  [R1]
         { []
         }
     {offset
       c12ma: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c12mk; else goto c12mj;
       c12mk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c12mj: // global
           _sUUH::I64 = I64[R1 + 7];
           if (_sUUH::I64 != 9223372036854775807) goto c12ms; else goto c12mt;
       c12ms: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sUUH::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c12mt: // global
           Hp = Hp - 16;
           R1 = GHC.Enum.$fEnumInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c12ma_info" {
     block_c12ma_info:
         const _c12ma;
         const 0;
         const 4294967326;
         const SVzM_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.23148096 UTC

[section ""data" . GHC.Enum.$fEnumInteger_$cfromEnum_closure" {
     GHC.Enum.$fEnumInteger_$cfromEnum_closure:
         const GHC.Enum.$fEnumInteger_$cfromEnum_info;
 },
 GHC.Enum.$fEnumInteger_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c12mO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c12mS; else goto c12mT;
       c12mS: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumInteger_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c12mT: // global
           I64[Sp - 8] = block_c12mM_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger_$cfromEnum_info" {
     GHC.Enum.$fEnumInteger_$cfromEnum_info:
         const GHC.Enum.$fEnumInteger_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c12mM() //  [R1]
         { []
         }
     {offset
       c12mM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c12mW; else goto c12mV;
       c12mW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c12mV: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c12mM_info" {
     block_c12mM_info:
         const _c12mM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.237098734 UTC

[section ""data" . GHC.Enum.$fEnumInteger_$ctoEnum_closure" {
     GHC.Enum.$fEnumInteger_$ctoEnum_closure:
         const GHC.Enum.$fEnumInteger_$ctoEnum_info;
 },
 GHC.Enum.$fEnumInteger_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c12nd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c12ne; else goto c12nf;
       c12ne: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumInteger_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c12nf: // global
           I64[Sp - 8] = block_c12na_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u12nj; else goto c12nb;
       u12nj: // global
           call _c12na(R1) args: 0, res: 0, upd: 0;
       c12nb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger_$ctoEnum_info" {
     GHC.Enum.$fEnumInteger_$ctoEnum_info:
         const GHC.Enum.$fEnumInteger_$ctoEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c12na() //  [R1]
         { []
         }
     {offset
       c12na: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c12na_info" {
     block_c12na_info:
         const _c12na;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.242137246 UTC

[section ""data" . GHC.Enum.$fBounded()_closure" {
     GHC.Enum.$fBounded()_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Tuple.()_closure+1;
         const GHC.Tuple.()_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.245695146 UTC

[section ""data" . GHC.Enum.$fBounded(,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,)_$cmaxBound_info;
 },
 sat_sUUR_entry() //  [R1]
         { []
         }
     {offset
       c12nC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12nD; else goto c12nE;
       c12nD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12nE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUUR_info" {
     sat_sUUR_info:
         const sat_sUUR_entry;
         const 1;
         const 16;
 },
 sat_sUUQ_entry() //  [R1]
         { []
         }
     {offset
       c12nJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12nK; else goto c12nL;
       c12nK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12nL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUUQ_info" {
     sat_sUUQ_info:
         const sat_sUUQ_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,)_$cmaxBound_entry() //  [R2, R3]
         { []
         }
     {offset
       c12nN: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c12nR; else goto c12nQ;
       c12nR: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,)_$cmaxBound_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c12nQ: // global
           I64[Hp - 64] = sat_sUUR_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sUUQ_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.253827324 UTC

[section ""data" . GHC.Enum.$fBounded(,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,)_$cminBound_info;
 },
 sat_sUUV_entry() //  [R1]
         { []
         }
     {offset
       c12of: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12og; else goto c12oh;
       c12og: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12oh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUUV_info" {
     sat_sUUV_info:
         const sat_sUUV_entry;
         const 1;
         const 16;
 },
 sat_sUUU_entry() //  [R1]
         { []
         }
     {offset
       c12om: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12on; else goto c12oo;
       c12on: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12oo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUUU_info" {
     sat_sUUU_info:
         const sat_sUUU_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,)_$cminBound_entry() //  [R2, R3]
         { []
         }
     {offset
       c12oq: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c12ou; else goto c12ot;
       c12ou: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,)_$cminBound_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c12ot: // global
           I64[Hp - 64] = sat_sUUV_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sUUU_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,)_$cminBound_info" {
     GHC.Enum.$fBounded(,)_$cminBound_info:
         const GHC.Enum.$fBounded(,)_$cminBound_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.261904822 UTC

[section ""data" . GHC.Enum.$fBounded(,)_closure" {
     GHC.Enum.$fBounded(,)_closure:
         const GHC.Enum.$fBounded(,)_info;
 },
 sat_sUUZ_entry() //  [R1]
         { []
         }
     {offset
       c12oS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12oT; else goto c12oU;
       c12oT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12oU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.$fBounded(,)_$cmaxBound_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUUZ_info" {
     sat_sUUZ_info:
         const sat_sUUZ_entry;
         const 2;
         const 18;
 },
 sat_sUUY_entry() //  [R1]
         { []
         }
     {offset
       c12oZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12p0; else goto c12p1;
       c12p0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12p1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.$fBounded(,)_$cminBound_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUUY_info" {
     sat_sUUY_info:
         const sat_sUUY_entry;
         const 2;
         const 18;
 },
 GHC.Enum.$fBounded(,)_entry() //  [R2, R3]
         { []
         }
     {offset
       c12p3: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c12p7; else goto c12p6;
       c12p7: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,)_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c12p6: // global
           I64[Hp - 80] = sat_sUUZ_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_sUUY_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,)_info" {
     GHC.Enum.$fBounded(,)_info:
         const GHC.Enum.$fBounded(,)_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.271139248 UTC

[section ""data" . GHC.Enum.$fBounded(,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,)_$cmaxBound_info;
 },
 sat_sUV5_entry() //  [R1]
         { []
         }
     {offset
       c12pv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12pw; else goto c12px;
       c12pw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12px: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUV5_info" {
     sat_sUV5_info:
         const sat_sUV5_entry;
         const 1;
         const 16;
 },
 sat_sUV4_entry() //  [R1]
         { []
         }
     {offset
       c12pC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12pD; else goto c12pE;
       c12pD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12pE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUV4_info" {
     sat_sUV4_info:
         const sat_sUV4_entry;
         const 1;
         const 16;
 },
 sat_sUV3_entry() //  [R1]
         { []
         }
     {offset
       c12pJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12pK; else goto c12pL;
       c12pK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12pL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUV3_info" {
     sat_sUV3_info:
         const sat_sUV3_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,)_$cmaxBound_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c12pN: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c12pR; else goto c12pQ;
       c12pR: // global
           HpAlloc = 104;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,)_$cmaxBound_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c12pQ: // global
           I64[Hp - 96] = sat_sUV5_info;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = sat_sUV4_info;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_sUV3_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.281362486 UTC

[section ""data" . GHC.Enum.$fBounded(,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,)_$cminBound_info;
 },
 sat_sUVb_entry() //  [R1]
         { []
         }
     {offset
       c12qk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12ql; else goto c12qm;
       c12ql: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12qm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVb_info" {
     sat_sUVb_info:
         const sat_sUVb_entry;
         const 1;
         const 16;
 },
 sat_sUVa_entry() //  [R1]
         { []
         }
     {offset
       c12qr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12qs; else goto c12qt;
       c12qs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12qt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVa_info" {
     sat_sUVa_info:
         const sat_sUVa_entry;
         const 1;
         const 16;
 },
 sat_sUV9_entry() //  [R1]
         { []
         }
     {offset
       c12qy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12qz; else goto c12qA;
       c12qz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12qA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUV9_info" {
     sat_sUV9_info:
         const sat_sUV9_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,)_$cminBound_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c12qC: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c12qG; else goto c12qF;
       c12qG: // global
           HpAlloc = 104;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,)_$cminBound_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c12qF: // global
           I64[Hp - 96] = sat_sUVb_info;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = sat_sUVa_info;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_sUV9_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,)_$cminBound_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.291687746 UTC

[section ""data" . GHC.Enum.$fBounded(,,)_closure" {
     GHC.Enum.$fBounded(,,)_closure:
         const GHC.Enum.$fBounded(,,)_info;
 },
 sat_sUVg_entry() //  [R1]
         { []
         }
     {offset
       c12r9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12ra; else goto c12rb;
       c12ra: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12rb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.$fBounded(,,)_$cmaxBound_entry(R4,
                                                        R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVg_info" {
     sat_sUVg_info:
         const sat_sUVg_entry;
         const 3;
         const 15;
 },
 sat_sUVf_entry() //  [R1]
         { []
         }
     {offset
       c12rg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12rh; else goto c12ri;
       c12rh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12ri: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.$fBounded(,,)_$cminBound_entry(R4,
                                                        R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVf_info" {
     sat_sUVf_info:
         const sat_sUVf_entry;
         const 3;
         const 15;
 },
 GHC.Enum.$fBounded(,,)_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c12rk: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c12ro; else goto c12rn;
       c12ro: // global
           HpAlloc = 104;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,)_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c12rn: // global
           I64[Hp - 96] = sat_sUVg_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = sat_sUVf_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,)_info" {
     GHC.Enum.$fBounded(,,)_info:
         const GHC.Enum.$fBounded(,,)_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.300563583 UTC

[section ""data" . GHC.Enum.$fBounded(,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,)_$cmaxBound_info;
 },
 sat_sUVo_entry() //  [R1]
         { []
         }
     {offset
       c12rM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12rN; else goto c12rO;
       c12rN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12rO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVo_info" {
     sat_sUVo_info:
         const sat_sUVo_entry;
         const 1;
         const 16;
 },
 sat_sUVn_entry() //  [R1]
         { []
         }
     {offset
       c12rT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12rU; else goto c12rV;
       c12rU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12rV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVn_info" {
     sat_sUVn_info:
         const sat_sUVn_entry;
         const 1;
         const 16;
 },
 sat_sUVm_entry() //  [R1]
         { []
         }
     {offset
       c12s0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12s1; else goto c12s2;
       c12s1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12s2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVm_info" {
     sat_sUVm_info:
         const sat_sUVm_entry;
         const 1;
         const 16;
 },
 sat_sUVl_entry() //  [R1]
         { []
         }
     {offset
       c12s7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12s8; else goto c12s9;
       c12s8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12s9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVl_info" {
     sat_sUVl_info:
         const sat_sUVl_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,)_$cmaxBound_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c12sb: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c12sf; else goto c12se;
       c12sf: // global
           HpAlloc = 136;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,,)_$cmaxBound_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c12se: // global
           I64[Hp - 128] = sat_sUVo_info;
           P64[Hp - 112] = R5;
           I64[Hp - 104] = sat_sUVn_info;
           P64[Hp - 88] = R4;
           I64[Hp - 80] = sat_sUVm_info;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_sUVl_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.313541631 UTC

[section ""data" . GHC.Enum.$fBounded(,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,)_$cminBound_info;
 },
 sat_sUVw_entry() //  [R1]
         { []
         }
     {offset
       c12sN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12sO; else goto c12sP;
       c12sO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12sP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVw_info" {
     sat_sUVw_info:
         const sat_sUVw_entry;
         const 1;
         const 16;
 },
 sat_sUVv_entry() //  [R1]
         { []
         }
     {offset
       c12sU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12sV; else goto c12sW;
       c12sV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12sW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVv_info" {
     sat_sUVv_info:
         const sat_sUVv_entry;
         const 1;
         const 16;
 },
 sat_sUVu_entry() //  [R1]
         { []
         }
     {offset
       c12t1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12t2; else goto c12t3;
       c12t2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12t3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVu_info" {
     sat_sUVu_info:
         const sat_sUVu_entry;
         const 1;
         const 16;
 },
 sat_sUVt_entry() //  [R1]
         { []
         }
     {offset
       c12t8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12t9; else goto c12ta;
       c12t9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12ta: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVt_info" {
     sat_sUVt_info:
         const sat_sUVt_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,)_$cminBound_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c12tc: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c12tg; else goto c12tf;
       c12tg: // global
           HpAlloc = 136;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,,)_$cminBound_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c12tf: // global
           I64[Hp - 128] = sat_sUVw_info;
           P64[Hp - 112] = R5;
           I64[Hp - 104] = sat_sUVv_info;
           P64[Hp - 88] = R4;
           I64[Hp - 80] = sat_sUVu_info;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_sUVt_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.325021377 UTC

[section ""data" . GHC.Enum.$fBounded(,,,)_closure" {
     GHC.Enum.$fBounded(,,,)_closure:
         const GHC.Enum.$fBounded(,,,)_info;
 },
 sat_sUVC_entry() //  [R1]
         { []
         }
     {offset
       c12tO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12tP; else goto c12tQ;
       c12tP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12tQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.$fBounded(,,,)_$cmaxBound_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVC_info" {
     sat_sUVC_info:
         const sat_sUVC_entry;
         const 4;
         const 15;
 },
 sat_sUVB_entry() //  [R1]
         { []
         }
     {offset
       c12tV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12tW; else goto c12tX;
       c12tW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12tX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.$fBounded(,,,)_$cminBound_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVB_info" {
     sat_sUVB_info:
         const sat_sUVB_entry;
         const 4;
         const 15;
 },
 GHC.Enum.$fBounded(,,,)_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c12tZ: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c12u3; else goto c12u2;
       c12u3: // global
           HpAlloc = 120;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,,)_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c12u2: // global
           I64[Hp - 112] = sat_sUVC_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           I64[Hp - 64] = sat_sUVB_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 112;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,)_info" {
     GHC.Enum.$fBounded(,,,)_info:
         const GHC.Enum.$fBounded(,,,)_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.335019293 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,)_$cmaxBound_info;
 },
 sat_sUVM_entry() //  [R1]
         { []
         }
     {offset
       c12ur: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12us; else goto c12ut;
       c12us: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12ut: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVM_info" {
     sat_sUVM_info:
         const sat_sUVM_entry;
         const 1;
         const 16;
 },
 sat_sUVL_entry() //  [R1]
         { []
         }
     {offset
       c12uy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12uz; else goto c12uA;
       c12uz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12uA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVL_info" {
     sat_sUVL_info:
         const sat_sUVL_entry;
         const 1;
         const 16;
 },
 sat_sUVK_entry() //  [R1]
         { []
         }
     {offset
       c12uF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12uG; else goto c12uH;
       c12uG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12uH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVK_info" {
     sat_sUVK_info:
         const sat_sUVK_entry;
         const 1;
         const 16;
 },
 sat_sUVJ_entry() //  [R1]
         { []
         }
     {offset
       c12uM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12uN; else goto c12uO;
       c12uN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12uO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVJ_info" {
     sat_sUVJ_info:
         const sat_sUVJ_entry;
         const 1;
         const 16;
 },
 sat_sUVI_entry() //  [R1]
         { []
         }
     {offset
       c12uT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12uU; else goto c12uV;
       c12uU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12uV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVI_info" {
     sat_sUVI_info:
         const sat_sUVI_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,)_$cmaxBound_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c12uX: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c12v1; else goto c12v0;
       c12v1: // global
           HpAlloc = 168;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,,,)_$cmaxBound_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c12v0: // global
           I64[Hp - 160] = sat_sUVM_info;
           P64[Hp - 144] = R6;
           I64[Hp - 136] = sat_sUVL_info;
           P64[Hp - 120] = R5;
           I64[Hp - 112] = sat_sUVK_info;
           P64[Hp - 96] = R4;
           I64[Hp - 88] = sat_sUVJ_info;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = sat_sUVI_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = (,,,,)_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 112;
           P64[Hp - 8] = Hp - 136;
           P64[Hp] = Hp - 160;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.349209286 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,)_$cminBound_info;
 },
 sat_sUVW_entry() //  [R1]
         { []
         }
     {offset
       c12vE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12vF; else goto c12vG;
       c12vF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12vG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVW_info" {
     sat_sUVW_info:
         const sat_sUVW_entry;
         const 1;
         const 16;
 },
 sat_sUVV_entry() //  [R1]
         { []
         }
     {offset
       c12vL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12vM; else goto c12vN;
       c12vM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12vN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVV_info" {
     sat_sUVV_info:
         const sat_sUVV_entry;
         const 1;
         const 16;
 },
 sat_sUVU_entry() //  [R1]
         { []
         }
     {offset
       c12vS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12vT; else goto c12vU;
       c12vT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12vU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVU_info" {
     sat_sUVU_info:
         const sat_sUVU_entry;
         const 1;
         const 16;
 },
 sat_sUVT_entry() //  [R1]
         { []
         }
     {offset
       c12vZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12w0; else goto c12w1;
       c12w0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12w1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVT_info" {
     sat_sUVT_info:
         const sat_sUVT_entry;
         const 1;
         const 16;
 },
 sat_sUVS_entry() //  [R1]
         { []
         }
     {offset
       c12w6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12w7; else goto c12w8;
       c12w7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12w8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUVS_info" {
     sat_sUVS_info:
         const sat_sUVS_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,)_$cminBound_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c12wa: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c12we; else goto c12wd;
       c12we: // global
           HpAlloc = 168;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,,,)_$cminBound_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c12wd: // global
           I64[Hp - 160] = sat_sUVW_info;
           P64[Hp - 144] = R6;
           I64[Hp - 136] = sat_sUVV_info;
           P64[Hp - 120] = R5;
           I64[Hp - 112] = sat_sUVU_info;
           P64[Hp - 96] = R4;
           I64[Hp - 88] = sat_sUVT_info;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = sat_sUVS_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = (,,,,)_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 112;
           P64[Hp - 8] = Hp - 136;
           P64[Hp] = Hp - 160;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.3632335 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,)_info;
 },
 sat_sUW3_entry() //  [R1]
         { []
         }
     {offset
       c12wR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12wS; else goto c12wT;
       c12wS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12wT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.$fBounded(,,,,)_$cmaxBound_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUW3_info" {
     sat_sUW3_info:
         const sat_sUW3_entry;
         const 5;
         const 15;
 },
 sat_sUW2_entry() //  [R1]
         { []
         }
     {offset
       c12wY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12wZ; else goto c12x0;
       c12wZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12x0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.$fBounded(,,,,)_$cminBound_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUW2_info" {
     sat_sUW2_info:
         const sat_sUW2_entry;
         const 5;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c12x2: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c12x6; else goto c12x5;
       c12x6: // global
           HpAlloc = 136;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,,,)_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c12x5: // global
           I64[Hp - 128] = sat_sUW3_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           I64[Hp - 72] = sat_sUW2_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = R6;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 128;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,)_info" {
     GHC.Enum.$fBounded(,,,,)_info:
         const GHC.Enum.$fBounded(,,,,)_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.373301514 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,)_$cmaxBound_info;
 },
 sat_sUWf_entry() //  [R1]
         { []
         }
     {offset
       c12xu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12xv; else goto c12xw;
       c12xv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12xw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWf_info" {
     sat_sUWf_info:
         const sat_sUWf_entry;
         const 1;
         const 16;
 },
 sat_sUWe_entry() //  [R1]
         { []
         }
     {offset
       c12xB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12xC; else goto c12xD;
       c12xC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12xD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWe_info" {
     sat_sUWe_info:
         const sat_sUWe_entry;
         const 1;
         const 16;
 },
 sat_sUWd_entry() //  [R1]
         { []
         }
     {offset
       c12xI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12xJ; else goto c12xK;
       c12xJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12xK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWd_info" {
     sat_sUWd_info:
         const sat_sUWd_entry;
         const 1;
         const 16;
 },
 sat_sUWc_entry() //  [R1]
         { []
         }
     {offset
       c12xP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12xQ; else goto c12xR;
       c12xQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12xR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWc_info" {
     sat_sUWc_info:
         const sat_sUWc_entry;
         const 1;
         const 16;
 },
 sat_sUWb_entry() //  [R1]
         { []
         }
     {offset
       c12xW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12xX; else goto c12xY;
       c12xX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12xY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWb_info" {
     sat_sUWb_info:
         const sat_sUWb_entry;
         const 1;
         const 16;
 },
 sat_sUWa_entry() //  [R1]
         { []
         }
     {offset
       c12y3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12y4; else goto c12y5;
       c12y4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12y5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWa_info" {
     sat_sUWa_info:
         const sat_sUWa_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,)_$cmaxBound_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c12y7: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c12yb; else goto c12ya;
       c12yb: // global
           HpAlloc = 200;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,,,,)_$cmaxBound_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c12ya: // global
           I64[Hp - 192] = sat_sUWf_info;
           P64[Hp - 176] = P64[Sp];
           I64[Hp - 168] = sat_sUWe_info;
           P64[Hp - 152] = R6;
           I64[Hp - 144] = sat_sUWd_info;
           P64[Hp - 128] = R5;
           I64[Hp - 120] = sat_sUWc_info;
           P64[Hp - 104] = R4;
           I64[Hp - 96] = sat_sUWb_info;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = sat_sUWa_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = (,,,,,)_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = Hp - 96;
           P64[Hp - 24] = Hp - 120;
           P64[Hp - 16] = Hp - 144;
           P64[Hp - 8] = Hp - 168;
           P64[Hp] = Hp - 192;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.389901029 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,)_$cminBound_info;
 },
 sat_sUWr_entry() //  [R1]
         { []
         }
     {offset
       c12yU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12yV; else goto c12yW;
       c12yV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12yW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWr_info" {
     sat_sUWr_info:
         const sat_sUWr_entry;
         const 1;
         const 16;
 },
 sat_sUWq_entry() //  [R1]
         { []
         }
     {offset
       c12z1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12z2; else goto c12z3;
       c12z2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12z3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWq_info" {
     sat_sUWq_info:
         const sat_sUWq_entry;
         const 1;
         const 16;
 },
 sat_sUWp_entry() //  [R1]
         { []
         }
     {offset
       c12z8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12z9; else goto c12za;
       c12z9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12za: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWp_info" {
     sat_sUWp_info:
         const sat_sUWp_entry;
         const 1;
         const 16;
 },
 sat_sUWo_entry() //  [R1]
         { []
         }
     {offset
       c12zf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12zg; else goto c12zh;
       c12zg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12zh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWo_info" {
     sat_sUWo_info:
         const sat_sUWo_entry;
         const 1;
         const 16;
 },
 sat_sUWn_entry() //  [R1]
         { []
         }
     {offset
       c12zm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12zn; else goto c12zo;
       c12zn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12zo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWn_info" {
     sat_sUWn_info:
         const sat_sUWn_entry;
         const 1;
         const 16;
 },
 sat_sUWm_entry() //  [R1]
         { []
         }
     {offset
       c12zt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12zu; else goto c12zv;
       c12zu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12zv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWm_info" {
     sat_sUWm_info:
         const sat_sUWm_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,)_$cminBound_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c12zx: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c12zB; else goto c12zA;
       c12zB: // global
           HpAlloc = 200;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,,,,)_$cminBound_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c12zA: // global
           I64[Hp - 192] = sat_sUWr_info;
           P64[Hp - 176] = P64[Sp];
           I64[Hp - 168] = sat_sUWq_info;
           P64[Hp - 152] = R6;
           I64[Hp - 144] = sat_sUWp_info;
           P64[Hp - 128] = R5;
           I64[Hp - 120] = sat_sUWo_info;
           P64[Hp - 104] = R4;
           I64[Hp - 96] = sat_sUWn_info;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = sat_sUWm_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = (,,,,,)_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = Hp - 96;
           P64[Hp - 24] = Hp - 120;
           P64[Hp - 16] = Hp - 144;
           P64[Hp - 8] = Hp - 168;
           P64[Hp] = Hp - 192;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.40535252 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,)_info;
 },
 sat_sUWz_entry() //  [R1]
         { []
         }
     {offset
       c12Ak: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c12Al; else goto c12Am;
       c12Al: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Am: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 24;
           call GHC.Enum.$fBounded(,,,,,)_$cmaxBound_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 32, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWz_info" {
     sat_sUWz_info:
         const sat_sUWz_entry;
         const 6;
         const 15;
 },
 sat_sUWy_entry() //  [R1]
         { []
         }
     {offset
       c12Ar: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c12As; else goto c12At;
       c12As: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12At: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 24;
           call GHC.Enum.$fBounded(,,,,,)_$cminBound_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 32, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWy_info" {
     sat_sUWy_info:
         const sat_sUWy_entry;
         const 6;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c12Av: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c12Az; else goto c12Ay;
       c12Az: // global
           HpAlloc = 152;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,,,,)_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c12Ay: // global
           I64[Hp - 144] = sat_sUWz_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           P64[Hp - 104] = R5;
           P64[Hp - 96] = R6;
           _sUWx::P64 = P64[Sp];
           P64[Hp - 88] = _sUWx::P64;
           I64[Hp - 80] = sat_sUWy_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = _sUWx::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 144;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,)_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.415939411 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_slow() //  [R1]
         { []
         }
     {offset
       c12AS: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2,
                                                            R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_sUWN_entry() //  [R1]
         { []
         }
     {offset
       c12B0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12B1; else goto c12B2;
       c12B1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12B2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWN_info" {
     sat_sUWN_info:
         const sat_sUWN_entry;
         const 1;
         const 16;
 },
 sat_sUWM_entry() //  [R1]
         { []
         }
     {offset
       c12B7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12B8; else goto c12B9;
       c12B8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12B9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWM_info" {
     sat_sUWM_info:
         const sat_sUWM_entry;
         const 1;
         const 16;
 },
 sat_sUWL_entry() //  [R1]
         { []
         }
     {offset
       c12Be: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Bf; else goto c12Bg;
       c12Bf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Bg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWL_info" {
     sat_sUWL_info:
         const sat_sUWL_entry;
         const 1;
         const 16;
 },
 sat_sUWK_entry() //  [R1]
         { []
         }
     {offset
       c12Bl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Bm; else goto c12Bn;
       c12Bm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Bn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWK_info" {
     sat_sUWK_info:
         const sat_sUWK_entry;
         const 1;
         const 16;
 },
 sat_sUWJ_entry() //  [R1]
         { []
         }
     {offset
       c12Bs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Bt; else goto c12Bu;
       c12Bt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Bu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWJ_info" {
     sat_sUWJ_info:
         const sat_sUWJ_entry;
         const 1;
         const 16;
 },
 sat_sUWI_entry() //  [R1]
         { []
         }
     {offset
       c12Bz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12BA; else goto c12BB;
       c12BA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12BB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWI_info" {
     sat_sUWI_info:
         const sat_sUWI_entry;
         const 1;
         const 16;
 },
 sat_sUWH_entry() //  [R1]
         { []
         }
     {offset
       c12BG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12BH; else goto c12BI;
       c12BH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12BI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWH_info" {
     sat_sUWH_info:
         const sat_sUWH_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       c12BK: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c12BO; else goto c12BN;
       c12BO: // global
           HpAlloc = 232;
           R1 = GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c12BN: // global
           I64[Hp - 224] = sat_sUWN_info;
           P64[Hp - 208] = P64[Sp + 8];
           I64[Hp - 200] = sat_sUWM_info;
           P64[Hp - 184] = P64[Sp];
           I64[Hp - 176] = sat_sUWL_info;
           P64[Hp - 160] = R6;
           I64[Hp - 152] = sat_sUWK_info;
           P64[Hp - 136] = R5;
           I64[Hp - 128] = sat_sUWJ_info;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = sat_sUWI_info;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_sUWH_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = (,,,,,,)_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.435523836 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,,)_$cminBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,)_$cminBound_slow() //  [R1]
         { []
         }
     {offset
       c12Cy: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,)_$cminBound_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2,
                                                            R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_sUX1_entry() //  [R1]
         { []
         }
     {offset
       c12CG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12CH; else goto c12CI;
       c12CH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12CI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUX1_info" {
     sat_sUX1_info:
         const sat_sUX1_entry;
         const 1;
         const 16;
 },
 sat_sUX0_entry() //  [R1]
         { []
         }
     {offset
       c12CN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12CO; else goto c12CP;
       c12CO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12CP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUX0_info" {
     sat_sUX0_info:
         const sat_sUX0_entry;
         const 1;
         const 16;
 },
 sat_sUWZ_entry() //  [R1]
         { []
         }
     {offset
       c12CU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12CV; else goto c12CW;
       c12CV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12CW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWZ_info" {
     sat_sUWZ_info:
         const sat_sUWZ_entry;
         const 1;
         const 16;
 },
 sat_sUWY_entry() //  [R1]
         { []
         }
     {offset
       c12D1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12D2; else goto c12D3;
       c12D2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12D3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWY_info" {
     sat_sUWY_info:
         const sat_sUWY_entry;
         const 1;
         const 16;
 },
 sat_sUWX_entry() //  [R1]
         { []
         }
     {offset
       c12D8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12D9; else goto c12Da;
       c12D9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Da: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWX_info" {
     sat_sUWX_info:
         const sat_sUWX_entry;
         const 1;
         const 16;
 },
 sat_sUWW_entry() //  [R1]
         { []
         }
     {offset
       c12Df: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Dg; else goto c12Dh;
       c12Dg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Dh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWW_info" {
     sat_sUWW_info:
         const sat_sUWW_entry;
         const 1;
         const 16;
 },
 sat_sUWV_entry() //  [R1]
         { []
         }
     {offset
       c12Dm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Dn; else goto c12Do;
       c12Dn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Do: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUWV_info" {
     sat_sUWV_info:
         const sat_sUWV_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,)_$cminBound_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       c12Dq: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c12Du; else goto c12Dt;
       c12Du: // global
           HpAlloc = 232;
           R1 = GHC.Enum.$fBounded(,,,,,,)_$cminBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c12Dt: // global
           I64[Hp - 224] = sat_sUX1_info;
           P64[Hp - 208] = P64[Sp + 8];
           I64[Hp - 200] = sat_sUX0_info;
           P64[Hp - 184] = P64[Sp];
           I64[Hp - 176] = sat_sUWZ_info;
           P64[Hp - 160] = R6;
           I64[Hp - 152] = sat_sUWY_info;
           P64[Hp - 136] = R5;
           I64[Hp - 128] = sat_sUWX_info;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = sat_sUWW_info;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_sUWV_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = (,,,,,,)_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.Enum.$fBounded(,,,,,,)_$cminBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.453991879 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,,)_info;
 },
 GHC.Enum.$fBounded(,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c12Ee: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,)_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_sUXa_entry() //  [R1]
         { []
         }
     {offset
       c12Em: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c12En; else goto c12Eo;
       c12En: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Eo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 56];
           P64[Sp - 24] = P64[R1 + 64];
           Sp = Sp - 32;
           call GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUXa_info" {
     sat_sUXa_info:
         const sat_sUXa_entry;
         const 7;
         const 15;
 },
 sat_sUX9_entry() //  [R1]
         { []
         }
     {offset
       c12Et: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c12Eu; else goto c12Ev;
       c12Eu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Ev: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 56];
           P64[Sp - 24] = P64[R1 + 64];
           Sp = Sp - 32;
           call GHC.Enum.$fBounded(,,,,,,)_$cminBound_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUX9_info" {
     sat_sUX9_info:
         const sat_sUX9_entry;
         const 7;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c12Ex: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c12EB; else goto c12EA;
       c12EB: // global
           HpAlloc = 168;
           R1 = GHC.Enum.$fBounded(,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c12EA: // global
           I64[Hp - 160] = sat_sUXa_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           P64[Hp - 128] = R4;
           P64[Hp - 120] = R5;
           P64[Hp - 112] = R6;
           _sUX7::P64 = P64[Sp];
           P64[Hp - 104] = _sUX7::P64;
           _sUX8::P64 = P64[Sp + 8];
           P64[Hp - 96] = _sUX8::P64;
           I64[Hp - 88] = sat_sUX9_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = _sUX7::P64;
           P64[Hp - 24] = _sUX8::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 88;
           P64[Hp] = Hp - 160;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,,)_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.Enum.$fBounded(,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.466399396 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_slow() //  [R1]
         { []
         }
     {offset
       c12EY: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sUXq_entry() //  [R1]
         { []
         }
     {offset
       c12F6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12F7; else goto c12F8;
       c12F7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12F8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUXq_info" {
     sat_sUXq_info:
         const sat_sUXq_entry;
         const 1;
         const 16;
 },
 sat_sUXp_entry() //  [R1]
         { []
         }
     {offset
       c12Fd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Fe; else goto c12Ff;
       c12Fe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Ff: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUXp_info" {
     sat_sUXp_info:
         const sat_sUXp_entry;
         const 1;
         const 16;
 },
 sat_sUXo_entry() //  [R1]
         { []
         }
     {offset
       c12Fk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Fl; else goto c12Fm;
       c12Fl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Fm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUXo_info" {
     sat_sUXo_info:
         const sat_sUXo_entry;
         const 1;
         const 16;
 },
 sat_sUXn_entry() //  [R1]
         { []
         }
     {offset
       c12Fr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Fs; else goto c12Ft;
       c12Fs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Ft: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUXn_info" {
     sat_sUXn_info:
         const sat_sUXn_entry;
         const 1;
         const 16;
 },
 sat_sUXm_entry() //  [R1]
         { []
         }
     {offset
       c12Fy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Fz; else goto c12FA;
       c12Fz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12FA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUXm_info" {
     sat_sUXm_info:
         const sat_sUXm_entry;
         const 1;
         const 16;
 },
 sat_sUXl_entry() //  [R1]
         { []
         }
     {offset
       c12FF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12FG; else goto c12FH;
       c12FG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12FH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUXl_info" {
     sat_sUXl_info:
         const sat_sUXl_entry;
         const 1;
         const 16;
 },
 sat_sUXk_entry() //  [R1]
         { []
         }
     {offset
       c12FM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12FN; else goto c12FO;
       c12FN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12FO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUXk_info" {
     sat_sUXk_info:
         const sat_sUXk_entry;
         const 1;
         const 16;
 },
 sat_sUXj_entry() //  [R1]
         { []
         }
     {offset
       c12FT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12FU; else goto c12FV;
       c12FU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12FV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUXj_info" {
     sat_sUXj_info:
         const sat_sUXj_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       c12FX: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c12G1; else goto c12G0;
       c12G1: // global
           HpAlloc = 264;
           R1 = GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c12G0: // global
           I64[Hp - 256] = sat_sUXq_info;
           P64[Hp - 240] = P64[Sp + 16];
           I64[Hp - 232] = sat_sUXp_info;
           P64[Hp - 216] = P64[Sp + 8];
           I64[Hp - 208] = sat_sUXo_info;
           P64[Hp - 192] = P64[Sp];
           I64[Hp - 184] = sat_sUXn_info;
           P64[Hp - 168] = R6;
           I64[Hp - 160] = sat_sUXm_info;
           P64[Hp - 144] = R5;
           I64[Hp - 136] = sat_sUXl_info;
           P64[Hp - 120] = R4;
           I64[Hp - 112] = sat_sUXk_info;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_sUXj_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = (,,,,,,,)_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 34359738368;
         const 0;
         const 8;
         const GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.48794245 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,)_$cminBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,)_$cminBound_slow() //  [R1]
         { []
         }
     {offset
       c12GR: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,)_$cminBound_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sUXG_entry() //  [R1]
         { []
         }
     {offset
       c12GZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12H0; else goto c12H1;
       c12H0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12H1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUXG_info" {
     sat_sUXG_info:
         const sat_sUXG_entry;
         const 1;
         const 16;
 },
 sat_sUXF_entry() //  [R1]
         { []
         }
     {offset
       c12H6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12H7; else goto c12H8;
       c12H7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12H8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUXF_info" {
     sat_sUXF_info:
         const sat_sUXF_entry;
         const 1;
         const 16;
 },
 sat_sUXE_entry() //  [R1]
         { []
         }
     {offset
       c12Hd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12He; else goto c12Hf;
       c12He: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Hf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUXE_info" {
     sat_sUXE_info:
         const sat_sUXE_entry;
         const 1;
         const 16;
 },
 sat_sUXD_entry() //  [R1]
         { []
         }
     {offset
       c12Hk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Hl; else goto c12Hm;
       c12Hl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Hm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUXD_info" {
     sat_sUXD_info:
         const sat_sUXD_entry;
         const 1;
         const 16;
 },
 sat_sUXC_entry() //  [R1]
         { []
         }
     {offset
       c12Hr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Hs; else goto c12Ht;
       c12Hs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Ht: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUXC_info" {
     sat_sUXC_info:
         const sat_sUXC_entry;
         const 1;
         const 16;
 },
 sat_sUXB_entry() //  [R1]
         { []
         }
     {offset
       c12Hy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Hz; else goto c12HA;
       c12Hz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12HA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUXB_info" {
     sat_sUXB_info:
         const sat_sUXB_entry;
         const 1;
         const 16;
 },
 sat_sUXA_entry() //  [R1]
         { []
         }
     {offset
       c12HF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12HG; else goto c12HH;
       c12HG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12HH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUXA_info" {
     sat_sUXA_info:
         const sat_sUXA_entry;
         const 1;
         const 16;
 },
 sat_sUXz_entry() //  [R1]
         { []
         }
     {offset
       c12HM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12HN; else goto c12HO;
       c12HN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12HO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUXz_info" {
     sat_sUXz_info:
         const sat_sUXz_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,)_$cminBound_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       c12HQ: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c12HU; else goto c12HT;
       c12HU: // global
           HpAlloc = 264;
           R1 = GHC.Enum.$fBounded(,,,,,,,)_$cminBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c12HT: // global
           I64[Hp - 256] = sat_sUXG_info;
           P64[Hp - 240] = P64[Sp + 16];
           I64[Hp - 232] = sat_sUXF_info;
           P64[Hp - 216] = P64[Sp + 8];
           I64[Hp - 208] = sat_sUXE_info;
           P64[Hp - 192] = P64[Sp];
           I64[Hp - 184] = sat_sUXD_info;
           P64[Hp - 168] = R6;
           I64[Hp - 160] = sat_sUXC_info;
           P64[Hp - 144] = R5;
           I64[Hp - 136] = sat_sUXB_info;
           P64[Hp - 120] = R4;
           I64[Hp - 112] = sat_sUXA_info;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_sUXz_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = (,,,,,,,)_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 34359738368;
         const 0;
         const 8;
         const GHC.Enum.$fBounded(,,,,,,,)_$cminBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.507649965 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,,,)_info;
 },
 GHC.Enum.$fBounded(,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c12IK: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,)_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_sUXQ_entry() //  [R1]
         { []
         }
     {offset
       c12IS: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c12IT; else goto c12IU;
       c12IT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12IU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 56];
           P64[Sp - 32] = P64[R1 + 64];
           P64[Sp - 24] = P64[R1 + 72];
           Sp = Sp - 40;
           call GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUXQ_info" {
     sat_sUXQ_info:
         const sat_sUXQ_entry;
         const 8;
         const 15;
 },
 sat_sUXP_entry() //  [R1]
         { []
         }
     {offset
       c12IZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c12J0; else goto c12J1;
       c12J0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12J1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 56];
           P64[Sp - 32] = P64[R1 + 64];
           P64[Sp - 24] = P64[R1 + 72];
           Sp = Sp - 40;
           call GHC.Enum.$fBounded(,,,,,,,)_$cminBound_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUXP_info" {
     sat_sUXP_info:
         const sat_sUXP_entry;
         const 8;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c12J3: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto c12J7; else goto c12J6;
       c12J7: // global
           HpAlloc = 184;
           R1 = GHC.Enum.$fBounded(,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c12J6: // global
           I64[Hp - 176] = sat_sUXQ_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           P64[Hp - 144] = R4;
           P64[Hp - 136] = R5;
           P64[Hp - 128] = R6;
           _sUXM::P64 = P64[Sp];
           P64[Hp - 120] = _sUXM::P64;
           _sUXN::P64 = P64[Sp + 8];
           P64[Hp - 112] = _sUXN::P64;
           _sUXO::P64 = P64[Sp + 16];
           P64[Hp - 104] = _sUXO::P64;
           I64[Hp - 96] = sat_sUXP_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           P64[Hp - 48] = R6;
           P64[Hp - 40] = _sUXM::P64;
           P64[Hp - 32] = _sUXN::P64;
           P64[Hp - 24] = _sUXO::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 96;
           P64[Hp] = Hp - 176;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,,,)_entry;
         const 0;
         const 14;
         const 34359738368;
         const 0;
         const 8;
         const GHC.Enum.$fBounded(,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.520170228 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_slow() //  [R1]
         { []
         }
     {offset
       c12Jw: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sUY8_entry() //  [R1]
         { []
         }
     {offset
       c12JE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12JF; else goto c12JG;
       c12JF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12JG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUY8_info" {
     sat_sUY8_info:
         const sat_sUY8_entry;
         const 1;
         const 16;
 },
 sat_sUY7_entry() //  [R1]
         { []
         }
     {offset
       c12JL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12JM; else goto c12JN;
       c12JM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12JN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUY7_info" {
     sat_sUY7_info:
         const sat_sUY7_entry;
         const 1;
         const 16;
 },
 sat_sUY6_entry() //  [R1]
         { []
         }
     {offset
       c12JS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12JT; else goto c12JU;
       c12JT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12JU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUY6_info" {
     sat_sUY6_info:
         const sat_sUY6_entry;
         const 1;
         const 16;
 },
 sat_sUY5_entry() //  [R1]
         { []
         }
     {offset
       c12JZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12K0; else goto c12K1;
       c12K0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12K1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUY5_info" {
     sat_sUY5_info:
         const sat_sUY5_entry;
         const 1;
         const 16;
 },
 sat_sUY4_entry() //  [R1]
         { []
         }
     {offset
       c12K6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12K7; else goto c12K8;
       c12K7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12K8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUY4_info" {
     sat_sUY4_info:
         const sat_sUY4_entry;
         const 1;
         const 16;
 },
 sat_sUY3_entry() //  [R1]
         { []
         }
     {offset
       c12Kd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Ke; else goto c12Kf;
       c12Ke: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Kf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUY3_info" {
     sat_sUY3_info:
         const sat_sUY3_entry;
         const 1;
         const 16;
 },
 sat_sUY2_entry() //  [R1]
         { []
         }
     {offset
       c12Kk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Kl; else goto c12Km;
       c12Kl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Km: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUY2_info" {
     sat_sUY2_info:
         const sat_sUY2_entry;
         const 1;
         const 16;
 },
 sat_sUY1_entry() //  [R1]
         { []
         }
     {offset
       c12Kr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Ks; else goto c12Kt;
       c12Ks: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Kt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUY1_info" {
     sat_sUY1_info:
         const sat_sUY1_entry;
         const 1;
         const 16;
 },
 sat_sUY0_entry() //  [R1]
         { []
         }
     {offset
       c12Ky: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Kz; else goto c12KA;
       c12Kz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12KA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUY0_info" {
     sat_sUY0_info:
         const sat_sUY0_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       c12KC: // global
           Hp = Hp + 296;
           if (Hp > HpLim) (likely: False) goto c12KG; else goto c12KF;
       c12KG: // global
           HpAlloc = 296;
           R1 = GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c12KF: // global
           I64[Hp - 288] = sat_sUY8_info;
           P64[Hp - 272] = P64[Sp + 24];
           I64[Hp - 264] = sat_sUY7_info;
           P64[Hp - 248] = P64[Sp + 16];
           I64[Hp - 240] = sat_sUY6_info;
           P64[Hp - 224] = P64[Sp + 8];
           I64[Hp - 216] = sat_sUY5_info;
           P64[Hp - 200] = P64[Sp];
           I64[Hp - 192] = sat_sUY4_info;
           P64[Hp - 176] = R6;
           I64[Hp - 168] = sat_sUY3_info;
           P64[Hp - 152] = R5;
           I64[Hp - 144] = sat_sUY2_info;
           P64[Hp - 128] = R4;
           I64[Hp - 120] = sat_sUY1_info;
           P64[Hp - 104] = R3;
           I64[Hp - 96] = sat_sUY0_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = (,,,,,,,,)_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           P64[Hp - 48] = Hp - 144;
           P64[Hp - 40] = Hp - 168;
           P64[Hp - 32] = Hp - 192;
           P64[Hp - 24] = Hp - 216;
           P64[Hp - 16] = Hp - 240;
           P64[Hp - 8] = Hp - 264;
           P64[Hp] = Hp - 288;
           R1 = Hp - 71;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.543547404 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_slow() //  [R1]
         { []
         }
     {offset
       c12LC: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sUYq_entry() //  [R1]
         { []
         }
     {offset
       c12LK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12LL; else goto c12LM;
       c12LL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12LM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYq_info" {
     sat_sUYq_info:
         const sat_sUYq_entry;
         const 1;
         const 16;
 },
 sat_sUYp_entry() //  [R1]
         { []
         }
     {offset
       c12LR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12LS; else goto c12LT;
       c12LS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12LT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYp_info" {
     sat_sUYp_info:
         const sat_sUYp_entry;
         const 1;
         const 16;
 },
 sat_sUYo_entry() //  [R1]
         { []
         }
     {offset
       c12LY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12LZ; else goto c12M0;
       c12LZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12M0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYo_info" {
     sat_sUYo_info:
         const sat_sUYo_entry;
         const 1;
         const 16;
 },
 sat_sUYn_entry() //  [R1]
         { []
         }
     {offset
       c12M5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12M6; else goto c12M7;
       c12M6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12M7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYn_info" {
     sat_sUYn_info:
         const sat_sUYn_entry;
         const 1;
         const 16;
 },
 sat_sUYm_entry() //  [R1]
         { []
         }
     {offset
       c12Mc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Md; else goto c12Me;
       c12Md: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Me: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYm_info" {
     sat_sUYm_info:
         const sat_sUYm_entry;
         const 1;
         const 16;
 },
 sat_sUYl_entry() //  [R1]
         { []
         }
     {offset
       c12Mj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Mk; else goto c12Ml;
       c12Mk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Ml: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYl_info" {
     sat_sUYl_info:
         const sat_sUYl_entry;
         const 1;
         const 16;
 },
 sat_sUYk_entry() //  [R1]
         { []
         }
     {offset
       c12Mq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Mr; else goto c12Ms;
       c12Mr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Ms: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYk_info" {
     sat_sUYk_info:
         const sat_sUYk_entry;
         const 1;
         const 16;
 },
 sat_sUYj_entry() //  [R1]
         { []
         }
     {offset
       c12Mx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12My; else goto c12Mz;
       c12My: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Mz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYj_info" {
     sat_sUYj_info:
         const sat_sUYj_entry;
         const 1;
         const 16;
 },
 sat_sUYi_entry() //  [R1]
         { []
         }
     {offset
       c12ME: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12MF; else goto c12MG;
       c12MF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12MG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYi_info" {
     sat_sUYi_info:
         const sat_sUYi_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       c12MI: // global
           Hp = Hp + 296;
           if (Hp > HpLim) (likely: False) goto c12MM; else goto c12ML;
       c12MM: // global
           HpAlloc = 296;
           R1 = GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c12ML: // global
           I64[Hp - 288] = sat_sUYq_info;
           P64[Hp - 272] = P64[Sp + 24];
           I64[Hp - 264] = sat_sUYp_info;
           P64[Hp - 248] = P64[Sp + 16];
           I64[Hp - 240] = sat_sUYo_info;
           P64[Hp - 224] = P64[Sp + 8];
           I64[Hp - 216] = sat_sUYn_info;
           P64[Hp - 200] = P64[Sp];
           I64[Hp - 192] = sat_sUYm_info;
           P64[Hp - 176] = R6;
           I64[Hp - 168] = sat_sUYl_info;
           P64[Hp - 152] = R5;
           I64[Hp - 144] = sat_sUYk_info;
           P64[Hp - 128] = R4;
           I64[Hp - 120] = sat_sUYj_info;
           P64[Hp - 104] = R3;
           I64[Hp - 96] = sat_sUYi_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = (,,,,,,,,)_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           P64[Hp - 48] = Hp - 144;
           P64[Hp - 40] = Hp - 168;
           P64[Hp - 32] = Hp - 192;
           P64[Hp - 24] = Hp - 216;
           P64[Hp - 16] = Hp - 240;
           P64[Hp - 8] = Hp - 264;
           P64[Hp] = Hp - 288;
           R1 = Hp - 71;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.565649032 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,,,,)_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c12NI: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,)_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sUYB_entry() //  [R1]
         { []
         }
     {offset
       c12NQ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c12NR; else goto c12NS;
       c12NR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12NS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYB_info" {
     sat_sUYB_info:
         const sat_sUYB_entry;
         const 9;
         const 15;
 },
 sat_sUYA_entry() //  [R1]
         { []
         }
     {offset
       c12NX: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c12NY; else goto c12NZ;
       c12NY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12NZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYA_info" {
     sat_sUYA_info:
         const sat_sUYA_entry;
         const 9;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c12O1: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c12O5; else goto c12O4;
       c12O5: // global
           HpAlloc = 200;
           R1 = GHC.Enum.$fBounded(,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c12O4: // global
           I64[Hp - 192] = sat_sUYB_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           P64[Hp - 160] = R4;
           P64[Hp - 152] = R5;
           P64[Hp - 144] = R6;
           _sUYw::P64 = P64[Sp];
           P64[Hp - 136] = _sUYw::P64;
           _sUYx::P64 = P64[Sp + 8];
           P64[Hp - 128] = _sUYx::P64;
           _sUYy::P64 = P64[Sp + 16];
           P64[Hp - 120] = _sUYy::P64;
           _sUYz::P64 = P64[Sp + 24];
           P64[Hp - 112] = _sUYz::P64;
           I64[Hp - 104] = sat_sUYA_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           P64[Hp - 56] = R6;
           P64[Hp - 48] = _sUYw::P64;
           P64[Hp - 40] = _sUYx::P64;
           P64[Hp - 32] = _sUYy::P64;
           P64[Hp - 24] = _sUYz::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 192;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,,,,)_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const GHC.Enum.$fBounded(,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.579093004 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_slow() //  [R1]
         { []
         }
     {offset
       c12Ow: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2,
                                                               R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_sUYV_entry() //  [R1]
         { []
         }
     {offset
       c12OE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12OF; else goto c12OG;
       c12OF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12OG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYV_info" {
     sat_sUYV_info:
         const sat_sUYV_entry;
         const 1;
         const 16;
 },
 sat_sUYU_entry() //  [R1]
         { []
         }
     {offset
       c12OL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12OM; else goto c12ON;
       c12OM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12ON: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYU_info" {
     sat_sUYU_info:
         const sat_sUYU_entry;
         const 1;
         const 16;
 },
 sat_sUYT_entry() //  [R1]
         { []
         }
     {offset
       c12OS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12OT; else goto c12OU;
       c12OT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12OU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYT_info" {
     sat_sUYT_info:
         const sat_sUYT_entry;
         const 1;
         const 16;
 },
 sat_sUYS_entry() //  [R1]
         { []
         }
     {offset
       c12OZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12P0; else goto c12P1;
       c12P0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12P1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYS_info" {
     sat_sUYS_info:
         const sat_sUYS_entry;
         const 1;
         const 16;
 },
 sat_sUYR_entry() //  [R1]
         { []
         }
     {offset
       c12P6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12P7; else goto c12P8;
       c12P7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12P8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYR_info" {
     sat_sUYR_info:
         const sat_sUYR_entry;
         const 1;
         const 16;
 },
 sat_sUYQ_entry() //  [R1]
         { []
         }
     {offset
       c12Pd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Pe; else goto c12Pf;
       c12Pe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Pf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYQ_info" {
     sat_sUYQ_info:
         const sat_sUYQ_entry;
         const 1;
         const 16;
 },
 sat_sUYP_entry() //  [R1]
         { []
         }
     {offset
       c12Pk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Pl; else goto c12Pm;
       c12Pl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Pm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYP_info" {
     sat_sUYP_info:
         const sat_sUYP_entry;
         const 1;
         const 16;
 },
 sat_sUYO_entry() //  [R1]
         { []
         }
     {offset
       c12Pr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Ps; else goto c12Pt;
       c12Ps: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Pt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYO_info" {
     sat_sUYO_info:
         const sat_sUYO_entry;
         const 1;
         const 16;
 },
 sat_sUYN_entry() //  [R1]
         { []
         }
     {offset
       c12Py: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Pz; else goto c12PA;
       c12Pz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12PA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYN_info" {
     sat_sUYN_info:
         const sat_sUYN_entry;
         const 1;
         const 16;
 },
 sat_sUYM_entry() //  [R1]
         { []
         }
     {offset
       c12PF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12PG; else goto c12PH;
       c12PG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12PH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUYM_info" {
     sat_sUYM_info:
         const sat_sUYM_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       c12PJ: // global
           Hp = Hp + 328;
           if (Hp > HpLim) (likely: False) goto c12PN; else goto c12PM;
       c12PN: // global
           HpAlloc = 328;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c12PM: // global
           I64[Hp - 320] = sat_sUYV_info;
           P64[Hp - 304] = P64[Sp + 32];
           I64[Hp - 296] = sat_sUYU_info;
           P64[Hp - 280] = P64[Sp + 24];
           I64[Hp - 272] = sat_sUYT_info;
           P64[Hp - 256] = P64[Sp + 16];
           I64[Hp - 248] = sat_sUYS_info;
           P64[Hp - 232] = P64[Sp + 8];
           I64[Hp - 224] = sat_sUYR_info;
           P64[Hp - 208] = P64[Sp];
           I64[Hp - 200] = sat_sUYQ_info;
           P64[Hp - 184] = R6;
           I64[Hp - 176] = sat_sUYP_info;
           P64[Hp - 160] = R5;
           I64[Hp - 152] = sat_sUYO_info;
           P64[Hp - 136] = R4;
           I64[Hp - 128] = sat_sUYN_info;
           P64[Hp - 112] = R3;
           I64[Hp - 104] = sat_sUYM_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = (,,,,,,,,,)_con_info;
           P64[Hp - 72] = Hp - 104;
           P64[Hp - 64] = Hp - 128;
           P64[Hp - 56] = Hp - 152;
           P64[Hp - 48] = Hp - 176;
           P64[Hp - 40] = Hp - 200;
           P64[Hp - 32] = Hp - 224;
           P64[Hp - 24] = Hp - 248;
           P64[Hp - 16] = Hp - 272;
           P64[Hp - 8] = Hp - 296;
           P64[Hp] = Hp - 320;
           R1 = Hp - 79;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 42949672960;
         const 0;
         const 10;
         const GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.604612303 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_slow() //  [R1]
         { []
         }
     {offset
       c12QP: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2,
                                                               R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_sUZf_entry() //  [R1]
         { []
         }
     {offset
       c12QX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12QY; else goto c12QZ;
       c12QY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12QZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZf_info" {
     sat_sUZf_info:
         const sat_sUZf_entry;
         const 1;
         const 16;
 },
 sat_sUZe_entry() //  [R1]
         { []
         }
     {offset
       c12R4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12R5; else goto c12R6;
       c12R5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12R6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZe_info" {
     sat_sUZe_info:
         const sat_sUZe_entry;
         const 1;
         const 16;
 },
 sat_sUZd_entry() //  [R1]
         { []
         }
     {offset
       c12Rb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Rc; else goto c12Rd;
       c12Rc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Rd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZd_info" {
     sat_sUZd_info:
         const sat_sUZd_entry;
         const 1;
         const 16;
 },
 sat_sUZc_entry() //  [R1]
         { []
         }
     {offset
       c12Ri: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Rj; else goto c12Rk;
       c12Rj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Rk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZc_info" {
     sat_sUZc_info:
         const sat_sUZc_entry;
         const 1;
         const 16;
 },
 sat_sUZb_entry() //  [R1]
         { []
         }
     {offset
       c12Rp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Rq; else goto c12Rr;
       c12Rq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Rr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZb_info" {
     sat_sUZb_info:
         const sat_sUZb_entry;
         const 1;
         const 16;
 },
 sat_sUZa_entry() //  [R1]
         { []
         }
     {offset
       c12Rw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Rx; else goto c12Ry;
       c12Rx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Ry: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZa_info" {
     sat_sUZa_info:
         const sat_sUZa_entry;
         const 1;
         const 16;
 },
 sat_sUZ9_entry() //  [R1]
         { []
         }
     {offset
       c12RD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12RE; else goto c12RF;
       c12RE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12RF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZ9_info" {
     sat_sUZ9_info:
         const sat_sUZ9_entry;
         const 1;
         const 16;
 },
 sat_sUZ8_entry() //  [R1]
         { []
         }
     {offset
       c12RK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12RL; else goto c12RM;
       c12RL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12RM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZ8_info" {
     sat_sUZ8_info:
         const sat_sUZ8_entry;
         const 1;
         const 16;
 },
 sat_sUZ7_entry() //  [R1]
         { []
         }
     {offset
       c12RR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12RS; else goto c12RT;
       c12RS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12RT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZ7_info" {
     sat_sUZ7_info:
         const sat_sUZ7_entry;
         const 1;
         const 16;
 },
 sat_sUZ6_entry() //  [R1]
         { []
         }
     {offset
       c12RY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12RZ; else goto c12S0;
       c12RZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12S0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZ6_info" {
     sat_sUZ6_info:
         const sat_sUZ6_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       c12S2: // global
           Hp = Hp + 328;
           if (Hp > HpLim) (likely: False) goto c12S6; else goto c12S5;
       c12S6: // global
           HpAlloc = 328;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c12S5: // global
           I64[Hp - 320] = sat_sUZf_info;
           P64[Hp - 304] = P64[Sp + 32];
           I64[Hp - 296] = sat_sUZe_info;
           P64[Hp - 280] = P64[Sp + 24];
           I64[Hp - 272] = sat_sUZd_info;
           P64[Hp - 256] = P64[Sp + 16];
           I64[Hp - 248] = sat_sUZc_info;
           P64[Hp - 232] = P64[Sp + 8];
           I64[Hp - 224] = sat_sUZb_info;
           P64[Hp - 208] = P64[Sp];
           I64[Hp - 200] = sat_sUZa_info;
           P64[Hp - 184] = R6;
           I64[Hp - 176] = sat_sUZ9_info;
           P64[Hp - 160] = R5;
           I64[Hp - 152] = sat_sUZ8_info;
           P64[Hp - 136] = R4;
           I64[Hp - 128] = sat_sUZ7_info;
           P64[Hp - 112] = R3;
           I64[Hp - 104] = sat_sUZ6_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = (,,,,,,,,,)_con_info;
           P64[Hp - 72] = Hp - 104;
           P64[Hp - 64] = Hp - 128;
           P64[Hp - 56] = Hp - 152;
           P64[Hp - 48] = Hp - 176;
           P64[Hp - 40] = Hp - 200;
           P64[Hp - 32] = Hp - 224;
           P64[Hp - 24] = Hp - 248;
           P64[Hp - 16] = Hp - 272;
           P64[Hp - 8] = Hp - 296;
           P64[Hp] = Hp - 320;
           R1 = Hp - 79;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 42949672960;
         const 0;
         const 10;
         const GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.628245728 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,)_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c12T8: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,)_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_sUZr_entry() //  [R1]
         { []
         }
     {offset
       c12Tg: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c12Th; else goto c12Ti;
       c12Th: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Ti: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 56] = P64[R1 + 56];
           P64[Sp - 48] = P64[R1 + 64];
           P64[Sp - 40] = P64[R1 + 72];
           P64[Sp - 32] = P64[R1 + 80];
           P64[Sp - 24] = P64[R1 + 88];
           Sp = Sp - 56;
           call GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZr_info" {
     sat_sUZr_info:
         const sat_sUZr_entry;
         const 10;
         const 15;
 },
 sat_sUZq_entry() //  [R1]
         { []
         }
     {offset
       c12Tn: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c12To; else goto c12Tp;
       c12To: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Tp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 56] = P64[R1 + 56];
           P64[Sp - 48] = P64[R1 + 64];
           P64[Sp - 40] = P64[R1 + 72];
           P64[Sp - 32] = P64[R1 + 80];
           P64[Sp - 24] = P64[R1 + 88];
           Sp = Sp - 56;
           call GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZq_info" {
     sat_sUZq_info:
         const sat_sUZq_entry;
         const 10;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c12Tr: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto c12Tv; else goto c12Tu;
       c12Tv: // global
           HpAlloc = 216;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c12Tu: // global
           I64[Hp - 208] = sat_sUZr_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           P64[Hp - 176] = R4;
           P64[Hp - 168] = R5;
           P64[Hp - 160] = R6;
           _sUZl::P64 = P64[Sp];
           P64[Hp - 152] = _sUZl::P64;
           _sUZm::P64 = P64[Sp + 8];
           P64[Hp - 144] = _sUZm::P64;
           _sUZn::P64 = P64[Sp + 16];
           P64[Hp - 136] = _sUZn::P64;
           _sUZo::P64 = P64[Sp + 24];
           P64[Hp - 128] = _sUZo::P64;
           _sUZp::P64 = P64[Sp + 32];
           P64[Hp - 120] = _sUZp::P64;
           I64[Hp - 112] = sat_sUZq_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           P64[Hp - 64] = R6;
           P64[Hp - 56] = _sUZl::P64;
           P64[Hp - 48] = _sUZm::P64;
           P64[Hp - 40] = _sUZn::P64;
           P64[Hp - 32] = _sUZo::P64;
           P64[Hp - 24] = _sUZp::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 112;
           P64[Hp] = Hp - 208;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,,,,,)_entry;
         const 0;
         const 14;
         const 42949672960;
         const 0;
         const 10;
         const GHC.Enum.$fBounded(,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.642484862 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_slow() //  [R1]
         { []
         }
     {offset
       c12TY: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2,
                                                                R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_sUZN_entry() //  [R1]
         { []
         }
     {offset
       c12U6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12U7; else goto c12U8;
       c12U7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12U8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZN_info" {
     sat_sUZN_info:
         const sat_sUZN_entry;
         const 1;
         const 16;
 },
 sat_sUZM_entry() //  [R1]
         { []
         }
     {offset
       c12Ud: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Ue; else goto c12Uf;
       c12Ue: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Uf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZM_info" {
     sat_sUZM_info:
         const sat_sUZM_entry;
         const 1;
         const 16;
 },
 sat_sUZL_entry() //  [R1]
         { []
         }
     {offset
       c12Uk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Ul; else goto c12Um;
       c12Ul: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Um: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZL_info" {
     sat_sUZL_info:
         const sat_sUZL_entry;
         const 1;
         const 16;
 },
 sat_sUZK_entry() //  [R1]
         { []
         }
     {offset
       c12Ur: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Us; else goto c12Ut;
       c12Us: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Ut: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZK_info" {
     sat_sUZK_info:
         const sat_sUZK_entry;
         const 1;
         const 16;
 },
 sat_sUZJ_entry() //  [R1]
         { []
         }
     {offset
       c12Uy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Uz; else goto c12UA;
       c12Uz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12UA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZJ_info" {
     sat_sUZJ_info:
         const sat_sUZJ_entry;
         const 1;
         const 16;
 },
 sat_sUZI_entry() //  [R1]
         { []
         }
     {offset
       c12UF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12UG; else goto c12UH;
       c12UG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12UH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZI_info" {
     sat_sUZI_info:
         const sat_sUZI_entry;
         const 1;
         const 16;
 },
 sat_sUZH_entry() //  [R1]
         { []
         }
     {offset
       c12UM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12UN; else goto c12UO;
       c12UN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12UO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZH_info" {
     sat_sUZH_info:
         const sat_sUZH_entry;
         const 1;
         const 16;
 },
 sat_sUZG_entry() //  [R1]
         { []
         }
     {offset
       c12UT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12UU; else goto c12UV;
       c12UU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12UV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZG_info" {
     sat_sUZG_info:
         const sat_sUZG_entry;
         const 1;
         const 16;
 },
 sat_sUZF_entry() //  [R1]
         { []
         }
     {offset
       c12V0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12V1; else goto c12V2;
       c12V1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12V2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZF_info" {
     sat_sUZF_info:
         const sat_sUZF_entry;
         const 1;
         const 16;
 },
 sat_sUZE_entry() //  [R1]
         { []
         }
     {offset
       c12V7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12V8; else goto c12V9;
       c12V8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12V9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZE_info" {
     sat_sUZE_info:
         const sat_sUZE_entry;
         const 1;
         const 16;
 },
 sat_sUZD_entry() //  [R1]
         { []
         }
     {offset
       c12Ve: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Vf; else goto c12Vg;
       c12Vf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Vg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZD_info" {
     sat_sUZD_info:
         const sat_sUZD_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       c12Vi: // global
           Hp = Hp + 360;
           if (Hp > HpLim) (likely: False) goto c12Vm; else goto c12Vl;
       c12Vm: // global
           HpAlloc = 360;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       c12Vl: // global
           I64[Hp - 352] = sat_sUZN_info;
           P64[Hp - 336] = P64[Sp + 40];
           I64[Hp - 328] = sat_sUZM_info;
           P64[Hp - 312] = P64[Sp + 32];
           I64[Hp - 304] = sat_sUZL_info;
           P64[Hp - 288] = P64[Sp + 24];
           I64[Hp - 280] = sat_sUZK_info;
           P64[Hp - 264] = P64[Sp + 16];
           I64[Hp - 256] = sat_sUZJ_info;
           P64[Hp - 240] = P64[Sp + 8];
           I64[Hp - 232] = sat_sUZI_info;
           P64[Hp - 216] = P64[Sp];
           I64[Hp - 208] = sat_sUZH_info;
           P64[Hp - 192] = R6;
           I64[Hp - 184] = sat_sUZG_info;
           P64[Hp - 168] = R5;
           I64[Hp - 160] = sat_sUZF_info;
           P64[Hp - 144] = R4;
           I64[Hp - 136] = sat_sUZE_info;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sUZD_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = (,,,,,,,,,,)_con_info;
           P64[Hp - 80] = Hp - 112;
           P64[Hp - 72] = Hp - 136;
           P64[Hp - 64] = Hp - 160;
           P64[Hp - 56] = Hp - 184;
           P64[Hp - 48] = Hp - 208;
           P64[Hp - 40] = Hp - 232;
           P64[Hp - 32] = Hp - 256;
           P64[Hp - 24] = Hp - 280;
           P64[Hp - 16] = Hp - 304;
           P64[Hp - 8] = Hp - 328;
           P64[Hp] = Hp - 352;
           R1 = Hp - 87;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 47244640256;
         const 0;
         const 11;
         const GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.669835833 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_slow() //  [R1]
         { []
         }
     {offset
       c12Wu: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2,
                                                                R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_sV09_entry() //  [R1]
         { []
         }
     {offset
       c12WC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12WD; else goto c12WE;
       c12WD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12WE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV09_info" {
     sat_sV09_info:
         const sat_sV09_entry;
         const 1;
         const 16;
 },
 sat_sV08_entry() //  [R1]
         { []
         }
     {offset
       c12WJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12WK; else goto c12WL;
       c12WK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12WL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV08_info" {
     sat_sV08_info:
         const sat_sV08_entry;
         const 1;
         const 16;
 },
 sat_sV07_entry() //  [R1]
         { []
         }
     {offset
       c12WQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12WR; else goto c12WS;
       c12WR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12WS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV07_info" {
     sat_sV07_info:
         const sat_sV07_entry;
         const 1;
         const 16;
 },
 sat_sV06_entry() //  [R1]
         { []
         }
     {offset
       c12WX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12WY; else goto c12WZ;
       c12WY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12WZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV06_info" {
     sat_sV06_info:
         const sat_sV06_entry;
         const 1;
         const 16;
 },
 sat_sV05_entry() //  [R1]
         { []
         }
     {offset
       c12X4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12X5; else goto c12X6;
       c12X5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12X6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV05_info" {
     sat_sV05_info:
         const sat_sV05_entry;
         const 1;
         const 16;
 },
 sat_sV04_entry() //  [R1]
         { []
         }
     {offset
       c12Xb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Xc; else goto c12Xd;
       c12Xc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Xd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV04_info" {
     sat_sV04_info:
         const sat_sV04_entry;
         const 1;
         const 16;
 },
 sat_sV03_entry() //  [R1]
         { []
         }
     {offset
       c12Xi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Xj; else goto c12Xk;
       c12Xj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Xk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV03_info" {
     sat_sV03_info:
         const sat_sV03_entry;
         const 1;
         const 16;
 },
 sat_sV02_entry() //  [R1]
         { []
         }
     {offset
       c12Xp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Xq; else goto c12Xr;
       c12Xq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Xr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV02_info" {
     sat_sV02_info:
         const sat_sV02_entry;
         const 1;
         const 16;
 },
 sat_sV01_entry() //  [R1]
         { []
         }
     {offset
       c12Xw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12Xx; else goto c12Xy;
       c12Xx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Xy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV01_info" {
     sat_sV01_info:
         const sat_sV01_entry;
         const 1;
         const 16;
 },
 sat_sV00_entry() //  [R1]
         { []
         }
     {offset
       c12XD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12XE; else goto c12XF;
       c12XE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12XF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV00_info" {
     sat_sV00_info:
         const sat_sV00_entry;
         const 1;
         const 16;
 },
 sat_sUZZ_entry() //  [R1]
         { []
         }
     {offset
       c12XK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c12XL; else goto c12XM;
       c12XL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12XM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sUZZ_info" {
     sat_sUZZ_info:
         const sat_sUZZ_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       c12XO: // global
           Hp = Hp + 360;
           if (Hp > HpLim) (likely: False) goto c12XS; else goto c12XR;
       c12XS: // global
           HpAlloc = 360;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       c12XR: // global
           I64[Hp - 352] = sat_sV09_info;
           P64[Hp - 336] = P64[Sp + 40];
           I64[Hp - 328] = sat_sV08_info;
           P64[Hp - 312] = P64[Sp + 32];
           I64[Hp - 304] = sat_sV07_info;
           P64[Hp - 288] = P64[Sp + 24];
           I64[Hp - 280] = sat_sV06_info;
           P64[Hp - 264] = P64[Sp + 16];
           I64[Hp - 256] = sat_sV05_info;
           P64[Hp - 240] = P64[Sp + 8];
           I64[Hp - 232] = sat_sV04_info;
           P64[Hp - 216] = P64[Sp];
           I64[Hp - 208] = sat_sV03_info;
           P64[Hp - 192] = R6;
           I64[Hp - 184] = sat_sV02_info;
           P64[Hp - 168] = R5;
           I64[Hp - 160] = sat_sV01_info;
           P64[Hp - 144] = R4;
           I64[Hp - 136] = sat_sV00_info;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sUZZ_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = (,,,,,,,,,,)_con_info;
           P64[Hp - 80] = Hp - 112;
           P64[Hp - 72] = Hp - 136;
           P64[Hp - 64] = Hp - 160;
           P64[Hp - 56] = Hp - 184;
           P64[Hp - 48] = Hp - 208;
           P64[Hp - 40] = Hp - 232;
           P64[Hp - 32] = Hp - 256;
           P64[Hp - 24] = Hp - 280;
           P64[Hp - 16] = Hp - 304;
           P64[Hp - 8] = Hp - 328;
           P64[Hp] = Hp - 352;
           R1 = Hp - 87;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 47244640256;
         const 0;
         const 11;
         const GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.695902303 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,)_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c12Z0: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,)_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_sV0m_entry() //  [R1]
         { []
         }
     {offset
       c12Z8: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c12Z9; else goto c12Za;
       c12Z9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Za: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 64] = P64[R1 + 56];
           P64[Sp - 56] = P64[R1 + 64];
           P64[Sp - 48] = P64[R1 + 72];
           P64[Sp - 40] = P64[R1 + 80];
           P64[Sp - 32] = P64[R1 + 88];
           P64[Sp - 24] = P64[R1 + 96];
           Sp = Sp - 64;
           call GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV0m_info" {
     sat_sV0m_info:
         const sat_sV0m_entry;
         const 11;
         const 15;
 },
 sat_sV0l_entry() //  [R1]
         { []
         }
     {offset
       c12Zf: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c12Zg; else goto c12Zh;
       c12Zg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c12Zh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 64] = P64[R1 + 56];
           P64[Sp - 56] = P64[R1 + 64];
           P64[Sp - 48] = P64[R1 + 72];
           P64[Sp - 40] = P64[R1 + 80];
           P64[Sp - 32] = P64[R1 + 88];
           P64[Sp - 24] = P64[R1 + 96];
           Sp = Sp - 64;
           call GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV0l_info" {
     sat_sV0l_info:
         const sat_sV0l_entry;
         const 11;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c12Zj: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c12Zn; else goto c12Zm;
       c12Zn: // global
           HpAlloc = 232;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       c12Zm: // global
           I64[Hp - 224] = sat_sV0m_info;
           P64[Hp - 208] = R2;
           P64[Hp - 200] = R3;
           P64[Hp - 192] = R4;
           P64[Hp - 184] = R5;
           P64[Hp - 176] = R6;
           _sV0f::P64 = P64[Sp];
           P64[Hp - 168] = _sV0f::P64;
           _sV0g::P64 = P64[Sp + 8];
           P64[Hp - 160] = _sV0g::P64;
           _sV0h::P64 = P64[Sp + 16];
           P64[Hp - 152] = _sV0h::P64;
           _sV0i::P64 = P64[Sp + 24];
           P64[Hp - 144] = _sV0i::P64;
           _sV0j::P64 = P64[Sp + 32];
           P64[Hp - 136] = _sV0j::P64;
           _sV0k::P64 = P64[Sp + 40];
           P64[Hp - 128] = _sV0k::P64;
           I64[Hp - 120] = sat_sV0l_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = _sV0f::P64;
           P64[Hp - 56] = _sV0g::P64;
           P64[Hp - 48] = _sV0h::P64;
           P64[Hp - 40] = _sV0i::P64;
           P64[Hp - 32] = _sV0j::P64;
           P64[Hp - 24] = _sV0k::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 120;
           P64[Hp] = Hp - 224;
           R1 = Hp - 15;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,)_entry;
         const 0;
         const 14;
         const 47244640256;
         const 0;
         const 11;
         const GHC.Enum.$fBounded(,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.710032792 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_slow() //  [R1]
         { []
         }
     {offset
       c12ZS: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_sV0K_entry() //  [R1]
         { []
         }
     {offset
       c1300: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1301; else goto c1302;
       c1301: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1302: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV0K_info" {
     sat_sV0K_info:
         const sat_sV0K_entry;
         const 1;
         const 16;
 },
 sat_sV0J_entry() //  [R1]
         { []
         }
     {offset
       c1307: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1308; else goto c1309;
       c1308: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1309: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV0J_info" {
     sat_sV0J_info:
         const sat_sV0J_entry;
         const 1;
         const 16;
 },
 sat_sV0I_entry() //  [R1]
         { []
         }
     {offset
       c130e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c130f; else goto c130g;
       c130f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c130g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV0I_info" {
     sat_sV0I_info:
         const sat_sV0I_entry;
         const 1;
         const 16;
 },
 sat_sV0H_entry() //  [R1]
         { []
         }
     {offset
       c130l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c130m; else goto c130n;
       c130m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c130n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV0H_info" {
     sat_sV0H_info:
         const sat_sV0H_entry;
         const 1;
         const 16;
 },
 sat_sV0G_entry() //  [R1]
         { []
         }
     {offset
       c130s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c130t; else goto c130u;
       c130t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c130u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV0G_info" {
     sat_sV0G_info:
         const sat_sV0G_entry;
         const 1;
         const 16;
 },
 sat_sV0F_entry() //  [R1]
         { []
         }
     {offset
       c130z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c130A; else goto c130B;
       c130A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c130B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV0F_info" {
     sat_sV0F_info:
         const sat_sV0F_entry;
         const 1;
         const 16;
 },
 sat_sV0E_entry() //  [R1]
         { []
         }
     {offset
       c130G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c130H; else goto c130I;
       c130H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c130I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV0E_info" {
     sat_sV0E_info:
         const sat_sV0E_entry;
         const 1;
         const 16;
 },
 sat_sV0D_entry() //  [R1]
         { []
         }
     {offset
       c130N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c130O; else goto c130P;
       c130O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c130P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV0D_info" {
     sat_sV0D_info:
         const sat_sV0D_entry;
         const 1;
         const 16;
 },
 sat_sV0C_entry() //  [R1]
         { []
         }
     {offset
       c130U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c130V; else goto c130W;
       c130V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c130W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV0C_info" {
     sat_sV0C_info:
         const sat_sV0C_entry;
         const 1;
         const 16;
 },
 sat_sV0B_entry() //  [R1]
         { []
         }
     {offset
       c1311: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1312; else goto c1313;
       c1312: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1313: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV0B_info" {
     sat_sV0B_info:
         const sat_sV0B_entry;
         const 1;
         const 16;
 },
 sat_sV0A_entry() //  [R1]
         { []
         }
     {offset
       c1318: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1319; else goto c131a;
       c1319: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c131a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV0A_info" {
     sat_sV0A_info:
         const sat_sV0A_entry;
         const 1;
         const 16;
 },
 sat_sV0z_entry() //  [R1]
         { []
         }
     {offset
       c131f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c131g; else goto c131h;
       c131g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c131h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV0z_info" {
     sat_sV0z_info:
         const sat_sV0z_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       c131j: // global
           Hp = Hp + 392;
           if (Hp > HpLim) (likely: False) goto c131n; else goto c131m;
       c131n: // global
           HpAlloc = 392;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       c131m: // global
           I64[Hp - 384] = sat_sV0K_info;
           P64[Hp - 368] = P64[Sp + 48];
           I64[Hp - 360] = sat_sV0J_info;
           P64[Hp - 344] = P64[Sp + 40];
           I64[Hp - 336] = sat_sV0I_info;
           P64[Hp - 320] = P64[Sp + 32];
           I64[Hp - 312] = sat_sV0H_info;
           P64[Hp - 296] = P64[Sp + 24];
           I64[Hp - 288] = sat_sV0G_info;
           P64[Hp - 272] = P64[Sp + 16];
           I64[Hp - 264] = sat_sV0F_info;
           P64[Hp - 248] = P64[Sp + 8];
           I64[Hp - 240] = sat_sV0E_info;
           P64[Hp - 224] = P64[Sp];
           I64[Hp - 216] = sat_sV0D_info;
           P64[Hp - 200] = R6;
           I64[Hp - 192] = sat_sV0C_info;
           P64[Hp - 176] = R5;
           I64[Hp - 168] = sat_sV0B_info;
           P64[Hp - 152] = R4;
           I64[Hp - 144] = sat_sV0A_info;
           P64[Hp - 128] = R3;
           I64[Hp - 120] = sat_sV0z_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = (,,,,,,,,,,,)_con_info;
           P64[Hp - 88] = Hp - 120;
           P64[Hp - 80] = Hp - 144;
           P64[Hp - 72] = Hp - 168;
           P64[Hp - 64] = Hp - 192;
           P64[Hp - 56] = Hp - 216;
           P64[Hp - 48] = Hp - 240;
           P64[Hp - 40] = Hp - 264;
           P64[Hp - 32] = Hp - 288;
           P64[Hp - 24] = Hp - 312;
           P64[Hp - 16] = Hp - 336;
           P64[Hp - 8] = Hp - 360;
           P64[Hp] = Hp - 384;
           R1 = Hp - 95;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 51539607552;
         const 0;
         const 12;
         const GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.740040797 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_slow() //  [R1]
         { []
         }
     {offset
       c132B: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_sV18_entry() //  [R1]
         { []
         }
     {offset
       c132J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c132K; else goto c132L;
       c132K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c132L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV18_info" {
     sat_sV18_info:
         const sat_sV18_entry;
         const 1;
         const 16;
 },
 sat_sV17_entry() //  [R1]
         { []
         }
     {offset
       c132Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c132R; else goto c132S;
       c132R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c132S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV17_info" {
     sat_sV17_info:
         const sat_sV17_entry;
         const 1;
         const 16;
 },
 sat_sV16_entry() //  [R1]
         { []
         }
     {offset
       c132X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c132Y; else goto c132Z;
       c132Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c132Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV16_info" {
     sat_sV16_info:
         const sat_sV16_entry;
         const 1;
         const 16;
 },
 sat_sV15_entry() //  [R1]
         { []
         }
     {offset
       c1334: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1335; else goto c1336;
       c1335: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1336: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV15_info" {
     sat_sV15_info:
         const sat_sV15_entry;
         const 1;
         const 16;
 },
 sat_sV14_entry() //  [R1]
         { []
         }
     {offset
       c133b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c133c; else goto c133d;
       c133c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c133d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV14_info" {
     sat_sV14_info:
         const sat_sV14_entry;
         const 1;
         const 16;
 },
 sat_sV13_entry() //  [R1]
         { []
         }
     {offset
       c133i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c133j; else goto c133k;
       c133j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c133k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV13_info" {
     sat_sV13_info:
         const sat_sV13_entry;
         const 1;
         const 16;
 },
 sat_sV12_entry() //  [R1]
         { []
         }
     {offset
       c133p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c133q; else goto c133r;
       c133q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c133r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV12_info" {
     sat_sV12_info:
         const sat_sV12_entry;
         const 1;
         const 16;
 },
 sat_sV11_entry() //  [R1]
         { []
         }
     {offset
       c133w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c133x; else goto c133y;
       c133x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c133y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV11_info" {
     sat_sV11_info:
         const sat_sV11_entry;
         const 1;
         const 16;
 },
 sat_sV10_entry() //  [R1]
         { []
         }
     {offset
       c133D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c133E; else goto c133F;
       c133E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c133F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV10_info" {
     sat_sV10_info:
         const sat_sV10_entry;
         const 1;
         const 16;
 },
 sat_sV0Z_entry() //  [R1]
         { []
         }
     {offset
       c133K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c133L; else goto c133M;
       c133L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c133M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV0Z_info" {
     sat_sV0Z_info:
         const sat_sV0Z_entry;
         const 1;
         const 16;
 },
 sat_sV0Y_entry() //  [R1]
         { []
         }
     {offset
       c133R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c133S; else goto c133T;
       c133S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c133T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV0Y_info" {
     sat_sV0Y_info:
         const sat_sV0Y_entry;
         const 1;
         const 16;
 },
 sat_sV0X_entry() //  [R1]
         { []
         }
     {offset
       c133Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c133Z; else goto c1340;
       c133Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1340: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV0X_info" {
     sat_sV0X_info:
         const sat_sV0X_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       c1342: // global
           Hp = Hp + 392;
           if (Hp > HpLim) (likely: False) goto c1346; else goto c1345;
       c1346: // global
           HpAlloc = 392;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       c1345: // global
           I64[Hp - 384] = sat_sV18_info;
           P64[Hp - 368] = P64[Sp + 48];
           I64[Hp - 360] = sat_sV17_info;
           P64[Hp - 344] = P64[Sp + 40];
           I64[Hp - 336] = sat_sV16_info;
           P64[Hp - 320] = P64[Sp + 32];
           I64[Hp - 312] = sat_sV15_info;
           P64[Hp - 296] = P64[Sp + 24];
           I64[Hp - 288] = sat_sV14_info;
           P64[Hp - 272] = P64[Sp + 16];
           I64[Hp - 264] = sat_sV13_info;
           P64[Hp - 248] = P64[Sp + 8];
           I64[Hp - 240] = sat_sV12_info;
           P64[Hp - 224] = P64[Sp];
           I64[Hp - 216] = sat_sV11_info;
           P64[Hp - 200] = R6;
           I64[Hp - 192] = sat_sV10_info;
           P64[Hp - 176] = R5;
           I64[Hp - 168] = sat_sV0Z_info;
           P64[Hp - 152] = R4;
           I64[Hp - 144] = sat_sV0Y_info;
           P64[Hp - 128] = R3;
           I64[Hp - 120] = sat_sV0X_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = (,,,,,,,,,,,)_con_info;
           P64[Hp - 88] = Hp - 120;
           P64[Hp - 80] = Hp - 144;
           P64[Hp - 72] = Hp - 168;
           P64[Hp - 64] = Hp - 192;
           P64[Hp - 56] = Hp - 216;
           P64[Hp - 48] = Hp - 240;
           P64[Hp - 40] = Hp - 264;
           P64[Hp - 32] = Hp - 288;
           P64[Hp - 24] = Hp - 312;
           P64[Hp - 16] = Hp - 336;
           P64[Hp - 8] = Hp - 360;
           P64[Hp] = Hp - 384;
           R1 = Hp - 95;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 51539607552;
         const 0;
         const 12;
         const GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.772412202 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,)_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c135k: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,)_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_sV1m_entry() //  [R1]
         { []
         }
     {offset
       c135s: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c135t; else goto c135u;
       c135t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c135u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 72] = P64[R1 + 56];
           P64[Sp - 64] = P64[R1 + 64];
           P64[Sp - 56] = P64[R1 + 72];
           P64[Sp - 48] = P64[R1 + 80];
           P64[Sp - 40] = P64[R1 + 88];
           P64[Sp - 32] = P64[R1 + 96];
           P64[Sp - 24] = P64[R1 + 104];
           Sp = Sp - 72;
           call GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 80, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV1m_info" {
     sat_sV1m_info:
         const sat_sV1m_entry;
         const 12;
         const 15;
 },
 sat_sV1l_entry() //  [R1]
         { []
         }
     {offset
       c135z: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c135A; else goto c135B;
       c135A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c135B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 72] = P64[R1 + 56];
           P64[Sp - 64] = P64[R1 + 64];
           P64[Sp - 56] = P64[R1 + 72];
           P64[Sp - 48] = P64[R1 + 80];
           P64[Sp - 40] = P64[R1 + 88];
           P64[Sp - 32] = P64[R1 + 96];
           P64[Sp - 24] = P64[R1 + 104];
           Sp = Sp - 72;
           call GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 80, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV1l_info" {
     sat_sV1l_info:
         const sat_sV1l_entry;
         const 12;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c135D: // global
           Hp = Hp + 248;
           if (Hp > HpLim) (likely: False) goto c135H; else goto c135G;
       c135H: // global
           HpAlloc = 248;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       c135G: // global
           I64[Hp - 240] = sat_sV1m_info;
           P64[Hp - 224] = R2;
           P64[Hp - 216] = R3;
           P64[Hp - 208] = R4;
           P64[Hp - 200] = R5;
           P64[Hp - 192] = R6;
           _sV1e::P64 = P64[Sp];
           P64[Hp - 184] = _sV1e::P64;
           _sV1f::P64 = P64[Sp + 8];
           P64[Hp - 176] = _sV1f::P64;
           _sV1g::P64 = P64[Sp + 16];
           P64[Hp - 168] = _sV1g::P64;
           _sV1h::P64 = P64[Sp + 24];
           P64[Hp - 160] = _sV1h::P64;
           _sV1i::P64 = P64[Sp + 32];
           P64[Hp - 152] = _sV1i::P64;
           _sV1j::P64 = P64[Sp + 40];
           P64[Hp - 144] = _sV1j::P64;
           _sV1k::P64 = P64[Sp + 48];
           P64[Hp - 136] = _sV1k::P64;
           I64[Hp - 128] = sat_sV1l_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = _sV1e::P64;
           P64[Hp - 64] = _sV1f::P64;
           P64[Hp - 56] = _sV1g::P64;
           P64[Hp - 48] = _sV1h::P64;
           P64[Hp - 40] = _sV1i::P64;
           P64[Hp - 32] = _sV1j::P64;
           P64[Hp - 24] = _sV1k::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 128;
           P64[Hp] = Hp - 240;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,)_entry;
         const 0;
         const 14;
         const 51539607552;
         const 0;
         const 12;
         const GHC.Enum.$fBounded(,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.793115353 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_slow() //  [R1]
         { []
         }
     {offset
       c136e: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_sV1M_entry() //  [R1]
         { []
         }
     {offset
       c136m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c136n; else goto c136o;
       c136n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c136o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV1M_info" {
     sat_sV1M_info:
         const sat_sV1M_entry;
         const 1;
         const 16;
 },
 sat_sV1L_entry() //  [R1]
         { []
         }
     {offset
       c136t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c136u; else goto c136v;
       c136u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c136v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV1L_info" {
     sat_sV1L_info:
         const sat_sV1L_entry;
         const 1;
         const 16;
 },
 sat_sV1K_entry() //  [R1]
         { []
         }
     {offset
       c136A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c136B; else goto c136C;
       c136B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c136C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV1K_info" {
     sat_sV1K_info:
         const sat_sV1K_entry;
         const 1;
         const 16;
 },
 sat_sV1J_entry() //  [R1]
         { []
         }
     {offset
       c136H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c136I; else goto c136J;
       c136I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c136J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV1J_info" {
     sat_sV1J_info:
         const sat_sV1J_entry;
         const 1;
         const 16;
 },
 sat_sV1I_entry() //  [R1]
         { []
         }
     {offset
       c136O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c136P; else goto c136Q;
       c136P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c136Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV1I_info" {
     sat_sV1I_info:
         const sat_sV1I_entry;
         const 1;
         const 16;
 },
 sat_sV1H_entry() //  [R1]
         { []
         }
     {offset
       c136V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c136W; else goto c136X;
       c136W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c136X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV1H_info" {
     sat_sV1H_info:
         const sat_sV1H_entry;
         const 1;
         const 16;
 },
 sat_sV1G_entry() //  [R1]
         { []
         }
     {offset
       c1372: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1373; else goto c1374;
       c1373: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1374: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV1G_info" {
     sat_sV1G_info:
         const sat_sV1G_entry;
         const 1;
         const 16;
 },
 sat_sV1F_entry() //  [R1]
         { []
         }
     {offset
       c1379: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c137a; else goto c137b;
       c137a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c137b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV1F_info" {
     sat_sV1F_info:
         const sat_sV1F_entry;
         const 1;
         const 16;
 },
 sat_sV1E_entry() //  [R1]
         { []
         }
     {offset
       c137g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c137h; else goto c137i;
       c137h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c137i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV1E_info" {
     sat_sV1E_info:
         const sat_sV1E_entry;
         const 1;
         const 16;
 },
 sat_sV1D_entry() //  [R1]
         { []
         }
     {offset
       c137n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c137o; else goto c137p;
       c137o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c137p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV1D_info" {
     sat_sV1D_info:
         const sat_sV1D_entry;
         const 1;
         const 16;
 },
 sat_sV1C_entry() //  [R1]
         { []
         }
     {offset
       c137u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c137v; else goto c137w;
       c137v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c137w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV1C_info" {
     sat_sV1C_info:
         const sat_sV1C_entry;
         const 1;
         const 16;
 },
 sat_sV1B_entry() //  [R1]
         { []
         }
     {offset
       c137B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c137C; else goto c137D;
       c137C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c137D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV1B_info" {
     sat_sV1B_info:
         const sat_sV1B_entry;
         const 1;
         const 16;
 },
 sat_sV1A_entry() //  [R1]
         { []
         }
     {offset
       c137I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c137J; else goto c137K;
       c137J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c137K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV1A_info" {
     sat_sV1A_info:
         const sat_sV1A_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       c137M: // global
           Hp = Hp + 424;
           if (Hp > HpLim) (likely: False) goto c137Q; else goto c137P;
       c137Q: // global
           HpAlloc = 424;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       c137P: // global
           I64[Hp - 416] = sat_sV1M_info;
           P64[Hp - 400] = P64[Sp + 56];
           I64[Hp - 392] = sat_sV1L_info;
           P64[Hp - 376] = P64[Sp + 48];
           I64[Hp - 368] = sat_sV1K_info;
           P64[Hp - 352] = P64[Sp + 40];
           I64[Hp - 344] = sat_sV1J_info;
           P64[Hp - 328] = P64[Sp + 32];
           I64[Hp - 320] = sat_sV1I_info;
           P64[Hp - 304] = P64[Sp + 24];
           I64[Hp - 296] = sat_sV1H_info;
           P64[Hp - 280] = P64[Sp + 16];
           I64[Hp - 272] = sat_sV1G_info;
           P64[Hp - 256] = P64[Sp + 8];
           I64[Hp - 248] = sat_sV1F_info;
           P64[Hp - 232] = P64[Sp];
           I64[Hp - 224] = sat_sV1E_info;
           P64[Hp - 208] = R6;
           I64[Hp - 200] = sat_sV1D_info;
           P64[Hp - 184] = R5;
           I64[Hp - 176] = sat_sV1C_info;
           P64[Hp - 160] = R4;
           I64[Hp - 152] = sat_sV1B_info;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = sat_sV1A_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = (,,,,,,,,,,,,)_con_info;
           P64[Hp - 96] = Hp - 128;
           P64[Hp - 88] = Hp - 152;
           P64[Hp - 80] = Hp - 176;
           P64[Hp - 72] = Hp - 200;
           P64[Hp - 64] = Hp - 224;
           P64[Hp - 56] = Hp - 248;
           P64[Hp - 48] = Hp - 272;
           P64[Hp - 40] = Hp - 296;
           P64[Hp - 32] = Hp - 320;
           P64[Hp - 24] = Hp - 344;
           P64[Hp - 16] = Hp - 368;
           P64[Hp - 8] = Hp - 392;
           P64[Hp] = Hp - 416;
           R1 = Hp - 103;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 55834574848;
         const 0;
         const 13;
         const GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.824087479 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_slow() //  [R1]
         { []
         }
     {offset
       c139a: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_sV2c_entry() //  [R1]
         { []
         }
     {offset
       c139i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c139j; else goto c139k;
       c139j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c139k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV2c_info" {
     sat_sV2c_info:
         const sat_sV2c_entry;
         const 1;
         const 16;
 },
 sat_sV2b_entry() //  [R1]
         { []
         }
     {offset
       c139p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c139q; else goto c139r;
       c139q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c139r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV2b_info" {
     sat_sV2b_info:
         const sat_sV2b_entry;
         const 1;
         const 16;
 },
 sat_sV2a_entry() //  [R1]
         { []
         }
     {offset
       c139w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c139x; else goto c139y;
       c139x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c139y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV2a_info" {
     sat_sV2a_info:
         const sat_sV2a_entry;
         const 1;
         const 16;
 },
 sat_sV29_entry() //  [R1]
         { []
         }
     {offset
       c139D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c139E; else goto c139F;
       c139E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c139F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV29_info" {
     sat_sV29_info:
         const sat_sV29_entry;
         const 1;
         const 16;
 },
 sat_sV28_entry() //  [R1]
         { []
         }
     {offset
       c139K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c139L; else goto c139M;
       c139L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c139M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV28_info" {
     sat_sV28_info:
         const sat_sV28_entry;
         const 1;
         const 16;
 },
 sat_sV27_entry() //  [R1]
         { []
         }
     {offset
       c139R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c139S; else goto c139T;
       c139S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c139T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV27_info" {
     sat_sV27_info:
         const sat_sV27_entry;
         const 1;
         const 16;
 },
 sat_sV26_entry() //  [R1]
         { []
         }
     {offset
       c139Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c139Z; else goto c13a0;
       c139Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13a0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV26_info" {
     sat_sV26_info:
         const sat_sV26_entry;
         const 1;
         const 16;
 },
 sat_sV25_entry() //  [R1]
         { []
         }
     {offset
       c13a5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13a6; else goto c13a7;
       c13a6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13a7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV25_info" {
     sat_sV25_info:
         const sat_sV25_entry;
         const 1;
         const 16;
 },
 sat_sV24_entry() //  [R1]
         { []
         }
     {offset
       c13ac: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13ad; else goto c13ae;
       c13ad: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13ae: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV24_info" {
     sat_sV24_info:
         const sat_sV24_entry;
         const 1;
         const 16;
 },
 sat_sV23_entry() //  [R1]
         { []
         }
     {offset
       c13aj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13ak; else goto c13al;
       c13ak: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13al: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV23_info" {
     sat_sV23_info:
         const sat_sV23_entry;
         const 1;
         const 16;
 },
 sat_sV22_entry() //  [R1]
         { []
         }
     {offset
       c13aq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13ar; else goto c13as;
       c13ar: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13as: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV22_info" {
     sat_sV22_info:
         const sat_sV22_entry;
         const 1;
         const 16;
 },
 sat_sV21_entry() //  [R1]
         { []
         }
     {offset
       c13ax: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13ay; else goto c13az;
       c13ay: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13az: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV21_info" {
     sat_sV21_info:
         const sat_sV21_entry;
         const 1;
         const 16;
 },
 sat_sV20_entry() //  [R1]
         { []
         }
     {offset
       c13aE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13aF; else goto c13aG;
       c13aF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13aG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV20_info" {
     sat_sV20_info:
         const sat_sV20_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       c13aI: // global
           Hp = Hp + 424;
           if (Hp > HpLim) (likely: False) goto c13aM; else goto c13aL;
       c13aM: // global
           HpAlloc = 424;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       c13aL: // global
           I64[Hp - 416] = sat_sV2c_info;
           P64[Hp - 400] = P64[Sp + 56];
           I64[Hp - 392] = sat_sV2b_info;
           P64[Hp - 376] = P64[Sp + 48];
           I64[Hp - 368] = sat_sV2a_info;
           P64[Hp - 352] = P64[Sp + 40];
           I64[Hp - 344] = sat_sV29_info;
           P64[Hp - 328] = P64[Sp + 32];
           I64[Hp - 320] = sat_sV28_info;
           P64[Hp - 304] = P64[Sp + 24];
           I64[Hp - 296] = sat_sV27_info;
           P64[Hp - 280] = P64[Sp + 16];
           I64[Hp - 272] = sat_sV26_info;
           P64[Hp - 256] = P64[Sp + 8];
           I64[Hp - 248] = sat_sV25_info;
           P64[Hp - 232] = P64[Sp];
           I64[Hp - 224] = sat_sV24_info;
           P64[Hp - 208] = R6;
           I64[Hp - 200] = sat_sV23_info;
           P64[Hp - 184] = R5;
           I64[Hp - 176] = sat_sV22_info;
           P64[Hp - 160] = R4;
           I64[Hp - 152] = sat_sV21_info;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = sat_sV20_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = (,,,,,,,,,,,,)_con_info;
           P64[Hp - 96] = Hp - 128;
           P64[Hp - 88] = Hp - 152;
           P64[Hp - 80] = Hp - 176;
           P64[Hp - 72] = Hp - 200;
           P64[Hp - 64] = Hp - 224;
           P64[Hp - 56] = Hp - 248;
           P64[Hp - 48] = Hp - 272;
           P64[Hp - 40] = Hp - 296;
           P64[Hp - 32] = Hp - 320;
           P64[Hp - 24] = Hp - 344;
           P64[Hp - 16] = Hp - 368;
           P64[Hp - 8] = Hp - 392;
           P64[Hp] = Hp - 416;
           R1 = Hp - 103;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 55834574848;
         const 0;
         const 13;
         const GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.853749935 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,)_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c13c6: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,)_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_sV2r_entry() //  [R1]
         { []
         }
     {offset
       c13ce: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c13cf; else goto c13cg;
       c13cf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13cg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 80] = P64[R1 + 56];
           P64[Sp - 72] = P64[R1 + 64];
           P64[Sp - 64] = P64[R1 + 72];
           P64[Sp - 56] = P64[R1 + 80];
           P64[Sp - 48] = P64[R1 + 88];
           P64[Sp - 40] = P64[R1 + 96];
           P64[Sp - 32] = P64[R1 + 104];
           P64[Sp - 24] = P64[R1 + 112];
           Sp = Sp - 80;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 88, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV2r_info" {
     sat_sV2r_info:
         const sat_sV2r_entry;
         const 13;
         const 15;
 },
 sat_sV2q_entry() //  [R1]
         { []
         }
     {offset
       c13cl: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c13cm; else goto c13cn;
       c13cm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13cn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 80] = P64[R1 + 56];
           P64[Sp - 72] = P64[R1 + 64];
           P64[Sp - 64] = P64[R1 + 72];
           P64[Sp - 56] = P64[R1 + 80];
           P64[Sp - 48] = P64[R1 + 88];
           P64[Sp - 40] = P64[R1 + 96];
           P64[Sp - 32] = P64[R1 + 104];
           P64[Sp - 24] = P64[R1 + 112];
           Sp = Sp - 80;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 88, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV2q_info" {
     sat_sV2q_info:
         const sat_sV2q_entry;
         const 13;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c13cp: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c13ct; else goto c13cs;
       c13ct: // global
           HpAlloc = 264;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       c13cs: // global
           I64[Hp - 256] = sat_sV2r_info;
           P64[Hp - 240] = R2;
           P64[Hp - 232] = R3;
           P64[Hp - 224] = R4;
           P64[Hp - 216] = R5;
           P64[Hp - 208] = R6;
           _sV2i::P64 = P64[Sp];
           P64[Hp - 200] = _sV2i::P64;
           _sV2j::P64 = P64[Sp + 8];
           P64[Hp - 192] = _sV2j::P64;
           _sV2k::P64 = P64[Sp + 16];
           P64[Hp - 184] = _sV2k::P64;
           _sV2l::P64 = P64[Sp + 24];
           P64[Hp - 176] = _sV2l::P64;
           _sV2m::P64 = P64[Sp + 32];
           P64[Hp - 168] = _sV2m::P64;
           _sV2n::P64 = P64[Sp + 40];
           P64[Hp - 160] = _sV2n::P64;
           _sV2o::P64 = P64[Sp + 48];
           P64[Hp - 152] = _sV2o::P64;
           _sV2p::P64 = P64[Sp + 56];
           P64[Hp - 144] = _sV2p::P64;
           I64[Hp - 136] = sat_sV2q_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           P64[Hp - 88] = R6;
           P64[Hp - 80] = _sV2i::P64;
           P64[Hp - 72] = _sV2j::P64;
           P64[Hp - 64] = _sV2k::P64;
           P64[Hp - 56] = _sV2l::P64;
           P64[Hp - 48] = _sV2m::P64;
           P64[Hp - 40] = _sV2n::P64;
           P64[Hp - 32] = _sV2o::P64;
           P64[Hp - 24] = _sV2p::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 136;
           P64[Hp] = Hp - 256;
           R1 = Hp - 15;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,)_entry;
         const 0;
         const 14;
         const 55834574848;
         const 0;
         const 13;
         const GHC.Enum.$fBounded(,,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.868398931 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_slow() //  [R1]
         { []
         }
     {offset
       c13d2: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2,
                                                                   R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_sV2T_entry() //  [R1]
         { []
         }
     {offset
       c13da: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13db; else goto c13dc;
       c13db: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13dc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV2T_info" {
     sat_sV2T_info:
         const sat_sV2T_entry;
         const 1;
         const 16;
 },
 sat_sV2S_entry() //  [R1]
         { []
         }
     {offset
       c13dh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13di; else goto c13dj;
       c13di: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13dj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV2S_info" {
     sat_sV2S_info:
         const sat_sV2S_entry;
         const 1;
         const 16;
 },
 sat_sV2R_entry() //  [R1]
         { []
         }
     {offset
       c13do: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13dp; else goto c13dq;
       c13dp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13dq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV2R_info" {
     sat_sV2R_info:
         const sat_sV2R_entry;
         const 1;
         const 16;
 },
 sat_sV2Q_entry() //  [R1]
         { []
         }
     {offset
       c13dv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13dw; else goto c13dx;
       c13dw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13dx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV2Q_info" {
     sat_sV2Q_info:
         const sat_sV2Q_entry;
         const 1;
         const 16;
 },
 sat_sV2P_entry() //  [R1]
         { []
         }
     {offset
       c13dC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13dD; else goto c13dE;
       c13dD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13dE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV2P_info" {
     sat_sV2P_info:
         const sat_sV2P_entry;
         const 1;
         const 16;
 },
 sat_sV2O_entry() //  [R1]
         { []
         }
     {offset
       c13dJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13dK; else goto c13dL;
       c13dK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13dL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV2O_info" {
     sat_sV2O_info:
         const sat_sV2O_entry;
         const 1;
         const 16;
 },
 sat_sV2N_entry() //  [R1]
         { []
         }
     {offset
       c13dQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13dR; else goto c13dS;
       c13dR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13dS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV2N_info" {
     sat_sV2N_info:
         const sat_sV2N_entry;
         const 1;
         const 16;
 },
 sat_sV2M_entry() //  [R1]
         { []
         }
     {offset
       c13dX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13dY; else goto c13dZ;
       c13dY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13dZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV2M_info" {
     sat_sV2M_info:
         const sat_sV2M_entry;
         const 1;
         const 16;
 },
 sat_sV2L_entry() //  [R1]
         { []
         }
     {offset
       c13e4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13e5; else goto c13e6;
       c13e5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13e6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV2L_info" {
     sat_sV2L_info:
         const sat_sV2L_entry;
         const 1;
         const 16;
 },
 sat_sV2K_entry() //  [R1]
         { []
         }
     {offset
       c13eb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13ec; else goto c13ed;
       c13ec: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13ed: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV2K_info" {
     sat_sV2K_info:
         const sat_sV2K_entry;
         const 1;
         const 16;
 },
 sat_sV2J_entry() //  [R1]
         { []
         }
     {offset
       c13ei: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13ej; else goto c13ek;
       c13ej: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13ek: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV2J_info" {
     sat_sV2J_info:
         const sat_sV2J_entry;
         const 1;
         const 16;
 },
 sat_sV2I_entry() //  [R1]
         { []
         }
     {offset
       c13ep: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13eq; else goto c13er;
       c13eq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13er: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV2I_info" {
     sat_sV2I_info:
         const sat_sV2I_entry;
         const 1;
         const 16;
 },
 sat_sV2H_entry() //  [R1]
         { []
         }
     {offset
       c13ew: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13ex; else goto c13ey;
       c13ex: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13ey: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV2H_info" {
     sat_sV2H_info:
         const sat_sV2H_entry;
         const 1;
         const 16;
 },
 sat_sV2G_entry() //  [R1]
         { []
         }
     {offset
       c13eD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13eE; else goto c13eF;
       c13eE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13eF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV2G_info" {
     sat_sV2G_info:
         const sat_sV2G_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_entry() //  [R2, R3,
                                                           R4, R5, R6]
         { []
         }
     {offset
       c13eH: // global
           Hp = Hp + 456;
           if (Hp > HpLim) (likely: False) goto c13eL; else goto c13eK;
       c13eL: // global
           HpAlloc = 456;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c13eK: // global
           I64[Hp - 448] = sat_sV2T_info;
           P64[Hp - 432] = P64[Sp + 64];
           I64[Hp - 424] = sat_sV2S_info;
           P64[Hp - 408] = P64[Sp + 56];
           I64[Hp - 400] = sat_sV2R_info;
           P64[Hp - 384] = P64[Sp + 48];
           I64[Hp - 376] = sat_sV2Q_info;
           P64[Hp - 360] = P64[Sp + 40];
           I64[Hp - 352] = sat_sV2P_info;
           P64[Hp - 336] = P64[Sp + 32];
           I64[Hp - 328] = sat_sV2O_info;
           P64[Hp - 312] = P64[Sp + 24];
           I64[Hp - 304] = sat_sV2N_info;
           P64[Hp - 288] = P64[Sp + 16];
           I64[Hp - 280] = sat_sV2M_info;
           P64[Hp - 264] = P64[Sp + 8];
           I64[Hp - 256] = sat_sV2L_info;
           P64[Hp - 240] = P64[Sp];
           I64[Hp - 232] = sat_sV2K_info;
           P64[Hp - 216] = R6;
           I64[Hp - 208] = sat_sV2J_info;
           P64[Hp - 192] = R5;
           I64[Hp - 184] = sat_sV2I_info;
           P64[Hp - 168] = R4;
           I64[Hp - 160] = sat_sV2H_info;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_sV2G_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = (,,,,,,,,,,,,,)_con_info;
           P64[Hp - 104] = Hp - 136;
           P64[Hp - 96] = Hp - 160;
           P64[Hp - 88] = Hp - 184;
           P64[Hp - 80] = Hp - 208;
           P64[Hp - 72] = Hp - 232;
           P64[Hp - 64] = Hp - 256;
           P64[Hp - 56] = Hp - 280;
           P64[Hp - 48] = Hp - 304;
           P64[Hp - 40] = Hp - 328;
           P64[Hp - 32] = Hp - 352;
           P64[Hp - 24] = Hp - 376;
           P64[Hp - 16] = Hp - 400;
           P64[Hp - 8] = Hp - 424;
           P64[Hp] = Hp - 448;
           R1 = Hp - 111;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 60129542144;
         const 0;
         const 14;
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.902639236 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_slow() //  [R1]
         { []
         }
     {offset
       c13gb: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2,
                                                                   R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_sV3l_entry() //  [R1]
         { []
         }
     {offset
       c13gj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13gk; else goto c13gl;
       c13gk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13gl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3l_info" {
     sat_sV3l_info:
         const sat_sV3l_entry;
         const 1;
         const 16;
 },
 sat_sV3k_entry() //  [R1]
         { []
         }
     {offset
       c13gq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13gr; else goto c13gs;
       c13gr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13gs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3k_info" {
     sat_sV3k_info:
         const sat_sV3k_entry;
         const 1;
         const 16;
 },
 sat_sV3j_entry() //  [R1]
         { []
         }
     {offset
       c13gx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13gy; else goto c13gz;
       c13gy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13gz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3j_info" {
     sat_sV3j_info:
         const sat_sV3j_entry;
         const 1;
         const 16;
 },
 sat_sV3i_entry() //  [R1]
         { []
         }
     {offset
       c13gE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13gF; else goto c13gG;
       c13gF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13gG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3i_info" {
     sat_sV3i_info:
         const sat_sV3i_entry;
         const 1;
         const 16;
 },
 sat_sV3h_entry() //  [R1]
         { []
         }
     {offset
       c13gL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13gM; else goto c13gN;
       c13gM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13gN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3h_info" {
     sat_sV3h_info:
         const sat_sV3h_entry;
         const 1;
         const 16;
 },
 sat_sV3g_entry() //  [R1]
         { []
         }
     {offset
       c13gS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13gT; else goto c13gU;
       c13gT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13gU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3g_info" {
     sat_sV3g_info:
         const sat_sV3g_entry;
         const 1;
         const 16;
 },
 sat_sV3f_entry() //  [R1]
         { []
         }
     {offset
       c13gZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13h0; else goto c13h1;
       c13h0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13h1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3f_info" {
     sat_sV3f_info:
         const sat_sV3f_entry;
         const 1;
         const 16;
 },
 sat_sV3e_entry() //  [R1]
         { []
         }
     {offset
       c13h6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13h7; else goto c13h8;
       c13h7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13h8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3e_info" {
     sat_sV3e_info:
         const sat_sV3e_entry;
         const 1;
         const 16;
 },
 sat_sV3d_entry() //  [R1]
         { []
         }
     {offset
       c13hd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13he; else goto c13hf;
       c13he: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13hf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3d_info" {
     sat_sV3d_info:
         const sat_sV3d_entry;
         const 1;
         const 16;
 },
 sat_sV3c_entry() //  [R1]
         { []
         }
     {offset
       c13hk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13hl; else goto c13hm;
       c13hl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13hm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3c_info" {
     sat_sV3c_info:
         const sat_sV3c_entry;
         const 1;
         const 16;
 },
 sat_sV3b_entry() //  [R1]
         { []
         }
     {offset
       c13hr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13hs; else goto c13ht;
       c13hs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13ht: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3b_info" {
     sat_sV3b_info:
         const sat_sV3b_entry;
         const 1;
         const 16;
 },
 sat_sV3a_entry() //  [R1]
         { []
         }
     {offset
       c13hy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13hz; else goto c13hA;
       c13hz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13hA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3a_info" {
     sat_sV3a_info:
         const sat_sV3a_entry;
         const 1;
         const 16;
 },
 sat_sV39_entry() //  [R1]
         { []
         }
     {offset
       c13hF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13hG; else goto c13hH;
       c13hG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13hH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV39_info" {
     sat_sV39_info:
         const sat_sV39_entry;
         const 1;
         const 16;
 },
 sat_sV38_entry() //  [R1]
         { []
         }
     {offset
       c13hM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13hN; else goto c13hO;
       c13hN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13hO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV38_info" {
     sat_sV38_info:
         const sat_sV38_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_entry() //  [R2, R3,
                                                           R4, R5, R6]
         { []
         }
     {offset
       c13hQ: // global
           Hp = Hp + 456;
           if (Hp > HpLim) (likely: False) goto c13hU; else goto c13hT;
       c13hU: // global
           HpAlloc = 456;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c13hT: // global
           I64[Hp - 448] = sat_sV3l_info;
           P64[Hp - 432] = P64[Sp + 64];
           I64[Hp - 424] = sat_sV3k_info;
           P64[Hp - 408] = P64[Sp + 56];
           I64[Hp - 400] = sat_sV3j_info;
           P64[Hp - 384] = P64[Sp + 48];
           I64[Hp - 376] = sat_sV3i_info;
           P64[Hp - 360] = P64[Sp + 40];
           I64[Hp - 352] = sat_sV3h_info;
           P64[Hp - 336] = P64[Sp + 32];
           I64[Hp - 328] = sat_sV3g_info;
           P64[Hp - 312] = P64[Sp + 24];
           I64[Hp - 304] = sat_sV3f_info;
           P64[Hp - 288] = P64[Sp + 16];
           I64[Hp - 280] = sat_sV3e_info;
           P64[Hp - 264] = P64[Sp + 8];
           I64[Hp - 256] = sat_sV3d_info;
           P64[Hp - 240] = P64[Sp];
           I64[Hp - 232] = sat_sV3c_info;
           P64[Hp - 216] = R6;
           I64[Hp - 208] = sat_sV3b_info;
           P64[Hp - 192] = R5;
           I64[Hp - 184] = sat_sV3a_info;
           P64[Hp - 168] = R4;
           I64[Hp - 160] = sat_sV39_info;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_sV38_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = (,,,,,,,,,,,,,)_con_info;
           P64[Hp - 104] = Hp - 136;
           P64[Hp - 96] = Hp - 160;
           P64[Hp - 88] = Hp - 184;
           P64[Hp - 80] = Hp - 208;
           P64[Hp - 72] = Hp - 232;
           P64[Hp - 64] = Hp - 256;
           P64[Hp - 56] = Hp - 280;
           P64[Hp - 48] = Hp - 304;
           P64[Hp - 40] = Hp - 328;
           P64[Hp - 32] = Hp - 352;
           P64[Hp - 24] = Hp - 376;
           P64[Hp - 16] = Hp - 400;
           P64[Hp - 8] = Hp - 424;
           P64[Hp] = Hp - 448;
           R1 = Hp - 111;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 60129542144;
         const 0;
         const 14;
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.932999797 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,)_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c13jk: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,)_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_sV3B_entry() //  [R1]
         { []
         }
     {offset
       c13js: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c13jt; else goto c13ju;
       c13jt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13ju: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 88] = P64[R1 + 56];
           P64[Sp - 80] = P64[R1 + 64];
           P64[Sp - 72] = P64[R1 + 72];
           P64[Sp - 64] = P64[R1 + 80];
           P64[Sp - 56] = P64[R1 + 88];
           P64[Sp - 48] = P64[R1 + 96];
           P64[Sp - 40] = P64[R1 + 104];
           P64[Sp - 32] = P64[R1 + 112];
           P64[Sp - 24] = P64[R1 + 120];
           Sp = Sp - 88;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 96, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3B_info" {
     sat_sV3B_info:
         const sat_sV3B_entry;
         const 14;
         const 15;
 },
 sat_sV3A_entry() //  [R1]
         { []
         }
     {offset
       c13jz: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c13jA; else goto c13jB;
       c13jA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13jB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 88] = P64[R1 + 56];
           P64[Sp - 80] = P64[R1 + 64];
           P64[Sp - 72] = P64[R1 + 72];
           P64[Sp - 64] = P64[R1 + 80];
           P64[Sp - 56] = P64[R1 + 88];
           P64[Sp - 48] = P64[R1 + 96];
           P64[Sp - 40] = P64[R1 + 104];
           P64[Sp - 32] = P64[R1 + 112];
           P64[Sp - 24] = P64[R1 + 120];
           Sp = Sp - 88;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 96, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3A_info" {
     sat_sV3A_info:
         const sat_sV3A_entry;
         const 14;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c13jD: // global
           Hp = Hp + 280;
           if (Hp > HpLim) (likely: False) goto c13jH; else goto c13jG;
       c13jH: // global
           HpAlloc = 280;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c13jG: // global
           I64[Hp - 272] = sat_sV3B_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           P64[Hp - 240] = R4;
           P64[Hp - 232] = R5;
           P64[Hp - 224] = R6;
           _sV3r::P64 = P64[Sp];
           P64[Hp - 216] = _sV3r::P64;
           _sV3s::P64 = P64[Sp + 8];
           P64[Hp - 208] = _sV3s::P64;
           _sV3t::P64 = P64[Sp + 16];
           P64[Hp - 200] = _sV3t::P64;
           _sV3u::P64 = P64[Sp + 24];
           P64[Hp - 192] = _sV3u::P64;
           _sV3v::P64 = P64[Sp + 32];
           P64[Hp - 184] = _sV3v::P64;
           _sV3w::P64 = P64[Sp + 40];
           P64[Hp - 176] = _sV3w::P64;
           _sV3x::P64 = P64[Sp + 48];
           P64[Hp - 168] = _sV3x::P64;
           _sV3y::P64 = P64[Sp + 56];
           P64[Hp - 160] = _sV3y::P64;
           _sV3z::P64 = P64[Sp + 64];
           P64[Hp - 152] = _sV3z::P64;
           I64[Hp - 144] = sat_sV3A_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           P64[Hp - 104] = R5;
           P64[Hp - 96] = R6;
           P64[Hp - 88] = _sV3r::P64;
           P64[Hp - 80] = _sV3s::P64;
           P64[Hp - 72] = _sV3t::P64;
           P64[Hp - 64] = _sV3u::P64;
           P64[Hp - 56] = _sV3v::P64;
           P64[Hp - 48] = _sV3w::P64;
           P64[Hp - 40] = _sV3x::P64;
           P64[Hp - 32] = _sV3y::P64;
           P64[Hp - 24] = _sV3z::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 144;
           P64[Hp] = Hp - 272;
           R1 = Hp - 15;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,)_entry;
         const 0;
         const 14;
         const 60129542144;
         const 0;
         const 14;
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.949127105 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_slow() //  [R1]
         { []
         }
     {offset
       c13ki: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                    R5,
                                                                    R4,
                                                                    R3,
                                                                    R2,
                                                                    R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_sV45_entry() //  [R1]
         { []
         }
     {offset
       c13kq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13kr; else goto c13ks;
       c13kr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13ks: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV45_info" {
     sat_sV45_info:
         const sat_sV45_entry;
         const 1;
         const 16;
 },
 sat_sV44_entry() //  [R1]
         { []
         }
     {offset
       c13kx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13ky; else goto c13kz;
       c13ky: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13kz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV44_info" {
     sat_sV44_info:
         const sat_sV44_entry;
         const 1;
         const 16;
 },
 sat_sV43_entry() //  [R1]
         { []
         }
     {offset
       c13kE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13kF; else goto c13kG;
       c13kF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13kG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV43_info" {
     sat_sV43_info:
         const sat_sV43_entry;
         const 1;
         const 16;
 },
 sat_sV42_entry() //  [R1]
         { []
         }
     {offset
       c13kL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13kM; else goto c13kN;
       c13kM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13kN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV42_info" {
     sat_sV42_info:
         const sat_sV42_entry;
         const 1;
         const 16;
 },
 sat_sV41_entry() //  [R1]
         { []
         }
     {offset
       c13kS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13kT; else goto c13kU;
       c13kT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13kU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV41_info" {
     sat_sV41_info:
         const sat_sV41_entry;
         const 1;
         const 16;
 },
 sat_sV40_entry() //  [R1]
         { []
         }
     {offset
       c13kZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13l0; else goto c13l1;
       c13l0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13l1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV40_info" {
     sat_sV40_info:
         const sat_sV40_entry;
         const 1;
         const 16;
 },
 sat_sV3Z_entry() //  [R1]
         { []
         }
     {offset
       c13l6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13l7; else goto c13l8;
       c13l7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13l8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3Z_info" {
     sat_sV3Z_info:
         const sat_sV3Z_entry;
         const 1;
         const 16;
 },
 sat_sV3Y_entry() //  [R1]
         { []
         }
     {offset
       c13ld: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13le; else goto c13lf;
       c13le: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13lf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3Y_info" {
     sat_sV3Y_info:
         const sat_sV3Y_entry;
         const 1;
         const 16;
 },
 sat_sV3X_entry() //  [R1]
         { []
         }
     {offset
       c13lk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13ll; else goto c13lm;
       c13ll: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13lm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3X_info" {
     sat_sV3X_info:
         const sat_sV3X_entry;
         const 1;
         const 16;
 },
 sat_sV3W_entry() //  [R1]
         { []
         }
     {offset
       c13lr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13ls; else goto c13lt;
       c13ls: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13lt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3W_info" {
     sat_sV3W_info:
         const sat_sV3W_entry;
         const 1;
         const 16;
 },
 sat_sV3V_entry() //  [R1]
         { []
         }
     {offset
       c13ly: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13lz; else goto c13lA;
       c13lz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13lA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3V_info" {
     sat_sV3V_info:
         const sat_sV3V_entry;
         const 1;
         const 16;
 },
 sat_sV3U_entry() //  [R1]
         { []
         }
     {offset
       c13lF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13lG; else goto c13lH;
       c13lG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13lH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3U_info" {
     sat_sV3U_info:
         const sat_sV3U_entry;
         const 1;
         const 16;
 },
 sat_sV3T_entry() //  [R1]
         { []
         }
     {offset
       c13lM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13lN; else goto c13lO;
       c13lN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13lO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3T_info" {
     sat_sV3T_info:
         const sat_sV3T_entry;
         const 1;
         const 16;
 },
 sat_sV3S_entry() //  [R1]
         { []
         }
     {offset
       c13lT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13lU; else goto c13lV;
       c13lU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13lV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3S_info" {
     sat_sV3S_info:
         const sat_sV3S_entry;
         const 1;
         const 16;
 },
 sat_sV3R_entry() //  [R1]
         { []
         }
     {offset
       c13m0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13m1; else goto c13m2;
       c13m1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13m2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV3R_info" {
     sat_sV3R_info:
         const sat_sV3R_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_entry() //  [R2, R3,
                                                            R4, R5, R6]
         { []
         }
     {offset
       c13m4: // global
           Hp = Hp + 488;
           if (Hp > HpLim) (likely: False) goto c13m8; else goto c13m7;
       c13m8: // global
           HpAlloc = 488;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       c13m7: // global
           I64[Hp - 480] = sat_sV45_info;
           P64[Hp - 464] = P64[Sp + 72];
           I64[Hp - 456] = sat_sV44_info;
           P64[Hp - 440] = P64[Sp + 64];
           I64[Hp - 432] = sat_sV43_info;
           P64[Hp - 416] = P64[Sp + 56];
           I64[Hp - 408] = sat_sV42_info;
           P64[Hp - 392] = P64[Sp + 48];
           I64[Hp - 384] = sat_sV41_info;
           P64[Hp - 368] = P64[Sp + 40];
           I64[Hp - 360] = sat_sV40_info;
           P64[Hp - 344] = P64[Sp + 32];
           I64[Hp - 336] = sat_sV3Z_info;
           P64[Hp - 320] = P64[Sp + 24];
           I64[Hp - 312] = sat_sV3Y_info;
           P64[Hp - 296] = P64[Sp + 16];
           I64[Hp - 288] = sat_sV3X_info;
           P64[Hp - 272] = P64[Sp + 8];
           I64[Hp - 264] = sat_sV3W_info;
           P64[Hp - 248] = P64[Sp];
           I64[Hp - 240] = sat_sV3V_info;
           P64[Hp - 224] = R6;
           I64[Hp - 216] = sat_sV3U_info;
           P64[Hp - 200] = R5;
           I64[Hp - 192] = sat_sV3T_info;
           P64[Hp - 176] = R4;
           I64[Hp - 168] = sat_sV3S_info;
           P64[Hp - 152] = R3;
           I64[Hp - 144] = sat_sV3R_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = (,,,,,,,,,,,,,,)_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 168;
           P64[Hp - 96] = Hp - 192;
           P64[Hp - 88] = Hp - 216;
           P64[Hp - 80] = Hp - 240;
           P64[Hp - 72] = Hp - 264;
           P64[Hp - 64] = Hp - 288;
           P64[Hp - 56] = Hp - 312;
           P64[Hp - 48] = Hp - 336;
           P64[Hp - 40] = Hp - 360;
           P64[Hp - 32] = Hp - 384;
           P64[Hp - 24] = Hp - 408;
           P64[Hp - 16] = Hp - 432;
           P64[Hp - 8] = Hp - 456;
           P64[Hp] = Hp - 480;
           R1 = Hp - 119;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 64424509440;
         const 0;
         const 15;
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:40.985013639 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_slow() //  [R1]
         { []
         }
     {offset
       c13nE: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_entry(R6,
                                                                    R5,
                                                                    R4,
                                                                    R3,
                                                                    R2,
                                                                    R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_sV4z_entry() //  [R1]
         { []
         }
     {offset
       c13nM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13nN; else goto c13nO;
       c13nN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13nO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV4z_info" {
     sat_sV4z_info:
         const sat_sV4z_entry;
         const 1;
         const 16;
 },
 sat_sV4y_entry() //  [R1]
         { []
         }
     {offset
       c13nT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13nU; else goto c13nV;
       c13nU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13nV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV4y_info" {
     sat_sV4y_info:
         const sat_sV4y_entry;
         const 1;
         const 16;
 },
 sat_sV4x_entry() //  [R1]
         { []
         }
     {offset
       c13o0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13o1; else goto c13o2;
       c13o1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13o2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV4x_info" {
     sat_sV4x_info:
         const sat_sV4x_entry;
         const 1;
         const 16;
 },
 sat_sV4w_entry() //  [R1]
         { []
         }
     {offset
       c13o7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13o8; else goto c13o9;
       c13o8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13o9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV4w_info" {
     sat_sV4w_info:
         const sat_sV4w_entry;
         const 1;
         const 16;
 },
 sat_sV4v_entry() //  [R1]
         { []
         }
     {offset
       c13oe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13of; else goto c13og;
       c13of: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13og: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV4v_info" {
     sat_sV4v_info:
         const sat_sV4v_entry;
         const 1;
         const 16;
 },
 sat_sV4u_entry() //  [R1]
         { []
         }
     {offset
       c13ol: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13om; else goto c13on;
       c13om: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13on: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV4u_info" {
     sat_sV4u_info:
         const sat_sV4u_entry;
         const 1;
         const 16;
 },
 sat_sV4t_entry() //  [R1]
         { []
         }
     {offset
       c13os: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13ot; else goto c13ou;
       c13ot: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13ou: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV4t_info" {
     sat_sV4t_info:
         const sat_sV4t_entry;
         const 1;
         const 16;
 },
 sat_sV4s_entry() //  [R1]
         { []
         }
     {offset
       c13oz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13oA; else goto c13oB;
       c13oA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13oB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV4s_info" {
     sat_sV4s_info:
         const sat_sV4s_entry;
         const 1;
         const 16;
 },
 sat_sV4r_entry() //  [R1]
         { []
         }
     {offset
       c13oG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13oH; else goto c13oI;
       c13oH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13oI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV4r_info" {
     sat_sV4r_info:
         const sat_sV4r_entry;
         const 1;
         const 16;
 },
 sat_sV4q_entry() //  [R1]
         { []
         }
     {offset
       c13oN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13oO; else goto c13oP;
       c13oO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13oP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV4q_info" {
     sat_sV4q_info:
         const sat_sV4q_entry;
         const 1;
         const 16;
 },
 sat_sV4p_entry() //  [R1]
         { []
         }
     {offset
       c13oU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13oV; else goto c13oW;
       c13oV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13oW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV4p_info" {
     sat_sV4p_info:
         const sat_sV4p_entry;
         const 1;
         const 16;
 },
 sat_sV4o_entry() //  [R1]
         { []
         }
     {offset
       c13p1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13p2; else goto c13p3;
       c13p2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13p3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV4o_info" {
     sat_sV4o_info:
         const sat_sV4o_entry;
         const 1;
         const 16;
 },
 sat_sV4n_entry() //  [R1]
         { []
         }
     {offset
       c13p8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13p9; else goto c13pa;
       c13p9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13pa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV4n_info" {
     sat_sV4n_info:
         const sat_sV4n_entry;
         const 1;
         const 16;
 },
 sat_sV4m_entry() //  [R1]
         { []
         }
     {offset
       c13pf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13pg; else goto c13ph;
       c13pg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13ph: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV4m_info" {
     sat_sV4m_info:
         const sat_sV4m_entry;
         const 1;
         const 16;
 },
 sat_sV4l_entry() //  [R1]
         { []
         }
     {offset
       c13pm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13pn; else goto c13po;
       c13pn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13po: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV4l_info" {
     sat_sV4l_info:
         const sat_sV4l_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_entry() //  [R2, R3,
                                                            R4, R5, R6]
         { []
         }
     {offset
       c13pq: // global
           Hp = Hp + 488;
           if (Hp > HpLim) (likely: False) goto c13pu; else goto c13pt;
       c13pu: // global
           HpAlloc = 488;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       c13pt: // global
           I64[Hp - 480] = sat_sV4z_info;
           P64[Hp - 464] = P64[Sp + 72];
           I64[Hp - 456] = sat_sV4y_info;
           P64[Hp - 440] = P64[Sp + 64];
           I64[Hp - 432] = sat_sV4x_info;
           P64[Hp - 416] = P64[Sp + 56];
           I64[Hp - 408] = sat_sV4w_info;
           P64[Hp - 392] = P64[Sp + 48];
           I64[Hp - 384] = sat_sV4v_info;
           P64[Hp - 368] = P64[Sp + 40];
           I64[Hp - 360] = sat_sV4u_info;
           P64[Hp - 344] = P64[Sp + 32];
           I64[Hp - 336] = sat_sV4t_info;
           P64[Hp - 320] = P64[Sp + 24];
           I64[Hp - 312] = sat_sV4s_info;
           P64[Hp - 296] = P64[Sp + 16];
           I64[Hp - 288] = sat_sV4r_info;
           P64[Hp - 272] = P64[Sp + 8];
           I64[Hp - 264] = sat_sV4q_info;
           P64[Hp - 248] = P64[Sp];
           I64[Hp - 240] = sat_sV4p_info;
           P64[Hp - 224] = R6;
           I64[Hp - 216] = sat_sV4o_info;
           P64[Hp - 200] = R5;
           I64[Hp - 192] = sat_sV4n_info;
           P64[Hp - 176] = R4;
           I64[Hp - 168] = sat_sV4m_info;
           P64[Hp - 152] = R3;
           I64[Hp - 144] = sat_sV4l_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = (,,,,,,,,,,,,,,)_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 168;
           P64[Hp - 96] = Hp - 192;
           P64[Hp - 88] = Hp - 216;
           P64[Hp - 80] = Hp - 240;
           P64[Hp - 72] = Hp - 264;
           P64[Hp - 64] = Hp - 288;
           P64[Hp - 56] = Hp - 312;
           P64[Hp - 48] = Hp - 336;
           P64[Hp - 40] = Hp - 360;
           P64[Hp - 32] = Hp - 384;
           P64[Hp - 24] = Hp - 408;
           P64[Hp - 16] = Hp - 432;
           P64[Hp - 8] = Hp - 456;
           P64[Hp] = Hp - 480;
           R1 = Hp - 119;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 64424509440;
         const 0;
         const 15;
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.016255781 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c13r0: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_sV4Q_entry() //  [R1]
         { []
         }
     {offset
       c13r8: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c13r9; else goto c13ra;
       c13r9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13ra: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 96] = P64[R1 + 56];
           P64[Sp - 88] = P64[R1 + 64];
           P64[Sp - 80] = P64[R1 + 72];
           P64[Sp - 72] = P64[R1 + 80];
           P64[Sp - 64] = P64[R1 + 88];
           P64[Sp - 56] = P64[R1 + 96];
           P64[Sp - 48] = P64[R1 + 104];
           P64[Sp - 40] = P64[R1 + 112];
           P64[Sp - 32] = P64[R1 + 120];
           P64[Sp - 24] = P64[R1 + 128];
           Sp = Sp - 96;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                    R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 104, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV4Q_info" {
     sat_sV4Q_info:
         const sat_sV4Q_entry;
         const 15;
         const 15;
 },
 sat_sV4P_entry() //  [R1]
         { []
         }
     {offset
       c13rf: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c13rg; else goto c13rh;
       c13rg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13rh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 96] = P64[R1 + 56];
           P64[Sp - 88] = P64[R1 + 64];
           P64[Sp - 80] = P64[R1 + 72];
           P64[Sp - 72] = P64[R1 + 80];
           P64[Sp - 64] = P64[R1 + 88];
           P64[Sp - 56] = P64[R1 + 96];
           P64[Sp - 48] = P64[R1 + 104];
           P64[Sp - 40] = P64[R1 + 112];
           P64[Sp - 32] = P64[R1 + 120];
           P64[Sp - 24] = P64[R1 + 128];
           Sp = Sp - 96;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_entry(R6,
                                                                    R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 104, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV4P_info" {
     sat_sV4P_info:
         const sat_sV4P_entry;
         const 15;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c13rj: // global
           Hp = Hp + 296;
           if (Hp > HpLim) (likely: False) goto c13rn; else goto c13rm;
       c13rn: // global
           HpAlloc = 296;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       c13rm: // global
           I64[Hp - 288] = sat_sV4Q_info;
           P64[Hp - 272] = R2;
           P64[Hp - 264] = R3;
           P64[Hp - 256] = R4;
           P64[Hp - 248] = R5;
           P64[Hp - 240] = R6;
           _sV4F::P64 = P64[Sp];
           P64[Hp - 232] = _sV4F::P64;
           _sV4G::P64 = P64[Sp + 8];
           P64[Hp - 224] = _sV4G::P64;
           _sV4H::P64 = P64[Sp + 16];
           P64[Hp - 216] = _sV4H::P64;
           _sV4I::P64 = P64[Sp + 24];
           P64[Hp - 208] = _sV4I::P64;
           _sV4J::P64 = P64[Sp + 32];
           P64[Hp - 200] = _sV4J::P64;
           _sV4K::P64 = P64[Sp + 40];
           P64[Hp - 192] = _sV4K::P64;
           _sV4L::P64 = P64[Sp + 48];
           P64[Hp - 184] = _sV4L::P64;
           _sV4M::P64 = P64[Sp + 56];
           P64[Hp - 176] = _sV4M::P64;
           _sV4N::P64 = P64[Sp + 64];
           P64[Hp - 168] = _sV4N::P64;
           _sV4O::P64 = P64[Sp + 72];
           P64[Hp - 160] = _sV4O::P64;
           I64[Hp - 152] = sat_sV4P_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           P64[Hp - 112] = R5;
           P64[Hp - 104] = R6;
           P64[Hp - 96] = _sV4F::P64;
           P64[Hp - 88] = _sV4G::P64;
           P64[Hp - 80] = _sV4H::P64;
           P64[Hp - 72] = _sV4I::P64;
           P64[Hp - 64] = _sV4J::P64;
           P64[Hp - 56] = _sV4K::P64;
           P64[Hp - 48] = _sV4L::P64;
           P64[Hp - 40] = _sV4M::P64;
           P64[Hp - 32] = _sV4N::P64;
           P64[Hp - 24] = _sV4O::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 152;
           P64[Hp] = Hp - 288;
           R1 = Hp - 15;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_entry;
         const 0;
         const 14;
         const 64424509440;
         const 0;
         const 15;
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.026151557 UTC

[section ""data" . GHC.Enum.$fBoundedBool_closure" {
     GHC.Enum.$fBoundedBool_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Types.False_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.027834755 UTC

[section ""data" . GHC.Enum.$fBoundedOrdering_closure" {
     GHC.Enum.$fBoundedOrdering_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Types.LT_closure+1;
         const GHC.Types.GT_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.029745461 UTC

[section ""data" . GHC.Enum.$fBoundedVecCount_closure" {
     GHC.Enum.$fBoundedVecCount_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Types.Vec2_closure+1;
         const GHC.Types.Vec64_closure+6;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.031548527 UTC

[section ""data" . GHC.Enum.$fBoundedVecElem_closure" {
     GHC.Enum.$fBoundedVecElem_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Types.Int8ElemRep_closure+1;
         const GHC.Types.DoubleElemRep_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.034850268 UTC

[section ""data" . GHC.Enum.$dmpred_closure" {
     GHC.Enum.$dmpred_closure:
         const GHC.Enum.$dmpred_info;
 },
 sat_sV4W_entry() //  [R1]
         { []
         }
     {offset
       c13sd: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c13sk; else goto c13sl;
       c13sk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13sl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c13sb_info;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV4W_info" {
     sat_sV4W_info:
         const sat_sV4W_entry;
         const 2;
         const 18;
 },
 _c13sb() //  [R1]
         { []
         }
     {offset
       c13sb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c13so; else goto c13sn;
       c13so: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c13sn: // global
           _sV4V::I64 = I64[R1 + 7] - 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sV4V::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c13sb_info" {
     block_c13sb_info:
         const _c13sb;
         const 0;
         const 30;
 },
 GHC.Enum.$dmpred_entry() //  [R2, R3]
         { []
         }
     {offset
       c13sp: // global
           _sV4S::P64 = R3;
           _sV4R::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c13sq; else goto c13sr;
       c13sr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c13st; else goto c13ss;
       c13st: // global
           HpAlloc = 32;
           goto c13sq;
       c13sq: // global
           R3 = _sV4S::P64;
           R2 = _sV4R::P64;
           R1 = GHC.Enum.$dmpred_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c13ss: // global
           I64[Hp - 24] = sat_sV4W_info;
           P64[Hp - 8] = _sV4R::P64;
           P64[Hp] = _sV4S::P64;
           R2 = _sV4R::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$dmpred_info" {
     GHC.Enum.$dmpred_info:
         const GHC.Enum.$dmpred_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.043474265 UTC

[section ""data" . GHC.Enum.$dmsucc_closure" {
     GHC.Enum.$dmsucc_closure:
         const GHC.Enum.$dmsucc_info;
 },
 sat_sV52_entry() //  [R1]
         { []
         }
     {offset
       c13sU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c13t1; else goto c13t2;
       c13t1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13t2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c13sS_info;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV52_info" {
     sat_sV52_info:
         const sat_sV52_entry;
         const 2;
         const 18;
 },
 _c13sS() //  [R1]
         { []
         }
     {offset
       c13sS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c13t5; else goto c13t4;
       c13t5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c13t4: // global
           _sV51::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sV51::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c13sS_info" {
     block_c13sS_info:
         const _c13sS;
         const 0;
         const 30;
 },
 GHC.Enum.$dmsucc_entry() //  [R2, R3]
         { []
         }
     {offset
       c13t6: // global
           _sV4Y::P64 = R3;
           _sV4X::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c13t7; else goto c13t8;
       c13t8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c13ta; else goto c13t9;
       c13ta: // global
           HpAlloc = 32;
           goto c13t7;
       c13t7: // global
           R3 = _sV4Y::P64;
           R2 = _sV4X::P64;
           R1 = GHC.Enum.$dmsucc_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c13t9: // global
           I64[Hp - 24] = sat_sV52_info;
           P64[Hp - 8] = _sV4X::P64;
           P64[Hp] = _sV4Y::P64;
           R2 = _sV4X::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$dmsucc_info" {
     GHC.Enum.$dmsucc_info:
         const GHC.Enum.$dmsucc_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.050070816 UTC

[section ""cstring" . lvl11_rUQR_bytes" {
     lvl11_rUQR_bytes:
         I8[] [69,110,117,109,46,116,111,69,110,117,109,123]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.051665155 UTC

[section ""cstring" . lvl12_rUQS_bytes" {
     lvl12_rUQS_bytes:
         I8[] [125,58,32,116,97,103,32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.053164931 UTC

[section ""cstring" . lvl13_rUQT_bytes" {
     lvl13_rUQT_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,98,111,117,110,100,115,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.054858405 UTC

[section ""data" . lvl14_rUQU_closure" {
     lvl14_rUQU_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)2_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.062666019 UTC

[section ""data" . GHC.Enum.$wtoEnumError_closure" {
     GHC.Enum.$wtoEnumError_closure:
         const GHC.Enum.$wtoEnumError_info;
         const 0;
 },
 GHC.Enum.$wtoEnumError_slow() //  [R1]
         { []
         }
     {offset
       c13tw: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$wtoEnumError_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sV5d_entry() //  [R1]
         { []
         }
     {offset
       c13u0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c13u1; else goto c13u2;
       c13u1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13u2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV5d_info" {
     sat_sV5d_info:
         const sat_sV5d_entry;
         const 2;
         const 18;
 },
 sat_sV5c_entry() //  [R1]
         { []
         }
     {offset
       c13u8: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c13u9; else goto c13ua;
       c13u9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13ua: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV5c_info" {
     sat_sV5c_info:
         const sat_sV5c_entry;
         const 2;
         const 18;
 },
 sat_sV5g_entry() //  [R1]
         { []
         }
     {offset
       c13uc: // global
           _sV5g::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c13ud; else goto c13ue;
       c13ue: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c13ug; else goto c13uf;
       c13ug: // global
           HpAlloc = 112;
           goto c13ud;
       c13ud: // global
           R1 = _sV5g::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13uf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sV5g::P64;
           _sV53::P64 = P64[_sV5g::P64 + 16];
           _sV56::P64 = P64[_sV5g::P64 + 24];
           _sV57::P64 = P64[_sV5g::P64 + 32];
           I64[Hp - 104] = sat_sV5d_info;
           P64[Hp - 88] = _sV53::P64;
           P64[Hp - 80] = _sV57::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = GHC.Types.[]_closure+1;
           I64[Hp - 48] = sat_sV5c_info;
           P64[Hp - 32] = _sV53::P64;
           P64[Hp - 24] = _sV56::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = lvl14_rUQU_closure+2;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV5g_info" {
     sat_sV5g_info:
         const sat_sV5g_entry;
         const 3;
         const 4294967311;
         const SVzM_srt+200;
 },
 sat_sV5i_entry() //  [R1]
         { []
         }
     {offset
       c13ui: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c13um; else goto c13ul;
       c13um: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13ul: // global
           _sV53::P64 = P64[R1 + 16];
           _sV56::P64 = P64[R1 + 24];
           _sV57::P64 = P64[R1 + 32];
           I64[Hp - 56] = sat_sV5g_info;
           P64[Hp - 40] = _sV53::P64;
           P64[Hp - 32] = _sV56::P64;
           P64[Hp - 24] = _sV57::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R3 = Hp - 14;
           R2 = lvl13_rUQT_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sV5i_info" {
     sat_sV5i_info:
         const sat_sV5i_entry;
         const 3;
         const 4294967311;
         const SVzM_srt+200;
 },
 sat_sV5j_entry() //  [R1]
         { []
         }
     {offset
       c13uo: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c13up; else goto c13uq;
       c13up: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13uq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c13tM_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 40];
           R2 = 0;
           P64[Sp - 40] = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV5j_info" {
     sat_sV5j_info:
         const sat_sV5j_entry;
         const 4294967299;
         const 4294967311;
         const SVzM_srt+200;
 },
 _c13tM() //  [R1, R2]
         { []
         }
     {offset
       c13tM: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c13ut; else goto c13us;
       c13ut: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c13us: // global
           I64[Hp - 56] = sat_sV5i_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 14;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c13tM_info" {
     block_c13tM_info:
         const _c13tM;
         const 3;
         const 4294967326;
         const SVzM_srt+200;
 },
 sat_sV5k_entry() //  [R1]
         { []
         }
     {offset
       c13uu: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c13uy; else goto c13ux;
       c13uy: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13ux: // global
           _sV53::P64 = P64[R1 + 16];
           _sV56::P64 = P64[R1 + 24];
           _sV57::P64 = P64[R1 + 32];
           _sV55::I64 = I64[R1 + 40];
           I64[Hp - 40] = sat_sV5j_info;
           P64[Hp - 24] = _sV53::P64;
           P64[Hp - 16] = _sV56::P64;
           P64[Hp - 8] = _sV57::P64;
           I64[Hp] = _sV55::I64;
           R3 = Hp - 40;
           R2 = lvl12_rUQS_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sV5k_info" {
     sat_sV5k_info:
         const sat_sV5k_entry;
         const 4294967299;
         const 4294967311;
         const SVzM_srt+200;
 },
 sat_sV5l_entry() //  [R1]
         { []
         }
     {offset
       c13uz: // global
           _sV5l::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c13uA; else goto c13uB;
       c13uB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c13uD; else goto c13uC;
       c13uD: // global
           HpAlloc = 48;
           goto c13uA;
       c13uA: // global
           R1 = _sV5l::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13uC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sV5l::P64;
           _sV53::P64 = P64[_sV5l::P64 + 16];
           _sV54::P64 = P64[_sV5l::P64 + 24];
           _sV56::P64 = P64[_sV5l::P64 + 32];
           _sV57::P64 = P64[_sV5l::P64 + 40];
           _sV55::I64 = I64[_sV5l::P64 + 48];
           I64[Hp - 40] = sat_sV5k_info;
           P64[Hp - 24] = _sV53::P64;
           P64[Hp - 16] = _sV56::P64;
           P64[Hp - 8] = _sV57::P64;
           I64[Hp] = _sV55::I64;
           R3 = Hp - 40;
           R2 = _sV54::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV5l_info" {
     sat_sV5l_info:
         const sat_sV5l_entry;
         const 4294967300;
         const 4294967311;
         const SVzM_srt+200;
 },
 GHC.Enum.$wtoEnumError_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c13uG: // global
           _sV57::P64 = R6;
           _sV56::P64 = R5;
           _sV55::I64 = R4;
           _sV54::P64 = R3;
           _sV53::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c13uH; else goto c13uI;
       c13uI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c13uK; else goto c13uJ;
       c13uK: // global
           HpAlloc = 56;
           goto c13uH;
       c13uH: // global
           R1 = GHC.Enum.$wtoEnumError_closure;
           P64[Sp - 40] = _sV53::P64;
           P64[Sp - 32] = _sV54::P64;
           I64[Sp - 24] = _sV55::I64;
           P64[Sp - 16] = _sV56::P64;
           P64[Sp - 8] = _sV57::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       c13uJ: // global
           I64[Hp - 48] = sat_sV5l_info;
           P64[Hp - 32] = _sV53::P64;
           P64[Hp - 24] = _sV54::P64;
           P64[Hp - 16] = _sV56::P64;
           P64[Hp - 8] = _sV57::P64;
           I64[Hp] = _sV55::I64;
           I64[Sp - 8] = block_c13uE_info;
           R3 = Hp - 48;
           R2 = lvl11_rUQR_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$wtoEnumError_info" {
     GHC.Enum.$wtoEnumError_info:
         const GHC.Enum.$wtoEnumError_entry;
         const 0;
         const 432345568522534926;
         const 21474836480;
         const SVzM_srt;
         const 261;
         const GHC.Enum.$wtoEnumError_slow;
 },
 _c13uE() //  [R1]
         { []
         }
     {offset
       c13uE: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c13uE_info" {
     block_c13uE_info:
         const _c13uE;
         const 0;
         const 4294967326;
         const SVzM_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.084991531 UTC

[section ""data" . GHC.Enum.toEnumError_closure" {
     GHC.Enum.toEnumError_closure:
         const GHC.Enum.toEnumError_info;
         const 0;
 },
 GHC.Enum.toEnumError_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c13vK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c13vO; else goto c13vP;
       c13vO: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.toEnumError_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c13vP: // global
           I64[Sp - 32] = block_c13vH_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u13vX; else goto c13vI;
       u13vX: // global
           call _c13vH(R1) args: 0, res: 0, upd: 0;
       c13vI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.toEnumError_info" {
     GHC.Enum.toEnumError_info:
         const GHC.Enum.toEnumError_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SVzM_srt+208;
 },
 _c13vH() //  [R1]
         { []
         }
     {offset
       c13vH: // global
           I64[Sp] = block_c13vN_info;
           _sV5s::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _sV5s::I64;
           if (R1 & 7 != 0) goto u13vW; else goto c13vR;
       u13vW: // global
           call _c13vN(R1) args: 0, res: 0, upd: 0;
       c13vR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c13vH_info" {
     block_c13vH_info:
         const _c13vH;
         const 3;
         const 4294967326;
         const SVzM_srt+208;
 },
 _c13vN() //  [R1]
         { []
         }
     {offset
       c13vN: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Enum.$wtoEnumError_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c13vN_info" {
     block_c13vN_info:
         const _c13vN;
         const 259;
         const 4294967326;
         const SVzM_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.091430568 UTC

[section ""cstring" . lvl15_rUQV_bytes" {
     lvl15_rUQV_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,73,110,116,39,115,32,98,111,117,110,100,115,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.093959582 UTC

[section ""data" . lvl16_rUQW_closure" {
     lvl16_rUQW_closure:
         const lvl16_rUQW_info;
 },
 lvl16_rUQW_entry() //  [R2]
         { []
         }
     {offset
       c13wj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c13wk; else goto c13wl;
       c13wk: // global
           R2 = R2;
           R1 = lvl16_rUQW_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13wl: // global
           I64[Sp - 8] = block_c13wg_info;
           R4 = R2;
           R3 = (-9223372036854775808);
           R2 = 0;
           Sp = Sp - 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl16_rUQW_info" {
     lvl16_rUQW_info:
         const lvl16_rUQW_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c13wg() //  [R1, R2]
         { []
         }
     {offset
       c13wg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c13wo; else goto c13wn;
       c13wo: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c13wn: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c13wg_info" {
     block_c13wg_info:
         const _c13wg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.099724288 UTC

[section ""data" . lvl17_rUQX_closure" {
     lvl17_rUQX_closure:
         const lvl17_rUQX_info;
 },
 lvl17_rUQX_entry() //  [R2]
         { []
         }
     {offset
       c13wF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c13wG; else goto c13wH;
       c13wG: // global
           R2 = R2;
           R1 = lvl17_rUQX_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13wH: // global
           I64[Sp - 8] = block_c13wC_info;
           R4 = R2;
           R3 = 9223372036854775807;
           R2 = 0;
           Sp = Sp - 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl17_rUQX_info" {
     lvl17_rUQX_info:
         const lvl17_rUQX_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c13wC() //  [R1, R2]
         { []
         }
     {offset
       c13wC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c13wK; else goto c13wJ;
       c13wK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c13wJ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c13wC_info" {
     block_c13wC_info:
         const _c13wC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.104873065 UTC

[section ""data" . lvl18_rUQY_closure" {
     lvl18_rUQY_closure:
         const :_con_info;
         const lvl17_rUQX_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.106580653 UTC

[section ""data" . lvl19_rUQZ_closure" {
     lvl19_rUQZ_closure:
         const :_con_info;
         const lvl16_rUQW_closure+1;
         const lvl18_rUQY_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.108798447 UTC

[section ""data" . lvl20_rUR0_closure" {
     lvl20_rUR0_closure:
         const lvl20_rUR0_info;
         const 0;
         const 0;
         const 0;
 },
 lvl20_rUR0_entry() //  [R1]
         { []
         }
     {offset
       c13x2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13x3; else goto c13x4;
       c13x3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13x4: // global
           (_c13wZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c13wZ::I64 == 0) goto c13x1; else goto c13x0;
       c13x1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c13x0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c13wZ::I64;
           R3 = lvl14_rUQU_closure+2;
           R2 = lvl19_rUQZ_closure+2;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl20_rUR0_info" {
     lvl20_rUR0_info:
         const lvl20_rUR0_entry;
         const 0;
         const 4294967317;
         const SVzM_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.112671527 UTC

[section ""data" . lvl21_rUR1_closure" {
     lvl21_rUR1_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)4_closure;
         const lvl20_rUR0_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.114895148 UTC

[section ""data" . lvl22_rUR2_closure" {
     lvl22_rUR2_closure:
         const lvl22_rUR2_info;
         const 0;
         const 0;
         const 0;
 },
 lvl22_rUR2_entry() //  [R1]
         { []
         }
     {offset
       c13xj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13xk; else goto c13xl;
       c13xk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13xl: // global
           (_c13xg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c13xg::I64 == 0) goto c13xi; else goto c13xh;
       c13xi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c13xh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c13xg::I64;
           R3 = lvl21_rUR1_closure+2;
           R2 = lvl15_rUQV_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl22_rUR2_info" {
     lvl22_rUR2_info:
         const lvl22_rUR2_entry;
         const 0;
         const 4294967317;
         const SVzM_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.118441145 UTC

[section ""cstring" . lvl23_rUR3_bytes" {
     lvl23_rUR3_bytes:
         I8[] [69,110,117,109,46,102,114,111,109,69,110,117,109,123]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.120066021 UTC

[section ""cstring" . lvl24_rUR4_bytes" {
     lvl24_rUR4_bytes:
         I8[] [125,58,32,118,97,108,117,101,32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.124570435 UTC

[section ""data" . GHC.Enum.fromEnumError_closure" {
     GHC.Enum.fromEnumError_closure:
         const GHC.Enum.fromEnumError_info;
         const 0;
 },
 sat_sV5I_entry() //  [R1]
         { []
         }
     {offset
       c13xN: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c13xO; else goto c13xP;
       c13xO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13xP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c13xL_info;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.show_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV5I_info" {
     sat_sV5I_info:
         const sat_sV5I_entry;
         const 2;
         const 4294967314;
         const SVzM_srt+232;
 },
 _c13xL() //  [R1]
         { []
         }
     {offset
       c13xL: // global
           R3 = lvl22_rUR2_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c13xL_info" {
     block_c13xL_info:
         const _c13xL;
         const 0;
         const 4294967326;
         const SVzM_srt+232;
 },
 sat_sV5J_entry() //  [R1]
         { []
         }
     {offset
       c13xT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c13xX; else goto c13xW;
       c13xX: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13xW: // global
           _sV5E::P64 = P64[R1 + 16];
           _sV5G::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sV5I_info;
           P64[Hp - 8] = _sV5E::P64;
           P64[Hp] = _sV5G::P64;
           R3 = Hp - 24;
           R2 = lvl24_rUR4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sV5J_info" {
     sat_sV5J_info:
         const sat_sV5J_entry;
         const 2;
         const 4294967314;
         const SVzM_srt+232;
 },
 sat_sV5K_entry() //  [R1]
         { []
         }
     {offset
       c13xY: // global
           _sV5K::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c13xZ; else goto c13y0;
       c13y0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c13y2; else goto c13y1;
       c13y2: // global
           HpAlloc = 32;
           goto c13xZ;
       c13xZ: // global
           R1 = _sV5K::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13y1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sV5K::P64;
           _sV5E::P64 = P64[_sV5K::P64 + 16];
           _sV5F::P64 = P64[_sV5K::P64 + 24];
           _sV5G::P64 = P64[_sV5K::P64 + 32];
           I64[Hp - 24] = sat_sV5J_info;
           P64[Hp - 8] = _sV5E::P64;
           P64[Hp] = _sV5G::P64;
           R3 = Hp - 24;
           R2 = _sV5F::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV5K_info" {
     sat_sV5K_info:
         const sat_sV5K_entry;
         const 3;
         const 4294967311;
         const SVzM_srt+232;
 },
 GHC.Enum.fromEnumError_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c13y5: // global
           _sV5G::P64 = R4;
           _sV5F::P64 = R3;
           _sV5E::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c13y6; else goto c13y7;
       c13y7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c13y9; else goto c13y8;
       c13y9: // global
           HpAlloc = 40;
           goto c13y6;
       c13y6: // global
           R4 = _sV5G::P64;
           R3 = _sV5F::P64;
           R2 = _sV5E::P64;
           R1 = GHC.Enum.fromEnumError_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c13y8: // global
           I64[Hp - 32] = sat_sV5K_info;
           P64[Hp - 16] = _sV5E::P64;
           P64[Hp - 8] = _sV5F::P64;
           P64[Hp] = _sV5G::P64;
           I64[Sp - 8] = block_c13y3_info;
           R3 = Hp - 32;
           R2 = lvl23_rUR3_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.fromEnumError_info" {
     GHC.Enum.fromEnumError_info:
         const GHC.Enum.fromEnumError_entry;
         const 0;
         const 6917529031936049166;
         const 12884901911;
         const SVzM_srt;
 },
 _c13y3() //  [R1]
         { []
         }
     {offset
       c13y3: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c13y3_info" {
     block_c13y3_info:
         const _c13y3;
         const 0;
         const 4294967326;
         const SVzM_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.136383684 UTC

[section ""cstring" . lvl25_rUR5_bytes" {
     lvl25_rUR5_bytes:
         I8[] [69,110,117,109,46,115,117,99,99,123]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.138080368 UTC

[section ""cstring" . lvl26_rUR6_bytes" {
     lvl26_rUR6_bytes:
         I8[] [125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,109,97,120,66,111,117,110,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.140449119 UTC

[section ""data" . lvl27_rUR7_closure" {
     lvl27_rUR7_closure:
         const lvl27_rUR7_info;
         const 0;
         const 0;
         const 0;
 },
 lvl27_rUR7_entry() //  [R1]
         { []
         }
     {offset
       c13yI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13yJ; else goto c13yK;
       c13yJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13yK: // global
           (_c13yF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c13yF::I64 == 0) goto c13yH; else goto c13yG;
       c13yH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c13yG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c13yF::I64;
           R2 = lvl26_rUR6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_rUR7_info" {
     lvl27_rUR7_info:
         const lvl27_rUR7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.145572616 UTC

[section ""data" . GHC.Enum.succError_closure" {
     GHC.Enum.succError_closure:
         const GHC.Enum.succError_info;
         const 0;
 },
 sat_sV5N_entry() //  [R1]
         { []
         }
     {offset
       c13z0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13z1; else goto c13z2;
       c13z1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13z2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl27_rUR7_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV5N_info" {
     sat_sV5N_info:
         const sat_sV5N_entry;
         const 1;
         const 4294967312;
         const SVzM_srt+248;
 },
 section ""relreadonly" . u13zd_srtd" {
     u13zd_srtd:
         const SVzM_srt;
         const 33;
         const 6442450945;
 },
 GHC.Enum.succError_entry() //  [R2]
         { []
         }
     {offset
       c13z5: // global
           _sV5M::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c13z6; else goto c13z7;
       c13z7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c13z9; else goto c13z8;
       c13z9: // global
           HpAlloc = 24;
           goto c13z6;
       c13z6: // global
           R2 = _sV5M::P64;
           R1 = GHC.Enum.succError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13z8: // global
           I64[Hp - 16] = sat_sV5N_info;
           P64[Hp] = _sV5M::P64;
           I64[Sp - 8] = block_c13z3_info;
           R3 = Hp - 16;
           R2 = lvl25_rUR5_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.succError_info" {
     GHC.Enum.succError_info:
         const GHC.Enum.succError_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u13zd_srtd;
 },
 _c13z3() //  [R1]
         { []
         }
     {offset
       c13z3: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c13z3_info" {
     block_c13z3_info:
         const _c13z3;
         const 0;
         const 4294967326;
         const SVzM_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.152276301 UTC

[section ""cstring" . lvl28_rUR8_bytes" {
     lvl28_rUR8_bytes:
         I8[] [69,110,117,109,46,112,114,101,100,123]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.154091628 UTC

[section ""cstring" . lvl29_rUR9_bytes" {
     lvl29_rUR9_bytes:
         I8[] [125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,109,105,110,66,111,117,110,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.156427818 UTC

[section ""data" . lvl30_rURa_closure" {
     lvl30_rURa_closure:
         const lvl30_rURa_info;
         const 0;
         const 0;
         const 0;
 },
 lvl30_rURa_entry() //  [R1]
         { []
         }
     {offset
       c13zz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13zA; else goto c13zB;
       c13zA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13zB: // global
           (_c13zw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c13zw::I64 == 0) goto c13zy; else goto c13zx;
       c13zy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c13zx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c13zw::I64;
           R2 = lvl29_rUR9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl30_rURa_info" {
     lvl30_rURa_info:
         const lvl30_rURa_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.161094019 UTC

[section ""data" . GHC.Enum.predError_closure" {
     GHC.Enum.predError_closure:
         const GHC.Enum.predError_info;
         const 0;
 },
 sat_sV5Q_entry() //  [R1]
         { []
         }
     {offset
       c13zR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13zS; else goto c13zT;
       c13zS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13zT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl30_rURa_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV5Q_info" {
     sat_sV5Q_info:
         const sat_sV5Q_entry;
         const 1;
         const 4294967312;
         const SVzM_srt+272;
 },
 GHC.Enum.predError_entry() //  [R2]
         { []
         }
     {offset
       c13zW: // global
           _sV5P::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c13zX; else goto c13zY;
       c13zY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c13A0; else goto c13zZ;
       c13A0: // global
           HpAlloc = 24;
           goto c13zX;
       c13zX: // global
           R2 = _sV5P::P64;
           R1 = GHC.Enum.predError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13zZ: // global
           I64[Hp - 16] = sat_sV5Q_info;
           P64[Hp] = _sV5P::P64;
           I64[Sp - 8] = block_c13zU_info;
           R3 = Hp - 16;
           R2 = lvl28_rUR8_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.predError_info" {
     GHC.Enum.predError_info:
         const GHC.Enum.predError_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SVzM_srt+264;
 },
 _c13zU() //  [R1]
         { []
         }
     {offset
       c13zU: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c13zU_info" {
     block_c13zU_info:
         const _c13zU;
         const 0;
         const 4294967326;
         const SVzM_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.171124706 UTC

[section ""data" . GHC.Enum.eftCharFB_closure" {
     GHC.Enum.eftCharFB_closure:
         const GHC.Enum.eftCharFB_info;
 },
 GHC.Enum.eftCharFB_slow() //  [R1]
         { []
         }
     {offset
       c13Ah: // global
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Enum.eftCharFB_entry(R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sV62_entry() //  [R1]
         { []
         }
     {offset
       c13Az: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13AA; else goto c13AB;
       c13AA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13AB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_sV5W_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV62_info" {
     sat_sV62_info:
         const sat_sV62_entry;
         const 4294967297;
         const 19;
 },
 go_sV5W_entry() //  [R1, R2]
         { []
         }
     {offset
       c13AF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c13AJ; else goto c13AI;
       c13AJ: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13AI: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 23])) goto c13AD; else goto c13AE;
       c13AD: // global
           _sV5S::P64 = P64[R1 + 7];
           I64[Hp - 40] = sat_sV62_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 7;
           R1 = _sV5S::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c13AE: // global
           _sV5T::P64 = P64[R1 + 15];
           Hp = Hp - 48;
           R1 = _sV5T::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_sV5W_info" {
     go_sV5W_info:
         const go_sV5W_entry;
         const 4294967298;
         const 8;
         const 4294967300;
 },
 GHC.Enum.eftCharFB_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c13AO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c13AS; else goto c13AR;
       c13AS: // global
           HpAlloc = 32;
           R1 = GHC.Enum.eftCharFB_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c13AR: // global
           I64[Hp - 24] = go_sV5W_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           I64[Hp] = R5;
           R2 = R4;
           R1 = Hp - 23;
           call go_sV5W_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.eftCharFB_info" {
     GHC.Enum.eftCharFB_info:
         const GHC.Enum.eftCharFB_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 772;
         const GHC.Enum.eftCharFB_slow;
 },
 section ""data" . GHC.Enum.eftChar_closure" {
     GHC.Enum.eftChar_closure:
         const GHC.Enum.eftChar_info;
 },
 sat_sV69_entry() //  [R1]
         { []
         }
     {offset
       c13B6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13B7; else goto c13B8;
       c13B7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13B8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 24];
           R2 = I64[R1 + 16] + 1;
           Sp = Sp - 16;
           call GHC.Enum.eftChar_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV69_info" {
     sat_sV69_info:
         const sat_sV69_entry;
         const 8589934592;
         const 20;
 },
 GHC.Enum.eftChar_entry() //  [R2, R3]
         { []
         }
     {offset
       c13Bc: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c13Bg; else goto c13Bf;
       c13Bg: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.eftChar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c13Bf: // global
           if (%MO_S_Le_W64(R2, R3)) goto c13Ba; else goto c13Bb;
       c13Ba: // global
           I64[Hp - 64] = sat_sV69_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = R3;
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c13Bb: // global
           Hp = Hp - 72;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.eftChar_info" {
     GHC.Enum.eftChar_info:
         const GHC.Enum.eftChar_entry;
         const 0;
         const 14;
         const 8589934604;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.18451392 UTC

[section ""data" . GHC.Enum.$fEnumChar_$cenumFrom_closure" {
     GHC.Enum.$fEnumChar_$cenumFrom_closure:
         const GHC.Enum.$fEnumChar_$cenumFrom_info;
 },
 GHC.Enum.$fEnumChar_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c13BU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c13BV; else goto c13BW;
       c13BV: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumChar_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13BW: // global
           I64[Sp - 8] = block_c13BR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u13C1; else goto c13BS;
       u13C1: // global
           call _c13BR(R1) args: 0, res: 0, upd: 0;
       c13BS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumChar_$cenumFrom_info" {
     GHC.Enum.$fEnumChar_$cenumFrom_info:
         const GHC.Enum.$fEnumChar_$cenumFrom_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c13BR() //  [R1]
         { []
         }
     {offset
       c13BR: // global
           R3 = 1114111;
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.eftChar_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c13BR_info" {
     block_c13BR_info:
         const _c13BR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.190067335 UTC

[section ""data" . GHC.Enum.$fEnumChar_$cenumFromTo_closure" {
     GHC.Enum.$fEnumChar_$cenumFromTo_closure:
         const GHC.Enum.$fEnumChar_$cenumFromTo_info;
 },
 GHC.Enum.$fEnumChar_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c13Ci: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13Cm; else goto c13Cn;
       c13Cm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumChar_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c13Cn: // global
           I64[Sp - 16] = block_c13Cf_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u13Cz; else goto c13Cg;
       u13Cz: // global
           call _c13Cf(R1) args: 0, res: 0, upd: 0;
       c13Cg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumChar_$cenumFromTo_info" {
     GHC.Enum.$fEnumChar_$cenumFromTo_info:
         const GHC.Enum.$fEnumChar_$cenumFromTo_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c13Cf() //  [R1]
         { []
         }
     {offset
       c13Cf: // global
           I64[Sp] = block_c13Cl_info;
           _sV6h::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sV6h::I64;
           if (R1 & 7 != 0) goto u13Cy; else goto c13Cp;
       u13Cy: // global
           call _c13Cl(R1) args: 0, res: 0, upd: 0;
       c13Cp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c13Cf_info" {
     block_c13Cf_info:
         const _c13Cf;
         const 1;
         const 30;
 },
 _c13Cl() //  [R1]
         { []
         }
     {offset
       c13Cl: // global
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Enum.eftChar_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c13Cl_info" {
     block_c13Cl_info:
         const _c13Cl;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.198370419 UTC

[section ""data" . GHC.Enum.go_up_char_fb_closure" {
     GHC.Enum.go_up_char_fb_closure:
         const GHC.Enum.go_up_char_fb_info;
 },
 GHC.Enum.go_up_char_fb_slow() //  [R1]
         { []
         }
     {offset
       c13CO: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.go_up_char_fb_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sV6x_entry() //  [R1]
         { []
         }
     {offset
       c13D6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13D7; else goto c13D8;
       c13D7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13D8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sV6r_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV6x_info" {
     sat_sV6x_info:
         const sat_sV6x_entry;
         const 8589934593;
         const 15;
 },
 go_up_sV6r_entry() //  [R1, R2]
         { []
         }
     {offset
       c13Dc: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c13Dg; else goto c13Df;
       c13Dg: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13Df: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 31])) goto c13Da; else goto c13Db;
       c13Da: // global
           _sV6m::P64 = P64[R1 + 7];
           _sV6p::I64 = I64[R1 + 23];
           I64[Hp - 48] = sat_sV6x_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = _sV6p::I64;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 7;
           R1 = _sV6m::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c13Db: // global
           _sV6n::P64 = P64[R1 + 15];
           Hp = Hp - 56;
           R1 = _sV6n::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sV6r_info" {
     go_up_sV6r_info:
         const go_up_sV6r_entry;
         const 8589934594;
         const 8;
         const 4294967300;
 },
 GHC.Enum.go_up_char_fb_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c13Dl: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c13Dp; else goto c13Do;
       c13Dp: // global
           HpAlloc = 40;
           R1 = GHC.Enum.go_up_char_fb_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       c13Do: // global
           I64[Hp - 32] = go_up_sV6r_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = R5;
           I64[Hp] = R6;
           R2 = R4;
           R1 = Hp - 31;
           call go_up_sV6r_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.go_up_char_fb_info" {
     GHC.Enum.go_up_char_fb_info:
         const GHC.Enum.go_up_char_fb_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 1797;
         const GHC.Enum.go_up_char_fb_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.208765773 UTC

[section ""data" . GHC.Enum.go_dn_char_fb_closure" {
     GHC.Enum.go_dn_char_fb_closure:
         const GHC.Enum.go_dn_char_fb_info;
 },
 GHC.Enum.go_dn_char_fb_slow() //  [R1]
         { []
         }
     {offset
       c13DG: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.go_dn_char_fb_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sV6J_entry() //  [R1]
         { []
         }
     {offset
       c13DY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13DZ; else goto c13E0;
       c13DZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13E0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sV6D_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV6J_info" {
     sat_sV6J_info:
         const sat_sV6J_entry;
         const 8589934593;
         const 15;
 },
 go_dn_sV6D_entry() //  [R1, R2]
         { []
         }
     {offset
       c13E4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c13E8; else goto c13E7;
       c13E8: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13E7: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 31])) goto c13E2; else goto c13E3;
       c13E2: // global
           _sV6y::P64 = P64[R1 + 7];
           _sV6B::I64 = I64[R1 + 23];
           I64[Hp - 48] = sat_sV6J_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = _sV6B::I64;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 7;
           R1 = _sV6y::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c13E3: // global
           _sV6z::P64 = P64[R1 + 15];
           Hp = Hp - 56;
           R1 = _sV6z::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sV6D_info" {
     go_dn_sV6D_info:
         const go_dn_sV6D_entry;
         const 8589934594;
         const 8;
         const 4294967300;
 },
 GHC.Enum.go_dn_char_fb_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c13Ed: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c13Eh; else goto c13Eg;
       c13Eh: // global
           HpAlloc = 40;
           R1 = GHC.Enum.go_dn_char_fb_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       c13Eg: // global
           I64[Hp - 32] = go_dn_sV6D_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = R5;
           I64[Hp] = R6;
           R2 = R4;
           R1 = Hp - 31;
           call go_dn_sV6D_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.go_dn_char_fb_info" {
     GHC.Enum.go_dn_char_fb_info:
         const GHC.Enum.go_dn_char_fb_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 1797;
         const GHC.Enum.go_dn_char_fb_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.218443167 UTC

[section ""data" . GHC.Enum.go_up_char_list_closure" {
     GHC.Enum.go_up_char_list_closure:
         const GHC.Enum.go_up_char_list_info;
 },
 sat_sV6T_entry() //  [R1]
         { []
         }
     {offset
       c13EP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13EQ; else goto c13ER;
       c13EQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13ER: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sV6N_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV6T_info" {
     sat_sV6T_info:
         const sat_sV6T_entry;
         const 8589934593;
         const 15;
 },
 go_up_sV6N_entry() //  [R1, R2]
         { []
         }
     {offset
       c13EV: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c13EZ; else goto c13EY;
       c13EZ: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13EY: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c13ET; else goto c13EU;
       c13ET: // global
           _sV6L::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_sV6T_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _sV6L::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c13EU: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sV6N_info" {
     go_up_sV6N_info:
         const go_up_sV6N_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 GHC.Enum.go_up_char_list_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c13F5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c13F9; else goto c13F8;
       c13F9: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.go_up_char_list_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c13F8: // global
           I64[Hp - 16] = go_up_sV6N_info;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R2 = R2;
           R1 = Hp - 15;
           call go_up_sV6N_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.go_up_char_list_info" {
     GHC.Enum.go_up_char_list_info:
         const GHC.Enum.go_up_char_list_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.227610654 UTC

[section ""data" . GHC.Enum.go_dn_char_list_closure" {
     GHC.Enum.go_dn_char_list_closure:
         const GHC.Enum.go_dn_char_list_info;
 },
 sat_sV73_entry() //  [R1]
         { []
         }
     {offset
       c13FJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13FK; else goto c13FL;
       c13FK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13FL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sV6X_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV73_info" {
     sat_sV73_info:
         const sat_sV73_entry;
         const 8589934593;
         const 15;
 },
 go_dn_sV6X_entry() //  [R1, R2]
         { []
         }
     {offset
       c13FP: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c13FT; else goto c13FS;
       c13FT: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13FS: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c13FN; else goto c13FO;
       c13FN: // global
           _sV6V::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_sV73_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _sV6V::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c13FO: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sV6X_info" {
     go_dn_sV6X_info:
         const go_dn_sV6X_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 GHC.Enum.go_dn_char_list_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c13FZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c13G3; else goto c13G2;
       c13G3: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.go_dn_char_list_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c13G2: // global
           I64[Hp - 16] = go_dn_sV6X_info;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R2 = R2;
           R1 = Hp - 15;
           call go_dn_sV6X_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.go_dn_char_list_info" {
     GHC.Enum.go_dn_char_list_info:
         const GHC.Enum.go_dn_char_list_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.23568898 UTC

[section ""data" . GHC.Enum.efdtCharFB_closure" {
     GHC.Enum.efdtCharFB_closure:
         const GHC.Enum.efdtCharFB_info;
 },
 GHC.Enum.efdtCharFB_slow() //  [R1]
         { []
         }
     {offset
       c13Gm: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.efdtCharFB_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Enum.efdtCharFB_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c13Gs: // global
           _sV79::I64 = R5 - R4;
           if (%MO_S_Lt_W64(_sV79::I64, 0)) goto c13Gz; else goto c13GA;
       c13Gz: // global
           R6 = R6;
           R5 = _sV79::I64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.go_dn_char_fb_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
       c13GA: // global
           R6 = R6;
           R5 = _sV79::I64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.go_up_char_fb_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtCharFB_info" {
     GHC.Enum.efdtCharFB_info:
         const GHC.Enum.efdtCharFB_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 1797;
         const GHC.Enum.efdtCharFB_slow;
 },
 section ""data" . GHC.Enum.efdtChar_closure" {
     GHC.Enum.efdtChar_closure:
         const GHC.Enum.efdtChar_info;
 },
 GHC.Enum.efdtChar_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c13GH: // global
           _sV7e::I64 = R3 - R2;
           if (%MO_S_Lt_W64(_sV7e::I64, 0)) goto c13GO; else goto c13GP;
       c13GO: // global
           R4 = R4;
           R3 = _sV7e::I64;
           R2 = R2;
           call GHC.Enum.go_dn_char_list_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
       c13GP: // global
           R4 = R4;
           R3 = _sV7e::I64;
           R2 = R2;
           call GHC.Enum.go_up_char_list_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtChar_info" {
     GHC.Enum.efdtChar_info:
         const GHC.Enum.efdtChar_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.246368111 UTC

[section ""data" . GHC.Enum.$fEnumChar_$cenumFromThenTo_closure" {
     GHC.Enum.$fEnumChar_$cenumFromThenTo_closure:
         const GHC.Enum.$fEnumChar_$cenumFromThenTo_info;
 },
 sat_sV7A_entry() //  [R1]
         { []
         }
     {offset
       c13HO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13HP; else goto c13HQ;
       c13HP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13HQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sV7u_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV7A_info" {
     sat_sV7A_info:
         const sat_sV7A_entry;
         const 8589934593;
         const 15;
 },
 go_dn_sV7u_entry() //  [R1, R2]
         { []
         }
     {offset
       c13HU: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c13HY; else goto c13HX;
       c13HY: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13HX: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c13HS; else goto c13HT;
       c13HS: // global
           _sV7q::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_sV7A_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _sV7q::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c13HT: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sV7u_info" {
     go_dn_sV7u_info:
         const go_dn_sV7u_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_sV7I_entry() //  [R1]
         { []
         }
     {offset
       c13Im: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13In; else goto c13Io;
       c13In: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13Io: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sV7C_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV7I_info" {
     sat_sV7I_info:
         const sat_sV7I_entry;
         const 8589934593;
         const 15;
 },
 go_up_sV7C_entry() //  [R1, R2]
         { []
         }
     {offset
       c13Is: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c13Iw; else goto c13Iv;
       c13Iw: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13Iv: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c13Iq; else goto c13Ir;
       c13Iq: // global
           _sV7q::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_sV7I_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _sV7q::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c13Ir: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sV7C_info" {
     go_up_sV7C_info:
         const go_up_sV7C_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 GHC.Enum.$fEnumChar_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c13IC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c13ID; else goto c13IE;
       c13ID: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumChar_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c13IE: // global
           I64[Sp - 24] = block_c13H6_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u13IP; else goto c13H7;
       u13IP: // global
           call _c13H6(R1) args: 0, res: 0, upd: 0;
       c13H7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumChar_$cenumFromThenTo_info" {
     GHC.Enum.$fEnumChar_$cenumFromThenTo_info:
         const GHC.Enum.$fEnumChar_$cenumFromThenTo_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c13H6() //  [R1]
         { []
         }
     {offset
       c13H6: // global
           I64[Sp] = block_c13Hb_info;
           _sV7k::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sV7k::I64;
           if (R1 & 7 != 0) goto u13IN; else goto c13Hc;
       u13IN: // global
           call _c13Hb(R1) args: 0, res: 0, upd: 0;
       c13Hc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c13H6_info" {
     block_c13H6_info:
         const _c13H6;
         const 2;
         const 30;
 },
 _c13Hb() //  [R1]
         { []
         }
     {offset
       c13Hb: // global
           I64[Sp] = block_c13Hg_info;
           _sV7m::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sV7m::I64;
           if (R1 & 7 != 0) goto u13IO; else goto c13Hh;
       u13IO: // global
           call _c13Hg(R1) args: 0, res: 0, upd: 0;
       c13Hh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c13Hb_info" {
     block_c13Hb_info:
         const _c13Hb;
         const 66;
         const 30;
 },
 _c13Hg() //  [R1]
         { []
         }
     {offset
       c13Hg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c13IJ; else goto c13II;
       c13IJ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c13II: // global
           _sV7o::I64 = I64[R1 + 7];
           _sV7p::I64 = I64[Sp + 8];
           _sV7q::I64 = I64[Sp + 16] - _sV7p::I64;
           if (%MO_S_Lt_W64(_sV7q::I64, 0)) goto c13IL; else goto c13IM;
       c13IL: // global
           I64[Hp - 16] = go_dn_sV7u_info;
           I64[Hp - 8] = _sV7q::I64;
           I64[Hp] = _sV7o::I64;
           R2 = _sV7p::I64;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call go_dn_sV7u_entry(R2, R1) args: 8, res: 0, upd: 8;
       c13IM: // global
           I64[Hp - 16] = go_up_sV7C_info;
           I64[Hp - 8] = _sV7q::I64;
           I64[Hp] = _sV7o::I64;
           R2 = _sV7p::I64;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call go_up_sV7C_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c13Hg_info" {
     block_c13Hg_info:
         const _c13Hg;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.263790181 UTC

[section ""data" . GHC.Enum.efdCharFB_closure" {
     GHC.Enum.efdCharFB_closure:
         const GHC.Enum.efdCharFB_info;
 },
 GHC.Enum.efdCharFB_slow() //  [R1]
         { []
         }
     {offset
       c13Jz: // global
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Enum.efdCharFB_entry(R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Enum.efdCharFB_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c13JF: // global
           _sV7N::I64 = R5 - R4;
           if (%MO_S_Lt_W64(_sV7N::I64, 0)) goto c13JM; else goto c13JN;
       c13JM: // global
           R6 = 0;
           R5 = _sV7N::I64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.go_dn_char_fb_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
       c13JN: // global
           R6 = 1114111;
           R5 = _sV7N::I64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.go_up_char_fb_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdCharFB_info" {
     GHC.Enum.efdCharFB_info:
         const GHC.Enum.efdCharFB_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 772;
         const GHC.Enum.efdCharFB_slow;
 },
 section ""data" . GHC.Enum.efdChar_closure" {
     GHC.Enum.efdChar_closure:
         const GHC.Enum.efdChar_info;
 },
 GHC.Enum.efdChar_entry() //  [R2, R3]
         { []
         }
     {offset
       c13JU: // global
           _sV7R::I64 = R3 - R2;
           if (%MO_S_Lt_W64(_sV7R::I64, 0)) goto c13K1; else goto c13K2;
       c13K1: // global
           R4 = 0;
           R3 = _sV7R::I64;
           R2 = R2;
           call GHC.Enum.go_dn_char_list_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
       c13K2: // global
           R4 = 1114111;
           R3 = _sV7R::I64;
           R2 = R2;
           call GHC.Enum.go_up_char_list_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdChar_info" {
     GHC.Enum.efdChar_info:
         const GHC.Enum.efdChar_entry;
         const 0;
         const 14;
         const 8589934604;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.272395818 UTC

[section ""data" . GHC.Enum.$fEnumChar_$cenumFromThen_closure" {
     GHC.Enum.$fEnumChar_$cenumFromThen_closure:
         const GHC.Enum.$fEnumChar_$cenumFromThen_info;
 },
 GHC.Enum.$fEnumChar_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c13Km: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13Kq; else goto c13Kr;
       c13Kq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumChar_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c13Kr: // global
           I64[Sp - 16] = block_c13Kj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u13KN; else goto c13Kk;
       u13KN: // global
           call _c13Kj(R1) args: 0, res: 0, upd: 0;
       c13Kk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumChar_$cenumFromThen_info" {
     GHC.Enum.$fEnumChar_$cenumFromThen_info:
         const GHC.Enum.$fEnumChar_$cenumFromThen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c13Kj() //  [R1]
         { []
         }
     {offset
       c13Kj: // global
           I64[Sp] = block_c13Kp_info;
           _sV7W::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sV7W::I64;
           if (R1 & 7 != 0) goto u13KM; else goto c13Kt;
       u13KM: // global
           call _c13Kp(R1) args: 0, res: 0, upd: 0;
       c13Kt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c13Kj_info" {
     block_c13Kj_info:
         const _c13Kj;
         const 1;
         const 30;
 },
 _c13Kp() //  [R1]
         { []
         }
     {offset
       c13Kp: // global
           _sV7Z::I64 = I64[Sp + 8];
           _sV80::I64 = I64[R1 + 7] - _sV7Z::I64;
           if (%MO_S_Lt_W64(_sV80::I64, 0)) goto c13KK; else goto c13KL;
       c13KK: // global
           R4 = 0;
           R3 = _sV80::I64;
           R2 = _sV7Z::I64;
           Sp = Sp + 16;
           call GHC.Enum.go_dn_char_list_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
       c13KL: // global
           R4 = 1114111;
           R3 = _sV80::I64;
           R2 = _sV7Z::I64;
           Sp = Sp + 16;
           call GHC.Enum.go_up_char_list_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c13Kp_info" {
     block_c13Kp_info:
         const _c13Kp;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.279497915 UTC

[section ""data" . GHC.Enum.$fEnumChar_closure" {
     GHC.Enum.$fEnumChar_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumChar_$csucc_closure+1;
         const GHC.Enum.$fEnumChar_$cpred_closure+1;
         const GHC.Char.chr_closure+1;
         const GHC.Base.ord_closure+1;
         const GHC.Enum.$fEnumChar_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumChar_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumChar_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumChar_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.285372282 UTC

[section ""data" . GHC.Enum.eftInt_closure" {
     GHC.Enum.eftInt_closure:
         const GHC.Enum.eftInt_info;
 },
 sat_sV8b_entry() //  [R1]
         { []
         }
     {offset
       c13Lo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13Lp; else goto c13Lq;
       c13Lp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13Lq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sV87::I64 = I64[R1 + 32];
           if (_sV87::I64 == I64[R1 + 24]) goto c13Ln; else goto c13Lm;
       c13Ln: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c13Lm: // global
           R2 = _sV87::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_sV86_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV8b_info" {
     sat_sV8b_info:
         const sat_sV8b_entry;
         const 8589934593;
         const 15;
 },
 go_sV86_entry() //  [R1, R2]
         { []
         }
     {offset
       c13Lv: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c13Lz; else goto c13Ly;
       c13Lz: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13Ly: // global
           _sV84::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_sV8b_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _sV84::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_sV86_info" {
     go_sV86_info:
         const go_sV86_entry;
         const 4294967296;
         const 10;
         const 4294967300;
 },
 GHC.Enum.eftInt_entry() //  [R2, R3]
         { []
         }
     {offset
       c13LD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c13LH; else goto c13LG;
       c13LH: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.eftInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c13LG: // global
           if (%MO_S_Le_W64(R2, R3)) goto c13LB; else goto c13LC;
       c13LB: // global
           I64[Hp - 8] = go_sV86_info;
           I64[Hp] = R3;
           R2 = R2;
           R1 = Hp - 7;
           call go_sV86_entry(R2, R1) args: 8, res: 0, upd: 8;
       c13LC: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.eftInt_info" {
     GHC.Enum.eftInt_info:
         const GHC.Enum.eftInt_entry;
         const 0;
         const 14;
         const 8589934604;
 },
 section ""data" . GHC.Enum.eftIntFB_closure" {
     GHC.Enum.eftIntFB_closure:
         const GHC.Enum.eftIntFB_info;
 },
 GHC.Enum.eftIntFB_slow() //  [R1]
         { []
         }
     {offset
       c13LJ: // global
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Enum.eftIntFB_entry(R5,
                                        R4,
                                        R3,
                                        R2,
                                        R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sV8m_entry() //  [R1]
         { []
         }
     {offset
       c13M4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13M5; else goto c13M6;
       c13M5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13M6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sV8i::I64 = I64[R1 + 40];
           if (_sV8i::I64 == I64[R1 + 32]) goto c13M3; else goto c13M2;
       c13M3: // global
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c13M2: // global
           R2 = _sV8i::I64 + 1;
           R1 = P64[R1 + 24];
           Sp = Sp - 16;
           call go_sV8h_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV8m_info" {
     sat_sV8m_info:
         const sat_sV8m_entry;
         const 8589934594;
         const 15;
 },
 go_sV8h_entry() //  [R1, R2]
         { []
         }
     {offset
       c13Ma: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c13Me; else goto c13Md;
       c13Me: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13Md: // global
           _sV8c::P64 = P64[R1 + 7];
           _sV8d::P64 = P64[R1 + 15];
           _sV8f::I64 = I64[R1 + 23];
           I64[Hp - 56] = sat_sV8m_info;
           P64[Hp - 40] = _sV8d::P64;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = _sV8f::I64;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 7;
           R1 = _sV8c::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_sV8h_info" {
     go_sV8h_info:
         const go_sV8h_entry;
         const 4294967298;
         const 8;
         const 4294967300;
 },
 GHC.Enum.eftIntFB_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c13Mi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c13Mm; else goto c13Ml;
       c13Mm: // global
           HpAlloc = 32;
           R1 = GHC.Enum.eftIntFB_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c13Ml: // global
           if (%MO_S_Le_W64(R4, R5)) goto c13Mg; else goto c13Mh;
       c13Mg: // global
           I64[Hp - 24] = go_sV8h_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           I64[Hp] = R5;
           R2 = R4;
           R1 = Hp - 23;
           call go_sV8h_entry(R2, R1) args: 8, res: 0, upd: 8;
       c13Mh: // global
           Hp = Hp - 32;
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.eftIntFB_info" {
     GHC.Enum.eftIntFB_info:
         const GHC.Enum.eftIntFB_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 772;
         const GHC.Enum.eftIntFB_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.302278541 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_go_closure" {
     GHC.Enum.$fEnumOrdering_go_closure:
         const GHC.Enum.$fEnumOrdering_go_info;
         const 0;
 },
 sat_sV8s_entry() //  [R1]
         { []
         }
     {offset
       c13N2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13N3; else goto c13N4;
       c13N3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13N4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sV8q::I64 = I64[R1 + 16];
           if (_sV8q::I64 != 2) goto c13N0; else goto c13N1;
       c13N0: // global
           R2 = _sV8q::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumOrdering_go_entry(R2) args: 24, res: 0, upd: 24;
       c13N1: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV8s_info" {
     sat_sV8s_info:
         const sat_sV8s_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+288;
 },
 sat_sV8p_entry() //  [R1]
         { []
         }
     {offset
       c13Nh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13Ni; else goto c13Nj;
       c13Ni: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13Nj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sV8o::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sV8o::I64, 2)) goto u13Nk; else goto u13Nm;
       u13Nk: // global
           if (%MO_S_Lt_W64(_sV8o::I64, 1)) goto u13Nl; else goto c13Nf;
       u13Nl: // global
           if (%MO_S_Lt_W64(_sV8o::I64, 0)) goto c13Nd; else goto c13Ne;
       c13Ne: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c13Nf: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u13Nm: // global
           if (%MO_S_Ge_W64(_sV8o::I64, 3)) goto c13Nd; else goto c13Ng;
       c13Nd: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c13Ng: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV8p_info" {
     sat_sV8p_info:
         const sat_sV8p_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+96;
 },
 GHC.Enum.$fEnumOrdering_go_entry() //  [R2]
         { []
         }
     {offset
       c13No: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c13Ns; else goto c13Nr;
       c13Ns: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13Nr: // global
           I64[Hp - 64] = sat_sV8s_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sV8p_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_go_info" {
     GHC.Enum.$fEnumOrdering_go_info:
         const GHC.Enum.$fEnumOrdering_go_entry;
         const 0;
         const 72057598332895246;
         const 4294967300;
         const SVzM_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.310201558 UTC

[section ""data" . GHC.Enum.$fEnumOrdering3_closure" {
     GHC.Enum.$fEnumOrdering3_closure:
         const GHC.Enum.$fEnumOrdering3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumOrdering3_entry() //  [R1]
         { []
         }
     {offset
       c13NT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13NU; else goto c13NV;
       c13NU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13NV: // global
           (_c13NQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c13NQ::I64 == 0) goto c13NS; else goto c13NR;
       c13NS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c13NR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c13NQ::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumOrdering_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering3_info" {
     GHC.Enum.$fEnumOrdering3_info:
         const GHC.Enum.$fEnumOrdering3_entry;
         const 0;
         const 4294967317;
         const SVzM_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.314957339 UTC

[section ""data" . GHC.Enum.$fEnumOrdering2_closure" {
     GHC.Enum.$fEnumOrdering2_closure:
         const GHC.Enum.$fEnumOrdering2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumOrdering2_entry() //  [R1]
         { []
         }
     {offset
       c13O9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13Oa; else goto c13Ob;
       c13Oa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13Ob: // global
           (_c13O6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c13O6::I64 == 0) goto c13O8; else goto c13O7;
       c13O8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c13O7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c13O6::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumOrdering_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering2_info" {
     GHC.Enum.$fEnumOrdering2_info:
         const GHC.Enum.$fEnumOrdering2_entry;
         const 0;
         const 4294967317;
         const SVzM_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.318862111 UTC

[section ""data" . GHC.Enum.$fEnumOrdering1_closure" {
     GHC.Enum.$fEnumOrdering1_closure:
         const GHC.Enum.$fEnumOrdering1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumOrdering1_entry() //  [R1]
         { []
         }
     {offset
       c13Op: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13Oq; else goto c13Or;
       c13Oq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13Or: // global
           (_c13Om::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c13Om::I64 == 0) goto c13Oo; else goto c13On;
       c13Oo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c13On: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c13Om::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumOrdering_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering1_info" {
     GHC.Enum.$fEnumOrdering1_info:
         const GHC.Enum.$fEnumOrdering1_entry;
         const 0;
         const 4294967317;
         const SVzM_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.323255352 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_$cenumFrom_closure" {
     GHC.Enum.$fEnumOrdering_$cenumFrom_closure:
         const GHC.Enum.$fEnumOrdering_$cenumFrom_info;
         const 0;
 },
 GHC.Enum.$fEnumOrdering_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c13OL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c13OM; else goto c13ON;
       c13OM: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13ON: // global
           I64[Sp - 8] = block_c13OD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u13OY; else goto c13OE;
       u13OY: // global
           call _c13OD(R1) args: 0, res: 0, upd: 0;
       c13OE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_$cenumFrom_info" {
     GHC.Enum.$fEnumOrdering_$cenumFrom_info:
         const GHC.Enum.$fEnumOrdering_$cenumFrom_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const SVzM_srt+296;
 },
 _c13OD() //  [R1]
         { []
         }
     {offset
       c13OD: // global
           _c13OK::P64 = R1 & 7;
           if (_c13OK::P64 < 3) goto u13OX; else goto c13OJ;
       u13OX: // global
           if (_c13OK::P64 < 2) goto c13OH; else goto c13OI;
       c13OH: // global
           R1 = GHC.Enum.$fEnumOrdering3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c13OI: // global
           R1 = GHC.Enum.$fEnumOrdering2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c13OJ: // global
           R1 = GHC.Enum.$fEnumOrdering1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c13OD_info" {
     block_c13OD_info:
         const _c13OD;
         const 0;
         const 30064771102;
         const SVzM_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.330093676 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_go2_closure" {
     GHC.Enum.$fEnumOrdering_go2_closure:
         const GHC.Enum.$fEnumOrdering_go2_info;
         const 0;
 },
 sat_sV8A_entry() //  [R1]
         { []
         }
     {offset
       c13Po: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13Pp; else goto c13Pq;
       c13Pp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13Pq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sV8y::I64 = I64[R1 + 16];
           if (_sV8y::I64 != 0) goto c13Pm; else goto c13Pn;
       c13Pm: // global
           R2 = _sV8y::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumOrdering_go2_entry(R2) args: 24, res: 0, upd: 24;
       c13Pn: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV8A_info" {
     sat_sV8A_info:
         const sat_sV8A_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+328;
 },
 sat_sV8x_entry() //  [R1]
         { []
         }
     {offset
       c13PD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13PE; else goto c13PF;
       c13PE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13PF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sV8w::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sV8w::I64, 2)) goto u13PG; else goto u13PI;
       u13PG: // global
           if (%MO_S_Lt_W64(_sV8w::I64, 1)) goto u13PH; else goto c13PB;
       u13PH: // global
           if (%MO_S_Lt_W64(_sV8w::I64, 0)) goto c13Pz; else goto c13PA;
       c13PA: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c13PB: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u13PI: // global
           if (%MO_S_Ge_W64(_sV8w::I64, 3)) goto c13Pz; else goto c13PC;
       c13Pz: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c13PC: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV8x_info" {
     sat_sV8x_info:
         const sat_sV8x_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+96;
 },
 GHC.Enum.$fEnumOrdering_go2_entry() //  [R2]
         { []
         }
     {offset
       c13PK: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c13PO; else goto c13PN;
       c13PO: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13PN: // global
           I64[Hp - 64] = sat_sV8A_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sV8x_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_go2_info" {
     GHC.Enum.$fEnumOrdering_go2_info:
         const GHC.Enum.$fEnumOrdering_go2_entry;
         const 0;
         const 2305843013508661262;
         const 4294967300;
         const SVzM_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.339785888 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_go1_closure" {
     GHC.Enum.$fEnumOrdering_go1_closure:
         const GHC.Enum.$fEnumOrdering_go1_info;
         const 0;
 },
 sat_sV8G_entry() //  [R1]
         { []
         }
     {offset
       c13Ql: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13Qm; else goto c13Qn;
       c13Qm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13Qn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sV8E::I64 = I64[R1 + 16];
           if (_sV8E::I64 != 1) goto c13Qj; else goto c13Qk;
       c13Qj: // global
           R2 = _sV8E::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumOrdering_go1_entry(R2) args: 24, res: 0, upd: 24;
       c13Qk: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV8G_info" {
     sat_sV8G_info:
         const sat_sV8G_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+336;
 },
 sat_sV8D_entry() //  [R1]
         { []
         }
     {offset
       c13QA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13QB; else goto c13QC;
       c13QB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13QC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sV8C::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sV8C::I64, 2)) goto u13QD; else goto u13QF;
       u13QD: // global
           if (%MO_S_Lt_W64(_sV8C::I64, 1)) goto u13QE; else goto c13Qy;
       u13QE: // global
           if (%MO_S_Lt_W64(_sV8C::I64, 0)) goto c13Qw; else goto c13Qx;
       c13Qx: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c13Qy: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u13QF: // global
           if (%MO_S_Ge_W64(_sV8C::I64, 3)) goto c13Qw; else goto c13Qz;
       c13Qw: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c13Qz: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV8D_info" {
     sat_sV8D_info:
         const sat_sV8D_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+96;
 },
 GHC.Enum.$fEnumOrdering_go1_entry() //  [R2]
         { []
         }
     {offset
       c13QH: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c13QL; else goto c13QK;
       c13QL: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13QK: // global
           I64[Hp - 64] = sat_sV8G_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sV8D_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_go1_info" {
     GHC.Enum.$fEnumOrdering_go1_info:
         const GHC.Enum.$fEnumOrdering_go1_entry;
         const 0;
         const 4611686022722355214;
         const 4294967300;
         const SVzM_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.349119114 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_$cenumFromTo_closure" {
     GHC.Enum.$fEnumOrdering_$cenumFromTo_closure:
         const GHC.Enum.$fEnumOrdering_$cenumFromTo_info;
         const 0;
 },
 GHC.Enum.$fEnumOrdering_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c13Rk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13Rl; else goto c13Rm;
       c13Rl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c13Rm: // global
           I64[Sp - 16] = block_c13Rc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u13S9; else goto c13Rd;
       u13S9: // global
           call _c13Rc(R1) args: 0, res: 0, upd: 0;
       c13Rd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_$cenumFromTo_info" {
     GHC.Enum.$fEnumOrdering_$cenumFromTo_info:
         const GHC.Enum.$fEnumOrdering_$cenumFromTo_entry;
         const 0;
         const 966367641614;
         const 8589934607;
         const SVzM_srt+288;
 },
 _c13Rc() //  [R1]
         { []
         }
     {offset
       c13Rc: // global
           _sV8I::P64 = P64[Sp + 8];
           _c13Rj::P64 = R1 & 7;
           if (_c13Rj::P64 < 3) goto u13S6; else goto c13Ri;
       u13S6: // global
           if (_c13Rj::P64 < 2) goto c13Rg; else goto c13Rh;
       c13Rg: // global
           _sV8K::I64 = 0;
           goto sV8J;
       c13Rh: // global
           _sV8K::I64 = 1;
           goto sV8J;
       c13Ri: // global
           _sV8K::I64 = 2;
           goto sV8J;
       sV8J: // global
           I64[Sp] = block_c13Rq_info;
           R1 = _sV8I::P64;
           I64[Sp + 8] = _sV8K::I64;
           if (R1 & 7 != 0) goto u13S8; else goto c13Rs;
       u13S8: // global
           call _c13Rq(R1) args: 0, res: 0, upd: 0;
       c13Rs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c13Rc_info" {
     block_c13Rc_info:
         const _c13Rc;
         const 1;
         const 416611827742;
         const SVzM_srt+288;
 },
 _c13Rq() //  [R1]
         { []
         }
     {offset
       c13Rq: // global
           _sV8K::I64 = I64[Sp + 8];
           _c13S5::P64 = R1 & 7;
           if (_c13S5::P64 < 3) goto u13S7; else goto c13RV;
       u13S7: // global
           if (_c13S5::P64 < 2) goto c13RD; else goto c13RM;
       c13RD: // global
           if (%MO_S_Gt_W64(_sV8K::I64, 0)) goto c13RU; else goto c13RA;
       c13RA: // global
           R2 = _sV8K::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumOrdering_go2_entry(R2) args: 8, res: 0, upd: 8;
       c13RM: // global
           if (%MO_S_Gt_W64(_sV8K::I64, 1)) goto c13RU; else goto c13RK;
       c13RK: // global
           R2 = _sV8K::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumOrdering_go1_entry(R2) args: 8, res: 0, upd: 8;
       c13RV: // global
           if (%MO_S_Gt_W64(_sV8K::I64, 2)) goto c13RU; else goto c13RT;
       c13RU: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c13RT: // global
           R2 = _sV8K::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumOrdering_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c13Rq_info" {
     block_c13Rq_info:
         const _c13Rq;
         const 65;
         const 416611827742;
         const SVzM_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.358361541 UTC

[section ""data" . GHC.Enum.$fEnumBool_go_closure" {
     GHC.Enum.$fEnumBool_go_closure:
         const GHC.Enum.$fEnumBool_go_info;
         const 0;
 },
 sat_sV8V_entry() //  [R1]
         { []
         }
     {offset
       c13SC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13SD; else goto c13SE;
       c13SD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13SE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sV8T::I64 = I64[R1 + 16];
           if (_sV8T::I64 != 1) goto c13SA; else goto c13SB;
       c13SA: // global
           R2 = _sV8T::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumBool_go_entry(R2) args: 24, res: 0, upd: 24;
       c13SB: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV8V_info" {
     sat_sV8V_info:
         const sat_sV8V_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+352;
 },
 sat_sV8S_entry() //  [R1]
         { []
         }
     {offset
       c13SQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13SR; else goto c13SS;
       c13SR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13SS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sV8R::I64 = I64[R1 + 16];
           if (_sV8R::I64 != 0) goto u13ST; else goto c13SO;
       u13ST: // global
           if (_sV8R::I64 != 1) goto c13SN; else goto c13SP;
       c13SN: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c13SP: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c13SO: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV8S_info" {
     sat_sV8S_info:
         const sat_sV8S_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 GHC.Enum.$fEnumBool_go_entry() //  [R2]
         { []
         }
     {offset
       c13SV: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c13SZ; else goto c13SY;
       c13SZ: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13SY: // global
           I64[Hp - 64] = sat_sV8V_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sV8S_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_go_info" {
     GHC.Enum.$fEnumBool_go_info:
         const GHC.Enum.$fEnumBool_go_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const SVzM_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.366168621 UTC

[section ""data" . GHC.Enum.$fEnumBool3_closure" {
     GHC.Enum.$fEnumBool3_closure:
         const GHC.Enum.$fEnumBool3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumBool3_entry() //  [R1]
         { []
         }
     {offset
       c13Tp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13Tq; else goto c13Tr;
       c13Tq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13Tr: // global
           (_c13Tm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c13Tm::I64 == 0) goto c13To; else goto c13Tn;
       c13To: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c13Tn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c13Tm::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumBool_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool3_info" {
     GHC.Enum.$fEnumBool3_info:
         const GHC.Enum.$fEnumBool3_entry;
         const 0;
         const 4294967317;
         const SVzM_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.370164816 UTC

[section ""data" . GHC.Enum.$fEnumBool2_closure" {
     GHC.Enum.$fEnumBool2_closure:
         const GHC.Enum.$fEnumBool2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumBool2_entry() //  [R1]
         { []
         }
     {offset
       c13TF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13TG; else goto c13TH;
       c13TG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13TH: // global
           (_c13TC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c13TC::I64 == 0) goto c13TE; else goto c13TD;
       c13TE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c13TD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c13TC::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumBool_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool2_info" {
     GHC.Enum.$fEnumBool2_info:
         const GHC.Enum.$fEnumBool2_entry;
         const 0;
         const 4294967317;
         const SVzM_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.374935195 UTC

[section ""data" . GHC.Enum.$fEnumBool_$cenumFrom_closure" {
     GHC.Enum.$fEnumBool_$cenumFrom_closure:
         const GHC.Enum.$fEnumBool_$cenumFrom_info;
         const 0;
 },
 GHC.Enum.$fEnumBool_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c13U0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c13U1; else goto c13U2;
       c13U1: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13U2: // global
           I64[Sp - 8] = block_c13TT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u13U9; else goto c13TU;
       u13U9: // global
           call _c13TT(R1) args: 0, res: 0, upd: 0;
       c13TU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_$cenumFrom_info" {
     GHC.Enum.$fEnumBool_$cenumFrom_info:
         const GHC.Enum.$fEnumBool_$cenumFrom_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SVzM_srt+368;
 },
 _c13TT() //  [R1]
         { []
         }
     {offset
       c13TT: // global
           if (R1 & 7 == 1) goto c13TX; else goto c13TY;
       c13TX: // global
           R1 = GHC.Enum.$fEnumBool3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c13TY: // global
           R1 = GHC.Enum.$fEnumBool2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c13TT_info" {
     block_c13TT_info:
         const _c13TT;
         const 0;
         const 12884901918;
         const SVzM_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.381613564 UTC

[section ""data" . GHC.Enum.$fEnumBool_go1_closure" {
     GHC.Enum.$fEnumBool_go1_closure:
         const GHC.Enum.$fEnumBool_go1_info;
         const 0;
 },
 sat_sV93_entry() //  [R1]
         { []
         }
     {offset
       c13Uz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13UA; else goto c13UB;
       c13UA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13UB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sV91::I64 = I64[R1 + 16];
           if (_sV91::I64 != 0) goto c13Ux; else goto c13Uy;
       c13Ux: // global
           R2 = _sV91::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumBool_go1_entry(R2) args: 24, res: 0, upd: 24;
       c13Uy: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV93_info" {
     sat_sV93_info:
         const sat_sV93_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+392;
 },
 sat_sV90_entry() //  [R1]
         { []
         }
     {offset
       c13UN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13UO; else goto c13UP;
       c13UO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13UP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sV8Z::I64 = I64[R1 + 16];
           if (_sV8Z::I64 != 0) goto u13UQ; else goto c13UL;
       u13UQ: // global
           if (_sV8Z::I64 != 1) goto c13UK; else goto c13UM;
       c13UK: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c13UM: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c13UL: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV90_info" {
     sat_sV90_info:
         const sat_sV90_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 GHC.Enum.$fEnumBool_go1_entry() //  [R2]
         { []
         }
     {offset
       c13US: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c13UW; else goto c13UV;
       c13UW: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13UV: // global
           I64[Hp - 64] = sat_sV93_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sV90_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_go1_info" {
     GHC.Enum.$fEnumBool_go1_info:
         const GHC.Enum.$fEnumBool_go1_entry;
         const 0;
         const 73014444046;
         const 4294967300;
         const SVzM_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.390338748 UTC

[section ""data" . GHC.Enum.$fEnumBool_$cenumFromTo_closure" {
     GHC.Enum.$fEnumBool_$cenumFromTo_closure:
         const GHC.Enum.$fEnumBool_$cenumFromTo_info;
         const 0;
 },
 GHC.Enum.$fEnumBool_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c13Vt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13Vu; else goto c13Vv;
       c13Vu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c13Vv: // global
           I64[Sp - 16] = block_c13Vm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u13W4; else goto c13Vn;
       u13W4: // global
           call _c13Vm(R1) args: 0, res: 0, upd: 0;
       c13Vn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_$cenumFromTo_info" {
     GHC.Enum.$fEnumBool_$cenumFromTo_info:
         const GHC.Enum.$fEnumBool_$cenumFromTo_entry;
         const 0;
         const 416611827726;
         const 8589934607;
         const SVzM_srt+352;
 },
 _c13Vm() //  [R1]
         { []
         }
     {offset
       c13Vm: // global
           _sV95::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c13Vq; else goto c13Vr;
       c13Vq: // global
           _sV97::I64 = 0;
           goto sV96;
       c13Vr: // global
           _sV97::I64 = 1;
           goto sV96;
       sV96: // global
           I64[Sp] = block_c13Vz_info;
           R1 = _sV95::P64;
           I64[Sp + 8] = _sV97::I64;
           if (R1 & 7 != 0) goto u13W3; else goto c13VB;
       u13W3: // global
           call _c13Vz(R1) args: 0, res: 0, upd: 0;
       c13VB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c13Vm_info" {
     block_c13Vm_info:
         const _c13Vm;
         const 1;
         const 141733920798;
         const SVzM_srt+352;
 },
 _c13Vz() //  [R1]
         { []
         }
     {offset
       c13Vz: // global
           _sV97::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto c13VM; else goto c13VV;
       c13VM: // global
           if (%MO_S_Gt_W64(_sV97::I64, 0)) goto c13VU; else goto c13VJ;
       c13VJ: // global
           R2 = _sV97::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumBool_go1_entry(R2) args: 8, res: 0, upd: 8;
       c13VV: // global
           if (%MO_S_Gt_W64(_sV97::I64, 1)) goto c13VU; else goto c13VT;
       c13VU: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c13VT: // global
           R2 = _sV97::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumBool_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c13Vz_info" {
     block_c13Vz_info:
         const _c13Vz;
         const 65;
         const 141733920798;
         const SVzM_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.398309782 UTC

[section ""data" . GHC.Enum.$fEnumInt_$cenumFrom_closure" {
     GHC.Enum.$fEnumInt_$cenumFrom_closure:
         const GHC.Enum.$fEnumInt_$cenumFrom_info;
 },
 GHC.Enum.$fEnumInt_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c13Wu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c13Wv; else goto c13Ww;
       c13Wv: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumInt_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13Ww: // global
           I64[Sp - 8] = block_c13Wr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u13WA; else goto c13Ws;
       u13WA: // global
           call _c13Wr(R1) args: 0, res: 0, upd: 0;
       c13Ws: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInt_$cenumFrom_info" {
     GHC.Enum.$fEnumInt_$cenumFrom_info:
         const GHC.Enum.$fEnumInt_$cenumFrom_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c13Wr() //  [R1]
         { []
         }
     {offset
       c13Wr: // global
           R3 = 9223372036854775807;
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.eftInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c13Wr_info" {
     block_c13Wr_info:
         const _c13Wr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.404083631 UTC

[section ""data" . GHC.Enum.$fEnumInt_$cenumFromTo_closure" {
     GHC.Enum.$fEnumInt_$cenumFromTo_closure:
         const GHC.Enum.$fEnumInt_$cenumFromTo_info;
 },
 GHC.Enum.$fEnumInt_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c13WR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13WV; else goto c13WW;
       c13WV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumInt_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c13WW: // global
           I64[Sp - 16] = block_c13WO_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u13X4; else goto c13WP;
       u13X4: // global
           call _c13WO(R1) args: 0, res: 0, upd: 0;
       c13WP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInt_$cenumFromTo_info" {
     GHC.Enum.$fEnumInt_$cenumFromTo_info:
         const GHC.Enum.$fEnumInt_$cenumFromTo_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c13WO() //  [R1]
         { []
         }
     {offset
       c13WO: // global
           I64[Sp] = block_c13WU_info;
           _sV9i::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sV9i::I64;
           if (R1 & 7 != 0) goto u13X3; else goto c13WY;
       u13X3: // global
           call _c13WU(R1) args: 0, res: 0, upd: 0;
       c13WY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c13WO_info" {
     block_c13WO_info:
         const _c13WO;
         const 1;
         const 30;
 },
 _c13WU() //  [R1]
         { []
         }
     {offset
       c13WU: // global
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Enum.eftInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c13WU_info" {
     block_c13WU_info:
         const _c13WU;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.412881935 UTC

[section ""data" . GHC.Enum.efdtIntUp_closure" {
     GHC.Enum.efdtIntUp_closure:
         const GHC.Enum.efdtIntUp_info;
 },
 sat_sV9x_entry() //  [R1]
         { []
         }
     {offset
       c13XN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13XO; else goto c13XP;
       c13XO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13XP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sV9s_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV9x_info" {
     sat_sV9x_info:
         const sat_sV9x_entry;
         const 8589934593;
         const 15;
 },
 go_up_sV9s_entry() //  [R1, R2]
         { []
         }
     {offset
       c13XT: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c13XX; else goto c13XW;
       c13XX: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13XW: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c13XR; else goto c13XS;
       c13XR: // global
           _sV9q::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_sV9x_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _sV9q::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c13XS: // global
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c13Y2::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c13Y2::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sV9s_info" {
     go_up_sV9s_info:
         const go_up_sV9s_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_sV9z_entry() //  [R1]
         { []
         }
     {offset
       c13Y3: // global
           _sV9z::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c13Y4; else goto c13Y5;
       c13Y5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c13Y7; else goto c13Y6;
       c13Y7: // global
           HpAlloc = 24;
           goto c13Y4;
       c13Y4: // global
           R1 = _sV9z::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13Y6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sV9z::P64;
           _sV9m::I64 = I64[_sV9z::P64 + 24];
           _sV9q::I64 = _sV9m::I64 - I64[_sV9z::P64 + 16];
           _sV9r::I64 = I64[_sV9z::P64 + 32] - _sV9q::I64;
           I64[Hp - 16] = go_up_sV9s_info;
           I64[Hp - 8] = _sV9q::I64;
           I64[Hp] = _sV9r::I64;
           R2 = _sV9m::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sV9s_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV9z_info" {
     sat_sV9z_info:
         const sat_sV9z_entry;
         const 12884901888;
         const 15;
 },
 GHC.Enum.efdtIntUp_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c13Yb: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c13Yf; else goto c13Ye;
       c13Yf: // global
           HpAlloc = 80;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.efdtIntUp_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c13Ye: // global
           if (%MO_S_Ge_W64(R4, R3)) goto c13Y9; else goto c13Ya;
       c13Y9: // global
           I64[Hp - 72] = sat_sV9z_info;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = R3;
           I64[Hp - 40] = R4;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c13Ya: // global
           if (%MO_S_Ge_W64(R4, R2)) goto c13Yp; else goto c13Yq;
       c13Yp: // global
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c13Yn::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c13Yn::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c13Yq: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtIntUp_info" {
     GHC.Enum.efdtIntUp_info:
         const GHC.Enum.efdtIntUp_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.427286513 UTC

[section ""data" . GHC.Enum.efdtIntUpFB_closure" {
     GHC.Enum.efdtIntUpFB_closure:
         const GHC.Enum.efdtIntUpFB_info;
 },
 GHC.Enum.efdtIntUpFB_slow() //  [R1]
         { []
         }
     {offset
       c13YW: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.efdtIntUpFB_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2,
                                           R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sV9Q_entry() //  [R1]
         { []
         }
     {offset
       c13Zr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c13Zs; else goto c13Zt;
       c13Zs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13Zt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sV9L_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV9Q_info" {
     sat_sV9Q_info:
         const sat_sV9Q_entry;
         const 8589934593;
         const 15;
 },
 go_up_sV9L_entry() //  [R1, R2]
         { []
         }
     {offset
       c13Zx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c13ZB; else goto c13ZA;
       c13ZB: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c13ZA: // global
           _sV9C::P64 = P64[R1 + 7];
           if (%MO_S_Le_W64(R2, I64[R1 + 31])) goto c13Zv; else goto c13Zw;
       c13Zv: // global
           _sV9J::I64 = I64[R1 + 23];
           I64[Hp - 48] = sat_sV9Q_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = _sV9J::I64;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 7;
           R1 = _sV9C::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c13Zw: // global
           _sV9D::P64 = P64[R1 + 15];
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = R2;
           _c13ZE::P64 = Hp - 47;
           Hp = Hp - 40;
           R3 = _sV9D::P64;
           R2 = _c13ZE::P64;
           R1 = _sV9C::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sV9L_info" {
     go_up_sV9L_info:
         const go_up_sV9L_entry;
         const 8589934594;
         const 8;
         const 4294967300;
 },
 sat_sV9S_entry() //  [R1]
         { []
         }
     {offset
       c13ZF: // global
           _sV9S::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c13ZG; else goto c13ZH;
       c13ZH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c13ZJ; else goto c13ZI;
       c13ZJ: // global
           HpAlloc = 40;
           goto c13ZG;
       c13ZG: // global
           R1 = _sV9S::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c13ZI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sV9S::P64;
           _sV9C::P64 = P64[_sV9S::P64 + 16];
           _sV9D::P64 = P64[_sV9S::P64 + 24];
           _sV9F::I64 = I64[_sV9S::P64 + 40];
           _sV9J::I64 = _sV9F::I64 - I64[_sV9S::P64 + 32];
           _sV9K::I64 = I64[_sV9S::P64 + 48] - _sV9J::I64;
           I64[Hp - 32] = go_up_sV9L_info;
           P64[Hp - 24] = _sV9C::P64;
           P64[Hp - 16] = _sV9D::P64;
           I64[Hp - 8] = _sV9J::I64;
           I64[Hp] = _sV9K::I64;
           R2 = _sV9F::I64;
           R1 = Hp - 31;
           Sp = Sp - 16;
           call go_up_sV9L_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sV9S_info" {
     sat_sV9S_info:
         const sat_sV9S_entry;
         const 12884901890;
         const 15;
 },
 GHC.Enum.efdtIntUpFB_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c13ZN: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c13ZR; else goto c13ZQ;
       c13ZR: // global
           HpAlloc = 72;
           R1 = GHC.Enum.efdtIntUpFB_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       c13ZQ: // global
           if (%MO_S_Ge_W64(R6, R5)) goto c13ZL; else goto c13ZM;
       c13ZL: // global
           I64[Hp - 64] = sat_sV9S_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = R4;
           I64[Hp - 24] = R5;
           I64[Hp - 16] = R6;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R4;
           R3 = Hp - 64;
           _sV9C::P64 = R2;
           R2 = Hp - 7;
           R1 = _sV9C::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c13ZM: // global
           if (%MO_S_Ge_W64(R6, R4)) goto c13ZZ; else goto c1400;
       c13ZZ: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = R4;
           _c13ZX::P64 = Hp - 63;
           Hp = Hp - 56;
           R3 = R3;
           _sV9C::P64 = R2;
           R2 = _c13ZX::P64;
           R1 = _sV9C::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1400: // global
           Hp = Hp - 72;
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtIntUpFB_info" {
     GHC.Enum.efdtIntUpFB_info:
         const GHC.Enum.efdtIntUpFB_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 1797;
         const GHC.Enum.efdtIntUpFB_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.441478693 UTC

[section ""data" . GHC.Enum.efdtIntDn_closure" {
     GHC.Enum.efdtIntDn_closure:
         const GHC.Enum.efdtIntDn_info;
 },
 sat_sVa7_entry() //  [R1]
         { []
         }
     {offset
       c140R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c140S; else goto c140T;
       c140S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c140T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVa2_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVa7_info" {
     sat_sVa7_info:
         const sat_sVa7_entry;
         const 8589934593;
         const 15;
 },
 go_dn_sVa2_entry() //  [R1, R2]
         { []
         }
     {offset
       c140X: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1411; else goto c1410;
       c1411: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1410: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c140V; else goto c140W;
       c140V: // global
           _sVa0::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_sVa7_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _sVa0::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c140W: // global
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1416::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1416::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVa2_info" {
     go_dn_sVa2_info:
         const go_dn_sVa2_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_sVa9_entry() //  [R1]
         { []
         }
     {offset
       c1417: // global
           _sVa9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1418; else goto c1419;
       c1419: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c141b; else goto c141a;
       c141b: // global
           HpAlloc = 24;
           goto c1418;
       c1418: // global
           R1 = _sVa9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c141a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVa9::P64;
           _sV9W::I64 = I64[_sVa9::P64 + 24];
           _sVa0::I64 = _sV9W::I64 - I64[_sVa9::P64 + 16];
           _sVa1::I64 = I64[_sVa9::P64 + 32] - _sVa0::I64;
           I64[Hp - 16] = go_dn_sVa2_info;
           I64[Hp - 8] = _sVa0::I64;
           I64[Hp] = _sVa1::I64;
           R2 = _sV9W::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVa2_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVa9_info" {
     sat_sVa9_info:
         const sat_sVa9_entry;
         const 12884901888;
         const 15;
 },
 GHC.Enum.efdtIntDn_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c141f: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c141j; else goto c141i;
       c141j: // global
           HpAlloc = 80;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.efdtIntDn_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c141i: // global
           if (%MO_S_Le_W64(R4, R3)) goto c141d; else goto c141e;
       c141d: // global
           I64[Hp - 72] = sat_sVa9_info;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = R3;
           I64[Hp - 40] = R4;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c141e: // global
           if (%MO_S_Le_W64(R4, R2)) goto c141t; else goto c141u;
       c141t: // global
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c141r::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c141r::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c141u: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtIntDn_info" {
     GHC.Enum.efdtIntDn_info:
         const GHC.Enum.efdtIntDn_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.451480664 UTC

[section ""data" . GHC.Enum.efdInt_closure" {
     GHC.Enum.efdInt_closure:
         const GHC.Enum.efdInt_info;
 },
 GHC.Enum.efdInt_entry() //  [R2, R3]
         { []
         }
     {offset
       c1428: // global
           if (%MO_S_Lt_W64(R3, R2)) goto c1426; else goto c1427;
       c1426: // global
           R4 = (-9223372036854775808);
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtIntDn_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c1427: // global
           R4 = 9223372036854775807;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtIntUp_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdInt_info" {
     GHC.Enum.efdInt_info:
         const GHC.Enum.efdInt_entry;
         const 0;
         const 14;
         const 8589934604;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.455683876 UTC

[section ""data" . GHC.Enum.$fEnumInt_$cenumFromThen_closure" {
     GHC.Enum.$fEnumInt_$cenumFromThen_closure:
         const GHC.Enum.$fEnumInt_$cenumFromThen_info;
 },
 GHC.Enum.$fEnumInt_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c142m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c142q; else goto c142r;
       c142q: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumInt_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c142r: // global
           I64[Sp - 16] = block_c142j_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u142z; else goto c142k;
       u142z: // global
           call _c142j(R1) args: 0, res: 0, upd: 0;
       c142k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInt_$cenumFromThen_info" {
     GHC.Enum.$fEnumInt_$cenumFromThen_info:
         const GHC.Enum.$fEnumInt_$cenumFromThen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c142j() //  [R1]
         { []
         }
     {offset
       c142j: // global
           I64[Sp] = block_c142p_info;
           _sVai::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sVai::I64;
           if (R1 & 7 != 0) goto u142y; else goto c142t;
       u142y: // global
           call _c142p(R1) args: 0, res: 0, upd: 0;
       c142t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c142j_info" {
     block_c142j_info:
         const _c142j;
         const 1;
         const 30;
 },
 _c142p() //  [R1]
         { []
         }
     {offset
       c142p: // global
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c142p_info" {
     block_c142p_info:
         const _c142p;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.465779656 UTC

[section ""data" . GHC.Enum.efdtIntDnFB_closure" {
     GHC.Enum.efdtIntDnFB_closure:
         const GHC.Enum.efdtIntDnFB_info;
 },
 GHC.Enum.efdtIntDnFB_slow() //  [R1]
         { []
         }
     {offset
       c142O: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.efdtIntDnFB_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2,
                                           R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sVaz_entry() //  [R1]
         { []
         }
     {offset
       c143j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c143k; else goto c143l;
       c143k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c143l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVau_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVaz_info" {
     sat_sVaz_info:
         const sat_sVaz_entry;
         const 8589934593;
         const 15;
 },
 go_dn_sVau_entry() //  [R1, R2]
         { []
         }
     {offset
       c143p: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c143t; else goto c143s;
       c143t: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c143s: // global
           _sVal::P64 = P64[R1 + 7];
           if (%MO_S_Ge_W64(R2, I64[R1 + 31])) goto c143n; else goto c143o;
       c143n: // global
           _sVas::I64 = I64[R1 + 23];
           I64[Hp - 48] = sat_sVaz_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = _sVas::I64;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 7;
           R1 = _sVal::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c143o: // global
           _sVam::P64 = P64[R1 + 15];
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = R2;
           _c143w::P64 = Hp - 47;
           Hp = Hp - 40;
           R3 = _sVam::P64;
           R2 = _c143w::P64;
           R1 = _sVal::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVau_info" {
     go_dn_sVau_info:
         const go_dn_sVau_entry;
         const 8589934594;
         const 8;
         const 4294967300;
 },
 sat_sVaB_entry() //  [R1]
         { []
         }
     {offset
       c143x: // global
           _sVaB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c143y; else goto c143z;
       c143z: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c143B; else goto c143A;
       c143B: // global
           HpAlloc = 40;
           goto c143y;
       c143y: // global
           R1 = _sVaB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c143A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVaB::P64;
           _sVal::P64 = P64[_sVaB::P64 + 16];
           _sVam::P64 = P64[_sVaB::P64 + 24];
           _sVao::I64 = I64[_sVaB::P64 + 40];
           _sVas::I64 = _sVao::I64 - I64[_sVaB::P64 + 32];
           _sVat::I64 = I64[_sVaB::P64 + 48] - _sVas::I64;
           I64[Hp - 32] = go_dn_sVau_info;
           P64[Hp - 24] = _sVal::P64;
           P64[Hp - 16] = _sVam::P64;
           I64[Hp - 8] = _sVas::I64;
           I64[Hp] = _sVat::I64;
           R2 = _sVao::I64;
           R1 = Hp - 31;
           Sp = Sp - 16;
           call go_dn_sVau_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVaB_info" {
     sat_sVaB_info:
         const sat_sVaB_entry;
         const 12884901890;
         const 15;
 },
 GHC.Enum.efdtIntDnFB_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c143F: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c143J; else goto c143I;
       c143J: // global
           HpAlloc = 72;
           R1 = GHC.Enum.efdtIntDnFB_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       c143I: // global
           if (%MO_S_Le_W64(R6, R5)) goto c143D; else goto c143E;
       c143D: // global
           I64[Hp - 64] = sat_sVaB_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = R4;
           I64[Hp - 24] = R5;
           I64[Hp - 16] = R6;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R4;
           R3 = Hp - 64;
           _sVal::P64 = R2;
           R2 = Hp - 7;
           R1 = _sVal::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c143E: // global
           if (%MO_S_Le_W64(R6, R4)) goto c143R; else goto c143S;
       c143R: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = R4;
           _c143P::P64 = Hp - 63;
           Hp = Hp - 56;
           R3 = R3;
           _sVal::P64 = R2;
           R2 = _c143P::P64;
           R1 = _sVal::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c143S: // global
           Hp = Hp - 72;
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtIntDnFB_info" {
     GHC.Enum.efdtIntDnFB_info:
         const GHC.Enum.efdtIntDnFB_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 1797;
         const GHC.Enum.efdtIntDnFB_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.477527791 UTC

[section ""data" . GHC.Enum.efdtInt_closure" {
     GHC.Enum.efdtInt_closure:
         const GHC.Enum.efdtInt_info;
 },
 GHC.Enum.efdtInt_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c144n: // global
           if (%MO_S_Lt_W64(R3, R2)) goto c144l; else goto c144m;
       c144l: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtIntDn_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c144m: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtIntUp_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtInt_info" {
     GHC.Enum.efdtInt_info:
         const GHC.Enum.efdtInt_entry;
         const 0;
         const 14;
         const 12884901904;
 },
 section ""data" . GHC.Enum.efdtIntFB_closure" {
     GHC.Enum.efdtIntFB_closure:
         const GHC.Enum.efdtIntFB_info;
 },
 GHC.Enum.efdtIntFB_slow() //  [R1]
         { []
         }
     {offset
       c144r: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.efdtIntFB_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Enum.efdtIntFB_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c144A: // global
           if (%MO_S_Lt_W64(R5, R4)) goto c144y; else goto c144z;
       c144y: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtIntDnFB_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
       c144z: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtIntUpFB_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtIntFB_info" {
     GHC.Enum.efdtIntFB_info:
         const GHC.Enum.efdtIntFB_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 1797;
         const GHC.Enum.efdtIntFB_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.517206601 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_$cenumFromThenTo_closure" {
     GHC.Enum.$fEnumOrdering_$cenumFromThenTo_closure:
         const GHC.Enum.$fEnumOrdering_$cenumFromThenTo_info;
         const 0;
 },
 sat_sVb8_entry() //  [R1]
         { []
         }
     {offset
       c145A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c145B; else goto c145C;
       c145B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c145C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVb2_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVb8_info" {
     sat_sVb8_info:
         const sat_sVb8_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+408;
 },
 sat_sVb6_entry() //  [R1]
         { []
         }
     {offset
       c145N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c145O; else goto c145P;
       c145O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c145P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVb5::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVb5::I64, 2)) goto u145Q; else goto u145S;
       u145Q: // global
           if (%MO_S_Lt_W64(_sVb5::I64, 1)) goto u145R; else goto c145L;
       u145R: // global
           if (%MO_S_Lt_W64(_sVb5::I64, 0)) goto c145J; else goto c145K;
       c145K: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c145L: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u145S: // global
           if (%MO_S_Ge_W64(_sVb5::I64, 3)) goto c145J; else goto c145M;
       c145J: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c145M: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVb6_info" {
     sat_sVb6_info:
         const sat_sVb6_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVba_entry() //  [R1]
         { []
         }
     {offset
       c1464: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1465; else goto c1466;
       c1465: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1466: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVb9::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVb9::I64, 2)) goto u1467; else goto u1469;
       u1467: // global
           if (%MO_S_Lt_W64(_sVb9::I64, 1)) goto u1468; else goto c1462;
       u1468: // global
           if (%MO_S_Lt_W64(_sVb9::I64, 0)) goto c1460; else goto c1461;
       c1461: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1462: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1469: // global
           if (%MO_S_Ge_W64(_sVb9::I64, 3)) goto c1460; else goto c1463;
       c1460: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1463: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVba_info" {
     sat_sVba_info:
         const sat_sVba_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 go_dn_sVb2_entry() //  [R1, R2]
         { []
         }
     {offset
       c146d: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c146h; else goto c146g;
       c146h: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c146g: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c146b; else goto c146c;
       c146b: // global
           _sVb0::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVb8_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVb0::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVb6_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c146c: // global
           I64[Hp - 80] = sat_sVba_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c146j::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c146j::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVb2_info" {
     go_dn_sVb2_info:
         const go_dn_sVb2_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+408;
 },
 sat_sVbb_entry() //  [R1]
         { []
         }
     {offset
       c146k: // global
           _sVbb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c146l; else goto c146m;
       c146m: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c146o; else goto c146n;
       c146o: // global
           HpAlloc = 24;
           goto c146l;
       c146l: // global
           R1 = _sVbb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c146n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVbb::P64;
           _sVaU::I64 = I64[_sVbb::P64 + 24];
           _sVb0::I64 = _sVaU::I64 - I64[_sVbb::P64 + 16];
           I64[Hp - 16] = go_dn_sVb2_info;
           I64[Hp - 8] = _sVb0::I64;
           I64[Hp] = 0 - _sVb0::I64;
           R2 = _sVaU::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVb2_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVbb_info" {
     sat_sVbb_info:
         const sat_sVbb_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+408;
 },
 sat_sVaZ_entry() //  [R1]
         { []
         }
     {offset
       c146z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c146A; else goto c146B;
       c146A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c146B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVaY::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVaY::I64, 2)) goto u146C; else goto u146E;
       u146C: // global
           if (%MO_S_Lt_W64(_sVaY::I64, 1)) goto u146D; else goto c146x;
       u146D: // global
           if (%MO_S_Lt_W64(_sVaY::I64, 0)) goto c146v; else goto c146w;
       c146w: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c146x: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u146E: // global
           if (%MO_S_Ge_W64(_sVaY::I64, 3)) goto c146v; else goto c146y;
       c146v: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c146y: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVaZ_info" {
     sat_sVaZ_info:
         const sat_sVaZ_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVbe_entry() //  [R1]
         { []
         }
     {offset
       c146T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c146U; else goto c146V;
       c146U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c146V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVbd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVbd::I64, 2)) goto u146W; else goto u146Y;
       u146W: // global
           if (%MO_S_Lt_W64(_sVbd::I64, 1)) goto u146X; else goto c146R;
       u146X: // global
           if (%MO_S_Lt_W64(_sVbd::I64, 0)) goto c146P; else goto c146Q;
       c146Q: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c146R: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u146Y: // global
           if (%MO_S_Ge_W64(_sVbd::I64, 3)) goto c146P; else goto c146S;
       c146P: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c146S: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVbe_info" {
     sat_sVbe_info:
         const sat_sVbe_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVbq_entry() //  [R1]
         { []
         }
     {offset
       c147r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c147s; else goto c147t;
       c147s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c147t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVbk_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVbq_info" {
     sat_sVbq_info:
         const sat_sVbq_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+408;
 },
 sat_sVbo_entry() //  [R1]
         { []
         }
     {offset
       c147E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c147F; else goto c147G;
       c147F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c147G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVbn::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVbn::I64, 2)) goto u147H; else goto u147J;
       u147H: // global
           if (%MO_S_Lt_W64(_sVbn::I64, 1)) goto u147I; else goto c147C;
       u147I: // global
           if (%MO_S_Lt_W64(_sVbn::I64, 0)) goto c147A; else goto c147B;
       c147B: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c147C: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u147J: // global
           if (%MO_S_Ge_W64(_sVbn::I64, 3)) goto c147A; else goto c147D;
       c147A: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c147D: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVbo_info" {
     sat_sVbo_info:
         const sat_sVbo_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVbs_entry() //  [R1]
         { []
         }
     {offset
       c147V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c147W; else goto c147X;
       c147W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c147X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVbr::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVbr::I64, 2)) goto u147Y; else goto u1480;
       u147Y: // global
           if (%MO_S_Lt_W64(_sVbr::I64, 1)) goto u147Z; else goto c147T;
       u147Z: // global
           if (%MO_S_Lt_W64(_sVbr::I64, 0)) goto c147R; else goto c147S;
       c147S: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c147T: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1480: // global
           if (%MO_S_Ge_W64(_sVbr::I64, 3)) goto c147R; else goto c147U;
       c147R: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c147U: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVbs_info" {
     sat_sVbs_info:
         const sat_sVbs_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 go_up_sVbk_entry() //  [R1, R2]
         { []
         }
     {offset
       c1484: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1488; else goto c1487;
       c1488: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1487: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c1482; else goto c1483;
       c1482: // global
           _sVbi::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVbq_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVbi::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVbo_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1483: // global
           I64[Hp - 80] = sat_sVbs_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c148a::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c148a::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVbk_info" {
     go_up_sVbk_info:
         const go_up_sVbk_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+408;
 },
 sat_sVbt_entry() //  [R1]
         { []
         }
     {offset
       c148b: // global
           _sVbt::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c148c; else goto c148d;
       c148d: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c148f; else goto c148e;
       c148f: // global
           HpAlloc = 24;
           goto c148c;
       c148c: // global
           R1 = _sVbt::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c148e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVbt::P64;
           _sVaU::I64 = I64[_sVbt::P64 + 24];
           _sVbi::I64 = _sVaU::I64 - I64[_sVbt::P64 + 16];
           I64[Hp - 16] = go_up_sVbk_info;
           I64[Hp - 8] = _sVbi::I64;
           I64[Hp] = 0 - _sVbi::I64;
           R2 = _sVaU::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sVbk_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVbt_info" {
     sat_sVbt_info:
         const sat_sVbt_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+408;
 },
 sat_sVbh_entry() //  [R1]
         { []
         }
     {offset
       c148q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c148r; else goto c148s;
       c148r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c148s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVbg::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVbg::I64, 2)) goto u148t; else goto u148v;
       u148t: // global
           if (%MO_S_Lt_W64(_sVbg::I64, 1)) goto u148u; else goto c148o;
       u148u: // global
           if (%MO_S_Lt_W64(_sVbg::I64, 0)) goto c148m; else goto c148n;
       c148n: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c148o: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u148v: // global
           if (%MO_S_Ge_W64(_sVbg::I64, 3)) goto c148m; else goto c148p;
       c148m: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c148p: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVbh_info" {
     sat_sVbh_info:
         const sat_sVbh_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVbw_entry() //  [R1]
         { []
         }
     {offset
       c148K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c148L; else goto c148M;
       c148L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c148M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVbv::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVbv::I64, 2)) goto u148N; else goto u148P;
       u148N: // global
           if (%MO_S_Lt_W64(_sVbv::I64, 1)) goto u148O; else goto c148I;
       u148O: // global
           if (%MO_S_Lt_W64(_sVbv::I64, 0)) goto c148G; else goto c148H;
       c148H: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c148I: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u148P: // global
           if (%MO_S_Ge_W64(_sVbv::I64, 3)) goto c148G; else goto c148J;
       c148G: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c148J: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVbw_info" {
     sat_sVbw_info:
         const sat_sVbw_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVbJ_entry() //  [R1]
         { []
         }
     {offset
       c149m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c149n; else goto c149o;
       c149n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c149o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVbD_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVbJ_info" {
     sat_sVbJ_info:
         const sat_sVbJ_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+408;
 },
 sat_sVbH_entry() //  [R1]
         { []
         }
     {offset
       c149z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c149A; else goto c149B;
       c149A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c149B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVbG::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVbG::I64, 2)) goto u149C; else goto u149E;
       u149C: // global
           if (%MO_S_Lt_W64(_sVbG::I64, 1)) goto u149D; else goto c149x;
       u149D: // global
           if (%MO_S_Lt_W64(_sVbG::I64, 0)) goto c149v; else goto c149w;
       c149w: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c149x: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u149E: // global
           if (%MO_S_Ge_W64(_sVbG::I64, 3)) goto c149v; else goto c149y;
       c149v: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c149y: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVbH_info" {
     sat_sVbH_info:
         const sat_sVbH_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVbL_entry() //  [R1]
         { []
         }
     {offset
       c149Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c149R; else goto c149S;
       c149R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c149S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVbK::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVbK::I64, 2)) goto u149T; else goto u149V;
       u149T: // global
           if (%MO_S_Lt_W64(_sVbK::I64, 1)) goto u149U; else goto c149O;
       u149U: // global
           if (%MO_S_Lt_W64(_sVbK::I64, 0)) goto c149M; else goto c149N;
       c149N: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c149O: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u149V: // global
           if (%MO_S_Ge_W64(_sVbK::I64, 3)) goto c149M; else goto c149P;
       c149M: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c149P: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVbL_info" {
     sat_sVbL_info:
         const sat_sVbL_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 go_dn_sVbD_entry() //  [R1, R2]
         { []
         }
     {offset
       c149Z: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c14a3; else goto c14a2;
       c14a3: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c14a2: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c149X; else goto c149Y;
       c149X: // global
           _sVbB::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVbJ_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVbB::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVbH_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c149Y: // global
           I64[Hp - 80] = sat_sVbL_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c14a5::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c14a5::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVbD_info" {
     go_dn_sVbD_info:
         const go_dn_sVbD_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+408;
 },
 sat_sVbM_entry() //  [R1]
         { []
         }
     {offset
       c14a6: // global
           _sVbM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c14a7; else goto c14a8;
       c14a8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c14aa; else goto c14a9;
       c14aa: // global
           HpAlloc = 24;
           goto c14a7;
       c14a7: // global
           R1 = _sVbM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14a9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVbM::P64;
           _sVaU::I64 = I64[_sVbM::P64 + 24];
           _sVbB::I64 = _sVaU::I64 - I64[_sVbM::P64 + 16];
           I64[Hp - 16] = go_dn_sVbD_info;
           I64[Hp - 8] = _sVbB::I64;
           I64[Hp] = 1 - _sVbB::I64;
           R2 = _sVaU::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVbD_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVbM_info" {
     sat_sVbM_info:
         const sat_sVbM_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+408;
 },
 sat_sVbA_entry() //  [R1]
         { []
         }
     {offset
       c14al: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14am; else goto c14an;
       c14am: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14an: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVbz::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVbz::I64, 2)) goto u14ao; else goto u14aq;
       u14ao: // global
           if (%MO_S_Lt_W64(_sVbz::I64, 1)) goto u14ap; else goto c14aj;
       u14ap: // global
           if (%MO_S_Lt_W64(_sVbz::I64, 0)) goto c14ah; else goto c14ai;
       c14ai: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14aj: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14aq: // global
           if (%MO_S_Ge_W64(_sVbz::I64, 3)) goto c14ah; else goto c14ak;
       c14ah: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14ak: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVbA_info" {
     sat_sVbA_info:
         const sat_sVbA_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVbP_entry() //  [R1]
         { []
         }
     {offset
       c14aF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14aG; else goto c14aH;
       c14aG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14aH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVbO::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVbO::I64, 2)) goto u14aI; else goto u14aK;
       u14aI: // global
           if (%MO_S_Lt_W64(_sVbO::I64, 1)) goto u14aJ; else goto c14aD;
       u14aJ: // global
           if (%MO_S_Lt_W64(_sVbO::I64, 0)) goto c14aB; else goto c14aC;
       c14aC: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14aD: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14aK: // global
           if (%MO_S_Ge_W64(_sVbO::I64, 3)) goto c14aB; else goto c14aE;
       c14aB: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14aE: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVbP_info" {
     sat_sVbP_info:
         const sat_sVbP_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVc1_entry() //  [R1]
         { []
         }
     {offset
       c14bd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14be; else goto c14bf;
       c14be: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14bf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVbV_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVc1_info" {
     sat_sVc1_info:
         const sat_sVc1_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+408;
 },
 sat_sVbZ_entry() //  [R1]
         { []
         }
     {offset
       c14bq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14br; else goto c14bs;
       c14br: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14bs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVbY::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVbY::I64, 2)) goto u14bt; else goto u14bv;
       u14bt: // global
           if (%MO_S_Lt_W64(_sVbY::I64, 1)) goto u14bu; else goto c14bo;
       u14bu: // global
           if (%MO_S_Lt_W64(_sVbY::I64, 0)) goto c14bm; else goto c14bn;
       c14bn: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14bo: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14bv: // global
           if (%MO_S_Ge_W64(_sVbY::I64, 3)) goto c14bm; else goto c14bp;
       c14bm: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14bp: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVbZ_info" {
     sat_sVbZ_info:
         const sat_sVbZ_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVc3_entry() //  [R1]
         { []
         }
     {offset
       c14bH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14bI; else goto c14bJ;
       c14bI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14bJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVc2::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVc2::I64, 2)) goto u14bK; else goto u14bM;
       u14bK: // global
           if (%MO_S_Lt_W64(_sVc2::I64, 1)) goto u14bL; else goto c14bF;
       u14bL: // global
           if (%MO_S_Lt_W64(_sVc2::I64, 0)) goto c14bD; else goto c14bE;
       c14bE: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14bF: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14bM: // global
           if (%MO_S_Ge_W64(_sVc2::I64, 3)) goto c14bD; else goto c14bG;
       c14bD: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14bG: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVc3_info" {
     sat_sVc3_info:
         const sat_sVc3_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 go_up_sVbV_entry() //  [R1, R2]
         { []
         }
     {offset
       c14bQ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c14bU; else goto c14bT;
       c14bU: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c14bT: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c14bO; else goto c14bP;
       c14bO: // global
           _sVbT::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVc1_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVbT::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVbZ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14bP: // global
           I64[Hp - 80] = sat_sVc3_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c14bW::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c14bW::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVbV_info" {
     go_up_sVbV_info:
         const go_up_sVbV_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+408;
 },
 sat_sVc4_entry() //  [R1]
         { []
         }
     {offset
       c14bX: // global
           _sVc4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c14bY; else goto c14bZ;
       c14bZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c14c1; else goto c14c0;
       c14c1: // global
           HpAlloc = 24;
           goto c14bY;
       c14bY: // global
           R1 = _sVc4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14c0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVc4::P64;
           _sVaU::I64 = I64[_sVc4::P64 + 24];
           _sVbT::I64 = _sVaU::I64 - I64[_sVc4::P64 + 16];
           I64[Hp - 16] = go_up_sVbV_info;
           I64[Hp - 8] = _sVbT::I64;
           I64[Hp] = 1 - _sVbT::I64;
           R2 = _sVaU::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sVbV_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVc4_info" {
     sat_sVc4_info:
         const sat_sVc4_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+408;
 },
 sat_sVbS_entry() //  [R1]
         { []
         }
     {offset
       c14cc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14cd; else goto c14ce;
       c14cd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14ce: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVbR::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVbR::I64, 2)) goto u14cf; else goto u14ch;
       u14cf: // global
           if (%MO_S_Lt_W64(_sVbR::I64, 1)) goto u14cg; else goto c14ca;
       u14cg: // global
           if (%MO_S_Lt_W64(_sVbR::I64, 0)) goto c14c8; else goto c14c9;
       c14c9: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14ca: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14ch: // global
           if (%MO_S_Ge_W64(_sVbR::I64, 3)) goto c14c8; else goto c14cb;
       c14c8: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14cb: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVbS_info" {
     sat_sVbS_info:
         const sat_sVbS_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVc7_entry() //  [R1]
         { []
         }
     {offset
       c14cw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14cx; else goto c14cy;
       c14cx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14cy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVc6::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVc6::I64, 2)) goto u14cz; else goto u14cB;
       u14cz: // global
           if (%MO_S_Lt_W64(_sVc6::I64, 1)) goto u14cA; else goto c14cu;
       u14cA: // global
           if (%MO_S_Lt_W64(_sVc6::I64, 0)) goto c14cs; else goto c14ct;
       c14ct: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14cu: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14cB: // global
           if (%MO_S_Ge_W64(_sVc6::I64, 3)) goto c14cs; else goto c14cv;
       c14cs: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14cv: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVc7_info" {
     sat_sVc7_info:
         const sat_sVc7_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVck_entry() //  [R1]
         { []
         }
     {offset
       c14d8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14d9; else goto c14da;
       c14d9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14da: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVce_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVck_info" {
     sat_sVck_info:
         const sat_sVck_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+408;
 },
 sat_sVci_entry() //  [R1]
         { []
         }
     {offset
       c14dl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14dm; else goto c14dn;
       c14dm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14dn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVch::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVch::I64, 2)) goto u14do; else goto u14dq;
       u14do: // global
           if (%MO_S_Lt_W64(_sVch::I64, 1)) goto u14dp; else goto c14dj;
       u14dp: // global
           if (%MO_S_Lt_W64(_sVch::I64, 0)) goto c14dh; else goto c14di;
       c14di: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14dj: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14dq: // global
           if (%MO_S_Ge_W64(_sVch::I64, 3)) goto c14dh; else goto c14dk;
       c14dh: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14dk: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVci_info" {
     sat_sVci_info:
         const sat_sVci_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVcm_entry() //  [R1]
         { []
         }
     {offset
       c14dC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14dD; else goto c14dE;
       c14dD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14dE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVcl::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVcl::I64, 2)) goto u14dF; else goto u14dH;
       u14dF: // global
           if (%MO_S_Lt_W64(_sVcl::I64, 1)) goto u14dG; else goto c14dA;
       u14dG: // global
           if (%MO_S_Lt_W64(_sVcl::I64, 0)) goto c14dy; else goto c14dz;
       c14dz: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14dA: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14dH: // global
           if (%MO_S_Ge_W64(_sVcl::I64, 3)) goto c14dy; else goto c14dB;
       c14dy: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14dB: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVcm_info" {
     sat_sVcm_info:
         const sat_sVcm_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 go_dn_sVce_entry() //  [R1, R2]
         { []
         }
     {offset
       c14dL: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c14dP; else goto c14dO;
       c14dP: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c14dO: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c14dJ; else goto c14dK;
       c14dJ: // global
           _sVcc::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVck_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVcc::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVci_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14dK: // global
           I64[Hp - 80] = sat_sVcm_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c14dR::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c14dR::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVce_info" {
     go_dn_sVce_info:
         const go_dn_sVce_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+408;
 },
 sat_sVcn_entry() //  [R1]
         { []
         }
     {offset
       c14dS: // global
           _sVcn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c14dT; else goto c14dU;
       c14dU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c14dW; else goto c14dV;
       c14dW: // global
           HpAlloc = 24;
           goto c14dT;
       c14dT: // global
           R1 = _sVcn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14dV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVcn::P64;
           _sVaU::I64 = I64[_sVcn::P64 + 24];
           _sVcc::I64 = _sVaU::I64 - I64[_sVcn::P64 + 16];
           I64[Hp - 16] = go_dn_sVce_info;
           I64[Hp - 8] = _sVcc::I64;
           I64[Hp] = 2 - _sVcc::I64;
           R2 = _sVaU::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVce_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVcn_info" {
     sat_sVcn_info:
         const sat_sVcn_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+408;
 },
 sat_sVcb_entry() //  [R1]
         { []
         }
     {offset
       c14e7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14e8; else goto c14e9;
       c14e8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14e9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVca::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVca::I64, 2)) goto u14ea; else goto u14ec;
       u14ea: // global
           if (%MO_S_Lt_W64(_sVca::I64, 1)) goto u14eb; else goto c14e5;
       u14eb: // global
           if (%MO_S_Lt_W64(_sVca::I64, 0)) goto c14e3; else goto c14e4;
       c14e4: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14e5: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14ec: // global
           if (%MO_S_Ge_W64(_sVca::I64, 3)) goto c14e3; else goto c14e6;
       c14e3: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14e6: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVcb_info" {
     sat_sVcb_info:
         const sat_sVcb_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVcq_entry() //  [R1]
         { []
         }
     {offset
       c14er: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14es; else goto c14et;
       c14es: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14et: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVcp::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVcp::I64, 2)) goto u14eu; else goto u14ew;
       u14eu: // global
           if (%MO_S_Lt_W64(_sVcp::I64, 1)) goto u14ev; else goto c14ep;
       u14ev: // global
           if (%MO_S_Lt_W64(_sVcp::I64, 0)) goto c14en; else goto c14eo;
       c14eo: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14ep: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14ew: // global
           if (%MO_S_Ge_W64(_sVcp::I64, 3)) goto c14en; else goto c14eq;
       c14en: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14eq: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVcq_info" {
     sat_sVcq_info:
         const sat_sVcq_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVcC_entry() //  [R1]
         { []
         }
     {offset
       c14eZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14f0; else goto c14f1;
       c14f0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14f1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVcw_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVcC_info" {
     sat_sVcC_info:
         const sat_sVcC_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+408;
 },
 sat_sVcA_entry() //  [R1]
         { []
         }
     {offset
       c14fc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14fd; else goto c14fe;
       c14fd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14fe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVcz::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVcz::I64, 2)) goto u14ff; else goto u14fh;
       u14ff: // global
           if (%MO_S_Lt_W64(_sVcz::I64, 1)) goto u14fg; else goto c14fa;
       u14fg: // global
           if (%MO_S_Lt_W64(_sVcz::I64, 0)) goto c14f8; else goto c14f9;
       c14f9: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14fa: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14fh: // global
           if (%MO_S_Ge_W64(_sVcz::I64, 3)) goto c14f8; else goto c14fb;
       c14f8: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14fb: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVcA_info" {
     sat_sVcA_info:
         const sat_sVcA_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVcE_entry() //  [R1]
         { []
         }
     {offset
       c14ft: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14fu; else goto c14fv;
       c14fu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14fv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVcD::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVcD::I64, 2)) goto u14fw; else goto u14fy;
       u14fw: // global
           if (%MO_S_Lt_W64(_sVcD::I64, 1)) goto u14fx; else goto c14fr;
       u14fx: // global
           if (%MO_S_Lt_W64(_sVcD::I64, 0)) goto c14fp; else goto c14fq;
       c14fq: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14fr: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14fy: // global
           if (%MO_S_Ge_W64(_sVcD::I64, 3)) goto c14fp; else goto c14fs;
       c14fp: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14fs: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVcE_info" {
     sat_sVcE_info:
         const sat_sVcE_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 go_up_sVcw_entry() //  [R1, R2]
         { []
         }
     {offset
       c14fC: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c14fG; else goto c14fF;
       c14fG: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c14fF: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c14fA; else goto c14fB;
       c14fA: // global
           _sVcu::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVcC_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVcu::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVcA_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14fB: // global
           I64[Hp - 80] = sat_sVcE_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c14fI::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c14fI::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVcw_info" {
     go_up_sVcw_info:
         const go_up_sVcw_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+408;
 },
 sat_sVcF_entry() //  [R1]
         { []
         }
     {offset
       c14fJ: // global
           _sVcF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c14fK; else goto c14fL;
       c14fL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c14fN; else goto c14fM;
       c14fN: // global
           HpAlloc = 24;
           goto c14fK;
       c14fK: // global
           R1 = _sVcF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14fM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVcF::P64;
           _sVaU::I64 = I64[_sVcF::P64 + 24];
           _sVcu::I64 = _sVaU::I64 - I64[_sVcF::P64 + 16];
           I64[Hp - 16] = go_up_sVcw_info;
           I64[Hp - 8] = _sVcu::I64;
           I64[Hp] = 2 - _sVcu::I64;
           R2 = _sVaU::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sVcw_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVcF_info" {
     sat_sVcF_info:
         const sat_sVcF_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+408;
 },
 sat_sVct_entry() //  [R1]
         { []
         }
     {offset
       c14fY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14fZ; else goto c14g0;
       c14fZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14g0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVcs::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVcs::I64, 2)) goto u14g1; else goto u14g3;
       u14g1: // global
           if (%MO_S_Lt_W64(_sVcs::I64, 1)) goto u14g2; else goto c14fW;
       u14g2: // global
           if (%MO_S_Lt_W64(_sVcs::I64, 0)) goto c14fU; else goto c14fV;
       c14fV: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14fW: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14g3: // global
           if (%MO_S_Ge_W64(_sVcs::I64, 3)) goto c14fU; else goto c14fX;
       c14fU: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14fX: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVct_info" {
     sat_sVct_info:
         const sat_sVct_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVcI_entry() //  [R1]
         { []
         }
     {offset
       c14gi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14gj; else goto c14gk;
       c14gj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14gk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVcH::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVcH::I64, 2)) goto u14gl; else goto u14gn;
       u14gl: // global
           if (%MO_S_Lt_W64(_sVcH::I64, 1)) goto u14gm; else goto c14gg;
       u14gm: // global
           if (%MO_S_Lt_W64(_sVcH::I64, 0)) goto c14ge; else goto c14gf;
       c14gf: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14gg: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14gn: // global
           if (%MO_S_Ge_W64(_sVcH::I64, 3)) goto c14ge; else goto c14gh;
       c14ge: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14gh: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVcI_info" {
     sat_sVcI_info:
         const sat_sVcI_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 GHC.Enum.$fEnumOrdering_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c14gw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c14gx; else goto c14gy;
       c14gx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c14gy: // global
           I64[Sp - 24] = block_c14go_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u14ie; else goto c14gp;
       u14ie: // global
           call _c14go(R1) args: 0, res: 0, upd: 0;
       c14gp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_$cenumFromThenTo_info" {
     GHC.Enum.$fEnumOrdering_$cenumFromThenTo_info:
         const GHC.Enum.$fEnumOrdering_$cenumFromThenTo_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SVzM_srt+408;
 },
 _c14go() //  [R1]
         { []
         }
     {offset
       c14go: // global
           _sVaP::P64 = P64[Sp + 8];
           _c14gv::P64 = R1 & 7;
           if (_c14gv::P64 < 3) goto u14ib; else goto c14gu;
       u14ib: // global
           if (_c14gv::P64 < 2) goto c14gs; else goto c14gt;
       c14gs: // global
           _sVaS::I64 = 0;
           goto sVaR;
       c14gt: // global
           _sVaS::I64 = 1;
           goto sVaR;
       c14gu: // global
           _sVaS::I64 = 2;
           goto sVaR;
       sVaR: // global
           I64[Sp] = block_c14gz_info;
           R1 = _sVaP::P64;
           I64[Sp + 8] = _sVaS::I64;
           if (R1 & 7 != 0) goto u14id; else goto c14hK;
       u14id: // global
           call _c14gz(R1) args: 0, res: 0, upd: 0;
       c14hK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c14go_info" {
     block_c14go_info:
         const _c14go;
         const 2;
         const 4294967326;
         const SVzM_srt+408;
 },
 _c14gz() //  [R1]
         { []
         }
     {offset
       c14gz: // global
           _sVaQ::P64 = P64[Sp + 16];
           _c14i8::P64 = R1 & 7;
           if (_c14i8::P64 < 3) goto u14ic; else goto c14hY;
       u14ic: // global
           if (_c14i8::P64 < 2) goto c14hQ; else goto c14hU;
       c14hQ: // global
           _sVaU::I64 = 0;
           goto sVaT;
       c14hU: // global
           _sVaU::I64 = 1;
           goto sVaT;
       c14hY: // global
           _sVaU::I64 = 2;
           goto sVaT;
       sVaT: // global
           I64[Sp] = block_c1451_info;
           R1 = _sVaQ::P64;
           I64[Sp + 16] = _sVaU::I64;
           if (R1 & 7 != 0) goto u14if; else goto c1452;
       u14if: // global
           call _c1451(R1) args: 0, res: 0, upd: 0;
       c1452: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c14gz_info" {
     block_c14gz_info:
         const _c14gz;
         const 66;
         const 4294967326;
         const SVzM_srt+408;
 },
 _c1451() //  [R1]
         { []
         }
     {offset
       c1451: // global
           _sVaS::I64 = I64[Sp + 8];
           _sVaU::I64 = I64[Sp + 16];
           _c14i9::P64 = R1 & 7;
           if (_c14i9::P64 < 3) goto u14ia; else goto c14hn;
       u14ia: // global
           if (_c14i9::P64 < 2) goto c14gD; else goto c14h0;
       c14gD: // global
           Hp = Hp + 80;
           _sVaV::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c14hq; else goto c14gF;
       c14gF: // global
           if (%MO_S_Lt_W64(_sVaU::I64,
                            _sVaS::I64)) goto c14gQ; else goto c14gZ;
       c14gQ: // global
           if (%MO_S_Le_W64(0, _sVaU::I64)) goto c14gJ; else goto c14gO;
       c14gJ: // global
           I64[Hp - 72] = sat_sVbb_info;
           I64[Hp - 56] = _sVaS::I64;
           I64[Hp - 48] = _sVaU::I64;
           I64[Hp - 40] = sat_sVaZ_info;
           I64[Hp - 24] = _sVaS::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14gO: // global
           if (%MO_S_Gt_W64(0, _sVaS::I64)) goto c14hH; else goto c14gM;
       c14gM: // global
           I64[Hp - 72] = sat_sVbe_info;
           I64[Hp - 56] = _sVaS::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c14gK::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c14gK::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14gZ: // global
           if (%MO_S_Ge_W64(0, _sVaU::I64)) goto c14gT; else goto c14gY;
       c14gT: // global
           I64[Hp - 72] = sat_sVbt_info;
           I64[Hp - 56] = _sVaS::I64;
           I64[Hp - 48] = _sVaU::I64;
           I64[Hp - 40] = sat_sVbh_info;
           I64[Hp - 24] = _sVaS::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14gY: // global
           if (%MO_S_Lt_W64(0, _sVaS::I64)) goto c14hH; else goto c14gW;
       c14gW: // global
           I64[Hp - 72] = sat_sVbw_info;
           I64[Hp - 56] = _sVaS::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c14gU::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c14gU::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14h0: // global
           Hp = Hp + 80;
           _sVaV::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c14hq; else goto c14h2;
       c14h2: // global
           if (%MO_S_Lt_W64(_sVaU::I64,
                            _sVaS::I64)) goto c14hd; else goto c14hm;
       c14hd: // global
           if (%MO_S_Le_W64(1, _sVaU::I64)) goto c14h6; else goto c14hb;
       c14h6: // global
           I64[Hp - 72] = sat_sVbM_info;
           I64[Hp - 56] = _sVaS::I64;
           I64[Hp - 48] = _sVaU::I64;
           I64[Hp - 40] = sat_sVbA_info;
           I64[Hp - 24] = _sVaS::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14hb: // global
           if (%MO_S_Gt_W64(1, _sVaS::I64)) goto c14hH; else goto c14h9;
       c14h9: // global
           I64[Hp - 72] = sat_sVbP_info;
           I64[Hp - 56] = _sVaS::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c14h7::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c14h7::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14hm: // global
           if (%MO_S_Ge_W64(1, _sVaU::I64)) goto c14hg; else goto c14hl;
       c14hg: // global
           I64[Hp - 72] = sat_sVc4_info;
           I64[Hp - 56] = _sVaS::I64;
           I64[Hp - 48] = _sVaU::I64;
           I64[Hp - 40] = sat_sVbS_info;
           I64[Hp - 24] = _sVaS::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14hl: // global
           if (%MO_S_Lt_W64(1, _sVaS::I64)) goto c14hH; else goto c14hj;
       c14hj: // global
           I64[Hp - 72] = sat_sVc7_info;
           I64[Hp - 56] = _sVaS::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c14hh::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c14hh::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14hn: // global
           Hp = Hp + 80;
           _sVaV::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c14hq; else goto c14hp;
       c14hq: // global
           HpAlloc = 80;
           R1 = _sVaV::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c14hp: // global
           if (%MO_S_Lt_W64(_sVaU::I64,
                            _sVaS::I64)) goto c14hA; else goto c14hJ;
       c14hA: // global
           if (%MO_S_Le_W64(2, _sVaU::I64)) goto c14ht; else goto c14hy;
       c14ht: // global
           I64[Hp - 72] = sat_sVcn_info;
           I64[Hp - 56] = _sVaS::I64;
           I64[Hp - 48] = _sVaU::I64;
           I64[Hp - 40] = sat_sVcb_info;
           I64[Hp - 24] = _sVaS::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14hy: // global
           if (%MO_S_Gt_W64(2, _sVaS::I64)) goto c14hH; else goto c14hw;
       c14hw: // global
           I64[Hp - 72] = sat_sVcq_info;
           I64[Hp - 56] = _sVaS::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c14hu::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c14hu::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14hJ: // global
           if (%MO_S_Ge_W64(2, _sVaU::I64)) goto c14hD; else goto c14hI;
       c14hD: // global
           I64[Hp - 72] = sat_sVcF_info;
           I64[Hp - 56] = _sVaS::I64;
           I64[Hp - 48] = _sVaU::I64;
           I64[Hp - 40] = sat_sVct_info;
           I64[Hp - 24] = _sVaS::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14hI: // global
           if (%MO_S_Lt_W64(2, _sVaS::I64)) goto c14hH; else goto c14hG;
       c14hH: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14hG: // global
           I64[Hp - 72] = sat_sVcI_info;
           I64[Hp - 56] = _sVaS::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c14hE::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c14hE::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1451_info" {
     block_c1451_info:
         const _c1451;
         const 194;
         const 4294967326;
         const SVzM_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.636158639 UTC

[section ""data" . GHC.Enum.$fEnumBool_$cenumFromThenTo_closure" {
     GHC.Enum.$fEnumBool_$cenumFromThenTo_closure:
         const GHC.Enum.$fEnumBool_$cenumFromThenTo_info;
         const 0;
 },
 sat_sVd5_entry() //  [R1]
         { []
         }
     {offset
       c14p0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14p1; else goto c14p2;
       c14p1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14p2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVcZ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVd5_info" {
     sat_sVd5_info:
         const sat_sVd5_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+360;
 },
 sat_sVd3_entry() //  [R1]
         { []
         }
     {offset
       c14pc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14pd; else goto c14pe;
       c14pd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14pe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVd2::I64 = I64[R1 + 16];
           if (_sVd2::I64 != 0) goto u14pf; else goto c14pa;
       u14pf: // global
           if (_sVd2::I64 != 1) goto c14p9; else goto c14pb;
       c14p9: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14pb: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14pa: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVd3_info" {
     sat_sVd3_info:
         const sat_sVd3_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 sat_sVd7_entry() //  [R1]
         { []
         }
     {offset
       c14pq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14pr; else goto c14ps;
       c14pr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14ps: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVd6::I64 = I64[R1 + 16];
           if (_sVd6::I64 != 0) goto u14pt; else goto c14po;
       u14pt: // global
           if (_sVd6::I64 != 1) goto c14pn; else goto c14pp;
       c14pn: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14pp: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14po: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVd7_info" {
     sat_sVd7_info:
         const sat_sVd7_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 go_dn_sVcZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c14px: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c14pB; else goto c14pA;
       c14pB: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c14pA: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c14pv; else goto c14pw;
       c14pv: // global
           _sVcX::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVd5_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVcX::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVd3_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14pw: // global
           I64[Hp - 80] = sat_sVd7_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c14pD::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c14pD::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVcZ_info" {
     go_dn_sVcZ_info:
         const go_dn_sVcZ_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+360;
 },
 sat_sVd8_entry() //  [R1]
         { []
         }
     {offset
       c14pE: // global
           _sVd8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c14pF; else goto c14pG;
       c14pG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c14pI; else goto c14pH;
       c14pI: // global
           HpAlloc = 24;
           goto c14pF;
       c14pF: // global
           R1 = _sVd8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14pH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVd8::P64;
           _sVcR::I64 = I64[_sVd8::P64 + 24];
           _sVcX::I64 = _sVcR::I64 - I64[_sVd8::P64 + 16];
           I64[Hp - 16] = go_dn_sVcZ_info;
           I64[Hp - 8] = _sVcX::I64;
           I64[Hp] = 0 - _sVcX::I64;
           R2 = _sVcR::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVcZ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVd8_info" {
     sat_sVd8_info:
         const sat_sVd8_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+360;
 },
 sat_sVcW_entry() //  [R1]
         { []
         }
     {offset
       c14pS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14pT; else goto c14pU;
       c14pT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14pU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVcV::I64 = I64[R1 + 16];
           if (_sVcV::I64 != 0) goto u14pV; else goto c14pQ;
       u14pV: // global
           if (_sVcV::I64 != 1) goto c14pP; else goto c14pR;
       c14pP: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14pR: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14pQ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVcW_info" {
     sat_sVcW_info:
         const sat_sVcW_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 sat_sVdb_entry() //  [R1]
         { []
         }
     {offset
       c14q9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14qa; else goto c14qb;
       c14qa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14qb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVda::I64 = I64[R1 + 16];
           if (_sVda::I64 != 0) goto u14qc; else goto c14q7;
       u14qc: // global
           if (_sVda::I64 != 1) goto c14q6; else goto c14q8;
       c14q6: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14q8: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14q7: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVdb_info" {
     sat_sVdb_info:
         const sat_sVdb_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 sat_sVdn_entry() //  [R1]
         { []
         }
     {offset
       c14qF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14qG; else goto c14qH;
       c14qG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14qH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVdh_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVdn_info" {
     sat_sVdn_info:
         const sat_sVdn_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+360;
 },
 sat_sVdl_entry() //  [R1]
         { []
         }
     {offset
       c14qR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14qS; else goto c14qT;
       c14qS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14qT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVdk::I64 = I64[R1 + 16];
           if (_sVdk::I64 != 0) goto u14qU; else goto c14qP;
       u14qU: // global
           if (_sVdk::I64 != 1) goto c14qO; else goto c14qQ;
       c14qO: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14qQ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14qP: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVdl_info" {
     sat_sVdl_info:
         const sat_sVdl_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 sat_sVdp_entry() //  [R1]
         { []
         }
     {offset
       c14r5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14r6; else goto c14r7;
       c14r6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14r7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVdo::I64 = I64[R1 + 16];
           if (_sVdo::I64 != 0) goto u14r8; else goto c14r3;
       u14r8: // global
           if (_sVdo::I64 != 1) goto c14r2; else goto c14r4;
       c14r2: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14r4: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14r3: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVdp_info" {
     sat_sVdp_info:
         const sat_sVdp_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 go_up_sVdh_entry() //  [R1, R2]
         { []
         }
     {offset
       c14rc: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c14rg; else goto c14rf;
       c14rg: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c14rf: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c14ra; else goto c14rb;
       c14ra: // global
           _sVdf::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVdn_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVdf::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVdl_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14rb: // global
           I64[Hp - 80] = sat_sVdp_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c14ri::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c14ri::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVdh_info" {
     go_up_sVdh_info:
         const go_up_sVdh_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+360;
 },
 sat_sVdq_entry() //  [R1]
         { []
         }
     {offset
       c14rj: // global
           _sVdq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c14rk; else goto c14rl;
       c14rl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c14rn; else goto c14rm;
       c14rn: // global
           HpAlloc = 24;
           goto c14rk;
       c14rk: // global
           R1 = _sVdq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14rm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVdq::P64;
           _sVcR::I64 = I64[_sVdq::P64 + 24];
           _sVdf::I64 = _sVcR::I64 - I64[_sVdq::P64 + 16];
           I64[Hp - 16] = go_up_sVdh_info;
           I64[Hp - 8] = _sVdf::I64;
           I64[Hp] = 0 - _sVdf::I64;
           R2 = _sVcR::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sVdh_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVdq_info" {
     sat_sVdq_info:
         const sat_sVdq_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+360;
 },
 sat_sVde_entry() //  [R1]
         { []
         }
     {offset
       c14rx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14ry; else goto c14rz;
       c14ry: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14rz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVdd::I64 = I64[R1 + 16];
           if (_sVdd::I64 != 0) goto u14rA; else goto c14rv;
       u14rA: // global
           if (_sVdd::I64 != 1) goto c14ru; else goto c14rw;
       c14ru: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14rw: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14rv: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVde_info" {
     sat_sVde_info:
         const sat_sVde_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 sat_sVdt_entry() //  [R1]
         { []
         }
     {offset
       c14rO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14rP; else goto c14rQ;
       c14rP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14rQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVds::I64 = I64[R1 + 16];
           if (_sVds::I64 != 0) goto u14rR; else goto c14rM;
       u14rR: // global
           if (_sVds::I64 != 1) goto c14rL; else goto c14rN;
       c14rL: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14rN: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14rM: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVdt_info" {
     sat_sVdt_info:
         const sat_sVdt_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 sat_sVdG_entry() //  [R1]
         { []
         }
     {offset
       c14so: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14sp; else goto c14sq;
       c14sp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14sq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVdA_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVdG_info" {
     sat_sVdG_info:
         const sat_sVdG_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+360;
 },
 sat_sVdE_entry() //  [R1]
         { []
         }
     {offset
       c14sA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14sB; else goto c14sC;
       c14sB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14sC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVdD::I64 = I64[R1 + 16];
           if (_sVdD::I64 != 0) goto u14sD; else goto c14sy;
       u14sD: // global
           if (_sVdD::I64 != 1) goto c14sx; else goto c14sz;
       c14sx: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14sz: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14sy: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVdE_info" {
     sat_sVdE_info:
         const sat_sVdE_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 sat_sVdI_entry() //  [R1]
         { []
         }
     {offset
       c14sO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14sP; else goto c14sQ;
       c14sP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14sQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVdH::I64 = I64[R1 + 16];
           if (_sVdH::I64 != 0) goto u14sR; else goto c14sM;
       u14sR: // global
           if (_sVdH::I64 != 1) goto c14sL; else goto c14sN;
       c14sL: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14sN: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14sM: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVdI_info" {
     sat_sVdI_info:
         const sat_sVdI_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 go_dn_sVdA_entry() //  [R1, R2]
         { []
         }
     {offset
       c14sV: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c14sZ; else goto c14sY;
       c14sZ: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c14sY: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c14sT; else goto c14sU;
       c14sT: // global
           _sVdy::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVdG_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVdy::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVdE_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14sU: // global
           I64[Hp - 80] = sat_sVdI_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c14t1::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c14t1::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVdA_info" {
     go_dn_sVdA_info:
         const go_dn_sVdA_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+360;
 },
 sat_sVdJ_entry() //  [R1]
         { []
         }
     {offset
       c14t2: // global
           _sVdJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c14t3; else goto c14t4;
       c14t4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c14t6; else goto c14t5;
       c14t6: // global
           HpAlloc = 24;
           goto c14t3;
       c14t3: // global
           R1 = _sVdJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14t5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVdJ::P64;
           _sVcR::I64 = I64[_sVdJ::P64 + 24];
           _sVdy::I64 = _sVcR::I64 - I64[_sVdJ::P64 + 16];
           I64[Hp - 16] = go_dn_sVdA_info;
           I64[Hp - 8] = _sVdy::I64;
           I64[Hp] = 1 - _sVdy::I64;
           R2 = _sVcR::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVdA_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVdJ_info" {
     sat_sVdJ_info:
         const sat_sVdJ_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+360;
 },
 sat_sVdx_entry() //  [R1]
         { []
         }
     {offset
       c14tg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14th; else goto c14ti;
       c14th: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14ti: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVdw::I64 = I64[R1 + 16];
           if (_sVdw::I64 != 0) goto u14tj; else goto c14te;
       u14tj: // global
           if (_sVdw::I64 != 1) goto c14td; else goto c14tf;
       c14td: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14tf: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14te: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVdx_info" {
     sat_sVdx_info:
         const sat_sVdx_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 sat_sVdM_entry() //  [R1]
         { []
         }
     {offset
       c14tx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14ty; else goto c14tz;
       c14ty: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14tz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVdL::I64 = I64[R1 + 16];
           if (_sVdL::I64 != 0) goto u14tA; else goto c14tv;
       u14tA: // global
           if (_sVdL::I64 != 1) goto c14tu; else goto c14tw;
       c14tu: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14tw: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14tv: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVdM_info" {
     sat_sVdM_info:
         const sat_sVdM_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 sat_sVdY_entry() //  [R1]
         { []
         }
     {offset
       c14u3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14u4; else goto c14u5;
       c14u4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14u5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVdS_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVdY_info" {
     sat_sVdY_info:
         const sat_sVdY_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+360;
 },
 sat_sVdW_entry() //  [R1]
         { []
         }
     {offset
       c14uf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14ug; else goto c14uh;
       c14ug: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14uh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVdV::I64 = I64[R1 + 16];
           if (_sVdV::I64 != 0) goto u14ui; else goto c14ud;
       u14ui: // global
           if (_sVdV::I64 != 1) goto c14uc; else goto c14ue;
       c14uc: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14ue: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14ud: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVdW_info" {
     sat_sVdW_info:
         const sat_sVdW_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 sat_sVe0_entry() //  [R1]
         { []
         }
     {offset
       c14ut: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14uu; else goto c14uv;
       c14uu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14uv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVdZ::I64 = I64[R1 + 16];
           if (_sVdZ::I64 != 0) goto u14uw; else goto c14ur;
       u14uw: // global
           if (_sVdZ::I64 != 1) goto c14uq; else goto c14us;
       c14uq: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14us: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14ur: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVe0_info" {
     sat_sVe0_info:
         const sat_sVe0_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 go_up_sVdS_entry() //  [R1, R2]
         { []
         }
     {offset
       c14uA: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c14uE; else goto c14uD;
       c14uE: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c14uD: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c14uy; else goto c14uz;
       c14uy: // global
           _sVdQ::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVdY_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVdQ::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVdW_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14uz: // global
           I64[Hp - 80] = sat_sVe0_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c14uG::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c14uG::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVdS_info" {
     go_up_sVdS_info:
         const go_up_sVdS_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+360;
 },
 sat_sVe1_entry() //  [R1]
         { []
         }
     {offset
       c14uH: // global
           _sVe1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c14uI; else goto c14uJ;
       c14uJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c14uL; else goto c14uK;
       c14uL: // global
           HpAlloc = 24;
           goto c14uI;
       c14uI: // global
           R1 = _sVe1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14uK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVe1::P64;
           _sVcR::I64 = I64[_sVe1::P64 + 24];
           _sVdQ::I64 = _sVcR::I64 - I64[_sVe1::P64 + 16];
           I64[Hp - 16] = go_up_sVdS_info;
           I64[Hp - 8] = _sVdQ::I64;
           I64[Hp] = 1 - _sVdQ::I64;
           R2 = _sVcR::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sVdS_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVe1_info" {
     sat_sVe1_info:
         const sat_sVe1_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+360;
 },
 sat_sVdP_entry() //  [R1]
         { []
         }
     {offset
       c14uV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14uW; else goto c14uX;
       c14uW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14uX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVdO::I64 = I64[R1 + 16];
           if (_sVdO::I64 != 0) goto u14uY; else goto c14uT;
       u14uY: // global
           if (_sVdO::I64 != 1) goto c14uS; else goto c14uU;
       c14uS: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14uU: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14uT: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVdP_info" {
     sat_sVdP_info:
         const sat_sVdP_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 sat_sVe4_entry() //  [R1]
         { []
         }
     {offset
       c14vc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14vd; else goto c14ve;
       c14vd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14ve: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVe3::I64 = I64[R1 + 16];
           if (_sVe3::I64 != 0) goto u14vf; else goto c14va;
       u14vf: // global
           if (_sVe3::I64 != 1) goto c14v9; else goto c14vb;
       c14v9: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14vb: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14va: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVe4_info" {
     sat_sVe4_info:
         const sat_sVe4_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 GHC.Enum.$fEnumBool_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c14vn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c14vo; else goto c14vp;
       c14vo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c14vp: // global
           I64[Sp - 24] = block_c14vg_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u14wy; else goto c14vh;
       u14wy: // global
           call _c14vg(R1) args: 0, res: 0, upd: 0;
       c14vh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_$cenumFromThenTo_info" {
     GHC.Enum.$fEnumBool_$cenumFromThenTo_info:
         const GHC.Enum.$fEnumBool_$cenumFromThenTo_entry;
         const 0;
         const 1103806595086;
         const 12884901911;
         const SVzM_srt+360;
 },
 _c14vg() //  [R1]
         { []
         }
     {offset
       c14vg: // global
           _sVcM::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c14vk; else goto c14vl;
       c14vk: // global
           _sVcP::I64 = 0;
           goto sVcO;
       c14vl: // global
           _sVcP::I64 = 1;
           goto sVcO;
       sVcO: // global
           I64[Sp] = block_c14vq_info;
           R1 = _sVcM::P64;
           I64[Sp + 8] = _sVcP::I64;
           if (R1 & 7 != 0) goto u14wx; else goto c14we;
       u14wx: // global
           call _c14vq(R1) args: 0, res: 0, upd: 0;
       c14we: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c14vg_info" {
     block_c14vg_info:
         const _c14vg;
         const 2;
         const 4294967326;
         const SVzM_srt+360;
 },
 _c14vq() //  [R1]
         { []
         }
     {offset
       c14vq: // global
           _sVcN::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c14wk; else goto c14wo;
       c14wk: // global
           _sVcR::I64 = 0;
           goto sVcQ;
       c14wo: // global
           _sVcR::I64 = 1;
           goto sVcQ;
       sVcQ: // global
           I64[Sp] = block_c14or_info;
           R1 = _sVcN::P64;
           I64[Sp + 16] = _sVcR::I64;
           if (R1 & 7 != 0) goto u14wz; else goto c14os;
       u14wz: // global
           call _c14or(R1) args: 0, res: 0, upd: 0;
       c14os: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c14vq_info" {
     block_c14vq_info:
         const _c14vq;
         const 66;
         const 4294967326;
         const SVzM_srt+360;
 },
 _c14or() //  [R1]
         { []
         }
     {offset
       c14or: // global
           _sVcP::I64 = I64[Sp + 8];
           _sVcR::I64 = I64[Sp + 16];
           if (R1 & 7 == 1) goto c14vu; else goto c14vR;
       c14vu: // global
           Hp = Hp + 80;
           _sVcS::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c14vU; else goto c14vw;
       c14vw: // global
           if (%MO_S_Lt_W64(_sVcR::I64,
                            _sVcP::I64)) goto c14vH; else goto c14vQ;
       c14vH: // global
           if (%MO_S_Le_W64(0, _sVcR::I64)) goto c14vA; else goto c14vF;
       c14vA: // global
           I64[Hp - 72] = sat_sVd8_info;
           I64[Hp - 56] = _sVcP::I64;
           I64[Hp - 48] = _sVcR::I64;
           I64[Hp - 40] = sat_sVcW_info;
           I64[Hp - 24] = _sVcP::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14vF: // global
           if (%MO_S_Gt_W64(0, _sVcP::I64)) goto c14wb; else goto c14vD;
       c14vD: // global
           I64[Hp - 72] = sat_sVdb_info;
           I64[Hp - 56] = _sVcP::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c14vB::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c14vB::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14vQ: // global
           if (%MO_S_Ge_W64(0, _sVcR::I64)) goto c14vK; else goto c14vP;
       c14vK: // global
           I64[Hp - 72] = sat_sVdq_info;
           I64[Hp - 56] = _sVcP::I64;
           I64[Hp - 48] = _sVcR::I64;
           I64[Hp - 40] = sat_sVde_info;
           I64[Hp - 24] = _sVcP::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14vP: // global
           if (%MO_S_Lt_W64(0, _sVcP::I64)) goto c14wb; else goto c14vN;
       c14vN: // global
           I64[Hp - 72] = sat_sVdt_info;
           I64[Hp - 56] = _sVcP::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c14vL::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c14vL::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14vR: // global
           Hp = Hp + 80;
           _sVcS::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c14vU; else goto c14vT;
       c14vU: // global
           HpAlloc = 80;
           R1 = _sVcS::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c14vT: // global
           if (%MO_S_Lt_W64(_sVcR::I64,
                            _sVcP::I64)) goto c14w4; else goto c14wd;
       c14w4: // global
           if (%MO_S_Le_W64(1, _sVcR::I64)) goto c14vX; else goto c14w2;
       c14vX: // global
           I64[Hp - 72] = sat_sVdJ_info;
           I64[Hp - 56] = _sVcP::I64;
           I64[Hp - 48] = _sVcR::I64;
           I64[Hp - 40] = sat_sVdx_info;
           I64[Hp - 24] = _sVcP::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14w2: // global
           if (%MO_S_Gt_W64(1, _sVcP::I64)) goto c14wb; else goto c14w0;
       c14w0: // global
           I64[Hp - 72] = sat_sVdM_info;
           I64[Hp - 56] = _sVcP::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c14vY::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c14vY::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14wd: // global
           if (%MO_S_Ge_W64(1, _sVcR::I64)) goto c14w7; else goto c14wc;
       c14w7: // global
           I64[Hp - 72] = sat_sVe1_info;
           I64[Hp - 56] = _sVcP::I64;
           I64[Hp - 48] = _sVcR::I64;
           I64[Hp - 40] = sat_sVdP_info;
           I64[Hp - 24] = _sVcP::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14wc: // global
           if (%MO_S_Lt_W64(1, _sVcP::I64)) goto c14wb; else goto c14wa;
       c14wb: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14wa: // global
           I64[Hp - 72] = sat_sVe4_info;
           I64[Hp - 56] = _sVcP::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c14w8::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c14w8::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c14or_info" {
     block_c14or_info:
         const _c14or;
         const 194;
         const 4294967326;
         const SVzM_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.702755085 UTC

[section ""data" . GHC.Enum.$fEnumInt_$cenumFromThenTo_closure" {
     GHC.Enum.$fEnumInt_$cenumFromThenTo_closure:
         const GHC.Enum.$fEnumInt_$cenumFromThenTo_info;
 },
 GHC.Enum.$fEnumInt_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c14Az: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c14AI; else goto c14AJ;
       c14AI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumInt_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c14AJ: // global
           I64[Sp - 24] = block_c14Aw_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u14AS; else goto c14Ax;
       u14AS: // global
           call _c14Aw(R1) args: 0, res: 0, upd: 0;
       c14Ax: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInt_$cenumFromThenTo_info" {
     GHC.Enum.$fEnumInt_$cenumFromThenTo_info:
         const GHC.Enum.$fEnumInt_$cenumFromThenTo_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c14Aw() //  [R1]
         { []
         }
     {offset
       c14Aw: // global
           I64[Sp] = block_c14AC_info;
           _sVeb::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sVeb::I64;
           if (R1 & 7 != 0) goto u14AR; else goto c14AD;
       u14AR: // global
           call _c14AC(R1) args: 0, res: 0, upd: 0;
       c14AD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c14Aw_info" {
     block_c14Aw_info:
         const _c14Aw;
         const 2;
         const 30;
 },
 _c14AC() //  [R1]
         { []
         }
     {offset
       c14AC: // global
           I64[Sp] = block_c14AH_info;
           _sVed::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sVed::I64;
           if (R1 & 7 != 0) goto u14AT; else goto c14AM;
       u14AT: // global
           call _c14AH(R1) args: 0, res: 0, upd: 0;
       c14AM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c14AC_info" {
     block_c14AC_info:
         const _c14AC;
         const 66;
         const 30;
 },
 _c14AH() //  [R1]
         { []
         }
     {offset
       c14AH: // global
           R4 = I64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Enum.efdtInt_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c14AH_info" {
     block_c14AH_info:
         const _c14AH;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.711362998 UTC

[section ""data" . GHC.Enum.$fEnumInt_closure" {
     GHC.Enum.$fEnumInt_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumInt_$csucc_closure+1;
         const GHC.Enum.$fEnumInt_$cpred_closure+1;
         const GHC.Enum.$fEnumInt_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInt_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInt_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumInt_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumInt_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumInt_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.724569867 UTC

[section ""data" . GHC.Enum.boundedEnumFromThen_closure" {
     GHC.Enum.boundedEnumFromThen_closure:
         const GHC.Enum.boundedEnumFromThen_info;
 },
 sat_sVep_entry() //  [R1]
         { []
         }
     {offset
       c14Bv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14Bw; else goto c14Bx;
       c14Bw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Bx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVep_info" {
     sat_sVep_info:
         const sat_sVep_entry;
         const 1;
         const 16;
 },
 sat_sVeC_entry() //  [R1]
         { []
         }
     {offset
       c14C3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14C4; else goto c14C5;
       c14C4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14C5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVew_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVeC_info" {
     sat_sVeC_info:
         const sat_sVeC_entry;
         const 8589934593;
         const 15;
 },
 sat_sVeA_entry() //  [R1]
         { []
         }
     {offset
       c14Cb: // global
           _sVeA::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c14Cc; else goto c14Cd;
       c14Cd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c14Cf; else goto c14Ce;
       c14Cf: // global
           HpAlloc = 16;
           goto c14Cc;
       c14Cc: // global
           R1 = _sVeA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Ce: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVeA::P64;
           _sVeg::P64 = P64[_sVeA::P64 + 16];
           _sVex::I64 = I64[_sVeA::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sVex::I64;
           R2 = _sVeg::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVeA_info" {
     sat_sVeA_info:
         const sat_sVeA_entry;
         const 4294967297;
         const 19;
 },
 sat_sVeE_entry() //  [R1]
         { []
         }
     {offset
       c14Cm: // global
           _sVeE::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c14Cn; else goto c14Co;
       c14Co: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c14Cq; else goto c14Cp;
       c14Cq: // global
           HpAlloc = 16;
           goto c14Cn;
       c14Cn: // global
           R1 = _sVeE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Cp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVeE::P64;
           _sVeg::P64 = P64[_sVeE::P64 + 16];
           _sVex::I64 = I64[_sVeE::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sVex::I64;
           R2 = _sVeg::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVeE_info" {
     sat_sVeE_info:
         const sat_sVeE_entry;
         const 4294967297;
         const 19;
 },
 go_dn_sVew_entry() //  [R1, R2]
         { []
         }
     {offset
       c14Cu: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c14Cy; else goto c14Cx;
       c14Cy: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c14Cx: // global
           _sVeg::P64 = P64[R1 + 7];
           if (%MO_S_Ge_W64(R2, I64[R1 + 23])) goto c14Cs; else goto c14Ct;
       c14Cs: // global
           _sVeu::I64 = I64[R1 + 15];
           I64[Hp - 88] = sat_sVeC_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = _sVeu::I64;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sVeA_info;
           P64[Hp - 32] = _sVeg::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14Ct: // global
           I64[Hp - 88] = sat_sVeE_info;
           P64[Hp - 72] = _sVeg::P64;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 88;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c14CA::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c14CA::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVew_info" {
     go_dn_sVew_info:
         const go_dn_sVew_entry;
         const 8589934593;
         const 8;
         const 4294967300;
 },
 sat_sVeF_entry() //  [R1]
         { []
         }
     {offset
       c14CB: // global
           _sVeF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c14CC; else goto c14CD;
       c14CD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c14CF; else goto c14CE;
       c14CF: // global
           HpAlloc = 32;
           goto c14CC;
       c14CC: // global
           R1 = _sVeF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14CE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVeF::P64;
           _sVeg::P64 = P64[_sVeF::P64 + 16];
           _sVel::I64 = I64[_sVeF::P64 + 24];
           _sVeu::I64 = _sVel::I64 - I64[_sVeF::P64 + 32];
           _sVev::I64 = I64[_sVeF::P64 + 40] - _sVeu::I64;
           I64[Hp - 24] = go_dn_sVew_info;
           P64[Hp - 16] = _sVeg::P64;
           I64[Hp - 8] = _sVeu::I64;
           I64[Hp] = _sVev::I64;
           R2 = _sVel::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call go_dn_sVew_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVeF_info" {
     sat_sVeF_info:
         const sat_sVeF_entry;
         const 12884901889;
         const 15;
 },
 sat_sVet_entry() //  [R1]
         { []
         }
     {offset
       c14CK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c14CL; else goto c14CM;
       c14CL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14CM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVet_info" {
     sat_sVet_info:
         const sat_sVet_entry;
         const 2;
         const 18;
 },
 sat_sVeH_entry() //  [R1]
         { []
         }
     {offset
       c14CV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c14CW; else goto c14CX;
       c14CW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14CX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVeH_info" {
     sat_sVeH_info:
         const sat_sVeH_entry;
         const 2;
         const 18;
 },
 sat_sVeI_entry() //  [R1]
         { []
         }
     {offset
       c14D3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14D4; else goto c14D5;
       c14D4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14D5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVeI_info" {
     sat_sVeI_info:
         const sat_sVeI_entry;
         const 1;
         const 16;
 },
 sat_sVeV_entry() //  [R1]
         { []
         }
     {offset
       c14DB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14DC; else goto c14DD;
       c14DC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14DD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVeP_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVeV_info" {
     sat_sVeV_info:
         const sat_sVeV_entry;
         const 8589934593;
         const 15;
 },
 sat_sVeT_entry() //  [R1]
         { []
         }
     {offset
       c14DJ: // global
           _sVeT::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c14DK; else goto c14DL;
       c14DL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c14DN; else goto c14DM;
       c14DN: // global
           HpAlloc = 16;
           goto c14DK;
       c14DK: // global
           R1 = _sVeT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14DM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVeT::P64;
           _sVeg::P64 = P64[_sVeT::P64 + 16];
           _sVeQ::I64 = I64[_sVeT::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sVeQ::I64;
           R2 = _sVeg::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVeT_info" {
     sat_sVeT_info:
         const sat_sVeT_entry;
         const 4294967297;
         const 19;
 },
 sat_sVeX_entry() //  [R1]
         { []
         }
     {offset
       c14DU: // global
           _sVeX::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c14DV; else goto c14DW;
       c14DW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c14DY; else goto c14DX;
       c14DY: // global
           HpAlloc = 16;
           goto c14DV;
       c14DV: // global
           R1 = _sVeX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14DX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVeX::P64;
           _sVeg::P64 = P64[_sVeX::P64 + 16];
           _sVeQ::I64 = I64[_sVeX::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sVeQ::I64;
           R2 = _sVeg::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVeX_info" {
     sat_sVeX_info:
         const sat_sVeX_entry;
         const 4294967297;
         const 19;
 },
 go_up_sVeP_entry() //  [R1, R2]
         { []
         }
     {offset
       c14E2: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c14E6; else goto c14E5;
       c14E6: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c14E5: // global
           _sVeg::P64 = P64[R1 + 7];
           if (%MO_S_Le_W64(R2, I64[R1 + 23])) goto c14E0; else goto c14E1;
       c14E0: // global
           _sVeN::I64 = I64[R1 + 15];
           I64[Hp - 88] = sat_sVeV_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = _sVeN::I64;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sVeT_info;
           P64[Hp - 32] = _sVeg::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14E1: // global
           I64[Hp - 88] = sat_sVeX_info;
           P64[Hp - 72] = _sVeg::P64;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 88;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c14E8::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c14E8::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVeP_info" {
     go_up_sVeP_info:
         const go_up_sVeP_entry;
         const 8589934593;
         const 8;
         const 4294967300;
 },
 sat_sVeY_entry() //  [R1]
         { []
         }
     {offset
       c14E9: // global
           _sVeY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c14Ea; else goto c14Eb;
       c14Eb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c14Ed; else goto c14Ec;
       c14Ed: // global
           HpAlloc = 32;
           goto c14Ea;
       c14Ea: // global
           R1 = _sVeY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Ec: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVeY::P64;
           _sVeg::P64 = P64[_sVeY::P64 + 16];
           _sVel::I64 = I64[_sVeY::P64 + 24];
           _sVeN::I64 = _sVel::I64 - I64[_sVeY::P64 + 32];
           _sVeO::I64 = I64[_sVeY::P64 + 40] - _sVeN::I64;
           I64[Hp - 24] = go_up_sVeP_info;
           P64[Hp - 16] = _sVeg::P64;
           I64[Hp - 8] = _sVeN::I64;
           I64[Hp] = _sVeO::I64;
           R2 = _sVel::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call go_up_sVeP_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVeY_info" {
     sat_sVeY_info:
         const sat_sVeY_entry;
         const 12884901889;
         const 15;
 },
 sat_sVeM_entry() //  [R1]
         { []
         }
     {offset
       c14Ei: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c14Ej; else goto c14Ek;
       c14Ej: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Ek: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVeM_info" {
     sat_sVeM_info:
         const sat_sVeM_entry;
         const 2;
         const 18;
 },
 sat_sVf0_entry() //  [R1]
         { []
         }
     {offset
       c14Et: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c14Eu; else goto c14Ev;
       c14Eu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Ev: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVf0_info" {
     sat_sVf0_info:
         const sat_sVf0_entry;
         const 2;
         const 18;
 },
 GHC.Enum.boundedEnumFromThen_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c14Ew: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c14Ex; else goto c14Ey;
       c14Ex: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.boundedEnumFromThen_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c14Ey: // global
           I64[Sp - 32] = block_c14Bg_info;
           _sVeg::P64 = R2;
           R2 = R2;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = R5;
           P64[Sp - 24] = _sVeg::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.boundedEnumFromThen_info" {
     GHC.Enum.boundedEnumFromThen_info:
         const GHC.Enum.boundedEnumFromThen_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c14Bg() //  [R1]
         { []
         }
     {offset
       c14Bg: // global
           I64[Sp] = block_c14Bk_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 24];
           I64[Sp + 24] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c14Bg_info" {
     block_c14Bg_info:
         const _c14Bg;
         const 3;
         const 30;
 },
 _c14Bk() //  [R1]
         { []
         }
     {offset
       c14Bk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c14EC; else goto c14EB;
       c14EC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c14EB: // global
           _sVeg::P64 = P64[Sp + 8];
           _sVeh::P64 = P64[Sp + 16];
           _sVen::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(I64[Sp + 24],
                            _sVen::I64)) goto c14EE; else goto c14EQ;
       c14EE: // global
           I64[Hp - 16] = sat_sVep_info;
           P64[Hp] = _sVeh::P64;
           I64[Sp - 8] = block_c14By_info;
           R2 = _sVeg::P64;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = Hp - 16;
           I64[Sp] = _sVen::I64;
           P64[Sp + 16] = R1;
           Sp = Sp - 24;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
       c14EQ: // global
           I64[Hp - 16] = sat_sVeI_info;
           P64[Hp] = _sVeh::P64;
           I64[Sp - 8] = block_c14D6_info;
           R2 = _sVeg::P64;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = Hp - 16;
           I64[Sp] = _sVen::I64;
           P64[Sp + 16] = R1;
           Sp = Sp - 24;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c14Bk_info" {
     block_c14Bk_info:
         const _c14Bk;
         const 259;
         const 30;
 },
 _c14By() //  [R1]
         { []
         }
     {offset
       c14By: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c14EH; else goto c14EG;
       c14EH: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c14EG: // global
           _sVeg::P64 = P64[Sp + 16];
           _sVel::I64 = I64[Sp + 32];
           _sVem::P64 = P64[Sp + 24];
           _sVen::I64 = I64[Sp + 8];
           _sVer::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_sVer::I64,
                            _sVel::I64)) goto c14EK; else goto c14EP;
       c14EK: // global
           I64[Hp - 96] = sat_sVeF_info;
           P64[Hp - 80] = _sVeg::P64;
           I64[Hp - 72] = _sVel::I64;
           I64[Hp - 64] = _sVen::I64;
           I64[Hp - 56] = _sVer::I64;
           I64[Hp - 48] = sat_sVet_info;
           P64[Hp - 32] = _sVeg::P64;
           P64[Hp - 24] = _sVem::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14EP: // global
           if (%MO_S_Le_W64(_sVer::I64,
                            _sVen::I64)) goto c14EN; else goto u14F2;
       c14EN: // global
           I64[Hp - 96] = sat_sVeH_info;
           P64[Hp - 80] = _sVeg::P64;
           P64[Hp - 72] = _sVem::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 96;
           P64[Hp - 48] = GHC.Types.[]_closure+1;
           _c14EL::P64 = Hp - 62;
           Hp = Hp - 48;
           R1 = _c14EL::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u14F2: // global
           Sp = Sp + 40;
           call _c14F0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c14By_info" {
     block_c14By_info:
         const _c14By;
         const 580;
         const 30;
 },
 _c14D6() //  [R1]
         { []
         }
     {offset
       c14D6: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c14ET; else goto c14ES;
       c14ET: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c14ES: // global
           _sVeg::P64 = P64[Sp + 16];
           _sVel::I64 = I64[Sp + 32];
           _sVem::P64 = P64[Sp + 24];
           _sVen::I64 = I64[Sp + 8];
           _sVeK::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_sVeK::I64,
                            _sVel::I64)) goto c14EW; else goto c14F1;
       c14EW: // global
           I64[Hp - 96] = sat_sVeY_info;
           P64[Hp - 80] = _sVeg::P64;
           I64[Hp - 72] = _sVel::I64;
           I64[Hp - 64] = _sVen::I64;
           I64[Hp - 56] = _sVeK::I64;
           I64[Hp - 48] = sat_sVeM_info;
           P64[Hp - 32] = _sVeg::P64;
           P64[Hp - 24] = _sVem::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14F1: // global
           if (%MO_S_Ge_W64(_sVeK::I64,
                            _sVen::I64)) goto c14EZ; else goto u14F3;
       c14EZ: // global
           I64[Hp - 96] = sat_sVf0_info;
           P64[Hp - 80] = _sVeg::P64;
           P64[Hp - 72] = _sVem::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 96;
           P64[Hp - 48] = GHC.Types.[]_closure+1;
           _c14EX::P64 = Hp - 62;
           Hp = Hp - 48;
           R1 = _c14EX::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u14F3: // global
           Sp = Sp + 40;
           call _c14F0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c14D6_info" {
     block_c14D6_info:
         const _c14D6;
         const 580;
         const 30;
 },
 _c14F0() //  []
         { []
         }
     {offset
       c14F0: // global
           Hp = Hp - 104;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.776916357 UTC

[section ""data" . GHC.Enum.$fEnumBool_$cenumFromThen_closure" {
     GHC.Enum.$fEnumBool_$cenumFromThen_closure:
         const GHC.Enum.$fEnumBool_$cenumFromThen_info;
         const 0;
 },
 sat_sVfj_entry() //  [R1]
         { []
         }
     {offset
       c14HM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14HN; else goto c14HO;
       c14HN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14HO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVfd_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVfj_info" {
     sat_sVfj_info:
         const sat_sVfj_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+360;
 },
 sat_sVfh_entry() //  [R1]
         { []
         }
     {offset
       c14HY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14HZ; else goto c14I0;
       c14HZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14I0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVfg::I64 = I64[R1 + 16];
           if (_sVfg::I64 != 0) goto u14I1; else goto c14HW;
       u14I1: // global
           if (_sVfg::I64 != 1) goto c14HV; else goto c14HX;
       c14HV: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14HX: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14HW: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVfh_info" {
     sat_sVfh_info:
         const sat_sVfh_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 sat_sVfl_entry() //  [R1]
         { []
         }
     {offset
       c14Ic: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14Id; else goto c14Ie;
       c14Id: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Ie: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVfk::I64 = I64[R1 + 16];
           if (_sVfk::I64 != 0) goto u14If; else goto c14Ia;
       u14If: // global
           if (_sVfk::I64 != 1) goto c14I9; else goto c14Ib;
       c14I9: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14Ib: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14Ia: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVfl_info" {
     sat_sVfl_info:
         const sat_sVfl_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 go_dn_sVfd_entry() //  [R1, R2]
         { []
         }
     {offset
       c14Ij: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c14In; else goto c14Im;
       c14In: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c14Im: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c14Ih; else goto c14Ii;
       c14Ih: // global
           _sVfb::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVfj_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVfb::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVfh_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14Ii: // global
           I64[Hp - 80] = sat_sVfl_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c14Ip::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c14Ip::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVfd_info" {
     go_dn_sVfd_info:
         const go_dn_sVfd_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+360;
 },
 sat_sVfm_entry() //  [R1]
         { []
         }
     {offset
       c14Iq: // global
           _sVfm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c14Ir; else goto c14Is;
       c14Is: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c14Iu; else goto c14It;
       c14Iu: // global
           HpAlloc = 24;
           goto c14Ir;
       c14Ir: // global
           R1 = _sVfm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14It: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVfm::P64;
           _sVf4::I64 = I64[_sVfm::P64 + 16];
           _sVfb::I64 = _sVf4::I64 - I64[_sVfm::P64 + 24];
           I64[Hp - 16] = go_dn_sVfd_info;
           I64[Hp - 8] = _sVfb::I64;
           I64[Hp] = 0 - _sVfb::I64;
           R2 = _sVf4::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVfd_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVfm_info" {
     sat_sVfm_info:
         const sat_sVfm_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+360;
 },
 sat_sVfa_entry() //  [R1]
         { []
         }
     {offset
       c14IE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14IF; else goto c14IG;
       c14IF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14IG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVf9::I64 = I64[R1 + 16];
           if (_sVf9::I64 != 0) goto u14IH; else goto c14IC;
       u14IH: // global
           if (_sVf9::I64 != 1) goto c14IB; else goto c14ID;
       c14IB: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14ID: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14IC: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVfa_info" {
     sat_sVfa_info:
         const sat_sVfa_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 sat_sVfp_entry() //  [R1]
         { []
         }
     {offset
       c14IV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14IW; else goto c14IX;
       c14IW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14IX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVfo::I64 = I64[R1 + 16];
           if (_sVfo::I64 != 0) goto u14IY; else goto c14IT;
       u14IY: // global
           if (_sVfo::I64 != 1) goto c14IS; else goto c14IU;
       c14IS: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14IU: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14IT: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVfp_info" {
     sat_sVfp_info:
         const sat_sVfp_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 sat_sVfB_entry() //  [R1]
         { []
         }
     {offset
       c14Jr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14Js; else goto c14Jt;
       c14Js: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Jt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVfv_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVfB_info" {
     sat_sVfB_info:
         const sat_sVfB_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+360;
 },
 sat_sVfz_entry() //  [R1]
         { []
         }
     {offset
       c14JD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14JE; else goto c14JF;
       c14JE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14JF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVfy::I64 = I64[R1 + 16];
           if (_sVfy::I64 != 0) goto u14JG; else goto c14JB;
       u14JG: // global
           if (_sVfy::I64 != 1) goto c14JA; else goto c14JC;
       c14JA: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14JC: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14JB: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVfz_info" {
     sat_sVfz_info:
         const sat_sVfz_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 sat_sVfD_entry() //  [R1]
         { []
         }
     {offset
       c14JR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14JS; else goto c14JT;
       c14JS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14JT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVfC::I64 = I64[R1 + 16];
           if (_sVfC::I64 != 0) goto u14JU; else goto c14JP;
       u14JU: // global
           if (_sVfC::I64 != 1) goto c14JO; else goto c14JQ;
       c14JO: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14JQ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14JP: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVfD_info" {
     sat_sVfD_info:
         const sat_sVfD_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 go_up_sVfv_entry() //  [R1, R2]
         { []
         }
     {offset
       c14JY: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c14K2; else goto c14K1;
       c14K2: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c14K1: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c14JW; else goto c14JX;
       c14JW: // global
           _sVft::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVfB_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVft::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVfz_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14JX: // global
           I64[Hp - 80] = sat_sVfD_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c14K4::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c14K4::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVfv_info" {
     go_up_sVfv_info:
         const go_up_sVfv_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+360;
 },
 sat_sVfE_entry() //  [R1]
         { []
         }
     {offset
       c14K5: // global
           _sVfE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c14K6; else goto c14K7;
       c14K7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c14K9; else goto c14K8;
       c14K9: // global
           HpAlloc = 24;
           goto c14K6;
       c14K6: // global
           R1 = _sVfE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14K8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVfE::P64;
           _sVf4::I64 = I64[_sVfE::P64 + 16];
           _sVft::I64 = _sVf4::I64 - I64[_sVfE::P64 + 24];
           I64[Hp - 16] = go_up_sVfv_info;
           I64[Hp - 8] = _sVft::I64;
           I64[Hp] = 1 - _sVft::I64;
           R2 = _sVf4::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sVfv_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVfE_info" {
     sat_sVfE_info:
         const sat_sVfE_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+360;
 },
 sat_sVfs_entry() //  [R1]
         { []
         }
     {offset
       c14Kj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14Kk; else goto c14Kl;
       c14Kk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Kl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVfr::I64 = I64[R1 + 16];
           if (_sVfr::I64 != 0) goto u14Km; else goto c14Kh;
       u14Km: // global
           if (_sVfr::I64 != 1) goto c14Kg; else goto c14Ki;
       c14Kg: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14Ki: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14Kh: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVfs_info" {
     sat_sVfs_info:
         const sat_sVfs_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 sat_sVfH_entry() //  [R1]
         { []
         }
     {offset
       c14KA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14KB; else goto c14KC;
       c14KB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14KC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVfG::I64 = I64[R1 + 16];
           if (_sVfG::I64 != 0) goto u14KD; else goto c14Ky;
       u14KD: // global
           if (_sVfG::I64 != 1) goto c14Kx; else goto c14Kz;
       c14Kx: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14Kz: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14Ky: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVfH_info" {
     sat_sVfH_info:
         const sat_sVfH_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+360;
 },
 GHC.Enum.$fEnumBool_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c14KL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14KM; else goto c14KN;
       c14KM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c14KN: // global
           I64[Sp - 16] = block_c14KE_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u14Lz; else goto c14KF;
       u14Lz: // global
           call _c14KE(R1) args: 0, res: 0, upd: 0;
       c14KF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_$cenumFromThen_info" {
     GHC.Enum.$fEnumBool_$cenumFromThen_info:
         const GHC.Enum.$fEnumBool_$cenumFromThen_entry;
         const 0;
         const 2203318222862;
         const 8589934607;
         const SVzM_srt+360;
 },
 _c14KE() //  [R1]
         { []
         }
     {offset
       c14KE: // global
           _sVf1::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c14KI; else goto c14KJ;
       c14KI: // global
           _sVf4::I64 = 0;
           goto sVf3;
       c14KJ: // global
           _sVf4::I64 = 1;
           goto sVf3;
       sVf3: // global
           I64[Sp] = block_c14KO_info;
           R1 = _sVf1::P64;
           I64[Sp + 8] = _sVf4::I64;
           if (R1 & 7 != 0) goto u14Ly; else goto c14Lc;
       u14Ly: // global
           call _c14KO(R1) args: 0, res: 0, upd: 0;
       c14Lc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c14KE_info" {
     block_c14KE_info:
         const _c14KE;
         const 1;
         const 4294967326;
         const SVzM_srt+360;
 },
 _c14KO() //  [R1]
         { []
         }
     {offset
       c14KO: // global
           if (R1 & 7 == 1) goto c14Li; else goto c14Lm;
       c14Li: // global
           I64[Sp] = 0;
           goto u14LB;
       c14Lm: // global
           I64[Sp] = 1;
           goto u14LB;
       u14LB: // global
           call _c14Hg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c14KO_info" {
     block_c14KO_info:
         const _c14KO;
         const 65;
         const 4294967326;
         const SVzM_srt+360;
 },
 _c14Hg() //  []
         { []
         }
     {offset
       c14Hg: // global
           Hp = Hp + 80;
           _sVf6::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c14KS; else goto c14KR;
       c14KS: // global
           HpAlloc = 80;
           I64[Sp] = block_c14Hf_info;
           R1 = _sVf6::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c14KR: // global
           _sVf4::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_sVf4::I64,
                            _sVf6::I64)) goto c14L2; else goto c14Lb;
       c14L2: // global
           if (%MO_S_Le_W64(0, _sVf4::I64)) goto c14KV; else goto c14L0;
       c14KV: // global
           I64[Hp - 72] = sat_sVfm_info;
           I64[Hp - 56] = _sVf4::I64;
           I64[Hp - 48] = _sVf6::I64;
           I64[Hp - 40] = sat_sVfa_info;
           I64[Hp - 24] = _sVf6::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14L0: // global
           if (%MO_S_Gt_W64(0, _sVf6::I64)) goto c14L9; else goto c14KY;
       c14KY: // global
           I64[Hp - 72] = sat_sVfp_info;
           I64[Hp - 56] = _sVf6::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c14KW::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c14KW::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14Lb: // global
           if (%MO_S_Ge_W64(1, _sVf4::I64)) goto c14L5; else goto c14La;
       c14L5: // global
           I64[Hp - 72] = sat_sVfE_info;
           I64[Hp - 56] = _sVf4::I64;
           I64[Hp - 48] = _sVf6::I64;
           I64[Hp - 40] = sat_sVfs_info;
           I64[Hp - 24] = _sVf6::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14La: // global
           if (%MO_S_Lt_W64(1, _sVf6::I64)) goto c14L9; else goto c14L8;
       c14L9: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14L8: // global
           I64[Hp - 72] = sat_sVfH_info;
           I64[Hp - 56] = _sVf6::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c14L6::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c14L6::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c14Hf() //  [R1]
         { []
         }
     {offset
       c14Hf: // global
           I64[Sp] = R1;
           call _c14Hg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c14Hf_info" {
     block_c14Hf_info:
         const _c14Hf;
         const 65;
         const 4294967326;
         const SVzM_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.814890315 UTC

[section ""data" . GHC.Enum.$fEnumBool_closure" {
     GHC.Enum.$fEnumBool_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumBool_$csucc_closure+1;
         const GHC.Enum.$fEnumBool_$cpred_closure+1;
         const GHC.Enum.$fEnumBool_$ctoEnum_closure+1;
         const GHC.Enum.$fEnumBool_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumBool_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumBool_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumBool_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumBool_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.828870323 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_$cenumFromThen_closure" {
     GHC.Enum.$fEnumOrdering_$cenumFromThen_closure:
         const GHC.Enum.$fEnumOrdering_$cenumFromThen_info;
         const 0;
 },
 sat_sVg2_entry() //  [R1]
         { []
         }
     {offset
       c14Os: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14Ot; else goto c14Ou;
       c14Ot: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Ou: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVfW_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVg2_info" {
     sat_sVg2_info:
         const sat_sVg2_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+408;
 },
 sat_sVg0_entry() //  [R1]
         { []
         }
     {offset
       c14OF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14OG; else goto c14OH;
       c14OG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14OH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVfZ::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVfZ::I64, 2)) goto u14OI; else goto u14OK;
       u14OI: // global
           if (%MO_S_Lt_W64(_sVfZ::I64, 1)) goto u14OJ; else goto c14OD;
       u14OJ: // global
           if (%MO_S_Lt_W64(_sVfZ::I64, 0)) goto c14OB; else goto c14OC;
       c14OC: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14OD: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14OK: // global
           if (%MO_S_Ge_W64(_sVfZ::I64, 3)) goto c14OB; else goto c14OE;
       c14OB: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14OE: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVg0_info" {
     sat_sVg0_info:
         const sat_sVg0_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVg4_entry() //  [R1]
         { []
         }
     {offset
       c14OW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14OX; else goto c14OY;
       c14OX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14OY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVg3::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVg3::I64, 2)) goto u14OZ; else goto u14P1;
       u14OZ: // global
           if (%MO_S_Lt_W64(_sVg3::I64, 1)) goto u14P0; else goto c14OU;
       u14P0: // global
           if (%MO_S_Lt_W64(_sVg3::I64, 0)) goto c14OS; else goto c14OT;
       c14OT: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14OU: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14P1: // global
           if (%MO_S_Ge_W64(_sVg3::I64, 3)) goto c14OS; else goto c14OV;
       c14OS: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14OV: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVg4_info" {
     sat_sVg4_info:
         const sat_sVg4_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 go_dn_sVfW_entry() //  [R1, R2]
         { []
         }
     {offset
       c14P5: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c14P9; else goto c14P8;
       c14P9: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c14P8: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c14P3; else goto c14P4;
       c14P3: // global
           _sVfU::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVg2_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVfU::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVg0_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14P4: // global
           I64[Hp - 80] = sat_sVg4_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c14Pb::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c14Pb::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVfW_info" {
     go_dn_sVfW_info:
         const go_dn_sVfW_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+408;
 },
 sat_sVg5_entry() //  [R1]
         { []
         }
     {offset
       c14Pc: // global
           _sVg5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c14Pd; else goto c14Pe;
       c14Pe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c14Pg; else goto c14Pf;
       c14Pg: // global
           HpAlloc = 24;
           goto c14Pd;
       c14Pd: // global
           R1 = _sVg5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Pf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVg5::P64;
           _sVfN::I64 = I64[_sVg5::P64 + 16];
           _sVfU::I64 = _sVfN::I64 - I64[_sVg5::P64 + 24];
           I64[Hp - 16] = go_dn_sVfW_info;
           I64[Hp - 8] = _sVfU::I64;
           I64[Hp] = 0 - _sVfU::I64;
           R2 = _sVfN::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVfW_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVg5_info" {
     sat_sVg5_info:
         const sat_sVg5_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+408;
 },
 sat_sVfT_entry() //  [R1]
         { []
         }
     {offset
       c14Pr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14Ps; else goto c14Pt;
       c14Ps: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Pt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVfS::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVfS::I64, 2)) goto u14Pu; else goto u14Pw;
       u14Pu: // global
           if (%MO_S_Lt_W64(_sVfS::I64, 1)) goto u14Pv; else goto c14Pp;
       u14Pv: // global
           if (%MO_S_Lt_W64(_sVfS::I64, 0)) goto c14Pn; else goto c14Po;
       c14Po: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14Pp: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14Pw: // global
           if (%MO_S_Ge_W64(_sVfS::I64, 3)) goto c14Pn; else goto c14Pq;
       c14Pn: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14Pq: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVfT_info" {
     sat_sVfT_info:
         const sat_sVfT_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVg8_entry() //  [R1]
         { []
         }
     {offset
       c14PL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14PM; else goto c14PN;
       c14PM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14PN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVg7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVg7::I64, 2)) goto u14PO; else goto u14PQ;
       u14PO: // global
           if (%MO_S_Lt_W64(_sVg7::I64, 1)) goto u14PP; else goto c14PJ;
       u14PP: // global
           if (%MO_S_Lt_W64(_sVg7::I64, 0)) goto c14PH; else goto c14PI;
       c14PI: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14PJ: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14PQ: // global
           if (%MO_S_Ge_W64(_sVg7::I64, 3)) goto c14PH; else goto c14PK;
       c14PH: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14PK: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVg8_info" {
     sat_sVg8_info:
         const sat_sVg8_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVgk_entry() //  [R1]
         { []
         }
     {offset
       c14Qj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14Qk; else goto c14Ql;
       c14Qk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Ql: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVge_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVgk_info" {
     sat_sVgk_info:
         const sat_sVgk_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+408;
 },
 sat_sVgi_entry() //  [R1]
         { []
         }
     {offset
       c14Qw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14Qx; else goto c14Qy;
       c14Qx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Qy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVgh::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVgh::I64, 2)) goto u14Qz; else goto u14QB;
       u14Qz: // global
           if (%MO_S_Lt_W64(_sVgh::I64, 1)) goto u14QA; else goto c14Qu;
       u14QA: // global
           if (%MO_S_Lt_W64(_sVgh::I64, 0)) goto c14Qs; else goto c14Qt;
       c14Qt: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14Qu: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14QB: // global
           if (%MO_S_Ge_W64(_sVgh::I64, 3)) goto c14Qs; else goto c14Qv;
       c14Qs: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14Qv: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVgi_info" {
     sat_sVgi_info:
         const sat_sVgi_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVgm_entry() //  [R1]
         { []
         }
     {offset
       c14QN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14QO; else goto c14QP;
       c14QO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14QP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVgl::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVgl::I64, 2)) goto u14QQ; else goto u14QS;
       u14QQ: // global
           if (%MO_S_Lt_W64(_sVgl::I64, 1)) goto u14QR; else goto c14QL;
       u14QR: // global
           if (%MO_S_Lt_W64(_sVgl::I64, 0)) goto c14QJ; else goto c14QK;
       c14QK: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14QL: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14QS: // global
           if (%MO_S_Ge_W64(_sVgl::I64, 3)) goto c14QJ; else goto c14QM;
       c14QJ: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14QM: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVgm_info" {
     sat_sVgm_info:
         const sat_sVgm_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 go_up_sVge_entry() //  [R1, R2]
         { []
         }
     {offset
       c14QW: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c14R0; else goto c14QZ;
       c14R0: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c14QZ: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c14QU; else goto c14QV;
       c14QU: // global
           _sVgc::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVgk_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVgc::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVgi_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14QV: // global
           I64[Hp - 80] = sat_sVgm_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c14R2::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c14R2::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVge_info" {
     go_up_sVge_info:
         const go_up_sVge_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+408;
 },
 sat_sVgn_entry() //  [R1]
         { []
         }
     {offset
       c14R3: // global
           _sVgn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c14R4; else goto c14R5;
       c14R5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c14R7; else goto c14R6;
       c14R7: // global
           HpAlloc = 24;
           goto c14R4;
       c14R4: // global
           R1 = _sVgn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14R6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVgn::P64;
           _sVfN::I64 = I64[_sVgn::P64 + 16];
           _sVgc::I64 = _sVfN::I64 - I64[_sVgn::P64 + 24];
           I64[Hp - 16] = go_up_sVge_info;
           I64[Hp - 8] = _sVgc::I64;
           I64[Hp] = 2 - _sVgc::I64;
           R2 = _sVfN::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sVge_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVgn_info" {
     sat_sVgn_info:
         const sat_sVgn_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+408;
 },
 sat_sVgb_entry() //  [R1]
         { []
         }
     {offset
       c14Ri: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14Rj; else goto c14Rk;
       c14Rj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Rk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVga::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVga::I64, 2)) goto u14Rl; else goto u14Rn;
       u14Rl: // global
           if (%MO_S_Lt_W64(_sVga::I64, 1)) goto u14Rm; else goto c14Rg;
       u14Rm: // global
           if (%MO_S_Lt_W64(_sVga::I64, 0)) goto c14Re; else goto c14Rf;
       c14Rf: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14Rg: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14Rn: // global
           if (%MO_S_Ge_W64(_sVga::I64, 3)) goto c14Re; else goto c14Rh;
       c14Re: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14Rh: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVgb_info" {
     sat_sVgb_info:
         const sat_sVgb_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 sat_sVgq_entry() //  [R1]
         { []
         }
     {offset
       c14RC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14RD; else goto c14RE;
       c14RD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14RE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVgp::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVgp::I64, 2)) goto u14RF; else goto u14RH;
       u14RF: // global
           if (%MO_S_Lt_W64(_sVgp::I64, 1)) goto u14RG; else goto c14RA;
       u14RG: // global
           if (%MO_S_Lt_W64(_sVgp::I64, 0)) goto c14Ry; else goto c14Rz;
       c14Rz: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14RA: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u14RH: // global
           if (%MO_S_Ge_W64(_sVgp::I64, 3)) goto c14Ry; else goto c14RB;
       c14Ry: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c14RB: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVgq_info" {
     sat_sVgq_info:
         const sat_sVgq_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+408;
 },
 GHC.Enum.$fEnumOrdering_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c14RQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14RR; else goto c14RS;
       c14RR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c14RS: // global
           I64[Sp - 16] = block_c14RI_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u14SO; else goto c14RJ;
       u14SO: // global
           call _c14RI(R1) args: 0, res: 0, upd: 0;
       c14RJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_$cenumFromThen_info" {
     GHC.Enum.$fEnumOrdering_$cenumFromThen_info:
         const GHC.Enum.$fEnumOrdering_$cenumFromThen_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const SVzM_srt+408;
 },
 _c14RI() //  [R1]
         { []
         }
     {offset
       c14RI: // global
           _sVfK::P64 = P64[Sp + 8];
           _c14RP::P64 = R1 & 7;
           if (_c14RP::P64 < 3) goto u14SG; else goto c14RO;
       u14SG: // global
           if (_c14RP::P64 < 2) goto c14RM; else goto c14RN;
       c14RM: // global
           _sVfN::I64 = 0;
           goto sVfM;
       c14RN: // global
           _sVfN::I64 = 1;
           goto sVfM;
       c14RO: // global
           _sVfN::I64 = 2;
           goto sVfM;
       sVfM: // global
           I64[Sp] = block_c14RT_info;
           R1 = _sVfK::P64;
           I64[Sp + 8] = _sVfN::I64;
           if (R1 & 7 != 0) goto u14SN; else goto c14Sh;
       u14SN: // global
           call _c14RT(R1) args: 0, res: 0, upd: 0;
       c14Sh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c14RI_info" {
     block_c14RI_info:
         const _c14RI;
         const 1;
         const 4294967326;
         const SVzM_srt+408;
 },
 _c14RT() //  [R1]
         { []
         }
     {offset
       c14RT: // global
           _c14SF::P64 = R1 & 7;
           if (_c14SF::P64 < 3) goto u14SH; else goto c14Sv;
       u14SH: // global
           if (_c14SF::P64 < 2) goto c14Sn; else goto c14Sr;
       c14Sn: // global
           I64[Sp] = 0;
           goto u14SR;
       c14Sr: // global
           I64[Sp] = 1;
           goto u14SR;
       c14Sv: // global
           I64[Sp] = 2;
           goto u14SR;
       u14SR: // global
           call _c14NW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c14RT_info" {
     block_c14RT_info:
         const _c14RT;
         const 65;
         const 4294967326;
         const SVzM_srt+408;
 },
 _c14NW() //  []
         { []
         }
     {offset
       c14NW: // global
           Hp = Hp + 80;
           _sVfP::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c14RX; else goto c14RW;
       c14RX: // global
           HpAlloc = 80;
           I64[Sp] = block_c14NV_info;
           R1 = _sVfP::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c14RW: // global
           _sVfN::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_sVfN::I64,
                            _sVfP::I64)) goto c14S7; else goto c14Sg;
       c14S7: // global
           if (%MO_S_Le_W64(0, _sVfN::I64)) goto c14S0; else goto c14S5;
       c14S0: // global
           I64[Hp - 72] = sat_sVg5_info;
           I64[Hp - 56] = _sVfN::I64;
           I64[Hp - 48] = _sVfP::I64;
           I64[Hp - 40] = sat_sVfT_info;
           I64[Hp - 24] = _sVfP::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14S5: // global
           if (%MO_S_Gt_W64(0, _sVfP::I64)) goto c14Se; else goto c14S3;
       c14S3: // global
           I64[Hp - 72] = sat_sVg8_info;
           I64[Hp - 56] = _sVfP::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c14S1::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c14S1::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14Sg: // global
           if (%MO_S_Ge_W64(2, _sVfN::I64)) goto c14Sa; else goto c14Sf;
       c14Sa: // global
           I64[Hp - 72] = sat_sVgn_info;
           I64[Hp - 56] = _sVfN::I64;
           I64[Hp - 48] = _sVfP::I64;
           I64[Hp - 40] = sat_sVgb_info;
           I64[Hp - 24] = _sVfP::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14Sf: // global
           if (%MO_S_Lt_W64(2, _sVfP::I64)) goto c14Se; else goto c14Sd;
       c14Se: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c14Sd: // global
           I64[Hp - 72] = sat_sVgq_info;
           I64[Hp - 56] = _sVfP::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c14Sb::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c14Sb::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c14NV() //  [R1]
         { []
         }
     {offset
       c14NV: // global
           I64[Sp] = R1;
           call _c14NW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c14NV_info" {
     block_c14NV_info:
         const _c14NV;
         const 65;
         const 4294967326;
         const SVzM_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.870148471 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_closure" {
     GHC.Enum.$fEnumOrdering_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumOrdering_$csucc_closure+1;
         const GHC.Enum.$fEnumOrdering_$cpred_closure+1;
         const GHC.Enum.$fEnumOrdering_$ctoEnum_closure+1;
         const GHC.Enum.$fEnumOrdering_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumOrdering_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumOrdering_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumOrdering_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumOrdering_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.876244026 UTC

[section ""data" . GHC.Enum.boundedEnumFrom_closure" {
     GHC.Enum.boundedEnumFrom_closure:
         const GHC.Enum.boundedEnumFrom_info;
 },
 sat_sVgy_entry() //  [R1]
         { []
         }
     {offset
       c14Vi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14Vj; else goto c14Vk;
       c14Vj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Vk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVgy_info" {
     sat_sVgy_info:
         const sat_sVgy_entry;
         const 1;
         const 16;
 },
 sat_sVgI_entry() //  [R1]
         { []
         }
     {offset
       c14VG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14VH; else goto c14VI;
       c14VH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14VI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVgD::I64 = I64[R1 + 32];
           if (_sVgD::I64 == I64[R1 + 24]) goto c14VF; else goto c14VE;
       c14VF: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14VE: // global
           R2 = _sVgD::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_sVgC_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVgI_info" {
     sat_sVgI_info:
         const sat_sVgI_entry;
         const 8589934593;
         const 15;
 },
 sat_sVgF_entry() //  [R1]
         { []
         }
     {offset
       c14VQ: // global
           _sVgF::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c14VR; else goto c14VS;
       c14VS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c14VU; else goto c14VT;
       c14VU: // global
           HpAlloc = 16;
           goto c14VR;
       c14VR: // global
           R1 = _sVgF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14VT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVgF::P64;
           _sVgt::P64 = P64[_sVgF::P64 + 16];
           _sVgD::I64 = I64[_sVgF::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sVgD::I64;
           R2 = _sVgt::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVgF_info" {
     sat_sVgF_info:
         const sat_sVgF_entry;
         const 4294967297;
         const 19;
 },
 go_sVgC_entry() //  [R1, R2]
         { []
         }
     {offset
       c14VW: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c14W0; else goto c14VZ;
       c14W0: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c14VZ: // global
           _sVgt::P64 = P64[R1 + 7];
           _sVgA::I64 = I64[R1 + 15];
           I64[Hp - 88] = sat_sVgI_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = _sVgA::I64;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sVgF_info;
           P64[Hp - 32] = _sVgt::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_sVgC_info" {
     go_sVgC_info:
         const go_sVgC_entry;
         const 4294967297;
         const 12;
         const 4294967300;
 },
 GHC.Enum.boundedEnumFrom_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c14W1: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c14W2; else goto c14W3;
       c14W2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.boundedEnumFrom_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c14W3: // global
           I64[Sp - 24] = block_c14Va_info;
           _sVgt::P64 = R2;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R4;
           P64[Sp - 16] = _sVgt::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.boundedEnumFrom_info" {
     GHC.Enum.boundedEnumFrom_info:
         const GHC.Enum.boundedEnumFrom_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c14Va() //  [R1]
         { []
         }
     {offset
       c14Va: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c14W6; else goto c14W5;
       c14W6: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c14W5: // global
           _sVgx::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sVgy_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp] = block_c14Vl_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           I64[Sp + 16] = _sVgx::I64;
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c14Va_info" {
     block_c14Va_info:
         const _c14Va;
         const 2;
         const 30;
 },
 _c14Vl() //  [R1]
         { []
         }
     {offset
       c14Vl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c14W9; else goto c14W8;
       c14W9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c14W8: // global
           _sVgx::I64 = I64[Sp + 16];
           _sVgA::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_sVgx::I64,
                            _sVgA::I64)) goto c14Wb; else goto c14Wc;
       c14Wb: // global
           I64[Hp - 16] = go_sVgC_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = _sVgA::I64;
           R2 = _sVgx::I64;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call go_sVgC_entry(R2, R1) args: 8, res: 0, upd: 8;
       c14Wc: // global
           Hp = Hp - 24;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c14Vl_info" {
     block_c14Vl_info:
         const _c14Vl;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.894001284 UTC

[section ""data" . GHC.Enum.$dmenumFrom_closure" {
     GHC.Enum.$dmenumFrom_closure:
         const GHC.Enum.$dmenumFrom_info;
 },
 sat_sVgT_entry() //  [R1]
         { []
         }
     {offset
       c14X7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14X8; else goto c14X9;
       c14X8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14X9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVgR::I64 = I64[R1 + 24];
           if (_sVgR::I64 != 9223372036854775807) goto c14X5; else goto c14X6;
       c14X5: // global
           R2 = _sVgR::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_sVgN_entry(R2, R1) args: 24, res: 0, upd: 24;
       c14X6: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVgT_info" {
     sat_sVgT_info:
         const sat_sVgT_entry;
         const 4294967297;
         const 19;
 },
 sat_sVgQ_entry() //  [R1]
         { []
         }
     {offset
       c14Xh: // global
           _sVgQ::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c14Xi; else goto c14Xj;
       c14Xj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c14Xl; else goto c14Xk;
       c14Xl: // global
           HpAlloc = 16;
           goto c14Xi;
       c14Xi: // global
           R1 = _sVgQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Xk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVgQ::P64;
           _sVgJ::P64 = P64[_sVgQ::P64 + 16];
           _sVgO::I64 = I64[_sVgQ::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sVgO::I64;
           R2 = _sVgJ::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVgQ_info" {
     sat_sVgQ_info:
         const sat_sVgQ_entry;
         const 4294967297;
         const 19;
 },
 go_sVgN_entry() //  [R1, R2]
         { []
         }
     {offset
       c14Xn: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c14Xr; else goto c14Xq;
       c14Xr: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c14Xq: // global
           _sVgJ::P64 = P64[R1 + 7];
           I64[Hp - 80] = sat_sVgT_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sVgQ_info;
           P64[Hp - 32] = _sVgJ::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_sVgN_info" {
     go_sVgN_info:
         const go_sVgN_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 GHC.Enum.$dmenumFrom_entry() //  [R2, R3]
         { []
         }
     {offset
       c14Xs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c14Xt; else goto c14Xu;
       c14Xt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$dmenumFrom_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c14Xu: // global
           I64[Sp - 16] = block_c14WQ_info;
           _sVgJ::P64 = R2;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = R3;
           P64[Sp - 8] = _sVgJ::P64;
           Sp = Sp - 32;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$dmenumFrom_info" {
     GHC.Enum.$dmenumFrom_info:
         const GHC.Enum.$dmenumFrom_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c14WQ() //  [R1]
         { []
         }
     {offset
       c14WQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c14Xx; else goto c14Xw;
       c14Xx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c14Xw: // global
           _sVgM::I64 = I64[R1 + 7];
           I64[Hp - 8] = go_sVgN_info;
           P64[Hp] = P64[Sp + 8];
           R2 = _sVgM::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call go_sVgN_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c14WQ_info" {
     block_c14WQ_info:
         const _c14WQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.907054584 UTC

[section ""data" . GHC.Enum.$dmenumFromThen_closure" {
     GHC.Enum.$dmenumFromThen_closure:
         const GHC.Enum.$dmenumFromThen_info;
 },
 sat_sVh1_entry() //  [R1]
         { []
         }
     {offset
       c14Yi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14Yj; else goto c14Yk;
       c14Yj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Yk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVh1_info" {
     sat_sVh1_info:
         const sat_sVh1_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$dmenumFromThen_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c14Yl: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c14Ym; else goto c14Yn;
       c14Ym: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$dmenumFromThen_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c14Yn: // global
           I64[Sp - 24] = block_c14Y2_info;
           _sVgU::P64 = R2;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = _sVgU::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$dmenumFromThen_info" {
     GHC.Enum.$dmenumFromThen_info:
         const GHC.Enum.$dmenumFromThen_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c14Y2() //  [R1]
         { []
         }
     {offset
       c14Y2: // global
           I64[Sp] = block_c14Y6_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           I64[Sp + 16] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c14Y2_info" {
     block_c14Y2_info:
         const _c14Y2;
         const 2;
         const 30;
 },
 _c14Y6() //  [R1]
         { []
         }
     {offset
       c14Y6: // global
           I64[Sp] = block_c14Ya_info;
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 16];
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c14Y6_info" {
     block_c14Y6_info:
         const _c14Y6;
         const 130;
         const 30;
 },
 _c14Ya() //  [R1]
         { []
         }
     {offset
       c14Ya: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c14Ys; else goto c14Yr;
       c14Ys: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c14Yr: // global
           I64[Hp - 16] = sat_sVh1_info;
           P64[Hp] = P64[Sp + 8];
           R3 = R1;
           R2 = Hp - 16;
           Sp = Sp + 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c14Ya_info" {
     block_c14Ya_info:
         const _c14Ya;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.922332262 UTC

[section ""data" . GHC.Enum.$dmenumFromTo_closure" {
     GHC.Enum.$dmenumFromTo_closure:
         const GHC.Enum.$dmenumFromTo_info;
 },
 sat_sVhh_entry() //  [R1]
         { []
         }
     {offset
       c14Zh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c14Zi; else goto c14Zj;
       c14Zi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Zj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVhc::I64 = I64[R1 + 32];
           if (_sVhc::I64 == I64[R1 + 24]) goto c14Zg; else goto c14Zf;
       c14Zg: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c14Zf: // global
           R2 = _sVhc::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_sVhb_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVhh_info" {
     sat_sVhh_info:
         const sat_sVhh_entry;
         const 8589934593;
         const 15;
 },
 sat_sVhe_entry() //  [R1]
         { []
         }
     {offset
       c14Zr: // global
           _sVhe::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c14Zs; else goto c14Zt;
       c14Zt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c14Zv; else goto c14Zu;
       c14Zv: // global
           HpAlloc = 16;
           goto c14Zs;
       c14Zs: // global
           R1 = _sVhe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c14Zu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVhe::P64;
           _sVh3::P64 = P64[_sVhe::P64 + 16];
           _sVhc::I64 = I64[_sVhe::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sVhc::I64;
           R2 = _sVh3::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVhe_info" {
     sat_sVhe_info:
         const sat_sVhe_entry;
         const 4294967297;
         const 19;
 },
 go_sVhb_entry() //  [R1, R2]
         { []
         }
     {offset
       c14Zx: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c14ZB; else goto c14ZA;
       c14ZB: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c14ZA: // global
           _sVh3::P64 = P64[R1 + 7];
           _sVh9::I64 = I64[R1 + 15];
           I64[Hp - 88] = sat_sVhh_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = _sVh9::I64;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sVhe_info;
           P64[Hp - 32] = _sVh3::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_sVhb_info" {
     go_sVhb_info:
         const go_sVhb_entry;
         const 4294967297;
         const 12;
         const 4294967300;
 },
 GHC.Enum.$dmenumFromTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c14ZC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c14ZD; else goto c14ZE;
       c14ZD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$dmenumFromTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c14ZE: // global
           I64[Sp - 24] = block_c14YS_info;
           _sVh3::P64 = R2;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = _sVh3::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$dmenumFromTo_info" {
     GHC.Enum.$dmenumFromTo_info:
         const GHC.Enum.$dmenumFromTo_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c14YS() //  [R1]
         { []
         }
     {offset
       c14YS: // global
           I64[Sp] = block_c14YW_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           I64[Sp + 16] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c14YS_info" {
     block_c14YS_info:
         const _c14YS;
         const 2;
         const 30;
 },
 _c14YW() //  [R1]
         { []
         }
     {offset
       c14YW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c14ZI; else goto c14ZH;
       c14ZI: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c14ZH: // global
           _sVh7::I64 = I64[Sp + 16];
           _sVh9::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_sVh7::I64,
                            _sVh9::I64)) goto c14ZK; else goto c14ZL;
       c14ZK: // global
           I64[Hp - 16] = go_sVhb_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = _sVh9::I64;
           R2 = _sVh7::I64;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call go_sVhb_entry(R2, R1) args: 8, res: 0, upd: 8;
       c14ZL: // global
           Hp = Hp - 24;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c14YW_info" {
     block_c14YW_info:
         const _c14YW;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:41.958152214 UTC

[section ""data" . GHC.Enum.$dmenumFromThenTo_closure" {
     GHC.Enum.$dmenumFromThenTo_closure:
         const GHC.Enum.$dmenumFromThenTo_info;
 },
 sat_sVhD_entry() //  [R1]
         { []
         }
     {offset
       c1511: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1512; else goto c1513;
       c1512: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1513: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVhx_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVhD_info" {
     sat_sVhD_info:
         const sat_sVhD_entry;
         const 8589934593;
         const 15;
 },
 sat_sVhB_entry() //  [R1]
         { []
         }
     {offset
       c1519: // global
           _sVhB::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c151a; else goto c151b;
       c151b: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c151d; else goto c151c;
       c151d: // global
           HpAlloc = 16;
           goto c151a;
       c151a: // global
           R1 = _sVhB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c151c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVhB::P64;
           _sVhi::P64 = P64[_sVhB::P64 + 16];
           _sVhy::I64 = I64[_sVhB::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sVhy::I64;
           R2 = _sVhi::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVhB_info" {
     sat_sVhB_info:
         const sat_sVhB_entry;
         const 4294967297;
         const 19;
 },
 sat_sVhF_entry() //  [R1]
         { []
         }
     {offset
       c151k: // global
           _sVhF::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c151l; else goto c151m;
       c151m: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c151o; else goto c151n;
       c151o: // global
           HpAlloc = 16;
           goto c151l;
       c151l: // global
           R1 = _sVhF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c151n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVhF::P64;
           _sVhi::P64 = P64[_sVhF::P64 + 16];
           _sVhy::I64 = I64[_sVhF::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sVhy::I64;
           R2 = _sVhi::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVhF_info" {
     sat_sVhF_info:
         const sat_sVhF_entry;
         const 4294967297;
         const 19;
 },
 go_dn_sVhx_entry() //  [R1, R2]
         { []
         }
     {offset
       c151s: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c151w; else goto c151v;
       c151w: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c151v: // global
           _sVhi::P64 = P64[R1 + 7];
           if (%MO_S_Ge_W64(R2, I64[R1 + 23])) goto c151q; else goto c151r;
       c151q: // global
           _sVhv::I64 = I64[R1 + 15];
           I64[Hp - 88] = sat_sVhD_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = _sVhv::I64;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sVhB_info;
           P64[Hp - 32] = _sVhi::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c151r: // global
           I64[Hp - 88] = sat_sVhF_info;
           P64[Hp - 72] = _sVhi::P64;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 88;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c151y::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c151y::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVhx_info" {
     go_dn_sVhx_info:
         const go_dn_sVhx_entry;
         const 8589934593;
         const 8;
         const 4294967300;
 },
 sat_sVhG_entry() //  [R1]
         { []
         }
     {offset
       c151z: // global
           _sVhG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c151A; else goto c151B;
       c151B: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c151D; else goto c151C;
       c151D: // global
           HpAlloc = 32;
           goto c151A;
       c151A: // global
           R1 = _sVhG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c151C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVhG::P64;
           _sVhi::P64 = P64[_sVhG::P64 + 16];
           _sVhp::I64 = I64[_sVhG::P64 + 32];
           _sVhv::I64 = _sVhp::I64 - I64[_sVhG::P64 + 24];
           _sVhw::I64 = I64[_sVhG::P64 + 40] - _sVhv::I64;
           I64[Hp - 24] = go_dn_sVhx_info;
           P64[Hp - 16] = _sVhi::P64;
           I64[Hp - 8] = _sVhv::I64;
           I64[Hp] = _sVhw::I64;
           R2 = _sVhp::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call go_dn_sVhx_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVhG_info" {
     sat_sVhG_info:
         const sat_sVhG_entry;
         const 12884901889;
         const 15;
 },
 sat_sVhu_entry() //  [R1]
         { []
         }
     {offset
       c151I: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c151J; else goto c151K;
       c151J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c151K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVhu_info" {
     sat_sVhu_info:
         const sat_sVhu_entry;
         const 2;
         const 18;
 },
 sat_sVhI_entry() //  [R1]
         { []
         }
     {offset
       c151T: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c151U; else goto c151V;
       c151U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c151V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVhI_info" {
     sat_sVhI_info:
         const sat_sVhI_entry;
         const 2;
         const 18;
 },
 sat_sVhT_entry() //  [R1]
         { []
         }
     {offset
       c152o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c152p; else goto c152q;
       c152p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c152q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVhN_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVhT_info" {
     sat_sVhT_info:
         const sat_sVhT_entry;
         const 8589934593;
         const 15;
 },
 sat_sVhR_entry() //  [R1]
         { []
         }
     {offset
       c152w: // global
           _sVhR::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c152x; else goto c152y;
       c152y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c152A; else goto c152z;
       c152A: // global
           HpAlloc = 16;
           goto c152x;
       c152x: // global
           R1 = _sVhR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c152z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVhR::P64;
           _sVhi::P64 = P64[_sVhR::P64 + 16];
           _sVhO::I64 = I64[_sVhR::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sVhO::I64;
           R2 = _sVhi::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVhR_info" {
     sat_sVhR_info:
         const sat_sVhR_entry;
         const 4294967297;
         const 19;
 },
 sat_sVhV_entry() //  [R1]
         { []
         }
     {offset
       c152H: // global
           _sVhV::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c152I; else goto c152J;
       c152J: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c152L; else goto c152K;
       c152L: // global
           HpAlloc = 16;
           goto c152I;
       c152I: // global
           R1 = _sVhV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c152K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVhV::P64;
           _sVhi::P64 = P64[_sVhV::P64 + 16];
           _sVhO::I64 = I64[_sVhV::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sVhO::I64;
           R2 = _sVhi::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVhV_info" {
     sat_sVhV_info:
         const sat_sVhV_entry;
         const 4294967297;
         const 19;
 },
 go_up_sVhN_entry() //  [R1, R2]
         { []
         }
     {offset
       c152P: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c152T; else goto c152S;
       c152T: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c152S: // global
           _sVhi::P64 = P64[R1 + 7];
           if (%MO_S_Le_W64(R2, I64[R1 + 23])) goto c152N; else goto c152O;
       c152N: // global
           _sVhL::I64 = I64[R1 + 15];
           I64[Hp - 88] = sat_sVhT_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = _sVhL::I64;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sVhR_info;
           P64[Hp - 32] = _sVhi::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c152O: // global
           I64[Hp - 88] = sat_sVhV_info;
           P64[Hp - 72] = _sVhi::P64;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 88;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c152V::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c152V::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVhN_info" {
     go_up_sVhN_info:
         const go_up_sVhN_entry;
         const 8589934593;
         const 8;
         const 4294967300;
 },
 sat_sVhW_entry() //  [R1]
         { []
         }
     {offset
       c152W: // global
           _sVhW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c152X; else goto c152Y;
       c152Y: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1530; else goto c152Z;
       c1530: // global
           HpAlloc = 32;
           goto c152X;
       c152X: // global
           R1 = _sVhW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c152Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVhW::P64;
           _sVhi::P64 = P64[_sVhW::P64 + 16];
           _sVhp::I64 = I64[_sVhW::P64 + 32];
           _sVhL::I64 = _sVhp::I64 - I64[_sVhW::P64 + 24];
           _sVhM::I64 = I64[_sVhW::P64 + 40] - _sVhL::I64;
           I64[Hp - 24] = go_up_sVhN_info;
           P64[Hp - 16] = _sVhi::P64;
           I64[Hp - 8] = _sVhL::I64;
           I64[Hp] = _sVhM::I64;
           R2 = _sVhp::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call go_up_sVhN_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVhW_info" {
     sat_sVhW_info:
         const sat_sVhW_entry;
         const 12884901889;
         const 15;
 },
 sat_sVhK_entry() //  [R1]
         { []
         }
     {offset
       c1535: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1536; else goto c1537;
       c1536: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1537: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVhK_info" {
     sat_sVhK_info:
         const sat_sVhK_entry;
         const 2;
         const 18;
 },
 sat_sVhY_entry() //  [R1]
         { []
         }
     {offset
       c153g: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c153h; else goto c153i;
       c153h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c153i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVhY_info" {
     sat_sVhY_info:
         const sat_sVhY_entry;
         const 2;
         const 18;
 },
 GHC.Enum.$dmenumFromThenTo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c153j: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c153k; else goto c153l;
       c153k: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$dmenumFromThenTo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c153l: // global
           I64[Sp - 32] = block_c150l_info;
           _sVhi::P64 = R2;
           R2 = R2;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = R3;
           P64[Sp - 24] = _sVhi::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 48;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$dmenumFromThenTo_info" {
     GHC.Enum.$dmenumFromThenTo_info:
         const GHC.Enum.$dmenumFromThenTo_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c150l() //  [R1]
         { []
         }
     {offset
       c150l: // global
           I64[Sp - 8] = block_c150p_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp] = I64[R1 + 7];
           P64[Sp + 16] = R1;
           Sp = Sp - 24;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c150l_info" {
     block_c150l_info:
         const _c150l;
         const 3;
         const 30;
 },
 _c150p() //  [R1]
         { []
         }
     {offset
       c150p: // global
           I64[Sp] = block_c150t_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 32];
           I64[Sp + 32] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c150p_info" {
     block_c150p_info:
         const _c150p;
         const 68;
         const 30;
 },
 _c150t() //  [R1]
         { []
         }
     {offset
       c150t: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c153q; else goto c153p;
       c153q: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c153p: // global
           _sVhi::P64 = P64[Sp + 16];
           _sVhm::P64 = P64[Sp + 24];
           _sVhn::I64 = I64[Sp + 8];
           _sVhp::I64 = I64[Sp + 32];
           _sVhr::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_sVhp::I64,
                            _sVhn::I64)) goto c153A; else goto c153J;
       c153A: // global
           if (%MO_S_Le_W64(_sVhr::I64,
                            _sVhp::I64)) goto c153t; else goto c153y;
       c153t: // global
           I64[Hp - 96] = sat_sVhG_info;
           P64[Hp - 80] = _sVhi::P64;
           I64[Hp - 72] = _sVhn::I64;
           I64[Hp - 64] = _sVhp::I64;
           I64[Hp - 56] = _sVhr::I64;
           I64[Hp - 48] = sat_sVhu_info;
           P64[Hp - 32] = _sVhi::P64;
           P64[Hp - 24] = _sVhm::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c153y: // global
           if (%MO_S_Gt_W64(_sVhr::I64,
                            _sVhn::I64)) goto c153H; else goto c153w;
       c153w: // global
           I64[Hp - 96] = sat_sVhI_info;
           P64[Hp - 80] = _sVhi::P64;
           P64[Hp - 72] = _sVhm::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 96;
           P64[Hp - 48] = GHC.Types.[]_closure+1;
           _c153u::P64 = Hp - 62;
           Hp = Hp - 48;
           R1 = _c153u::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c153J: // global
           if (%MO_S_Ge_W64(_sVhr::I64,
                            _sVhp::I64)) goto c153D; else goto c153I;
       c153D: // global
           I64[Hp - 96] = sat_sVhW_info;
           P64[Hp - 80] = _sVhi::P64;
           I64[Hp - 72] = _sVhn::I64;
           I64[Hp - 64] = _sVhp::I64;
           I64[Hp - 56] = _sVhr::I64;
           I64[Hp - 48] = sat_sVhK_info;
           P64[Hp - 32] = _sVhi::P64;
           P64[Hp - 24] = _sVhm::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c153I: // global
           if (%MO_S_Lt_W64(_sVhr::I64,
                            _sVhn::I64)) goto c153H; else goto c153G;
       c153H: // global
           Hp = Hp - 104;
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c153G: // global
           I64[Hp - 96] = sat_sVhY_info;
           P64[Hp - 80] = _sVhi::P64;
           P64[Hp - 72] = _sVhm::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 96;
           P64[Hp - 48] = GHC.Types.[]_closure+1;
           _c153E::P64 = Hp - 62;
           Hp = Hp - 48;
           R1 = _c153E::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c150t_info" {
     block_c150t_info:
         const _c150t;
         const 580;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.007901335 UTC

[section ""cstring" . lvl31_rURb_bytes" {
     lvl31_rURb_bytes:
         I8[] [87,111,114,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.011575561 UTC

[section ""data" . lvl32_rURc_closure" {
     lvl32_rURc_closure:
         const lvl32_rURc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl32_rURc_entry() //  [R1]
         { []
         }
     {offset
       c155C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c155D; else goto c155E;
       c155D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c155E: // global
           (_c155z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c155z::I64 == 0) goto c155B; else goto c155A;
       c155B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c155A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c155z::I64;
           R2 = lvl31_rURb_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl32_rURc_info" {
     lvl32_rURc_info:
         const lvl32_rURc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.016620281 UTC

[section ""data" . GHC.Enum.$fEnumWord1_closure" {
     GHC.Enum.$fEnumWord1_closure:
         const GHC.Enum.$fEnumWord1_info;
         const 0;
 },
 GHC.Enum.$fEnumWord1_entry() //  [R2]
         { []
         }
     {offset
       c155Q: // global
           R4 = R2;
           R3 = lvl32_rURc_closure;
           R2 = GHC.Show.$fShowWord_closure;
           call GHC.Enum.fromEnumError_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord1_info" {
     GHC.Enum.$fEnumWord1_info:
         const GHC.Enum.$fEnumWord1_entry;
         const 0;
         const 288230380446679054;
         const 4294967301;
         const SVzM_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.021225525 UTC

[section ""data" . GHC.Enum.$fEnumWord_$cfromEnum_closure" {
     GHC.Enum.$fEnumWord_$cfromEnum_closure:
         const GHC.Enum.$fEnumWord_$cfromEnum_info;
         const 0;
 },
 GHC.Enum.$fEnumWord_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c1564: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1565; else goto c1566;
       c1565: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumWord_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1566: // global
           I64[Sp - 8] = block_c1561_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u156n; else goto c1562;
       u156n: // global
           call _c1561(R1) args: 0, res: 0, upd: 0;
       c1562: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord_$cfromEnum_info" {
     GHC.Enum.$fEnumWord_$cfromEnum_info:
         const GHC.Enum.$fEnumWord_$cfromEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+456;
 },
 _c1561() //  [R1]
         { []
         }
     {offset
       c1561: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c156b; else goto c156a;
       c156b: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c156a: // global
           _sVi2::I64 = I64[R1 + 7];
           if (_sVi2::I64 > 9223372036854775807) goto c156f; else goto c156m;
       c156f: // global
           Hp = Hp - 16;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Enum.$fEnumWord1_entry(R2) args: 8, res: 0, upd: 8;
       c156m: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sVi2::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1561_info" {
     block_c1561_info:
         const _c1561;
         const 0;
         const 4294967326;
         const SVzM_srt+464;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.035058565 UTC

[section ""data" . GHC.Enum.eftWord_closure" {
     GHC.Enum.eftWord_closure:
         const GHC.Enum.eftWord_info;
 },
 sat_sVid_entry() //  [R1]
         { []
         }
     {offset
       c156U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c156V; else goto c156W;
       c156V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c156W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVi9::I64 = I64[R1 + 32];
           if (_sVi9::I64 == I64[R1 + 24]) goto c156T; else goto c156S;
       c156T: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c156S: // global
           R2 = _sVi9::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_sVi8_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVid_info" {
     sat_sVid_info:
         const sat_sVid_entry;
         const 8589934593;
         const 15;
 },
 go_sVi8_entry() //  [R1, R2]
         { []
         }
     {offset
       c1571: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1575; else goto c1574;
       c1575: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1574: // global
           _sVi6::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_sVid_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _sVi6::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.W#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_sVi8_info" {
     go_sVi8_info:
         const go_sVi8_entry;
         const 4294967296;
         const 10;
         const 4294967300;
 },
 GHC.Enum.eftWord_entry() //  [R2, R3]
         { []
         }
     {offset
       c1579: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c157d; else goto c157c;
       c157d: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.eftWord_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c157c: // global
           if (R2 <= R3) goto c1577; else goto c1578;
       c1577: // global
           I64[Hp - 8] = go_sVi8_info;
           I64[Hp] = R3;
           R2 = R2;
           R1 = Hp - 7;
           call go_sVi8_entry(R2, R1) args: 8, res: 0, upd: 8;
       c1578: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.eftWord_info" {
     GHC.Enum.eftWord_info:
         const GHC.Enum.eftWord_entry;
         const 0;
         const 14;
         const 8589934604;
 },
 section ""data" . GHC.Enum.eftWordFB_closure" {
     GHC.Enum.eftWordFB_closure:
         const GHC.Enum.eftWordFB_info;
 },
 GHC.Enum.eftWordFB_slow() //  [R1]
         { []
         }
     {offset
       c157f: // global
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Enum.eftWordFB_entry(R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sVio_entry() //  [R1]
         { []
         }
     {offset
       c157A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c157B; else goto c157C;
       c157B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c157C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVik::I64 = I64[R1 + 40];
           if (_sVik::I64 == I64[R1 + 32]) goto c157z; else goto c157y;
       c157z: // global
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c157y: // global
           R2 = _sVik::I64 + 1;
           R1 = P64[R1 + 24];
           Sp = Sp - 16;
           call go_sVij_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVio_info" {
     sat_sVio_info:
         const sat_sVio_entry;
         const 8589934594;
         const 15;
 },
 go_sVij_entry() //  [R1, R2]
         { []
         }
     {offset
       c157G: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c157K; else goto c157J;
       c157K: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c157J: // global
           _sVie::P64 = P64[R1 + 7];
           _sVif::P64 = P64[R1 + 15];
           _sVih::I64 = I64[R1 + 23];
           I64[Hp - 56] = sat_sVio_info;
           P64[Hp - 40] = _sVif::P64;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = _sVih::I64;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 7;
           R1 = _sVie::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_sVij_info" {
     go_sVij_info:
         const go_sVij_entry;
         const 4294967298;
         const 8;
         const 4294967300;
 },
 GHC.Enum.eftWordFB_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c157O: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c157S; else goto c157R;
       c157S: // global
           HpAlloc = 32;
           R1 = GHC.Enum.eftWordFB_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c157R: // global
           if (R4 <= R5) goto c157M; else goto c157N;
       c157M: // global
           I64[Hp - 24] = go_sVij_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           I64[Hp] = R5;
           R2 = R4;
           R1 = Hp - 23;
           call go_sVij_entry(R2, R1) args: 8, res: 0, upd: 8;
       c157N: // global
           Hp = Hp - 32;
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.eftWordFB_info" {
     GHC.Enum.eftWordFB_info:
         const GHC.Enum.eftWordFB_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 772;
         const GHC.Enum.eftWordFB_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.055598082 UTC

[section ""data" . GHC.Enum.$fEnumWord_$cenumFrom_closure" {
     GHC.Enum.$fEnumWord_$cenumFrom_closure:
         const GHC.Enum.$fEnumWord_$cenumFrom_info;
 },
 GHC.Enum.$fEnumWord_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c158t: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c158u; else goto c158v;
       c158u: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumWord_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c158v: // global
           I64[Sp - 8] = block_c158q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u158z; else goto c158r;
       u158z: // global
           call _c158q(R1) args: 0, res: 0, upd: 0;
       c158r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord_$cenumFrom_info" {
     GHC.Enum.$fEnumWord_$cenumFrom_info:
         const GHC.Enum.$fEnumWord_$cenumFrom_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c158q() //  [R1]
         { []
         }
     {offset
       c158q: // global
           R3 = 18446744073709551615;
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.eftWord_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c158q_info" {
     block_c158q_info:
         const _c158q;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.062000001 UTC

[section ""data" . GHC.Enum.$fEnumWord_$cenumFromTo_closure" {
     GHC.Enum.$fEnumWord_$cenumFromTo_closure:
         const GHC.Enum.$fEnumWord_$cenumFromTo_info;
 },
 GHC.Enum.$fEnumWord_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c158Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c158U; else goto c158V;
       c158U: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumWord_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c158V: // global
           I64[Sp - 16] = block_c158N_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1593; else goto c158O;
       u1593: // global
           call _c158N(R1) args: 0, res: 0, upd: 0;
       c158O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord_$cenumFromTo_info" {
     GHC.Enum.$fEnumWord_$cenumFromTo_info:
         const GHC.Enum.$fEnumWord_$cenumFromTo_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c158N() //  [R1]
         { []
         }
     {offset
       c158N: // global
           I64[Sp] = block_c158T_info;
           _sViv::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sViv::I64;
           if (R1 & 7 != 0) goto u1592; else goto c158X;
       u1592: // global
           call _c158T(R1) args: 0, res: 0, upd: 0;
       c158X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c158N_info" {
     block_c158N_info:
         const _c158N;
         const 1;
         const 30;
 },
 _c158T() //  [R1]
         { []
         }
     {offset
       c158T: // global
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Enum.eftWord_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c158T_info" {
     block_c158T_info:
         const _c158T;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.073552788 UTC

[section ""data" . GHC.Enum.efdtWordUp_closure" {
     GHC.Enum.efdtWordUp_closure:
         const GHC.Enum.efdtWordUp_info;
 },
 sat_sViK_entry() //  [R1]
         { []
         }
     {offset
       c159M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c159N; else goto c159O;
       c159N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c159O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sViF_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sViK_info" {
     sat_sViK_info:
         const sat_sViK_entry;
         const 8589934593;
         const 15;
 },
 go_up_sViF_entry() //  [R1, R2]
         { []
         }
     {offset
       c159S: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c159W; else goto c159V;
       c159W: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c159V: // global
           if (R2 <= I64[R1 + 15]) goto c159Q; else goto c159R;
       c159Q: // global
           _sViD::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_sViK_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _sViD::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.W#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c159R: // global
           I64[Hp - 72] = GHC.Types.W#_con_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c15a1::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c15a1::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sViF_info" {
     go_up_sViF_info:
         const go_up_sViF_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_sViM_entry() //  [R1]
         { []
         }
     {offset
       c15a2: // global
           _sViM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c15a3; else goto c15a4;
       c15a4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c15a6; else goto c15a5;
       c15a6: // global
           HpAlloc = 24;
           goto c15a3;
       c15a3: // global
           R1 = _sViM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15a5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sViM::P64;
           _sViz::I64 = I64[_sViM::P64 + 24];
           _sViD::I64 = _sViz::I64 - I64[_sViM::P64 + 16];
           _sViE::I64 = I64[_sViM::P64 + 32] - _sViD::I64;
           I64[Hp - 16] = go_up_sViF_info;
           I64[Hp - 8] = _sViD::I64;
           I64[Hp] = _sViE::I64;
           R2 = _sViz::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sViF_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sViM_info" {
     sat_sViM_info:
         const sat_sViM_entry;
         const 12884901888;
         const 15;
 },
 GHC.Enum.efdtWordUp_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c15aa: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c15ae; else goto c15ad;
       c15ae: // global
           HpAlloc = 80;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.efdtWordUp_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c15ad: // global
           if (R4 >= R3) goto c15a8; else goto c15a9;
       c15a8: // global
           I64[Hp - 72] = sat_sViM_info;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = R3;
           I64[Hp - 40] = R4;
           I64[Hp - 32] = GHC.Types.W#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15a9: // global
           if (R4 >= R2) goto c15ao; else goto c15ap;
       c15ao: // global
           I64[Hp - 72] = GHC.Types.W#_con_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c15am::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c15am::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15ap: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtWordUp_info" {
     GHC.Enum.efdtWordUp_info:
         const GHC.Enum.efdtWordUp_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.092514584 UTC

[section ""data" . GHC.Enum.efdtWordUpFB_closure" {
     GHC.Enum.efdtWordUpFB_closure:
         const GHC.Enum.efdtWordUpFB_info;
 },
 GHC.Enum.efdtWordUpFB_slow() //  [R1]
         { []
         }
     {offset
       c15aV: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.efdtWordUpFB_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sVj3_entry() //  [R1]
         { []
         }
     {offset
       c15bq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15br; else goto c15bs;
       c15br: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15bs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sViY_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVj3_info" {
     sat_sVj3_info:
         const sat_sVj3_entry;
         const 8589934593;
         const 15;
 },
 go_up_sViY_entry() //  [R1, R2]
         { []
         }
     {offset
       c15bw: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c15bA; else goto c15bz;
       c15bA: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15bz: // global
           _sViP::P64 = P64[R1 + 7];
           if (R2 <= I64[R1 + 31]) goto c15bu; else goto c15bv;
       c15bu: // global
           _sViW::I64 = I64[R1 + 23];
           I64[Hp - 48] = sat_sVj3_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = _sViW::I64;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 7;
           R1 = _sViP::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c15bv: // global
           _sViQ::P64 = P64[R1 + 15];
           I64[Hp - 48] = GHC.Types.W#_con_info;
           I64[Hp - 40] = R2;
           _c15bD::P64 = Hp - 47;
           Hp = Hp - 40;
           R3 = _sViQ::P64;
           R2 = _c15bD::P64;
           R1 = _sViP::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sViY_info" {
     go_up_sViY_info:
         const go_up_sViY_entry;
         const 8589934594;
         const 8;
         const 4294967300;
 },
 sat_sVj5_entry() //  [R1]
         { []
         }
     {offset
       c15bE: // global
           _sVj5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c15bF; else goto c15bG;
       c15bG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c15bI; else goto c15bH;
       c15bI: // global
           HpAlloc = 40;
           goto c15bF;
       c15bF: // global
           R1 = _sVj5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15bH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVj5::P64;
           _sViP::P64 = P64[_sVj5::P64 + 16];
           _sViQ::P64 = P64[_sVj5::P64 + 24];
           _sViS::I64 = I64[_sVj5::P64 + 40];
           _sViW::I64 = _sViS::I64 - I64[_sVj5::P64 + 32];
           _sViX::I64 = I64[_sVj5::P64 + 48] - _sViW::I64;
           I64[Hp - 32] = go_up_sViY_info;
           P64[Hp - 24] = _sViP::P64;
           P64[Hp - 16] = _sViQ::P64;
           I64[Hp - 8] = _sViW::I64;
           I64[Hp] = _sViX::I64;
           R2 = _sViS::I64;
           R1 = Hp - 31;
           Sp = Sp - 16;
           call go_up_sViY_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVj5_info" {
     sat_sVj5_info:
         const sat_sVj5_entry;
         const 12884901890;
         const 15;
 },
 GHC.Enum.efdtWordUpFB_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c15bM: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c15bQ; else goto c15bP;
       c15bQ: // global
           HpAlloc = 72;
           R1 = GHC.Enum.efdtWordUpFB_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       c15bP: // global
           if (R6 >= R5) goto c15bK; else goto c15bL;
       c15bK: // global
           I64[Hp - 64] = sat_sVj5_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = R4;
           I64[Hp - 24] = R5;
           I64[Hp - 16] = R6;
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = R4;
           R3 = Hp - 64;
           _sViP::P64 = R2;
           R2 = Hp - 7;
           R1 = _sViP::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c15bL: // global
           if (R6 >= R4) goto c15bY; else goto c15bZ;
       c15bY: // global
           I64[Hp - 64] = GHC.Types.W#_con_info;
           I64[Hp - 56] = R4;
           _c15bW::P64 = Hp - 63;
           Hp = Hp - 56;
           R3 = R3;
           _sViP::P64 = R2;
           R2 = _c15bW::P64;
           R1 = _sViP::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c15bZ: // global
           Hp = Hp - 72;
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtWordUpFB_info" {
     GHC.Enum.efdtWordUpFB_info:
         const GHC.Enum.efdtWordUpFB_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 1797;
         const GHC.Enum.efdtWordUpFB_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.109996635 UTC

[section ""data" . GHC.Enum.efdtWordDn_closure" {
     GHC.Enum.efdtWordDn_closure:
         const GHC.Enum.efdtWordDn_info;
 },
 sat_sVjk_entry() //  [R1]
         { []
         }
     {offset
       c15cQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15cR; else goto c15cS;
       c15cR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15cS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVjf_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVjk_info" {
     sat_sVjk_info:
         const sat_sVjk_entry;
         const 8589934593;
         const 15;
 },
 go_dn_sVjf_entry() //  [R1, R2]
         { []
         }
     {offset
       c15cW: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c15d0; else goto c15cZ;
       c15d0: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15cZ: // global
           if (R2 >= I64[R1 + 15]) goto c15cU; else goto c15cV;
       c15cU: // global
           _sVjd::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_sVjk_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _sVjd::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.W#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15cV: // global
           I64[Hp - 72] = GHC.Types.W#_con_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c15d5::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c15d5::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVjf_info" {
     go_dn_sVjf_info:
         const go_dn_sVjf_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_sVjm_entry() //  [R1]
         { []
         }
     {offset
       c15d6: // global
           _sVjm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c15d7; else goto c15d8;
       c15d8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c15da; else goto c15d9;
       c15da: // global
           HpAlloc = 24;
           goto c15d7;
       c15d7: // global
           R1 = _sVjm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15d9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVjm::P64;
           _sVj9::I64 = I64[_sVjm::P64 + 24];
           _sVjd::I64 = _sVj9::I64 - I64[_sVjm::P64 + 16];
           _sVje::I64 = I64[_sVjm::P64 + 32] - _sVjd::I64;
           I64[Hp - 16] = go_dn_sVjf_info;
           I64[Hp - 8] = _sVjd::I64;
           I64[Hp] = _sVje::I64;
           R2 = _sVj9::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVjf_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVjm_info" {
     sat_sVjm_info:
         const sat_sVjm_entry;
         const 12884901888;
         const 15;
 },
 GHC.Enum.efdtWordDn_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c15de: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c15di; else goto c15dh;
       c15di: // global
           HpAlloc = 80;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.efdtWordDn_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c15dh: // global
           if (R4 <= R3) goto c15dc; else goto c15dd;
       c15dc: // global
           I64[Hp - 72] = sat_sVjm_info;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = R3;
           I64[Hp - 40] = R4;
           I64[Hp - 32] = GHC.Types.W#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15dd: // global
           if (R4 <= R2) goto c15ds; else goto c15dt;
       c15ds: // global
           I64[Hp - 72] = GHC.Types.W#_con_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c15dq::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c15dq::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15dt: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtWordDn_info" {
     GHC.Enum.efdtWordDn_info:
         const GHC.Enum.efdtWordDn_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.129720239 UTC

[section ""data" . GHC.Enum.efdtWordDnFB_closure" {
     GHC.Enum.efdtWordDnFB_closure:
         const GHC.Enum.efdtWordDnFB_info;
 },
 GHC.Enum.efdtWordDnFB_slow() //  [R1]
         { []
         }
     {offset
       c15dZ: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.efdtWordDnFB_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sVjD_entry() //  [R1]
         { []
         }
     {offset
       c15eu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15ev; else goto c15ew;
       c15ev: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15ew: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVjy_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVjD_info" {
     sat_sVjD_info:
         const sat_sVjD_entry;
         const 8589934593;
         const 15;
 },
 go_dn_sVjy_entry() //  [R1, R2]
         { []
         }
     {offset
       c15eA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c15eE; else goto c15eD;
       c15eE: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15eD: // global
           _sVjp::P64 = P64[R1 + 7];
           if (R2 >= I64[R1 + 31]) goto c15ey; else goto c15ez;
       c15ey: // global
           _sVjw::I64 = I64[R1 + 23];
           I64[Hp - 48] = sat_sVjD_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = _sVjw::I64;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 7;
           R1 = _sVjp::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c15ez: // global
           _sVjq::P64 = P64[R1 + 15];
           I64[Hp - 48] = GHC.Types.W#_con_info;
           I64[Hp - 40] = R2;
           _c15eH::P64 = Hp - 47;
           Hp = Hp - 40;
           R3 = _sVjq::P64;
           R2 = _c15eH::P64;
           R1 = _sVjp::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVjy_info" {
     go_dn_sVjy_info:
         const go_dn_sVjy_entry;
         const 8589934594;
         const 8;
         const 4294967300;
 },
 sat_sVjF_entry() //  [R1]
         { []
         }
     {offset
       c15eI: // global
           _sVjF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c15eJ; else goto c15eK;
       c15eK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c15eM; else goto c15eL;
       c15eM: // global
           HpAlloc = 40;
           goto c15eJ;
       c15eJ: // global
           R1 = _sVjF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15eL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVjF::P64;
           _sVjp::P64 = P64[_sVjF::P64 + 16];
           _sVjq::P64 = P64[_sVjF::P64 + 24];
           _sVjs::I64 = I64[_sVjF::P64 + 40];
           _sVjw::I64 = _sVjs::I64 - I64[_sVjF::P64 + 32];
           _sVjx::I64 = I64[_sVjF::P64 + 48] - _sVjw::I64;
           I64[Hp - 32] = go_dn_sVjy_info;
           P64[Hp - 24] = _sVjp::P64;
           P64[Hp - 16] = _sVjq::P64;
           I64[Hp - 8] = _sVjw::I64;
           I64[Hp] = _sVjx::I64;
           R2 = _sVjs::I64;
           R1 = Hp - 31;
           Sp = Sp - 16;
           call go_dn_sVjy_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVjF_info" {
     sat_sVjF_info:
         const sat_sVjF_entry;
         const 12884901890;
         const 15;
 },
 GHC.Enum.efdtWordDnFB_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c15eQ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c15eU; else goto c15eT;
       c15eU: // global
           HpAlloc = 72;
           R1 = GHC.Enum.efdtWordDnFB_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       c15eT: // global
           if (R6 <= R5) goto c15eO; else goto c15eP;
       c15eO: // global
           I64[Hp - 64] = sat_sVjF_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = R4;
           I64[Hp - 24] = R5;
           I64[Hp - 16] = R6;
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = R4;
           R3 = Hp - 64;
           _sVjp::P64 = R2;
           R2 = Hp - 7;
           R1 = _sVjp::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c15eP: // global
           if (R6 <= R4) goto c15f2; else goto c15f3;
       c15f2: // global
           I64[Hp - 64] = GHC.Types.W#_con_info;
           I64[Hp - 56] = R4;
           _c15f0::P64 = Hp - 63;
           Hp = Hp - 56;
           R3 = R3;
           _sVjp::P64 = R2;
           R2 = _c15f0::P64;
           R1 = _sVjp::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c15f3: // global
           Hp = Hp - 72;
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtWordDnFB_info" {
     GHC.Enum.efdtWordDnFB_info:
         const GHC.Enum.efdtWordDnFB_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 1797;
         const GHC.Enum.efdtWordDnFB_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.144673136 UTC

[section ""data" . GHC.Enum.efdtWord_closure" {
     GHC.Enum.efdtWord_closure:
         const GHC.Enum.efdtWord_info;
 },
 GHC.Enum.efdtWord_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c15fy: // global
           if (R3 < R2) goto c15fw; else goto c15fx;
       c15fw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtWordDn_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c15fx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtWordUp_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtWord_info" {
     GHC.Enum.efdtWord_info:
         const GHC.Enum.efdtWord_entry;
         const 0;
         const 14;
         const 12884901904;
 },
 section ""data" . GHC.Enum.efdtWordFB_closure" {
     GHC.Enum.efdtWordFB_closure:
         const GHC.Enum.efdtWordFB_info;
 },
 GHC.Enum.efdtWordFB_slow() //  [R1]
         { []
         }
     {offset
       c15fC: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.efdtWordFB_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Enum.efdtWordFB_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c15fL: // global
           if (R5 < R4) goto c15fJ; else goto c15fK;
       c15fJ: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtWordDnFB_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
       c15fK: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtWordUpFB_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtWordFB_info" {
     GHC.Enum.efdtWordFB_info:
         const GHC.Enum.efdtWordFB_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 1797;
         const GHC.Enum.efdtWordFB_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.153596385 UTC

[section ""data" . GHC.Enum.$fEnumWord_$cenumFromThenTo_closure" {
     GHC.Enum.$fEnumWord_$cenumFromThenTo_closure:
         const GHC.Enum.$fEnumWord_$cenumFromThenTo_info;
 },
 GHC.Enum.$fEnumWord_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c15g5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c15ge; else goto c15gf;
       c15ge: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumWord_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c15gf: // global
           I64[Sp - 24] = block_c15g2_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u15go; else goto c15g3;
       u15go: // global
           call _c15g2(R1) args: 0, res: 0, upd: 0;
       c15g3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord_$cenumFromThenTo_info" {
     GHC.Enum.$fEnumWord_$cenumFromThenTo_info:
         const GHC.Enum.$fEnumWord_$cenumFromThenTo_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c15g2() //  [R1]
         { []
         }
     {offset
       c15g2: // global
           I64[Sp] = block_c15g8_info;
           _sVjW::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sVjW::I64;
           if (R1 & 7 != 0) goto u15gn; else goto c15g9;
       u15gn: // global
           call _c15g8(R1) args: 0, res: 0, upd: 0;
       c15g9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c15g2_info" {
     block_c15g2_info:
         const _c15g2;
         const 2;
         const 30;
 },
 _c15g8() //  [R1]
         { []
         }
     {offset
       c15g8: // global
           I64[Sp] = block_c15gd_info;
           _sVjY::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sVjY::I64;
           if (R1 & 7 != 0) goto u15gp; else goto c15gi;
       u15gp: // global
           call _c15gd(R1) args: 0, res: 0, upd: 0;
       c15gi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c15g8_info" {
     block_c15g8_info:
         const _c15g8;
         const 66;
         const 30;
 },
 _c15gd() //  [R1]
         { []
         }
     {offset
       c15gd: // global
           R4 = I64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Enum.efdtWord_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c15gd_info" {
     block_c15gd_info:
         const _c15gd;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.161969458 UTC

[section ""data" . sat_sVk1_closure" {
     sat_sVk1_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.163659553 UTC

[section ""data" . sat_sVk2_closure" {
     sat_sVk2_closure:
         const :_con_info;
         const sat_sVk1_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.166695164 UTC

[section ""data" . GHC.Enum.$fEnumInteger1_closure" {
     GHC.Enum.$fEnumInteger1_closure:
         const GHC.Enum.$fEnumInteger1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumInteger1_entry() //  [R1]
         { []
         }
     {offset
       c15gP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15gQ; else goto c15gR;
       c15gQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15gR: // global
           (_c15gM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15gM::I64 == 0) goto c15gO; else goto c15gN;
       c15gO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15gN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15gM::I64;
           R3 = sat_sVk2_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger1_info" {
     GHC.Enum.$fEnumInteger1_info:
         const GHC.Enum.$fEnumInteger1_entry;
         const 0;
         const 4294967317;
         const SVzM_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.173417525 UTC

[section ""data" . GHC.Enum.enumDeltaToInteger1_closure" {
     GHC.Enum.enumDeltaToInteger1_closure:
         const GHC.Enum.enumDeltaToInteger1_info;
         const 0;
 },
 sat_sVk9_entry() //  [R1]
         { []
         }
     {offset
       c15hi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c15hj; else goto c15hk;
       c15hj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15hk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c15hg_info;
           R3 = GHC.Enum.$fEnumInteger1_closure;
           R2 = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVk9_info" {
     sat_sVk9_info:
         const sat_sVk9_entry;
         const 2;
         const 12884901906;
         const SVzM_srt+480;
 },
 _c15hg() //  [R1]
         { []
         }
     {offset
       c15hg: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sVk5_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c15hg_info" {
     block_c15hg_info:
         const _c15hg;
         const 1;
         const 12884901918;
         const SVzM_srt+480;
 },
 go_sVk5_entry() //  [R1, R2]
         { []
         }
     {offset
       c15hr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c15hs; else goto c15ht;
       c15hs: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15ht: // global
           I64[Sp - 24] = block_c15h8_info;
           R3 = P64[R1 + 7];
           _sVk6::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _sVk6::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sVk5_info" {
     go_sVk5_info:
         const go_sVk5_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SVzM_srt+480;
 },
 _c15h8() //  [R1]
         { []
         }
     {offset
       c15h8: // global
           if (R1 == 1) goto c15hq; else goto c15hp;
       c15hq: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15hp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c15hx; else goto c15hw;
       c15hx: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c15hw: // global
           I64[Hp - 48] = sat_sVk9_info;
           P64[Hp - 32] = P64[Sp + 8];
           _sVk6::P64 = P64[Sp + 16];
           P64[Hp - 24] = _sVk6::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sVk6::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c15h8_info" {
     block_c15h8_info:
         const _c15h8;
         const 2;
         const 12884901918;
         const SVzM_srt+480;
 },
 GHC.Enum.enumDeltaToInteger1_entry() //  [R2, R3]
         { []
         }
     {offset
       c15hB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c15hF; else goto c15hE;
       c15hF: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.enumDeltaToInteger1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c15hE: // global
           I64[Hp - 8] = go_sVk5_info;
           P64[Hp] = R3;
           R2 = R2;
           R1 = Hp - 7;
           call go_sVk5_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumDeltaToInteger1_info" {
     GHC.Enum.enumDeltaToInteger1_info:
         const GHC.Enum.enumDeltaToInteger1_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SVzM_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.188422624 UTC

[section ""data" . GHC.Enum.enumDeltaToInteger1FB_closure" {
     GHC.Enum.enumDeltaToInteger1FB_closure:
         const GHC.Enum.enumDeltaToInteger1FB_info;
         const 0;
 },
 sat_sVki_entry() //  [R1]
         { []
         }
     {offset
       c15im: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c15in; else goto c15io;
       c15in: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15io: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c15ik_info;
           R3 = GHC.Enum.$fEnumInteger1_closure;
           R2 = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVki_info" {
     sat_sVki_info:
         const sat_sVki_entry;
         const 2;
         const 12884901906;
         const SVzM_srt+480;
 },
 _c15ik() //  [R1]
         { []
         }
     {offset
       c15ik: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sVke_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c15ik_info" {
     block_c15ik_info:
         const _c15ik;
         const 1;
         const 12884901918;
         const SVzM_srt+480;
 },
 go_sVke_entry() //  [R1, R2]
         { []
         }
     {offset
       c15iv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c15iw; else goto c15ix;
       c15iw: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15ix: // global
           I64[Sp - 40] = block_c15ic_info;
           R3 = P64[R1 + 23];
           _sVkf::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _sVkf::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sVke_info" {
     go_sVke_info:
         const go_sVke_entry;
         const 3;
         const 12884901896;
         const 4294967301;
         const SVzM_srt+480;
 },
 _c15ic() //  [R1]
         { []
         }
     {offset
       c15ic: // global
           if (R1 == 1) goto c15iu; else goto c15it;
       c15iu: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c15it: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c15iA; else goto c15iz;
       c15iA: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c15iz: // global
           I64[Hp - 24] = sat_sVki_info;
           P64[Hp - 8] = P64[Sp + 24];
           _sVkf::P64 = P64[Sp + 32];
           P64[Hp] = _sVkf::P64;
           R3 = Hp - 24;
           R2 = _sVkf::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c15ic_info" {
     block_c15ic_info:
         const _c15ic;
         const 4;
         const 12884901918;
         const SVzM_srt+480;
 },
 GHC.Enum.enumDeltaToInteger1FB_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c15iE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c15iI; else goto c15iH;
       c15iI: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.enumDeltaToInteger1FB_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c15iH: // global
           I64[Hp - 24] = go_sVke_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R5;
           R2 = R4;
           R1 = Hp - 23;
           call go_sVke_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumDeltaToInteger1FB_info" {
     GHC.Enum.enumDeltaToInteger1FB_info:
         const GHC.Enum.enumDeltaToInteger1FB_entry;
         const 0;
         const 47244640270;
         const 17179869208;
         const SVzM_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.208203204 UTC

[section ""data" . GHC.Enum.up_fb_closure" {
     GHC.Enum.up_fb_closure:
         const GHC.Enum.up_fb_info;
         const 0;
 },
 sat_sVks_entry() //  [R1]
         { []
         }
     {offset
       c15jo: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c15jp; else goto c15jq;
       c15jp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15jq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c15jm_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVks_info" {
     sat_sVks_info:
         const sat_sVks_entry;
         const 3;
         const 4294967311;
         const SVzM_srt+480;
 },
 _c15jm() //  [R1]
         { []
         }
     {offset
       c15jm: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sVko_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c15jm_info" {
     block_c15jm_info:
         const _c15jm;
         const 1;
         const 4294967326;
         const SVzM_srt+480;
 },
 go_sVko_entry() //  [R1, R2]
         { []
         }
     {offset
       c15jx: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c15jy; else goto c15jz;
       c15jy: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15jz: // global
           I64[Sp - 48] = block_c15je_info;
           R3 = P64[R1 + 31];
           _sVkp::P64 = R2;
           R2 = R2;
           P64[Sp - 40] = P64[R1 + 7];
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = P64[R1 + 23];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _sVkp::P64;
           Sp = Sp - 48;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sVko_info" {
     go_sVko_info:
         const go_sVko_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const SVzM_srt+480;
 },
 _c15je() //  [R1]
         { []
         }
     {offset
       c15je: // global
           if (R1 == 1) goto c15jw; else goto c15jv;
       c15jw: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c15jv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c15jC; else goto c15jB;
       c15jC: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c15jB: // global
           I64[Hp - 32] = sat_sVks_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           _sVkp::P64 = P64[Sp + 40];
           P64[Hp] = _sVkp::P64;
           R3 = Hp - 32;
           R2 = _sVkp::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c15je_info" {
     block_c15je_info:
         const _c15je;
         const 5;
         const 4294967326;
         const SVzM_srt+480;
 },
 GHC.Enum.up_fb_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c15jG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c15jK; else goto c15jJ;
       c15jK: // global
           HpAlloc = 40;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.up_fb_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c15jJ: // global
           I64[Hp - 32] = go_sVko_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R2 = R4;
           R1 = Hp - 31;
           call go_sVko_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.up_fb_info" {
     GHC.Enum.up_fb_info:
         const GHC.Enum.up_fb_entry;
         const 0;
         const 73014444046;
         const 21474836505;
         const SVzM_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.227345871 UTC

[section ""data" . GHC.Enum.dn_fb_closure" {
     GHC.Enum.dn_fb_closure:
         const GHC.Enum.dn_fb_info;
         const 0;
 },
 sat_sVkC_entry() //  [R1]
         { []
         }
     {offset
       c15ks: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c15kt; else goto c15ku;
       c15kt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15ku: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c15kq_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVkC_info" {
     sat_sVkC_info:
         const sat_sVkC_entry;
         const 3;
         const 4294967311;
         const SVzM_srt+480;
 },
 _c15kq() //  [R1]
         { []
         }
     {offset
       c15kq: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sVky_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c15kq_info" {
     block_c15kq_info:
         const _c15kq;
         const 1;
         const 4294967326;
         const SVzM_srt+480;
 },
 go_sVky_entry() //  [R1, R2]
         { []
         }
     {offset
       c15kB: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c15kC; else goto c15kD;
       c15kC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15kD: // global
           I64[Sp - 48] = block_c15ki_info;
           R3 = P64[R1 + 31];
           _sVkz::P64 = R2;
           R2 = R2;
           P64[Sp - 40] = P64[R1 + 7];
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = P64[R1 + 23];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _sVkz::P64;
           Sp = Sp - 48;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sVky_info" {
     go_sVky_info:
         const go_sVky_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const SVzM_srt+480;
 },
 _c15ki() //  [R1]
         { []
         }
     {offset
       c15ki: // global
           if (R1 == 1) goto c15kA; else goto c15kz;
       c15kA: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c15kz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c15kG; else goto c15kF;
       c15kG: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c15kF: // global
           I64[Hp - 32] = sat_sVkC_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           _sVkz::P64 = P64[Sp + 40];
           P64[Hp] = _sVkz::P64;
           R3 = Hp - 32;
           R2 = _sVkz::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c15ki_info" {
     block_c15ki_info:
         const _c15ki;
         const 5;
         const 4294967326;
         const SVzM_srt+480;
 },
 GHC.Enum.dn_fb_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c15kK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c15kO; else goto c15kN;
       c15kO: // global
           HpAlloc = 40;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.dn_fb_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c15kN: // global
           I64[Hp - 32] = go_sVky_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R2 = R4;
           R1 = Hp - 31;
           call go_sVky_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.dn_fb_info" {
     GHC.Enum.dn_fb_info:
         const GHC.Enum.dn_fb_entry;
         const 0;
         const 141733920782;
         const 21474836505;
         const SVzM_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.240764097 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_$cfromEnum_closure" {
     GHC.Enum.$fEnumVecElem_$cfromEnum_closure:
         const GHC.Enum.$fEnumVecElem_$cfromEnum_info;
 },
 GHC.Enum.$fEnumVecElem_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c15ll: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c15lr; else goto c15ls;
       c15lr: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecElem_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15ls: // global
           I64[Sp - 8] = block_c15lh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u15lD; else goto c15li;
       u15lD: // global
           call _c15lh(R1) args: 0, res: 0, upd: 0;
       c15li: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem_$cfromEnum_info" {
     GHC.Enum.$fEnumVecElem_$cfromEnum_info:
         const GHC.Enum.$fEnumVecElem_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c15lh() //  [R1]
         { []
         }
     {offset
       c15lh: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c15lo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c15lh_info" {
     block_c15lh_info:
         const _c15lh;
         const 0;
         const 30;
 },
 _c15lo() //  []
         { []
         }
     {offset
       c15lo: // global
           Hp = Hp + 16;
           _sVkF::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c15ly; else goto c15lx;
       c15ly: // global
           HpAlloc = 16;
           I64[Sp] = block_c15ln_info;
           R1 = _sVkF::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c15lx: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sVkF::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c15ln() //  [R1]
         { []
         }
     {offset
       c15ln: // global
           I64[Sp] = R1;
           call _c15lo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c15ln_info" {
     block_c15ln_info:
         const _c15ln;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.249069981 UTC

[section ""cstring" . lvl33_rURd_bytes" {
     lvl33_rURd_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.251504474 UTC

[section ""data" . lvl34_rURe_closure" {
     lvl34_rURe_closure:
         const lvl34_rURe_info;
         const 0;
         const 0;
         const 0;
 },
 lvl34_rURe_entry() //  [R1]
         { []
         }
     {offset
       c15m5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15m6; else goto c15m7;
       c15m6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15m7: // global
           (_c15m2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15m2::I64 == 0) goto c15m4; else goto c15m3;
       c15m4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15m3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15m2::I64;
           R2 = lvl33_rURd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl34_rURe_info" {
     lvl34_rURe_info:
         const lvl34_rURe_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.255525696 UTC

[section ""cstring" . GHC.Enum.$trModule4_bytes" {
     GHC.Enum.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.258365195 UTC

[section ""data" . lvl35_rURf_closure" {
     lvl35_rURf_closure:
         const lvl35_rURf_info;
         const 0;
         const 0;
         const 0;
 },
 lvl35_rURf_entry() //  [R1]
         { []
         }
     {offset
       c15mm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15mn; else goto c15mo;
       c15mn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15mo: // global
           (_c15mj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15mj::I64 == 0) goto c15ml; else goto c15mk;
       c15ml: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15mk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15mj::I64;
           R2 = GHC.Enum.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl35_rURf_info" {
     lvl35_rURf_info:
         const lvl35_rURf_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.263220806 UTC

[section ""cstring" . GHC.Enum.$trModule2_bytes" {
     GHC.Enum.$trModule2_bytes:
         I8[] [71,72,67,46,69,110,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.266168221 UTC

[section ""data" . lvl36_rURg_closure" {
     lvl36_rURg_closure:
         const lvl36_rURg_info;
         const 0;
         const 0;
         const 0;
 },
 lvl36_rURg_entry() //  [R1]
         { []
         }
     {offset
       c15mD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15mE; else goto c15mF;
       c15mE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15mF: // global
           (_c15mA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15mA::I64 == 0) goto c15mC; else goto c15mB;
       c15mC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15mB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15mA::I64;
           R2 = GHC.Enum.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl36_rURg_info" {
     lvl36_rURg_info:
         const lvl36_rURg_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.270468363 UTC

[section ""cstring" . lvl37_rURh_bytes" {
     lvl37_rURh_bytes:
         I8[] [46,47,71,72,67,47,69,110,117,109,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.274543442 UTC

[section ""data" . lvl38_rURi_closure" {
     lvl38_rURi_closure:
         const lvl38_rURi_info;
         const 0;
         const 0;
         const 0;
 },
 lvl38_rURi_entry() //  [R1]
         { []
         }
     {offset
       c15mU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15mV; else goto c15mW;
       c15mV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15mW: // global
           (_c15mR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15mR::I64 == 0) goto c15mT; else goto c15mS;
       c15mT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15mS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15mR::I64;
           R2 = lvl37_rURh_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl38_rURi_info" {
     lvl38_rURi_info:
         const lvl38_rURi_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.27974374 UTC

[section ""data" . lvl39_rURj_closure" {
     lvl39_rURj_closure:
         const GHC.Types.I#_con_info;
         const 890;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.28222393 UTC

[section ""data" . lvl40_rURk_closure" {
     lvl40_rURk_closure:
         const GHC.Types.I#_con_info;
         const 31;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.284105176 UTC

[section ""data" . lvl41_rURl_closure" {
     lvl41_rURl_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl35_rURf_closure;
         const lvl36_rURg_closure;
         const lvl38_rURi_closure;
         const lvl39_rURj_closure+1;
         const GHC.Enum.$fEnumBool4_closure+1;
         const lvl39_rURj_closure+1;
         const lvl40_rURk_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.286695157 UTC

[section ""data" . lvl42_rURm_closure" {
     lvl42_rURm_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl34_rURe_closure;
         const lvl41_rURl_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.288932736 UTC

[section ""cstring" . lvl43_rURn_bytes" {
     lvl43_rURn_bytes:
         I8[] [112,114,101,100,123,86,101,99,69,108,101,109,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,102,105,114,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.292409568 UTC

[section ""data" . GHC.Enum.$fEnumVecElem1_closure" {
     GHC.Enum.$fEnumVecElem1_closure:
         const GHC.Enum.$fEnumVecElem1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecElem1_entry() //  [R1]
         { []
         }
     {offset
       c15nh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c15ni; else goto c15nj;
       c15ni: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15nj: // global
           (_c15nc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15nc::I64 == 0) goto c15ne; else goto c15nd;
       c15ne: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15nd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15nc::I64;
           I64[Sp - 24] = block_c15nf_info;
           R2 = lvl43_rURn_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem1_info" {
     GHC.Enum.$fEnumVecElem1_info:
         const GHC.Enum.$fEnumVecElem1_entry;
         const 0;
         const 12884901909;
         const SVzM_srt+528;
 },
 _c15nf() //  [R1]
         { []
         }
     {offset
       c15nf: // global
           R3 = R1;
           R2 = lvl42_rURm_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c15nf_info" {
     block_c15nf_info:
         const _c15nf;
         const 0;
         const 12884901918;
         const SVzM_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.302741077 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_$cpred_closure" {
     GHC.Enum.$fEnumVecElem_$cpred_closure:
         const GHC.Enum.$fEnumVecElem_$cpred_info;
         const 0;
 },
 GHC.Enum.$fEnumVecElem_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c15nI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c15nJ; else goto c15nK;
       c15nJ: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecElem_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15nK: // global
           I64[Sp - 8] = block_c15nB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u15nV; else goto c15nC;
       u15nV: // global
           call _c15nB(R1) args: 0, res: 0, upd: 0;
       c15nC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem_$cpred_info" {
     GHC.Enum.$fEnumVecElem_$cpred_info:
         const GHC.Enum.$fEnumVecElem_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+544;
 },
 _c15nB() //  [R1]
         { []
         }
     {offset
       c15nB: // global
           if (I32[I64[R1 - 1] + 20] == 0 :: W32) goto c15nG; else goto c15nF;
       c15nG: // global
           R1 = GHC.Enum.$fEnumVecElem1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c15nF: // global
           R1 = I64[(%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) - 1 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c15nB_info" {
     block_c15nB_info:
         const _c15nB;
         const 0;
         const 4294967326;
         const SVzM_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.310461557 UTC

[section ""cstring" . lvl44_rURo_bytes" {
     lvl44_rURo_bytes:
         I8[] [115,117,99,99,123,86,101,99,69,108,101,109,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,108,97,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.314710393 UTC

[section ""data" . GHC.Enum.$fEnumVecElem2_closure" {
     GHC.Enum.$fEnumVecElem2_closure:
         const GHC.Enum.$fEnumVecElem2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecElem2_entry() //  [R1]
         { []
         }
     {offset
       c15om: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c15on; else goto c15oo;
       c15on: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15oo: // global
           (_c15oh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15oh::I64 == 0) goto c15oj; else goto c15oi;
       c15oj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15oi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15oh::I64;
           I64[Sp - 24] = block_c15ok_info;
           R2 = lvl44_rURo_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem2_info" {
     GHC.Enum.$fEnumVecElem2_info:
         const GHC.Enum.$fEnumVecElem2_entry;
         const 0;
         const 12884901909;
         const SVzM_srt+528;
 },
 _c15ok() //  [R1]
         { []
         }
     {offset
       c15ok: // global
           R3 = R1;
           R2 = lvl42_rURm_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c15ok_info" {
     block_c15ok_info:
         const _c15ok;
         const 0;
         const 12884901918;
         const SVzM_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.322923647 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_$csucc_closure" {
     GHC.Enum.$fEnumVecElem_$csucc_closure:
         const GHC.Enum.$fEnumVecElem_$csucc_info;
         const 0;
 },
 GHC.Enum.$fEnumVecElem_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c15oN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c15oO; else goto c15oP;
       c15oO: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecElem_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15oP: // global
           I64[Sp - 8] = block_c15oG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u15p0; else goto c15oH;
       u15p0: // global
           call _c15oG(R1) args: 0, res: 0, upd: 0;
       c15oH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem_$csucc_info" {
     GHC.Enum.$fEnumVecElem_$csucc_info:
         const GHC.Enum.$fEnumVecElem_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+560;
 },
 _c15oG() //  [R1]
         { []
         }
     {offset
       c15oG: // global
           if (I32[I64[R1 - 1] + 20] == 9 :: W32) goto c15oL; else goto c15oK;
       c15oL: // global
           R1 = GHC.Enum.$fEnumVecElem2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c15oK: // global
           R1 = I64[(%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) + 1 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c15oG_info" {
     block_c15oG_info:
         const _c15oG;
         const 0;
         const 4294967326;
         const SVzM_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.331211964 UTC

[section ""cstring" . lvl45_rURp_bytes" {
     lvl45_rURp_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,101,110,117,109,101,114,97,116,105,111,110,39,115,32,114,97,110,103,101,32,40,48,44]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.33292612 UTC

[section ""cstring" . lvl46_rURq_bytes" {
     lvl46_rURq_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.335628487 UTC

[section ""data" . lvl47_rURr_closure" {
     lvl47_rURr_closure:
         const lvl47_rURr_info;
         const 0;
         const 0;
         const 0;
 },
 lvl47_rURr_entry() //  [R1]
         { []
         }
     {offset
       c15pq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15pr; else goto c15ps;
       c15pr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15ps: // global
           (_c15pn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15pn::I64 == 0) goto c15pp; else goto c15po;
       c15pp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15po: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15pn::I64;
           R2 = lvl46_rURq_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl47_rURr_info" {
     lvl47_rURr_info:
         const lvl47_rURr_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.341385939 UTC

[section ""data" . lvl48_rURs_closure" {
     lvl48_rURs_closure:
         const lvl48_rURs_info;
         const 0;
         const 0;
         const 0;
 },
 lvl48_rURs_entry() //  [R1]
         { []
         }
     {offset
       c15pJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c15pK; else goto c15pL;
       c15pK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15pL: // global
           (_c15pD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15pD::I64 == 0) goto c15pF; else goto c15pE;
       c15pF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15pE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15pD::I64;
           I64[Sp - 24] = block_c15pG_info;
           R4 = lvl47_rURr_closure;
           R3 = 9;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl48_rURs_info" {
     lvl48_rURs_info:
         const lvl48_rURs_entry;
         const 0;
         const 4294967317;
         const SVzM_srt+576;
 },
 _c15pG() //  [R1, R2]
         { []
         }
     {offset
       c15pG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c15pO; else goto c15pN;
       c15pO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c15pN: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c15pG_info" {
     block_c15pG_info:
         const _c15pG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.348108765 UTC

[section ""data" . lvl49_rURt_closure" {
     lvl49_rURt_closure:
         const lvl49_rURt_info;
         const 0;
         const 0;
         const 0;
 },
 lvl49_rURt_entry() //  [R1]
         { []
         }
     {offset
       c15q6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15q7; else goto c15q8;
       c15q7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15q8: // global
           (_c15q3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15q3::I64 == 0) goto c15q5; else goto c15q4;
       c15q5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15q4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15q3::I64;
           R3 = lvl48_rURs_closure;
           R2 = lvl45_rURp_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl49_rURt_info" {
     lvl49_rURt_info:
         const lvl49_rURt_entry;
         const 0;
         const 4294967317;
         const SVzM_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.35322369 UTC

[section ""cstring" . lvl50_rURu_bytes" {
     lvl50_rURu_bytes:
         I8[] [116,111,69,110,117,109,123,86,101,99,69,108,101,109,125,58,32,116,97,103,32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.35855405 UTC

[section ""data" . GHC.Enum.$wlvl1_closure" {
     GHC.Enum.$wlvl1_closure:
         const GHC.Enum.$wlvl1_info;
         const 0;
 },
 sat_sVkX_entry() //  [R1]
         { []
         }
     {offset
       c15qs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c15qt; else goto c15qu;
       c15qt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15qu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c15qp_info;
           R4 = lvl49_rURt_closure;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVkX_info" {
     sat_sVkX_info:
         const sat_sVkX_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+592;
 },
 _c15qp() //  [R1, R2]
         { []
         }
     {offset
       c15qp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c15qx; else goto c15qw;
       c15qx: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c15qw: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c15qp_info" {
     block_c15qp_info:
         const _c15qp;
         const 0;
         const 30;
 },
 GHC.Enum.$wlvl1_entry() //  [R2]
         { []
         }
     {offset
       c15qA: // global
           _sVkT::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c15qB; else goto c15qC;
       c15qC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c15qE; else goto c15qD;
       c15qE: // global
           HpAlloc = 24;
           goto c15qB;
       c15qB: // global
           R2 = _sVkT::I64;
           R1 = GHC.Enum.$wlvl1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15qD: // global
           I64[Hp - 16] = sat_sVkX_info;
           I64[Hp] = _sVkT::I64;
           I64[Sp - 8] = block_c15qy_info;
           R3 = Hp - 16;
           R2 = lvl50_rURu_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$wlvl1_info" {
     GHC.Enum.$wlvl1_info:
         const GHC.Enum.$wlvl1_entry;
         const 0;
         const 3311419785230;
         const 4294967300;
         const SVzM_srt+528;
 },
 _c15qy() //  [R1]
         { []
         }
     {offset
       c15qy: // global
           R3 = R1;
           R2 = lvl42_rURm_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c15qy_info" {
     block_c15qy_info:
         const _c15qy;
         const 0;
         const 12884901918;
         const SVzM_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.369036885 UTC

[section ""data" . GHC.Enum.$w$ctoEnum1_closure" {
     GHC.Enum.$w$ctoEnum1_closure:
         const GHC.Enum.$w$ctoEnum1_info;
         const 0;
 },
 GHC.Enum.$w$ctoEnum1_entry() //  [R2]
         { []
         }
     {offset
       c15r7: // global
           _sVkZ::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto c15rf; else goto c15r6;
       c15r6: // global
           if (%MO_S_Gt_W64(_sVkZ::I64, 9)) goto c15rf; else goto c15rg;
       c15rf: // global
           R2 = _sVkZ::I64;
           call GHC.Enum.$wlvl1_entry(R2) args: 8, res: 0, upd: 8;
       c15rg: // global
           R1 = I64[(_sVkZ::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$w$ctoEnum1_info" {
     GHC.Enum.$w$ctoEnum1_info:
         const GHC.Enum.$w$ctoEnum1_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const SVzM_srt+600;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.373897836 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_$ctoEnum_closure" {
     GHC.Enum.$fEnumVecElem_$ctoEnum_closure:
         const GHC.Enum.$fEnumVecElem_$ctoEnum_info;
         const 0;
 },
 GHC.Enum.$fEnumVecElem_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c15ru: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c15rv; else goto c15rw;
       c15rv: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecElem_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15rw: // global
           I64[Sp - 8] = block_c15rr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u15rA; else goto c15rs;
       u15rA: // global
           call _c15rr(R1) args: 0, res: 0, upd: 0;
       c15rs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem_$ctoEnum_info" {
     GHC.Enum.$fEnumVecElem_$ctoEnum_info:
         const GHC.Enum.$fEnumVecElem_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+608;
 },
 _c15rr() //  [R1]
         { []
         }
     {offset
       c15rr: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.$w$ctoEnum1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c15rr_info" {
     block_c15rr_info:
         const _c15rr;
         const 0;
         const 4294967326;
         const SVzM_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.381783389 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_go_closure" {
     GHC.Enum.$fEnumVecElem_go_closure:
         const GHC.Enum.$fEnumVecElem_go_info;
 },
 sat_sVl9_entry() //  [R1]
         { []
         }
     {offset
       c15rW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15rX; else goto c15rY;
       c15rX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15rY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVl7::I64 = I64[R1 + 16];
           if (_sVl7::I64 != 9) goto c15rU; else goto c15rV;
       c15rU: // global
           R2 = _sVl7::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecElem_go_entry(R2) args: 24, res: 0, upd: 24;
       c15rV: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVl9_info" {
     sat_sVl9_info:
         const sat_sVl9_entry;
         const 4294967296;
         const 17;
 },
 sat_sVl6_entry() //  [R1]
         { []
         }
     {offset
       c15s5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15s6; else goto c15s7;
       c15s6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15s7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVl6_info" {
     sat_sVl6_info:
         const sat_sVl6_entry;
         const 4294967296;
         const 17;
 },
 GHC.Enum.$fEnumVecElem_go_entry() //  [R2]
         { []
         }
     {offset
       c15s9: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c15sd; else goto c15sc;
       c15sd: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecElem_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15sc: // global
           I64[Hp - 64] = sat_sVl9_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVl6_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem_go_info" {
     GHC.Enum.$fEnumVecElem_go_info:
         const GHC.Enum.$fEnumVecElem_go_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.390214325 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_$cenumFrom_closure" {
     GHC.Enum.$fEnumVecElem_$cenumFrom_closure:
         const GHC.Enum.$fEnumVecElem_$cenumFrom_info;
 },
 GHC.Enum.$fEnumVecElem_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c15sE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c15sF; else goto c15sG;
       c15sF: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecElem_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15sG: // global
           I64[Sp - 8] = block_c15sA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u15sV; else goto c15sB;
       u15sV: // global
           call _c15sA(R1) args: 0, res: 0, upd: 0;
       c15sB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem_$cenumFrom_info" {
     GHC.Enum.$fEnumVecElem_$cenumFrom_info:
         const GHC.Enum.$fEnumVecElem_$cenumFrom_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c15sA() //  [R1]
         { []
         }
     {offset
       c15sA: // global
           _sVlc::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Le_W64(_sVlc::I64, 9)) goto c15sS; else goto c15sT;
       c15sS: // global
           R2 = _sVlc::I64;
           Sp = Sp + 8;
           call GHC.Enum.$fEnumVecElem_go_entry(R2) args: 8, res: 0, upd: 8;
       c15sT: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c15sA_info" {
     block_c15sA_info:
         const _c15sA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.414427955 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_$cenumFromThen_closure" {
     GHC.Enum.$fEnumVecElem_$cenumFromThen_closure:
         const GHC.Enum.$fEnumVecElem_$cenumFromThen_info;
 },
 sat_sVlv_entry() //  [R1]
         { []
         }
     {offset
       c15u0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15u1; else goto c15u2;
       c15u1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15u2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVlq_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVlv_info" {
     sat_sVlv_info:
         const sat_sVlv_entry;
         const 8589934593;
         const 15;
 },
 sat_sVlt_entry() //  [R1]
         { []
         }
     {offset
       c15u7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15u8; else goto c15u9;
       c15u8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15u9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVlt_info" {
     sat_sVlt_info:
         const sat_sVlt_entry;
         const 4294967296;
         const 17;
 },
 sat_sVlw_entry() //  [R1]
         { []
         }
     {offset
       c15uf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15ug; else goto c15uh;
       c15ug: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15uh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVlw_info" {
     sat_sVlw_info:
         const sat_sVlw_entry;
         const 4294967296;
         const 17;
 },
 go_dn_sVlq_entry() //  [R1, R2]
         { []
         }
     {offset
       c15ul: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c15up; else goto c15uo;
       c15up: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15uo: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c15uj; else goto c15uk;
       c15uj: // global
           _sVlo::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVlv_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVlo::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVlt_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15uk: // global
           I64[Hp - 80] = sat_sVlw_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c15ur::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c15ur::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVlq_info" {
     go_dn_sVlq_info:
         const go_dn_sVlq_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_sVlx_entry() //  [R1]
         { []
         }
     {offset
       c15us: // global
           _sVlx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c15ut; else goto c15uu;
       c15uu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c15uw; else goto c15uv;
       c15uw: // global
           HpAlloc = 24;
           goto c15ut;
       c15ut: // global
           R1 = _sVlx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15uv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVlx::P64;
           _sVlj::I64 = I64[_sVlx::P64 + 24];
           _sVlo::I64 = _sVlj::I64 - I64[_sVlx::P64 + 16];
           I64[Hp - 16] = go_dn_sVlq_info;
           I64[Hp - 8] = _sVlo::I64;
           I64[Hp] = 9 - _sVlo::I64;
           R2 = _sVlj::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVlq_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVlx_info" {
     sat_sVlx_info:
         const sat_sVlx_entry;
         const 8589934592;
         const 20;
 },
 sat_sVln_entry() //  [R1]
         { []
         }
     {offset
       c15uB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15uC; else goto c15uD;
       c15uC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15uD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVln_info" {
     sat_sVln_info:
         const sat_sVln_entry;
         const 4294967296;
         const 17;
 },
 sat_sVlz_entry() //  [R1]
         { []
         }
     {offset
       c15uM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15uN; else goto c15uO;
       c15uN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15uO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVlz_info" {
     sat_sVlz_info:
         const sat_sVlz_entry;
         const 4294967296;
         const 17;
 },
 sat_sVlJ_entry() //  [R1]
         { []
         }
     {offset
       c15vh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15vi; else goto c15vj;
       c15vi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15vj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVlE_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVlJ_info" {
     sat_sVlJ_info:
         const sat_sVlJ_entry;
         const 8589934593;
         const 15;
 },
 sat_sVlH_entry() //  [R1]
         { []
         }
     {offset
       c15vo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15vp; else goto c15vq;
       c15vp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15vq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVlH_info" {
     sat_sVlH_info:
         const sat_sVlH_entry;
         const 4294967296;
         const 17;
 },
 sat_sVlK_entry() //  [R1]
         { []
         }
     {offset
       c15vw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15vx; else goto c15vy;
       c15vx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15vy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVlK_info" {
     sat_sVlK_info:
         const sat_sVlK_entry;
         const 4294967296;
         const 17;
 },
 go_up_sVlE_entry() //  [R1, R2]
         { []
         }
     {offset
       c15vC: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c15vG; else goto c15vF;
       c15vG: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15vF: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c15vA; else goto c15vB;
       c15vA: // global
           _sVlC::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVlJ_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVlC::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVlH_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15vB: // global
           I64[Hp - 80] = sat_sVlK_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c15vI::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c15vI::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVlE_info" {
     go_up_sVlE_info:
         const go_up_sVlE_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_sVlL_entry() //  [R1]
         { []
         }
     {offset
       c15vJ: // global
           _sVlL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c15vK; else goto c15vL;
       c15vL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c15vN; else goto c15vM;
       c15vN: // global
           HpAlloc = 24;
           goto c15vK;
       c15vK: // global
           R1 = _sVlL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15vM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVlL::P64;
           _sVlj::I64 = I64[_sVlL::P64 + 24];
           _sVlC::I64 = _sVlj::I64 - I64[_sVlL::P64 + 16];
           I64[Hp - 16] = go_up_sVlE_info;
           I64[Hp - 8] = _sVlC::I64;
           I64[Hp] = 9 - _sVlC::I64;
           R2 = _sVlj::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sVlE_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVlL_info" {
     sat_sVlL_info:
         const sat_sVlL_entry;
         const 8589934592;
         const 20;
 },
 sat_sVlB_entry() //  [R1]
         { []
         }
     {offset
       c15vS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15vT; else goto c15vU;
       c15vT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15vU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVlB_info" {
     sat_sVlB_info:
         const sat_sVlB_entry;
         const 4294967296;
         const 17;
 },
 sat_sVlN_entry() //  [R1]
         { []
         }
     {offset
       c15w3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15w4; else goto c15w5;
       c15w4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15w5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVlN_info" {
     sat_sVlN_info:
         const sat_sVlN_entry;
         const 4294967296;
         const 17;
 },
 sat_sVlY_entry() //  [R1]
         { []
         }
     {offset
       c15wB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15wC; else goto c15wD;
       c15wC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15wD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVlT_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVlY_info" {
     sat_sVlY_info:
         const sat_sVlY_entry;
         const 8589934593;
         const 15;
 },
 sat_sVlW_entry() //  [R1]
         { []
         }
     {offset
       c15wI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15wJ; else goto c15wK;
       c15wJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15wK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVlW_info" {
     sat_sVlW_info:
         const sat_sVlW_entry;
         const 4294967296;
         const 17;
 },
 sat_sVlZ_entry() //  [R1]
         { []
         }
     {offset
       c15wQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15wR; else goto c15wS;
       c15wR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15wS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVlZ_info" {
     sat_sVlZ_info:
         const sat_sVlZ_entry;
         const 4294967296;
         const 17;
 },
 go_dn_sVlT_entry() //  [R1, R2]
         { []
         }
     {offset
       c15wW: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c15x0; else goto c15wZ;
       c15x0: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15wZ: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c15wU; else goto c15wV;
       c15wU: // global
           _sVlR::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVlY_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVlR::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVlW_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15wV: // global
           I64[Hp - 80] = sat_sVlZ_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c15x2::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c15x2::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVlT_info" {
     go_dn_sVlT_info:
         const go_dn_sVlT_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_sVm0_entry() //  [R1]
         { []
         }
     {offset
       c15x3: // global
           _sVm0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c15x4; else goto c15x5;
       c15x5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c15x7; else goto c15x6;
       c15x7: // global
           HpAlloc = 24;
           goto c15x4;
       c15x4: // global
           R1 = _sVm0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15x6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVm0::P64;
           _sVlj::I64 = I64[_sVm0::P64 + 24];
           _sVlR::I64 = _sVlj::I64 - I64[_sVm0::P64 + 16];
           I64[Hp - 16] = go_dn_sVlT_info;
           I64[Hp - 8] = _sVlR::I64;
           I64[Hp] = 0 - _sVlR::I64;
           R2 = _sVlj::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVlT_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVm0_info" {
     sat_sVm0_info:
         const sat_sVm0_entry;
         const 8589934592;
         const 20;
 },
 sat_sVlQ_entry() //  [R1]
         { []
         }
     {offset
       c15xc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15xd; else goto c15xe;
       c15xd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15xe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVlQ_info" {
     sat_sVlQ_info:
         const sat_sVlQ_entry;
         const 4294967296;
         const 17;
 },
 sat_sVm2_entry() //  [R1]
         { []
         }
     {offset
       c15xn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15xo; else goto c15xp;
       c15xo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15xp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVm2_info" {
     sat_sVm2_info:
         const sat_sVm2_entry;
         const 4294967296;
         const 17;
 },
 sat_sVmc_entry() //  [R1]
         { []
         }
     {offset
       c15xS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15xT; else goto c15xU;
       c15xT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15xU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVm7_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVmc_info" {
     sat_sVmc_info:
         const sat_sVmc_entry;
         const 8589934593;
         const 15;
 },
 sat_sVma_entry() //  [R1]
         { []
         }
     {offset
       c15xZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15y0; else goto c15y1;
       c15y0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15y1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVma_info" {
     sat_sVma_info:
         const sat_sVma_entry;
         const 4294967296;
         const 17;
 },
 sat_sVmd_entry() //  [R1]
         { []
         }
     {offset
       c15y7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15y8; else goto c15y9;
       c15y8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15y9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVmd_info" {
     sat_sVmd_info:
         const sat_sVmd_entry;
         const 4294967296;
         const 17;
 },
 go_up_sVm7_entry() //  [R1, R2]
         { []
         }
     {offset
       c15yd: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c15yh; else goto c15yg;
       c15yh: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15yg: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c15yb; else goto c15yc;
       c15yb: // global
           _sVm5::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVmc_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVm5::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVma_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15yc: // global
           I64[Hp - 80] = sat_sVmd_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c15yj::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c15yj::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVm7_info" {
     go_up_sVm7_info:
         const go_up_sVm7_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_sVme_entry() //  [R1]
         { []
         }
     {offset
       c15yk: // global
           _sVme::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c15yl; else goto c15ym;
       c15ym: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c15yo; else goto c15yn;
       c15yo: // global
           HpAlloc = 24;
           goto c15yl;
       c15yl: // global
           R1 = _sVme::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15yn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVme::P64;
           _sVlj::I64 = I64[_sVme::P64 + 24];
           _sVm5::I64 = _sVlj::I64 - I64[_sVme::P64 + 16];
           I64[Hp - 16] = go_up_sVm7_info;
           I64[Hp - 8] = _sVm5::I64;
           I64[Hp] = 0 - _sVm5::I64;
           R2 = _sVlj::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sVm7_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVme_info" {
     sat_sVme_info:
         const sat_sVme_entry;
         const 8589934592;
         const 20;
 },
 sat_sVm4_entry() //  [R1]
         { []
         }
     {offset
       c15yt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15yu; else goto c15yv;
       c15yu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15yv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVm4_info" {
     sat_sVm4_info:
         const sat_sVm4_entry;
         const 4294967296;
         const 17;
 },
 sat_sVmg_entry() //  [R1]
         { []
         }
     {offset
       c15yE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15yF; else goto c15yG;
       c15yF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15yG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVmg_info" {
     sat_sVmg_info:
         const sat_sVmg_entry;
         const 4294967296;
         const 17;
 },
 GHC.Enum.$fEnumVecElem_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c15yH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15yI; else goto c15yJ;
       c15yI: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecElem_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c15yJ: // global
           I64[Sp - 16] = block_c15td_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u15zG; else goto c15te;
       u15zG: // global
           call _c15td(R1) args: 0, res: 0, upd: 0;
       c15te: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem_$cenumFromThen_info" {
     GHC.Enum.$fEnumVecElem_$cenumFromThen_info:
         const GHC.Enum.$fEnumVecElem_$cenumFromThen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c15td() //  [R1]
         { []
         }
     {offset
       c15td: // global
           _sVlh::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c15tl_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sVlh::I64;
           if (R1 & 7 != 0) goto u15zD; else goto c15tm;
       u15zD: // global
           call _c15tl(R1) args: 0, res: 0, upd: 0;
       c15tm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c15td_info" {
     block_c15td_info:
         const _c15td;
         const 1;
         const 30;
 },
 _c15tl() //  [R1]
         { []
         }
     {offset
       c15tl: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c15tr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c15tl_info" {
     block_c15tl_info:
         const _c15tl;
         const 65;
         const 30;
 },
 _c15tr() //  []
         { []
         }
     {offset
       c15tr: // global
           Hp = Hp + 80;
           _sVlj::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c15yT; else goto c15yS;
       c15yT: // global
           HpAlloc = 80;
           I64[Sp] = block_c15tq_info;
           R1 = _sVlj::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c15yS: // global
           _sVlh::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_sVlh::I64,
                            _sVlj::I64)) goto c15ze; else goto c15zy;
       c15ze: // global
           if (%MO_S_Lt_W64(_sVlj::I64,
                            _sVlh::I64)) goto c15z3; else goto c15zc;
       c15z3: // global
           if (%MO_S_Le_W64(9, _sVlj::I64)) goto c15yW; else goto c15z1;
       c15yW: // global
           I64[Hp - 72] = sat_sVlx_info;
           I64[Hp - 56] = _sVlh::I64;
           I64[Hp - 48] = _sVlj::I64;
           I64[Hp - 40] = sat_sVln_info;
           I64[Hp - 24] = _sVlh::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15z1: // global
           if (%MO_S_Gt_W64(9, _sVlh::I64)) goto c15zv; else goto c15yZ;
       c15yZ: // global
           I64[Hp - 72] = sat_sVlz_info;
           I64[Hp - 56] = _sVlh::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c15yX::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c15yX::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15zc: // global
           if (%MO_S_Ge_W64(9, _sVlj::I64)) goto c15z6; else goto c15zb;
       c15z6: // global
           I64[Hp - 72] = sat_sVlL_info;
           I64[Hp - 56] = _sVlh::I64;
           I64[Hp - 48] = _sVlj::I64;
           I64[Hp - 40] = sat_sVlB_info;
           I64[Hp - 24] = _sVlh::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15zb: // global
           if (%MO_S_Lt_W64(9, _sVlh::I64)) goto c15zv; else goto c15z9;
       c15z9: // global
           I64[Hp - 72] = sat_sVlN_info;
           I64[Hp - 56] = _sVlh::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c15z7::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c15z7::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15zy: // global
           if (%MO_S_Lt_W64(_sVlj::I64,
                            _sVlh::I64)) goto c15zo; else goto c15zx;
       c15zo: // global
           if (%MO_S_Le_W64(0, _sVlj::I64)) goto c15zh; else goto c15zm;
       c15zh: // global
           I64[Hp - 72] = sat_sVm0_info;
           I64[Hp - 56] = _sVlh::I64;
           I64[Hp - 48] = _sVlj::I64;
           I64[Hp - 40] = sat_sVlQ_info;
           I64[Hp - 24] = _sVlh::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15zm: // global
           if (%MO_S_Gt_W64(0, _sVlh::I64)) goto c15zv; else goto c15zk;
       c15zk: // global
           I64[Hp - 72] = sat_sVm2_info;
           I64[Hp - 56] = _sVlh::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c15zi::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c15zi::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15zx: // global
           if (%MO_S_Ge_W64(0, _sVlj::I64)) goto c15zr; else goto c15zw;
       c15zr: // global
           I64[Hp - 72] = sat_sVme_info;
           I64[Hp - 56] = _sVlh::I64;
           I64[Hp - 48] = _sVlj::I64;
           I64[Hp - 40] = sat_sVm4_info;
           I64[Hp - 24] = _sVlh::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15zw: // global
           if (%MO_S_Lt_W64(0, _sVlh::I64)) goto c15zv; else goto c15zu;
       c15zv: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15zu: // global
           I64[Hp - 72] = sat_sVmg_info;
           I64[Hp - 56] = _sVlh::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c15zs::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c15zs::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c15tq() //  [R1]
         { []
         }
     {offset
       c15tq: // global
           I64[Sp] = R1;
           call _c15tr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c15tq_info" {
     block_c15tq_info:
         const _c15tq;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.485172757 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_$cenumFromTo_closure" {
     GHC.Enum.$fEnumVecElem_$cenumFromTo_closure:
         const GHC.Enum.$fEnumVecElem_$cenumFromTo_info;
         const 0;
 },
 sat_sVmv_entry() //  [R1]
         { []
         }
     {offset
       c15DW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15DX; else goto c15DY;
       c15DX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15DY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVmp::I64 = I64[R1 + 32];
           if (_sVmp::I64 == I64[R1 + 24]) goto c15DV; else goto c15DU;
       c15DV: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c15DU: // global
           R2 = _sVmp::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_sVmo_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVmv_info" {
     sat_sVmv_info:
         const sat_sVmv_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+600;
 },
 sat_sVms_entry() //  [R1]
         { []
         }
     {offset
       c15Ea: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15Eb; else goto c15Ej;
       c15Eb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15Ej: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVmp::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVmp::I64, 0)) goto c15Eh; else goto c15E9;
       c15E9: // global
           if (%MO_S_Gt_W64(_sVmp::I64, 9)) goto c15Eh; else goto c15Ei;
       c15Eh: // global
           R2 = _sVmp::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
       c15Ei: // global
           R1 = I64[(_sVmp::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVms_info" {
     sat_sVms_info:
         const sat_sVms_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+600;
 },
 go_sVmo_entry() //  [R1, R2]
         { []
         }
     {offset
       c15El: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c15Ep; else goto c15Eo;
       c15Ep: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15Eo: // global
           _sVmm::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVmv_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVmm::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVms_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_sVmo_info" {
     go_sVmo_info:
         const go_sVmo_entry;
         const 4294967296;
         const 4294967306;
         const 4294967300;
         const SVzM_srt+600;
 },
 GHC.Enum.$fEnumVecElem_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c15Eq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15Er; else goto c15Es;
       c15Er: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecElem_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c15Es: // global
           I64[Sp - 16] = block_c15Dp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u15EN; else goto c15Dq;
       u15EN: // global
           call _c15Dp(R1) args: 0, res: 0, upd: 0;
       c15Dq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem_$cenumFromTo_info" {
     GHC.Enum.$fEnumVecElem_$cenumFromTo_info:
         const GHC.Enum.$fEnumVecElem_$cenumFromTo_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SVzM_srt+600;
 },
 _c15Dp() //  [R1]
         { []
         }
     {offset
       c15Dp: // global
           _sVmk::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c15Dx_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sVmk::I64;
           if (R1 & 7 != 0) goto u15EK; else goto c15Dy;
       u15EK: // global
           call _c15Dx(R1) args: 0, res: 0, upd: 0;
       c15Dy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c15Dp_info" {
     block_c15Dp_info:
         const _c15Dp;
         const 1;
         const 4294967326;
         const SVzM_srt+600;
 },
 _c15Dx() //  [R1]
         { []
         }
     {offset
       c15Dx: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c15DD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c15Dx_info" {
     block_c15Dx_info:
         const _c15Dx;
         const 65;
         const 4294967326;
         const SVzM_srt+600;
 },
 _c15DD() //  []
         { []
         }
     {offset
       c15DD: // global
           Hp = Hp + 16;
           _sVmm::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c15EC; else goto c15EB;
       c15EC: // global
           HpAlloc = 16;
           I64[Sp] = block_c15DC_info;
           R1 = _sVmm::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c15EB: // global
           _sVmk::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_sVmk::I64,
                            _sVmm::I64)) goto c15EE; else goto c15EF;
       c15EE: // global
           I64[Hp - 8] = go_sVmo_info;
           I64[Hp] = _sVmm::I64;
           R2 = _sVmk::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call go_sVmo_entry(R2, R1) args: 8, res: 0, upd: 8;
       c15EF: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c15DC() //  [R1]
         { []
         }
     {offset
       c15DC: // global
           I64[Sp] = R1;
           call _c15DD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c15DC_info" {
     block_c15DC_info:
         const _c15DC;
         const 65;
         const 4294967326;
         const SVzM_srt+600;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.526806076 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_$cenumFromThenTo_closure" {
     GHC.Enum.$fEnumVecElem_$cenumFromThenTo_closure:
         const GHC.Enum.$fEnumVecElem_$cenumFromThenTo_info;
         const 0;
 },
 sat_sVmT_entry() //  [R1]
         { []
         }
     {offset
       c15Gr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15Gs; else goto c15Gt;
       c15Gs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15Gt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVmM_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVmT_info" {
     sat_sVmT_info:
         const sat_sVmT_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+600;
 },
 sat_sVmR_entry() //  [R1]
         { []
         }
     {offset
       c15GD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15GE; else goto c15GM;
       c15GE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15GM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVmN::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVmN::I64, 0)) goto c15GK; else goto c15GC;
       c15GC: // global
           if (%MO_S_Gt_W64(_sVmN::I64, 9)) goto c15GK; else goto c15GL;
       c15GK: // global
           R2 = _sVmN::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
       c15GL: // global
           R1 = I64[(_sVmN::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVmR_info" {
     sat_sVmR_info:
         const sat_sVmR_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+600;
 },
 sat_sVmW_entry() //  [R1]
         { []
         }
     {offset
       c15GX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15GY; else goto c15H6;
       c15GY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15H6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVmN::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVmN::I64, 0)) goto c15H4; else goto c15GW;
       c15GW: // global
           if (%MO_S_Gt_W64(_sVmN::I64, 9)) goto c15H4; else goto c15H5;
       c15H4: // global
           R2 = _sVmN::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
       c15H5: // global
           R1 = I64[(_sVmN::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVmW_info" {
     sat_sVmW_info:
         const sat_sVmW_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+600;
 },
 go_dn_sVmM_entry() //  [R1, R2]
         { []
         }
     {offset
       c15Ha: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c15He; else goto c15Hd;
       c15He: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15Hd: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c15H8; else goto c15H9;
       c15H8: // global
           _sVmK::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVmT_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVmK::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVmR_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15H9: // global
           I64[Hp - 80] = sat_sVmW_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c15Hg::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c15Hg::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVmM_info" {
     go_dn_sVmM_info:
         const go_dn_sVmM_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+600;
 },
 sat_sVmX_entry() //  [R1]
         { []
         }
     {offset
       c15Hh: // global
           _sVmX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c15Hi; else goto c15Hj;
       c15Hj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c15Hl; else goto c15Hk;
       c15Hl: // global
           HpAlloc = 24;
           goto c15Hi;
       c15Hi: // global
           R1 = _sVmX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15Hk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVmX::P64;
           _sVmC::I64 = I64[_sVmX::P64 + 24];
           _sVmK::I64 = _sVmC::I64 - I64[_sVmX::P64 + 16];
           _sVmL::I64 = I64[_sVmX::P64 + 32] - _sVmK::I64;
           I64[Hp - 16] = go_dn_sVmM_info;
           I64[Hp - 8] = _sVmK::I64;
           I64[Hp] = _sVmL::I64;
           R2 = _sVmC::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVmM_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVmX_info" {
     sat_sVmX_info:
         const sat_sVmX_entry;
         const 12884901888;
         const 4294967311;
         const SVzM_srt+600;
 },
 sat_sVmJ_entry() //  [R1]
         { []
         }
     {offset
       c15Hv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15Hw; else goto c15HE;
       c15Hw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15HE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVmA::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVmA::I64, 0)) goto c15HC; else goto c15Hu;
       c15Hu: // global
           if (%MO_S_Gt_W64(_sVmA::I64, 9)) goto c15HC; else goto c15HD;
       c15HC: // global
           R2 = _sVmA::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
       c15HD: // global
           R1 = I64[(_sVmA::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVmJ_info" {
     sat_sVmJ_info:
         const sat_sVmJ_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+600;
 },
 sat_sVn1_entry() //  [R1]
         { []
         }
     {offset
       c15HS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15HT; else goto c15I1;
       c15HT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15I1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVmA::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVmA::I64, 0)) goto c15HZ; else goto c15HR;
       c15HR: // global
           if (%MO_S_Gt_W64(_sVmA::I64, 9)) goto c15HZ; else goto c15I0;
       c15HZ: // global
           R2 = _sVmA::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
       c15I0: // global
           R1 = I64[(_sVmA::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVn1_info" {
     sat_sVn1_info:
         const sat_sVn1_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+600;
 },
 sat_sVnf_entry() //  [R1]
         { []
         }
     {offset
       c15Iu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15Iv; else goto c15Iw;
       c15Iv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15Iw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVn8_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVnf_info" {
     sat_sVnf_info:
         const sat_sVnf_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+600;
 },
 sat_sVnd_entry() //  [R1]
         { []
         }
     {offset
       c15IG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15IH; else goto c15IP;
       c15IH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15IP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVn9::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVn9::I64, 0)) goto c15IN; else goto c15IF;
       c15IF: // global
           if (%MO_S_Gt_W64(_sVn9::I64, 9)) goto c15IN; else goto c15IO;
       c15IN: // global
           R2 = _sVn9::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
       c15IO: // global
           R1 = I64[(_sVn9::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVnd_info" {
     sat_sVnd_info:
         const sat_sVnd_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+600;
 },
 sat_sVni_entry() //  [R1]
         { []
         }
     {offset
       c15J0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15J1; else goto c15J9;
       c15J1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15J9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVn9::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVn9::I64, 0)) goto c15J7; else goto c15IZ;
       c15IZ: // global
           if (%MO_S_Gt_W64(_sVn9::I64, 9)) goto c15J7; else goto c15J8;
       c15J7: // global
           R2 = _sVn9::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
       c15J8: // global
           R1 = I64[(_sVn9::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVni_info" {
     sat_sVni_info:
         const sat_sVni_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+600;
 },
 go_up_sVn8_entry() //  [R1, R2]
         { []
         }
     {offset
       c15Jd: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c15Jh; else goto c15Jg;
       c15Jh: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15Jg: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c15Jb; else goto c15Jc;
       c15Jb: // global
           _sVn6::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVnf_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVn6::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVnd_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15Jc: // global
           I64[Hp - 80] = sat_sVni_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c15Jj::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c15Jj::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVn8_info" {
     go_up_sVn8_info:
         const go_up_sVn8_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+600;
 },
 sat_sVnj_entry() //  [R1]
         { []
         }
     {offset
       c15Jk: // global
           _sVnj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c15Jl; else goto c15Jm;
       c15Jm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c15Jo; else goto c15Jn;
       c15Jo: // global
           HpAlloc = 24;
           goto c15Jl;
       c15Jl: // global
           R1 = _sVnj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15Jn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVnj::P64;
           _sVmC::I64 = I64[_sVnj::P64 + 24];
           _sVn6::I64 = _sVmC::I64 - I64[_sVnj::P64 + 16];
           _sVn7::I64 = I64[_sVnj::P64 + 32] - _sVn6::I64;
           I64[Hp - 16] = go_up_sVn8_info;
           I64[Hp - 8] = _sVn6::I64;
           I64[Hp] = _sVn7::I64;
           R2 = _sVmC::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sVn8_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVnj_info" {
     sat_sVnj_info:
         const sat_sVnj_entry;
         const 12884901888;
         const 4294967311;
         const SVzM_srt+600;
 },
 sat_sVn5_entry() //  [R1]
         { []
         }
     {offset
       c15Jy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15Jz; else goto c15JH;
       c15Jz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15JH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVmA::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVmA::I64, 0)) goto c15JF; else goto c15Jx;
       c15Jx: // global
           if (%MO_S_Gt_W64(_sVmA::I64, 9)) goto c15JF; else goto c15JG;
       c15JF: // global
           R2 = _sVmA::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
       c15JG: // global
           R1 = I64[(_sVmA::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVn5_info" {
     sat_sVn5_info:
         const sat_sVn5_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+600;
 },
 sat_sVnn_entry() //  [R1]
         { []
         }
     {offset
       c15JV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15JW; else goto c15K4;
       c15JW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15K4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVmA::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVmA::I64, 0)) goto c15K2; else goto c15JU;
       c15JU: // global
           if (%MO_S_Gt_W64(_sVmA::I64, 9)) goto c15K2; else goto c15K3;
       c15K2: // global
           R2 = _sVmA::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
       c15K3: // global
           R1 = I64[(_sVmA::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVnn_info" {
     sat_sVnn_info:
         const sat_sVnn_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+600;
 },
 GHC.Enum.$fEnumVecElem_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c15K5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c15K6; else goto c15K7;
       c15K6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecElem_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c15K7: // global
           I64[Sp - 24] = block_c15Fz_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u15KO; else goto c15FA;
       u15KO: // global
           call _c15Fz(R1) args: 0, res: 0, upd: 0;
       c15FA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem_$cenumFromThenTo_info" {
     GHC.Enum.$fEnumVecElem_$cenumFromThenTo_info:
         const GHC.Enum.$fEnumVecElem_$cenumFromThenTo_entry;
         const 0;
         const 73014444046;
         const 12884901911;
         const SVzM_srt+600;
 },
 _c15Fz() //  [R1]
         { []
         }
     {offset
       c15Fz: // global
           _sVmA::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c15FH_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sVmA::I64;
           if (R1 & 7 != 0) goto u15KK; else goto c15FI;
       u15KK: // global
           call _c15FH(R1) args: 0, res: 0, upd: 0;
       c15FI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c15Fz_info" {
     block_c15Fz_info:
         const _c15Fz;
         const 2;
         const 4294967326;
         const SVzM_srt+600;
 },
 _c15FH() //  [R1]
         { []
         }
     {offset
       c15FH: // global
           _sVmC::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c15FP_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sVmC::I64;
           if (R1 & 7 != 0) goto u15KL; else goto c15FQ;
       u15KL: // global
           call _c15FP(R1) args: 0, res: 0, upd: 0;
       c15FQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c15FH_info" {
     block_c15FH_info:
         const _c15FH;
         const 66;
         const 4294967326;
         const SVzM_srt+600;
 },
 _c15FP() //  [R1]
         { []
         }
     {offset
       c15FP: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c15FV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c15FP_info" {
     block_c15FP_info:
         const _c15FP;
         const 194;
         const 4294967326;
         const SVzM_srt+600;
 },
 _c15FV() //  []
         { []
         }
     {offset
       c15FV: // global
           Hp = Hp + 88;
           _sVmE::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c15Kl; else goto c15Kk;
       c15Kl: // global
           HpAlloc = 88;
           I64[Sp] = block_c15FU_info;
           R1 = _sVmE::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c15Kk: // global
           _sVmA::I64 = I64[Sp + 8];
           _sVmC::I64 = I64[Sp + 16];
           if (%MO_S_Lt_W64(_sVmC::I64,
                            _sVmA::I64)) goto c15Kv; else goto c15KE;
       c15Kv: // global
           if (%MO_S_Le_W64(_sVmE::I64,
                            _sVmC::I64)) goto c15Ko; else goto c15Kt;
       c15Ko: // global
           I64[Hp - 80] = sat_sVmX_info;
           I64[Hp - 64] = _sVmA::I64;
           I64[Hp - 56] = _sVmC::I64;
           I64[Hp - 48] = _sVmE::I64;
           I64[Hp - 40] = sat_sVmJ_info;
           I64[Hp - 24] = _sVmA::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15Kt: // global
           if (%MO_S_Gt_W64(_sVmE::I64,
                            _sVmA::I64)) goto c15KC; else goto c15Kr;
       c15Kr: // global
           I64[Hp - 80] = sat_sVn1_info;
           I64[Hp - 64] = _sVmA::I64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c15Kp::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c15Kp::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15KE: // global
           if (%MO_S_Ge_W64(_sVmE::I64,
                            _sVmC::I64)) goto c15Ky; else goto c15KD;
       c15Ky: // global
           I64[Hp - 80] = sat_sVnj_info;
           I64[Hp - 64] = _sVmA::I64;
           I64[Hp - 56] = _sVmC::I64;
           I64[Hp - 48] = _sVmE::I64;
           I64[Hp - 40] = sat_sVn5_info;
           I64[Hp - 24] = _sVmA::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15KD: // global
           if (%MO_S_Lt_W64(_sVmE::I64,
                            _sVmA::I64)) goto c15KC; else goto c15KB;
       c15KC: // global
           Hp = Hp - 88;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15KB: // global
           I64[Hp - 80] = sat_sVnn_info;
           I64[Hp - 64] = _sVmA::I64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c15Kz::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c15Kz::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c15FU() //  [R1]
         { []
         }
     {offset
       c15FU: // global
           I64[Sp] = R1;
           call _c15FV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c15FU_info" {
     block_c15FU_info:
         const _c15FU;
         const 194;
         const 4294967326;
         const SVzM_srt+600;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.576201874 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_closure" {
     GHC.Enum.$fEnumVecElem_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumVecElem_$csucc_closure+1;
         const GHC.Enum.$fEnumVecElem_$cpred_closure+1;
         const GHC.Enum.$fEnumVecElem_$ctoEnum_closure+1;
         const GHC.Enum.$fEnumVecElem_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumVecElem_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumVecElem_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumVecElem_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumVecElem_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.579100683 UTC

[section ""data" . lvl51_rURv_closure" {
     lvl51_rURv_closure:
         const GHC.Types.I#_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.580818433 UTC

[section ""data" . lvl52_rURw_closure" {
     lvl52_rURw_closure:
         const GHC.Types.I#_con_info;
         const 4;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.583197995 UTC

[section ""data" . lvl53_rURx_closure" {
     lvl53_rURx_closure:
         const GHC.Types.I#_con_info;
         const 5;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.586488141 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_$cfromEnum_closure" {
     GHC.Enum.$fEnumVecCount_$cfromEnum_closure:
         const GHC.Enum.$fEnumVecCount_$cfromEnum_info;
 },
 GHC.Enum.$fEnumVecCount_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c15Nf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c15Ng; else goto c15Nh;
       c15Ng: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15Nh: // global
           I64[Sp - 8] = block_c15N4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u15NA; else goto c15N5;
       u15NA: // global
           call _c15N4(R1) args: 0, res: 0, upd: 0;
       c15N5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_$cfromEnum_info" {
     GHC.Enum.$fEnumVecCount_$cfromEnum_info:
         const GHC.Enum.$fEnumVecCount_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c15N4() //  [R1]
         { []
         }
     {offset
       c15N4: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c15N8;
               case 2 : goto c15N9;
               case 3 : goto c15Na;
               case 4 : goto c15Nb;
               case 5 : goto c15Nc;
               case 6 : goto c15Nd;
           }
       c15Nd: // global
           R1 = lvl53_rURx_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15Nc: // global
           R1 = lvl52_rURw_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15Nb: // global
           R1 = lvl51_rURv_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15Na: // global
           R1 = GHC.Enum.$fEnumOrdering4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15N9: // global
           R1 = GHC.Enum.$fEnumBool4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15N8: // global
           R1 = GHC.Enum.$fEnum()2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c15N4_info" {
     block_c15N4_info:
         const _c15N4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.59408796 UTC

[section ""data" . lvl54_rURy_closure" {
     lvl54_rURy_closure:
         const GHC.Types.I#_con_info;
         const 885;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.595977152 UTC

[section ""data" . lvl55_rURz_closure" {
     lvl55_rURz_closure:
         const GHC.Types.I#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.597959673 UTC

[section ""data" . lvl56_rURA_closure" {
     lvl56_rURA_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl35_rURf_closure;
         const lvl36_rURg_closure;
         const lvl38_rURi_closure;
         const lvl54_rURy_closure+1;
         const GHC.Enum.$fEnumBool4_closure+1;
         const lvl54_rURy_closure+1;
         const lvl55_rURz_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.600461229 UTC

[section ""data" . lvl57_rURB_closure" {
     lvl57_rURB_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl34_rURe_closure;
         const lvl56_rURA_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.602387065 UTC

[section ""cstring" . lvl58_rURC_bytes" {
     lvl58_rURC_bytes:
         I8[] [112,114,101,100,123,86,101,99,67,111,117,110,116,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,102,105,114,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.605109789 UTC

[section ""data" . GHC.Enum.$fEnumVecCount7_closure" {
     GHC.Enum.$fEnumVecCount7_closure:
         const GHC.Enum.$fEnumVecCount7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecCount7_entry() //  [R1]
         { []
         }
     {offset
       c15O6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c15O7; else goto c15O8;
       c15O7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15O8: // global
           (_c15O1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15O1::I64 == 0) goto c15O3; else goto c15O2;
       c15O3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15O2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15O1::I64;
           I64[Sp - 24] = block_c15O4_info;
           R2 = lvl58_rURC_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount7_info" {
     GHC.Enum.$fEnumVecCount7_info:
         const GHC.Enum.$fEnumVecCount7_entry;
         const 0;
         const 70373039144981;
         const SVzM_srt+528;
 },
 _c15O4() //  [R1]
         { []
         }
     {offset
       c15O4: // global
           R3 = R1;
           R2 = lvl57_rURB_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c15O4_info" {
     block_c15O4_info:
         const _c15O4;
         const 0;
         const 70373039144990;
         const SVzM_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.61185799 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_$cpred_closure" {
     GHC.Enum.$fEnumVecCount_$cpred_closure:
         const GHC.Enum.$fEnumVecCount_$cpred_info;
         const 0;
 },
 GHC.Enum.$fEnumVecCount_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c15OB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c15OC; else goto c15OD;
       c15OC: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15OD: // global
           I64[Sp - 8] = block_c15Oq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u15OW; else goto c15Or;
       u15OW: // global
           call _c15Oq(R1) args: 0, res: 0, upd: 0;
       c15Or: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_$cpred_info" {
     GHC.Enum.$fEnumVecCount_$cpred_info:
         const GHC.Enum.$fEnumVecCount_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+648;
 },
 _c15Oq() //  [R1]
         { []
         }
     {offset
       c15Oq: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c15Ou;
               case 2 : goto c15Ov;
               case 3 : goto c15Ow;
               case 4 : goto c15Ox;
               case 5 : goto c15Oy;
               case 6 : goto c15Oz;
           }
       c15Oz: // global
           R1 = GHC.Types.Vec32_closure+5;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15Oy: // global
           R1 = GHC.Types.Vec16_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15Ox: // global
           R1 = GHC.Types.Vec8_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15Ow: // global
           R1 = GHC.Types.Vec4_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15Ov: // global
           R1 = GHC.Types.Vec2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15Ou: // global
           R1 = GHC.Enum.$fEnumVecCount7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c15Oq_info" {
     block_c15Oq_info:
         const _c15Oq;
         const 0;
         const 4294967326;
         const SVzM_srt+656;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.618561921 UTC

[section ""cstring" . lvl59_rURD_bytes" {
     lvl59_rURD_bytes:
         I8[] [115,117,99,99,123,86,101,99,67,111,117,110,116,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,108,97,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.623178026 UTC

[section ""data" . GHC.Enum.$fEnumVecCount8_closure" {
     GHC.Enum.$fEnumVecCount8_closure:
         const GHC.Enum.$fEnumVecCount8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecCount8_entry() //  [R1]
         { []
         }
     {offset
       c15Po: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c15Pp; else goto c15Pq;
       c15Pp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15Pq: // global
           (_c15Pj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15Pj::I64 == 0) goto c15Pl; else goto c15Pk;
       c15Pl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15Pk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15Pj::I64;
           I64[Sp - 24] = block_c15Pm_info;
           R2 = lvl59_rURD_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount8_info" {
     GHC.Enum.$fEnumVecCount8_info:
         const GHC.Enum.$fEnumVecCount8_entry;
         const 0;
         const 70373039144981;
         const SVzM_srt+528;
 },
 _c15Pm() //  [R1]
         { []
         }
     {offset
       c15Pm: // global
           R3 = R1;
           R2 = lvl57_rURB_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c15Pm_info" {
     block_c15Pm_info:
         const _c15Pm;
         const 0;
         const 70373039144990;
         const SVzM_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.629921086 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_$csucc_closure" {
     GHC.Enum.$fEnumVecCount_$csucc_closure:
         const GHC.Enum.$fEnumVecCount_$csucc_info;
         const 0;
 },
 GHC.Enum.$fEnumVecCount_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c15PT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c15PU; else goto c15PV;
       c15PU: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15PV: // global
           I64[Sp - 8] = block_c15PI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u15Qe; else goto c15PJ;
       u15Qe: // global
           call _c15PI(R1) args: 0, res: 0, upd: 0;
       c15PJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_$csucc_info" {
     GHC.Enum.$fEnumVecCount_$csucc_info:
         const GHC.Enum.$fEnumVecCount_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+664;
 },
 _c15PI() //  [R1]
         { []
         }
     {offset
       c15PI: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c15PM;
               case 2 : goto c15PN;
               case 3 : goto c15PO;
               case 4 : goto c15PP;
               case 5 : goto c15PQ;
               case 6 : goto c15PR;
           }
       c15PR: // global
           R1 = GHC.Enum.$fEnumVecCount8_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c15PQ: // global
           R1 = GHC.Types.Vec64_closure+6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15PP: // global
           R1 = GHC.Types.Vec32_closure+5;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15PO: // global
           R1 = GHC.Types.Vec16_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15PN: // global
           R1 = GHC.Types.Vec8_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15PM: // global
           R1 = GHC.Types.Vec4_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c15PI_info" {
     block_c15PI_info:
         const _c15PI;
         const 0;
         const 4294967326;
         const SVzM_srt+672;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.636686003 UTC

[section ""data" . lvl60_rURE_closure" {
     lvl60_rURE_closure:
         const lvl60_rURE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl60_rURE_entry() //  [R1]
         { []
         }
     {offset
       c15QG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c15QH; else goto c15QI;
       c15QH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15QI: // global
           (_c15QA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15QA::I64 == 0) goto c15QC; else goto c15QB;
       c15QC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15QB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15QA::I64;
           I64[Sp - 24] = block_c15QD_info;
           R4 = lvl47_rURr_closure;
           R3 = 5;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl60_rURE_info" {
     lvl60_rURE_info:
         const lvl60_rURE_entry;
         const 0;
         const 4294967317;
         const SVzM_srt+576;
 },
 _c15QD() //  [R1, R2]
         { []
         }
     {offset
       c15QD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c15QL; else goto c15QK;
       c15QL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c15QK: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c15QD_info" {
     block_c15QD_info:
         const _c15QD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.643192566 UTC

[section ""data" . lvl61_rURF_closure" {
     lvl61_rURF_closure:
         const lvl61_rURF_info;
         const 0;
         const 0;
         const 0;
 },
 lvl61_rURF_entry() //  [R1]
         { []
         }
     {offset
       c15R3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15R4; else goto c15R5;
       c15R4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15R5: // global
           (_c15R0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15R0::I64 == 0) goto c15R2; else goto c15R1;
       c15R2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15R1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15R0::I64;
           R3 = lvl60_rURE_closure;
           R2 = lvl45_rURp_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl61_rURF_info" {
     lvl61_rURF_info:
         const lvl61_rURF_entry;
         const 0;
         const 4294967317;
         const SVzM_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.647495808 UTC

[section ""cstring" . lvl62_rURG_bytes" {
     lvl62_rURG_bytes:
         I8[] [116,111,69,110,117,109,123,86,101,99,67,111,117,110,116,125,58,32,116,97,103,32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.650900896 UTC

[section ""data" . GHC.Enum.$wlvl_closure" {
     GHC.Enum.$wlvl_closure:
         const GHC.Enum.$wlvl_info;
         const 0;
 },
 sat_sVnD_entry() //  [R1]
         { []
         }
     {offset
       c15Rp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c15Rq; else goto c15Rr;
       c15Rq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15Rr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c15Rm_info;
           R4 = lvl61_rURF_closure;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVnD_info" {
     sat_sVnD_info:
         const sat_sVnD_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+688;
 },
 _c15Rm() //  [R1, R2]
         { []
         }
     {offset
       c15Rm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c15Ru; else goto c15Rt;
       c15Ru: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c15Rt: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c15Rm_info" {
     block_c15Rm_info:
         const _c15Rm;
         const 0;
         const 30;
 },
 GHC.Enum.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       c15Rx: // global
           _sVnz::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c15Ry; else goto c15Rz;
       c15Rz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c15RB; else goto c15RA;
       c15RB: // global
           HpAlloc = 24;
           goto c15Ry;
       c15Ry: // global
           R2 = _sVnz::I64;
           R1 = GHC.Enum.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15RA: // global
           I64[Hp - 16] = sat_sVnD_info;
           I64[Hp] = _sVnz::I64;
           I64[Sp - 8] = block_c15Rv_info;
           R3 = Hp - 16;
           R2 = lvl62_rURG_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$wlvl_info" {
     GHC.Enum.$wlvl_info:
         const GHC.Enum.$wlvl_entry;
         const 0;
         const 13581171921256462;
         const 4294967300;
         const SVzM_srt+528;
 },
 _c15Rv() //  [R1]
         { []
         }
     {offset
       c15Rv: // global
           R3 = R1;
           R2 = lvl57_rURB_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c15Rv_info" {
     block_c15Rv_info:
         const _c15Rv;
         const 0;
         const 70373039144990;
         const SVzM_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.661479416 UTC

[section ""data" . GHC.Enum.$w$ctoEnum_closure" {
     GHC.Enum.$w$ctoEnum_closure:
         const GHC.Enum.$w$ctoEnum_info;
         const 0;
 },
 GHC.Enum.$w$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c15S4: // global
           _sVnF::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto c15Sc; else goto c15S3;
       c15S3: // global
           if (%MO_S_Gt_W64(_sVnF::I64, 5)) goto c15Sc; else goto c15Sd;
       c15Sc: // global
           R2 = _sVnF::I64;
           call GHC.Enum.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c15Sd: // global
           R1 = I64[(_sVnF::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$w$ctoEnum_info" {
     GHC.Enum.$w$ctoEnum_info:
         const GHC.Enum.$w$ctoEnum_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const SVzM_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.66629052 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_$ctoEnum_closure" {
     GHC.Enum.$fEnumVecCount_$ctoEnum_closure:
         const GHC.Enum.$fEnumVecCount_$ctoEnum_info;
         const 0;
 },
 GHC.Enum.$fEnumVecCount_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c15Sr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c15Ss; else goto c15St;
       c15Ss: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15St: // global
           I64[Sp - 8] = block_c15So_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u15Sx; else goto c15Sp;
       u15Sx: // global
           call _c15So(R1) args: 0, res: 0, upd: 0;
       c15Sp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_$ctoEnum_info" {
     GHC.Enum.$fEnumVecCount_$ctoEnum_info:
         const GHC.Enum.$fEnumVecCount_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+704;
 },
 _c15So() //  [R1]
         { []
         }
     {offset
       c15So: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.$w$ctoEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c15So_info" {
     block_c15So_info:
         const _c15So;
         const 0;
         const 4294967326;
         const SVzM_srt+712;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.672781088 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_go6_closure" {
     GHC.Enum.$fEnumVecCount_go6_closure:
         const GHC.Enum.$fEnumVecCount_go6_info;
 },
 sat_sVnP_entry() //  [R1]
         { []
         }
     {offset
       c15ST: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15SU; else goto c15SV;
       c15SU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15SV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVnN::I64 = I64[R1 + 16];
           if (_sVnN::I64 != 5) goto c15SR; else goto c15SS;
       c15SR: // global
           R2 = _sVnN::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go6_entry(R2) args: 24, res: 0, upd: 24;
       c15SS: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVnP_info" {
     sat_sVnP_info:
         const sat_sVnP_entry;
         const 4294967296;
         const 17;
 },
 sat_sVnM_entry() //  [R1]
         { []
         }
     {offset
       c15T2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15T3; else goto c15T4;
       c15T3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15T4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVnM_info" {
     sat_sVnM_info:
         const sat_sVnM_entry;
         const 4294967296;
         const 17;
 },
 GHC.Enum.$fEnumVecCount_go6_entry() //  [R2]
         { []
         }
     {offset
       c15T6: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c15Ta; else goto c15T9;
       c15Ta: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_go6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15T9: // global
           I64[Hp - 64] = sat_sVnP_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVnM_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_go6_info" {
     GHC.Enum.$fEnumVecCount_go6_info:
         const GHC.Enum.$fEnumVecCount_go6_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.680528328 UTC

[section ""data" . GHC.Enum.$fEnumVecCount6_closure" {
     GHC.Enum.$fEnumVecCount6_closure:
         const GHC.Enum.$fEnumVecCount6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecCount6_entry() //  [R1]
         { []
         }
     {offset
       c15Tz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15TA; else goto c15TB;
       c15TA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15TB: // global
           (_c15Tw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15Tw::I64 == 0) goto c15Ty; else goto c15Tx;
       c15Ty: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15Tx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15Tw::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go6_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount6_info" {
     GHC.Enum.$fEnumVecCount6_info:
         const GHC.Enum.$fEnumVecCount6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.685122876 UTC

[section ""data" . GHC.Enum.$fEnumVecCount5_closure" {
     GHC.Enum.$fEnumVecCount5_closure:
         const GHC.Enum.$fEnumVecCount5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecCount5_entry() //  [R1]
         { []
         }
     {offset
       c15TP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15TQ; else goto c15TR;
       c15TQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15TR: // global
           (_c15TM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15TM::I64 == 0) goto c15TO; else goto c15TN;
       c15TO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15TN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15TM::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go6_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount5_info" {
     GHC.Enum.$fEnumVecCount5_info:
         const GHC.Enum.$fEnumVecCount5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.690173044 UTC

[section ""data" . GHC.Enum.$fEnumVecCount4_closure" {
     GHC.Enum.$fEnumVecCount4_closure:
         const GHC.Enum.$fEnumVecCount4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecCount4_entry() //  [R1]
         { []
         }
     {offset
       c15U5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15U6; else goto c15U7;
       c15U6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15U7: // global
           (_c15U2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15U2::I64 == 0) goto c15U4; else goto c15U3;
       c15U4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15U3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15U2::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go6_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount4_info" {
     GHC.Enum.$fEnumVecCount4_info:
         const GHC.Enum.$fEnumVecCount4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.694715592 UTC

[section ""data" . GHC.Enum.$fEnumVecCount3_closure" {
     GHC.Enum.$fEnumVecCount3_closure:
         const GHC.Enum.$fEnumVecCount3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecCount3_entry() //  [R1]
         { []
         }
     {offset
       c15Ul: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15Um; else goto c15Un;
       c15Um: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15Un: // global
           (_c15Ui::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15Ui::I64 == 0) goto c15Uk; else goto c15Uj;
       c15Uk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15Uj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15Ui::I64;
           R2 = 3;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go6_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount3_info" {
     GHC.Enum.$fEnumVecCount3_info:
         const GHC.Enum.$fEnumVecCount3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.699469955 UTC

[section ""data" . GHC.Enum.$fEnumVecCount2_closure" {
     GHC.Enum.$fEnumVecCount2_closure:
         const GHC.Enum.$fEnumVecCount2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecCount2_entry() //  [R1]
         { []
         }
     {offset
       c15UB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15UC; else goto c15UD;
       c15UC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15UD: // global
           (_c15Uy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15Uy::I64 == 0) goto c15UA; else goto c15Uz;
       c15UA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15Uz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15Uy::I64;
           R2 = 4;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go6_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount2_info" {
     GHC.Enum.$fEnumVecCount2_info:
         const GHC.Enum.$fEnumVecCount2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.705942373 UTC

[section ""data" . GHC.Enum.$fEnumVecCount1_closure" {
     GHC.Enum.$fEnumVecCount1_closure:
         const GHC.Enum.$fEnumVecCount1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecCount1_entry() //  [R1]
         { []
         }
     {offset
       c15UR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15US; else goto c15UT;
       c15US: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15UT: // global
           (_c15UO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c15UO::I64 == 0) goto c15UQ; else goto c15UP;
       c15UQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c15UP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c15UO::I64;
           R2 = 5;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go6_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount1_info" {
     GHC.Enum.$fEnumVecCount1_info:
         const GHC.Enum.$fEnumVecCount1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.712094359 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_$cenumFrom_closure" {
     GHC.Enum.$fEnumVecCount_$cenumFrom_closure:
         const GHC.Enum.$fEnumVecCount_$cenumFrom_info;
         const 0;
 },
 GHC.Enum.$fEnumVecCount_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c15Vg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c15Vh; else goto c15Vi;
       c15Vh: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15Vi: // global
           I64[Sp - 8] = block_c15V5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u15VB; else goto c15V6;
       u15VB: // global
           call _c15V5(R1) args: 0, res: 0, upd: 0;
       c15V6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_$cenumFrom_info" {
     GHC.Enum.$fEnumVecCount_$cenumFrom_info:
         const GHC.Enum.$fEnumVecCount_$cenumFrom_entry;
         const 0;
         const 545460846606;
         const 4294967301;
         const SVzM_srt+720;
 },
 _c15V5() //  [R1]
         { []
         }
     {offset
       c15V5: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c15V9;
               case 2 : goto c15Va;
               case 3 : goto c15Vb;
               case 4 : goto c15Vc;
               case 5 : goto c15Vd;
               case 6 : goto c15Ve;
           }
       c15Ve: // global
           R1 = GHC.Enum.$fEnumVecCount1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c15Vd: // global
           R1 = GHC.Enum.$fEnumVecCount2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c15Vc: // global
           R1 = GHC.Enum.$fEnumVecCount3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c15Vb: // global
           R1 = GHC.Enum.$fEnumVecCount4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c15Va: // global
           R1 = GHC.Enum.$fEnumVecCount5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c15V9: // global
           R1 = GHC.Enum.$fEnumVecCount6_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c15V5_info" {
     block_c15V5_info:
         const _c15V5;
         const 0;
         const 270582939678;
         const SVzM_srt+728;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.748112045 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_$cenumFromThen_closure" {
     GHC.Enum.$fEnumVecCount_$cenumFromThen_closure:
         const GHC.Enum.$fEnumVecCount_$cenumFromThen_info;
 },
 sat_sVo9_entry() //  [R1]
         { []
         }
     {offset
       c15WF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15WG; else goto c15WH;
       c15WG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15WH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVo4_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVo9_info" {
     sat_sVo9_info:
         const sat_sVo9_entry;
         const 8589934593;
         const 15;
 },
 sat_sVo7_entry() //  [R1]
         { []
         }
     {offset
       c15WM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15WN; else goto c15WO;
       c15WN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15WO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVo7_info" {
     sat_sVo7_info:
         const sat_sVo7_entry;
         const 4294967296;
         const 17;
 },
 sat_sVoa_entry() //  [R1]
         { []
         }
     {offset
       c15WU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15WV; else goto c15WW;
       c15WV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15WW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVoa_info" {
     sat_sVoa_info:
         const sat_sVoa_entry;
         const 4294967296;
         const 17;
 },
 go_dn_sVo4_entry() //  [R1, R2]
         { []
         }
     {offset
       c15X0: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c15X4; else goto c15X3;
       c15X4: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15X3: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c15WY; else goto c15WZ;
       c15WY: // global
           _sVo2::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVo9_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVo2::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVo7_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15WZ: // global
           I64[Hp - 80] = sat_sVoa_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c15X6::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c15X6::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVo4_info" {
     go_dn_sVo4_info:
         const go_dn_sVo4_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_sVob_entry() //  [R1]
         { []
         }
     {offset
       c15X7: // global
           _sVob::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c15X8; else goto c15X9;
       c15X9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c15Xb; else goto c15Xa;
       c15Xb: // global
           HpAlloc = 24;
           goto c15X8;
       c15X8: // global
           R1 = _sVob::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15Xa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVob::P64;
           _sVnX::I64 = I64[_sVob::P64 + 24];
           _sVo2::I64 = _sVnX::I64 - I64[_sVob::P64 + 16];
           I64[Hp - 16] = go_dn_sVo4_info;
           I64[Hp - 8] = _sVo2::I64;
           I64[Hp] = 5 - _sVo2::I64;
           R2 = _sVnX::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVo4_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVob_info" {
     sat_sVob_info:
         const sat_sVob_entry;
         const 8589934592;
         const 20;
 },
 sat_sVo1_entry() //  [R1]
         { []
         }
     {offset
       c15Xg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15Xh; else goto c15Xi;
       c15Xh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15Xi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVo1_info" {
     sat_sVo1_info:
         const sat_sVo1_entry;
         const 4294967296;
         const 17;
 },
 sat_sVod_entry() //  [R1]
         { []
         }
     {offset
       c15Xr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15Xs; else goto c15Xt;
       c15Xs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15Xt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVod_info" {
     sat_sVod_info:
         const sat_sVod_entry;
         const 4294967296;
         const 17;
 },
 sat_sVon_entry() //  [R1]
         { []
         }
     {offset
       c15XW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15XX; else goto c15XY;
       c15XX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15XY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVoi_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVon_info" {
     sat_sVon_info:
         const sat_sVon_entry;
         const 8589934593;
         const 15;
 },
 sat_sVol_entry() //  [R1]
         { []
         }
     {offset
       c15Y3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15Y4; else goto c15Y5;
       c15Y4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15Y5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVol_info" {
     sat_sVol_info:
         const sat_sVol_entry;
         const 4294967296;
         const 17;
 },
 sat_sVoo_entry() //  [R1]
         { []
         }
     {offset
       c15Yb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15Yc; else goto c15Yd;
       c15Yc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15Yd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVoo_info" {
     sat_sVoo_info:
         const sat_sVoo_entry;
         const 4294967296;
         const 17;
 },
 go_up_sVoi_entry() //  [R1, R2]
         { []
         }
     {offset
       c15Yh: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c15Yl; else goto c15Yk;
       c15Yl: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15Yk: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c15Yf; else goto c15Yg;
       c15Yf: // global
           _sVog::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVon_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVog::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVol_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15Yg: // global
           I64[Hp - 80] = sat_sVoo_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c15Yn::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c15Yn::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVoi_info" {
     go_up_sVoi_info:
         const go_up_sVoi_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_sVop_entry() //  [R1]
         { []
         }
     {offset
       c15Yo: // global
           _sVop::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c15Yp; else goto c15Yq;
       c15Yq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c15Ys; else goto c15Yr;
       c15Ys: // global
           HpAlloc = 24;
           goto c15Yp;
       c15Yp: // global
           R1 = _sVop::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15Yr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVop::P64;
           _sVnX::I64 = I64[_sVop::P64 + 24];
           _sVog::I64 = _sVnX::I64 - I64[_sVop::P64 + 16];
           I64[Hp - 16] = go_up_sVoi_info;
           I64[Hp - 8] = _sVog::I64;
           I64[Hp] = 5 - _sVog::I64;
           R2 = _sVnX::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sVoi_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVop_info" {
     sat_sVop_info:
         const sat_sVop_entry;
         const 8589934592;
         const 20;
 },
 sat_sVof_entry() //  [R1]
         { []
         }
     {offset
       c15Yx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15Yy; else goto c15Yz;
       c15Yy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15Yz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVof_info" {
     sat_sVof_info:
         const sat_sVof_entry;
         const 4294967296;
         const 17;
 },
 sat_sVor_entry() //  [R1]
         { []
         }
     {offset
       c15YI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15YJ; else goto c15YK;
       c15YJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15YK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVor_info" {
     sat_sVor_info:
         const sat_sVor_entry;
         const 4294967296;
         const 17;
 },
 sat_sVoC_entry() //  [R1]
         { []
         }
     {offset
       c15Zg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15Zh; else goto c15Zi;
       c15Zh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15Zi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVox_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVoC_info" {
     sat_sVoC_info:
         const sat_sVoC_entry;
         const 8589934593;
         const 15;
 },
 sat_sVoA_entry() //  [R1]
         { []
         }
     {offset
       c15Zn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15Zo; else goto c15Zp;
       c15Zo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15Zp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVoA_info" {
     sat_sVoA_info:
         const sat_sVoA_entry;
         const 4294967296;
         const 17;
 },
 sat_sVoD_entry() //  [R1]
         { []
         }
     {offset
       c15Zv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15Zw; else goto c15Zx;
       c15Zw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15Zx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVoD_info" {
     sat_sVoD_info:
         const sat_sVoD_entry;
         const 4294967296;
         const 17;
 },
 go_dn_sVox_entry() //  [R1, R2]
         { []
         }
     {offset
       c15ZB: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c15ZF; else goto c15ZE;
       c15ZF: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c15ZE: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c15Zz; else goto c15ZA;
       c15Zz: // global
           _sVov::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVoC_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVov::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVoA_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c15ZA: // global
           I64[Hp - 80] = sat_sVoD_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c15ZH::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c15ZH::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVox_info" {
     go_dn_sVox_info:
         const go_dn_sVox_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_sVoE_entry() //  [R1]
         { []
         }
     {offset
       c15ZI: // global
           _sVoE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c15ZJ; else goto c15ZK;
       c15ZK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c15ZM; else goto c15ZL;
       c15ZM: // global
           HpAlloc = 24;
           goto c15ZJ;
       c15ZJ: // global
           R1 = _sVoE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15ZL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVoE::P64;
           _sVnX::I64 = I64[_sVoE::P64 + 24];
           _sVov::I64 = _sVnX::I64 - I64[_sVoE::P64 + 16];
           I64[Hp - 16] = go_dn_sVox_info;
           I64[Hp - 8] = _sVov::I64;
           I64[Hp] = 0 - _sVov::I64;
           R2 = _sVnX::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVox_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVoE_info" {
     sat_sVoE_info:
         const sat_sVoE_entry;
         const 8589934592;
         const 20;
 },
 sat_sVou_entry() //  [R1]
         { []
         }
     {offset
       c15ZR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c15ZS; else goto c15ZT;
       c15ZS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c15ZT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVou_info" {
     sat_sVou_info:
         const sat_sVou_entry;
         const 4294967296;
         const 17;
 },
 sat_sVoG_entry() //  [R1]
         { []
         }
     {offset
       c1602: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1603; else goto c1604;
       c1603: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1604: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVoG_info" {
     sat_sVoG_info:
         const sat_sVoG_entry;
         const 4294967296;
         const 17;
 },
 sat_sVoQ_entry() //  [R1]
         { []
         }
     {offset
       c160x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c160y; else goto c160z;
       c160y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c160z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVoL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVoQ_info" {
     sat_sVoQ_info:
         const sat_sVoQ_entry;
         const 8589934593;
         const 15;
 },
 sat_sVoO_entry() //  [R1]
         { []
         }
     {offset
       c160E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c160F; else goto c160G;
       c160F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c160G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVoO_info" {
     sat_sVoO_info:
         const sat_sVoO_entry;
         const 4294967296;
         const 17;
 },
 sat_sVoR_entry() //  [R1]
         { []
         }
     {offset
       c160M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c160N; else goto c160O;
       c160N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c160O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVoR_info" {
     sat_sVoR_info:
         const sat_sVoR_entry;
         const 4294967296;
         const 17;
 },
 go_up_sVoL_entry() //  [R1, R2]
         { []
         }
     {offset
       c160S: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c160W; else goto c160V;
       c160W: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c160V: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c160Q; else goto c160R;
       c160Q: // global
           _sVoJ::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVoQ_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVoJ::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVoO_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c160R: // global
           I64[Hp - 80] = sat_sVoR_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c160Y::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c160Y::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVoL_info" {
     go_up_sVoL_info:
         const go_up_sVoL_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_sVoS_entry() //  [R1]
         { []
         }
     {offset
       c160Z: // global
           _sVoS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1610; else goto c1611;
       c1611: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1613; else goto c1612;
       c1613: // global
           HpAlloc = 24;
           goto c1610;
       c1610: // global
           R1 = _sVoS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1612: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVoS::P64;
           _sVnX::I64 = I64[_sVoS::P64 + 24];
           _sVoJ::I64 = _sVnX::I64 - I64[_sVoS::P64 + 16];
           I64[Hp - 16] = go_up_sVoL_info;
           I64[Hp - 8] = _sVoJ::I64;
           I64[Hp] = 0 - _sVoJ::I64;
           R2 = _sVnX::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sVoL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVoS_info" {
     sat_sVoS_info:
         const sat_sVoS_entry;
         const 8589934592;
         const 20;
 },
 sat_sVoI_entry() //  [R1]
         { []
         }
     {offset
       c1618: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1619; else goto c161a;
       c1619: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c161a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVoI_info" {
     sat_sVoI_info:
         const sat_sVoI_entry;
         const 4294967296;
         const 17;
 },
 sat_sVoU_entry() //  [R1]
         { []
         }
     {offset
       c161j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c161k; else goto c161l;
       c161k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c161l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVoU_info" {
     sat_sVoU_info:
         const sat_sVoU_entry;
         const 4294967296;
         const 17;
 },
 GHC.Enum.$fEnumVecCount_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c161x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c161y; else goto c161z;
       c161y: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c161z: // global
           I64[Sp - 16] = block_c161m_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u163d; else goto c161n;
       u163d: // global
           call _c161m(R1) args: 0, res: 0, upd: 0;
       c161n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_$cenumFromThen_info" {
     GHC.Enum.$fEnumVecCount_$cenumFromThen_info:
         const GHC.Enum.$fEnumVecCount_$cenumFromThen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c161m() //  [R1]
         { []
         }
     {offset
       c161m: // global
           _sVnT::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c161q;
               case 2 : goto c161r;
               case 3 : goto c161s;
               case 4 : goto c161t;
               case 5 : goto c161u;
               case 6 : goto c161v;
           }
       c161v: // global
           _sVnV::I64 = 5;
           goto sVnU;
       c161u: // global
           _sVnV::I64 = 4;
           goto sVnU;
       c161t: // global
           _sVnV::I64 = 3;
           goto sVnU;
       c161s: // global
           _sVnV::I64 = 2;
           goto sVnU;
       c161r: // global
           _sVnV::I64 = 1;
           goto sVnU;
       c161q: // global
           _sVnV::I64 = 0;
           goto sVnU;
       sVnU: // global
           I64[Sp] = block_c161A_info;
           R1 = _sVnT::P64;
           I64[Sp + 8] = _sVnV::I64;
           if (R1 & 7 != 0) goto u163c; else goto c162k;
       u163c: // global
           call _c161A(R1) args: 0, res: 0, upd: 0;
       c162k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c161m_info" {
     block_c161m_info:
         const _c161m;
         const 1;
         const 30;
 },
 _c161A() //  [R1]
         { []
         }
     {offset
       c161A: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c162q;
               case 2 : goto c162u;
               case 3 : goto c162y;
               case 4 : goto c162C;
               case 5 : goto c162G;
               case 6 : goto c162K;
           }
       c162K: // global
           I64[Sp] = 5;
           goto u163j;
       c162G: // global
           I64[Sp] = 4;
           goto u163j;
       c162C: // global
           I64[Sp] = 3;
           goto u163j;
       c162y: // global
           I64[Sp] = 2;
           goto u163j;
       c162u: // global
           I64[Sp] = 1;
           goto u163j;
       c162q: // global
           I64[Sp] = 0;
           goto u163j;
       u163j: // global
           call _c15W6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c161A_info" {
     block_c161A_info:
         const _c161A;
         const 65;
         const 30;
 },
 _c15W6() //  []
         { []
         }
     {offset
       c15W6: // global
           Hp = Hp + 80;
           _sVnX::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c161E; else goto c161D;
       c161E: // global
           HpAlloc = 80;
           I64[Sp] = block_c15W5_info;
           R1 = _sVnX::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c161D: // global
           _sVnV::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_sVnV::I64,
                            _sVnX::I64)) goto c161Z; else goto c162j;
       c161Z: // global
           if (%MO_S_Lt_W64(_sVnX::I64,
                            _sVnV::I64)) goto c161O; else goto c161X;
       c161O: // global
           if (%MO_S_Le_W64(5, _sVnX::I64)) goto c161H; else goto c161M;
       c161H: // global
           I64[Hp - 72] = sat_sVob_info;
           I64[Hp - 56] = _sVnV::I64;
           I64[Hp - 48] = _sVnX::I64;
           I64[Hp - 40] = sat_sVo1_info;
           I64[Hp - 24] = _sVnV::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c161M: // global
           if (%MO_S_Gt_W64(5, _sVnV::I64)) goto c162g; else goto c161K;
       c161K: // global
           I64[Hp - 72] = sat_sVod_info;
           I64[Hp - 56] = _sVnV::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c161I::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c161I::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c161X: // global
           if (%MO_S_Ge_W64(5, _sVnX::I64)) goto c161R; else goto c161W;
       c161R: // global
           I64[Hp - 72] = sat_sVop_info;
           I64[Hp - 56] = _sVnV::I64;
           I64[Hp - 48] = _sVnX::I64;
           I64[Hp - 40] = sat_sVof_info;
           I64[Hp - 24] = _sVnV::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c161W: // global
           if (%MO_S_Lt_W64(5, _sVnV::I64)) goto c162g; else goto c161U;
       c161U: // global
           I64[Hp - 72] = sat_sVor_info;
           I64[Hp - 56] = _sVnV::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c161S::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c161S::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c162j: // global
           if (%MO_S_Lt_W64(_sVnX::I64,
                            _sVnV::I64)) goto c1629; else goto c162i;
       c1629: // global
           if (%MO_S_Le_W64(0, _sVnX::I64)) goto c1622; else goto c1627;
       c1622: // global
           I64[Hp - 72] = sat_sVoE_info;
           I64[Hp - 56] = _sVnV::I64;
           I64[Hp - 48] = _sVnX::I64;
           I64[Hp - 40] = sat_sVou_info;
           I64[Hp - 24] = _sVnV::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1627: // global
           if (%MO_S_Gt_W64(0, _sVnV::I64)) goto c162g; else goto c1625;
       c1625: // global
           I64[Hp - 72] = sat_sVoG_info;
           I64[Hp - 56] = _sVnV::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1623::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1623::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c162i: // global
           if (%MO_S_Ge_W64(0, _sVnX::I64)) goto c162c; else goto c162h;
       c162c: // global
           I64[Hp - 72] = sat_sVoS_info;
           I64[Hp - 56] = _sVnV::I64;
           I64[Hp - 48] = _sVnX::I64;
           I64[Hp - 40] = sat_sVoI_info;
           I64[Hp - 24] = _sVnV::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c162h: // global
           if (%MO_S_Lt_W64(0, _sVnV::I64)) goto c162g; else goto c162f;
       c162g: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c162f: // global
           I64[Hp - 72] = sat_sVoU_info;
           I64[Hp - 56] = _sVnV::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c162d::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c162d::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c15W5() //  [R1]
         { []
         }
     {offset
       c15W5: // global
           I64[Sp] = R1;
           call _c15W6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c15W5_info" {
     block_c15W5_info:
         const _c15W5;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.828074469 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_go5_closure" {
     GHC.Enum.$fEnumVecCount_go5_closure:
         const GHC.Enum.$fEnumVecCount_go5_info;
         const 0;
 },
 sat_sVp3_entry() //  [R1]
         { []
         }
     {offset
       c1679: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c167a; else goto c167b;
       c167a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c167b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVp1::I64 = I64[R1 + 16];
           if (_sVp1::I64 != 0) goto c1677; else goto c1678;
       c1677: // global
           R2 = _sVp1::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go5_entry(R2) args: 24, res: 0, upd: 24;
       c1678: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVp3_info" {
     sat_sVp3_info:
         const sat_sVp3_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+776;
 },
 sat_sVp0_entry() //  [R1]
         { []
         }
     {offset
       c167n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c167o; else goto c167w;
       c167o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c167w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVoX::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVoX::I64, 0)) goto c167u; else goto c167m;
       c167m: // global
           if (%MO_S_Gt_W64(_sVoX::I64, 5)) goto c167u; else goto c167v;
       c167u: // global
           R2 = _sVoX::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c167v: // global
           R1 = I64[(_sVoX::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVp0_info" {
     sat_sVp0_info:
         const sat_sVp0_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 GHC.Enum.$fEnumVecCount_go5_entry() //  [R2]
         { []
         }
     {offset
       c167y: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c167C; else goto c167B;
       c167C: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_go5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c167B: // global
           I64[Hp - 64] = sat_sVp3_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVp0_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_go5_info" {
     GHC.Enum.$fEnumVecCount_go5_info:
         const GHC.Enum.$fEnumVecCount_go5_entry;
         const 0;
         const 4402341478414;
         const 4294967300;
         const SVzM_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.84113328 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_go4_closure" {
     GHC.Enum.$fEnumVecCount_go4_closure:
         const GHC.Enum.$fEnumVecCount_go4_info;
         const 0;
 },
 sat_sVpa_entry() //  [R1]
         { []
         }
     {offset
       c1687: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1688; else goto c1689;
       c1688: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1689: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVp8::I64 = I64[R1 + 16];
           if (_sVp8::I64 != 1) goto c1685; else goto c1686;
       c1685: // global
           R2 = _sVp8::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go4_entry(R2) args: 24, res: 0, upd: 24;
       c1686: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVpa_info" {
     sat_sVpa_info:
         const sat_sVpa_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+784;
 },
 sat_sVp7_entry() //  [R1]
         { []
         }
     {offset
       c168l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c168m; else goto c168u;
       c168m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c168u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVp4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVp4::I64, 0)) goto c168s; else goto c168k;
       c168k: // global
           if (%MO_S_Gt_W64(_sVp4::I64, 5)) goto c168s; else goto c168t;
       c168s: // global
           R2 = _sVp4::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c168t: // global
           R1 = I64[(_sVp4::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVp7_info" {
     sat_sVp7_info:
         const sat_sVp7_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 GHC.Enum.$fEnumVecCount_go4_entry() //  [R2]
         { []
         }
     {offset
       c168w: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c168A; else goto c168z;
       c168A: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_go4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c168z: // global
           I64[Hp - 64] = sat_sVpa_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVp7_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_go4_info" {
     GHC.Enum.$fEnumVecCount_go4_info:
         const GHC.Enum.$fEnumVecCount_go4_entry;
         const 0;
         const 8800387989518;
         const 4294967300;
         const SVzM_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.856437095 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_go3_closure" {
     GHC.Enum.$fEnumVecCount_go3_closure:
         const GHC.Enum.$fEnumVecCount_go3_info;
         const 0;
 },
 sat_sVph_entry() //  [R1]
         { []
         }
     {offset
       c1695: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1696; else goto c1697;
       c1696: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1697: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpf::I64 = I64[R1 + 16];
           if (_sVpf::I64 != 2) goto c1693; else goto c1694;
       c1693: // global
           R2 = _sVpf::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go3_entry(R2) args: 24, res: 0, upd: 24;
       c1694: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVph_info" {
     sat_sVph_info:
         const sat_sVph_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+792;
 },
 sat_sVpe_entry() //  [R1]
         { []
         }
     {offset
       c169j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c169k; else goto c169s;
       c169k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c169s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpb::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpb::I64, 0)) goto c169q; else goto c169i;
       c169i: // global
           if (%MO_S_Gt_W64(_sVpb::I64, 5)) goto c169q; else goto c169r;
       c169q: // global
           R2 = _sVpb::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c169r: // global
           R1 = I64[(_sVpb::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVpe_info" {
     sat_sVpe_info:
         const sat_sVpe_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 GHC.Enum.$fEnumVecCount_go3_entry() //  [R2]
         { []
         }
     {offset
       c169u: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c169y; else goto c169x;
       c169y: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_go3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c169x: // global
           I64[Hp - 64] = sat_sVph_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVpe_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_go3_info" {
     GHC.Enum.$fEnumVecCount_go3_info:
         const GHC.Enum.$fEnumVecCount_go3_entry;
         const 0;
         const 17596481011726;
         const 4294967300;
         const SVzM_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.866284166 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_go2_closure" {
     GHC.Enum.$fEnumVecCount_go2_closure:
         const GHC.Enum.$fEnumVecCount_go2_info;
         const 0;
 },
 sat_sVpo_entry() //  [R1]
         { []
         }
     {offset
       c16a3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16a4; else goto c16a5;
       c16a4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16a5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpm::I64 = I64[R1 + 16];
           if (_sVpm::I64 != 3) goto c16a1; else goto c16a2;
       c16a1: // global
           R2 = _sVpm::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go2_entry(R2) args: 24, res: 0, upd: 24;
       c16a2: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVpo_info" {
     sat_sVpo_info:
         const sat_sVpo_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+800;
 },
 sat_sVpl_entry() //  [R1]
         { []
         }
     {offset
       c16ah: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16ai; else goto c16aq;
       c16ai: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16aq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpi::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpi::I64, 0)) goto c16ao; else goto c16ag;
       c16ag: // global
           if (%MO_S_Gt_W64(_sVpi::I64, 5)) goto c16ao; else goto c16ap;
       c16ao: // global
           R2 = _sVpi::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16ap: // global
           R1 = I64[(_sVpi::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVpl_info" {
     sat_sVpl_info:
         const sat_sVpl_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 GHC.Enum.$fEnumVecCount_go2_entry() //  [R2]
         { []
         }
     {offset
       c16as: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c16aw; else goto c16av;
       c16aw: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16av: // global
           I64[Hp - 64] = sat_sVpo_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVpl_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_go2_info" {
     GHC.Enum.$fEnumVecCount_go2_info:
         const GHC.Enum.$fEnumVecCount_go2_entry;
         const 0;
         const 35188667056142;
         const 4294967300;
         const SVzM_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.875856543 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_go1_closure" {
     GHC.Enum.$fEnumVecCount_go1_closure:
         const GHC.Enum.$fEnumVecCount_go1_info;
         const 0;
 },
 sat_sVpv_entry() //  [R1]
         { []
         }
     {offset
       c16b1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16b2; else goto c16b3;
       c16b2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16b3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpt::I64 = I64[R1 + 16];
           if (_sVpt::I64 != 4) goto c16aZ; else goto c16b0;
       c16aZ: // global
           R2 = _sVpt::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go1_entry(R2) args: 24, res: 0, upd: 24;
       c16b0: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVpv_info" {
     sat_sVpv_info:
         const sat_sVpv_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+808;
 },
 sat_sVps_entry() //  [R1]
         { []
         }
     {offset
       c16bf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16bg; else goto c16bo;
       c16bg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16bo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpp::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpp::I64, 0)) goto c16bm; else goto c16be;
       c16be: // global
           if (%MO_S_Gt_W64(_sVpp::I64, 5)) goto c16bm; else goto c16bn;
       c16bm: // global
           R2 = _sVpp::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16bn: // global
           R1 = I64[(_sVpp::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVps_info" {
     sat_sVps_info:
         const sat_sVps_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 GHC.Enum.$fEnumVecCount_go1_entry() //  [R2]
         { []
         }
     {offset
       c16bq: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c16bu; else goto c16bt;
       c16bu: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16bt: // global
           I64[Hp - 64] = sat_sVpv_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVps_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_go1_info" {
     GHC.Enum.$fEnumVecCount_go1_info:
         const GHC.Enum.$fEnumVecCount_go1_entry;
         const 0;
         const 70373039144974;
         const 4294967300;
         const SVzM_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.887931271 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_go_closure" {
     GHC.Enum.$fEnumVecCount_go_closure:
         const GHC.Enum.$fEnumVecCount_go_info;
         const 0;
 },
 sat_sVpC_entry() //  [R1]
         { []
         }
     {offset
       c16bZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16c0; else goto c16c1;
       c16c0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16c1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpA::I64 = I64[R1 + 16];
           if (_sVpA::I64 != 5) goto c16bX; else goto c16bY;
       c16bX: // global
           R2 = _sVpA::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go_entry(R2) args: 24, res: 0, upd: 24;
       c16bY: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVpC_info" {
     sat_sVpC_info:
         const sat_sVpC_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+816;
 },
 sat_sVpz_entry() //  [R1]
         { []
         }
     {offset
       c16cd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16ce; else goto c16cm;
       c16ce: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16cm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpw::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpw::I64, 0)) goto c16ck; else goto c16cc;
       c16cc: // global
           if (%MO_S_Gt_W64(_sVpw::I64, 5)) goto c16ck; else goto c16cl;
       c16ck: // global
           R2 = _sVpw::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16cl: // global
           R1 = I64[(_sVpw::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVpz_info" {
     sat_sVpz_info:
         const sat_sVpz_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 GHC.Enum.$fEnumVecCount_go_entry() //  [R2]
         { []
         }
     {offset
       c16co: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c16cs; else goto c16cr;
       c16cs: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16cr: // global
           I64[Hp - 64] = sat_sVpC_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVpz_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_go_info" {
     GHC.Enum.$fEnumVecCount_go_info:
         const GHC.Enum.$fEnumVecCount_go_entry;
         const 0;
         const 140741783322638;
         const 4294967300;
         const SVzM_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:42.900447154 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_$cenumFromTo_closure" {
     GHC.Enum.$fEnumVecCount_$cenumFromTo_closure:
         const GHC.Enum.$fEnumVecCount_$cenumFromTo_info;
         const 0;
 },
 GHC.Enum.$fEnumVecCount_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c16d2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16d3; else goto c16d4;
       c16d3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c16d4: // global
           I64[Sp - 16] = block_c16cR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u16ep; else goto c16cS;
       u16ep: // global
           call _c16cR(R1) args: 0, res: 0, upd: 0;
       c16cS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_$cenumFromTo_info" {
     GHC.Enum.$fEnumVecCount_$cenumFromTo_info:
         const GHC.Enum.$fEnumVecCount_$cenumFromTo_entry;
         const 0;
         const 545460846606;
         const 8589934607;
         const SVzM_srt+776;
 },
 _c16cR() //  [R1]
         { []
         }
     {offset
       c16cR: // global
           _sVpE::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c16cV;
               case 2 : goto c16cW;
               case 3 : goto c16cX;
               case 4 : goto c16cY;
               case 5 : goto c16cZ;
               case 6 : goto c16d0;
           }
       c16d0: // global
           _sVpG::I64 = 5;
           goto sVpF;
       c16cZ: // global
           _sVpG::I64 = 4;
           goto sVpF;
       c16cY: // global
           _sVpG::I64 = 3;
           goto sVpF;
       c16cX: // global
           _sVpG::I64 = 2;
           goto sVpF;
       c16cW: // global
           _sVpG::I64 = 1;
           goto sVpF;
       c16cV: // global
           _sVpG::I64 = 0;
           goto sVpF;
       sVpF: // global
           I64[Sp] = block_c16d8_info;
           R1 = _sVpE::P64;
           I64[Sp + 8] = _sVpG::I64;
           if (R1 & 7 != 0) goto u16eo; else goto c16da;
       u16eo: // global
           call _c16d8(R1) args: 0, res: 0, upd: 0;
       c16da: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c16cR_info" {
     block_c16cR_info:
         const _c16cR;
         const 1;
         const 270582939678;
         const SVzM_srt+776;
 },
 _c16d8() //  [R1]
         { []
         }
     {offset
       c16d8: // global
           _sVpG::I64 = I64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c16dl;
               case 2 : goto c16du;
               case 3 : goto c16dD;
               case 4 : goto c16dM;
               case 5 : goto c16dV;
               case 6 : goto c16e4;
           }
       c16e4: // global
           if (%MO_S_Gt_W64(_sVpG::I64, 5)) goto c16e3; else goto c16e2;
       c16e2: // global
           R2 = _sVpG::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumVecCount_go_entry(R2) args: 8, res: 0, upd: 8;
       c16dV: // global
           if (%MO_S_Gt_W64(_sVpG::I64, 4)) goto c16e3; else goto c16dT;
       c16dT: // global
           R2 = _sVpG::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumVecCount_go1_entry(R2) args: 8, res: 0, upd: 8;
       c16dM: // global
           if (%MO_S_Gt_W64(_sVpG::I64, 3)) goto c16e3; else goto c16dK;
       c16dK: // global
           R2 = _sVpG::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumVecCount_go2_entry(R2) args: 8, res: 0, upd: 8;
       c16dD: // global
           if (%MO_S_Gt_W64(_sVpG::I64, 2)) goto c16e3; else goto c16dB;
       c16dB: // global
           R2 = _sVpG::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumVecCount_go3_entry(R2) args: 8, res: 0, upd: 8;
       c16du: // global
           if (%MO_S_Gt_W64(_sVpG::I64, 1)) goto c16e3; else goto c16ds;
       c16ds: // global
           R2 = _sVpG::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumVecCount_go4_entry(R2) args: 8, res: 0, upd: 8;
       c16dl: // global
           if (%MO_S_Gt_W64(_sVpG::I64, 0)) goto c16e3; else goto c16di;
       c16e3: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16di: // global
           R2 = _sVpG::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumVecCount_go5_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c16d8_info" {
     block_c16d8_info:
         const _c16d8;
         const 65;
         const 270582939678;
         const SVzM_srt+776;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.00343707 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_$cenumFromThenTo_closure" {
     GHC.Enum.$fEnumVecCount_$cenumFromThenTo_closure:
         const GHC.Enum.$fEnumVecCount_$cenumFromThenTo_info;
         const 0;
 },
 sat_sVqb_entry() //  [R1]
         { []
         }
     {offset
       c16fx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16fy; else goto c16fz;
       c16fy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16fz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVq4_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVqb_info" {
     sat_sVqb_info:
         const sat_sVqb_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+696;
 },
 sat_sVq9_entry() //  [R1]
         { []
         }
     {offset
       c16fJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16fK; else goto c16fS;
       c16fK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16fS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVq5::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVq5::I64, 0)) goto c16fQ; else goto c16fI;
       c16fI: // global
           if (%MO_S_Gt_W64(_sVq5::I64, 5)) goto c16fQ; else goto c16fR;
       c16fQ: // global
           R2 = _sVq5::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16fR: // global
           R1 = I64[(_sVq5::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVq9_info" {
     sat_sVq9_info:
         const sat_sVq9_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVqe_entry() //  [R1]
         { []
         }
     {offset
       c16g3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16g4; else goto c16gc;
       c16g4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16gc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVq5::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVq5::I64, 0)) goto c16ga; else goto c16g2;
       c16g2: // global
           if (%MO_S_Gt_W64(_sVq5::I64, 5)) goto c16ga; else goto c16gb;
       c16ga: // global
           R2 = _sVq5::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16gb: // global
           R1 = I64[(_sVq5::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVqe_info" {
     sat_sVqe_info:
         const sat_sVqe_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 go_dn_sVq4_entry() //  [R1, R2]
         { []
         }
     {offset
       c16gg: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c16gk; else goto c16gj;
       c16gk: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16gj: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c16ge; else goto c16gf;
       c16ge: // global
           _sVq2::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVqb_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVq2::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVq9_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16gf: // global
           I64[Hp - 80] = sat_sVqe_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c16gm::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c16gm::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVq4_info" {
     go_dn_sVq4_info:
         const go_dn_sVq4_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+696;
 },
 sat_sVqf_entry() //  [R1]
         { []
         }
     {offset
       c16gn: // global
           _sVqf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c16go; else goto c16gp;
       c16gp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c16gr; else goto c16gq;
       c16gr: // global
           HpAlloc = 24;
           goto c16go;
       c16go: // global
           R1 = _sVqf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16gq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVqf::P64;
           _sVpV::I64 = I64[_sVqf::P64 + 24];
           _sVq2::I64 = _sVpV::I64 - I64[_sVqf::P64 + 16];
           I64[Hp - 16] = go_dn_sVq4_info;
           I64[Hp - 8] = _sVq2::I64;
           I64[Hp] = 0 - _sVq2::I64;
           R2 = _sVpV::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVq4_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVqf_info" {
     sat_sVqf_info:
         const sat_sVqf_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+696;
 },
 sat_sVq1_entry() //  [R1]
         { []
         }
     {offset
       c16gB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16gC; else goto c16gK;
       c16gC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16gK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16gI; else goto c16gA;
       c16gA: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16gI; else goto c16gJ;
       c16gI: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16gJ: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVq1_info" {
     sat_sVq1_info:
         const sat_sVq1_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVqj_entry() //  [R1]
         { []
         }
     {offset
       c16gY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16gZ; else goto c16h7;
       c16gZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16h7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16h5; else goto c16gX;
       c16gX: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16h5; else goto c16h6;
       c16h5: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16h6: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVqj_info" {
     sat_sVqj_info:
         const sat_sVqj_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVqx_entry() //  [R1]
         { []
         }
     {offset
       c16hA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16hB; else goto c16hC;
       c16hB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16hC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVqq_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVqx_info" {
     sat_sVqx_info:
         const sat_sVqx_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+696;
 },
 sat_sVqv_entry() //  [R1]
         { []
         }
     {offset
       c16hM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16hN; else goto c16hV;
       c16hN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16hV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVqr::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVqr::I64, 0)) goto c16hT; else goto c16hL;
       c16hL: // global
           if (%MO_S_Gt_W64(_sVqr::I64, 5)) goto c16hT; else goto c16hU;
       c16hT: // global
           R2 = _sVqr::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16hU: // global
           R1 = I64[(_sVqr::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVqv_info" {
     sat_sVqv_info:
         const sat_sVqv_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVqA_entry() //  [R1]
         { []
         }
     {offset
       c16i6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16i7; else goto c16if;
       c16i7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16if: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVqr::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVqr::I64, 0)) goto c16id; else goto c16i5;
       c16i5: // global
           if (%MO_S_Gt_W64(_sVqr::I64, 5)) goto c16id; else goto c16ie;
       c16id: // global
           R2 = _sVqr::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16ie: // global
           R1 = I64[(_sVqr::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVqA_info" {
     sat_sVqA_info:
         const sat_sVqA_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 go_up_sVqq_entry() //  [R1, R2]
         { []
         }
     {offset
       c16ij: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c16in; else goto c16im;
       c16in: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16im: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c16ih; else goto c16ii;
       c16ih: // global
           _sVqo::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVqx_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVqo::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVqv_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16ii: // global
           I64[Hp - 80] = sat_sVqA_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c16ip::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c16ip::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVqq_info" {
     go_up_sVqq_info:
         const go_up_sVqq_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+696;
 },
 sat_sVqB_entry() //  [R1]
         { []
         }
     {offset
       c16iq: // global
           _sVqB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c16ir; else goto c16is;
       c16is: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c16iu; else goto c16it;
       c16iu: // global
           HpAlloc = 24;
           goto c16ir;
       c16ir: // global
           R1 = _sVqB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16it: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVqB::P64;
           _sVpV::I64 = I64[_sVqB::P64 + 24];
           _sVqo::I64 = _sVpV::I64 - I64[_sVqB::P64 + 16];
           I64[Hp - 16] = go_up_sVqq_info;
           I64[Hp - 8] = _sVqo::I64;
           I64[Hp] = 0 - _sVqo::I64;
           R2 = _sVpV::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sVqq_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVqB_info" {
     sat_sVqB_info:
         const sat_sVqB_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+696;
 },
 sat_sVqn_entry() //  [R1]
         { []
         }
     {offset
       c16iE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16iF; else goto c16iN;
       c16iF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16iN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16iL; else goto c16iD;
       c16iD: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16iL; else goto c16iM;
       c16iL: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16iM: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVqn_info" {
     sat_sVqn_info:
         const sat_sVqn_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVqF_entry() //  [R1]
         { []
         }
     {offset
       c16j1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16j2; else goto c16ja;
       c16j2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16ja: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16j8; else goto c16j0;
       c16j0: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16j8; else goto c16j9;
       c16j8: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16j9: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVqF_info" {
     sat_sVqF_info:
         const sat_sVqF_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVqU_entry() //  [R1]
         { []
         }
     {offset
       c16jH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16jI; else goto c16jJ;
       c16jI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16jJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVqN_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVqU_info" {
     sat_sVqU_info:
         const sat_sVqU_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+696;
 },
 sat_sVqS_entry() //  [R1]
         { []
         }
     {offset
       c16jT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16jU; else goto c16k2;
       c16jU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16k2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVqO::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVqO::I64, 0)) goto c16k0; else goto c16jS;
       c16jS: // global
           if (%MO_S_Gt_W64(_sVqO::I64, 5)) goto c16k0; else goto c16k1;
       c16k0: // global
           R2 = _sVqO::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16k1: // global
           R1 = I64[(_sVqO::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVqS_info" {
     sat_sVqS_info:
         const sat_sVqS_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVqX_entry() //  [R1]
         { []
         }
     {offset
       c16kd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16ke; else goto c16km;
       c16ke: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16km: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVqO::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVqO::I64, 0)) goto c16kk; else goto c16kc;
       c16kc: // global
           if (%MO_S_Gt_W64(_sVqO::I64, 5)) goto c16kk; else goto c16kl;
       c16kk: // global
           R2 = _sVqO::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16kl: // global
           R1 = I64[(_sVqO::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVqX_info" {
     sat_sVqX_info:
         const sat_sVqX_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 go_dn_sVqN_entry() //  [R1, R2]
         { []
         }
     {offset
       c16kq: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c16ku; else goto c16kt;
       c16ku: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16kt: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c16ko; else goto c16kp;
       c16ko: // global
           _sVqL::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVqU_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVqL::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVqS_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16kp: // global
           I64[Hp - 80] = sat_sVqX_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c16kw::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c16kw::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVqN_info" {
     go_dn_sVqN_info:
         const go_dn_sVqN_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+696;
 },
 sat_sVqY_entry() //  [R1]
         { []
         }
     {offset
       c16kx: // global
           _sVqY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c16ky; else goto c16kz;
       c16kz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c16kB; else goto c16kA;
       c16kB: // global
           HpAlloc = 24;
           goto c16ky;
       c16ky: // global
           R1 = _sVqY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16kA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVqY::P64;
           _sVpV::I64 = I64[_sVqY::P64 + 24];
           _sVqL::I64 = _sVpV::I64 - I64[_sVqY::P64 + 16];
           I64[Hp - 16] = go_dn_sVqN_info;
           I64[Hp - 8] = _sVqL::I64;
           I64[Hp] = 1 - _sVqL::I64;
           R2 = _sVpV::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVqN_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVqY_info" {
     sat_sVqY_info:
         const sat_sVqY_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+696;
 },
 sat_sVqK_entry() //  [R1]
         { []
         }
     {offset
       c16kL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16kM; else goto c16kU;
       c16kM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16kU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16kS; else goto c16kK;
       c16kK: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16kS; else goto c16kT;
       c16kS: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16kT: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVqK_info" {
     sat_sVqK_info:
         const sat_sVqK_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVr2_entry() //  [R1]
         { []
         }
     {offset
       c16l8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16l9; else goto c16lh;
       c16l9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16lh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16lf; else goto c16l7;
       c16l7: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16lf; else goto c16lg;
       c16lf: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16lg: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVr2_info" {
     sat_sVr2_info:
         const sat_sVr2_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVrg_entry() //  [R1]
         { []
         }
     {offset
       c16lK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16lL; else goto c16lM;
       c16lL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16lM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVr9_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVrg_info" {
     sat_sVrg_info:
         const sat_sVrg_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+696;
 },
 sat_sVre_entry() //  [R1]
         { []
         }
     {offset
       c16lW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16lX; else goto c16m5;
       c16lX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16m5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVra::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVra::I64, 0)) goto c16m3; else goto c16lV;
       c16lV: // global
           if (%MO_S_Gt_W64(_sVra::I64, 5)) goto c16m3; else goto c16m4;
       c16m3: // global
           R2 = _sVra::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16m4: // global
           R1 = I64[(_sVra::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVre_info" {
     sat_sVre_info:
         const sat_sVre_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVrj_entry() //  [R1]
         { []
         }
     {offset
       c16mg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16mh; else goto c16mp;
       c16mh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16mp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVra::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVra::I64, 0)) goto c16mn; else goto c16mf;
       c16mf: // global
           if (%MO_S_Gt_W64(_sVra::I64, 5)) goto c16mn; else goto c16mo;
       c16mn: // global
           R2 = _sVra::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16mo: // global
           R1 = I64[(_sVra::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVrj_info" {
     sat_sVrj_info:
         const sat_sVrj_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 go_up_sVr9_entry() //  [R1, R2]
         { []
         }
     {offset
       c16mt: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c16mx; else goto c16mw;
       c16mx: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16mw: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c16mr; else goto c16ms;
       c16mr: // global
           _sVr7::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVrg_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVr7::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVre_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16ms: // global
           I64[Hp - 80] = sat_sVrj_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c16mz::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c16mz::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVr9_info" {
     go_up_sVr9_info:
         const go_up_sVr9_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+696;
 },
 sat_sVrk_entry() //  [R1]
         { []
         }
     {offset
       c16mA: // global
           _sVrk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c16mB; else goto c16mC;
       c16mC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c16mE; else goto c16mD;
       c16mE: // global
           HpAlloc = 24;
           goto c16mB;
       c16mB: // global
           R1 = _sVrk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16mD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVrk::P64;
           _sVpV::I64 = I64[_sVrk::P64 + 24];
           _sVr7::I64 = _sVpV::I64 - I64[_sVrk::P64 + 16];
           I64[Hp - 16] = go_up_sVr9_info;
           I64[Hp - 8] = _sVr7::I64;
           I64[Hp] = 1 - _sVr7::I64;
           R2 = _sVpV::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sVr9_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVrk_info" {
     sat_sVrk_info:
         const sat_sVrk_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+696;
 },
 sat_sVr6_entry() //  [R1]
         { []
         }
     {offset
       c16mO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16mP; else goto c16mX;
       c16mP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16mX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16mV; else goto c16mN;
       c16mN: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16mV; else goto c16mW;
       c16mV: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16mW: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVr6_info" {
     sat_sVr6_info:
         const sat_sVr6_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVro_entry() //  [R1]
         { []
         }
     {offset
       c16nb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16nc; else goto c16nk;
       c16nc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16nk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16ni; else goto c16na;
       c16na: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16ni; else goto c16nj;
       c16ni: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16nj: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVro_info" {
     sat_sVro_info:
         const sat_sVro_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVrD_entry() //  [R1]
         { []
         }
     {offset
       c16nR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16nS; else goto c16nT;
       c16nS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16nT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVrw_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVrD_info" {
     sat_sVrD_info:
         const sat_sVrD_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+696;
 },
 sat_sVrB_entry() //  [R1]
         { []
         }
     {offset
       c16o3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16o4; else goto c16oc;
       c16o4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16oc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVrx::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVrx::I64, 0)) goto c16oa; else goto c16o2;
       c16o2: // global
           if (%MO_S_Gt_W64(_sVrx::I64, 5)) goto c16oa; else goto c16ob;
       c16oa: // global
           R2 = _sVrx::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16ob: // global
           R1 = I64[(_sVrx::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVrB_info" {
     sat_sVrB_info:
         const sat_sVrB_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVrG_entry() //  [R1]
         { []
         }
     {offset
       c16on: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16oo; else goto c16ow;
       c16oo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16ow: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVrx::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVrx::I64, 0)) goto c16ou; else goto c16om;
       c16om: // global
           if (%MO_S_Gt_W64(_sVrx::I64, 5)) goto c16ou; else goto c16ov;
       c16ou: // global
           R2 = _sVrx::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16ov: // global
           R1 = I64[(_sVrx::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVrG_info" {
     sat_sVrG_info:
         const sat_sVrG_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 go_dn_sVrw_entry() //  [R1, R2]
         { []
         }
     {offset
       c16oA: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c16oE; else goto c16oD;
       c16oE: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16oD: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c16oy; else goto c16oz;
       c16oy: // global
           _sVru::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVrD_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVru::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVrB_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16oz: // global
           I64[Hp - 80] = sat_sVrG_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c16oG::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c16oG::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVrw_info" {
     go_dn_sVrw_info:
         const go_dn_sVrw_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+696;
 },
 sat_sVrH_entry() //  [R1]
         { []
         }
     {offset
       c16oH: // global
           _sVrH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c16oI; else goto c16oJ;
       c16oJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c16oL; else goto c16oK;
       c16oL: // global
           HpAlloc = 24;
           goto c16oI;
       c16oI: // global
           R1 = _sVrH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16oK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVrH::P64;
           _sVpV::I64 = I64[_sVrH::P64 + 24];
           _sVru::I64 = _sVpV::I64 - I64[_sVrH::P64 + 16];
           I64[Hp - 16] = go_dn_sVrw_info;
           I64[Hp - 8] = _sVru::I64;
           I64[Hp] = 2 - _sVru::I64;
           R2 = _sVpV::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVrw_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVrH_info" {
     sat_sVrH_info:
         const sat_sVrH_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+696;
 },
 sat_sVrt_entry() //  [R1]
         { []
         }
     {offset
       c16oV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16oW; else goto c16p4;
       c16oW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16p4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16p2; else goto c16oU;
       c16oU: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16p2; else goto c16p3;
       c16p2: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16p3: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVrt_info" {
     sat_sVrt_info:
         const sat_sVrt_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVrL_entry() //  [R1]
         { []
         }
     {offset
       c16pi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16pj; else goto c16pr;
       c16pj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16pr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16pp; else goto c16ph;
       c16ph: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16pp; else goto c16pq;
       c16pp: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16pq: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVrL_info" {
     sat_sVrL_info:
         const sat_sVrL_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVrZ_entry() //  [R1]
         { []
         }
     {offset
       c16pU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16pV; else goto c16pW;
       c16pV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16pW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVrS_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVrZ_info" {
     sat_sVrZ_info:
         const sat_sVrZ_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+696;
 },
 sat_sVrX_entry() //  [R1]
         { []
         }
     {offset
       c16q6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16q7; else goto c16qf;
       c16q7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16qf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVrT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVrT::I64, 0)) goto c16qd; else goto c16q5;
       c16q5: // global
           if (%MO_S_Gt_W64(_sVrT::I64, 5)) goto c16qd; else goto c16qe;
       c16qd: // global
           R2 = _sVrT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16qe: // global
           R1 = I64[(_sVrT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVrX_info" {
     sat_sVrX_info:
         const sat_sVrX_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVs2_entry() //  [R1]
         { []
         }
     {offset
       c16qq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16qr; else goto c16qz;
       c16qr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16qz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVrT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVrT::I64, 0)) goto c16qx; else goto c16qp;
       c16qp: // global
           if (%MO_S_Gt_W64(_sVrT::I64, 5)) goto c16qx; else goto c16qy;
       c16qx: // global
           R2 = _sVrT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16qy: // global
           R1 = I64[(_sVrT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVs2_info" {
     sat_sVs2_info:
         const sat_sVs2_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 go_up_sVrS_entry() //  [R1, R2]
         { []
         }
     {offset
       c16qD: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c16qH; else goto c16qG;
       c16qH: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16qG: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c16qB; else goto c16qC;
       c16qB: // global
           _sVrQ::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVrZ_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVrQ::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVrX_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16qC: // global
           I64[Hp - 80] = sat_sVs2_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c16qJ::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c16qJ::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVrS_info" {
     go_up_sVrS_info:
         const go_up_sVrS_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+696;
 },
 sat_sVs3_entry() //  [R1]
         { []
         }
     {offset
       c16qK: // global
           _sVs3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c16qL; else goto c16qM;
       c16qM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c16qO; else goto c16qN;
       c16qO: // global
           HpAlloc = 24;
           goto c16qL;
       c16qL: // global
           R1 = _sVs3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16qN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVs3::P64;
           _sVpV::I64 = I64[_sVs3::P64 + 24];
           _sVrQ::I64 = _sVpV::I64 - I64[_sVs3::P64 + 16];
           I64[Hp - 16] = go_up_sVrS_info;
           I64[Hp - 8] = _sVrQ::I64;
           I64[Hp] = 2 - _sVrQ::I64;
           R2 = _sVpV::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sVrS_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVs3_info" {
     sat_sVs3_info:
         const sat_sVs3_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+696;
 },
 sat_sVrP_entry() //  [R1]
         { []
         }
     {offset
       c16qY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16qZ; else goto c16r7;
       c16qZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16r7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16r5; else goto c16qX;
       c16qX: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16r5; else goto c16r6;
       c16r5: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16r6: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVrP_info" {
     sat_sVrP_info:
         const sat_sVrP_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVs7_entry() //  [R1]
         { []
         }
     {offset
       c16rl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16rm; else goto c16ru;
       c16rm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16ru: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16rs; else goto c16rk;
       c16rk: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16rs; else goto c16rt;
       c16rs: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16rt: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVs7_info" {
     sat_sVs7_info:
         const sat_sVs7_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVsm_entry() //  [R1]
         { []
         }
     {offset
       c16s1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16s2; else goto c16s3;
       c16s2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16s3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVsf_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVsm_info" {
     sat_sVsm_info:
         const sat_sVsm_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+696;
 },
 sat_sVsk_entry() //  [R1]
         { []
         }
     {offset
       c16sd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16se; else goto c16sm;
       c16se: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16sm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVsg::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVsg::I64, 0)) goto c16sk; else goto c16sc;
       c16sc: // global
           if (%MO_S_Gt_W64(_sVsg::I64, 5)) goto c16sk; else goto c16sl;
       c16sk: // global
           R2 = _sVsg::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16sl: // global
           R1 = I64[(_sVsg::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVsk_info" {
     sat_sVsk_info:
         const sat_sVsk_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVsp_entry() //  [R1]
         { []
         }
     {offset
       c16sx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16sy; else goto c16sG;
       c16sy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16sG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVsg::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVsg::I64, 0)) goto c16sE; else goto c16sw;
       c16sw: // global
           if (%MO_S_Gt_W64(_sVsg::I64, 5)) goto c16sE; else goto c16sF;
       c16sE: // global
           R2 = _sVsg::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16sF: // global
           R1 = I64[(_sVsg::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVsp_info" {
     sat_sVsp_info:
         const sat_sVsp_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 go_dn_sVsf_entry() //  [R1, R2]
         { []
         }
     {offset
       c16sK: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c16sO; else goto c16sN;
       c16sO: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16sN: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c16sI; else goto c16sJ;
       c16sI: // global
           _sVsd::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVsm_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVsd::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVsk_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16sJ: // global
           I64[Hp - 80] = sat_sVsp_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c16sQ::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c16sQ::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVsf_info" {
     go_dn_sVsf_info:
         const go_dn_sVsf_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+696;
 },
 sat_sVsq_entry() //  [R1]
         { []
         }
     {offset
       c16sR: // global
           _sVsq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c16sS; else goto c16sT;
       c16sT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c16sV; else goto c16sU;
       c16sV: // global
           HpAlloc = 24;
           goto c16sS;
       c16sS: // global
           R1 = _sVsq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16sU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVsq::P64;
           _sVpV::I64 = I64[_sVsq::P64 + 24];
           _sVsd::I64 = _sVpV::I64 - I64[_sVsq::P64 + 16];
           I64[Hp - 16] = go_dn_sVsf_info;
           I64[Hp - 8] = _sVsd::I64;
           I64[Hp] = 3 - _sVsd::I64;
           R2 = _sVpV::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVsf_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVsq_info" {
     sat_sVsq_info:
         const sat_sVsq_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+696;
 },
 sat_sVsc_entry() //  [R1]
         { []
         }
     {offset
       c16t5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16t6; else goto c16te;
       c16t6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16te: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16tc; else goto c16t4;
       c16t4: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16tc; else goto c16td;
       c16tc: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16td: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVsc_info" {
     sat_sVsc_info:
         const sat_sVsc_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVsu_entry() //  [R1]
         { []
         }
     {offset
       c16ts: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16tt; else goto c16tB;
       c16tt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16tB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16tz; else goto c16tr;
       c16tr: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16tz; else goto c16tA;
       c16tz: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16tA: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVsu_info" {
     sat_sVsu_info:
         const sat_sVsu_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVsI_entry() //  [R1]
         { []
         }
     {offset
       c16u4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16u5; else goto c16u6;
       c16u5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16u6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVsB_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVsI_info" {
     sat_sVsI_info:
         const sat_sVsI_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+696;
 },
 sat_sVsG_entry() //  [R1]
         { []
         }
     {offset
       c16ug: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16uh; else goto c16up;
       c16uh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16up: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVsC::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVsC::I64, 0)) goto c16un; else goto c16uf;
       c16uf: // global
           if (%MO_S_Gt_W64(_sVsC::I64, 5)) goto c16un; else goto c16uo;
       c16un: // global
           R2 = _sVsC::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16uo: // global
           R1 = I64[(_sVsC::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVsG_info" {
     sat_sVsG_info:
         const sat_sVsG_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVsL_entry() //  [R1]
         { []
         }
     {offset
       c16uA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16uB; else goto c16uJ;
       c16uB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16uJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVsC::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVsC::I64, 0)) goto c16uH; else goto c16uz;
       c16uz: // global
           if (%MO_S_Gt_W64(_sVsC::I64, 5)) goto c16uH; else goto c16uI;
       c16uH: // global
           R2 = _sVsC::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16uI: // global
           R1 = I64[(_sVsC::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVsL_info" {
     sat_sVsL_info:
         const sat_sVsL_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 go_up_sVsB_entry() //  [R1, R2]
         { []
         }
     {offset
       c16uN: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c16uR; else goto c16uQ;
       c16uR: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16uQ: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c16uL; else goto c16uM;
       c16uL: // global
           _sVsz::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVsI_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVsz::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVsG_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16uM: // global
           I64[Hp - 80] = sat_sVsL_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c16uT::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c16uT::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVsB_info" {
     go_up_sVsB_info:
         const go_up_sVsB_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+696;
 },
 sat_sVsM_entry() //  [R1]
         { []
         }
     {offset
       c16uU: // global
           _sVsM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c16uV; else goto c16uW;
       c16uW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c16uY; else goto c16uX;
       c16uY: // global
           HpAlloc = 24;
           goto c16uV;
       c16uV: // global
           R1 = _sVsM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16uX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVsM::P64;
           _sVpV::I64 = I64[_sVsM::P64 + 24];
           _sVsz::I64 = _sVpV::I64 - I64[_sVsM::P64 + 16];
           I64[Hp - 16] = go_up_sVsB_info;
           I64[Hp - 8] = _sVsz::I64;
           I64[Hp] = 3 - _sVsz::I64;
           R2 = _sVpV::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sVsB_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVsM_info" {
     sat_sVsM_info:
         const sat_sVsM_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+696;
 },
 sat_sVsy_entry() //  [R1]
         { []
         }
     {offset
       c16v8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16v9; else goto c16vh;
       c16v9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16vh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16vf; else goto c16v7;
       c16v7: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16vf; else goto c16vg;
       c16vf: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16vg: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVsy_info" {
     sat_sVsy_info:
         const sat_sVsy_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVsQ_entry() //  [R1]
         { []
         }
     {offset
       c16vv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16vw; else goto c16vE;
       c16vw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16vE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16vC; else goto c16vu;
       c16vu: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16vC; else goto c16vD;
       c16vC: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16vD: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVsQ_info" {
     sat_sVsQ_info:
         const sat_sVsQ_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVt5_entry() //  [R1]
         { []
         }
     {offset
       c16wb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16wc; else goto c16wd;
       c16wc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16wd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVsY_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVt5_info" {
     sat_sVt5_info:
         const sat_sVt5_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+696;
 },
 sat_sVt3_entry() //  [R1]
         { []
         }
     {offset
       c16wn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16wo; else goto c16ww;
       c16wo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16ww: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVsZ::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVsZ::I64, 0)) goto c16wu; else goto c16wm;
       c16wm: // global
           if (%MO_S_Gt_W64(_sVsZ::I64, 5)) goto c16wu; else goto c16wv;
       c16wu: // global
           R2 = _sVsZ::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16wv: // global
           R1 = I64[(_sVsZ::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVt3_info" {
     sat_sVt3_info:
         const sat_sVt3_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVt8_entry() //  [R1]
         { []
         }
     {offset
       c16wH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16wI; else goto c16wQ;
       c16wI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16wQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVsZ::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVsZ::I64, 0)) goto c16wO; else goto c16wG;
       c16wG: // global
           if (%MO_S_Gt_W64(_sVsZ::I64, 5)) goto c16wO; else goto c16wP;
       c16wO: // global
           R2 = _sVsZ::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16wP: // global
           R1 = I64[(_sVsZ::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVt8_info" {
     sat_sVt8_info:
         const sat_sVt8_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 go_dn_sVsY_entry() //  [R1, R2]
         { []
         }
     {offset
       c16wU: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c16wY; else goto c16wX;
       c16wY: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16wX: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c16wS; else goto c16wT;
       c16wS: // global
           _sVsW::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVt5_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVsW::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVt3_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16wT: // global
           I64[Hp - 80] = sat_sVt8_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c16x0::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c16x0::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVsY_info" {
     go_dn_sVsY_info:
         const go_dn_sVsY_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+696;
 },
 sat_sVt9_entry() //  [R1]
         { []
         }
     {offset
       c16x1: // global
           _sVt9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c16x2; else goto c16x3;
       c16x3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c16x5; else goto c16x4;
       c16x5: // global
           HpAlloc = 24;
           goto c16x2;
       c16x2: // global
           R1 = _sVt9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16x4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVt9::P64;
           _sVpV::I64 = I64[_sVt9::P64 + 24];
           _sVsW::I64 = _sVpV::I64 - I64[_sVt9::P64 + 16];
           I64[Hp - 16] = go_dn_sVsY_info;
           I64[Hp - 8] = _sVsW::I64;
           I64[Hp] = 4 - _sVsW::I64;
           R2 = _sVpV::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVsY_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVt9_info" {
     sat_sVt9_info:
         const sat_sVt9_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+696;
 },
 sat_sVsV_entry() //  [R1]
         { []
         }
     {offset
       c16xf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16xg; else goto c16xo;
       c16xg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16xo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16xm; else goto c16xe;
       c16xe: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16xm; else goto c16xn;
       c16xm: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16xn: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVsV_info" {
     sat_sVsV_info:
         const sat_sVsV_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVtd_entry() //  [R1]
         { []
         }
     {offset
       c16xC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16xD; else goto c16xL;
       c16xD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16xL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16xJ; else goto c16xB;
       c16xB: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16xJ; else goto c16xK;
       c16xJ: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16xK: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVtd_info" {
     sat_sVtd_info:
         const sat_sVtd_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVtr_entry() //  [R1]
         { []
         }
     {offset
       c16ye: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16yf; else goto c16yg;
       c16yf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16yg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVtk_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVtr_info" {
     sat_sVtr_info:
         const sat_sVtr_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+696;
 },
 sat_sVtp_entry() //  [R1]
         { []
         }
     {offset
       c16yq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16yr; else goto c16yz;
       c16yr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16yz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVtl::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVtl::I64, 0)) goto c16yx; else goto c16yp;
       c16yp: // global
           if (%MO_S_Gt_W64(_sVtl::I64, 5)) goto c16yx; else goto c16yy;
       c16yx: // global
           R2 = _sVtl::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16yy: // global
           R1 = I64[(_sVtl::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVtp_info" {
     sat_sVtp_info:
         const sat_sVtp_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVtu_entry() //  [R1]
         { []
         }
     {offset
       c16yK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16yL; else goto c16yT;
       c16yL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16yT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVtl::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVtl::I64, 0)) goto c16yR; else goto c16yJ;
       c16yJ: // global
           if (%MO_S_Gt_W64(_sVtl::I64, 5)) goto c16yR; else goto c16yS;
       c16yR: // global
           R2 = _sVtl::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16yS: // global
           R1 = I64[(_sVtl::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVtu_info" {
     sat_sVtu_info:
         const sat_sVtu_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 go_up_sVtk_entry() //  [R1, R2]
         { []
         }
     {offset
       c16yX: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c16z1; else goto c16z0;
       c16z1: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16z0: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c16yV; else goto c16yW;
       c16yV: // global
           _sVti::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVtr_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVti::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVtp_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16yW: // global
           I64[Hp - 80] = sat_sVtu_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c16z3::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c16z3::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVtk_info" {
     go_up_sVtk_info:
         const go_up_sVtk_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+696;
 },
 sat_sVtv_entry() //  [R1]
         { []
         }
     {offset
       c16z4: // global
           _sVtv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c16z5; else goto c16z6;
       c16z6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c16z8; else goto c16z7;
       c16z8: // global
           HpAlloc = 24;
           goto c16z5;
       c16z5: // global
           R1 = _sVtv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16z7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVtv::P64;
           _sVpV::I64 = I64[_sVtv::P64 + 24];
           _sVti::I64 = _sVpV::I64 - I64[_sVtv::P64 + 16];
           I64[Hp - 16] = go_up_sVtk_info;
           I64[Hp - 8] = _sVti::I64;
           I64[Hp] = 4 - _sVti::I64;
           R2 = _sVpV::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sVtk_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVtv_info" {
     sat_sVtv_info:
         const sat_sVtv_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+696;
 },
 sat_sVth_entry() //  [R1]
         { []
         }
     {offset
       c16zi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16zj; else goto c16zr;
       c16zj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16zr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16zp; else goto c16zh;
       c16zh: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16zp; else goto c16zq;
       c16zp: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16zq: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVth_info" {
     sat_sVth_info:
         const sat_sVth_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVtz_entry() //  [R1]
         { []
         }
     {offset
       c16zF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16zG; else goto c16zO;
       c16zG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16zO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16zM; else goto c16zE;
       c16zE: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16zM; else goto c16zN;
       c16zM: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16zN: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVtz_info" {
     sat_sVtz_info:
         const sat_sVtz_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVtO_entry() //  [R1]
         { []
         }
     {offset
       c16Al: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16Am; else goto c16An;
       c16Am: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16An: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sVtH_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVtO_info" {
     sat_sVtO_info:
         const sat_sVtO_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+696;
 },
 sat_sVtM_entry() //  [R1]
         { []
         }
     {offset
       c16Ax: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16Ay; else goto c16AG;
       c16Ay: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16AG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVtI::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVtI::I64, 0)) goto c16AE; else goto c16Aw;
       c16Aw: // global
           if (%MO_S_Gt_W64(_sVtI::I64, 5)) goto c16AE; else goto c16AF;
       c16AE: // global
           R2 = _sVtI::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16AF: // global
           R1 = I64[(_sVtI::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVtM_info" {
     sat_sVtM_info:
         const sat_sVtM_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVtR_entry() //  [R1]
         { []
         }
     {offset
       c16AR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16AS; else goto c16B0;
       c16AS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16B0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVtI::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVtI::I64, 0)) goto c16AY; else goto c16AQ;
       c16AQ: // global
           if (%MO_S_Gt_W64(_sVtI::I64, 5)) goto c16AY; else goto c16AZ;
       c16AY: // global
           R2 = _sVtI::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16AZ: // global
           R1 = I64[(_sVtI::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVtR_info" {
     sat_sVtR_info:
         const sat_sVtR_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 go_dn_sVtH_entry() //  [R1, R2]
         { []
         }
     {offset
       c16B4: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c16B8; else goto c16B7;
       c16B8: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16B7: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c16B2; else goto c16B3;
       c16B2: // global
           _sVtF::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVtO_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVtF::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVtM_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16B3: // global
           I64[Hp - 80] = sat_sVtR_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c16Ba::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c16Ba::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sVtH_info" {
     go_dn_sVtH_info:
         const go_dn_sVtH_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+696;
 },
 sat_sVtS_entry() //  [R1]
         { []
         }
     {offset
       c16Bb: // global
           _sVtS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c16Bc; else goto c16Bd;
       c16Bd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c16Bf; else goto c16Be;
       c16Bf: // global
           HpAlloc = 24;
           goto c16Bc;
       c16Bc: // global
           R1 = _sVtS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16Be: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVtS::P64;
           _sVpV::I64 = I64[_sVtS::P64 + 24];
           _sVtF::I64 = _sVpV::I64 - I64[_sVtS::P64 + 16];
           I64[Hp - 16] = go_dn_sVtH_info;
           I64[Hp - 8] = _sVtF::I64;
           I64[Hp] = 5 - _sVtF::I64;
           R2 = _sVpV::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sVtH_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVtS_info" {
     sat_sVtS_info:
         const sat_sVtS_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+696;
 },
 sat_sVtE_entry() //  [R1]
         { []
         }
     {offset
       c16Bp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16Bq; else goto c16By;
       c16Bq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16By: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16Bw; else goto c16Bo;
       c16Bo: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16Bw; else goto c16Bx;
       c16Bw: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16Bx: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVtE_info" {
     sat_sVtE_info:
         const sat_sVtE_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVtW_entry() //  [R1]
         { []
         }
     {offset
       c16BM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16BN; else goto c16BV;
       c16BN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16BV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16BT; else goto c16BL;
       c16BL: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16BT; else goto c16BU;
       c16BT: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16BU: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVtW_info" {
     sat_sVtW_info:
         const sat_sVtW_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVua_entry() //  [R1]
         { []
         }
     {offset
       c16Co: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16Cp; else goto c16Cq;
       c16Cp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16Cq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sVu3_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVua_info" {
     sat_sVua_info:
         const sat_sVua_entry;
         const 8589934593;
         const 4294967311;
         const SVzM_srt+696;
 },
 sat_sVu8_entry() //  [R1]
         { []
         }
     {offset
       c16CA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16CB; else goto c16CJ;
       c16CB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16CJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVu4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVu4::I64, 0)) goto c16CH; else goto c16Cz;
       c16Cz: // global
           if (%MO_S_Gt_W64(_sVu4::I64, 5)) goto c16CH; else goto c16CI;
       c16CH: // global
           R2 = _sVu4::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16CI: // global
           R1 = I64[(_sVu4::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVu8_info" {
     sat_sVu8_info:
         const sat_sVu8_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVud_entry() //  [R1]
         { []
         }
     {offset
       c16CU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16CV; else goto c16D3;
       c16CV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16D3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVu4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVu4::I64, 0)) goto c16D1; else goto c16CT;
       c16CT: // global
           if (%MO_S_Gt_W64(_sVu4::I64, 5)) goto c16D1; else goto c16D2;
       c16D1: // global
           R2 = _sVu4::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16D2: // global
           R1 = I64[(_sVu4::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVud_info" {
     sat_sVud_info:
         const sat_sVud_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 go_up_sVu3_entry() //  [R1, R2]
         { []
         }
     {offset
       c16D7: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c16Db; else goto c16Da;
       c16Db: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16Da: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c16D5; else goto c16D6;
       c16D5: // global
           _sVu1::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sVua_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sVu1::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sVu8_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16D6: // global
           I64[Hp - 80] = sat_sVud_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c16Dd::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c16Dd::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sVu3_info" {
     go_up_sVu3_info:
         const go_up_sVu3_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SVzM_srt+696;
 },
 sat_sVue_entry() //  [R1]
         { []
         }
     {offset
       c16De: // global
           _sVue::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c16Df; else goto c16Dg;
       c16Dg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c16Di; else goto c16Dh;
       c16Di: // global
           HpAlloc = 24;
           goto c16Df;
       c16Df: // global
           R1 = _sVue::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16Dh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sVue::P64;
           _sVpV::I64 = I64[_sVue::P64 + 24];
           _sVu1::I64 = _sVpV::I64 - I64[_sVue::P64 + 16];
           I64[Hp - 16] = go_up_sVu3_info;
           I64[Hp - 8] = _sVu1::I64;
           I64[Hp] = 5 - _sVu1::I64;
           R2 = _sVpV::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sVu3_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVue_info" {
     sat_sVue_info:
         const sat_sVue_entry;
         const 8589934592;
         const 4294967316;
         const SVzM_srt+696;
 },
 sat_sVu0_entry() //  [R1]
         { []
         }
     {offset
       c16Ds: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16Dt; else goto c16DB;
       c16Dt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16DB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16Dz; else goto c16Dr;
       c16Dr: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16Dz; else goto c16DA;
       c16Dz: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16DA: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVu0_info" {
     sat_sVu0_info:
         const sat_sVu0_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 sat_sVui_entry() //  [R1]
         { []
         }
     {offset
       c16DP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16DQ; else goto c16DY;
       c16DQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16DY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sVpT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sVpT::I64, 0)) goto c16DW; else goto c16DO;
       c16DO: // global
           if (%MO_S_Gt_W64(_sVpT::I64, 5)) goto c16DW; else goto c16DX;
       c16DW: // global
           R2 = _sVpT::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c16DX: // global
           R1 = I64[(_sVpT::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVui_info" {
     sat_sVui_info:
         const sat_sVui_entry;
         const 4294967296;
         const 4294967313;
         const SVzM_srt+696;
 },
 GHC.Enum.$fEnumVecCount_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c16Ea: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c16Eb; else goto c16Ec;
       c16Eb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c16Ec: // global
           I64[Sp - 24] = block_c16DZ_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u16Hh; else goto c16E0;
       u16Hh: // global
           call _c16DZ(R1) args: 0, res: 0, upd: 0;
       c16E0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_$cenumFromThenTo_info" {
     GHC.Enum.$fEnumVecCount_$cenumFromThenTo_info:
         const GHC.Enum.$fEnumVecCount_$cenumFromThenTo_entry;
         const 0;
         const 562954248388622;
         const 12884901911;
         const SVzM_srt+696;
 },
 _c16DZ() //  [R1]
         { []
         }
     {offset
       c16DZ: // global
           _sVpQ::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c16E3;
               case 2 : goto c16E4;
               case 3 : goto c16E5;
               case 4 : goto c16E6;
               case 5 : goto c16E7;
               case 6 : goto c16E8;
           }
       c16E8: // global
           _sVpT::I64 = 5;
           goto sVpS;
       c16E7: // global
           _sVpT::I64 = 4;
           goto sVpS;
       c16E6: // global
           _sVpT::I64 = 3;
           goto sVpS;
       c16E5: // global
           _sVpT::I64 = 2;
           goto sVpS;
       c16E4: // global
           _sVpT::I64 = 1;
           goto sVpS;
       c16E3: // global
           _sVpT::I64 = 0;
           goto sVpS;
       sVpS: // global
           I64[Sp] = block_c16Ed_info;
           R1 = _sVpQ::P64;
           I64[Sp + 8] = _sVpT::I64;
           if (R1 & 7 != 0) goto u16Hg; else goto c16Gv;
       u16Hg: // global
           call _c16Ed(R1) args: 0, res: 0, upd: 0;
       c16Gv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c16DZ_info" {
     block_c16DZ_info:
         const _c16DZ;
         const 2;
         const 4294967326;
         const SVzM_srt+696;
 },
 _c16Ed() //  [R1]
         { []
         }
     {offset
       c16Ed: // global
           _sVpR::P64 = P64[Sp + 16];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c16GB;
               case 2 : goto c16GF;
               case 3 : goto c16GJ;
               case 4 : goto c16GN;
               case 5 : goto c16GR;
               case 6 : goto c16GV;
           }
       c16GV: // global
           _sVpV::I64 = 5;
           goto sVpU;
       c16GR: // global
           _sVpV::I64 = 4;
           goto sVpU;
       c16GN: // global
           _sVpV::I64 = 3;
           goto sVpU;
       c16GJ: // global
           _sVpV::I64 = 2;
           goto sVpU;
       c16GF: // global
           _sVpV::I64 = 1;
           goto sVpU;
       c16GB: // global
           _sVpV::I64 = 0;
           goto sVpU;
       sVpU: // global
           I64[Sp] = block_c16eY_info;
           R1 = _sVpR::P64;
           I64[Sp + 16] = _sVpV::I64;
           if (R1 & 7 != 0) goto u16Hi; else goto c16eZ;
       u16Hi: // global
           call _c16eY(R1) args: 0, res: 0, upd: 0;
       c16eZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c16Ed_info" {
     block_c16Ed_info:
         const _c16Ed;
         const 66;
         const 4294967326;
         const SVzM_srt+696;
 },
 _c16eY() //  [R1]
         { []
         }
     {offset
       c16eY: // global
           _sVpT::I64 = I64[Sp + 8];
           _sVpV::I64 = I64[Sp + 16];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c16Eh;
               case 2 : goto c16EE;
               case 3 : goto c16F1;
               case 4 : goto c16Fo;
               case 5 : goto c16FL;
               case 6 : goto c16G8;
           }
       c16G8: // global
           Hp = Hp + 80;
           _sVpW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c16Gb; else goto c16Ga;
       c16Ga: // global
           if (%MO_S_Lt_W64(_sVpV::I64,
                            _sVpT::I64)) goto c16Gl; else goto c16Gu;
       c16Gl: // global
           if (%MO_S_Le_W64(5, _sVpV::I64)) goto c16Ge; else goto c16Gj;
       c16Ge: // global
           I64[Hp - 72] = sat_sVtS_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = _sVpV::I64;
           I64[Hp - 40] = sat_sVtE_info;
           I64[Hp - 24] = _sVpT::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16Gj: // global
           if (%MO_S_Gt_W64(5, _sVpT::I64)) goto c16Gs; else goto c16Gh;
       c16Gh: // global
           I64[Hp - 72] = sat_sVtW_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c16Gf::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c16Gf::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16Gu: // global
           if (%MO_S_Ge_W64(5, _sVpV::I64)) goto c16Go; else goto c16Gt;
       c16Go: // global
           I64[Hp - 72] = sat_sVue_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = _sVpV::I64;
           I64[Hp - 40] = sat_sVu0_info;
           I64[Hp - 24] = _sVpT::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16Gt: // global
           if (%MO_S_Lt_W64(5, _sVpT::I64)) goto c16Gs; else goto c16Gr;
       c16Gr: // global
           I64[Hp - 72] = sat_sVui_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c16Gp::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c16Gp::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16FL: // global
           Hp = Hp + 80;
           _sVpW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c16Gb; else goto c16FN;
       c16FN: // global
           if (%MO_S_Lt_W64(_sVpV::I64,
                            _sVpT::I64)) goto c16FY; else goto c16G7;
       c16FY: // global
           if (%MO_S_Le_W64(4, _sVpV::I64)) goto c16FR; else goto c16FW;
       c16FR: // global
           I64[Hp - 72] = sat_sVt9_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = _sVpV::I64;
           I64[Hp - 40] = sat_sVsV_info;
           I64[Hp - 24] = _sVpT::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16FW: // global
           if (%MO_S_Gt_W64(4, _sVpT::I64)) goto c16Gs; else goto c16FU;
       c16FU: // global
           I64[Hp - 72] = sat_sVtd_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c16FS::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c16FS::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16G7: // global
           if (%MO_S_Ge_W64(4, _sVpV::I64)) goto c16G1; else goto c16G6;
       c16G1: // global
           I64[Hp - 72] = sat_sVtv_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = _sVpV::I64;
           I64[Hp - 40] = sat_sVth_info;
           I64[Hp - 24] = _sVpT::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16G6: // global
           if (%MO_S_Lt_W64(4, _sVpT::I64)) goto c16Gs; else goto c16G4;
       c16G4: // global
           I64[Hp - 72] = sat_sVtz_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c16G2::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c16G2::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16Fo: // global
           Hp = Hp + 80;
           _sVpW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c16Gb; else goto c16Fq;
       c16Fq: // global
           if (%MO_S_Lt_W64(_sVpV::I64,
                            _sVpT::I64)) goto c16FB; else goto c16FK;
       c16FB: // global
           if (%MO_S_Le_W64(3, _sVpV::I64)) goto c16Fu; else goto c16Fz;
       c16Fu: // global
           I64[Hp - 72] = sat_sVsq_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = _sVpV::I64;
           I64[Hp - 40] = sat_sVsc_info;
           I64[Hp - 24] = _sVpT::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16Fz: // global
           if (%MO_S_Gt_W64(3, _sVpT::I64)) goto c16Gs; else goto c16Fx;
       c16Fx: // global
           I64[Hp - 72] = sat_sVsu_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c16Fv::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c16Fv::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16FK: // global
           if (%MO_S_Ge_W64(3, _sVpV::I64)) goto c16FE; else goto c16FJ;
       c16FE: // global
           I64[Hp - 72] = sat_sVsM_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = _sVpV::I64;
           I64[Hp - 40] = sat_sVsy_info;
           I64[Hp - 24] = _sVpT::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16FJ: // global
           if (%MO_S_Lt_W64(3, _sVpT::I64)) goto c16Gs; else goto c16FH;
       c16FH: // global
           I64[Hp - 72] = sat_sVsQ_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c16FF::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c16FF::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16F1: // global
           Hp = Hp + 80;
           _sVpW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c16Gb; else goto c16F3;
       c16F3: // global
           if (%MO_S_Lt_W64(_sVpV::I64,
                            _sVpT::I64)) goto c16Fe; else goto c16Fn;
       c16Fe: // global
           if (%MO_S_Le_W64(2, _sVpV::I64)) goto c16F7; else goto c16Fc;
       c16F7: // global
           I64[Hp - 72] = sat_sVrH_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = _sVpV::I64;
           I64[Hp - 40] = sat_sVrt_info;
           I64[Hp - 24] = _sVpT::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16Fc: // global
           if (%MO_S_Gt_W64(2, _sVpT::I64)) goto c16Gs; else goto c16Fa;
       c16Fa: // global
           I64[Hp - 72] = sat_sVrL_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c16F8::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c16F8::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16Fn: // global
           if (%MO_S_Ge_W64(2, _sVpV::I64)) goto c16Fh; else goto c16Fm;
       c16Fh: // global
           I64[Hp - 72] = sat_sVs3_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = _sVpV::I64;
           I64[Hp - 40] = sat_sVrP_info;
           I64[Hp - 24] = _sVpT::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16Fm: // global
           if (%MO_S_Lt_W64(2, _sVpT::I64)) goto c16Gs; else goto c16Fk;
       c16Fk: // global
           I64[Hp - 72] = sat_sVs7_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c16Fi::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c16Fi::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16EE: // global
           Hp = Hp + 80;
           _sVpW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c16Gb; else goto c16EG;
       c16EG: // global
           if (%MO_S_Lt_W64(_sVpV::I64,
                            _sVpT::I64)) goto c16ER; else goto c16F0;
       c16ER: // global
           if (%MO_S_Le_W64(1, _sVpV::I64)) goto c16EK; else goto c16EP;
       c16EK: // global
           I64[Hp - 72] = sat_sVqY_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = _sVpV::I64;
           I64[Hp - 40] = sat_sVqK_info;
           I64[Hp - 24] = _sVpT::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16EP: // global
           if (%MO_S_Gt_W64(1, _sVpT::I64)) goto c16Gs; else goto c16EN;
       c16EN: // global
           I64[Hp - 72] = sat_sVr2_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c16EL::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c16EL::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16F0: // global
           if (%MO_S_Ge_W64(1, _sVpV::I64)) goto c16EU; else goto c16EZ;
       c16EU: // global
           I64[Hp - 72] = sat_sVrk_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = _sVpV::I64;
           I64[Hp - 40] = sat_sVr6_info;
           I64[Hp - 24] = _sVpT::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16EZ: // global
           if (%MO_S_Lt_W64(1, _sVpT::I64)) goto c16Gs; else goto c16EX;
       c16EX: // global
           I64[Hp - 72] = sat_sVro_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c16EV::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c16EV::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16Eh: // global
           Hp = Hp + 80;
           _sVpW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c16Gb; else goto c16Ej;
       c16Gb: // global
           HpAlloc = 80;
           R1 = _sVpW::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c16Ej: // global
           if (%MO_S_Lt_W64(_sVpV::I64,
                            _sVpT::I64)) goto c16Eu; else goto c16ED;
       c16Eu: // global
           if (%MO_S_Le_W64(0, _sVpV::I64)) goto c16En; else goto c16Es;
       c16En: // global
           I64[Hp - 72] = sat_sVqf_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = _sVpV::I64;
           I64[Hp - 40] = sat_sVq1_info;
           I64[Hp - 24] = _sVpT::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16Es: // global
           if (%MO_S_Gt_W64(0, _sVpT::I64)) goto c16Gs; else goto c16Eq;
       c16Eq: // global
           I64[Hp - 72] = sat_sVqj_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c16Eo::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c16Eo::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16ED: // global
           if (%MO_S_Ge_W64(0, _sVpV::I64)) goto c16Ex; else goto c16EC;
       c16Ex: // global
           I64[Hp - 72] = sat_sVqB_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = _sVpV::I64;
           I64[Hp - 40] = sat_sVqn_info;
           I64[Hp - 24] = _sVpT::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16EC: // global
           if (%MO_S_Lt_W64(0, _sVpT::I64)) goto c16Gs; else goto c16EA;
       c16Gs: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16EA: // global
           I64[Hp - 72] = sat_sVqF_info;
           I64[Hp - 56] = _sVpT::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c16Ey::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c16Ey::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c16eY_info" {
     block_c16eY_info:
         const _c16eY;
         const 194;
         const 4294967326;
         const SVzM_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.207422788 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_closure" {
     GHC.Enum.$fEnumVecCount_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumVecCount_$csucc_closure+1;
         const GHC.Enum.$fEnumVecCount_$cpred_closure+1;
         const GHC.Enum.$fEnumVecCount_$ctoEnum_closure+1;
         const GHC.Enum.$fEnumVecCount_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumVecCount_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumVecCount_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumVecCount_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumVecCount_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.209861876 UTC

[section ""data" . GHC.Enum.$trModule3_closure" {
     GHC.Enum.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Enum.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.211531705 UTC

[section ""data" . GHC.Enum.$trModule1_closure" {
     GHC.Enum.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Enum.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.213370086 UTC

[section ""data" . GHC.Enum.$trModule_closure" {
     GHC.Enum.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Enum.$trModule3_closure+1;
         const GHC.Enum.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.21521233 UTC

[section ""data" . $krep_rURH_closure" {
     $krep_rURH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.216996629 UTC

[section ""data" . $krep1_rURI_closure" {
     $krep1_rURI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.218820803 UTC

[section ""data" . GHC.Enum.$tcBounded1_closure" {
     GHC.Enum.$tcBounded1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep1_rURI_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.2205367 UTC

[section ""data" . $krep2_rURJ_closure" {
     $krep2_rURJ_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.222508986 UTC

[section ""data" . $krep3_rURK_closure" {
     $krep3_rURK_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rURJ_closure+2;
         const $krep2_rURJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.22434101 UTC

[section ""data" . $krep4_rURL_closure" {
     $krep4_rURL_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rURJ_closure+2;
         const $krep_rURH_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.227157889 UTC

[section ""data" . $krep5_rURM_closure" {
     $krep5_rURM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rURH_closure+1;
         const $krep2_rURJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.23004486 UTC

[section ""data" . $krep6_rURN_closure" {
     $krep6_rURN_closure:
         const :_con_info;
         const $krep2_rURJ_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.231900402 UTC

[section ""data" . $krep7_rURO_closure" {
     $krep7_rURO_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep6_rURN_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.234983093 UTC

[section ""data" . $krep8_rURP_closure" {
     $krep8_rURP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rURJ_closure+2;
         const $krep7_rURO_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.236966438 UTC

[section ""data" . $krep9_rURQ_closure" {
     $krep9_rURQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rURJ_closure+2;
         const $krep8_rURP_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.238799211 UTC

[section ""data" . $krep10_rURR_closure" {
     $krep10_rURR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rURJ_closure+2;
         const $krep9_rURQ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.240558169 UTC

[section ""cstring" . GHC.Enum.$tcBounded3_bytes" {
     GHC.Enum.$tcBounded3_bytes:
         I8[] [66,111,117,110,100,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.242331577 UTC

[section ""data" . GHC.Enum.$tcBounded2_closure" {
     GHC.Enum.$tcBounded2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Enum.$tcBounded3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.244243906 UTC

[section ""data" . GHC.Enum.$tcBounded_closure" {
     GHC.Enum.$tcBounded_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Enum.$trModule_closure+1;
         const GHC.Enum.$tcBounded2_closure+1;
         const GHC.Enum.$tcBounded1_closure+4;
         const 15333921930693502724;
         const 670716372614077232;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.246211737 UTC

[section ""data" . $krep11_rURS_closure" {
     $krep11_rURS_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Enum.$tcBounded_closure+1;
         const $krep6_rURN_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.248677052 UTC

[section ""data" . $krep12_rURT_closure" {
     $krep12_rURT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rURJ_closure+2;
         const $krep11_rURS_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.250780931 UTC

[section ""data" . GHC.Enum.$tc'C:Bounded1_closure" {
     GHC.Enum.$tc'C:Bounded1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rURJ_closure+2;
         const $krep12_rURT_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.253230257 UTC

[section ""cstring" . GHC.Enum.$tc'C:Bounded3_bytes" {
     GHC.Enum.$tc'C:Bounded3_bytes:
         I8[] [39,67,58,66,111,117,110,100,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.255210837 UTC

[section ""data" . GHC.Enum.$tc'C:Bounded2_closure" {
     GHC.Enum.$tc'C:Bounded2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Enum.$tc'C:Bounded3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.257639379 UTC

[section ""data" . GHC.Enum.$tc'C:Bounded_closure" {
     GHC.Enum.$tc'C:Bounded_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Enum.$trModule_closure+1;
         const GHC.Enum.$tc'C:Bounded2_closure+1;
         const GHC.Enum.$tc'C:Bounded1_closure+4;
         const 11653779171057733320;
         const 7915017773108857797;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.259903026 UTC

[section ""cstring" . GHC.Enum.$tcEnum2_bytes" {
     GHC.Enum.$tcEnum2_bytes:
         I8[] [69,110,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.262496808 UTC

[section ""data" . GHC.Enum.$tcEnum1_closure" {
     GHC.Enum.$tcEnum1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Enum.$tcEnum2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.265087015 UTC

[section ""data" . GHC.Enum.$tcEnum_closure" {
     GHC.Enum.$tcEnum_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Enum.$trModule_closure+1;
         const GHC.Enum.$tcEnum1_closure+1;
         const GHC.Enum.$tcBounded1_closure+4;
         const 1732763130676021359;
         const 12945953424921799467;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.267395382 UTC

[section ""data" . $krep13_rURU_closure" {
     $krep13_rURU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Enum.$tcEnum_closure+1;
         const $krep6_rURN_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.269819787 UTC

[section ""data" . $krep14_rURV_closure" {
     $krep14_rURV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rURR_closure+4;
         const $krep13_rURU_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.271670811 UTC

[section ""data" . $krep15_rURW_closure" {
     $krep15_rURW_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_rURQ_closure+4;
         const $krep14_rURV_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.274212123 UTC

[section ""data" . $krep16_rURX_closure" {
     $krep16_rURX_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_rURQ_closure+4;
         const $krep15_rURW_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.276513497 UTC

[section ""data" . $krep17_rURY_closure" {
     $krep17_rURY_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rURP_closure+4;
         const $krep16_rURX_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.27873873 UTC

[section ""data" . $krep18_rURZ_closure" {
     $krep18_rURZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rURL_closure+4;
         const $krep17_rURY_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.280547377 UTC

[section ""data" . $krep19_rUS0_closure" {
     $krep19_rUS0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rURM_closure+4;
         const $krep18_rURZ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.282498348 UTC

[section ""data" . $krep20_rUS1_closure" {
     $krep20_rUS1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rURK_closure+4;
         const $krep19_rUS0_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.28429745 UTC

[section ""data" . GHC.Enum.$tc'C:Enum1_closure" {
     GHC.Enum.$tc'C:Enum1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rURK_closure+4;
         const $krep20_rUS1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.286363378 UTC

[section ""cstring" . GHC.Enum.$tc'C:Enum3_bytes" {
     GHC.Enum.$tc'C:Enum3_bytes:
         I8[] [39,67,58,69,110,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.288118386 UTC

[section ""data" . GHC.Enum.$tc'C:Enum2_closure" {
     GHC.Enum.$tc'C:Enum2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Enum.$tc'C:Enum3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.290466562 UTC

[section ""data" . GHC.Enum.$tc'C:Enum_closure" {
     GHC.Enum.$tc'C:Enum_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Enum.$trModule_closure+1;
         const GHC.Enum.$tc'C:Enum2_closure+1;
         const GHC.Enum.$tc'C:Enum1_closure+4;
         const 1558011785351316622;
         const 1214604065930072985;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.293029596 UTC

[section ""data" . GHC.Enum.$fEnumWord4_closure" {
     GHC.Enum.$fEnumWord4_closure:
         const GHC.Enum.$fEnumWord4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumWord4_entry() //  [R1]
         { []
         }
     {offset
       c16Sa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16Sb; else goto c16Sc;
       c16Sb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16Sc: // global
           (_c16S7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c16S7::I64 == 0) goto c16S9; else goto c16S8;
       c16S9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c16S8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c16S7::I64;
           R2 = lvl32_rURc_closure;
           Sp = Sp - 16;
           call GHC.Enum.succError_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord4_info" {
     GHC.Enum.$fEnumWord4_info:
         const GHC.Enum.$fEnumWord4_entry;
         const 0;
         const 12884901909;
         const SVzM_srt+840;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.29811148 UTC

[section ""data" . GHC.Enum.$fEnumWord_$csucc_closure" {
     GHC.Enum.$fEnumWord_$csucc_closure:
         const GHC.Enum.$fEnumWord_$csucc_info;
         const 0;
 },
 GHC.Enum.$fEnumWord_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c16Sr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c16Ss; else goto c16St;
       c16Ss: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumWord_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16St: // global
           I64[Sp - 8] = block_c16So_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u16SI; else goto c16Sp;
       u16SI: // global
           call _c16So(R1) args: 0, res: 0, upd: 0;
       c16Sp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord_$csucc_info" {
     GHC.Enum.$fEnumWord_$csucc_info:
         const GHC.Enum.$fEnumWord_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+856;
 },
 _c16So() //  [R1]
         { []
         }
     {offset
       c16So: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c16Sy; else goto c16Sx;
       c16Sy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c16Sx: // global
           _sVuo::I64 = I64[R1 + 7];
           if (_sVuo::I64 != 18446744073709551615) goto c16SG; else goto c16SH;
       c16SG: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _sVuo::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16SH: // global
           Hp = Hp - 16;
           R1 = GHC.Enum.$fEnumWord4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c16So_info" {
     block_c16So_info:
         const _c16So;
         const 0;
         const 4294967326;
         const SVzM_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.304060566 UTC

[section ""data" . GHC.Enum.$fEnumWord3_closure" {
     GHC.Enum.$fEnumWord3_closure:
         const GHC.Enum.$fEnumWord3_info;
         const 0;
         const 0;
         const 0;
 },
 section ""relreadonly" . u16T4_srtd" {
     u16T4_srtd:
         const SVzM_srt+280;
         const 71;
         const 1;
         const 64;
 },
 GHC.Enum.$fEnumWord3_entry() //  [R1]
         { []
         }
     {offset
       c16T1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16T2; else goto c16T3;
       c16T2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16T3: // global
           (_c16SY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c16SY::I64 == 0) goto c16T0; else goto c16SZ;
       c16T0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c16SZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c16SY::I64;
           R2 = lvl32_rURc_closure;
           Sp = Sp - 16;
           call GHC.Enum.predError_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord3_info" {
     GHC.Enum.$fEnumWord3_info:
         const GHC.Enum.$fEnumWord3_entry;
         const 0;
         const 18446744069414584341;
         const u16T4_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.310556527 UTC

[section ""data" . GHC.Enum.$fEnumWord_$cpred_closure" {
     GHC.Enum.$fEnumWord_$cpred_closure:
         const GHC.Enum.$fEnumWord_$cpred_info;
         const 0;
 },
 GHC.Enum.$fEnumWord_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c16Tk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c16Tl; else goto c16Tm;
       c16Tl: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumWord_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16Tm: // global
           I64[Sp - 8] = block_c16Th_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u16TB; else goto c16Ti;
       u16TB: // global
           call _c16Th(R1) args: 0, res: 0, upd: 0;
       c16Ti: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord_$cpred_info" {
     GHC.Enum.$fEnumWord_$cpred_info:
         const GHC.Enum.$fEnumWord_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+872;
 },
 _c16Th() //  [R1]
         { []
         }
     {offset
       c16Th: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c16Tr; else goto c16Tq;
       c16Tr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c16Tq: // global
           _sVut::I64 = I64[R1 + 7];
           if (_sVut::I64 != 0) goto c16Tz; else goto c16TA;
       c16Tz: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _sVut::I64 - 1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c16TA: // global
           Hp = Hp - 16;
           R1 = GHC.Enum.$fEnumWord3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c16Th_info" {
     block_c16Th_info:
         const _c16Th;
         const 0;
         const 4294967326;
         const SVzM_srt+880;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.316738947 UTC

[section ""data" . GHC.Enum.$wlvl2_closure" {
     GHC.Enum.$wlvl2_closure:
         const GHC.Enum.$wlvl2_info;
         const 0;
 },
 section ""relreadonly" . u16TV_srtd" {
     u16TV_srtd:
         const SVzM_srt+208;
         const 80;
         const 1;
         const 32768;
 },
 GHC.Enum.$wlvl2_entry() //  [R2]
         { []
         }
     {offset
       c16TS: // global
           R6 = GHC.Enum.$fBoundedWord_$cmaxBound_closure+1;
           R5 = GHC.Enum.$fBoundedWord_$cminBound_closure+1;
           R4 = R2;
           R3 = lvl32_rURc_closure;
           R2 = GHC.Show.$fShowWord_closure;
           call GHC.Enum.$wtoEnumError_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$wlvl2_info" {
     GHC.Enum.$wlvl2_info:
         const GHC.Enum.$wlvl2_entry;
         const 0;
         const 18446744069414584334;
         const 4294967300;
         const u16TV_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.321397073 UTC

[section ""data" . GHC.Enum.$fEnumWord2_closure" {
     GHC.Enum.$fEnumWord2_closure:
         const GHC.Enum.$fEnumWord2_info;
         const 0;
 },
 GHC.Enum.$fEnumWord2_entry() //  [R2]
         { []
         }
     {offset
       c16U8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c16U9; else goto c16Ua;
       c16U9: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumWord2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16Ua: // global
           I64[Sp - 8] = block_c16U5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u16Ue; else goto c16U6;
       u16Ue: // global
           call _c16U5(R1) args: 0, res: 0, upd: 0;
       c16U6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord2_info" {
     GHC.Enum.$fEnumWord2_info:
         const GHC.Enum.$fEnumWord2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+888;
 },
 _c16U5() //  [R1]
         { []
         }
     {offset
       c16U5: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.$wlvl2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c16U5_info" {
     block_c16U5_info:
         const _c16U5;
         const 0;
         const 4294967326;
         const SVzM_srt+896;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.32733104 UTC

[section ""data" . GHC.Enum.$fEnumWord_$ctoEnum_closure" {
     GHC.Enum.$fEnumWord_$ctoEnum_closure:
         const GHC.Enum.$fEnumWord_$ctoEnum_info;
         const 0;
 },
 GHC.Enum.$fEnumWord_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c16Uv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c16Uw; else goto c16Ux;
       c16Uw: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumWord_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16Ux: // global
           I64[Sp - 8] = block_c16Us_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u16UO; else goto c16Ut;
       u16UO: // global
           call _c16Us(R1) args: 0, res: 0, upd: 0;
       c16Ut: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord_$ctoEnum_info" {
     GHC.Enum.$fEnumWord_$ctoEnum_info:
         const GHC.Enum.$fEnumWord_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+896;
 },
 _c16Us() //  [R1]
         { []
         }
     {offset
       c16Us: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c16UC; else goto c16UB;
       c16UC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c16UB: // global
           _sVuB::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_sVuB::I64, 0)) goto c16UG; else goto c16UN;
       c16UG: // global
           Hp = Hp - 16;
           R2 = _sVuB::I64;
           Sp = Sp + 8;
           call GHC.Enum.$wlvl2_entry(R2) args: 8, res: 0, upd: 8;
       c16UN: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _sVuB::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c16Us_info" {
     block_c16Us_info:
         const _c16Us;
         const 0;
         const 4294967326;
         const SVzM_srt+896;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.334092094 UTC

[section ""data" . GHC.Enum.efdWord_closure" {
     GHC.Enum.efdWord_closure:
         const GHC.Enum.efdWord_info;
 },
 GHC.Enum.efdWord_entry() //  [R2, R3]
         { []
         }
     {offset
       c16V8: // global
           if (R3 < R2) goto c16V6; else goto c16V7;
       c16V6: // global
           R4 = 0;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtWordDn_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c16V7: // global
           R4 = 18446744073709551615;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtWordUp_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdWord_info" {
     GHC.Enum.efdWord_info:
         const GHC.Enum.efdWord_entry;
         const 0;
         const 14;
         const 8589934604;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.338439911 UTC

[section ""data" . GHC.Enum.$fEnumWord_$cenumFromThen_closure" {
     GHC.Enum.$fEnumWord_$cenumFromThen_closure:
         const GHC.Enum.$fEnumWord_$cenumFromThen_info;
 },
 GHC.Enum.$fEnumWord_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c16Vm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16Vq; else goto c16Vr;
       c16Vq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumWord_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c16Vr: // global
           I64[Sp - 16] = block_c16Vj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u16Vz; else goto c16Vk;
       u16Vz: // global
           call _c16Vj(R1) args: 0, res: 0, upd: 0;
       c16Vk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord_$cenumFromThen_info" {
     GHC.Enum.$fEnumWord_$cenumFromThen_info:
         const GHC.Enum.$fEnumWord_$cenumFromThen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c16Vj() //  [R1]
         { []
         }
     {offset
       c16Vj: // global
           I64[Sp] = block_c16Vp_info;
           _sVuK::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sVuK::I64;
           if (R1 & 7 != 0) goto u16Vy; else goto c16Vt;
       u16Vy: // global
           call _c16Vp(R1) args: 0, res: 0, upd: 0;
       c16Vt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c16Vj_info" {
     block_c16Vj_info:
         const _c16Vj;
         const 1;
         const 30;
 },
 _c16Vp() //  [R1]
         { []
         }
     {offset
       c16Vp: // global
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Enum.efdWord_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c16Vp_info" {
     block_c16Vp_info:
         const _c16Vp;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.34492974 UTC

[section ""data" . GHC.Enum.$fEnumWord_closure" {
     GHC.Enum.$fEnumWord_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumWord_$csucc_closure+1;
         const GHC.Enum.$fEnumWord_$cpred_closure+1;
         const GHC.Enum.$fEnumWord_$ctoEnum_closure+1;
         const GHC.Enum.$fEnumWord_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumWord_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumWord_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumWord_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumWord_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.347556178 UTC

[section ""data" . GHC.Enum.$fEnumInteger_$csucc_closure" {
     GHC.Enum.$fEnumInteger_$csucc_closure:
         const GHC.Enum.$fEnumInteger_$csucc_info;
         const 0;
 },
 GHC.Enum.$fEnumInteger_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c16VS: // global
           R3 = GHC.Enum.$fEnumInteger1_closure;
           R2 = R2;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger_$csucc_info" {
     GHC.Enum.$fEnumInteger_$csucc_info:
         const GHC.Enum.$fEnumInteger_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SVzM_srt+912;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.351570909 UTC

[section ""data" . GHC.Enum.$fEnumInteger_$cpred_closure" {
     GHC.Enum.$fEnumInteger_$cpred_closure:
         const GHC.Enum.$fEnumInteger_$cpred_info;
         const 0;
 },
 GHC.Enum.$fEnumInteger_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c16W3: // global
           R3 = GHC.Enum.$fEnumInteger1_closure;
           R2 = R2;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger_$cpred_info" {
     GHC.Enum.$fEnumInteger_$cpred_info:
         const GHC.Enum.$fEnumInteger_$cpred_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SVzM_srt+912;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.356648344 UTC

[section ""data" . GHC.Enum.$wenumDeltaInteger_closure" {
     GHC.Enum.$wenumDeltaInteger_closure:
         const GHC.Enum.$wenumDeltaInteger_info;
         const 0;
 },
 sat_sVuW_entry() //  [R1]
         { []
         }
     {offset
       c16Wp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c16Wv; else goto c16Ww;
       c16Wv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16Ww: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c16Wn_info;
           _sVuQ::P64 = P64[R1 + 16];
           R3 = _sVuQ::P64;
           R2 = P64[R1 + 24];
           P64[Sp - 24] = _sVuQ::P64;
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVuW_info" {
     sat_sVuW_info:
         const sat_sVuW_entry;
         const 2;
         const 21474836498;
         const SVzM_srt+920;
 },
 _c16Wn() //  [R1]
         { []
         }
     {offset
       c16Wn: // global
           _sVuQ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c16Ws_info;
           R3 = _sVuQ::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Enum.$wenumDeltaInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c16Wn_info" {
     block_c16Wn_info:
         const _c16Wn;
         const 1;
         const 4294967326;
         const SVzM_srt+936;
 },
 _c16Ws() //  [R1, R2]
         { []
         }
     {offset
       c16Ws: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c16WA; else goto c16Wz;
       c16WA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c16Wz: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c16Ws_info" {
     block_c16Ws_info:
         const _c16Ws;
         const 0;
         const 30;
 },
 GHC.Enum.$wenumDeltaInteger_entry() //  [R2, R3]
         { []
         }
     {offset
       c16WB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16WC; else goto c16WD;
       c16WC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$wenumDeltaInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c16WD: // global
           I64[Sp - 16] = block_c16We_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u16WH; else goto c16Wf;
       u16WH: // global
           call _c16We(R1) args: 0, res: 0, upd: 0;
       c16Wf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$wenumDeltaInteger_info" {
     GHC.Enum.$wenumDeltaInteger_info:
         const GHC.Enum.$wenumDeltaInteger_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SVzM_srt+920;
 },
 _c16We() //  [R1]
         { []
         }
     {offset
       c16We: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c16WG; else goto c16WF;
       c16WG: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c16WF: // global
           I64[Hp - 24] = sat_sVuW_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R2 = Hp - 24;
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c16We_info" {
     block_c16We_info:
         const _c16We;
         const 1;
         const 21474836510;
         const SVzM_srt+920;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.37054439 UTC

[section ""data" . GHC.Enum.enumDeltaIntegerFB_closure" {
     GHC.Enum.enumDeltaIntegerFB_closure:
         const GHC.Enum.enumDeltaIntegerFB_info;
         const 0;
 },
 sat_sVv4_entry() //  [R1]
         { []
         }
     {offset
       c16Xo: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c16Xp; else goto c16Xq;
       c16Xp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16Xq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c16Xm_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVv4_info" {
     sat_sVv4_info:
         const sat_sVv4_entry;
         const 3;
         const 4294967311;
         const SVzM_srt+920;
 },
 _c16Xm() //  [R1]
         { []
         }
     {offset
       c16Xm: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sVv0_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c16Xm_info" {
     block_c16Xm_info:
         const _c16Xm;
         const 1;
         const 4294967326;
         const SVzM_srt+920;
 },
 go_sVv0_entry() //  [R1, R2]
         { []
         }
     {offset
       c16Xu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c16Xv; else goto c16Xw;
       c16Xv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16Xw: // global
           I64[Sp - 32] = block_c16Xd_info;
           _sVv0::P64 = R1;
           _sVuX::P64 = P64[R1 + 7];
           _sVuZ::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sVuX::P64;
           P64[Sp - 16] = _sVuZ::P64;
           P64[Sp - 8] = _sVv0::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u16XA; else goto c16Xe;
       u16XA: // global
           call _c16Xd(R1) args: 0, res: 0, upd: 0;
       c16Xe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sVv0_info" {
     go_sVv0_info:
         const go_sVv0_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SVzM_srt+920;
 },
 _c16Xd() //  [R1]
         { []
         }
     {offset
       c16Xd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c16Xz; else goto c16Xy;
       c16Xz: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c16Xy: // global
           I64[Hp - 32] = sat_sVv4_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R3 = Hp - 32;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c16Xd_info" {
     block_c16Xd_info:
         const _c16Xd;
         const 3;
         const 4294967326;
         const SVzM_srt+920;
 },
 GHC.Enum.enumDeltaIntegerFB_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c16XB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c16XF; else goto c16XE;
       c16XF: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.enumDeltaIntegerFB_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c16XE: // global
           I64[Hp - 16] = go_sVv0_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = R3;
           R1 = Hp - 15;
           call go_sVv0_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumDeltaIntegerFB_info" {
     GHC.Enum.enumDeltaIntegerFB_info:
         const GHC.Enum.enumDeltaIntegerFB_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const SVzM_srt+920;
 },
 section ""data" . GHC.Enum.enumDeltaInteger_closure" {
     GHC.Enum.enumDeltaInteger_closure:
         const GHC.Enum.enumDeltaInteger_info;
         const 0;
 },
 GHC.Enum.enumDeltaInteger_entry() //  [R2, R3]
         { []
         }
     {offset
       c16XN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c16XO; else goto c16XP;
       c16XO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.enumDeltaInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c16XP: // global
           I64[Sp - 8] = block_c16XK_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Enum.$wenumDeltaInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumDeltaInteger_info" {
     GHC.Enum.enumDeltaInteger_info:
         const GHC.Enum.enumDeltaInteger_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SVzM_srt+936;
 },
 _c16XK() //  [R1, R2]
         { []
         }
     {offset
       c16XK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c16XS; else goto c16XR;
       c16XS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c16XR: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c16XK_info" {
     block_c16XK_info:
         const _c16XK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.385809271 UTC

[section ""data" . GHC.Enum.$fEnumInteger_$cenumFrom_closure" {
     GHC.Enum.$fEnumInteger_$cenumFrom_closure:
         const GHC.Enum.$fEnumInteger_$cenumFrom_info;
         const 0;
 },
 GHC.Enum.$fEnumInteger_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c16Yv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c16Yw; else goto c16Yx;
       c16Yw: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumInteger_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c16Yx: // global
           I64[Sp - 8] = block_c16Ys_info;
           R3 = GHC.Enum.$fEnumInteger1_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Enum.$wenumDeltaInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger_$cenumFrom_info" {
     GHC.Enum.$fEnumInteger_$cenumFrom_info:
         const GHC.Enum.$fEnumInteger_$cenumFrom_entry;
         const 0;
         const 313532612622;
         const 4294967301;
         const SVzM_srt+912;
 },
 _c16Ys() //  [R1, R2]
         { []
         }
     {offset
       c16Ys: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c16YA; else goto c16Yz;
       c16YA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c16Yz: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c16Ys_info" {
     block_c16Ys_info:
         const _c16Ys;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.395154366 UTC

[section ""data" . GHC.Enum.$fEnumInteger_$cenumFromThen_closure" {
     GHC.Enum.$fEnumInteger_$cenumFromThen_closure:
         const GHC.Enum.$fEnumInteger_$cenumFromThen_info;
         const 0;
 },
 sat_sVvg_entry() //  [R1]
         { []
         }
     {offset
       c16YS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16YT; else goto c16YU;
       c16YT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16YU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVvg_info" {
     sat_sVvg_info:
         const sat_sVvg_entry;
         const 2;
         const 4294967314;
         const SVzM_srt+928;
 },
 GHC.Enum.$fEnumInteger_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c16YY: // global
           _sVvf::P64 = R3;
           _sVve::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c16YZ; else goto c16Z0;
       c16Z0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c16Z2; else goto c16Z1;
       c16Z2: // global
           HpAlloc = 32;
           goto c16YZ;
       c16YZ: // global
           R3 = _sVvf::P64;
           R2 = _sVve::P64;
           R1 = GHC.Enum.$fEnumInteger_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c16Z1: // global
           I64[Hp - 24] = sat_sVvg_info;
           P64[Hp - 8] = _sVve::P64;
           P64[Hp] = _sVvf::P64;
           I64[Sp - 8] = block_c16YV_info;
           R3 = Hp - 24;
           R2 = _sVve::P64;
           Sp = Sp - 8;
           call GHC.Enum.$wenumDeltaInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger_$cenumFromThen_info" {
     GHC.Enum.$fEnumInteger_$cenumFromThen_info:
         const GHC.Enum.$fEnumInteger_$cenumFromThen_entry;
         const 0;
         const 150323855374;
         const 8589934607;
         const SVzM_srt+928;
 },
 _c16YV() //  [R1, R2]
         { []
         }
     {offset
       c16YV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c16Z5; else goto c16Z4;
       c16Z5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c16Z4: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c16YV_info" {
     block_c16YV_info:
         const _c16YV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.406026301 UTC

[section ""data" . GHC.Enum.$fEnumInteger2_closure" {
     GHC.Enum.$fEnumInteger2_closure:
         const GHC.Enum.$fEnumInteger2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumInteger2_entry() //  [R1]
         { []
         }
     {offset
       c16Zp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c16Zq; else goto c16Zr;
       c16Zq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16Zr: // global
           (_c16Zm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c16Zm::I64 == 0) goto c16Zo; else goto c16Zn;
       c16Zo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c16Zn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c16Zm::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger2_info" {
     GHC.Enum.$fEnumInteger2_info:
         const GHC.Enum.$fEnumInteger2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.416649489 UTC

[section ""data" . GHC.Enum.enumDeltaToInteger_closure" {
     GHC.Enum.enumDeltaToInteger_closure:
         const GHC.Enum.enumDeltaToInteger_info;
         const 0;
 },
 sat_sVvs_entry() //  [R1]
         { []
         }
     {offset
       c16ZW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c16ZX; else goto c16ZY;
       c16ZX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c16ZY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c16ZU_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVvs_info" {
     sat_sVvs_info:
         const sat_sVvs_entry;
         const 3;
         const 4294967311;
         const SVzM_srt+920;
 },
 _c16ZU() //  [R1]
         { []
         }
     {offset
       c16ZU: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sVvo_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c16ZU_info" {
     block_c16ZU_info:
         const _c16ZU;
         const 1;
         const 4294967326;
         const SVzM_srt+920;
 },
 go_sVvo_entry() //  [R1, R2]
         { []
         }
     {offset
       c1705: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1706; else goto c1707;
       c1706: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1707: // global
           I64[Sp - 32] = block_c16ZM_info;
           R3 = P64[R1 + 15];
           _sVvp::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _sVvp::P64;
           Sp = Sp - 32;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sVvo_info" {
     go_sVvo_info:
         const go_sVvo_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SVzM_srt+920;
 },
 _c16ZM() //  [R1]
         { []
         }
     {offset
       c16ZM: // global
           if (R1 == 1) goto c1704; else goto c1703;
       c1704: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1703: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c170b; else goto c170a;
       c170b: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c170a: // global
           I64[Hp - 56] = sat_sVvs_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           _sVvp::P64 = P64[Sp + 24];
           P64[Hp - 24] = _sVvp::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sVvp::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c16ZM_info" {
     block_c16ZM_info:
         const _c16ZM;
         const 3;
         const 4294967326;
         const SVzM_srt+920;
 },
 sat_sVvx_entry() //  [R1]
         { []
         }
     {offset
       c170w: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c170x; else goto c170y;
       c170x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c170y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c170u_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sVvx_info" {
     sat_sVvx_info:
         const sat_sVvx_entry;
         const 3;
         const 4294967311;
         const SVzM_srt+920;
 },
 _c170u() //  [R1]
         { []
         }
     {offset
       c170u: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sVvt_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c170u_info" {
     block_c170u_info:
         const _c170u;
         const 1;
         const 4294967326;
         const SVzM_srt+920;
 },
 go_sVvt_entry() //  [R1, R2]
         { []
         }
     {offset
       c170F: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c170G; else goto c170H;
       c170G: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c170H: // global
           I64[Sp - 32] = block_c170m_info;
           R3 = P64[R1 + 15];
           _sVvu::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _sVvu::P64;
           Sp = Sp - 32;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sVvt_info" {
     go_sVvt_info:
         const go_sVvt_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SVzM_srt+920;
 },
 _c170m() //  [R1]
         { []
         }
     {offset
       c170m: // global
           if (R1 == 1) goto c170E; else goto c170D;
       c170E: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c170D: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c170L; else goto c170K;
       c170L: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c170K: // global
           I64[Hp - 56] = sat_sVvx_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           _sVvu::P64 = P64[Sp + 24];
           P64[Hp - 24] = _sVvu::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sVvu::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c170m_info" {
     block_c170m_info:
         const _c170m;
         const 3;
         const 4294967326;
         const SVzM_srt+920;
 },
 GHC.Enum.enumDeltaToInteger_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c170S: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c170T; else goto c170U;
       c170T: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.enumDeltaToInteger_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c170U: // global
           I64[Sp - 32] = block_c16ZD_info;
           _sVvl::P64 = R3;
           R3 = GHC.Enum.$fEnumInteger2_closure;
           _sVvk::P64 = R2;
           R2 = _sVvl::P64;
           P64[Sp - 24] = _sVvk::P64;
           P64[Sp - 16] = _sVvl::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumDeltaToInteger_info" {
     GHC.Enum.enumDeltaToInteger_info:
         const GHC.Enum.enumDeltaToInteger_entry;
         const 0;
         const 1653562408974;
         const 12884901911;
         const SVzM_srt+920;
 },
 _c16ZD() //  [R1]
         { []
         }
     {offset
       c16ZD: // global
           _sVvk::P64 = P64[Sp + 8];
           _sVvl::P64 = P64[Sp + 16];
           _sVvm::P64 = P64[Sp + 24];
           if (R1 == 1) goto c170R; else goto c170Q;
       c170R: // global
           Hp = Hp + 24;
           _sVvn::I64 = R1;
           if (Hp > HpLim) (likely: False) goto c1710; else goto c170Z;
       c170Z: // global
           I64[Hp - 16] = go_sVvt_info;
           P64[Hp - 8] = _sVvl::P64;
           P64[Hp] = _sVvm::P64;
           R2 = _sVvk::P64;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call go_sVvt_entry(R2, R1) args: 8, res: 0, upd: 8;
       c170Q: // global
           Hp = Hp + 24;
           _sVvn::I64 = R1;
           if (Hp > HpLim) (likely: False) goto c1710; else goto c170W;
       c1710: // global
           HpAlloc = 24;
           R1 = _sVvn::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c170W: // global
           I64[Hp - 16] = go_sVvo_info;
           P64[Hp - 8] = _sVvl::P64;
           P64[Hp] = _sVvm::P64;
           R2 = _sVvk::P64;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call go_sVvo_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c16ZD_info" {
     block_c16ZD_info:
         const _c16ZD;
         const 3;
         const 4294967326;
         const SVzM_srt+920;
 },
 section ""data" . GHC.Enum.enumDeltaToIntegerFB_closure" {
     GHC.Enum.enumDeltaToIntegerFB_closure:
         const GHC.Enum.enumDeltaToIntegerFB_info;
         const 0;
 },
 section ""relreadonly" . u171j_srtd" {
     u171j_srtd:
         const SVzM_srt+512;
         const 61;
         const 1729382256910270467;
 },
 GHC.Enum.enumDeltaToIntegerFB_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c171a: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c171b; else goto c171c;
       c171b: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.enumDeltaToIntegerFB_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c171c: // global
           I64[Sp - 48] = block_c1715_info;
           _sVvz::P64 = R3;
           R3 = GHC.Enum.$fEnumInteger2_closure;
           _sVvy::P64 = R2;
           R2 = R5;
           P64[Sp - 40] = _sVvy::P64;
           P64[Sp - 32] = _sVvz::P64;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumDeltaToIntegerFB_info" {
     GHC.Enum.enumDeltaToIntegerFB_info:
         const GHC.Enum.enumDeltaToIntegerFB_entry;
         const 0;
         const 18446744069414584334;
         const 21474836505;
         const u171j_srtd;
 },
 _c1715() //  [R1]
         { []
         }
     {offset
       c1715: // global
           _sVvy::P64 = P64[Sp + 8];
           _sVvz::P64 = P64[Sp + 16];
           _sVvA::P64 = P64[Sp + 24];
           _sVvB::P64 = P64[Sp + 32];
           _sVvC::P64 = P64[Sp + 40];
           if (R1 == 1) goto c1719; else goto c1718;
       c1719: // global
           R6 = _sVvC::P64;
           R5 = _sVvB::P64;
           R4 = _sVvA::P64;
           R3 = _sVvz::P64;
           R2 = _sVvy::P64;
           Sp = Sp + 48;
           call GHC.Enum.up_fb_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 0, upd: 8;
       c1718: // global
           R6 = _sVvC::P64;
           R5 = _sVvB::P64;
           R4 = _sVvA::P64;
           R3 = _sVvz::P64;
           R2 = _sVvy::P64;
           Sp = Sp + 48;
           call GHC.Enum.dn_fb_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1715_info" {
     block_c1715_info:
         const _c1715;
         const 5;
         const 12884901918;
         const SVzM_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.447065138 UTC

[section ""data" . GHC.Enum.$fEnumInteger_$cenumFromTo_closure" {
     GHC.Enum.$fEnumInteger_$cenumFromTo_closure:
         const GHC.Enum.$fEnumInteger_$cenumFromTo_info;
         const 0;
 },
 GHC.Enum.$fEnumInteger_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c172l: // global
           R3 = R3;
           R2 = R2;
           call GHC.Enum.enumDeltaToInteger1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger_$cenumFromTo_info" {
     GHC.Enum.$fEnumInteger_$cenumFromTo_info:
         const GHC.Enum.$fEnumInteger_$cenumFromTo_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SVzM_srt+1016;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.452845156 UTC

[section ""data" . GHC.Enum.$fEnumInteger_$cenumFromThenTo_closure" {
     GHC.Enum.$fEnumInteger_$cenumFromThenTo_closure:
         const GHC.Enum.$fEnumInteger_$cenumFromThenTo_info;
         const 0;
 },
 GHC.Enum.$fEnumInteger_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c172y: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c172z; else goto c172A;
       c172z: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumInteger_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c172A: // global
           I64[Sp - 24] = block_c172w_info;
           _sVvF::P64 = R3;
           R3 = R2;
           _sVvE::P64 = R2;
           R2 = _sVvF::P64;
           P64[Sp - 16] = _sVvE::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger_$cenumFromThenTo_info" {
     GHC.Enum.$fEnumInteger_$cenumFromThenTo_info:
         const GHC.Enum.$fEnumInteger_$cenumFromThenTo_entry;
         const 0;
         const 17871358918670;
         const 12884901911;
         const SVzM_srt+928;
 },
 _c172w() //  [R1]
         { []
         }
     {offset
       c172w: // global
           R4 = P64[Sp + 16];
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Enum.enumDeltaToInteger_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c172w_info" {
     block_c172w_info:
         const _c172w;
         const 2;
         const 4294967326;
         const SVzM_srt+976;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.460385605 UTC

[section ""data" . GHC.Enum.$fEnumInteger_closure" {
     GHC.Enum.$fEnumInteger_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumInteger_$csucc_closure+1;
         const GHC.Enum.$fEnumInteger_$cpred_closure+1;
         const GHC.Enum.$fEnumInteger_$ctoEnum_closure+1;
         const GHC.Enum.$fEnumInteger_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInteger_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumInteger_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumInteger_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumInteger_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.464073256 UTC

[section ""data" . GHC.Enum.C:Bounded_closure" {
     GHC.Enum.C:Bounded_closure:
         const GHC.Enum.C:Bounded_info;
 },
 GHC.Enum.C:Bounded_entry() //  [R2, R3]
         { []
         }
     {offset
       c172S: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c172W; else goto c172V;
       c172W: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.C:Bounded_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c172V: // global
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.C:Bounded_info" {
     GHC.Enum.C:Bounded_info:
         const GHC.Enum.C:Bounded_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.47070806 UTC

[section ""data" . GHC.Enum.C:Enum_closure" {
     GHC.Enum.C:Enum_closure:
         const GHC.Enum.C:Enum_info;
 },
 GHC.Enum.C:Enum_slow() //  [R1]
         { []
         }
     {offset
       c1733: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.C:Enum_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2,
                                      R1) args: 32, res: 0, upd: 8;
     }
 },
 GHC.Enum.C:Enum_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1738: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c173c; else goto c173b;
       c173c: // global
           HpAlloc = 72;
           R1 = GHC.Enum.C:Enum_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c173b: // global
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = R6;
           P64[Hp - 16] = P64[Sp];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 63;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.C:Enum_info" {
     GHC.Enum.C:Enum_info:
         const GHC.Enum.C:Enum_entry;
         const 0;
         const 14;
         const 34359738368;
         const 0;
         const 8;
         const GHC.Enum.C:Enum_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.476162225 UTC

[section ""cstring" . i122k_str" {
     i122k_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,110,117,109,46,67,58,66,111,117,110,100,101,100]
 },
 GHC.Enum.C:Bounded_con_entry() //  [R1]
         { []
         }
     {offset
       c173n: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.C:Bounded_con_info" {
     GHC.Enum.C:Bounded_con_info:
         const GHC.Enum.C:Bounded_con_entry;
         const 2;
         const 4;
         const i122k_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.479938526 UTC

[section ""cstring" . i122m_str" {
     i122m_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,110,117,109,46,67,58,69,110,117,109]
 },
 GHC.Enum.C:Enum_con_entry() //  [R1]
         { []
         }
     {offset
       c173t: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.C:Enum_con_info" {
     GHC.Enum.C:Enum_con_info:
         const GHC.Enum.C:Enum_con_entry;
         const 8;
         const 1;
         const i122m_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:43.486344775 UTC

[section ""relreadonly" . SVzM_srt" {
     SVzM_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Enum.$fEnum()_$ctoEnum_closure;
         const GHC.Enum.$fEnum()3_closure;
         const GHC.Enum.$fEnum()4_closure;
         const GHC.Enum.$fEnum()6_closure;
         const GHC.Enum.$fEnumBool1_closure;
         const GHC.Enum.$fEnumBool_$ctoEnum_closure;
         const GHC.Enum.$fEnumBool_$cpred_closure;
         const GHC.Enum.$fEnumBool5_closure;
         const GHC.Enum.$fEnumBool_$csucc_closure;
         const GHC.Enum.$fEnumBool6_closure;
         const GHC.Enum.$fEnumOrdering_$ctoEnum_closure;
         const GHC.Enum.$fEnumOrdering5_closure;
         const GHC.Enum.$fEnumOrdering_$cpred_closure;
         const GHC.Enum.$fEnumOrdering6_closure;
         const GHC.Enum.$fEnumOrdering_$csucc_closure;
         const GHC.Enum.$fEnumOrdering7_closure;
         const GHC.Enum.$fEnumChar_$cpred_closure;
         const GHC.Enum.$fEnumChar1_closure;
         const GHC.Enum.$fEnumChar_$csucc_closure;
         const GHC.Enum.$fEnumChar2_closure;
         const GHC.Enum.$fEnumInt_$cpred_closure;
         const GHC.Enum.$fEnumInt1_closure;
         const GHC.Enum.$fEnumInt_$csucc_closure;
         const GHC.Enum.$fEnumInt2_closure;
         const GHC.Show.$fShow(,)_go1_closure;
         const GHC.Enum.$wtoEnumError_closure;
         const GHC.Enum.toEnumError_closure;
         const lvl21_rUR1_closure;
         const lvl22_rUR2_closure;
         const GHC.Enum.fromEnumError_closure;
         const lvl27_rUR7_closure;
         const GHC.Enum.succError_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const lvl30_rURa_closure;
         const GHC.Enum.predError_closure;
         const GHC.Enum.$fEnumOrdering_go_closure;
         const GHC.Enum.$fEnumOrdering_$cenumFrom_closure;
         const GHC.Enum.$fEnumOrdering1_closure;
         const GHC.Enum.$fEnumOrdering2_closure;
         const GHC.Enum.$fEnumOrdering3_closure;
         const GHC.Enum.$fEnumOrdering_go2_closure;
         const GHC.Enum.$fEnumOrdering_go1_closure;
         const GHC.Enum.$fEnumOrdering_$cenumFromTo_closure;
         const GHC.Enum.$fEnumBool_go_closure;
         const GHC.Enum.$fEnumBool1_closure;
         const GHC.Enum.$fEnumBool_$cenumFrom_closure;
         const GHC.Enum.$fEnumBool2_closure;
         const GHC.Enum.$fEnumBool3_closure;
         const GHC.Enum.$fEnumBool_go1_closure;
         const GHC.Enum.$fEnumBool_$cenumFromTo_closure;
         const GHC.Enum.$fEnumOrdering5_closure;
         const GHC.Enum.$fEnumOrdering_$cenumFromThenTo_closure;
         const GHC.Enum.$fEnumBool_$cenumFromThenTo_closure;
         const GHC.Enum.$fEnumBool_$cenumFromThen_closure;
         const GHC.Enum.$fEnumOrdering_$cenumFromThen_closure;
         const lvl32_rURc_closure;
         const GHC.Enum.$fEnumWord_$cfromEnum_closure;
         const GHC.Enum.$fEnumWord1_closure;
         const sat_sVk2_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Enum.$fEnumInteger1_closure;
         const GHC.Enum.enumDeltaToInteger1_closure;
         const GHC.Enum.enumDeltaToInteger1FB_closure;
         const GHC.Enum.up_fb_closure;
         const GHC.Enum.dn_fb_closure;
         const GHC.Err.error_closure;
         const lvl42_rURm_closure;
         const GHC.Enum.$fEnumVecElem_$cpred_closure;
         const GHC.Enum.$fEnumVecElem1_closure;
         const GHC.Enum.$fEnumVecElem_$csucc_closure;
         const GHC.Enum.$fEnumVecElem2_closure;
         const lvl47_rURr_closure;
         const lvl48_rURs_closure;
         const lvl49_rURt_closure;
         const GHC.Enum.$wlvl1_closure;
         const GHC.Enum.$fEnumVecElem_$ctoEnum_closure;
         const GHC.Enum.$w$ctoEnum1_closure;
         const GHC.Enum.$fEnumVecElem_$cenumFromTo_closure;
         const GHC.Enum.$fEnumVecElem_$cenumFromThenTo_closure;
         const lvl57_rURB_closure;
         const GHC.Enum.$fEnumVecCount_$cpred_closure;
         const GHC.Enum.$fEnumVecCount7_closure;
         const GHC.Enum.$fEnumVecCount_$csucc_closure;
         const GHC.Enum.$fEnumVecCount8_closure;
         const lvl60_rURE_closure;
         const lvl61_rURF_closure;
         const GHC.Enum.$wlvl_closure;
         const GHC.Enum.$fEnumVecCount_$ctoEnum_closure;
         const GHC.Enum.$w$ctoEnum_closure;
         const GHC.Enum.$fEnumVecCount_$cenumFrom_closure;
         const GHC.Enum.$fEnumVecCount1_closure;
         const GHC.Enum.$fEnumVecCount2_closure;
         const GHC.Enum.$fEnumVecCount3_closure;
         const GHC.Enum.$fEnumVecCount4_closure;
         const GHC.Enum.$fEnumVecCount5_closure;
         const GHC.Enum.$fEnumVecCount6_closure;
         const GHC.Enum.$fEnumVecCount_go5_closure;
         const GHC.Enum.$fEnumVecCount_go4_closure;
         const GHC.Enum.$fEnumVecCount_go3_closure;
         const GHC.Enum.$fEnumVecCount_go2_closure;
         const GHC.Enum.$fEnumVecCount_go1_closure;
         const GHC.Enum.$fEnumVecCount_go_closure;
         const GHC.Enum.$fEnumVecCount_$cenumFromTo_closure;
         const GHC.Enum.$fEnumVecCount_$cenumFromThenTo_closure;
         const lvl32_rURc_closure;
         const GHC.Enum.succError_closure;
         const GHC.Enum.$fEnumWord_$csucc_closure;
         const GHC.Enum.$fEnumWord4_closure;
         const GHC.Enum.$fEnumWord_$cpred_closure;
         const GHC.Enum.$fEnumWord3_closure;
         const GHC.Enum.$fEnumWord2_closure;
         const GHC.Enum.$wlvl2_closure;
         const GHC.Enum.$fEnumWord_$ctoEnum_closure;
         const GHC.Enum.$fEnumInteger1_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const GHC.Enum.$wenumDeltaInteger_closure;
         const GHC.Enum.enumDeltaIntegerFB_closure;
         const GHC.Enum.enumDeltaInteger_closure;
         const GHC.Enum.$fEnumInteger_$cenumFrom_closure;
         const GHC.Enum.$fEnumInteger_$cenumFromThen_closure;
         const GHC.Enum.enumDeltaToInteger_closure;
         const GHC.Enum.$fEnumInteger2_closure;
         const GHC.Enum.enumDeltaToIntegerFB_closure;
         const GHC.Enum.dn_fb_closure;
         const GHC.Enum.up_fb_closure;
         const GHC.Enum.enumDeltaToInteger1_closure;
         const GHC.Enum.$fEnumInteger_$cenumFromThenTo_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:56.955851041 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:55:56.957923461 UTC

[section ""data" . GHC.Enum.minBound_closure" {
     GHC.Enum.minBound_closure:
         const GHC.Enum.minBound_info;
 },
 GHC.Enum.minBound_entry() //  [R2]
         { []
         }
     {offset
       c17Hm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17Hn; else goto c17Ho;
       c17Hn: // global
           R2 = R2;
           R1 = GHC.Enum.minBound_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17Ho: // global
           I64[Sp - 8] = block_c17Hj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17Hs; else goto c17Hk;
       u17Hs: // global
           call _c17Hj(R1) args: 0, res: 0, upd: 0;
       c17Hk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.minBound_info" {
     GHC.Enum.minBound_info:
         const GHC.Enum.minBound_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c17Hj() //  [R1]
         { []
         }
     {offset
       c17Hj: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17Hj_info" {
     block_c17Hj_info:
         const _c17Hj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:56.963342194 UTC

[section ""data" . GHC.Enum.maxBound_closure" {
     GHC.Enum.maxBound_closure:
         const GHC.Enum.maxBound_info;
 },
 GHC.Enum.maxBound_entry() //  [R2]
         { []
         }
     {offset
       c17HK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17HL; else goto c17HM;
       c17HL: // global
           R2 = R2;
           R1 = GHC.Enum.maxBound_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17HM: // global
           I64[Sp - 8] = block_c17HH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17HQ; else goto c17HI;
       u17HQ: // global
           call _c17HH(R1) args: 0, res: 0, upd: 0;
       c17HI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.maxBound_info" {
     GHC.Enum.maxBound_info:
         const GHC.Enum.maxBound_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c17HH() //  [R1]
         { []
         }
     {offset
       c17HH: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17HH_info" {
     block_c17HH_info:
         const _c17HH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:56.968658216 UTC

[section ""data" . GHC.Enum.succ_closure" {
     GHC.Enum.succ_closure:
         const GHC.Enum.succ_info;
 },
 GHC.Enum.succ_entry() //  [R2]
         { []
         }
     {offset
       c17I8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17I9; else goto c17Ia;
       c17I9: // global
           R2 = R2;
           R1 = GHC.Enum.succ_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17Ia: // global
           I64[Sp - 8] = block_c17I5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17Ie; else goto c17I6;
       u17Ie: // global
           call _c17I5(R1) args: 0, res: 0, upd: 0;
       c17I6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.succ_info" {
     GHC.Enum.succ_info:
         const GHC.Enum.succ_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c17I5() //  [R1]
         { []
         }
     {offset
       c17I5: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17I5_info" {
     block_c17I5_info:
         const _c17I5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:56.974050079 UTC

[section ""data" . GHC.Enum.pred_closure" {
     GHC.Enum.pred_closure:
         const GHC.Enum.pred_info;
 },
 GHC.Enum.pred_entry() //  [R2]
         { []
         }
     {offset
       c17Iw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17Ix; else goto c17Iy;
       c17Ix: // global
           R2 = R2;
           R1 = GHC.Enum.pred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17Iy: // global
           I64[Sp - 8] = block_c17It_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17IC; else goto c17Iu;
       u17IC: // global
           call _c17It(R1) args: 0, res: 0, upd: 0;
       c17Iu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.pred_info" {
     GHC.Enum.pred_info:
         const GHC.Enum.pred_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c17It() //  [R1]
         { []
         }
     {offset
       c17It: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17It_info" {
     block_c17It_info:
         const _c17It;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:56.979419606 UTC

[section ""data" . GHC.Enum.toEnum_closure" {
     GHC.Enum.toEnum_closure:
         const GHC.Enum.toEnum_info;
 },
 GHC.Enum.toEnum_entry() //  [R2]
         { []
         }
     {offset
       c17IU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17IV; else goto c17IW;
       c17IV: // global
           R2 = R2;
           R1 = GHC.Enum.toEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17IW: // global
           I64[Sp - 8] = block_c17IR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17J0; else goto c17IS;
       u17J0: // global
           call _c17IR(R1) args: 0, res: 0, upd: 0;
       c17IS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.toEnum_info" {
     GHC.Enum.toEnum_info:
         const GHC.Enum.toEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c17IR() //  [R1]
         { []
         }
     {offset
       c17IR: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17IR_info" {
     block_c17IR_info:
         const _c17IR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:56.98480416 UTC

[section ""data" . GHC.Enum.fromEnum_closure" {
     GHC.Enum.fromEnum_closure:
         const GHC.Enum.fromEnum_info;
 },
 GHC.Enum.fromEnum_entry() //  [R2]
         { []
         }
     {offset
       c17Ji: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17Jj; else goto c17Jk;
       c17Jj: // global
           R2 = R2;
           R1 = GHC.Enum.fromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17Jk: // global
           I64[Sp - 8] = block_c17Jf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17Jo; else goto c17Jg;
       u17Jo: // global
           call _c17Jf(R1) args: 0, res: 0, upd: 0;
       c17Jg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.fromEnum_info" {
     GHC.Enum.fromEnum_info:
         const GHC.Enum.fromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c17Jf() //  [R1]
         { []
         }
     {offset
       c17Jf: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17Jf_info" {
     block_c17Jf_info:
         const _c17Jf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:56.990820105 UTC

[section ""data" . GHC.Enum.enumFrom_closure" {
     GHC.Enum.enumFrom_closure:
         const GHC.Enum.enumFrom_info;
 },
 GHC.Enum.enumFrom_entry() //  [R2]
         { []
         }
     {offset
       c17JG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17JH; else goto c17JI;
       c17JH: // global
           R2 = R2;
           R1 = GHC.Enum.enumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17JI: // global
           I64[Sp - 8] = block_c17JD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17JM; else goto c17JE;
       u17JM: // global
           call _c17JD(R1) args: 0, res: 0, upd: 0;
       c17JE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumFrom_info" {
     GHC.Enum.enumFrom_info:
         const GHC.Enum.enumFrom_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c17JD() //  [R1]
         { []
         }
     {offset
       c17JD: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17JD_info" {
     block_c17JD_info:
         const _c17JD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:56.996128123 UTC

[section ""data" . GHC.Enum.enumFromThen_closure" {
     GHC.Enum.enumFromThen_closure:
         const GHC.Enum.enumFromThen_info;
 },
 GHC.Enum.enumFromThen_entry() //  [R2]
         { []
         }
     {offset
       c17K4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17K5; else goto c17K6;
       c17K5: // global
           R2 = R2;
           R1 = GHC.Enum.enumFromThen_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17K6: // global
           I64[Sp - 8] = block_c17K1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17Ka; else goto c17K2;
       u17Ka: // global
           call _c17K1(R1) args: 0, res: 0, upd: 0;
       c17K2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumFromThen_info" {
     GHC.Enum.enumFromThen_info:
         const GHC.Enum.enumFromThen_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c17K1() //  [R1]
         { []
         }
     {offset
       c17K1: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17K1_info" {
     block_c17K1_info:
         const _c17K1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.001363222 UTC

[section ""data" . GHC.Enum.enumFromTo_closure" {
     GHC.Enum.enumFromTo_closure:
         const GHC.Enum.enumFromTo_info;
 },
 GHC.Enum.enumFromTo_entry() //  [R2]
         { []
         }
     {offset
       c17Ks: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17Kt; else goto c17Ku;
       c17Kt: // global
           R2 = R2;
           R1 = GHC.Enum.enumFromTo_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17Ku: // global
           I64[Sp - 8] = block_c17Kp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17Ky; else goto c17Kq;
       u17Ky: // global
           call _c17Kp(R1) args: 0, res: 0, upd: 0;
       c17Kq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumFromTo_info" {
     GHC.Enum.enumFromTo_info:
         const GHC.Enum.enumFromTo_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c17Kp() //  [R1]
         { []
         }
     {offset
       c17Kp: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17Kp_info" {
     block_c17Kp_info:
         const _c17Kp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.006677384 UTC

[section ""data" . GHC.Enum.enumFromThenTo_closure" {
     GHC.Enum.enumFromThenTo_closure:
         const GHC.Enum.enumFromThenTo_info;
 },
 GHC.Enum.enumFromThenTo_entry() //  [R2]
         { []
         }
     {offset
       c17KQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17KR; else goto c17KS;
       c17KR: // global
           R2 = R2;
           R1 = GHC.Enum.enumFromThenTo_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17KS: // global
           I64[Sp - 8] = block_c17KN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17KW; else goto c17KO;
       u17KW: // global
           call _c17KN(R1) args: 0, res: 0, upd: 0;
       c17KO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumFromThenTo_info" {
     GHC.Enum.enumFromThenTo_info:
         const GHC.Enum.enumFromThenTo_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c17KN() //  [R1]
         { []
         }
     {offset
       c17KN: // global
           R1 = P64[R1 + 63];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17KN_info" {
     block_c17KN_info:
         const _c17KN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.011215115 UTC

[section ""data" . GHC.Enum.$fBoundedChar_$cmaxBound_closure" {
     GHC.Enum.$fBoundedChar_$cmaxBound_closure:
         const GHC.Types.C#_con_info;
         const 1114111;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.012798386 UTC

[section ""data" . GHC.Enum.$fBoundedChar_$cminBound_closure" {
     GHC.Enum.$fBoundedChar_$cminBound_closure:
         const GHC.Types.C#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.01451161 UTC

[section ""data" . GHC.Enum.$fBoundedChar_closure" {
     GHC.Enum.$fBoundedChar_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Enum.$fBoundedChar_$cminBound_closure+1;
         const GHC.Enum.$fBoundedChar_$cmaxBound_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.016151578 UTC

[section ""data" . GHC.Enum.$fBoundedInt_closure" {
     GHC.Enum.$fBoundedInt_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Base.minInt_closure;
         const GHC.Base.maxInt_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.018217701 UTC

[section ""data" . GHC.Enum.$fBoundedWord_$cmaxBound_closure" {
     GHC.Enum.$fBoundedWord_$cmaxBound_closure:
         const GHC.Types.W#_con_info;
         const 18446744073709551615;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.020293849 UTC

[section ""data" . GHC.Enum.$fBoundedWord_$cminBound_closure" {
     GHC.Enum.$fBoundedWord_$cminBound_closure:
         const GHC.Types.W#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.022025021 UTC

[section ""data" . GHC.Enum.$fBoundedWord_closure" {
     GHC.Enum.$fBoundedWord_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Enum.$fBoundedWord_$cminBound_closure+1;
         const GHC.Enum.$fBoundedWord_$cmaxBound_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.023725003 UTC

[section ""data" . GHC.Enum.$fEnum()_many_closure" {
     GHC.Enum.$fEnum()_many_closure:
         const :_con_info;
         const GHC.Tuple.()_closure+1;
         const GHC.Enum.$fEnum()_many_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.026703031 UTC

[section ""data" . GHC.Enum.$fEnum()_$cenumFromThenTo_closure" {
     GHC.Enum.$fEnum()_$cenumFromThenTo_closure:
         const GHC.Enum.$fEnum()_$cenumFromThenTo_info;
 },
 GHC.Enum.$fEnum()_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c17Lm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c17Lv; else goto c17Lw;
       c17Lv: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnum()_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c17Lw: // global
           I64[Sp - 24] = block_c17Lj_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u17LF; else goto c17Lk;
       u17LF: // global
           call _c17Lj() args: 0, res: 0, upd: 0;
       c17Lk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()_$cenumFromThenTo_info" {
     GHC.Enum.$fEnum()_$cenumFromThenTo_info:
         const GHC.Enum.$fEnum()_$cenumFromThenTo_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c17Lj() //  []
         { []
         }
     {offset
       c17Lj: // global
           _s1751::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c17Lp_info;
           R1 = _s1751::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u17LE; else goto c17Lq;
       u17LE: // global
           call _c17Lp() args: 0, res: 0, upd: 0;
       c17Lq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c17Lj_info" {
     block_c17Lj_info:
         const _c17Lj;
         const 2;
         const 30;
 },
 _c17Lp() //  []
         { []
         }
     {offset
       c17Lp: // global
           _s1752::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c17Lu_info;
           R1 = _s1752::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u17LG; else goto c17Lz;
       u17LG: // global
           call _c17Lu() args: 0, res: 0, upd: 0;
       c17Lz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c17Lp_info" {
     block_c17Lp_info:
         const _c17Lp;
         const 1;
         const 30;
 },
 _c17Lu() //  []
         { []
         }
     {offset
       c17Lu: // global
           R1 = GHC.Enum.$fEnum()_many_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17Lu_info" {
     block_c17Lu_info:
         const _c17Lu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.034777467 UTC

[section ""data" . GHC.Enum.$fEnum()1_closure" {
     GHC.Enum.$fEnum()1_closure:
         const :_con_info;
         const GHC.Tuple.()_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.037590979 UTC

[section ""data" . GHC.Enum.$fEnum()_$cenumFromTo_closure" {
     GHC.Enum.$fEnum()_$cenumFromTo_closure:
         const GHC.Enum.$fEnum()_$cenumFromTo_info;
 },
 GHC.Enum.$fEnum()_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c17Ma: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c17Me; else goto c17Mf;
       c17Me: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnum()_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c17Mf: // global
           I64[Sp - 16] = block_c17M7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u17Mn; else goto c17M8;
       u17Mn: // global
           call _c17M7() args: 0, res: 0, upd: 0;
       c17M8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()_$cenumFromTo_info" {
     GHC.Enum.$fEnum()_$cenumFromTo_info:
         const GHC.Enum.$fEnum()_$cenumFromTo_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c17M7() //  []
         { []
         }
     {offset
       c17M7: // global
           _s1757::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c17Md_info;
           R1 = _s1757::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u17Mm; else goto c17Mh;
       u17Mm: // global
           call _c17Md() args: 0, res: 0, upd: 0;
       c17Mh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c17M7_info" {
     block_c17M7_info:
         const _c17M7;
         const 1;
         const 30;
 },
 _c17Md() //  []
         { []
         }
     {offset
       c17Md: // global
           R1 = GHC.Enum.$fEnum()1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17Md_info" {
     block_c17Md_info:
         const _c17Md;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.044813766 UTC

[section ""data" . GHC.Enum.$fEnum()_$cenumFromThen_closure" {
     GHC.Enum.$fEnum()_$cenumFromThen_closure:
         const GHC.Enum.$fEnum()_$cenumFromThen_info;
 },
 GHC.Enum.$fEnum()_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c17ML: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c17MP; else goto c17MQ;
       c17MP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnum()_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c17MQ: // global
           I64[Sp - 16] = block_c17MI_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u17MY; else goto c17MJ;
       u17MY: // global
           call _c17MI() args: 0, res: 0, upd: 0;
       c17MJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()_$cenumFromThen_info" {
     GHC.Enum.$fEnum()_$cenumFromThen_info:
         const GHC.Enum.$fEnum()_$cenumFromThen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c17MI() //  []
         { []
         }
     {offset
       c17MI: // global
           _s175b::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c17MO_info;
           R1 = _s175b::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u17MX; else goto c17MS;
       u17MX: // global
           call _c17MO() args: 0, res: 0, upd: 0;
       c17MS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c17MI_info" {
     block_c17MI_info:
         const _c17MI;
         const 1;
         const 30;
 },
 _c17MO() //  []
         { []
         }
     {offset
       c17MO: // global
           R1 = GHC.Enum.$fEnum()_many_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17MO_info" {
     block_c17MO_info:
         const _c17MO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.05220938 UTC

[section ""data" . GHC.Enum.$fEnum()_$cenumFrom_closure" {
     GHC.Enum.$fEnum()_$cenumFrom_closure:
         const GHC.Enum.$fEnum()_$cenumFrom_info;
 },
 GHC.Enum.$fEnum()_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c17Nm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17Nn; else goto c17No;
       c17Nn: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnum()_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17No: // global
           I64[Sp - 8] = block_c17Nj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17Ns; else goto c17Nk;
       u17Ns: // global
           call _c17Nj() args: 0, res: 0, upd: 0;
       c17Nk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()_$cenumFrom_info" {
     GHC.Enum.$fEnum()_$cenumFrom_info:
         const GHC.Enum.$fEnum()_$cenumFrom_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c17Nj() //  []
         { []
         }
     {offset
       c17Nj: // global
           R1 = GHC.Enum.$fEnum()1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17Nj_info" {
     block_c17Nj_info:
         const _c17Nj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.056807145 UTC

[section ""data" . GHC.Enum.$fEnum()2_closure" {
     GHC.Enum.$fEnum()2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.059271147 UTC

[section ""data" . GHC.Enum.$fEnum()_$cfromEnum_closure" {
     GHC.Enum.$fEnum()_$cfromEnum_closure:
         const GHC.Enum.$fEnum()_$cfromEnum_info;
 },
 GHC.Enum.$fEnum()_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c17NM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17NN; else goto c17NO;
       c17NN: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnum()_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17NO: // global
           I64[Sp - 8] = block_c17NJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17NS; else goto c17NK;
       u17NS: // global
           call _c17NJ() args: 0, res: 0, upd: 0;
       c17NK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()_$cfromEnum_info" {
     GHC.Enum.$fEnum()_$cfromEnum_info:
         const GHC.Enum.$fEnum()_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c17NJ() //  []
         { []
         }
     {offset
       c17NJ: // global
           R1 = GHC.Enum.$fEnum()2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17NJ_info" {
     block_c17NJ_info:
         const _c17NJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.063982419 UTC

[section ""cstring" . lvl_rUQG_bytes" {
     lvl_rUQG_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,40,41,46,116,111,69,110,117,109,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.06710428 UTC

[section ""data" . GHC.Enum.$fEnum()3_closure" {
     GHC.Enum.$fEnum()3_closure:
         const GHC.Enum.$fEnum()3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnum()3_entry() //  [R1]
         { []
         }
     {offset
       c17Od: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c17Oe; else goto c17Of;
       c17Oe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c17Of: // global
           (_c17O8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c17O8::I64 == 0) goto c17Oa; else goto c17O9;
       c17Oa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c17O9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c17O8::I64;
           I64[Sp - 24] = block_c17Ob_info;
           R2 = lvl_rUQG_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()3_info" {
     GHC.Enum.$fEnum()3_info:
         const GHC.Enum.$fEnum()3_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt;
 },
 _c17Ob() //  [R1]
         { []
         }
     {offset
       c17Ob: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c17Ob_info" {
     block_c17Ob_info:
         const _c17Ob;
         const 0;
         const 4294967326;
         const S17Oj_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.072840697 UTC

[section ""data" . GHC.Enum.$fEnum()_$ctoEnum_closure" {
     GHC.Enum.$fEnum()_$ctoEnum_closure:
         const GHC.Enum.$fEnum()_$ctoEnum_info;
         const 0;
 },
 GHC.Enum.$fEnum()_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c17OD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17OE; else goto c17OF;
       c17OE: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnum()_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17OF: // global
           I64[Sp - 8] = block_c17OA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17ON; else goto c17OB;
       u17ON: // global
           call _c17OA(R1) args: 0, res: 0, upd: 0;
       c17OB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()_$ctoEnum_info" {
     GHC.Enum.$fEnum()_$ctoEnum_info:
         const GHC.Enum.$fEnum()_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+8;
 },
 _c17OA() //  [R1]
         { []
         }
     {offset
       c17OA: // global
           if (I64[R1 + 7] == 0) goto c17OM; else goto c17OL;
       c17OM: // global
           R1 = ()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c17OL: // global
           R1 = GHC.Enum.$fEnum()3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17OA_info" {
     block_c17OA_info:
         const _c17OA;
         const 0;
         const 4294967326;
         const S17Oj_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.078063065 UTC

[section ""cstring" . GHC.Enum.$fEnum()5_bytes" {
     GHC.Enum.$fEnum()5_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,40,41,46,112,114,101,100,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.080381844 UTC

[section ""data" . GHC.Enum.$fEnum()4_closure" {
     GHC.Enum.$fEnum()4_closure:
         const GHC.Enum.$fEnum()4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnum()4_entry() //  [R1]
         { []
         }
     {offset
       c17P8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c17P9; else goto c17Pa;
       c17P9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c17Pa: // global
           (_c17P5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c17P5::I64 == 0) goto c17P7; else goto c17P6;
       c17P7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c17P6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c17P5::I64;
           R2 = GHC.Enum.$fEnum()5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()4_info" {
     GHC.Enum.$fEnum()4_info:
         const GHC.Enum.$fEnum()4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.084682316 UTC

[section ""data" . GHC.Enum.$fEnum()_$cpred_closure" {
     GHC.Enum.$fEnum()_$cpred_closure:
         const GHC.Enum.$fEnum()_$cpred_info;
         const 0;
 },
 GHC.Enum.$fEnum()_$cpred_entry() //  []
         { []
         }
     {offset
       c17Pn: // global
           R2 = GHC.Enum.$fEnum()4_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()_$cpred_info" {
     GHC.Enum.$fEnum()_$cpred_info:
         const GHC.Enum.$fEnum()_$cpred_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const S17Oj_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.087734622 UTC

[section ""cstring" . GHC.Enum.$fEnum()7_bytes" {
     GHC.Enum.$fEnum()7_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,40,41,46,115,117,99,99,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.090033395 UTC

[section ""data" . GHC.Enum.$fEnum()6_closure" {
     GHC.Enum.$fEnum()6_closure:
         const GHC.Enum.$fEnum()6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnum()6_entry() //  [R1]
         { []
         }
     {offset
       c17PB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c17PC; else goto c17PD;
       c17PC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c17PD: // global
           (_c17Py::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c17Py::I64 == 0) goto c17PA; else goto c17Pz;
       c17PA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c17Pz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c17Py::I64;
           R2 = GHC.Enum.$fEnum()7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()6_info" {
     GHC.Enum.$fEnum()6_info:
         const GHC.Enum.$fEnum()6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.094011632 UTC

[section ""data" . GHC.Enum.$fEnum()_$csucc_closure" {
     GHC.Enum.$fEnum()_$csucc_closure:
         const GHC.Enum.$fEnum()_$csucc_info;
         const 0;
 },
 GHC.Enum.$fEnum()_$csucc_entry() //  []
         { []
         }
     {offset
       c17PQ: // global
           R2 = GHC.Enum.$fEnum()6_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnum()_$csucc_info" {
     GHC.Enum.$fEnum()_$csucc_info:
         const GHC.Enum.$fEnum()_$csucc_entry;
         const 0;
         const 73014444046;
         const 4294967301;
         const S17Oj_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.097045755 UTC

[section ""data" . GHC.Enum.$fEnum()_closure" {
     GHC.Enum.$fEnum()_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnum()_$csucc_closure+1;
         const GHC.Enum.$fEnum()_$cpred_closure+1;
         const GHC.Enum.$fEnum()_$ctoEnum_closure+1;
         const GHC.Enum.$fEnum()_$cfromEnum_closure+1;
         const GHC.Enum.$fEnum()_$cenumFrom_closure+1;
         const GHC.Enum.$fEnum()_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnum()_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnum()_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.098823026 UTC

[section ""data" . GHC.Enum.$fEnumBool4_closure" {
     GHC.Enum.$fEnumBool4_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.101370662 UTC

[section ""data" . GHC.Enum.$fEnumBool_$cfromEnum_closure" {
     GHC.Enum.$fEnumBool_$cfromEnum_closure:
         const GHC.Enum.$fEnumBool_$cfromEnum_info;
 },
 GHC.Enum.$fEnumBool_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c17Qa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17Qb; else goto c17Qc;
       c17Qb: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17Qc: // global
           I64[Sp - 8] = block_c17Q3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17Qj; else goto c17Q4;
       u17Qj: // global
           call _c17Q3(R1) args: 0, res: 0, upd: 0;
       c17Q4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_$cfromEnum_info" {
     GHC.Enum.$fEnumBool_$cfromEnum_info:
         const GHC.Enum.$fEnumBool_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c17Q3() //  [R1]
         { []
         }
     {offset
       c17Q3: // global
           if (R1 & 7 == 1) goto c17Q7; else goto c17Q8;
       c17Q7: // global
           R1 = GHC.Enum.$fEnum()2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c17Q8: // global
           R1 = GHC.Enum.$fEnumBool4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17Q3_info" {
     block_c17Q3_info:
         const _c17Q3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.106910658 UTC

[section ""cstring" . lvl1_rUQH_bytes" {
     lvl1_rUQH_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,66,111,111,108,46,116,111,69,110,117,109,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.109454861 UTC

[section ""data" . GHC.Enum.$fEnumBool1_closure" {
     GHC.Enum.$fEnumBool1_closure:
         const GHC.Enum.$fEnumBool1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumBool1_entry() //  [R1]
         { []
         }
     {offset
       c17QH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c17QI; else goto c17QJ;
       c17QI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c17QJ: // global
           (_c17QC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c17QC::I64 == 0) goto c17QE; else goto c17QD;
       c17QE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c17QD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c17QC::I64;
           I64[Sp - 24] = block_c17QF_info;
           R2 = lvl1_rUQH_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool1_info" {
     GHC.Enum.$fEnumBool1_info:
         const GHC.Enum.$fEnumBool1_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt;
 },
 _c17QF() //  [R1]
         { []
         }
     {offset
       c17QF: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c17QF_info" {
     block_c17QF_info:
         const _c17QF;
         const 0;
         const 4294967326;
         const S17Oj_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.115580518 UTC

[section ""data" . GHC.Enum.$fEnumBool_$ctoEnum_closure" {
     GHC.Enum.$fEnumBool_$ctoEnum_closure:
         const GHC.Enum.$fEnumBool_$ctoEnum_info;
         const 0;
 },
 GHC.Enum.$fEnumBool_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c17R6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17R7; else goto c17R8;
       c17R7: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17R8: // global
           I64[Sp - 8] = block_c17R3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17Ri; else goto c17R4;
       u17Ri: // global
           call _c17R3(R1) args: 0, res: 0, upd: 0;
       c17R4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_$ctoEnum_info" {
     GHC.Enum.$fEnumBool_$ctoEnum_info:
         const GHC.Enum.$fEnumBool_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+40;
 },
 _c17R3() //  [R1]
         { []
         }
     {offset
       c17R3: // global
           _s175v::I64 = I64[R1 + 7];
           if (_s175v::I64 != 0) goto u17Rh; else goto c17Rf;
       u17Rh: // global
           if (_s175v::I64 != 1) goto c17Re; else goto c17Rg;
       c17Re: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c17Rg: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c17Rf: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17R3_info" {
     block_c17R3_info:
         const _c17R3;
         const 0;
         const 4294967326;
         const S17Oj_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.121544823 UTC

[section ""cstring" . lvl2_rUQI_bytes" {
     lvl2_rUQI_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,66,111,111,108,46,112,114,101,100,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.124102315 UTC

[section ""data" . GHC.Enum.$fEnumBool5_closure" {
     GHC.Enum.$fEnumBool5_closure:
         const GHC.Enum.$fEnumBool5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumBool5_entry() //  [R1]
         { []
         }
     {offset
       c17RH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c17RI; else goto c17RJ;
       c17RI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c17RJ: // global
           (_c17RC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c17RC::I64 == 0) goto c17RE; else goto c17RD;
       c17RE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c17RD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c17RC::I64;
           I64[Sp - 24] = block_c17RF_info;
           R2 = lvl2_rUQI_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool5_info" {
     GHC.Enum.$fEnumBool5_info:
         const GHC.Enum.$fEnumBool5_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt;
 },
 _c17RF() //  [R1]
         { []
         }
     {offset
       c17RF: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c17RF_info" {
     block_c17RF_info:
         const _c17RF;
         const 0;
         const 4294967326;
         const S17Oj_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.130048628 UTC

[section ""data" . GHC.Enum.$fEnumBool_$cpred_closure" {
     GHC.Enum.$fEnumBool_$cpred_closure:
         const GHC.Enum.$fEnumBool_$cpred_info;
         const 0;
 },
 GHC.Enum.$fEnumBool_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c17Sa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17Sb; else goto c17Sc;
       c17Sb: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17Sc: // global
           I64[Sp - 8] = block_c17S3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17Sj; else goto c17S4;
       u17Sj: // global
           call _c17S3(R1) args: 0, res: 0, upd: 0;
       c17S4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_$cpred_info" {
     GHC.Enum.$fEnumBool_$cpred_info:
         const GHC.Enum.$fEnumBool_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+56;
 },
 _c17S3() //  [R1]
         { []
         }
     {offset
       c17S3: // global
           if (R1 & 7 == 1) goto c17S7; else goto c17S8;
       c17S7: // global
           R1 = GHC.Enum.$fEnumBool5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c17S8: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17S3_info" {
     block_c17S3_info:
         const _c17S3;
         const 0;
         const 4294967326;
         const S17Oj_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.135697456 UTC

[section ""cstring" . lvl3_rUQJ_bytes" {
     lvl3_rUQJ_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,66,111,111,108,46,115,117,99,99,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.138219836 UTC

[section ""data" . GHC.Enum.$fEnumBool6_closure" {
     GHC.Enum.$fEnumBool6_closure:
         const GHC.Enum.$fEnumBool6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumBool6_entry() //  [R1]
         { []
         }
     {offset
       c17SI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c17SJ; else goto c17SK;
       c17SJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c17SK: // global
           (_c17SD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c17SD::I64 == 0) goto c17SF; else goto c17SE;
       c17SF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c17SE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c17SD::I64;
           I64[Sp - 24] = block_c17SG_info;
           R2 = lvl3_rUQJ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool6_info" {
     GHC.Enum.$fEnumBool6_info:
         const GHC.Enum.$fEnumBool6_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt;
 },
 _c17SG() //  [R1]
         { []
         }
     {offset
       c17SG: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c17SG_info" {
     block_c17SG_info:
         const _c17SG;
         const 0;
         const 4294967326;
         const S17Oj_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.144323739 UTC

[section ""data" . GHC.Enum.$fEnumBool_$csucc_closure" {
     GHC.Enum.$fEnumBool_$csucc_closure:
         const GHC.Enum.$fEnumBool_$csucc_info;
         const 0;
 },
 GHC.Enum.$fEnumBool_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c17Tb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17Tc; else goto c17Td;
       c17Tc: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17Td: // global
           I64[Sp - 8] = block_c17T4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17Tk; else goto c17T5;
       u17Tk: // global
           call _c17T4(R1) args: 0, res: 0, upd: 0;
       c17T5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_$csucc_info" {
     GHC.Enum.$fEnumBool_$csucc_info:
         const GHC.Enum.$fEnumBool_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+72;
 },
 _c17T4() //  [R1]
         { []
         }
     {offset
       c17T4: // global
           if (R1 & 7 == 1) goto c17T8; else goto c17T9;
       c17T8: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c17T9: // global
           R1 = GHC.Enum.$fEnumBool6_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17T4_info" {
     block_c17T4_info:
         const _c17T4;
         const 0;
         const 4294967326;
         const S17Oj_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.149172577 UTC

[section ""data" . GHC.Enum.$fEnumOrdering4_closure" {
     GHC.Enum.$fEnumOrdering4_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.151921106 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_$cfromEnum_closure" {
     GHC.Enum.$fEnumOrdering_$cfromEnum_closure:
         const GHC.Enum.$fEnumOrdering_$cfromEnum_info;
 },
 GHC.Enum.$fEnumOrdering_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c17TN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17TO; else goto c17TP;
       c17TO: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17TP: // global
           I64[Sp - 8] = block_c17TF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17U0; else goto c17TG;
       u17U0: // global
           call _c17TF(R1) args: 0, res: 0, upd: 0;
       c17TG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_$cfromEnum_info" {
     GHC.Enum.$fEnumOrdering_$cfromEnum_info:
         const GHC.Enum.$fEnumOrdering_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c17TF() //  [R1]
         { []
         }
     {offset
       c17TF: // global
           _c17TM::P64 = R1 & 7;
           if (_c17TM::P64 < 3) goto u17TZ; else goto c17TL;
       u17TZ: // global
           if (_c17TM::P64 < 2) goto c17TJ; else goto c17TK;
       c17TJ: // global
           R1 = GHC.Enum.$fEnum()2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c17TK: // global
           R1 = GHC.Enum.$fEnumBool4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c17TL: // global
           R1 = GHC.Enum.$fEnumOrdering4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17TF_info" {
     block_c17TF_info:
         const _c17TF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.157942505 UTC

[section ""cstring" . lvl4_rUQK_bytes" {
     lvl4_rUQK_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,79,114,100,101,114,105,110,103,46,116,111,69,110,117,109,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.160461602 UTC

[section ""data" . GHC.Enum.$fEnumOrdering5_closure" {
     GHC.Enum.$fEnumOrdering5_closure:
         const GHC.Enum.$fEnumOrdering5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumOrdering5_entry() //  [R1]
         { []
         }
     {offset
       c17Uo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c17Up; else goto c17Uq;
       c17Up: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c17Uq: // global
           (_c17Uj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c17Uj::I64 == 0) goto c17Ul; else goto c17Uk;
       c17Ul: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c17Uk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c17Uj::I64;
           I64[Sp - 24] = block_c17Um_info;
           R2 = lvl4_rUQK_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering5_info" {
     GHC.Enum.$fEnumOrdering5_info:
         const GHC.Enum.$fEnumOrdering5_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt;
 },
 _c17Um() //  [R1]
         { []
         }
     {offset
       c17Um: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c17Um_info" {
     block_c17Um_info:
         const _c17Um;
         const 0;
         const 4294967326;
         const S17Oj_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.169107455 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_$ctoEnum_closure" {
     GHC.Enum.$fEnumOrdering_$ctoEnum_closure:
         const GHC.Enum.$fEnumOrdering_$ctoEnum_info;
         const 0;
 },
 GHC.Enum.$fEnumOrdering_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c17UN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17UO; else goto c17UP;
       c17UO: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17UP: // global
           I64[Sp - 8] = block_c17UK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17V2; else goto c17UL;
       u17V2: // global
           call _c17UK(R1) args: 0, res: 0, upd: 0;
       c17UL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_$ctoEnum_info" {
     GHC.Enum.$fEnumOrdering_$ctoEnum_info:
         const GHC.Enum.$fEnumOrdering_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+88;
 },
 _c17UK() //  [R1]
         { []
         }
     {offset
       c17UK: // global
           _s175I::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s175I::I64, 2)) goto u17UZ; else goto u17V1;
       u17UZ: // global
           if (%MO_S_Lt_W64(_s175I::I64, 1)) goto u17V0; else goto c17UX;
       u17V0: // global
           if (%MO_S_Lt_W64(_s175I::I64, 0)) goto c17UV; else goto c17UW;
       c17UW: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c17UX: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u17V1: // global
           if (%MO_S_Ge_W64(_s175I::I64, 3)) goto c17UV; else goto c17UY;
       c17UV: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c17UY: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17UK_info" {
     block_c17UK_info:
         const _c17UK;
         const 0;
         const 4294967326;
         const S17Oj_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.177545688 UTC

[section ""cstring" . lvl5_rUQL_bytes" {
     lvl5_rUQL_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,79,114,100,101,114,105,110,103,46,112,114,101,100,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.181389598 UTC

[section ""data" . GHC.Enum.$fEnumOrdering6_closure" {
     GHC.Enum.$fEnumOrdering6_closure:
         const GHC.Enum.$fEnumOrdering6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumOrdering6_entry() //  [R1]
         { []
         }
     {offset
       c17Vt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c17Vu; else goto c17Vv;
       c17Vu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c17Vv: // global
           (_c17Vo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c17Vo::I64 == 0) goto c17Vq; else goto c17Vp;
       c17Vq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c17Vp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c17Vo::I64;
           I64[Sp - 24] = block_c17Vr_info;
           R2 = lvl5_rUQL_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering6_info" {
     GHC.Enum.$fEnumOrdering6_info:
         const GHC.Enum.$fEnumOrdering6_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt;
 },
 _c17Vr() //  [R1]
         { []
         }
     {offset
       c17Vr: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c17Vr_info" {
     block_c17Vr_info:
         const _c17Vr;
         const 0;
         const 4294967326;
         const S17Oj_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.189449715 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_$cpred_closure" {
     GHC.Enum.$fEnumOrdering_$cpred_closure:
         const GHC.Enum.$fEnumOrdering_$cpred_info;
         const 0;
 },
 GHC.Enum.$fEnumOrdering_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c17VX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17VY; else goto c17VZ;
       c17VY: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17VZ: // global
           I64[Sp - 8] = block_c17VP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17Wa; else goto c17VQ;
       u17Wa: // global
           call _c17VP(R1) args: 0, res: 0, upd: 0;
       c17VQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_$cpred_info" {
     GHC.Enum.$fEnumOrdering_$cpred_info:
         const GHC.Enum.$fEnumOrdering_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+104;
 },
 _c17VP() //  [R1]
         { []
         }
     {offset
       c17VP: // global
           _c17VW::P64 = R1 & 7;
           if (_c17VW::P64 < 3) goto u17W9; else goto c17VV;
       u17W9: // global
           if (_c17VW::P64 < 2) goto c17VT; else goto c17VU;
       c17VT: // global
           R1 = GHC.Enum.$fEnumOrdering6_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c17VU: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c17VV: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17VP_info" {
     block_c17VP_info:
         const _c17VP;
         const 0;
         const 4294967326;
         const S17Oj_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.195164135 UTC

[section ""cstring" . lvl6_rUQM_bytes" {
     lvl6_rUQM_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,79,114,100,101,114,105,110,103,46,115,117,99,99,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.198192467 UTC

[section ""data" . GHC.Enum.$fEnumOrdering7_closure" {
     GHC.Enum.$fEnumOrdering7_closure:
         const GHC.Enum.$fEnumOrdering7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumOrdering7_entry() //  [R1]
         { []
         }
     {offset
       c17WA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c17WB; else goto c17WC;
       c17WB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c17WC: // global
           (_c17Wv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c17Wv::I64 == 0) goto c17Wx; else goto c17Ww;
       c17Wx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c17Ww: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c17Wv::I64;
           I64[Sp - 24] = block_c17Wy_info;
           R2 = lvl6_rUQM_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering7_info" {
     GHC.Enum.$fEnumOrdering7_info:
         const GHC.Enum.$fEnumOrdering7_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt;
 },
 _c17Wy() //  [R1]
         { []
         }
     {offset
       c17Wy: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c17Wy_info" {
     block_c17Wy_info:
         const _c17Wy;
         const 0;
         const 4294967326;
         const S17Oj_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.204045339 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_$csucc_closure" {
     GHC.Enum.$fEnumOrdering_$csucc_closure:
         const GHC.Enum.$fEnumOrdering_$csucc_info;
         const 0;
 },
 GHC.Enum.$fEnumOrdering_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c17X4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17X5; else goto c17X6;
       c17X5: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17X6: // global
           I64[Sp - 8] = block_c17WW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17Xh; else goto c17WX;
       u17Xh: // global
           call _c17WW(R1) args: 0, res: 0, upd: 0;
       c17WX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_$csucc_info" {
     GHC.Enum.$fEnumOrdering_$csucc_info:
         const GHC.Enum.$fEnumOrdering_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+120;
 },
 _c17WW() //  [R1]
         { []
         }
     {offset
       c17WW: // global
           _c17X3::P64 = R1 & 7;
           if (_c17X3::P64 < 3) goto u17Xg; else goto c17X2;
       u17Xg: // global
           if (_c17X3::P64 < 2) goto c17X0; else goto c17X1;
       c17X0: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c17X1: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c17X2: // global
           R1 = GHC.Enum.$fEnumOrdering7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17WW_info" {
     block_c17WW_info:
         const _c17WW;
         const 0;
         const 4294967326;
         const S17Oj_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.209333686 UTC

[section ""cstring" . lvl7_rUQN_bytes" {
     lvl7_rUQN_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,67,104,97,114,46,112,114,101,100,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.211750213 UTC

[section ""data" . GHC.Enum.$fEnumChar1_closure" {
     GHC.Enum.$fEnumChar1_closure:
         const GHC.Enum.$fEnumChar1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumChar1_entry() //  [R1]
         { []
         }
     {offset
       c17XH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c17XI; else goto c17XJ;
       c17XI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c17XJ: // global
           (_c17XC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c17XC::I64 == 0) goto c17XE; else goto c17XD;
       c17XE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c17XD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c17XC::I64;
           I64[Sp - 24] = block_c17XF_info;
           R2 = lvl7_rUQN_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumChar1_info" {
     GHC.Enum.$fEnumChar1_info:
         const GHC.Enum.$fEnumChar1_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt;
 },
 _c17XF() //  [R1]
         { []
         }
     {offset
       c17XF: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c17XF_info" {
     block_c17XF_info:
         const _c17XF;
         const 0;
         const 4294967326;
         const S17Oj_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.218153483 UTC

[section ""data" . GHC.Enum.$fEnumChar_$cpred_closure" {
     GHC.Enum.$fEnumChar_$cpred_closure:
         const GHC.Enum.$fEnumChar_$cpred_info;
         const 0;
 },
 GHC.Enum.$fEnumChar_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c17Y6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17Y7; else goto c17Y8;
       c17Y7: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumChar_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17Y8: // global
           I64[Sp - 8] = block_c17Y3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u17YD; else goto c17Y4;
       u17YD: // global
           call _c17Y3(R1) args: 0, res: 0, upd: 0;
       c17Y4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumChar_$cpred_info" {
     GHC.Enum.$fEnumChar_$cpred_info:
         const GHC.Enum.$fEnumChar_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+136;
 },
 _c17Y3() //  [R1]
         { []
         }
     {offset
       c17Y3: // global
           _s175T::I64 = I64[R1 + 7];
           if (_s175T::I64 != 0) goto u17YA; else goto c17Yw;
       u17YA: // global
           I64[Sp] = _s175T::I64;
           call _c17Yg() args: 0, res: 0, upd: 0;
       c17Yw: // global
           R1 = GHC.Enum.$fEnumChar1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17Y3_info" {
     block_c17Y3_info:
         const _c17Y3;
         const 0;
         const 4294967326;
         const S17Oj_srt+144;
 },
 _c17Yg() //  []
         { []
         }
     {offset
       c17Yg: // global
           Hp = Hp + 16;
           _s175T::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c17Yt; else goto c17Ys;
       c17Yt: // global
           HpAlloc = 16;
           I64[Sp] = block_c17Yf_info;
           R1 = _s175T::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c17Ys: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s175T::I64 - 1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c17Yf() //  [R1]
         { []
         }
     {offset
       c17Yf: // global
           I64[Sp] = R1;
           call _c17Yg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c17Yf_info" {
     block_c17Yf_info:
         const _c17Yf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.225832228 UTC

[section ""cstring" . lvl8_rUQO_bytes" {
     lvl8_rUQO_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,67,104,97,114,46,115,117,99,99,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.228356483 UTC

[section ""data" . GHC.Enum.$fEnumChar2_closure" {
     GHC.Enum.$fEnumChar2_closure:
         const GHC.Enum.$fEnumChar2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumChar2_entry() //  [R1]
         { []
         }
     {offset
       c17Z8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c17Z9; else goto c17Za;
       c17Z9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c17Za: // global
           (_c17Z3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c17Z3::I64 == 0) goto c17Z5; else goto c17Z4;
       c17Z5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c17Z4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c17Z3::I64;
           I64[Sp - 24] = block_c17Z6_info;
           R2 = lvl8_rUQO_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumChar2_info" {
     GHC.Enum.$fEnumChar2_info:
         const GHC.Enum.$fEnumChar2_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt;
 },
 _c17Z6() //  [R1]
         { []
         }
     {offset
       c17Z6: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c17Z6_info" {
     block_c17Z6_info:
         const _c17Z6;
         const 0;
         const 4294967326;
         const S17Oj_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.235266088 UTC

[section ""data" . GHC.Enum.$fEnumChar_$csucc_closure" {
     GHC.Enum.$fEnumChar_$csucc_closure:
         const GHC.Enum.$fEnumChar_$csucc_info;
         const 0;
 },
 GHC.Enum.$fEnumChar_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c17Zx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c17Zy; else goto c17Zz;
       c17Zy: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumChar_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c17Zz: // global
           I64[Sp - 8] = block_c17Zu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1804; else goto c17Zv;
       u1804: // global
           call _c17Zu(R1) args: 0, res: 0, upd: 0;
       c17Zv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumChar_$csucc_info" {
     GHC.Enum.$fEnumChar_$csucc_info:
         const GHC.Enum.$fEnumChar_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+152;
 },
 _c17Zu() //  [R1]
         { []
         }
     {offset
       c17Zu: // global
           _s1760::I64 = I64[R1 + 7];
           if (_s1760::I64 != 1114111) goto u1801; else goto c17ZX;
       u1801: // global
           I64[Sp] = _s1760::I64;
           call _c17ZH() args: 0, res: 0, upd: 0;
       c17ZX: // global
           R1 = GHC.Enum.$fEnumChar2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c17Zu_info" {
     block_c17Zu_info:
         const _c17Zu;
         const 0;
         const 4294967326;
         const S17Oj_srt+160;
 },
 _c17ZH() //  []
         { []
         }
     {offset
       c17ZH: // global
           Hp = Hp + 16;
           _s1760::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c17ZU; else goto c17ZT;
       c17ZU: // global
           HpAlloc = 16;
           I64[Sp] = block_c17ZG_info;
           R1 = _s1760::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c17ZT: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s1760::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c17ZG() //  [R1]
         { []
         }
     {offset
       c17ZG: // global
           I64[Sp] = R1;
           call _c17ZH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c17ZG_info" {
     block_c17ZG_info:
         const _c17ZG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.243192216 UTC

[section ""data" . GHC.Enum.$fEnumInt_$cfromEnum_closure" {
     GHC.Enum.$fEnumInt_$cfromEnum_closure:
         const GHC.Enum.$fEnumInt_$cfromEnum_info;
 },
 GHC.Enum.$fEnumInt_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c180u: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInt_$cfromEnum_info" {
     GHC.Enum.$fEnumInt_$cfromEnum_info:
         const GHC.Enum.$fEnumInt_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.246201781 UTC

[section ""cstring" . lvl9_rUQP_bytes" {
     lvl9_rUQP_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,112,114,101,100,123,73,110,116,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,109,105,110,66,111,117,110,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.248620303 UTC

[section ""data" . GHC.Enum.$fEnumInt1_closure" {
     GHC.Enum.$fEnumInt1_closure:
         const GHC.Enum.$fEnumInt1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumInt1_entry() //  [R1]
         { []
         }
     {offset
       c180M: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c180N; else goto c180O;
       c180N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c180O: // global
           (_c180H::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c180H::I64 == 0) goto c180J; else goto c180I;
       c180J: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c180I: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c180H::I64;
           I64[Sp - 24] = block_c180K_info;
           R2 = lvl9_rUQP_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInt1_info" {
     GHC.Enum.$fEnumInt1_info:
         const GHC.Enum.$fEnumInt1_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt;
 },
 _c180K() //  [R1]
         { []
         }
     {offset
       c180K: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c180K_info" {
     block_c180K_info:
         const _c180K;
         const 0;
         const 4294967326;
         const S17Oj_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.254941226 UTC

[section ""data" . GHC.Enum.$fEnumInt_$cpred_closure" {
     GHC.Enum.$fEnumInt_$cpred_closure:
         const GHC.Enum.$fEnumInt_$cpred_info;
         const 0;
 },
 GHC.Enum.$fEnumInt_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c181b: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c181c; else goto c181d;
       c181c: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumInt_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c181d: // global
           I64[Sp - 8] = block_c1818_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u181s; else goto c1819;
       u181s: // global
           call _c1818(R1) args: 0, res: 0, upd: 0;
       c1819: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInt_$cpred_info" {
     GHC.Enum.$fEnumInt_$cpred_info:
         const GHC.Enum.$fEnumInt_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+168;
 },
 _c1818() //  [R1]
         { []
         }
     {offset
       c1818: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c181i; else goto c181h;
       c181i: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c181h: // global
           _s1768::I64 = I64[R1 + 7];
           if (_s1768::I64 != (-9223372036854775808)) goto c181q; else goto c181r;
       c181q: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1768::I64 - 1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c181r: // global
           Hp = Hp - 16;
           R1 = GHC.Enum.$fEnumInt1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1818_info" {
     block_c1818_info:
         const _c1818;
         const 0;
         const 4294967326;
         const S17Oj_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.260153324 UTC

[section ""cstring" . lvl10_rUQQ_bytes" {
     lvl10_rUQQ_bytes:
         I8[] [80,114,101,108,117,100,101,46,69,110,117,109,46,115,117,99,99,123,73,110,116,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,109,97,120,66,111,117,110,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.263031832 UTC

[section ""data" . GHC.Enum.$fEnumInt2_closure" {
     GHC.Enum.$fEnumInt2_closure:
         const GHC.Enum.$fEnumInt2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumInt2_entry() //  [R1]
         { []
         }
     {offset
       c181R: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c181S; else goto c181T;
       c181S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c181T: // global
           (_c181M::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c181M::I64 == 0) goto c181O; else goto c181N;
       c181O: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c181N: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c181M::I64;
           I64[Sp - 24] = block_c181P_info;
           R2 = lvl10_rUQQ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInt2_info" {
     GHC.Enum.$fEnumInt2_info:
         const GHC.Enum.$fEnumInt2_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt;
 },
 _c181P() //  [R1]
         { []
         }
     {offset
       c181P: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c181P_info" {
     block_c181P_info:
         const _c181P;
         const 0;
         const 4294967326;
         const S17Oj_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.269671312 UTC

[section ""data" . GHC.Enum.$fEnumInt_$csucc_closure" {
     GHC.Enum.$fEnumInt_$csucc_closure:
         const GHC.Enum.$fEnumInt_$csucc_info;
         const 0;
 },
 GHC.Enum.$fEnumInt_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c182g: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c182h; else goto c182i;
       c182h: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumInt_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c182i: // global
           I64[Sp - 8] = block_c182d_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u182x; else goto c182e;
       u182x: // global
           call _c182d(R1) args: 0, res: 0, upd: 0;
       c182e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInt_$csucc_info" {
     GHC.Enum.$fEnumInt_$csucc_info:
         const GHC.Enum.$fEnumInt_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+184;
 },
 _c182d() //  [R1]
         { []
         }
     {offset
       c182d: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c182n; else goto c182m;
       c182n: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c182m: // global
           _s176e::I64 = I64[R1 + 7];
           if (_s176e::I64 != 9223372036854775807) goto c182v; else goto c182w;
       c182v: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s176e::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c182w: // global
           Hp = Hp - 16;
           R1 = GHC.Enum.$fEnumInt2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c182d_info" {
     block_c182d_info:
         const _c182d;
         const 0;
         const 4294967326;
         const S17Oj_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.275628428 UTC

[section ""data" . GHC.Enum.$fEnumInteger_$cfromEnum_closure" {
     GHC.Enum.$fEnumInteger_$cfromEnum_closure:
         const GHC.Enum.$fEnumInteger_$cfromEnum_info;
 },
 GHC.Enum.$fEnumInteger_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c182T: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c182X; else goto c182Y;
       c182X: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumInteger_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c182Y: // global
           I64[Sp - 8] = block_c182R_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger_$cfromEnum_info" {
     GHC.Enum.$fEnumInteger_$cfromEnum_info:
         const GHC.Enum.$fEnumInteger_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c182R() //  [R1]
         { []
         }
     {offset
       c182R: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1831; else goto c1830;
       c1831: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1830: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c182R_info" {
     block_c182R_info:
         const _c182R;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.281215435 UTC

[section ""data" . GHC.Enum.$fEnumInteger_$ctoEnum_closure" {
     GHC.Enum.$fEnumInteger_$ctoEnum_closure:
         const GHC.Enum.$fEnumInteger_$ctoEnum_info;
 },
 GHC.Enum.$fEnumInteger_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c183k: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c183l; else goto c183m;
       c183l: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumInteger_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c183m: // global
           I64[Sp - 8] = block_c183h_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u183q; else goto c183i;
       u183q: // global
           call _c183h(R1) args: 0, res: 0, upd: 0;
       c183i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger_$ctoEnum_info" {
     GHC.Enum.$fEnumInteger_$ctoEnum_info:
         const GHC.Enum.$fEnumInteger_$ctoEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c183h() //  [R1]
         { []
         }
     {offset
       c183h: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c183h_info" {
     block_c183h_info:
         const _c183h;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.286436412 UTC

[section ""data" . GHC.Enum.$fBounded()_closure" {
     GHC.Enum.$fBounded()_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Tuple.()_closure+1;
         const GHC.Tuple.()_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.289505191 UTC

[section ""data" . GHC.Enum.$fBounded(,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,)_$cmaxBound_info;
 },
 sat_s176o_entry() //  [R1]
         { []
         }
     {offset
       c183K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c183L; else goto c183M;
       c183L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c183M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s176o_info" {
     sat_s176o_info:
         const sat_s176o_entry;
         const 1;
         const 16;
 },
 sat_s176n_entry() //  [R1]
         { []
         }
     {offset
       c183R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c183S; else goto c183T;
       c183S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c183T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s176n_info" {
     sat_s176n_info:
         const sat_s176n_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,)_$cmaxBound_entry() //  [R2, R3]
         { []
         }
     {offset
       c183V: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c183Z; else goto c183Y;
       c183Z: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,)_$cmaxBound_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c183Y: // global
           I64[Hp - 64] = sat_s176o_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_s176n_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.29752185 UTC

[section ""data" . GHC.Enum.$fBounded(,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,)_$cminBound_info;
 },
 sat_s176s_entry() //  [R1]
         { []
         }
     {offset
       c184s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c184t; else goto c184u;
       c184t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c184u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s176s_info" {
     sat_s176s_info:
         const sat_s176s_entry;
         const 1;
         const 16;
 },
 sat_s176r_entry() //  [R1]
         { []
         }
     {offset
       c184z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c184A; else goto c184B;
       c184A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c184B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s176r_info" {
     sat_s176r_info:
         const sat_s176r_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,)_$cminBound_entry() //  [R2, R3]
         { []
         }
     {offset
       c184D: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c184H; else goto c184G;
       c184H: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,)_$cminBound_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c184G: // global
           I64[Hp - 64] = sat_s176s_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_s176r_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,)_$cminBound_info" {
     GHC.Enum.$fBounded(,)_$cminBound_info:
         const GHC.Enum.$fBounded(,)_$cminBound_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.306002016 UTC

[section ""data" . GHC.Enum.$fBounded(,)_closure" {
     GHC.Enum.$fBounded(,)_closure:
         const GHC.Enum.$fBounded(,)_info;
 },
 sat_s176w_entry() //  [R1]
         { []
         }
     {offset
       c185a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c185b; else goto c185c;
       c185b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c185c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.$fBounded(,)_$cmaxBound_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s176w_info" {
     sat_s176w_info:
         const sat_s176w_entry;
         const 2;
         const 18;
 },
 sat_s176v_entry() //  [R1]
         { []
         }
     {offset
       c185h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c185i; else goto c185j;
       c185i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c185j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.$fBounded(,)_$cminBound_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s176v_info" {
     sat_s176v_info:
         const sat_s176v_entry;
         const 2;
         const 18;
 },
 GHC.Enum.$fBounded(,)_entry() //  [R2, R3]
         { []
         }
     {offset
       c185l: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c185p; else goto c185o;
       c185p: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,)_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c185o: // global
           I64[Hp - 80] = sat_s176w_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_s176v_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,)_info" {
     GHC.Enum.$fBounded(,)_info:
         const GHC.Enum.$fBounded(,)_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.314829556 UTC

[section ""data" . GHC.Enum.$fBounded(,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,)_$cmaxBound_info;
 },
 sat_s176C_entry() //  [R1]
         { []
         }
     {offset
       c185S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c185T; else goto c185U;
       c185T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c185U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s176C_info" {
     sat_s176C_info:
         const sat_s176C_entry;
         const 1;
         const 16;
 },
 sat_s176B_entry() //  [R1]
         { []
         }
     {offset
       c185Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1860; else goto c1861;
       c1860: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1861: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s176B_info" {
     sat_s176B_info:
         const sat_s176B_entry;
         const 1;
         const 16;
 },
 sat_s176A_entry() //  [R1]
         { []
         }
     {offset
       c1866: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1867; else goto c1868;
       c1867: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1868: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s176A_info" {
     sat_s176A_info:
         const sat_s176A_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,)_$cmaxBound_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c186a: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c186e; else goto c186d;
       c186e: // global
           HpAlloc = 104;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,)_$cmaxBound_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c186d: // global
           I64[Hp - 96] = sat_s176C_info;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = sat_s176B_info;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_s176A_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.324849562 UTC

[section ""data" . GHC.Enum.$fBounded(,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,)_$cminBound_info;
 },
 sat_s176I_entry() //  [R1]
         { []
         }
     {offset
       c186O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c186P; else goto c186Q;
       c186P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c186Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s176I_info" {
     sat_s176I_info:
         const sat_s176I_entry;
         const 1;
         const 16;
 },
 sat_s176H_entry() //  [R1]
         { []
         }
     {offset
       c186V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c186W; else goto c186X;
       c186W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c186X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s176H_info" {
     sat_s176H_info:
         const sat_s176H_entry;
         const 1;
         const 16;
 },
 sat_s176G_entry() //  [R1]
         { []
         }
     {offset
       c1872: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1873; else goto c1874;
       c1873: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1874: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s176G_info" {
     sat_s176G_info:
         const sat_s176G_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,)_$cminBound_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1876: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c187a; else goto c1879;
       c187a: // global
           HpAlloc = 104;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,)_$cminBound_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1879: // global
           I64[Hp - 96] = sat_s176I_info;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = sat_s176H_info;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_s176G_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,)_$cminBound_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.334533051 UTC

[section ""data" . GHC.Enum.$fBounded(,,)_closure" {
     GHC.Enum.$fBounded(,,)_closure:
         const GHC.Enum.$fBounded(,,)_info;
 },
 sat_s176N_entry() //  [R1]
         { []
         }
     {offset
       c187K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c187L; else goto c187M;
       c187L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c187M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.$fBounded(,,)_$cmaxBound_entry(R4,
                                                        R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s176N_info" {
     sat_s176N_info:
         const sat_s176N_entry;
         const 3;
         const 15;
 },
 sat_s176M_entry() //  [R1]
         { []
         }
     {offset
       c187R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c187S; else goto c187T;
       c187S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c187T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.$fBounded(,,)_$cminBound_entry(R4,
                                                        R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s176M_info" {
     sat_s176M_info:
         const sat_s176M_entry;
         const 3;
         const 15;
 },
 GHC.Enum.$fBounded(,,)_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c187V: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c187Z; else goto c187Y;
       c187Z: // global
           HpAlloc = 104;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,)_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c187Y: // global
           I64[Hp - 96] = sat_s176N_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = sat_s176M_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,)_info" {
     GHC.Enum.$fBounded(,,)_info:
         const GHC.Enum.$fBounded(,,)_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.343185806 UTC

[section ""data" . GHC.Enum.$fBounded(,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,)_$cmaxBound_info;
 },
 sat_s176V_entry() //  [R1]
         { []
         }
     {offset
       c188s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c188t; else goto c188u;
       c188t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c188u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s176V_info" {
     sat_s176V_info:
         const sat_s176V_entry;
         const 1;
         const 16;
 },
 sat_s176U_entry() //  [R1]
         { []
         }
     {offset
       c188z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c188A; else goto c188B;
       c188A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c188B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s176U_info" {
     sat_s176U_info:
         const sat_s176U_entry;
         const 1;
         const 16;
 },
 sat_s176T_entry() //  [R1]
         { []
         }
     {offset
       c188G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c188H; else goto c188I;
       c188H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c188I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s176T_info" {
     sat_s176T_info:
         const sat_s176T_entry;
         const 1;
         const 16;
 },
 sat_s176S_entry() //  [R1]
         { []
         }
     {offset
       c188N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c188O; else goto c188P;
       c188O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c188P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s176S_info" {
     sat_s176S_info:
         const sat_s176S_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,)_$cmaxBound_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c188R: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c188V; else goto c188U;
       c188V: // global
           HpAlloc = 136;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,,)_$cmaxBound_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c188U: // global
           I64[Hp - 128] = sat_s176V_info;
           P64[Hp - 112] = R5;
           I64[Hp - 104] = sat_s176U_info;
           P64[Hp - 88] = R4;
           I64[Hp - 80] = sat_s176T_info;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_s176S_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.355766454 UTC

[section ""data" . GHC.Enum.$fBounded(,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,)_$cminBound_info;
 },
 sat_s1773_entry() //  [R1]
         { []
         }
     {offset
       c189C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c189D; else goto c189E;
       c189D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c189E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1773_info" {
     sat_s1773_info:
         const sat_s1773_entry;
         const 1;
         const 16;
 },
 sat_s1772_entry() //  [R1]
         { []
         }
     {offset
       c189J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c189K; else goto c189L;
       c189K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c189L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1772_info" {
     sat_s1772_info:
         const sat_s1772_entry;
         const 1;
         const 16;
 },
 sat_s1771_entry() //  [R1]
         { []
         }
     {offset
       c189Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c189R; else goto c189S;
       c189R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c189S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1771_info" {
     sat_s1771_info:
         const sat_s1771_entry;
         const 1;
         const 16;
 },
 sat_s1770_entry() //  [R1]
         { []
         }
     {offset
       c189X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c189Y; else goto c189Z;
       c189Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c189Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1770_info" {
     sat_s1770_info:
         const sat_s1770_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,)_$cminBound_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c18a1: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c18a5; else goto c18a4;
       c18a5: // global
           HpAlloc = 136;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,,)_$cminBound_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c18a4: // global
           I64[Hp - 128] = sat_s1773_info;
           P64[Hp - 112] = R5;
           I64[Hp - 104] = sat_s1772_info;
           P64[Hp - 88] = R4;
           I64[Hp - 80] = sat_s1771_info;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_s1770_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.36712014 UTC

[section ""data" . GHC.Enum.$fBounded(,,,)_closure" {
     GHC.Enum.$fBounded(,,,)_closure:
         const GHC.Enum.$fBounded(,,,)_info;
 },
 sat_s1779_entry() //  [R1]
         { []
         }
     {offset
       c18aM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18aN; else goto c18aO;
       c18aN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18aO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.$fBounded(,,,)_$cmaxBound_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1779_info" {
     sat_s1779_info:
         const sat_s1779_entry;
         const 4;
         const 15;
 },
 sat_s1778_entry() //  [R1]
         { []
         }
     {offset
       c18aT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18aU; else goto c18aV;
       c18aU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18aV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.$fBounded(,,,)_$cminBound_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1778_info" {
     sat_s1778_info:
         const sat_s1778_entry;
         const 4;
         const 15;
 },
 GHC.Enum.$fBounded(,,,)_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c18aX: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c18b1; else goto c18b0;
       c18b1: // global
           HpAlloc = 120;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,,)_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c18b0: // global
           I64[Hp - 112] = sat_s1779_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           I64[Hp - 64] = sat_s1778_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 112;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,)_info" {
     GHC.Enum.$fBounded(,,,)_info:
         const GHC.Enum.$fBounded(,,,)_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.376350274 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,)_$cmaxBound_info;
 },
 sat_s177j_entry() //  [R1]
         { []
         }
     {offset
       c18bu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18bv; else goto c18bw;
       c18bv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18bw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177j_info" {
     sat_s177j_info:
         const sat_s177j_entry;
         const 1;
         const 16;
 },
 sat_s177i_entry() //  [R1]
         { []
         }
     {offset
       c18bB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18bC; else goto c18bD;
       c18bC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18bD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177i_info" {
     sat_s177i_info:
         const sat_s177i_entry;
         const 1;
         const 16;
 },
 sat_s177h_entry() //  [R1]
         { []
         }
     {offset
       c18bI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18bJ; else goto c18bK;
       c18bJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18bK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177h_info" {
     sat_s177h_info:
         const sat_s177h_entry;
         const 1;
         const 16;
 },
 sat_s177g_entry() //  [R1]
         { []
         }
     {offset
       c18bP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18bQ; else goto c18bR;
       c18bQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18bR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177g_info" {
     sat_s177g_info:
         const sat_s177g_entry;
         const 1;
         const 16;
 },
 sat_s177f_entry() //  [R1]
         { []
         }
     {offset
       c18bW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18bX; else goto c18bY;
       c18bX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18bY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177f_info" {
     sat_s177f_info:
         const sat_s177f_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,)_$cmaxBound_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c18c0: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c18c4; else goto c18c3;
       c18c4: // global
           HpAlloc = 168;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,,,)_$cmaxBound_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c18c3: // global
           I64[Hp - 160] = sat_s177j_info;
           P64[Hp - 144] = R6;
           I64[Hp - 136] = sat_s177i_info;
           P64[Hp - 120] = R5;
           I64[Hp - 112] = sat_s177h_info;
           P64[Hp - 96] = R4;
           I64[Hp - 88] = sat_s177g_info;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = sat_s177f_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = (,,,,)_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 112;
           P64[Hp - 8] = Hp - 136;
           P64[Hp] = Hp - 160;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.390909794 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,)_$cminBound_info;
 },
 sat_s177t_entry() //  [R1]
         { []
         }
     {offset
       c18cS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18cT; else goto c18cU;
       c18cT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18cU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177t_info" {
     sat_s177t_info:
         const sat_s177t_entry;
         const 1;
         const 16;
 },
 sat_s177s_entry() //  [R1]
         { []
         }
     {offset
       c18cZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18d0; else goto c18d1;
       c18d0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18d1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177s_info" {
     sat_s177s_info:
         const sat_s177s_entry;
         const 1;
         const 16;
 },
 sat_s177r_entry() //  [R1]
         { []
         }
     {offset
       c18d6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18d7; else goto c18d8;
       c18d7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18d8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177r_info" {
     sat_s177r_info:
         const sat_s177r_entry;
         const 1;
         const 16;
 },
 sat_s177q_entry() //  [R1]
         { []
         }
     {offset
       c18dd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18de; else goto c18df;
       c18de: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18df: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177q_info" {
     sat_s177q_info:
         const sat_s177q_entry;
         const 1;
         const 16;
 },
 sat_s177p_entry() //  [R1]
         { []
         }
     {offset
       c18dk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18dl; else goto c18dm;
       c18dl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18dm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177p_info" {
     sat_s177p_info:
         const sat_s177p_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,)_$cminBound_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c18do: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c18ds; else goto c18dr;
       c18ds: // global
           HpAlloc = 168;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,,,)_$cminBound_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c18dr: // global
           I64[Hp - 160] = sat_s177t_info;
           P64[Hp - 144] = R6;
           I64[Hp - 136] = sat_s177s_info;
           P64[Hp - 120] = R5;
           I64[Hp - 112] = sat_s177r_info;
           P64[Hp - 96] = R4;
           I64[Hp - 88] = sat_s177q_info;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = sat_s177p_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = (,,,,)_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 112;
           P64[Hp - 8] = Hp - 136;
           P64[Hp] = Hp - 160;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.403706996 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,)_info;
 },
 sat_s177A_entry() //  [R1]
         { []
         }
     {offset
       c18eg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18eh; else goto c18ei;
       c18eh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18ei: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.$fBounded(,,,,)_$cmaxBound_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177A_info" {
     sat_s177A_info:
         const sat_s177A_entry;
         const 5;
         const 15;
 },
 sat_s177z_entry() //  [R1]
         { []
         }
     {offset
       c18en: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18eo; else goto c18ep;
       c18eo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18ep: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.$fBounded(,,,,)_$cminBound_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177z_info" {
     sat_s177z_info:
         const sat_s177z_entry;
         const 5;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c18er: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c18ev; else goto c18eu;
       c18ev: // global
           HpAlloc = 136;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,,,)_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c18eu: // global
           I64[Hp - 128] = sat_s177A_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           I64[Hp - 72] = sat_s177z_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = R6;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 128;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,)_info" {
     GHC.Enum.$fBounded(,,,,)_info:
         const GHC.Enum.$fBounded(,,,,)_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.413994337 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,)_$cmaxBound_info;
 },
 sat_s177M_entry() //  [R1]
         { []
         }
     {offset
       c18eY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18eZ; else goto c18f0;
       c18eZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18f0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177M_info" {
     sat_s177M_info:
         const sat_s177M_entry;
         const 1;
         const 16;
 },
 sat_s177L_entry() //  [R1]
         { []
         }
     {offset
       c18f5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18f6; else goto c18f7;
       c18f6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18f7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177L_info" {
     sat_s177L_info:
         const sat_s177L_entry;
         const 1;
         const 16;
 },
 sat_s177K_entry() //  [R1]
         { []
         }
     {offset
       c18fc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18fd; else goto c18fe;
       c18fd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18fe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177K_info" {
     sat_s177K_info:
         const sat_s177K_entry;
         const 1;
         const 16;
 },
 sat_s177J_entry() //  [R1]
         { []
         }
     {offset
       c18fj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18fk; else goto c18fl;
       c18fk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18fl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177J_info" {
     sat_s177J_info:
         const sat_s177J_entry;
         const 1;
         const 16;
 },
 sat_s177I_entry() //  [R1]
         { []
         }
     {offset
       c18fq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18fr; else goto c18fs;
       c18fr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18fs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177I_info" {
     sat_s177I_info:
         const sat_s177I_entry;
         const 1;
         const 16;
 },
 sat_s177H_entry() //  [R1]
         { []
         }
     {offset
       c18fx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18fy; else goto c18fz;
       c18fy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18fz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177H_info" {
     sat_s177H_info:
         const sat_s177H_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,)_$cmaxBound_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c18fB: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c18fF; else goto c18fE;
       c18fF: // global
           HpAlloc = 200;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,,,,)_$cmaxBound_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c18fE: // global
           I64[Hp - 192] = sat_s177M_info;
           P64[Hp - 176] = P64[Sp];
           I64[Hp - 168] = sat_s177L_info;
           P64[Hp - 152] = R6;
           I64[Hp - 144] = sat_s177K_info;
           P64[Hp - 128] = R5;
           I64[Hp - 120] = sat_s177J_info;
           P64[Hp - 104] = R4;
           I64[Hp - 96] = sat_s177I_info;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = sat_s177H_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = (,,,,,)_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = Hp - 96;
           P64[Hp - 24] = Hp - 120;
           P64[Hp - 16] = Hp - 144;
           P64[Hp - 8] = Hp - 168;
           P64[Hp] = Hp - 192;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.431438292 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,)_$cminBound_info;
 },
 sat_s177Y_entry() //  [R1]
         { []
         }
     {offset
       c18gB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18gC; else goto c18gD;
       c18gC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18gD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177Y_info" {
     sat_s177Y_info:
         const sat_s177Y_entry;
         const 1;
         const 16;
 },
 sat_s177X_entry() //  [R1]
         { []
         }
     {offset
       c18gI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18gJ; else goto c18gK;
       c18gJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18gK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177X_info" {
     sat_s177X_info:
         const sat_s177X_entry;
         const 1;
         const 16;
 },
 sat_s177W_entry() //  [R1]
         { []
         }
     {offset
       c18gP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18gQ; else goto c18gR;
       c18gQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18gR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177W_info" {
     sat_s177W_info:
         const sat_s177W_entry;
         const 1;
         const 16;
 },
 sat_s177V_entry() //  [R1]
         { []
         }
     {offset
       c18gW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18gX; else goto c18gY;
       c18gX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18gY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177V_info" {
     sat_s177V_info:
         const sat_s177V_entry;
         const 1;
         const 16;
 },
 sat_s177U_entry() //  [R1]
         { []
         }
     {offset
       c18h3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18h4; else goto c18h5;
       c18h4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18h5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177U_info" {
     sat_s177U_info:
         const sat_s177U_entry;
         const 1;
         const 16;
 },
 sat_s177T_entry() //  [R1]
         { []
         }
     {offset
       c18ha: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18hb; else goto c18hc;
       c18hb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18hc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s177T_info" {
     sat_s177T_info:
         const sat_s177T_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,)_$cminBound_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c18he: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c18hi; else goto c18hh;
       c18hi: // global
           HpAlloc = 200;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,,,,)_$cminBound_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c18hh: // global
           I64[Hp - 192] = sat_s177Y_info;
           P64[Hp - 176] = P64[Sp];
           I64[Hp - 168] = sat_s177X_info;
           P64[Hp - 152] = R6;
           I64[Hp - 144] = sat_s177W_info;
           P64[Hp - 128] = R5;
           I64[Hp - 120] = sat_s177V_info;
           P64[Hp - 104] = R4;
           I64[Hp - 96] = sat_s177U_info;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = sat_s177T_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = (,,,,,)_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = Hp - 96;
           P64[Hp - 24] = Hp - 120;
           P64[Hp - 16] = Hp - 144;
           P64[Hp - 8] = Hp - 168;
           P64[Hp] = Hp - 192;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.446282375 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,)_info;
 },
 sat_s1786_entry() //  [R1]
         { []
         }
     {offset
       c18ie: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c18if; else goto c18ig;
       c18if: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18ig: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 24;
           call GHC.Enum.$fBounded(,,,,,)_$cmaxBound_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 32, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1786_info" {
     sat_s1786_info:
         const sat_s1786_entry;
         const 6;
         const 15;
 },
 sat_s1785_entry() //  [R1]
         { []
         }
     {offset
       c18il: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c18im; else goto c18in;
       c18im: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18in: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 24;
           call GHC.Enum.$fBounded(,,,,,)_$cminBound_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 32, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1785_info" {
     sat_s1785_info:
         const sat_s1785_entry;
         const 6;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c18ip: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c18it; else goto c18is;
       c18it: // global
           HpAlloc = 152;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fBounded(,,,,,)_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c18is: // global
           I64[Hp - 144] = sat_s1786_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           P64[Hp - 104] = R5;
           P64[Hp - 96] = R6;
           _s1784::P64 = P64[Sp];
           P64[Hp - 88] = _s1784::P64;
           I64[Hp - 80] = sat_s1785_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = _s1784::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 144;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,)_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.457176204 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_slow() //  [R1]
         { []
         }
     {offset
       c18iR: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2,
                                                            R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s178k_entry() //  [R1]
         { []
         }
     {offset
       c18iZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18j0; else goto c18j1;
       c18j0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18j1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178k_info" {
     sat_s178k_info:
         const sat_s178k_entry;
         const 1;
         const 16;
 },
 sat_s178j_entry() //  [R1]
         { []
         }
     {offset
       c18j6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18j7; else goto c18j8;
       c18j7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18j8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178j_info" {
     sat_s178j_info:
         const sat_s178j_entry;
         const 1;
         const 16;
 },
 sat_s178i_entry() //  [R1]
         { []
         }
     {offset
       c18jd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18je; else goto c18jf;
       c18je: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18jf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178i_info" {
     sat_s178i_info:
         const sat_s178i_entry;
         const 1;
         const 16;
 },
 sat_s178h_entry() //  [R1]
         { []
         }
     {offset
       c18jk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18jl; else goto c18jm;
       c18jl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18jm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178h_info" {
     sat_s178h_info:
         const sat_s178h_entry;
         const 1;
         const 16;
 },
 sat_s178g_entry() //  [R1]
         { []
         }
     {offset
       c18jr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18js; else goto c18jt;
       c18js: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18jt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178g_info" {
     sat_s178g_info:
         const sat_s178g_entry;
         const 1;
         const 16;
 },
 sat_s178f_entry() //  [R1]
         { []
         }
     {offset
       c18jy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18jz; else goto c18jA;
       c18jz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18jA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178f_info" {
     sat_s178f_info:
         const sat_s178f_entry;
         const 1;
         const 16;
 },
 sat_s178e_entry() //  [R1]
         { []
         }
     {offset
       c18jF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18jG; else goto c18jH;
       c18jG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18jH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178e_info" {
     sat_s178e_info:
         const sat_s178e_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       c18jJ: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c18jN; else goto c18jM;
       c18jN: // global
           HpAlloc = 232;
           R1 = GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c18jM: // global
           I64[Hp - 224] = sat_s178k_info;
           P64[Hp - 208] = P64[Sp + 8];
           I64[Hp - 200] = sat_s178j_info;
           P64[Hp - 184] = P64[Sp];
           I64[Hp - 176] = sat_s178i_info;
           P64[Hp - 160] = R6;
           I64[Hp - 152] = sat_s178h_info;
           P64[Hp - 136] = R5;
           I64[Hp - 128] = sat_s178g_info;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = sat_s178f_info;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_s178e_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = (,,,,,,)_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.477614263 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,,)_$cminBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,)_$cminBound_slow() //  [R1]
         { []
         }
     {offset
       c18kM: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,)_$cminBound_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2,
                                                            R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s178y_entry() //  [R1]
         { []
         }
     {offset
       c18kU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18kV; else goto c18kW;
       c18kV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18kW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178y_info" {
     sat_s178y_info:
         const sat_s178y_entry;
         const 1;
         const 16;
 },
 sat_s178x_entry() //  [R1]
         { []
         }
     {offset
       c18l1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18l2; else goto c18l3;
       c18l2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18l3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178x_info" {
     sat_s178x_info:
         const sat_s178x_entry;
         const 1;
         const 16;
 },
 sat_s178w_entry() //  [R1]
         { []
         }
     {offset
       c18l8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18l9; else goto c18la;
       c18l9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18la: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178w_info" {
     sat_s178w_info:
         const sat_s178w_entry;
         const 1;
         const 16;
 },
 sat_s178v_entry() //  [R1]
         { []
         }
     {offset
       c18lf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18lg; else goto c18lh;
       c18lg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18lh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178v_info" {
     sat_s178v_info:
         const sat_s178v_entry;
         const 1;
         const 16;
 },
 sat_s178u_entry() //  [R1]
         { []
         }
     {offset
       c18lm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18ln; else goto c18lo;
       c18ln: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18lo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178u_info" {
     sat_s178u_info:
         const sat_s178u_entry;
         const 1;
         const 16;
 },
 sat_s178t_entry() //  [R1]
         { []
         }
     {offset
       c18lt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18lu; else goto c18lv;
       c18lu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18lv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178t_info" {
     sat_s178t_info:
         const sat_s178t_entry;
         const 1;
         const 16;
 },
 sat_s178s_entry() //  [R1]
         { []
         }
     {offset
       c18lA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18lB; else goto c18lC;
       c18lB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18lC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178s_info" {
     sat_s178s_info:
         const sat_s178s_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,)_$cminBound_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       c18lE: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c18lI; else goto c18lH;
       c18lI: // global
           HpAlloc = 232;
           R1 = GHC.Enum.$fBounded(,,,,,,)_$cminBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c18lH: // global
           I64[Hp - 224] = sat_s178y_info;
           P64[Hp - 208] = P64[Sp + 8];
           I64[Hp - 200] = sat_s178x_info;
           P64[Hp - 184] = P64[Sp];
           I64[Hp - 176] = sat_s178w_info;
           P64[Hp - 160] = R6;
           I64[Hp - 152] = sat_s178v_info;
           P64[Hp - 136] = R5;
           I64[Hp - 128] = sat_s178u_info;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = sat_s178t_info;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_s178s_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = (,,,,,,)_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.Enum.$fBounded(,,,,,,)_$cminBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.495361364 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,,)_info;
 },
 GHC.Enum.$fBounded(,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c18mH: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,)_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s178H_entry() //  [R1]
         { []
         }
     {offset
       c18mP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c18mQ; else goto c18mR;
       c18mQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18mR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 56];
           P64[Sp - 24] = P64[R1 + 64];
           Sp = Sp - 32;
           call GHC.Enum.$fBounded(,,,,,,)_$cmaxBound_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178H_info" {
     sat_s178H_info:
         const sat_s178H_entry;
         const 7;
         const 15;
 },
 sat_s178G_entry() //  [R1]
         { []
         }
     {offset
       c18mW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c18mX; else goto c18mY;
       c18mX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18mY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 56];
           P64[Sp - 24] = P64[R1 + 64];
           Sp = Sp - 32;
           call GHC.Enum.$fBounded(,,,,,,)_$cminBound_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178G_info" {
     sat_s178G_info:
         const sat_s178G_entry;
         const 7;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c18n0: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c18n4; else goto c18n3;
       c18n4: // global
           HpAlloc = 168;
           R1 = GHC.Enum.$fBounded(,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c18n3: // global
           I64[Hp - 160] = sat_s178H_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           P64[Hp - 128] = R4;
           P64[Hp - 120] = R5;
           P64[Hp - 112] = R6;
           _s178E::P64 = P64[Sp];
           P64[Hp - 104] = _s178E::P64;
           _s178F::P64 = P64[Sp + 8];
           P64[Hp - 96] = _s178F::P64;
           I64[Hp - 88] = sat_s178G_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = _s178E::P64;
           P64[Hp - 24] = _s178F::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 88;
           P64[Hp] = Hp - 160;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,,)_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.Enum.$fBounded(,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.507179877 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_slow() //  [R1]
         { []
         }
     {offset
       c18nw: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s178X_entry() //  [R1]
         { []
         }
     {offset
       c18nE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18nF; else goto c18nG;
       c18nF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18nG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178X_info" {
     sat_s178X_info:
         const sat_s178X_entry;
         const 1;
         const 16;
 },
 sat_s178W_entry() //  [R1]
         { []
         }
     {offset
       c18nL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18nM; else goto c18nN;
       c18nM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18nN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178W_info" {
     sat_s178W_info:
         const sat_s178W_entry;
         const 1;
         const 16;
 },
 sat_s178V_entry() //  [R1]
         { []
         }
     {offset
       c18nS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18nT; else goto c18nU;
       c18nT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18nU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178V_info" {
     sat_s178V_info:
         const sat_s178V_entry;
         const 1;
         const 16;
 },
 sat_s178U_entry() //  [R1]
         { []
         }
     {offset
       c18nZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18o0; else goto c18o1;
       c18o0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18o1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178U_info" {
     sat_s178U_info:
         const sat_s178U_entry;
         const 1;
         const 16;
 },
 sat_s178T_entry() //  [R1]
         { []
         }
     {offset
       c18o6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18o7; else goto c18o8;
       c18o7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18o8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178T_info" {
     sat_s178T_info:
         const sat_s178T_entry;
         const 1;
         const 16;
 },
 sat_s178S_entry() //  [R1]
         { []
         }
     {offset
       c18od: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18oe; else goto c18of;
       c18oe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18of: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178S_info" {
     sat_s178S_info:
         const sat_s178S_entry;
         const 1;
         const 16;
 },
 sat_s178R_entry() //  [R1]
         { []
         }
     {offset
       c18ok: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18ol; else goto c18om;
       c18ol: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18om: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178R_info" {
     sat_s178R_info:
         const sat_s178R_entry;
         const 1;
         const 16;
 },
 sat_s178Q_entry() //  [R1]
         { []
         }
     {offset
       c18or: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18os; else goto c18ot;
       c18os: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18ot: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s178Q_info" {
     sat_s178Q_info:
         const sat_s178Q_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       c18ov: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c18oz; else goto c18oy;
       c18oz: // global
           HpAlloc = 264;
           R1 = GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c18oy: // global
           I64[Hp - 256] = sat_s178X_info;
           P64[Hp - 240] = P64[Sp + 16];
           I64[Hp - 232] = sat_s178W_info;
           P64[Hp - 216] = P64[Sp + 8];
           I64[Hp - 208] = sat_s178V_info;
           P64[Hp - 192] = P64[Sp];
           I64[Hp - 184] = sat_s178U_info;
           P64[Hp - 168] = R6;
           I64[Hp - 160] = sat_s178T_info;
           P64[Hp - 144] = R5;
           I64[Hp - 136] = sat_s178S_info;
           P64[Hp - 120] = R4;
           I64[Hp - 112] = sat_s178R_info;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_s178Q_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = (,,,,,,,)_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 34359738368;
         const 0;
         const 8;
         const GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.528681443 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,)_$cminBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,)_$cminBound_slow() //  [R1]
         { []
         }
     {offset
       c18pG: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,)_$cminBound_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s179d_entry() //  [R1]
         { []
         }
     {offset
       c18pO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18pP; else goto c18pQ;
       c18pP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18pQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179d_info" {
     sat_s179d_info:
         const sat_s179d_entry;
         const 1;
         const 16;
 },
 sat_s179c_entry() //  [R1]
         { []
         }
     {offset
       c18pV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18pW; else goto c18pX;
       c18pW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18pX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179c_info" {
     sat_s179c_info:
         const sat_s179c_entry;
         const 1;
         const 16;
 },
 sat_s179b_entry() //  [R1]
         { []
         }
     {offset
       c18q2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18q3; else goto c18q4;
       c18q3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18q4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179b_info" {
     sat_s179b_info:
         const sat_s179b_entry;
         const 1;
         const 16;
 },
 sat_s179a_entry() //  [R1]
         { []
         }
     {offset
       c18q9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18qa; else goto c18qb;
       c18qa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18qb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179a_info" {
     sat_s179a_info:
         const sat_s179a_entry;
         const 1;
         const 16;
 },
 sat_s1799_entry() //  [R1]
         { []
         }
     {offset
       c18qg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18qh; else goto c18qi;
       c18qh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18qi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1799_info" {
     sat_s1799_info:
         const sat_s1799_entry;
         const 1;
         const 16;
 },
 sat_s1798_entry() //  [R1]
         { []
         }
     {offset
       c18qn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18qo; else goto c18qp;
       c18qo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18qp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1798_info" {
     sat_s1798_info:
         const sat_s1798_entry;
         const 1;
         const 16;
 },
 sat_s1797_entry() //  [R1]
         { []
         }
     {offset
       c18qu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18qv; else goto c18qw;
       c18qv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18qw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1797_info" {
     sat_s1797_info:
         const sat_s1797_entry;
         const 1;
         const 16;
 },
 sat_s1796_entry() //  [R1]
         { []
         }
     {offset
       c18qB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18qC; else goto c18qD;
       c18qC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18qD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1796_info" {
     sat_s1796_info:
         const sat_s1796_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,)_$cminBound_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       c18qF: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c18qJ; else goto c18qI;
       c18qJ: // global
           HpAlloc = 264;
           R1 = GHC.Enum.$fBounded(,,,,,,,)_$cminBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c18qI: // global
           I64[Hp - 256] = sat_s179d_info;
           P64[Hp - 240] = P64[Sp + 16];
           I64[Hp - 232] = sat_s179c_info;
           P64[Hp - 216] = P64[Sp + 8];
           I64[Hp - 208] = sat_s179b_info;
           P64[Hp - 192] = P64[Sp];
           I64[Hp - 184] = sat_s179a_info;
           P64[Hp - 168] = R6;
           I64[Hp - 160] = sat_s1799_info;
           P64[Hp - 144] = R5;
           I64[Hp - 136] = sat_s1798_info;
           P64[Hp - 120] = R4;
           I64[Hp - 112] = sat_s1797_info;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_s1796_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = (,,,,,,,)_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 34359738368;
         const 0;
         const 8;
         const GHC.Enum.$fBounded(,,,,,,,)_$cminBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.548963202 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,,,)_info;
 },
 GHC.Enum.$fBounded(,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c18rQ: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,)_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s179n_entry() //  [R1]
         { []
         }
     {offset
       c18rY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c18rZ; else goto c18s0;
       c18rZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18s0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 56];
           P64[Sp - 32] = P64[R1 + 64];
           P64[Sp - 24] = P64[R1 + 72];
           Sp = Sp - 40;
           call GHC.Enum.$fBounded(,,,,,,,)_$cmaxBound_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179n_info" {
     sat_s179n_info:
         const sat_s179n_entry;
         const 8;
         const 15;
 },
 sat_s179m_entry() //  [R1]
         { []
         }
     {offset
       c18s5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c18s6; else goto c18s7;
       c18s6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18s7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 56];
           P64[Sp - 32] = P64[R1 + 64];
           P64[Sp - 24] = P64[R1 + 72];
           Sp = Sp - 40;
           call GHC.Enum.$fBounded(,,,,,,,)_$cminBound_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179m_info" {
     sat_s179m_info:
         const sat_s179m_entry;
         const 8;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c18s9: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto c18sd; else goto c18sc;
       c18sd: // global
           HpAlloc = 184;
           R1 = GHC.Enum.$fBounded(,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c18sc: // global
           I64[Hp - 176] = sat_s179n_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           P64[Hp - 144] = R4;
           P64[Hp - 136] = R5;
           P64[Hp - 128] = R6;
           _s179j::P64 = P64[Sp];
           P64[Hp - 120] = _s179j::P64;
           _s179k::P64 = P64[Sp + 8];
           P64[Hp - 112] = _s179k::P64;
           _s179l::P64 = P64[Sp + 16];
           P64[Hp - 104] = _s179l::P64;
           I64[Hp - 96] = sat_s179m_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           P64[Hp - 48] = R6;
           P64[Hp - 40] = _s179j::P64;
           P64[Hp - 32] = _s179k::P64;
           P64[Hp - 24] = _s179l::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 96;
           P64[Hp] = Hp - 176;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,,,)_entry;
         const 0;
         const 14;
         const 34359738368;
         const 0;
         const 8;
         const GHC.Enum.$fBounded(,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.562877481 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_slow() //  [R1]
         { []
         }
     {offset
       c18sH: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_s179F_entry() //  [R1]
         { []
         }
     {offset
       c18sP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18sQ; else goto c18sR;
       c18sQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18sR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179F_info" {
     sat_s179F_info:
         const sat_s179F_entry;
         const 1;
         const 16;
 },
 sat_s179E_entry() //  [R1]
         { []
         }
     {offset
       c18sW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18sX; else goto c18sY;
       c18sX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18sY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179E_info" {
     sat_s179E_info:
         const sat_s179E_entry;
         const 1;
         const 16;
 },
 sat_s179D_entry() //  [R1]
         { []
         }
     {offset
       c18t3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18t4; else goto c18t5;
       c18t4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18t5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179D_info" {
     sat_s179D_info:
         const sat_s179D_entry;
         const 1;
         const 16;
 },
 sat_s179C_entry() //  [R1]
         { []
         }
     {offset
       c18ta: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18tb; else goto c18tc;
       c18tb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18tc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179C_info" {
     sat_s179C_info:
         const sat_s179C_entry;
         const 1;
         const 16;
 },
 sat_s179B_entry() //  [R1]
         { []
         }
     {offset
       c18th: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18ti; else goto c18tj;
       c18ti: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18tj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179B_info" {
     sat_s179B_info:
         const sat_s179B_entry;
         const 1;
         const 16;
 },
 sat_s179A_entry() //  [R1]
         { []
         }
     {offset
       c18to: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18tp; else goto c18tq;
       c18tp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18tq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179A_info" {
     sat_s179A_info:
         const sat_s179A_entry;
         const 1;
         const 16;
 },
 sat_s179z_entry() //  [R1]
         { []
         }
     {offset
       c18tv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18tw; else goto c18tx;
       c18tw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18tx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179z_info" {
     sat_s179z_info:
         const sat_s179z_entry;
         const 1;
         const 16;
 },
 sat_s179y_entry() //  [R1]
         { []
         }
     {offset
       c18tC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18tD; else goto c18tE;
       c18tD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18tE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179y_info" {
     sat_s179y_info:
         const sat_s179y_entry;
         const 1;
         const 16;
 },
 sat_s179x_entry() //  [R1]
         { []
         }
     {offset
       c18tJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18tK; else goto c18tL;
       c18tK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18tL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179x_info" {
     sat_s179x_info:
         const sat_s179x_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       c18tN: // global
           Hp = Hp + 296;
           if (Hp > HpLim) (likely: False) goto c18tR; else goto c18tQ;
       c18tR: // global
           HpAlloc = 296;
           R1 = GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c18tQ: // global
           I64[Hp - 288] = sat_s179F_info;
           P64[Hp - 272] = P64[Sp + 24];
           I64[Hp - 264] = sat_s179E_info;
           P64[Hp - 248] = P64[Sp + 16];
           I64[Hp - 240] = sat_s179D_info;
           P64[Hp - 224] = P64[Sp + 8];
           I64[Hp - 216] = sat_s179C_info;
           P64[Hp - 200] = P64[Sp];
           I64[Hp - 192] = sat_s179B_info;
           P64[Hp - 176] = R6;
           I64[Hp - 168] = sat_s179A_info;
           P64[Hp - 152] = R5;
           I64[Hp - 144] = sat_s179z_info;
           P64[Hp - 128] = R4;
           I64[Hp - 120] = sat_s179y_info;
           P64[Hp - 104] = R3;
           I64[Hp - 96] = sat_s179x_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = (,,,,,,,,)_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           P64[Hp - 48] = Hp - 144;
           P64[Hp - 40] = Hp - 168;
           P64[Hp - 32] = Hp - 192;
           P64[Hp - 24] = Hp - 216;
           P64[Hp - 16] = Hp - 240;
           P64[Hp - 8] = Hp - 264;
           P64[Hp] = Hp - 288;
           R1 = Hp - 71;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.586205423 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_slow() //  [R1]
         { []
         }
     {offset
       c18v6: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_s179X_entry() //  [R1]
         { []
         }
     {offset
       c18ve: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18vf; else goto c18vg;
       c18vf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18vg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179X_info" {
     sat_s179X_info:
         const sat_s179X_entry;
         const 1;
         const 16;
 },
 sat_s179W_entry() //  [R1]
         { []
         }
     {offset
       c18vl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18vm; else goto c18vn;
       c18vm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18vn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179W_info" {
     sat_s179W_info:
         const sat_s179W_entry;
         const 1;
         const 16;
 },
 sat_s179V_entry() //  [R1]
         { []
         }
     {offset
       c18vs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18vt; else goto c18vu;
       c18vt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18vu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179V_info" {
     sat_s179V_info:
         const sat_s179V_entry;
         const 1;
         const 16;
 },
 sat_s179U_entry() //  [R1]
         { []
         }
     {offset
       c18vz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18vA; else goto c18vB;
       c18vA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18vB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179U_info" {
     sat_s179U_info:
         const sat_s179U_entry;
         const 1;
         const 16;
 },
 sat_s179T_entry() //  [R1]
         { []
         }
     {offset
       c18vG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18vH; else goto c18vI;
       c18vH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18vI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179T_info" {
     sat_s179T_info:
         const sat_s179T_entry;
         const 1;
         const 16;
 },
 sat_s179S_entry() //  [R1]
         { []
         }
     {offset
       c18vN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18vO; else goto c18vP;
       c18vO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18vP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179S_info" {
     sat_s179S_info:
         const sat_s179S_entry;
         const 1;
         const 16;
 },
 sat_s179R_entry() //  [R1]
         { []
         }
     {offset
       c18vU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18vV; else goto c18vW;
       c18vV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18vW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179R_info" {
     sat_s179R_info:
         const sat_s179R_entry;
         const 1;
         const 16;
 },
 sat_s179Q_entry() //  [R1]
         { []
         }
     {offset
       c18w1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18w2; else goto c18w3;
       c18w2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18w3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179Q_info" {
     sat_s179Q_info:
         const sat_s179Q_entry;
         const 1;
         const 16;
 },
 sat_s179P_entry() //  [R1]
         { []
         }
     {offset
       c18w8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18w9; else goto c18wa;
       c18w9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18wa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s179P_info" {
     sat_s179P_info:
         const sat_s179P_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       c18wc: // global
           Hp = Hp + 296;
           if (Hp > HpLim) (likely: False) goto c18wg; else goto c18wf;
       c18wg: // global
           HpAlloc = 296;
           R1 = GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c18wf: // global
           I64[Hp - 288] = sat_s179X_info;
           P64[Hp - 272] = P64[Sp + 24];
           I64[Hp - 264] = sat_s179W_info;
           P64[Hp - 248] = P64[Sp + 16];
           I64[Hp - 240] = sat_s179V_info;
           P64[Hp - 224] = P64[Sp + 8];
           I64[Hp - 216] = sat_s179U_info;
           P64[Hp - 200] = P64[Sp];
           I64[Hp - 192] = sat_s179T_info;
           P64[Hp - 176] = R6;
           I64[Hp - 168] = sat_s179S_info;
           P64[Hp - 152] = R5;
           I64[Hp - 144] = sat_s179R_info;
           P64[Hp - 128] = R4;
           I64[Hp - 120] = sat_s179Q_info;
           P64[Hp - 104] = R3;
           I64[Hp - 96] = sat_s179P_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = (,,,,,,,,)_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           P64[Hp - 48] = Hp - 144;
           P64[Hp - 40] = Hp - 168;
           P64[Hp - 32] = Hp - 192;
           P64[Hp - 24] = Hp - 216;
           P64[Hp - 16] = Hp - 240;
           P64[Hp - 8] = Hp - 264;
           P64[Hp] = Hp - 288;
           R1 = Hp - 71;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.607881464 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,,,,)_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c18xv: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,)_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_s17a8_entry() //  [R1]
         { []
         }
     {offset
       c18xD: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c18xE; else goto c18xF;
       c18xE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18xF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Enum.$fBounded(,,,,,,,,)_$cmaxBound_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17a8_info" {
     sat_s17a8_info:
         const sat_s17a8_entry;
         const 9;
         const 15;
 },
 sat_s17a7_entry() //  [R1]
         { []
         }
     {offset
       c18xK: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c18xL; else goto c18xM;
       c18xL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18xM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Enum.$fBounded(,,,,,,,,)_$cminBound_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17a7_info" {
     sat_s17a7_info:
         const sat_s17a7_entry;
         const 9;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c18xO: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c18xS; else goto c18xR;
       c18xS: // global
           HpAlloc = 200;
           R1 = GHC.Enum.$fBounded(,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c18xR: // global
           I64[Hp - 192] = sat_s17a8_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           P64[Hp - 160] = R4;
           P64[Hp - 152] = R5;
           P64[Hp - 144] = R6;
           _s17a3::P64 = P64[Sp];
           P64[Hp - 136] = _s17a3::P64;
           _s17a4::P64 = P64[Sp + 8];
           P64[Hp - 128] = _s17a4::P64;
           _s17a5::P64 = P64[Sp + 16];
           P64[Hp - 120] = _s17a5::P64;
           _s17a6::P64 = P64[Sp + 24];
           P64[Hp - 112] = _s17a6::P64;
           I64[Hp - 104] = sat_s17a7_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           P64[Hp - 56] = R6;
           P64[Hp - 48] = _s17a3::P64;
           P64[Hp - 40] = _s17a4::P64;
           P64[Hp - 32] = _s17a5::P64;
           P64[Hp - 24] = _s17a6::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 192;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,,,,)_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const GHC.Enum.$fBounded(,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.621206781 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_slow() //  [R1]
         { []
         }
     {offset
       c18yo: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2,
                                                               R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s17as_entry() //  [R1]
         { []
         }
     {offset
       c18yw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18yx; else goto c18yy;
       c18yx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18yy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17as_info" {
     sat_s17as_info:
         const sat_s17as_entry;
         const 1;
         const 16;
 },
 sat_s17ar_entry() //  [R1]
         { []
         }
     {offset
       c18yD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18yE; else goto c18yF;
       c18yE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18yF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ar_info" {
     sat_s17ar_info:
         const sat_s17ar_entry;
         const 1;
         const 16;
 },
 sat_s17aq_entry() //  [R1]
         { []
         }
     {offset
       c18yK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18yL; else goto c18yM;
       c18yL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18yM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17aq_info" {
     sat_s17aq_info:
         const sat_s17aq_entry;
         const 1;
         const 16;
 },
 sat_s17ap_entry() //  [R1]
         { []
         }
     {offset
       c18yR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18yS; else goto c18yT;
       c18yS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18yT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ap_info" {
     sat_s17ap_info:
         const sat_s17ap_entry;
         const 1;
         const 16;
 },
 sat_s17ao_entry() //  [R1]
         { []
         }
     {offset
       c18yY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18yZ; else goto c18z0;
       c18yZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18z0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ao_info" {
     sat_s17ao_info:
         const sat_s17ao_entry;
         const 1;
         const 16;
 },
 sat_s17an_entry() //  [R1]
         { []
         }
     {offset
       c18z5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18z6; else goto c18z7;
       c18z6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18z7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17an_info" {
     sat_s17an_info:
         const sat_s17an_entry;
         const 1;
         const 16;
 },
 sat_s17am_entry() //  [R1]
         { []
         }
     {offset
       c18zc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18zd; else goto c18ze;
       c18zd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18ze: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17am_info" {
     sat_s17am_info:
         const sat_s17am_entry;
         const 1;
         const 16;
 },
 sat_s17al_entry() //  [R1]
         { []
         }
     {offset
       c18zj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18zk; else goto c18zl;
       c18zk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18zl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17al_info" {
     sat_s17al_info:
         const sat_s17al_entry;
         const 1;
         const 16;
 },
 sat_s17ak_entry() //  [R1]
         { []
         }
     {offset
       c18zq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18zr; else goto c18zs;
       c18zr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18zs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ak_info" {
     sat_s17ak_info:
         const sat_s17ak_entry;
         const 1;
         const 16;
 },
 sat_s17aj_entry() //  [R1]
         { []
         }
     {offset
       c18zx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18zy; else goto c18zz;
       c18zy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18zz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17aj_info" {
     sat_s17aj_info:
         const sat_s17aj_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       c18zB: // global
           Hp = Hp + 328;
           if (Hp > HpLim) (likely: False) goto c18zF; else goto c18zE;
       c18zF: // global
           HpAlloc = 328;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c18zE: // global
           I64[Hp - 320] = sat_s17as_info;
           P64[Hp - 304] = P64[Sp + 32];
           I64[Hp - 296] = sat_s17ar_info;
           P64[Hp - 280] = P64[Sp + 24];
           I64[Hp - 272] = sat_s17aq_info;
           P64[Hp - 256] = P64[Sp + 16];
           I64[Hp - 248] = sat_s17ap_info;
           P64[Hp - 232] = P64[Sp + 8];
           I64[Hp - 224] = sat_s17ao_info;
           P64[Hp - 208] = P64[Sp];
           I64[Hp - 200] = sat_s17an_info;
           P64[Hp - 184] = R6;
           I64[Hp - 176] = sat_s17am_info;
           P64[Hp - 160] = R5;
           I64[Hp - 152] = sat_s17al_info;
           P64[Hp - 136] = R4;
           I64[Hp - 128] = sat_s17ak_info;
           P64[Hp - 112] = R3;
           I64[Hp - 104] = sat_s17aj_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = (,,,,,,,,,)_con_info;
           P64[Hp - 72] = Hp - 104;
           P64[Hp - 64] = Hp - 128;
           P64[Hp - 56] = Hp - 152;
           P64[Hp - 48] = Hp - 176;
           P64[Hp - 40] = Hp - 200;
           P64[Hp - 32] = Hp - 224;
           P64[Hp - 24] = Hp - 248;
           P64[Hp - 16] = Hp - 272;
           P64[Hp - 8] = Hp - 296;
           P64[Hp] = Hp - 320;
           R1 = Hp - 79;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 42949672960;
         const 0;
         const 10;
         const GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.647587136 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_slow() //  [R1]
         { []
         }
     {offset
       c18B2: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2,
                                                               R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s17aM_entry() //  [R1]
         { []
         }
     {offset
       c18Ba: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Bb; else goto c18Bc;
       c18Bb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Bc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17aM_info" {
     sat_s17aM_info:
         const sat_s17aM_entry;
         const 1;
         const 16;
 },
 sat_s17aL_entry() //  [R1]
         { []
         }
     {offset
       c18Bh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Bi; else goto c18Bj;
       c18Bi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Bj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17aL_info" {
     sat_s17aL_info:
         const sat_s17aL_entry;
         const 1;
         const 16;
 },
 sat_s17aK_entry() //  [R1]
         { []
         }
     {offset
       c18Bo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Bp; else goto c18Bq;
       c18Bp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Bq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17aK_info" {
     sat_s17aK_info:
         const sat_s17aK_entry;
         const 1;
         const 16;
 },
 sat_s17aJ_entry() //  [R1]
         { []
         }
     {offset
       c18Bv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Bw; else goto c18Bx;
       c18Bw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Bx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17aJ_info" {
     sat_s17aJ_info:
         const sat_s17aJ_entry;
         const 1;
         const 16;
 },
 sat_s17aI_entry() //  [R1]
         { []
         }
     {offset
       c18BC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18BD; else goto c18BE;
       c18BD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18BE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17aI_info" {
     sat_s17aI_info:
         const sat_s17aI_entry;
         const 1;
         const 16;
 },
 sat_s17aH_entry() //  [R1]
         { []
         }
     {offset
       c18BJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18BK; else goto c18BL;
       c18BK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18BL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17aH_info" {
     sat_s17aH_info:
         const sat_s17aH_entry;
         const 1;
         const 16;
 },
 sat_s17aG_entry() //  [R1]
         { []
         }
     {offset
       c18BQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18BR; else goto c18BS;
       c18BR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18BS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17aG_info" {
     sat_s17aG_info:
         const sat_s17aG_entry;
         const 1;
         const 16;
 },
 sat_s17aF_entry() //  [R1]
         { []
         }
     {offset
       c18BX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18BY; else goto c18BZ;
       c18BY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18BZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17aF_info" {
     sat_s17aF_info:
         const sat_s17aF_entry;
         const 1;
         const 16;
 },
 sat_s17aE_entry() //  [R1]
         { []
         }
     {offset
       c18C4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18C5; else goto c18C6;
       c18C5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18C6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17aE_info" {
     sat_s17aE_info:
         const sat_s17aE_entry;
         const 1;
         const 16;
 },
 sat_s17aD_entry() //  [R1]
         { []
         }
     {offset
       c18Cb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Cc; else goto c18Cd;
       c18Cc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Cd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17aD_info" {
     sat_s17aD_info:
         const sat_s17aD_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       c18Cf: // global
           Hp = Hp + 328;
           if (Hp > HpLim) (likely: False) goto c18Cj; else goto c18Ci;
       c18Cj: // global
           HpAlloc = 328;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c18Ci: // global
           I64[Hp - 320] = sat_s17aM_info;
           P64[Hp - 304] = P64[Sp + 32];
           I64[Hp - 296] = sat_s17aL_info;
           P64[Hp - 280] = P64[Sp + 24];
           I64[Hp - 272] = sat_s17aK_info;
           P64[Hp - 256] = P64[Sp + 16];
           I64[Hp - 248] = sat_s17aJ_info;
           P64[Hp - 232] = P64[Sp + 8];
           I64[Hp - 224] = sat_s17aI_info;
           P64[Hp - 208] = P64[Sp];
           I64[Hp - 200] = sat_s17aH_info;
           P64[Hp - 184] = R6;
           I64[Hp - 176] = sat_s17aG_info;
           P64[Hp - 160] = R5;
           I64[Hp - 152] = sat_s17aF_info;
           P64[Hp - 136] = R4;
           I64[Hp - 128] = sat_s17aE_info;
           P64[Hp - 112] = R3;
           I64[Hp - 104] = sat_s17aD_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = (,,,,,,,,,)_con_info;
           P64[Hp - 72] = Hp - 104;
           P64[Hp - 64] = Hp - 128;
           P64[Hp - 56] = Hp - 152;
           P64[Hp - 48] = Hp - 176;
           P64[Hp - 40] = Hp - 200;
           P64[Hp - 32] = Hp - 224;
           P64[Hp - 24] = Hp - 248;
           P64[Hp - 16] = Hp - 272;
           P64[Hp - 8] = Hp - 296;
           P64[Hp] = Hp - 320;
           R1 = Hp - 79;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 42949672960;
         const 0;
         const 10;
         const GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.670693289 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,)_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c18DG: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,)_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s17aY_entry() //  [R1]
         { []
         }
     {offset
       c18DO: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c18DP; else goto c18DQ;
       c18DP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18DQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 56] = P64[R1 + 56];
           P64[Sp - 48] = P64[R1 + 64];
           P64[Sp - 40] = P64[R1 + 72];
           P64[Sp - 32] = P64[R1 + 80];
           P64[Sp - 24] = P64[R1 + 88];
           Sp = Sp - 56;
           call GHC.Enum.$fBounded(,,,,,,,,,)_$cmaxBound_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17aY_info" {
     sat_s17aY_info:
         const sat_s17aY_entry;
         const 10;
         const 15;
 },
 sat_s17aX_entry() //  [R1]
         { []
         }
     {offset
       c18DV: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c18DW; else goto c18DX;
       c18DW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18DX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 56] = P64[R1 + 56];
           P64[Sp - 48] = P64[R1 + 64];
           P64[Sp - 40] = P64[R1 + 72];
           P64[Sp - 32] = P64[R1 + 80];
           P64[Sp - 24] = P64[R1 + 88];
           Sp = Sp - 56;
           call GHC.Enum.$fBounded(,,,,,,,,,)_$cminBound_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17aX_info" {
     sat_s17aX_info:
         const sat_s17aX_entry;
         const 10;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c18DZ: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto c18E3; else goto c18E2;
       c18E3: // global
           HpAlloc = 216;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c18E2: // global
           I64[Hp - 208] = sat_s17aY_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           P64[Hp - 176] = R4;
           P64[Hp - 168] = R5;
           P64[Hp - 160] = R6;
           _s17aS::P64 = P64[Sp];
           P64[Hp - 152] = _s17aS::P64;
           _s17aT::P64 = P64[Sp + 8];
           P64[Hp - 144] = _s17aT::P64;
           _s17aU::P64 = P64[Sp + 16];
           P64[Hp - 136] = _s17aU::P64;
           _s17aV::P64 = P64[Sp + 24];
           P64[Hp - 128] = _s17aV::P64;
           _s17aW::P64 = P64[Sp + 32];
           P64[Hp - 120] = _s17aW::P64;
           I64[Hp - 112] = sat_s17aX_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           P64[Hp - 64] = R6;
           P64[Hp - 56] = _s17aS::P64;
           P64[Hp - 48] = _s17aT::P64;
           P64[Hp - 40] = _s17aU::P64;
           P64[Hp - 32] = _s17aV::P64;
           P64[Hp - 24] = _s17aW::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 112;
           P64[Hp] = Hp - 208;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,,,,,)_entry;
         const 0;
         const 14;
         const 42949672960;
         const 0;
         const 10;
         const GHC.Enum.$fBounded(,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.6846323 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_slow() //  [R1]
         { []
         }
     {offset
       c18EB: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2,
                                                                R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_s17bk_entry() //  [R1]
         { []
         }
     {offset
       c18EJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18EK; else goto c18EL;
       c18EK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18EL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bk_info" {
     sat_s17bk_info:
         const sat_s17bk_entry;
         const 1;
         const 16;
 },
 sat_s17bj_entry() //  [R1]
         { []
         }
     {offset
       c18EQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18ER; else goto c18ES;
       c18ER: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18ES: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bj_info" {
     sat_s17bj_info:
         const sat_s17bj_entry;
         const 1;
         const 16;
 },
 sat_s17bi_entry() //  [R1]
         { []
         }
     {offset
       c18EX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18EY; else goto c18EZ;
       c18EY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18EZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bi_info" {
     sat_s17bi_info:
         const sat_s17bi_entry;
         const 1;
         const 16;
 },
 sat_s17bh_entry() //  [R1]
         { []
         }
     {offset
       c18F4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18F5; else goto c18F6;
       c18F5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18F6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bh_info" {
     sat_s17bh_info:
         const sat_s17bh_entry;
         const 1;
         const 16;
 },
 sat_s17bg_entry() //  [R1]
         { []
         }
     {offset
       c18Fb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Fc; else goto c18Fd;
       c18Fc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Fd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bg_info" {
     sat_s17bg_info:
         const sat_s17bg_entry;
         const 1;
         const 16;
 },
 sat_s17bf_entry() //  [R1]
         { []
         }
     {offset
       c18Fi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Fj; else goto c18Fk;
       c18Fj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Fk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bf_info" {
     sat_s17bf_info:
         const sat_s17bf_entry;
         const 1;
         const 16;
 },
 sat_s17be_entry() //  [R1]
         { []
         }
     {offset
       c18Fp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Fq; else goto c18Fr;
       c18Fq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Fr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17be_info" {
     sat_s17be_info:
         const sat_s17be_entry;
         const 1;
         const 16;
 },
 sat_s17bd_entry() //  [R1]
         { []
         }
     {offset
       c18Fw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Fx; else goto c18Fy;
       c18Fx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Fy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bd_info" {
     sat_s17bd_info:
         const sat_s17bd_entry;
         const 1;
         const 16;
 },
 sat_s17bc_entry() //  [R1]
         { []
         }
     {offset
       c18FD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18FE; else goto c18FF;
       c18FE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18FF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bc_info" {
     sat_s17bc_info:
         const sat_s17bc_entry;
         const 1;
         const 16;
 },
 sat_s17bb_entry() //  [R1]
         { []
         }
     {offset
       c18FK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18FL; else goto c18FM;
       c18FL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18FM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bb_info" {
     sat_s17bb_info:
         const sat_s17bb_entry;
         const 1;
         const 16;
 },
 sat_s17ba_entry() //  [R1]
         { []
         }
     {offset
       c18FR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18FS; else goto c18FT;
       c18FS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18FT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ba_info" {
     sat_s17ba_info:
         const sat_s17ba_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       c18FV: // global
           Hp = Hp + 360;
           if (Hp > HpLim) (likely: False) goto c18FZ; else goto c18FY;
       c18FZ: // global
           HpAlloc = 360;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       c18FY: // global
           I64[Hp - 352] = sat_s17bk_info;
           P64[Hp - 336] = P64[Sp + 40];
           I64[Hp - 328] = sat_s17bj_info;
           P64[Hp - 312] = P64[Sp + 32];
           I64[Hp - 304] = sat_s17bi_info;
           P64[Hp - 288] = P64[Sp + 24];
           I64[Hp - 280] = sat_s17bh_info;
           P64[Hp - 264] = P64[Sp + 16];
           I64[Hp - 256] = sat_s17bg_info;
           P64[Hp - 240] = P64[Sp + 8];
           I64[Hp - 232] = sat_s17bf_info;
           P64[Hp - 216] = P64[Sp];
           I64[Hp - 208] = sat_s17be_info;
           P64[Hp - 192] = R6;
           I64[Hp - 184] = sat_s17bd_info;
           P64[Hp - 168] = R5;
           I64[Hp - 160] = sat_s17bc_info;
           P64[Hp - 144] = R4;
           I64[Hp - 136] = sat_s17bb_info;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_s17ba_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = (,,,,,,,,,,)_con_info;
           P64[Hp - 80] = Hp - 112;
           P64[Hp - 72] = Hp - 136;
           P64[Hp - 64] = Hp - 160;
           P64[Hp - 56] = Hp - 184;
           P64[Hp - 48] = Hp - 208;
           P64[Hp - 40] = Hp - 232;
           P64[Hp - 32] = Hp - 256;
           P64[Hp - 24] = Hp - 280;
           P64[Hp - 16] = Hp - 304;
           P64[Hp - 8] = Hp - 328;
           P64[Hp] = Hp - 352;
           R1 = Hp - 87;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 47244640256;
         const 0;
         const 11;
         const GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.713021904 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_slow() //  [R1]
         { []
         }
     {offset
       c18Hu: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2,
                                                                R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_s17bG_entry() //  [R1]
         { []
         }
     {offset
       c18HC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18HD; else goto c18HE;
       c18HD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18HE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bG_info" {
     sat_s17bG_info:
         const sat_s17bG_entry;
         const 1;
         const 16;
 },
 sat_s17bF_entry() //  [R1]
         { []
         }
     {offset
       c18HJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18HK; else goto c18HL;
       c18HK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18HL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bF_info" {
     sat_s17bF_info:
         const sat_s17bF_entry;
         const 1;
         const 16;
 },
 sat_s17bE_entry() //  [R1]
         { []
         }
     {offset
       c18HQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18HR; else goto c18HS;
       c18HR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18HS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bE_info" {
     sat_s17bE_info:
         const sat_s17bE_entry;
         const 1;
         const 16;
 },
 sat_s17bD_entry() //  [R1]
         { []
         }
     {offset
       c18HX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18HY; else goto c18HZ;
       c18HY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18HZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bD_info" {
     sat_s17bD_info:
         const sat_s17bD_entry;
         const 1;
         const 16;
 },
 sat_s17bC_entry() //  [R1]
         { []
         }
     {offset
       c18I4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18I5; else goto c18I6;
       c18I5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18I6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bC_info" {
     sat_s17bC_info:
         const sat_s17bC_entry;
         const 1;
         const 16;
 },
 sat_s17bB_entry() //  [R1]
         { []
         }
     {offset
       c18Ib: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Ic; else goto c18Id;
       c18Ic: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Id: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bB_info" {
     sat_s17bB_info:
         const sat_s17bB_entry;
         const 1;
         const 16;
 },
 sat_s17bA_entry() //  [R1]
         { []
         }
     {offset
       c18Ii: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Ij; else goto c18Ik;
       c18Ij: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Ik: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bA_info" {
     sat_s17bA_info:
         const sat_s17bA_entry;
         const 1;
         const 16;
 },
 sat_s17bz_entry() //  [R1]
         { []
         }
     {offset
       c18Ip: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Iq; else goto c18Ir;
       c18Iq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Ir: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bz_info" {
     sat_s17bz_info:
         const sat_s17bz_entry;
         const 1;
         const 16;
 },
 sat_s17by_entry() //  [R1]
         { []
         }
     {offset
       c18Iw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Ix; else goto c18Iy;
       c18Ix: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Iy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17by_info" {
     sat_s17by_info:
         const sat_s17by_entry;
         const 1;
         const 16;
 },
 sat_s17bx_entry() //  [R1]
         { []
         }
     {offset
       c18ID: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18IE; else goto c18IF;
       c18IE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18IF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bx_info" {
     sat_s17bx_info:
         const sat_s17bx_entry;
         const 1;
         const 16;
 },
 sat_s17bw_entry() //  [R1]
         { []
         }
     {offset
       c18IK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18IL; else goto c18IM;
       c18IL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18IM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bw_info" {
     sat_s17bw_info:
         const sat_s17bw_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       c18IO: // global
           Hp = Hp + 360;
           if (Hp > HpLim) (likely: False) goto c18IS; else goto c18IR;
       c18IS: // global
           HpAlloc = 360;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       c18IR: // global
           I64[Hp - 352] = sat_s17bG_info;
           P64[Hp - 336] = P64[Sp + 40];
           I64[Hp - 328] = sat_s17bF_info;
           P64[Hp - 312] = P64[Sp + 32];
           I64[Hp - 304] = sat_s17bE_info;
           P64[Hp - 288] = P64[Sp + 24];
           I64[Hp - 280] = sat_s17bD_info;
           P64[Hp - 264] = P64[Sp + 16];
           I64[Hp - 256] = sat_s17bC_info;
           P64[Hp - 240] = P64[Sp + 8];
           I64[Hp - 232] = sat_s17bB_info;
           P64[Hp - 216] = P64[Sp];
           I64[Hp - 208] = sat_s17bA_info;
           P64[Hp - 192] = R6;
           I64[Hp - 184] = sat_s17bz_info;
           P64[Hp - 168] = R5;
           I64[Hp - 160] = sat_s17by_info;
           P64[Hp - 144] = R4;
           I64[Hp - 136] = sat_s17bx_info;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_s17bw_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = (,,,,,,,,,,)_con_info;
           P64[Hp - 80] = Hp - 112;
           P64[Hp - 72] = Hp - 136;
           P64[Hp - 64] = Hp - 160;
           P64[Hp - 56] = Hp - 184;
           P64[Hp - 48] = Hp - 208;
           P64[Hp - 40] = Hp - 232;
           P64[Hp - 32] = Hp - 256;
           P64[Hp - 24] = Hp - 280;
           P64[Hp - 16] = Hp - 304;
           P64[Hp - 8] = Hp - 328;
           P64[Hp] = Hp - 352;
           R1 = Hp - 87;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 47244640256;
         const 0;
         const 11;
         const GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.738966751 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,)_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c18Kn: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,)_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_s17bT_entry() //  [R1]
         { []
         }
     {offset
       c18Kv: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c18Kw; else goto c18Kx;
       c18Kw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Kx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 64] = P64[R1 + 56];
           P64[Sp - 56] = P64[R1 + 64];
           P64[Sp - 48] = P64[R1 + 72];
           P64[Sp - 40] = P64[R1 + 80];
           P64[Sp - 32] = P64[R1 + 88];
           P64[Sp - 24] = P64[R1 + 96];
           Sp = Sp - 64;
           call GHC.Enum.$fBounded(,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bT_info" {
     sat_s17bT_info:
         const sat_s17bT_entry;
         const 11;
         const 15;
 },
 sat_s17bS_entry() //  [R1]
         { []
         }
     {offset
       c18KC: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c18KD; else goto c18KE;
       c18KD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18KE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 64] = P64[R1 + 56];
           P64[Sp - 56] = P64[R1 + 64];
           P64[Sp - 48] = P64[R1 + 72];
           P64[Sp - 40] = P64[R1 + 80];
           P64[Sp - 32] = P64[R1 + 88];
           P64[Sp - 24] = P64[R1 + 96];
           Sp = Sp - 64;
           call GHC.Enum.$fBounded(,,,,,,,,,,)_$cminBound_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17bS_info" {
     sat_s17bS_info:
         const sat_s17bS_entry;
         const 11;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c18KG: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c18KK; else goto c18KJ;
       c18KK: // global
           HpAlloc = 232;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       c18KJ: // global
           I64[Hp - 224] = sat_s17bT_info;
           P64[Hp - 208] = R2;
           P64[Hp - 200] = R3;
           P64[Hp - 192] = R4;
           P64[Hp - 184] = R5;
           P64[Hp - 176] = R6;
           _s17bM::P64 = P64[Sp];
           P64[Hp - 168] = _s17bM::P64;
           _s17bN::P64 = P64[Sp + 8];
           P64[Hp - 160] = _s17bN::P64;
           _s17bO::P64 = P64[Sp + 16];
           P64[Hp - 152] = _s17bO::P64;
           _s17bP::P64 = P64[Sp + 24];
           P64[Hp - 144] = _s17bP::P64;
           _s17bQ::P64 = P64[Sp + 32];
           P64[Hp - 136] = _s17bQ::P64;
           _s17bR::P64 = P64[Sp + 40];
           P64[Hp - 128] = _s17bR::P64;
           I64[Hp - 120] = sat_s17bS_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = _s17bM::P64;
           P64[Hp - 56] = _s17bN::P64;
           P64[Hp - 48] = _s17bO::P64;
           P64[Hp - 40] = _s17bP::P64;
           P64[Hp - 32] = _s17bQ::P64;
           P64[Hp - 24] = _s17bR::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 120;
           P64[Hp] = Hp - 224;
           R1 = Hp - 15;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,)_entry;
         const 0;
         const 14;
         const 47244640256;
         const 0;
         const 11;
         const GHC.Enum.$fBounded(,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.753554031 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_slow() //  [R1]
         { []
         }
     {offset
       c18Lk: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_s17ch_entry() //  [R1]
         { []
         }
     {offset
       c18Ls: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Lt; else goto c18Lu;
       c18Lt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Lu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ch_info" {
     sat_s17ch_info:
         const sat_s17ch_entry;
         const 1;
         const 16;
 },
 sat_s17cg_entry() //  [R1]
         { []
         }
     {offset
       c18Lz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18LA; else goto c18LB;
       c18LA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18LB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17cg_info" {
     sat_s17cg_info:
         const sat_s17cg_entry;
         const 1;
         const 16;
 },
 sat_s17cf_entry() //  [R1]
         { []
         }
     {offset
       c18LG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18LH; else goto c18LI;
       c18LH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18LI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17cf_info" {
     sat_s17cf_info:
         const sat_s17cf_entry;
         const 1;
         const 16;
 },
 sat_s17ce_entry() //  [R1]
         { []
         }
     {offset
       c18LN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18LO; else goto c18LP;
       c18LO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18LP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ce_info" {
     sat_s17ce_info:
         const sat_s17ce_entry;
         const 1;
         const 16;
 },
 sat_s17cd_entry() //  [R1]
         { []
         }
     {offset
       c18LU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18LV; else goto c18LW;
       c18LV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18LW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17cd_info" {
     sat_s17cd_info:
         const sat_s17cd_entry;
         const 1;
         const 16;
 },
 sat_s17cc_entry() //  [R1]
         { []
         }
     {offset
       c18M1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18M2; else goto c18M3;
       c18M2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18M3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17cc_info" {
     sat_s17cc_info:
         const sat_s17cc_entry;
         const 1;
         const 16;
 },
 sat_s17cb_entry() //  [R1]
         { []
         }
     {offset
       c18M8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18M9; else goto c18Ma;
       c18M9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Ma: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17cb_info" {
     sat_s17cb_info:
         const sat_s17cb_entry;
         const 1;
         const 16;
 },
 sat_s17ca_entry() //  [R1]
         { []
         }
     {offset
       c18Mf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Mg; else goto c18Mh;
       c18Mg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Mh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ca_info" {
     sat_s17ca_info:
         const sat_s17ca_entry;
         const 1;
         const 16;
 },
 sat_s17c9_entry() //  [R1]
         { []
         }
     {offset
       c18Mm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Mn; else goto c18Mo;
       c18Mn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Mo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17c9_info" {
     sat_s17c9_info:
         const sat_s17c9_entry;
         const 1;
         const 16;
 },
 sat_s17c8_entry() //  [R1]
         { []
         }
     {offset
       c18Mt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Mu; else goto c18Mv;
       c18Mu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Mv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17c8_info" {
     sat_s17c8_info:
         const sat_s17c8_entry;
         const 1;
         const 16;
 },
 sat_s17c7_entry() //  [R1]
         { []
         }
     {offset
       c18MA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18MB; else goto c18MC;
       c18MB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18MC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17c7_info" {
     sat_s17c7_info:
         const sat_s17c7_entry;
         const 1;
         const 16;
 },
 sat_s17c6_entry() //  [R1]
         { []
         }
     {offset
       c18MH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18MI; else goto c18MJ;
       c18MI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18MJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17c6_info" {
     sat_s17c6_info:
         const sat_s17c6_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       c18ML: // global
           Hp = Hp + 392;
           if (Hp > HpLim) (likely: False) goto c18MP; else goto c18MO;
       c18MP: // global
           HpAlloc = 392;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       c18MO: // global
           I64[Hp - 384] = sat_s17ch_info;
           P64[Hp - 368] = P64[Sp + 48];
           I64[Hp - 360] = sat_s17cg_info;
           P64[Hp - 344] = P64[Sp + 40];
           I64[Hp - 336] = sat_s17cf_info;
           P64[Hp - 320] = P64[Sp + 32];
           I64[Hp - 312] = sat_s17ce_info;
           P64[Hp - 296] = P64[Sp + 24];
           I64[Hp - 288] = sat_s17cd_info;
           P64[Hp - 272] = P64[Sp + 16];
           I64[Hp - 264] = sat_s17cc_info;
           P64[Hp - 248] = P64[Sp + 8];
           I64[Hp - 240] = sat_s17cb_info;
           P64[Hp - 224] = P64[Sp];
           I64[Hp - 216] = sat_s17ca_info;
           P64[Hp - 200] = R6;
           I64[Hp - 192] = sat_s17c9_info;
           P64[Hp - 176] = R5;
           I64[Hp - 168] = sat_s17c8_info;
           P64[Hp - 152] = R4;
           I64[Hp - 144] = sat_s17c7_info;
           P64[Hp - 128] = R3;
           I64[Hp - 120] = sat_s17c6_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = (,,,,,,,,,,,)_con_info;
           P64[Hp - 88] = Hp - 120;
           P64[Hp - 80] = Hp - 144;
           P64[Hp - 72] = Hp - 168;
           P64[Hp - 64] = Hp - 192;
           P64[Hp - 56] = Hp - 216;
           P64[Hp - 48] = Hp - 240;
           P64[Hp - 40] = Hp - 264;
           P64[Hp - 32] = Hp - 288;
           P64[Hp - 24] = Hp - 312;
           P64[Hp - 16] = Hp - 336;
           P64[Hp - 8] = Hp - 360;
           P64[Hp] = Hp - 384;
           R1 = Hp - 95;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 51539607552;
         const 0;
         const 12;
         const GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.783198548 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_slow() //  [R1]
         { []
         }
     {offset
       c18Os: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_s17cF_entry() //  [R1]
         { []
         }
     {offset
       c18OA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18OB; else goto c18OC;
       c18OB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18OC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17cF_info" {
     sat_s17cF_info:
         const sat_s17cF_entry;
         const 1;
         const 16;
 },
 sat_s17cE_entry() //  [R1]
         { []
         }
     {offset
       c18OH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18OI; else goto c18OJ;
       c18OI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18OJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17cE_info" {
     sat_s17cE_info:
         const sat_s17cE_entry;
         const 1;
         const 16;
 },
 sat_s17cD_entry() //  [R1]
         { []
         }
     {offset
       c18OO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18OP; else goto c18OQ;
       c18OP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18OQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17cD_info" {
     sat_s17cD_info:
         const sat_s17cD_entry;
         const 1;
         const 16;
 },
 sat_s17cC_entry() //  [R1]
         { []
         }
     {offset
       c18OV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18OW; else goto c18OX;
       c18OW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18OX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17cC_info" {
     sat_s17cC_info:
         const sat_s17cC_entry;
         const 1;
         const 16;
 },
 sat_s17cB_entry() //  [R1]
         { []
         }
     {offset
       c18P2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18P3; else goto c18P4;
       c18P3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18P4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17cB_info" {
     sat_s17cB_info:
         const sat_s17cB_entry;
         const 1;
         const 16;
 },
 sat_s17cA_entry() //  [R1]
         { []
         }
     {offset
       c18P9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Pa; else goto c18Pb;
       c18Pa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Pb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17cA_info" {
     sat_s17cA_info:
         const sat_s17cA_entry;
         const 1;
         const 16;
 },
 sat_s17cz_entry() //  [R1]
         { []
         }
     {offset
       c18Pg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Ph; else goto c18Pi;
       c18Ph: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Pi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17cz_info" {
     sat_s17cz_info:
         const sat_s17cz_entry;
         const 1;
         const 16;
 },
 sat_s17cy_entry() //  [R1]
         { []
         }
     {offset
       c18Pn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Po; else goto c18Pp;
       c18Po: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Pp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17cy_info" {
     sat_s17cy_info:
         const sat_s17cy_entry;
         const 1;
         const 16;
 },
 sat_s17cx_entry() //  [R1]
         { []
         }
     {offset
       c18Pu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Pv; else goto c18Pw;
       c18Pv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Pw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17cx_info" {
     sat_s17cx_info:
         const sat_s17cx_entry;
         const 1;
         const 16;
 },
 sat_s17cw_entry() //  [R1]
         { []
         }
     {offset
       c18PB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18PC; else goto c18PD;
       c18PC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18PD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17cw_info" {
     sat_s17cw_info:
         const sat_s17cw_entry;
         const 1;
         const 16;
 },
 sat_s17cv_entry() //  [R1]
         { []
         }
     {offset
       c18PI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18PJ; else goto c18PK;
       c18PJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18PK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17cv_info" {
     sat_s17cv_info:
         const sat_s17cv_entry;
         const 1;
         const 16;
 },
 sat_s17cu_entry() //  [R1]
         { []
         }
     {offset
       c18PP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18PQ; else goto c18PR;
       c18PQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18PR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17cu_info" {
     sat_s17cu_info:
         const sat_s17cu_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       c18PT: // global
           Hp = Hp + 392;
           if (Hp > HpLim) (likely: False) goto c18PX; else goto c18PW;
       c18PX: // global
           HpAlloc = 392;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       c18PW: // global
           I64[Hp - 384] = sat_s17cF_info;
           P64[Hp - 368] = P64[Sp + 48];
           I64[Hp - 360] = sat_s17cE_info;
           P64[Hp - 344] = P64[Sp + 40];
           I64[Hp - 336] = sat_s17cD_info;
           P64[Hp - 320] = P64[Sp + 32];
           I64[Hp - 312] = sat_s17cC_info;
           P64[Hp - 296] = P64[Sp + 24];
           I64[Hp - 288] = sat_s17cB_info;
           P64[Hp - 272] = P64[Sp + 16];
           I64[Hp - 264] = sat_s17cA_info;
           P64[Hp - 248] = P64[Sp + 8];
           I64[Hp - 240] = sat_s17cz_info;
           P64[Hp - 224] = P64[Sp];
           I64[Hp - 216] = sat_s17cy_info;
           P64[Hp - 200] = R6;
           I64[Hp - 192] = sat_s17cx_info;
           P64[Hp - 176] = R5;
           I64[Hp - 168] = sat_s17cw_info;
           P64[Hp - 152] = R4;
           I64[Hp - 144] = sat_s17cv_info;
           P64[Hp - 128] = R3;
           I64[Hp - 120] = sat_s17cu_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = (,,,,,,,,,,,)_con_info;
           P64[Hp - 88] = Hp - 120;
           P64[Hp - 80] = Hp - 144;
           P64[Hp - 72] = Hp - 168;
           P64[Hp - 64] = Hp - 192;
           P64[Hp - 56] = Hp - 216;
           P64[Hp - 48] = Hp - 240;
           P64[Hp - 40] = Hp - 264;
           P64[Hp - 32] = Hp - 288;
           P64[Hp - 24] = Hp - 312;
           P64[Hp - 16] = Hp - 336;
           P64[Hp - 8] = Hp - 360;
           P64[Hp] = Hp - 384;
           R1 = Hp - 95;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 51539607552;
         const 0;
         const 12;
         const GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.809672178 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,)_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c18RA: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,)_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_s17cT_entry() //  [R1]
         { []
         }
     {offset
       c18RI: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c18RJ; else goto c18RK;
       c18RJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18RK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 72] = P64[R1 + 56];
           P64[Sp - 64] = P64[R1 + 64];
           P64[Sp - 56] = P64[R1 + 72];
           P64[Sp - 48] = P64[R1 + 80];
           P64[Sp - 40] = P64[R1 + 88];
           P64[Sp - 32] = P64[R1 + 96];
           P64[Sp - 24] = P64[R1 + 104];
           Sp = Sp - 72;
           call GHC.Enum.$fBounded(,,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 80, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17cT_info" {
     sat_s17cT_info:
         const sat_s17cT_entry;
         const 12;
         const 15;
 },
 sat_s17cS_entry() //  [R1]
         { []
         }
     {offset
       c18RP: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c18RQ; else goto c18RR;
       c18RQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18RR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 72] = P64[R1 + 56];
           P64[Sp - 64] = P64[R1 + 64];
           P64[Sp - 56] = P64[R1 + 72];
           P64[Sp - 48] = P64[R1 + 80];
           P64[Sp - 40] = P64[R1 + 88];
           P64[Sp - 32] = P64[R1 + 96];
           P64[Sp - 24] = P64[R1 + 104];
           Sp = Sp - 72;
           call GHC.Enum.$fBounded(,,,,,,,,,,,)_$cminBound_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 80, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17cS_info" {
     sat_s17cS_info:
         const sat_s17cS_entry;
         const 12;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c18RT: // global
           Hp = Hp + 248;
           if (Hp > HpLim) (likely: False) goto c18RX; else goto c18RW;
       c18RX: // global
           HpAlloc = 248;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       c18RW: // global
           I64[Hp - 240] = sat_s17cT_info;
           P64[Hp - 224] = R2;
           P64[Hp - 216] = R3;
           P64[Hp - 208] = R4;
           P64[Hp - 200] = R5;
           P64[Hp - 192] = R6;
           _s17cL::P64 = P64[Sp];
           P64[Hp - 184] = _s17cL::P64;
           _s17cM::P64 = P64[Sp + 8];
           P64[Hp - 176] = _s17cM::P64;
           _s17cN::P64 = P64[Sp + 16];
           P64[Hp - 168] = _s17cN::P64;
           _s17cO::P64 = P64[Sp + 24];
           P64[Hp - 160] = _s17cO::P64;
           _s17cP::P64 = P64[Sp + 32];
           P64[Hp - 152] = _s17cP::P64;
           _s17cQ::P64 = P64[Sp + 40];
           P64[Hp - 144] = _s17cQ::P64;
           _s17cR::P64 = P64[Sp + 48];
           P64[Hp - 136] = _s17cR::P64;
           I64[Hp - 128] = sat_s17cS_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = _s17cL::P64;
           P64[Hp - 64] = _s17cM::P64;
           P64[Hp - 56] = _s17cN::P64;
           P64[Hp - 48] = _s17cO::P64;
           P64[Hp - 40] = _s17cP::P64;
           P64[Hp - 32] = _s17cQ::P64;
           P64[Hp - 24] = _s17cR::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 128;
           P64[Hp] = Hp - 240;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,)_entry;
         const 0;
         const 14;
         const 51539607552;
         const 0;
         const 12;
         const GHC.Enum.$fBounded(,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.824576451 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_slow() //  [R1]
         { []
         }
     {offset
       c18Sz: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_s17dj_entry() //  [R1]
         { []
         }
     {offset
       c18SH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18SI; else goto c18SJ;
       c18SI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18SJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dj_info" {
     sat_s17dj_info:
         const sat_s17dj_entry;
         const 1;
         const 16;
 },
 sat_s17di_entry() //  [R1]
         { []
         }
     {offset
       c18SO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18SP; else goto c18SQ;
       c18SP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18SQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17di_info" {
     sat_s17di_info:
         const sat_s17di_entry;
         const 1;
         const 16;
 },
 sat_s17dh_entry() //  [R1]
         { []
         }
     {offset
       c18SV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18SW; else goto c18SX;
       c18SW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18SX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dh_info" {
     sat_s17dh_info:
         const sat_s17dh_entry;
         const 1;
         const 16;
 },
 sat_s17dg_entry() //  [R1]
         { []
         }
     {offset
       c18T2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18T3; else goto c18T4;
       c18T3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18T4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dg_info" {
     sat_s17dg_info:
         const sat_s17dg_entry;
         const 1;
         const 16;
 },
 sat_s17df_entry() //  [R1]
         { []
         }
     {offset
       c18T9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Ta; else goto c18Tb;
       c18Ta: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Tb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17df_info" {
     sat_s17df_info:
         const sat_s17df_entry;
         const 1;
         const 16;
 },
 sat_s17de_entry() //  [R1]
         { []
         }
     {offset
       c18Tg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Th; else goto c18Ti;
       c18Th: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Ti: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17de_info" {
     sat_s17de_info:
         const sat_s17de_entry;
         const 1;
         const 16;
 },
 sat_s17dd_entry() //  [R1]
         { []
         }
     {offset
       c18Tn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18To; else goto c18Tp;
       c18To: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Tp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dd_info" {
     sat_s17dd_info:
         const sat_s17dd_entry;
         const 1;
         const 16;
 },
 sat_s17dc_entry() //  [R1]
         { []
         }
     {offset
       c18Tu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Tv; else goto c18Tw;
       c18Tv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Tw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dc_info" {
     sat_s17dc_info:
         const sat_s17dc_entry;
         const 1;
         const 16;
 },
 sat_s17db_entry() //  [R1]
         { []
         }
     {offset
       c18TB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18TC; else goto c18TD;
       c18TC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18TD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17db_info" {
     sat_s17db_info:
         const sat_s17db_entry;
         const 1;
         const 16;
 },
 sat_s17da_entry() //  [R1]
         { []
         }
     {offset
       c18TI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18TJ; else goto c18TK;
       c18TJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18TK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17da_info" {
     sat_s17da_info:
         const sat_s17da_entry;
         const 1;
         const 16;
 },
 sat_s17d9_entry() //  [R1]
         { []
         }
     {offset
       c18TP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18TQ; else goto c18TR;
       c18TQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18TR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17d9_info" {
     sat_s17d9_info:
         const sat_s17d9_entry;
         const 1;
         const 16;
 },
 sat_s17d8_entry() //  [R1]
         { []
         }
     {offset
       c18TW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18TX; else goto c18TY;
       c18TX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18TY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17d8_info" {
     sat_s17d8_info:
         const sat_s17d8_entry;
         const 1;
         const 16;
 },
 sat_s17d7_entry() //  [R1]
         { []
         }
     {offset
       c18U3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18U4; else goto c18U5;
       c18U4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18U5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17d7_info" {
     sat_s17d7_info:
         const sat_s17d7_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       c18U7: // global
           Hp = Hp + 424;
           if (Hp > HpLim) (likely: False) goto c18Ub; else goto c18Ua;
       c18Ub: // global
           HpAlloc = 424;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       c18Ua: // global
           I64[Hp - 416] = sat_s17dj_info;
           P64[Hp - 400] = P64[Sp + 56];
           I64[Hp - 392] = sat_s17di_info;
           P64[Hp - 376] = P64[Sp + 48];
           I64[Hp - 368] = sat_s17dh_info;
           P64[Hp - 352] = P64[Sp + 40];
           I64[Hp - 344] = sat_s17dg_info;
           P64[Hp - 328] = P64[Sp + 32];
           I64[Hp - 320] = sat_s17df_info;
           P64[Hp - 304] = P64[Sp + 24];
           I64[Hp - 296] = sat_s17de_info;
           P64[Hp - 280] = P64[Sp + 16];
           I64[Hp - 272] = sat_s17dd_info;
           P64[Hp - 256] = P64[Sp + 8];
           I64[Hp - 248] = sat_s17dc_info;
           P64[Hp - 232] = P64[Sp];
           I64[Hp - 224] = sat_s17db_info;
           P64[Hp - 208] = R6;
           I64[Hp - 200] = sat_s17da_info;
           P64[Hp - 184] = R5;
           I64[Hp - 176] = sat_s17d9_info;
           P64[Hp - 160] = R4;
           I64[Hp - 152] = sat_s17d8_info;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = sat_s17d7_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = (,,,,,,,,,,,,)_con_info;
           P64[Hp - 96] = Hp - 128;
           P64[Hp - 88] = Hp - 152;
           P64[Hp - 80] = Hp - 176;
           P64[Hp - 72] = Hp - 200;
           P64[Hp - 64] = Hp - 224;
           P64[Hp - 56] = Hp - 248;
           P64[Hp - 48] = Hp - 272;
           P64[Hp - 40] = Hp - 296;
           P64[Hp - 32] = Hp - 320;
           P64[Hp - 24] = Hp - 344;
           P64[Hp - 16] = Hp - 368;
           P64[Hp - 8] = Hp - 392;
           P64[Hp] = Hp - 416;
           R1 = Hp - 103;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 55834574848;
         const 0;
         const 13;
         const GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.856022364 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_slow() //  [R1]
         { []
         }
     {offset
       c18VW: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_s17dJ_entry() //  [R1]
         { []
         }
     {offset
       c18W4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18W5; else goto c18W6;
       c18W5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18W6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dJ_info" {
     sat_s17dJ_info:
         const sat_s17dJ_entry;
         const 1;
         const 16;
 },
 sat_s17dI_entry() //  [R1]
         { []
         }
     {offset
       c18Wb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Wc; else goto c18Wd;
       c18Wc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Wd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dI_info" {
     sat_s17dI_info:
         const sat_s17dI_entry;
         const 1;
         const 16;
 },
 sat_s17dH_entry() //  [R1]
         { []
         }
     {offset
       c18Wi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Wj; else goto c18Wk;
       c18Wj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Wk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dH_info" {
     sat_s17dH_info:
         const sat_s17dH_entry;
         const 1;
         const 16;
 },
 sat_s17dG_entry() //  [R1]
         { []
         }
     {offset
       c18Wp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Wq; else goto c18Wr;
       c18Wq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Wr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dG_info" {
     sat_s17dG_info:
         const sat_s17dG_entry;
         const 1;
         const 16;
 },
 sat_s17dF_entry() //  [R1]
         { []
         }
     {offset
       c18Ww: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Wx; else goto c18Wy;
       c18Wx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Wy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dF_info" {
     sat_s17dF_info:
         const sat_s17dF_entry;
         const 1;
         const 16;
 },
 sat_s17dE_entry() //  [R1]
         { []
         }
     {offset
       c18WD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18WE; else goto c18WF;
       c18WE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18WF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dE_info" {
     sat_s17dE_info:
         const sat_s17dE_entry;
         const 1;
         const 16;
 },
 sat_s17dD_entry() //  [R1]
         { []
         }
     {offset
       c18WK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18WL; else goto c18WM;
       c18WL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18WM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dD_info" {
     sat_s17dD_info:
         const sat_s17dD_entry;
         const 1;
         const 16;
 },
 sat_s17dC_entry() //  [R1]
         { []
         }
     {offset
       c18WR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18WS; else goto c18WT;
       c18WS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18WT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dC_info" {
     sat_s17dC_info:
         const sat_s17dC_entry;
         const 1;
         const 16;
 },
 sat_s17dB_entry() //  [R1]
         { []
         }
     {offset
       c18WY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18WZ; else goto c18X0;
       c18WZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18X0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dB_info" {
     sat_s17dB_info:
         const sat_s17dB_entry;
         const 1;
         const 16;
 },
 sat_s17dA_entry() //  [R1]
         { []
         }
     {offset
       c18X5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18X6; else goto c18X7;
       c18X6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18X7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dA_info" {
     sat_s17dA_info:
         const sat_s17dA_entry;
         const 1;
         const 16;
 },
 sat_s17dz_entry() //  [R1]
         { []
         }
     {offset
       c18Xc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Xd; else goto c18Xe;
       c18Xd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Xe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dz_info" {
     sat_s17dz_info:
         const sat_s17dz_entry;
         const 1;
         const 16;
 },
 sat_s17dy_entry() //  [R1]
         { []
         }
     {offset
       c18Xj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Xk; else goto c18Xl;
       c18Xk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Xl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dy_info" {
     sat_s17dy_info:
         const sat_s17dy_entry;
         const 1;
         const 16;
 },
 sat_s17dx_entry() //  [R1]
         { []
         }
     {offset
       c18Xq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c18Xr; else goto c18Xs;
       c18Xr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Xs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dx_info" {
     sat_s17dx_info:
         const sat_s17dx_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       c18Xu: // global
           Hp = Hp + 424;
           if (Hp > HpLim) (likely: False) goto c18Xy; else goto c18Xx;
       c18Xy: // global
           HpAlloc = 424;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       c18Xx: // global
           I64[Hp - 416] = sat_s17dJ_info;
           P64[Hp - 400] = P64[Sp + 56];
           I64[Hp - 392] = sat_s17dI_info;
           P64[Hp - 376] = P64[Sp + 48];
           I64[Hp - 368] = sat_s17dH_info;
           P64[Hp - 352] = P64[Sp + 40];
           I64[Hp - 344] = sat_s17dG_info;
           P64[Hp - 328] = P64[Sp + 32];
           I64[Hp - 320] = sat_s17dF_info;
           P64[Hp - 304] = P64[Sp + 24];
           I64[Hp - 296] = sat_s17dE_info;
           P64[Hp - 280] = P64[Sp + 16];
           I64[Hp - 272] = sat_s17dD_info;
           P64[Hp - 256] = P64[Sp + 8];
           I64[Hp - 248] = sat_s17dC_info;
           P64[Hp - 232] = P64[Sp];
           I64[Hp - 224] = sat_s17dB_info;
           P64[Hp - 208] = R6;
           I64[Hp - 200] = sat_s17dA_info;
           P64[Hp - 184] = R5;
           I64[Hp - 176] = sat_s17dz_info;
           P64[Hp - 160] = R4;
           I64[Hp - 152] = sat_s17dy_info;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = sat_s17dx_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = (,,,,,,,,,,,,)_con_info;
           P64[Hp - 96] = Hp - 128;
           P64[Hp - 88] = Hp - 152;
           P64[Hp - 80] = Hp - 176;
           P64[Hp - 72] = Hp - 200;
           P64[Hp - 64] = Hp - 224;
           P64[Hp - 56] = Hp - 248;
           P64[Hp - 48] = Hp - 272;
           P64[Hp - 40] = Hp - 296;
           P64[Hp - 32] = Hp - 320;
           P64[Hp - 24] = Hp - 344;
           P64[Hp - 16] = Hp - 368;
           P64[Hp - 8] = Hp - 392;
           P64[Hp] = Hp - 416;
           R1 = Hp - 103;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 55834574848;
         const 0;
         const 13;
         const GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.884542167 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,)_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c18Zj: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,)_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_s17dY_entry() //  [R1]
         { []
         }
     {offset
       c18Zr: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c18Zs; else goto c18Zt;
       c18Zs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18Zt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 80] = P64[R1 + 56];
           P64[Sp - 72] = P64[R1 + 64];
           P64[Sp - 64] = P64[R1 + 72];
           P64[Sp - 56] = P64[R1 + 80];
           P64[Sp - 48] = P64[R1 + 88];
           P64[Sp - 40] = P64[R1 + 96];
           P64[Sp - 32] = P64[R1 + 104];
           P64[Sp - 24] = P64[R1 + 112];
           Sp = Sp - 80;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 88, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dY_info" {
     sat_s17dY_info:
         const sat_s17dY_entry;
         const 13;
         const 15;
 },
 sat_s17dX_entry() //  [R1]
         { []
         }
     {offset
       c18Zy: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c18Zz; else goto c18ZA;
       c18Zz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c18ZA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 80] = P64[R1 + 56];
           P64[Sp - 72] = P64[R1 + 64];
           P64[Sp - 64] = P64[R1 + 72];
           P64[Sp - 56] = P64[R1 + 80];
           P64[Sp - 48] = P64[R1 + 88];
           P64[Sp - 40] = P64[R1 + 96];
           P64[Sp - 32] = P64[R1 + 104];
           P64[Sp - 24] = P64[R1 + 112];
           Sp = Sp - 80;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,)_$cminBound_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 88, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17dX_info" {
     sat_s17dX_info:
         const sat_s17dX_entry;
         const 13;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c18ZC: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c18ZG; else goto c18ZF;
       c18ZG: // global
           HpAlloc = 264;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       c18ZF: // global
           I64[Hp - 256] = sat_s17dY_info;
           P64[Hp - 240] = R2;
           P64[Hp - 232] = R3;
           P64[Hp - 224] = R4;
           P64[Hp - 216] = R5;
           P64[Hp - 208] = R6;
           _s17dP::P64 = P64[Sp];
           P64[Hp - 200] = _s17dP::P64;
           _s17dQ::P64 = P64[Sp + 8];
           P64[Hp - 192] = _s17dQ::P64;
           _s17dR::P64 = P64[Sp + 16];
           P64[Hp - 184] = _s17dR::P64;
           _s17dS::P64 = P64[Sp + 24];
           P64[Hp - 176] = _s17dS::P64;
           _s17dT::P64 = P64[Sp + 32];
           P64[Hp - 168] = _s17dT::P64;
           _s17dU::P64 = P64[Sp + 40];
           P64[Hp - 160] = _s17dU::P64;
           _s17dV::P64 = P64[Sp + 48];
           P64[Hp - 152] = _s17dV::P64;
           _s17dW::P64 = P64[Sp + 56];
           P64[Hp - 144] = _s17dW::P64;
           I64[Hp - 136] = sat_s17dX_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           P64[Hp - 88] = R6;
           P64[Hp - 80] = _s17dP::P64;
           P64[Hp - 72] = _s17dQ::P64;
           P64[Hp - 64] = _s17dR::P64;
           P64[Hp - 56] = _s17dS::P64;
           P64[Hp - 48] = _s17dT::P64;
           P64[Hp - 40] = _s17dU::P64;
           P64[Hp - 32] = _s17dV::P64;
           P64[Hp - 24] = _s17dW::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 136;
           P64[Hp] = Hp - 256;
           R1 = Hp - 15;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,)_entry;
         const 0;
         const 14;
         const 55834574848;
         const 0;
         const 13;
         const GHC.Enum.$fBounded(,,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.899807021 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_slow() //  [R1]
         { []
         }
     {offset
       c190k: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2,
                                                                   R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_s17eq_entry() //  [R1]
         { []
         }
     {offset
       c190s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c190t; else goto c190u;
       c190t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c190u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17eq_info" {
     sat_s17eq_info:
         const sat_s17eq_entry;
         const 1;
         const 16;
 },
 sat_s17ep_entry() //  [R1]
         { []
         }
     {offset
       c190z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c190A; else goto c190B;
       c190A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c190B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ep_info" {
     sat_s17ep_info:
         const sat_s17ep_entry;
         const 1;
         const 16;
 },
 sat_s17eo_entry() //  [R1]
         { []
         }
     {offset
       c190G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c190H; else goto c190I;
       c190H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c190I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17eo_info" {
     sat_s17eo_info:
         const sat_s17eo_entry;
         const 1;
         const 16;
 },
 sat_s17en_entry() //  [R1]
         { []
         }
     {offset
       c190N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c190O; else goto c190P;
       c190O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c190P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17en_info" {
     sat_s17en_info:
         const sat_s17en_entry;
         const 1;
         const 16;
 },
 sat_s17em_entry() //  [R1]
         { []
         }
     {offset
       c190U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c190V; else goto c190W;
       c190V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c190W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17em_info" {
     sat_s17em_info:
         const sat_s17em_entry;
         const 1;
         const 16;
 },
 sat_s17el_entry() //  [R1]
         { []
         }
     {offset
       c1911: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1912; else goto c1913;
       c1912: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1913: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17el_info" {
     sat_s17el_info:
         const sat_s17el_entry;
         const 1;
         const 16;
 },
 sat_s17ek_entry() //  [R1]
         { []
         }
     {offset
       c1918: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1919; else goto c191a;
       c1919: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c191a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ek_info" {
     sat_s17ek_info:
         const sat_s17ek_entry;
         const 1;
         const 16;
 },
 sat_s17ej_entry() //  [R1]
         { []
         }
     {offset
       c191f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c191g; else goto c191h;
       c191g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c191h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ej_info" {
     sat_s17ej_info:
         const sat_s17ej_entry;
         const 1;
         const 16;
 },
 sat_s17ei_entry() //  [R1]
         { []
         }
     {offset
       c191m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c191n; else goto c191o;
       c191n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c191o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ei_info" {
     sat_s17ei_info:
         const sat_s17ei_entry;
         const 1;
         const 16;
 },
 sat_s17eh_entry() //  [R1]
         { []
         }
     {offset
       c191t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c191u; else goto c191v;
       c191u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c191v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17eh_info" {
     sat_s17eh_info:
         const sat_s17eh_entry;
         const 1;
         const 16;
 },
 sat_s17eg_entry() //  [R1]
         { []
         }
     {offset
       c191A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c191B; else goto c191C;
       c191B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c191C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17eg_info" {
     sat_s17eg_info:
         const sat_s17eg_entry;
         const 1;
         const 16;
 },
 sat_s17ef_entry() //  [R1]
         { []
         }
     {offset
       c191H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c191I; else goto c191J;
       c191I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c191J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ef_info" {
     sat_s17ef_info:
         const sat_s17ef_entry;
         const 1;
         const 16;
 },
 sat_s17ee_entry() //  [R1]
         { []
         }
     {offset
       c191O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c191P; else goto c191Q;
       c191P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c191Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ee_info" {
     sat_s17ee_info:
         const sat_s17ee_entry;
         const 1;
         const 16;
 },
 sat_s17ed_entry() //  [R1]
         { []
         }
     {offset
       c191V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c191W; else goto c191X;
       c191W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c191X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ed_info" {
     sat_s17ed_info:
         const sat_s17ed_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_entry() //  [R2, R3,
                                                           R4, R5, R6]
         { []
         }
     {offset
       c191Z: // global
           Hp = Hp + 456;
           if (Hp > HpLim) (likely: False) goto c1923; else goto c1922;
       c1923: // global
           HpAlloc = 456;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c1922: // global
           I64[Hp - 448] = sat_s17eq_info;
           P64[Hp - 432] = P64[Sp + 64];
           I64[Hp - 424] = sat_s17ep_info;
           P64[Hp - 408] = P64[Sp + 56];
           I64[Hp - 400] = sat_s17eo_info;
           P64[Hp - 384] = P64[Sp + 48];
           I64[Hp - 376] = sat_s17en_info;
           P64[Hp - 360] = P64[Sp + 40];
           I64[Hp - 352] = sat_s17em_info;
           P64[Hp - 336] = P64[Sp + 32];
           I64[Hp - 328] = sat_s17el_info;
           P64[Hp - 312] = P64[Sp + 24];
           I64[Hp - 304] = sat_s17ek_info;
           P64[Hp - 288] = P64[Sp + 16];
           I64[Hp - 280] = sat_s17ej_info;
           P64[Hp - 264] = P64[Sp + 8];
           I64[Hp - 256] = sat_s17ei_info;
           P64[Hp - 240] = P64[Sp];
           I64[Hp - 232] = sat_s17eh_info;
           P64[Hp - 216] = R6;
           I64[Hp - 208] = sat_s17eg_info;
           P64[Hp - 192] = R5;
           I64[Hp - 184] = sat_s17ef_info;
           P64[Hp - 168] = R4;
           I64[Hp - 160] = sat_s17ee_info;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_s17ed_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = (,,,,,,,,,,,,,)_con_info;
           P64[Hp - 104] = Hp - 136;
           P64[Hp - 96] = Hp - 160;
           P64[Hp - 88] = Hp - 184;
           P64[Hp - 80] = Hp - 208;
           P64[Hp - 72] = Hp - 232;
           P64[Hp - 64] = Hp - 256;
           P64[Hp - 56] = Hp - 280;
           P64[Hp - 48] = Hp - 304;
           P64[Hp - 40] = Hp - 328;
           P64[Hp - 32] = Hp - 352;
           P64[Hp - 24] = Hp - 376;
           P64[Hp - 16] = Hp - 400;
           P64[Hp - 8] = Hp - 424;
           P64[Hp] = Hp - 448;
           R1 = Hp - 111;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 60129542144;
         const 0;
         const 14;
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.934245692 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_slow() //  [R1]
         { []
         }
     {offset
       c193W: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2,
                                                                   R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_s17eS_entry() //  [R1]
         { []
         }
     {offset
       c1944: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1945; else goto c1946;
       c1945: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1946: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17eS_info" {
     sat_s17eS_info:
         const sat_s17eS_entry;
         const 1;
         const 16;
 },
 sat_s17eR_entry() //  [R1]
         { []
         }
     {offset
       c194b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c194c; else goto c194d;
       c194c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c194d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17eR_info" {
     sat_s17eR_info:
         const sat_s17eR_entry;
         const 1;
         const 16;
 },
 sat_s17eQ_entry() //  [R1]
         { []
         }
     {offset
       c194i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c194j; else goto c194k;
       c194j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c194k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17eQ_info" {
     sat_s17eQ_info:
         const sat_s17eQ_entry;
         const 1;
         const 16;
 },
 sat_s17eP_entry() //  [R1]
         { []
         }
     {offset
       c194p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c194q; else goto c194r;
       c194q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c194r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17eP_info" {
     sat_s17eP_info:
         const sat_s17eP_entry;
         const 1;
         const 16;
 },
 sat_s17eO_entry() //  [R1]
         { []
         }
     {offset
       c194w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c194x; else goto c194y;
       c194x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c194y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17eO_info" {
     sat_s17eO_info:
         const sat_s17eO_entry;
         const 1;
         const 16;
 },
 sat_s17eN_entry() //  [R1]
         { []
         }
     {offset
       c194D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c194E; else goto c194F;
       c194E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c194F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17eN_info" {
     sat_s17eN_info:
         const sat_s17eN_entry;
         const 1;
         const 16;
 },
 sat_s17eM_entry() //  [R1]
         { []
         }
     {offset
       c194K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c194L; else goto c194M;
       c194L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c194M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17eM_info" {
     sat_s17eM_info:
         const sat_s17eM_entry;
         const 1;
         const 16;
 },
 sat_s17eL_entry() //  [R1]
         { []
         }
     {offset
       c194R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c194S; else goto c194T;
       c194S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c194T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17eL_info" {
     sat_s17eL_info:
         const sat_s17eL_entry;
         const 1;
         const 16;
 },
 sat_s17eK_entry() //  [R1]
         { []
         }
     {offset
       c194Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c194Z; else goto c1950;
       c194Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1950: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17eK_info" {
     sat_s17eK_info:
         const sat_s17eK_entry;
         const 1;
         const 16;
 },
 sat_s17eJ_entry() //  [R1]
         { []
         }
     {offset
       c1955: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1956; else goto c1957;
       c1956: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1957: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17eJ_info" {
     sat_s17eJ_info:
         const sat_s17eJ_entry;
         const 1;
         const 16;
 },
 sat_s17eI_entry() //  [R1]
         { []
         }
     {offset
       c195c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c195d; else goto c195e;
       c195d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c195e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17eI_info" {
     sat_s17eI_info:
         const sat_s17eI_entry;
         const 1;
         const 16;
 },
 sat_s17eH_entry() //  [R1]
         { []
         }
     {offset
       c195j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c195k; else goto c195l;
       c195k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c195l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17eH_info" {
     sat_s17eH_info:
         const sat_s17eH_entry;
         const 1;
         const 16;
 },
 sat_s17eG_entry() //  [R1]
         { []
         }
     {offset
       c195q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c195r; else goto c195s;
       c195r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c195s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17eG_info" {
     sat_s17eG_info:
         const sat_s17eG_entry;
         const 1;
         const 16;
 },
 sat_s17eF_entry() //  [R1]
         { []
         }
     {offset
       c195x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c195y; else goto c195z;
       c195y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c195z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17eF_info" {
     sat_s17eF_info:
         const sat_s17eF_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_entry() //  [R2, R3,
                                                           R4, R5, R6]
         { []
         }
     {offset
       c195B: // global
           Hp = Hp + 456;
           if (Hp > HpLim) (likely: False) goto c195F; else goto c195E;
       c195F: // global
           HpAlloc = 456;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c195E: // global
           I64[Hp - 448] = sat_s17eS_info;
           P64[Hp - 432] = P64[Sp + 64];
           I64[Hp - 424] = sat_s17eR_info;
           P64[Hp - 408] = P64[Sp + 56];
           I64[Hp - 400] = sat_s17eQ_info;
           P64[Hp - 384] = P64[Sp + 48];
           I64[Hp - 376] = sat_s17eP_info;
           P64[Hp - 360] = P64[Sp + 40];
           I64[Hp - 352] = sat_s17eO_info;
           P64[Hp - 336] = P64[Sp + 32];
           I64[Hp - 328] = sat_s17eN_info;
           P64[Hp - 312] = P64[Sp + 24];
           I64[Hp - 304] = sat_s17eM_info;
           P64[Hp - 288] = P64[Sp + 16];
           I64[Hp - 280] = sat_s17eL_info;
           P64[Hp - 264] = P64[Sp + 8];
           I64[Hp - 256] = sat_s17eK_info;
           P64[Hp - 240] = P64[Sp];
           I64[Hp - 232] = sat_s17eJ_info;
           P64[Hp - 216] = R6;
           I64[Hp - 208] = sat_s17eI_info;
           P64[Hp - 192] = R5;
           I64[Hp - 184] = sat_s17eH_info;
           P64[Hp - 168] = R4;
           I64[Hp - 160] = sat_s17eG_info;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_s17eF_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = (,,,,,,,,,,,,,)_con_info;
           P64[Hp - 104] = Hp - 136;
           P64[Hp - 96] = Hp - 160;
           P64[Hp - 88] = Hp - 184;
           P64[Hp - 80] = Hp - 208;
           P64[Hp - 72] = Hp - 232;
           P64[Hp - 64] = Hp - 256;
           P64[Hp - 56] = Hp - 280;
           P64[Hp - 48] = Hp - 304;
           P64[Hp - 40] = Hp - 328;
           P64[Hp - 32] = Hp - 352;
           P64[Hp - 24] = Hp - 376;
           P64[Hp - 16] = Hp - 400;
           P64[Hp - 8] = Hp - 424;
           P64[Hp] = Hp - 448;
           R1 = Hp - 111;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 60129542144;
         const 0;
         const 14;
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.964549681 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,)_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c197y: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,)_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_s17f8_entry() //  [R1]
         { []
         }
     {offset
       c197G: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c197H; else goto c197I;
       c197H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c197I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 88] = P64[R1 + 56];
           P64[Sp - 80] = P64[R1 + 64];
           P64[Sp - 72] = P64[R1 + 72];
           P64[Sp - 64] = P64[R1 + 80];
           P64[Sp - 56] = P64[R1 + 88];
           P64[Sp - 48] = P64[R1 + 96];
           P64[Sp - 40] = P64[R1 + 104];
           P64[Sp - 32] = P64[R1 + 112];
           P64[Sp - 24] = P64[R1 + 120];
           Sp = Sp - 88;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 96, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17f8_info" {
     sat_s17f8_info:
         const sat_s17f8_entry;
         const 14;
         const 15;
 },
 sat_s17f7_entry() //  [R1]
         { []
         }
     {offset
       c197N: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c197O; else goto c197P;
       c197O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c197P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 88] = P64[R1 + 56];
           P64[Sp - 80] = P64[R1 + 64];
           P64[Sp - 72] = P64[R1 + 72];
           P64[Sp - 64] = P64[R1 + 80];
           P64[Sp - 56] = P64[R1 + 88];
           P64[Sp - 48] = P64[R1 + 96];
           P64[Sp - 40] = P64[R1 + 104];
           P64[Sp - 32] = P64[R1 + 112];
           P64[Sp - 24] = P64[R1 + 120];
           Sp = Sp - 88;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,)_$cminBound_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 96, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17f7_info" {
     sat_s17f7_info:
         const sat_s17f7_entry;
         const 14;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c197R: // global
           Hp = Hp + 280;
           if (Hp > HpLim) (likely: False) goto c197V; else goto c197U;
       c197V: // global
           HpAlloc = 280;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c197U: // global
           I64[Hp - 272] = sat_s17f8_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           P64[Hp - 240] = R4;
           P64[Hp - 232] = R5;
           P64[Hp - 224] = R6;
           _s17eY::P64 = P64[Sp];
           P64[Hp - 216] = _s17eY::P64;
           _s17eZ::P64 = P64[Sp + 8];
           P64[Hp - 208] = _s17eZ::P64;
           _s17f0::P64 = P64[Sp + 16];
           P64[Hp - 200] = _s17f0::P64;
           _s17f1::P64 = P64[Sp + 24];
           P64[Hp - 192] = _s17f1::P64;
           _s17f2::P64 = P64[Sp + 32];
           P64[Hp - 184] = _s17f2::P64;
           _s17f3::P64 = P64[Sp + 40];
           P64[Hp - 176] = _s17f3::P64;
           _s17f4::P64 = P64[Sp + 48];
           P64[Hp - 168] = _s17f4::P64;
           _s17f5::P64 = P64[Sp + 56];
           P64[Hp - 160] = _s17f5::P64;
           _s17f6::P64 = P64[Sp + 64];
           P64[Hp - 152] = _s17f6::P64;
           I64[Hp - 144] = sat_s17f7_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           P64[Hp - 104] = R5;
           P64[Hp - 96] = R6;
           P64[Hp - 88] = _s17eY::P64;
           P64[Hp - 80] = _s17eZ::P64;
           P64[Hp - 72] = _s17f0::P64;
           P64[Hp - 64] = _s17f1::P64;
           P64[Hp - 56] = _s17f2::P64;
           P64[Hp - 48] = _s17f3::P64;
           P64[Hp - 40] = _s17f4::P64;
           P64[Hp - 32] = _s17f5::P64;
           P64[Hp - 24] = _s17f6::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 144;
           P64[Hp] = Hp - 272;
           R1 = Hp - 15;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,)_entry;
         const 0;
         const 14;
         const 60129542144;
         const 0;
         const 14;
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:57.982459669 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_slow() //  [R1]
         { []
         }
     {offset
       c198B: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                    R5,
                                                                    R4,
                                                                    R3,
                                                                    R2,
                                                                    R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_s17fC_entry() //  [R1]
         { []
         }
     {offset
       c198J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c198K; else goto c198L;
       c198K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c198L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fC_info" {
     sat_s17fC_info:
         const sat_s17fC_entry;
         const 1;
         const 16;
 },
 sat_s17fB_entry() //  [R1]
         { []
         }
     {offset
       c198Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c198R; else goto c198S;
       c198R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c198S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fB_info" {
     sat_s17fB_info:
         const sat_s17fB_entry;
         const 1;
         const 16;
 },
 sat_s17fA_entry() //  [R1]
         { []
         }
     {offset
       c198X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c198Y; else goto c198Z;
       c198Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c198Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fA_info" {
     sat_s17fA_info:
         const sat_s17fA_entry;
         const 1;
         const 16;
 },
 sat_s17fz_entry() //  [R1]
         { []
         }
     {offset
       c1994: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1995; else goto c1996;
       c1995: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1996: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fz_info" {
     sat_s17fz_info:
         const sat_s17fz_entry;
         const 1;
         const 16;
 },
 sat_s17fy_entry() //  [R1]
         { []
         }
     {offset
       c199b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c199c; else goto c199d;
       c199c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c199d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fy_info" {
     sat_s17fy_info:
         const sat_s17fy_entry;
         const 1;
         const 16;
 },
 sat_s17fx_entry() //  [R1]
         { []
         }
     {offset
       c199i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c199j; else goto c199k;
       c199j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c199k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fx_info" {
     sat_s17fx_info:
         const sat_s17fx_entry;
         const 1;
         const 16;
 },
 sat_s17fw_entry() //  [R1]
         { []
         }
     {offset
       c199p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c199q; else goto c199r;
       c199q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c199r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fw_info" {
     sat_s17fw_info:
         const sat_s17fw_entry;
         const 1;
         const 16;
 },
 sat_s17fv_entry() //  [R1]
         { []
         }
     {offset
       c199w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c199x; else goto c199y;
       c199x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c199y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fv_info" {
     sat_s17fv_info:
         const sat_s17fv_entry;
         const 1;
         const 16;
 },
 sat_s17fu_entry() //  [R1]
         { []
         }
     {offset
       c199D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c199E; else goto c199F;
       c199E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c199F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fu_info" {
     sat_s17fu_info:
         const sat_s17fu_entry;
         const 1;
         const 16;
 },
 sat_s17ft_entry() //  [R1]
         { []
         }
     {offset
       c199K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c199L; else goto c199M;
       c199L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c199M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ft_info" {
     sat_s17ft_info:
         const sat_s17ft_entry;
         const 1;
         const 16;
 },
 sat_s17fs_entry() //  [R1]
         { []
         }
     {offset
       c199R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c199S; else goto c199T;
       c199S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c199T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fs_info" {
     sat_s17fs_info:
         const sat_s17fs_entry;
         const 1;
         const 16;
 },
 sat_s17fr_entry() //  [R1]
         { []
         }
     {offset
       c199Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c199Z; else goto c19a0;
       c199Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19a0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fr_info" {
     sat_s17fr_info:
         const sat_s17fr_entry;
         const 1;
         const 16;
 },
 sat_s17fq_entry() //  [R1]
         { []
         }
     {offset
       c19a5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19a6; else goto c19a7;
       c19a6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19a7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fq_info" {
     sat_s17fq_info:
         const sat_s17fq_entry;
         const 1;
         const 16;
 },
 sat_s17fp_entry() //  [R1]
         { []
         }
     {offset
       c19ac: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19ad; else goto c19ae;
       c19ad: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19ae: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fp_info" {
     sat_s17fp_info:
         const sat_s17fp_entry;
         const 1;
         const 16;
 },
 sat_s17fo_entry() //  [R1]
         { []
         }
     {offset
       c19aj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19ak; else goto c19al;
       c19ak: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19al: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fo_info" {
     sat_s17fo_info:
         const sat_s17fo_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_entry() //  [R2, R3,
                                                            R4, R5, R6]
         { []
         }
     {offset
       c19an: // global
           Hp = Hp + 488;
           if (Hp > HpLim) (likely: False) goto c19ar; else goto c19aq;
       c19ar: // global
           HpAlloc = 488;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       c19aq: // global
           I64[Hp - 480] = sat_s17fC_info;
           P64[Hp - 464] = P64[Sp + 72];
           I64[Hp - 456] = sat_s17fB_info;
           P64[Hp - 440] = P64[Sp + 64];
           I64[Hp - 432] = sat_s17fA_info;
           P64[Hp - 416] = P64[Sp + 56];
           I64[Hp - 408] = sat_s17fz_info;
           P64[Hp - 392] = P64[Sp + 48];
           I64[Hp - 384] = sat_s17fy_info;
           P64[Hp - 368] = P64[Sp + 40];
           I64[Hp - 360] = sat_s17fx_info;
           P64[Hp - 344] = P64[Sp + 32];
           I64[Hp - 336] = sat_s17fw_info;
           P64[Hp - 320] = P64[Sp + 24];
           I64[Hp - 312] = sat_s17fv_info;
           P64[Hp - 296] = P64[Sp + 16];
           I64[Hp - 288] = sat_s17fu_info;
           P64[Hp - 272] = P64[Sp + 8];
           I64[Hp - 264] = sat_s17ft_info;
           P64[Hp - 248] = P64[Sp];
           I64[Hp - 240] = sat_s17fs_info;
           P64[Hp - 224] = R6;
           I64[Hp - 216] = sat_s17fr_info;
           P64[Hp - 200] = R5;
           I64[Hp - 192] = sat_s17fq_info;
           P64[Hp - 176] = R4;
           I64[Hp - 168] = sat_s17fp_info;
           P64[Hp - 152] = R3;
           I64[Hp - 144] = sat_s17fo_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = (,,,,,,,,,,,,,,)_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 168;
           P64[Hp - 96] = Hp - 192;
           P64[Hp - 88] = Hp - 216;
           P64[Hp - 80] = Hp - 240;
           P64[Hp - 72] = Hp - 264;
           P64[Hp - 64] = Hp - 288;
           P64[Hp - 56] = Hp - 312;
           P64[Hp - 48] = Hp - 336;
           P64[Hp - 40] = Hp - 360;
           P64[Hp - 32] = Hp - 384;
           P64[Hp - 24] = Hp - 408;
           P64[Hp - 16] = Hp - 432;
           P64[Hp - 8] = Hp - 456;
           P64[Hp] = Hp - 480;
           R1 = Hp - 119;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_entry;
         const 0;
         const 14;
         const 64424509440;
         const 0;
         const 15;
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.021808018 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_slow() //  [R1]
         { []
         }
     {offset
       c19cs: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_entry(R6,
                                                                    R5,
                                                                    R4,
                                                                    R3,
                                                                    R2,
                                                                    R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_s17g6_entry() //  [R1]
         { []
         }
     {offset
       c19cA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19cB; else goto c19cC;
       c19cB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19cC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17g6_info" {
     sat_s17g6_info:
         const sat_s17g6_entry;
         const 1;
         const 16;
 },
 sat_s17g5_entry() //  [R1]
         { []
         }
     {offset
       c19cH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19cI; else goto c19cJ;
       c19cI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19cJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17g5_info" {
     sat_s17g5_info:
         const sat_s17g5_entry;
         const 1;
         const 16;
 },
 sat_s17g4_entry() //  [R1]
         { []
         }
     {offset
       c19cO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19cP; else goto c19cQ;
       c19cP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19cQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17g4_info" {
     sat_s17g4_info:
         const sat_s17g4_entry;
         const 1;
         const 16;
 },
 sat_s17g3_entry() //  [R1]
         { []
         }
     {offset
       c19cV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19cW; else goto c19cX;
       c19cW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19cX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17g3_info" {
     sat_s17g3_info:
         const sat_s17g3_entry;
         const 1;
         const 16;
 },
 sat_s17g2_entry() //  [R1]
         { []
         }
     {offset
       c19d2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19d3; else goto c19d4;
       c19d3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19d4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17g2_info" {
     sat_s17g2_info:
         const sat_s17g2_entry;
         const 1;
         const 16;
 },
 sat_s17g1_entry() //  [R1]
         { []
         }
     {offset
       c19d9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19da; else goto c19db;
       c19da: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19db: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17g1_info" {
     sat_s17g1_info:
         const sat_s17g1_entry;
         const 1;
         const 16;
 },
 sat_s17g0_entry() //  [R1]
         { []
         }
     {offset
       c19dg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19dh; else goto c19di;
       c19dh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19di: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17g0_info" {
     sat_s17g0_info:
         const sat_s17g0_entry;
         const 1;
         const 16;
 },
 sat_s17fZ_entry() //  [R1]
         { []
         }
     {offset
       c19dn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19do; else goto c19dp;
       c19do: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19dp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fZ_info" {
     sat_s17fZ_info:
         const sat_s17fZ_entry;
         const 1;
         const 16;
 },
 sat_s17fY_entry() //  [R1]
         { []
         }
     {offset
       c19du: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19dv; else goto c19dw;
       c19dv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19dw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fY_info" {
     sat_s17fY_info:
         const sat_s17fY_entry;
         const 1;
         const 16;
 },
 sat_s17fX_entry() //  [R1]
         { []
         }
     {offset
       c19dB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19dC; else goto c19dD;
       c19dC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19dD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fX_info" {
     sat_s17fX_info:
         const sat_s17fX_entry;
         const 1;
         const 16;
 },
 sat_s17fW_entry() //  [R1]
         { []
         }
     {offset
       c19dI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19dJ; else goto c19dK;
       c19dJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19dK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fW_info" {
     sat_s17fW_info:
         const sat_s17fW_entry;
         const 1;
         const 16;
 },
 sat_s17fV_entry() //  [R1]
         { []
         }
     {offset
       c19dP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19dQ; else goto c19dR;
       c19dQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19dR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fV_info" {
     sat_s17fV_info:
         const sat_s17fV_entry;
         const 1;
         const 16;
 },
 sat_s17fU_entry() //  [R1]
         { []
         }
     {offset
       c19dW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19dX; else goto c19dY;
       c19dX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19dY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fU_info" {
     sat_s17fU_info:
         const sat_s17fU_entry;
         const 1;
         const 16;
 },
 sat_s17fT_entry() //  [R1]
         { []
         }
     {offset
       c19e3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19e4; else goto c19e5;
       c19e4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19e5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fT_info" {
     sat_s17fT_info:
         const sat_s17fT_entry;
         const 1;
         const 16;
 },
 sat_s17fS_entry() //  [R1]
         { []
         }
     {offset
       c19ea: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19eb; else goto c19ec;
       c19eb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19ec: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17fS_info" {
     sat_s17fS_info:
         const sat_s17fS_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_entry() //  [R2, R3,
                                                            R4, R5, R6]
         { []
         }
     {offset
       c19ee: // global
           Hp = Hp + 488;
           if (Hp > HpLim) (likely: False) goto c19ei; else goto c19eh;
       c19ei: // global
           HpAlloc = 488;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       c19eh: // global
           I64[Hp - 480] = sat_s17g6_info;
           P64[Hp - 464] = P64[Sp + 72];
           I64[Hp - 456] = sat_s17g5_info;
           P64[Hp - 440] = P64[Sp + 64];
           I64[Hp - 432] = sat_s17g4_info;
           P64[Hp - 416] = P64[Sp + 56];
           I64[Hp - 408] = sat_s17g3_info;
           P64[Hp - 392] = P64[Sp + 48];
           I64[Hp - 384] = sat_s17g2_info;
           P64[Hp - 368] = P64[Sp + 40];
           I64[Hp - 360] = sat_s17g1_info;
           P64[Hp - 344] = P64[Sp + 32];
           I64[Hp - 336] = sat_s17g0_info;
           P64[Hp - 320] = P64[Sp + 24];
           I64[Hp - 312] = sat_s17fZ_info;
           P64[Hp - 296] = P64[Sp + 16];
           I64[Hp - 288] = sat_s17fY_info;
           P64[Hp - 272] = P64[Sp + 8];
           I64[Hp - 264] = sat_s17fX_info;
           P64[Hp - 248] = P64[Sp];
           I64[Hp - 240] = sat_s17fW_info;
           P64[Hp - 224] = R6;
           I64[Hp - 216] = sat_s17fV_info;
           P64[Hp - 200] = R5;
           I64[Hp - 192] = sat_s17fU_info;
           P64[Hp - 176] = R4;
           I64[Hp - 168] = sat_s17fT_info;
           P64[Hp - 152] = R3;
           I64[Hp - 144] = sat_s17fS_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = (,,,,,,,,,,,,,,)_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 168;
           P64[Hp - 96] = Hp - 192;
           P64[Hp - 88] = Hp - 216;
           P64[Hp - 80] = Hp - 240;
           P64[Hp - 72] = Hp - 264;
           P64[Hp - 64] = Hp - 288;
           P64[Hp - 56] = Hp - 312;
           P64[Hp - 48] = Hp - 336;
           P64[Hp - 40] = Hp - 360;
           P64[Hp - 32] = Hp - 384;
           P64[Hp - 24] = Hp - 408;
           P64[Hp - 16] = Hp - 432;
           P64[Hp - 8] = Hp - 456;
           P64[Hp] = Hp - 480;
           R1 = Hp - 119;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_entry;
         const 0;
         const 14;
         const 64424509440;
         const 0;
         const 15;
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.054863106 UTC

[section ""data" . GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_closure" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_closure:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_info;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c19gj: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_s17gn_entry() //  [R1]
         { []
         }
     {offset
       c19gr: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c19gs; else goto c19gt;
       c19gs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19gt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 96] = P64[R1 + 56];
           P64[Sp - 88] = P64[R1 + 64];
           P64[Sp - 80] = P64[R1 + 72];
           P64[Sp - 72] = P64[R1 + 80];
           P64[Sp - 64] = P64[R1 + 88];
           P64[Sp - 56] = P64[R1 + 96];
           P64[Sp - 48] = P64[R1 + 104];
           P64[Sp - 40] = P64[R1 + 112];
           P64[Sp - 32] = P64[R1 + 120];
           P64[Sp - 24] = P64[R1 + 128];
           Sp = Sp - 96;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cmaxBound_entry(R6,
                                                                    R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 104, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17gn_info" {
     sat_s17gn_info:
         const sat_s17gn_entry;
         const 15;
         const 15;
 },
 sat_s17gm_entry() //  [R1]
         { []
         }
     {offset
       c19gy: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c19gz; else goto c19gA;
       c19gz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19gA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 96] = P64[R1 + 56];
           P64[Sp - 88] = P64[R1 + 64];
           P64[Sp - 80] = P64[R1 + 72];
           P64[Sp - 72] = P64[R1 + 80];
           P64[Sp - 64] = P64[R1 + 88];
           P64[Sp - 56] = P64[R1 + 96];
           P64[Sp - 48] = P64[R1 + 104];
           P64[Sp - 40] = P64[R1 + 112];
           P64[Sp - 32] = P64[R1 + 120];
           P64[Sp - 24] = P64[R1 + 128];
           Sp = Sp - 96;
           call GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_$cminBound_entry(R6,
                                                                    R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 104, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17gm_info" {
     sat_s17gm_info:
         const sat_s17gm_entry;
         const 15;
         const 15;
 },
 GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c19gC: // global
           Hp = Hp + 296;
           if (Hp > HpLim) (likely: False) goto c19gG; else goto c19gF;
       c19gG: // global
           HpAlloc = 296;
           R1 = GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       c19gF: // global
           I64[Hp - 288] = sat_s17gn_info;
           P64[Hp - 272] = R2;
           P64[Hp - 264] = R3;
           P64[Hp - 256] = R4;
           P64[Hp - 248] = R5;
           P64[Hp - 240] = R6;
           _s17gc::P64 = P64[Sp];
           P64[Hp - 232] = _s17gc::P64;
           _s17gd::P64 = P64[Sp + 8];
           P64[Hp - 224] = _s17gd::P64;
           _s17ge::P64 = P64[Sp + 16];
           P64[Hp - 216] = _s17ge::P64;
           _s17gf::P64 = P64[Sp + 24];
           P64[Hp - 208] = _s17gf::P64;
           _s17gg::P64 = P64[Sp + 32];
           P64[Hp - 200] = _s17gg::P64;
           _s17gh::P64 = P64[Sp + 40];
           P64[Hp - 192] = _s17gh::P64;
           _s17gi::P64 = P64[Sp + 48];
           P64[Hp - 184] = _s17gi::P64;
           _s17gj::P64 = P64[Sp + 56];
           P64[Hp - 176] = _s17gj::P64;
           _s17gk::P64 = P64[Sp + 64];
           P64[Hp - 168] = _s17gk::P64;
           _s17gl::P64 = P64[Sp + 72];
           P64[Hp - 160] = _s17gl::P64;
           I64[Hp - 152] = sat_s17gm_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           P64[Hp - 112] = R5;
           P64[Hp - 104] = R6;
           P64[Hp - 96] = _s17gc::P64;
           P64[Hp - 88] = _s17gd::P64;
           P64[Hp - 80] = _s17ge::P64;
           P64[Hp - 72] = _s17gf::P64;
           P64[Hp - 64] = _s17gg::P64;
           P64[Hp - 56] = _s17gh::P64;
           P64[Hp - 48] = _s17gi::P64;
           P64[Hp - 40] = _s17gj::P64;
           P64[Hp - 32] = _s17gk::P64;
           P64[Hp - 24] = _s17gl::P64;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 152;
           P64[Hp] = Hp - 288;
           R1 = Hp - 15;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_info" {
     GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_info:
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_entry;
         const 0;
         const 14;
         const 64424509440;
         const 0;
         const 15;
         const GHC.Enum.$fBounded(,,,,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.064427715 UTC

[section ""data" . GHC.Enum.$fBoundedBool_closure" {
     GHC.Enum.$fBoundedBool_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Types.False_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.066085951 UTC

[section ""data" . GHC.Enum.$fBoundedOrdering_closure" {
     GHC.Enum.$fBoundedOrdering_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Types.LT_closure+1;
         const GHC.Types.GT_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.067712974 UTC

[section ""data" . GHC.Enum.$fBoundedVecCount_closure" {
     GHC.Enum.$fBoundedVecCount_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Types.Vec2_closure+1;
         const GHC.Types.Vec64_closure+6;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.069341901 UTC

[section ""data" . GHC.Enum.$fBoundedVecElem_closure" {
     GHC.Enum.$fBoundedVecElem_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Types.Int8ElemRep_closure+1;
         const GHC.Types.DoubleElemRep_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.072579936 UTC

[section ""data" . GHC.Enum.$dmpred_closure" {
     GHC.Enum.$dmpred_closure:
         const GHC.Enum.$dmpred_info;
 },
 sat_s17gt_entry() //  [R1]
         { []
         }
     {offset
       c19hB: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c19hI; else goto c19hJ;
       c19hI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19hJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c19hz_info;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17gt_info" {
     sat_s17gt_info:
         const sat_s17gt_entry;
         const 2;
         const 18;
 },
 _c19hz() //  [R1]
         { []
         }
     {offset
       c19hz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c19hM; else goto c19hL;
       c19hM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c19hL: // global
           _s17gs::I64 = I64[R1 + 7] - 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s17gs::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c19hz_info" {
     block_c19hz_info:
         const _c19hz;
         const 0;
         const 30;
 },
 GHC.Enum.$dmpred_entry() //  [R2, R3]
         { []
         }
     {offset
       c19hN: // global
           _s17gp::P64 = R3;
           _s17go::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c19hO; else goto c19hP;
       c19hP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c19hR; else goto c19hQ;
       c19hR: // global
           HpAlloc = 32;
           goto c19hO;
       c19hO: // global
           R3 = _s17gp::P64;
           R2 = _s17go::P64;
           R1 = GHC.Enum.$dmpred_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c19hQ: // global
           I64[Hp - 24] = sat_s17gt_info;
           P64[Hp - 8] = _s17go::P64;
           P64[Hp] = _s17gp::P64;
           R2 = _s17go::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$dmpred_info" {
     GHC.Enum.$dmpred_info:
         const GHC.Enum.$dmpred_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.081886993 UTC

[section ""data" . GHC.Enum.$dmsucc_closure" {
     GHC.Enum.$dmsucc_closure:
         const GHC.Enum.$dmsucc_info;
 },
 sat_s17gz_entry() //  [R1]
         { []
         }
     {offset
       c19io: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c19iv; else goto c19iw;
       c19iv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19iw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c19im_info;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17gz_info" {
     sat_s17gz_info:
         const sat_s17gz_entry;
         const 2;
         const 18;
 },
 _c19im() //  [R1]
         { []
         }
     {offset
       c19im: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c19iz; else goto c19iy;
       c19iz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c19iy: // global
           _s17gy::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s17gy::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c19im_info" {
     block_c19im_info:
         const _c19im;
         const 0;
         const 30;
 },
 GHC.Enum.$dmsucc_entry() //  [R2, R3]
         { []
         }
     {offset
       c19iA: // global
           _s17gv::P64 = R3;
           _s17gu::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c19iB; else goto c19iC;
       c19iC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c19iE; else goto c19iD;
       c19iE: // global
           HpAlloc = 32;
           goto c19iB;
       c19iB: // global
           R3 = _s17gv::P64;
           R2 = _s17gu::P64;
           R1 = GHC.Enum.$dmsucc_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c19iD: // global
           I64[Hp - 24] = sat_s17gz_info;
           P64[Hp - 8] = _s17gu::P64;
           P64[Hp] = _s17gv::P64;
           R2 = _s17gu::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$dmsucc_info" {
     GHC.Enum.$dmsucc_info:
         const GHC.Enum.$dmsucc_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.088625536 UTC

[section ""cstring" . lvl11_rUQR_bytes" {
     lvl11_rUQR_bytes:
         I8[] [69,110,117,109,46,116,111,69,110,117,109,123]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.090210334 UTC

[section ""cstring" . lvl12_rUQS_bytes" {
     lvl12_rUQS_bytes:
         I8[] [125,58,32,116,97,103,32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.091787045 UTC

[section ""cstring" . lvl13_rUQT_bytes" {
     lvl13_rUQT_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,98,111,117,110,100,115,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.093486252 UTC

[section ""data" . lvl14_rUQU_closure" {
     lvl14_rUQU_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)2_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.100411638 UTC

[section ""data" . GHC.Enum.$wtoEnumError_closure" {
     GHC.Enum.$wtoEnumError_closure:
         const GHC.Enum.$wtoEnumError_info;
         const 0;
 },
 GHC.Enum.$wtoEnumError_slow() //  [R1]
         { []
         }
     {offset
       c19j6: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.$wtoEnumError_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s17gK_entry() //  [R1]
         { []
         }
     {offset
       c19jA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c19jB; else goto c19jC;
       c19jB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19jC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17gK_info" {
     sat_s17gK_info:
         const sat_s17gK_entry;
         const 2;
         const 18;
 },
 sat_s17gJ_entry() //  [R1]
         { []
         }
     {offset
       c19jI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c19jJ; else goto c19jK;
       c19jJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19jK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17gJ_info" {
     sat_s17gJ_info:
         const sat_s17gJ_entry;
         const 2;
         const 18;
 },
 sat_s17gN_entry() //  [R1]
         { []
         }
     {offset
       c19jM: // global
           _s17gN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c19jN; else goto c19jO;
       c19jO: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c19jQ; else goto c19jP;
       c19jQ: // global
           HpAlloc = 112;
           goto c19jN;
       c19jN: // global
           R1 = _s17gN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19jP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17gN::P64;
           _s17gA::P64 = P64[_s17gN::P64 + 16];
           _s17gD::P64 = P64[_s17gN::P64 + 24];
           _s17gE::P64 = P64[_s17gN::P64 + 32];
           I64[Hp - 104] = sat_s17gK_info;
           P64[Hp - 88] = _s17gA::P64;
           P64[Hp - 80] = _s17gE::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = GHC.Types.[]_closure+1;
           I64[Hp - 48] = sat_s17gJ_info;
           P64[Hp - 32] = _s17gA::P64;
           P64[Hp - 24] = _s17gD::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = lvl14_rUQU_closure+2;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17gN_info" {
     sat_s17gN_info:
         const sat_s17gN_entry;
         const 3;
         const 4294967311;
         const S17Oj_srt+200;
 },
 sat_s17gP_entry() //  [R1]
         { []
         }
     {offset
       c19jS: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c19jW; else goto c19jV;
       c19jW: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19jV: // global
           _s17gA::P64 = P64[R1 + 16];
           _s17gD::P64 = P64[R1 + 24];
           _s17gE::P64 = P64[R1 + 32];
           I64[Hp - 56] = sat_s17gN_info;
           P64[Hp - 40] = _s17gA::P64;
           P64[Hp - 32] = _s17gD::P64;
           P64[Hp - 24] = _s17gE::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R3 = Hp - 14;
           R2 = lvl13_rUQT_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s17gP_info" {
     sat_s17gP_info:
         const sat_s17gP_entry;
         const 3;
         const 4294967311;
         const S17Oj_srt+200;
 },
 sat_s17gQ_entry() //  [R1]
         { []
         }
     {offset
       c19jY: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c19jZ; else goto c19k0;
       c19jZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19k0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c19jm_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 40];
           R2 = 0;
           P64[Sp - 40] = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17gQ_info" {
     sat_s17gQ_info:
         const sat_s17gQ_entry;
         const 4294967299;
         const 4294967311;
         const S17Oj_srt+200;
 },
 _c19jm() //  [R1, R2]
         { []
         }
     {offset
       c19jm: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c19k3; else goto c19k2;
       c19k3: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c19k2: // global
           I64[Hp - 56] = sat_s17gP_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 14;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c19jm_info" {
     block_c19jm_info:
         const _c19jm;
         const 3;
         const 4294967326;
         const S17Oj_srt+200;
 },
 sat_s17gR_entry() //  [R1]
         { []
         }
     {offset
       c19k4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c19k8; else goto c19k7;
       c19k8: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19k7: // global
           _s17gA::P64 = P64[R1 + 16];
           _s17gD::P64 = P64[R1 + 24];
           _s17gE::P64 = P64[R1 + 32];
           _s17gC::I64 = I64[R1 + 40];
           I64[Hp - 40] = sat_s17gQ_info;
           P64[Hp - 24] = _s17gA::P64;
           P64[Hp - 16] = _s17gD::P64;
           P64[Hp - 8] = _s17gE::P64;
           I64[Hp] = _s17gC::I64;
           R3 = Hp - 40;
           R2 = lvl12_rUQS_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s17gR_info" {
     sat_s17gR_info:
         const sat_s17gR_entry;
         const 4294967299;
         const 4294967311;
         const S17Oj_srt+200;
 },
 sat_s17gS_entry() //  [R1]
         { []
         }
     {offset
       c19k9: // global
           _s17gS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c19ka; else goto c19kb;
       c19kb: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c19kd; else goto c19kc;
       c19kd: // global
           HpAlloc = 48;
           goto c19ka;
       c19ka: // global
           R1 = _s17gS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19kc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17gS::P64;
           _s17gA::P64 = P64[_s17gS::P64 + 16];
           _s17gB::P64 = P64[_s17gS::P64 + 24];
           _s17gD::P64 = P64[_s17gS::P64 + 32];
           _s17gE::P64 = P64[_s17gS::P64 + 40];
           _s17gC::I64 = I64[_s17gS::P64 + 48];
           I64[Hp - 40] = sat_s17gR_info;
           P64[Hp - 24] = _s17gA::P64;
           P64[Hp - 16] = _s17gD::P64;
           P64[Hp - 8] = _s17gE::P64;
           I64[Hp] = _s17gC::I64;
           R3 = Hp - 40;
           R2 = _s17gB::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17gS_info" {
     sat_s17gS_info:
         const sat_s17gS_entry;
         const 4294967300;
         const 4294967311;
         const S17Oj_srt+200;
 },
 GHC.Enum.$wtoEnumError_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c19kg: // global
           _s17gE::P64 = R6;
           _s17gD::P64 = R5;
           _s17gC::I64 = R4;
           _s17gB::P64 = R3;
           _s17gA::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c19kh; else goto c19ki;
       c19ki: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c19kk; else goto c19kj;
       c19kk: // global
           HpAlloc = 56;
           goto c19kh;
       c19kh: // global
           R1 = GHC.Enum.$wtoEnumError_closure;
           P64[Sp - 40] = _s17gA::P64;
           P64[Sp - 32] = _s17gB::P64;
           I64[Sp - 24] = _s17gC::I64;
           P64[Sp - 16] = _s17gD::P64;
           P64[Sp - 8] = _s17gE::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       c19kj: // global
           I64[Hp - 48] = sat_s17gS_info;
           P64[Hp - 32] = _s17gA::P64;
           P64[Hp - 24] = _s17gB::P64;
           P64[Hp - 16] = _s17gD::P64;
           P64[Hp - 8] = _s17gE::P64;
           I64[Hp] = _s17gC::I64;
           I64[Sp - 8] = block_c19ke_info;
           R3 = Hp - 48;
           R2 = lvl11_rUQR_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$wtoEnumError_info" {
     GHC.Enum.$wtoEnumError_info:
         const GHC.Enum.$wtoEnumError_entry;
         const 0;
         const 432345568522534926;
         const 21474836480;
         const S17Oj_srt;
         const 261;
         const GHC.Enum.$wtoEnumError_slow;
 },
 _c19ke() //  [R1]
         { []
         }
     {offset
       c19ke: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c19ke_info" {
     block_c19ke_info:
         const _c19ke;
         const 0;
         const 4294967326;
         const S17Oj_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.123176798 UTC

[section ""data" . GHC.Enum.toEnumError_closure" {
     GHC.Enum.toEnumError_closure:
         const GHC.Enum.toEnumError_info;
         const 0;
 },
 GHC.Enum.toEnumError_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c19lK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c19lO; else goto c19lP;
       c19lO: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.toEnumError_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c19lP: // global
           I64[Sp - 32] = block_c19lH_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u19lX; else goto c19lI;
       u19lX: // global
           call _c19lH(R1) args: 0, res: 0, upd: 0;
       c19lI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.toEnumError_info" {
     GHC.Enum.toEnumError_info:
         const GHC.Enum.toEnumError_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S17Oj_srt+208;
 },
 _c19lH() //  [R1]
         { []
         }
     {offset
       c19lH: // global
           I64[Sp] = block_c19lN_info;
           _s17gZ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s17gZ::I64;
           if (R1 & 7 != 0) goto u19lW; else goto c19lR;
       u19lW: // global
           call _c19lN(R1) args: 0, res: 0, upd: 0;
       c19lR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c19lH_info" {
     block_c19lH_info:
         const _c19lH;
         const 3;
         const 4294967326;
         const S17Oj_srt+208;
 },
 _c19lN() //  [R1]
         { []
         }
     {offset
       c19lN: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Enum.$wtoEnumError_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c19lN_info" {
     block_c19lN_info:
         const _c19lN;
         const 259;
         const 4294967326;
         const S17Oj_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.129418018 UTC

[section ""cstring" . lvl15_rUQV_bytes" {
     lvl15_rUQV_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,73,110,116,39,115,32,98,111,117,110,100,115,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.13201084 UTC

[section ""data" . lvl16_rUQW_closure" {
     lvl16_rUQW_closure:
         const lvl16_rUQW_info;
 },
 lvl16_rUQW_entry() //  [R2]
         { []
         }
     {offset
       c19ml: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c19mm; else goto c19mn;
       c19mm: // global
           R2 = R2;
           R1 = lvl16_rUQW_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19mn: // global
           I64[Sp - 8] = block_c19mi_info;
           R4 = R2;
           R3 = (-9223372036854775808);
           R2 = 0;
           Sp = Sp - 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl16_rUQW_info" {
     lvl16_rUQW_info:
         const lvl16_rUQW_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c19mi() //  [R1, R2]
         { []
         }
     {offset
       c19mi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c19mq; else goto c19mp;
       c19mq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c19mp: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c19mi_info" {
     block_c19mi_info:
         const _c19mi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.138046776 UTC

[section ""data" . lvl17_rUQX_closure" {
     lvl17_rUQX_closure:
         const lvl17_rUQX_info;
 },
 lvl17_rUQX_entry() //  [R2]
         { []
         }
     {offset
       c19mJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c19mK; else goto c19mL;
       c19mK: // global
           R2 = R2;
           R1 = lvl17_rUQX_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19mL: // global
           I64[Sp - 8] = block_c19mG_info;
           R4 = R2;
           R3 = 9223372036854775807;
           R2 = 0;
           Sp = Sp - 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl17_rUQX_info" {
     lvl17_rUQX_info:
         const lvl17_rUQX_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c19mG() //  [R1, R2]
         { []
         }
     {offset
       c19mG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c19mO; else goto c19mN;
       c19mO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c19mN: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c19mG_info" {
     block_c19mG_info:
         const _c19mG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.142870444 UTC

[section ""data" . lvl18_rUQY_closure" {
     lvl18_rUQY_closure:
         const :_con_info;
         const lvl17_rUQX_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.144540991 UTC

[section ""data" . lvl19_rUQZ_closure" {
     lvl19_rUQZ_closure:
         const :_con_info;
         const lvl16_rUQW_closure+1;
         const lvl18_rUQY_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.146933408 UTC

[section ""data" . lvl20_rUR0_closure" {
     lvl20_rUR0_closure:
         const lvl20_rUR0_info;
         const 0;
         const 0;
         const 0;
 },
 lvl20_rUR0_entry() //  [R1]
         { []
         }
     {offset
       c19n8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19n9; else goto c19na;
       c19n9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19na: // global
           (_c19n5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c19n5::I64 == 0) goto c19n7; else goto c19n6;
       c19n7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c19n6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c19n5::I64;
           R3 = lvl14_rUQU_closure+2;
           R2 = lvl19_rUQZ_closure+2;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl20_rUR0_info" {
     lvl20_rUR0_info:
         const lvl20_rUR0_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.151358872 UTC

[section ""data" . lvl21_rUR1_closure" {
     lvl21_rUR1_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)4_closure;
         const lvl20_rUR0_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.153770802 UTC

[section ""data" . lvl22_rUR2_closure" {
     lvl22_rUR2_closure:
         const lvl22_rUR2_info;
         const 0;
         const 0;
         const 0;
 },
 lvl22_rUR2_entry() //  [R1]
         { []
         }
     {offset
       c19nq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19nr; else goto c19ns;
       c19nr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19ns: // global
           (_c19nn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c19nn::I64 == 0) goto c19np; else goto c19no;
       c19np: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c19no: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c19nn::I64;
           R3 = lvl21_rUR1_closure+2;
           R2 = lvl15_rUQV_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl22_rUR2_info" {
     lvl22_rUR2_info:
         const lvl22_rUR2_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.157415681 UTC

[section ""cstring" . lvl23_rUR3_bytes" {
     lvl23_rUR3_bytes:
         I8[] [69,110,117,109,46,102,114,111,109,69,110,117,109,123]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.158963079 UTC

[section ""cstring" . lvl24_rUR4_bytes" {
     lvl24_rUR4_bytes:
         I8[] [125,58,32,118,97,108,117,101,32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.163260958 UTC

[section ""data" . GHC.Enum.fromEnumError_closure" {
     GHC.Enum.fromEnumError_closure:
         const GHC.Enum.fromEnumError_info;
         const 0;
 },
 sat_s17hf_entry() //  [R1]
         { []
         }
     {offset
       c19nV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c19nW; else goto c19nX;
       c19nW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19nX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c19nT_info;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.show_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17hf_info" {
     sat_s17hf_info:
         const sat_s17hf_entry;
         const 2;
         const 4294967314;
         const S17Oj_srt+232;
 },
 _c19nT() //  [R1]
         { []
         }
     {offset
       c19nT: // global
           R3 = lvl22_rUR2_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c19nT_info" {
     block_c19nT_info:
         const _c19nT;
         const 0;
         const 4294967326;
         const S17Oj_srt+232;
 },
 sat_s17hg_entry() //  [R1]
         { []
         }
     {offset
       c19o1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c19o5; else goto c19o4;
       c19o5: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19o4: // global
           _s17hb::P64 = P64[R1 + 16];
           _s17hd::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s17hf_info;
           P64[Hp - 8] = _s17hb::P64;
           P64[Hp] = _s17hd::P64;
           R3 = Hp - 24;
           R2 = lvl24_rUR4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s17hg_info" {
     sat_s17hg_info:
         const sat_s17hg_entry;
         const 2;
         const 4294967314;
         const S17Oj_srt+232;
 },
 sat_s17hh_entry() //  [R1]
         { []
         }
     {offset
       c19o6: // global
           _s17hh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c19o7; else goto c19o8;
       c19o8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c19oa; else goto c19o9;
       c19oa: // global
           HpAlloc = 32;
           goto c19o7;
       c19o7: // global
           R1 = _s17hh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19o9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17hh::P64;
           _s17hb::P64 = P64[_s17hh::P64 + 16];
           _s17hc::P64 = P64[_s17hh::P64 + 24];
           _s17hd::P64 = P64[_s17hh::P64 + 32];
           I64[Hp - 24] = sat_s17hg_info;
           P64[Hp - 8] = _s17hb::P64;
           P64[Hp] = _s17hd::P64;
           R3 = Hp - 24;
           R2 = _s17hc::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17hh_info" {
     sat_s17hh_info:
         const sat_s17hh_entry;
         const 3;
         const 4294967311;
         const S17Oj_srt+232;
 },
 GHC.Enum.fromEnumError_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c19od: // global
           _s17hd::P64 = R4;
           _s17hc::P64 = R3;
           _s17hb::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c19oe; else goto c19of;
       c19of: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c19oh; else goto c19og;
       c19oh: // global
           HpAlloc = 40;
           goto c19oe;
       c19oe: // global
           R4 = _s17hd::P64;
           R3 = _s17hc::P64;
           R2 = _s17hb::P64;
           R1 = GHC.Enum.fromEnumError_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c19og: // global
           I64[Hp - 32] = sat_s17hh_info;
           P64[Hp - 16] = _s17hb::P64;
           P64[Hp - 8] = _s17hc::P64;
           P64[Hp] = _s17hd::P64;
           I64[Sp - 8] = block_c19ob_info;
           R3 = Hp - 32;
           R2 = lvl23_rUR3_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.fromEnumError_info" {
     GHC.Enum.fromEnumError_info:
         const GHC.Enum.fromEnumError_entry;
         const 0;
         const 6917529031936049166;
         const 12884901911;
         const S17Oj_srt;
 },
 _c19ob() //  [R1]
         { []
         }
     {offset
       c19ob: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c19ob_info" {
     block_c19ob_info:
         const _c19ob;
         const 0;
         const 4294967326;
         const S17Oj_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.174891324 UTC

[section ""cstring" . lvl25_rUR5_bytes" {
     lvl25_rUR5_bytes:
         I8[] [69,110,117,109,46,115,117,99,99,123]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.176480849 UTC

[section ""cstring" . lvl26_rUR6_bytes" {
     lvl26_rUR6_bytes:
         I8[] [125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,109,97,120,66,111,117,110,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.178865901 UTC

[section ""data" . lvl27_rUR7_closure" {
     lvl27_rUR7_closure:
         const lvl27_rUR7_info;
         const 0;
         const 0;
         const 0;
 },
 lvl27_rUR7_entry() //  [R1]
         { []
         }
     {offset
       c19oY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19oZ; else goto c19p0;
       c19oZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19p0: // global
           (_c19oV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c19oV::I64 == 0) goto c19oX; else goto c19oW;
       c19oX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c19oW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c19oV::I64;
           R2 = lvl26_rUR6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_rUR7_info" {
     lvl27_rUR7_info:
         const lvl27_rUR7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.183506566 UTC

[section ""data" . GHC.Enum.succError_closure" {
     GHC.Enum.succError_closure:
         const GHC.Enum.succError_info;
         const 0;
 },
 sat_s17hk_entry() //  [R1]
         { []
         }
     {offset
       c19ph: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19pi; else goto c19pj;
       c19pi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19pj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl27_rUR7_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17hk_info" {
     sat_s17hk_info:
         const sat_s17hk_entry;
         const 1;
         const 4294967312;
         const S17Oj_srt+248;
 },
 section ""relreadonly" . u19pu_srtd" {
     u19pu_srtd:
         const S17Oj_srt;
         const 33;
         const 6442450945;
 },
 GHC.Enum.succError_entry() //  [R2]
         { []
         }
     {offset
       c19pm: // global
           _s17hj::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c19pn; else goto c19po;
       c19po: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c19pq; else goto c19pp;
       c19pq: // global
           HpAlloc = 24;
           goto c19pn;
       c19pn: // global
           R2 = _s17hj::P64;
           R1 = GHC.Enum.succError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19pp: // global
           I64[Hp - 16] = sat_s17hk_info;
           P64[Hp] = _s17hj::P64;
           I64[Sp - 8] = block_c19pk_info;
           R3 = Hp - 16;
           R2 = lvl25_rUR5_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.succError_info" {
     GHC.Enum.succError_info:
         const GHC.Enum.succError_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u19pu_srtd;
 },
 _c19pk() //  [R1]
         { []
         }
     {offset
       c19pk: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c19pk_info" {
     block_c19pk_info:
         const _c19pk;
         const 0;
         const 4294967326;
         const S17Oj_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.191165852 UTC

[section ""cstring" . lvl28_rUR8_bytes" {
     lvl28_rUR8_bytes:
         I8[] [69,110,117,109,46,112,114,101,100,123]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.192723069 UTC

[section ""cstring" . lvl29_rUR9_bytes" {
     lvl29_rUR9_bytes:
         I8[] [125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,109,105,110,66,111,117,110,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.195106692 UTC

[section ""data" . lvl30_rURa_closure" {
     lvl30_rURa_closure:
         const lvl30_rURa_info;
         const 0;
         const 0;
         const 0;
 },
 lvl30_rURa_entry() //  [R1]
         { []
         }
     {offset
       c19pT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19pU; else goto c19pV;
       c19pU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19pV: // global
           (_c19pQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c19pQ::I64 == 0) goto c19pS; else goto c19pR;
       c19pS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c19pR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c19pQ::I64;
           R2 = lvl29_rUR9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl30_rURa_info" {
     lvl30_rURa_info:
         const lvl30_rURa_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.20010775 UTC

[section ""data" . GHC.Enum.predError_closure" {
     GHC.Enum.predError_closure:
         const GHC.Enum.predError_info;
         const 0;
 },
 sat_s17hn_entry() //  [R1]
         { []
         }
     {offset
       c19qc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19qd; else goto c19qe;
       c19qd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19qe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl30_rURa_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17hn_info" {
     sat_s17hn_info:
         const sat_s17hn_entry;
         const 1;
         const 4294967312;
         const S17Oj_srt+272;
 },
 GHC.Enum.predError_entry() //  [R2]
         { []
         }
     {offset
       c19qh: // global
           _s17hm::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c19qi; else goto c19qj;
       c19qj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c19ql; else goto c19qk;
       c19ql: // global
           HpAlloc = 24;
           goto c19qi;
       c19qi: // global
           R2 = _s17hm::P64;
           R1 = GHC.Enum.predError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19qk: // global
           I64[Hp - 16] = sat_s17hn_info;
           P64[Hp] = _s17hm::P64;
           I64[Sp - 8] = block_c19qf_info;
           R3 = Hp - 16;
           R2 = lvl28_rUR8_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.predError_info" {
     GHC.Enum.predError_info:
         const GHC.Enum.predError_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S17Oj_srt+264;
 },
 _c19qf() //  [R1]
         { []
         }
     {offset
       c19qf: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c19qf_info" {
     block_c19qf_info:
         const _c19qf;
         const 0;
         const 4294967326;
         const S17Oj_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.209940259 UTC

[section ""data" . GHC.Enum.eftCharFB_closure" {
     GHC.Enum.eftCharFB_closure:
         const GHC.Enum.eftCharFB_info;
 },
 GHC.Enum.eftCharFB_slow() //  [R1]
         { []
         }
     {offset
       c19qF: // global
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Enum.eftCharFB_entry(R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s17hz_entry() //  [R1]
         { []
         }
     {offset
       c19qX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19qY; else goto c19qZ;
       c19qY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19qZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s17ht_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17hz_info" {
     sat_s17hz_info:
         const sat_s17hz_entry;
         const 4294967297;
         const 19;
 },
 go_s17ht_entry() //  [R1, R2]
         { []
         }
     {offset
       c19r3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c19r7; else goto c19r6;
       c19r7: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19r6: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 23])) goto c19r1; else goto c19r2;
       c19r1: // global
           _s17hp::P64 = P64[R1 + 7];
           I64[Hp - 40] = sat_s17hz_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 7;
           R1 = _s17hp::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c19r2: // global
           _s17hq::P64 = P64[R1 + 15];
           Hp = Hp - 48;
           R1 = _s17hq::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s17ht_info" {
     go_s17ht_info:
         const go_s17ht_entry;
         const 4294967298;
         const 8;
         const 4294967300;
 },
 GHC.Enum.eftCharFB_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c19rc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c19rg; else goto c19rf;
       c19rg: // global
           HpAlloc = 32;
           R1 = GHC.Enum.eftCharFB_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c19rf: // global
           I64[Hp - 24] = go_s17ht_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           I64[Hp] = R5;
           R2 = R4;
           R1 = Hp - 23;
           call go_s17ht_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.eftCharFB_info" {
     GHC.Enum.eftCharFB_info:
         const GHC.Enum.eftCharFB_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 772;
         const GHC.Enum.eftCharFB_slow;
 },
 section ""data" . GHC.Enum.eftChar_closure" {
     GHC.Enum.eftChar_closure:
         const GHC.Enum.eftChar_info;
 },
 sat_s17hG_entry() //  [R1]
         { []
         }
     {offset
       c19ru: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19rv; else goto c19rw;
       c19rv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19rw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 24];
           R2 = I64[R1 + 16] + 1;
           Sp = Sp - 16;
           call GHC.Enum.eftChar_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17hG_info" {
     sat_s17hG_info:
         const sat_s17hG_entry;
         const 8589934592;
         const 20;
 },
 GHC.Enum.eftChar_entry() //  [R2, R3]
         { []
         }
     {offset
       c19rA: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c19rE; else goto c19rD;
       c19rE: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.eftChar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c19rD: // global
           if (%MO_S_Le_W64(R2, R3)) goto c19ry; else goto c19rz;
       c19ry: // global
           I64[Hp - 64] = sat_s17hG_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = R3;
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c19rz: // global
           Hp = Hp - 72;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.eftChar_info" {
     GHC.Enum.eftChar_info:
         const GHC.Enum.eftChar_entry;
         const 0;
         const 14;
         const 8589934604;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.223289426 UTC

[section ""data" . GHC.Enum.$fEnumChar_$cenumFrom_closure" {
     GHC.Enum.$fEnumChar_$cenumFrom_closure:
         const GHC.Enum.$fEnumChar_$cenumFrom_info;
 },
 GHC.Enum.$fEnumChar_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c19sr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c19ss; else goto c19st;
       c19ss: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumChar_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19st: // global
           I64[Sp - 8] = block_c19so_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u19sy; else goto c19sp;
       u19sy: // global
           call _c19so(R1) args: 0, res: 0, upd: 0;
       c19sp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumChar_$cenumFrom_info" {
     GHC.Enum.$fEnumChar_$cenumFrom_info:
         const GHC.Enum.$fEnumChar_$cenumFrom_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c19so() //  [R1]
         { []
         }
     {offset
       c19so: // global
           R3 = 1114111;
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.eftChar_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c19so_info" {
     block_c19so_info:
         const _c19so;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.229071966 UTC

[section ""data" . GHC.Enum.$fEnumChar_$cenumFromTo_closure" {
     GHC.Enum.$fEnumChar_$cenumFromTo_closure:
         const GHC.Enum.$fEnumChar_$cenumFromTo_info;
 },
 GHC.Enum.$fEnumChar_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c19sQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19sU; else goto c19sV;
       c19sU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumChar_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c19sV: // global
           I64[Sp - 16] = block_c19sN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u19t7; else goto c19sO;
       u19t7: // global
           call _c19sN(R1) args: 0, res: 0, upd: 0;
       c19sO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumChar_$cenumFromTo_info" {
     GHC.Enum.$fEnumChar_$cenumFromTo_info:
         const GHC.Enum.$fEnumChar_$cenumFromTo_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c19sN() //  [R1]
         { []
         }
     {offset
       c19sN: // global
           I64[Sp] = block_c19sT_info;
           _s17hO::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s17hO::I64;
           if (R1 & 7 != 0) goto u19t6; else goto c19sX;
       u19t6: // global
           call _c19sT(R1) args: 0, res: 0, upd: 0;
       c19sX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c19sN_info" {
     block_c19sN_info:
         const _c19sN;
         const 1;
         const 30;
 },
 _c19sT() //  [R1]
         { []
         }
     {offset
       c19sT: // global
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Enum.eftChar_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c19sT_info" {
     block_c19sT_info:
         const _c19sT;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.238012698 UTC

[section ""data" . GHC.Enum.go_up_char_fb_closure" {
     GHC.Enum.go_up_char_fb_closure:
         const GHC.Enum.go_up_char_fb_info;
 },
 GHC.Enum.go_up_char_fb_slow() //  [R1]
         { []
         }
     {offset
       c19to: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.go_up_char_fb_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s17i4_entry() //  [R1]
         { []
         }
     {offset
       c19tG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19tH; else goto c19tI;
       c19tH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19tI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17hY_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17i4_info" {
     sat_s17i4_info:
         const sat_s17i4_entry;
         const 8589934593;
         const 15;
 },
 go_up_s17hY_entry() //  [R1, R2]
         { []
         }
     {offset
       c19tM: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c19tQ; else goto c19tP;
       c19tQ: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19tP: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 31])) goto c19tK; else goto c19tL;
       c19tK: // global
           _s17hT::P64 = P64[R1 + 7];
           _s17hW::I64 = I64[R1 + 23];
           I64[Hp - 48] = sat_s17i4_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = _s17hW::I64;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 7;
           R1 = _s17hT::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c19tL: // global
           _s17hU::P64 = P64[R1 + 15];
           Hp = Hp - 56;
           R1 = _s17hU::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17hY_info" {
     go_up_s17hY_info:
         const go_up_s17hY_entry;
         const 8589934594;
         const 8;
         const 4294967300;
 },
 GHC.Enum.go_up_char_fb_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c19tV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c19tZ; else goto c19tY;
       c19tZ: // global
           HpAlloc = 40;
           R1 = GHC.Enum.go_up_char_fb_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       c19tY: // global
           I64[Hp - 32] = go_up_s17hY_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = R5;
           I64[Hp] = R6;
           R2 = R4;
           R1 = Hp - 31;
           call go_up_s17hY_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.go_up_char_fb_info" {
     GHC.Enum.go_up_char_fb_info:
         const GHC.Enum.go_up_char_fb_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 1797;
         const GHC.Enum.go_up_char_fb_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.247852563 UTC

[section ""data" . GHC.Enum.go_dn_char_fb_closure" {
     GHC.Enum.go_dn_char_fb_closure:
         const GHC.Enum.go_dn_char_fb_info;
 },
 GHC.Enum.go_dn_char_fb_slow() //  [R1]
         { []
         }
     {offset
       c19uk: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.go_dn_char_fb_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s17ig_entry() //  [R1]
         { []
         }
     {offset
       c19uC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19uD; else goto c19uE;
       c19uD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19uE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17ia_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ig_info" {
     sat_s17ig_info:
         const sat_s17ig_entry;
         const 8589934593;
         const 15;
 },
 go_dn_s17ia_entry() //  [R1, R2]
         { []
         }
     {offset
       c19uI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c19uM; else goto c19uL;
       c19uM: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19uL: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 31])) goto c19uG; else goto c19uH;
       c19uG: // global
           _s17i5::P64 = P64[R1 + 7];
           _s17i8::I64 = I64[R1 + 23];
           I64[Hp - 48] = sat_s17ig_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = _s17i8::I64;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 7;
           R1 = _s17i5::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c19uH: // global
           _s17i6::P64 = P64[R1 + 15];
           Hp = Hp - 56;
           R1 = _s17i6::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17ia_info" {
     go_dn_s17ia_info:
         const go_dn_s17ia_entry;
         const 8589934594;
         const 8;
         const 4294967300;
 },
 GHC.Enum.go_dn_char_fb_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c19uR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c19uV; else goto c19uU;
       c19uV: // global
           HpAlloc = 40;
           R1 = GHC.Enum.go_dn_char_fb_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       c19uU: // global
           I64[Hp - 32] = go_dn_s17ia_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = R5;
           I64[Hp] = R6;
           R2 = R4;
           R1 = Hp - 31;
           call go_dn_s17ia_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.go_dn_char_fb_info" {
     GHC.Enum.go_dn_char_fb_info:
         const GHC.Enum.go_dn_char_fb_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 1797;
         const GHC.Enum.go_dn_char_fb_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.257750627 UTC

[section ""data" . GHC.Enum.go_up_char_list_closure" {
     GHC.Enum.go_up_char_list_closure:
         const GHC.Enum.go_up_char_list_info;
 },
 sat_s17iq_entry() //  [R1]
         { []
         }
     {offset
       c19vx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19vy; else goto c19vz;
       c19vy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19vz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17ik_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17iq_info" {
     sat_s17iq_info:
         const sat_s17iq_entry;
         const 8589934593;
         const 15;
 },
 go_up_s17ik_entry() //  [R1, R2]
         { []
         }
     {offset
       c19vD: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c19vH; else goto c19vG;
       c19vH: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19vG: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c19vB; else goto c19vC;
       c19vB: // global
           _s17ii::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_s17iq_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s17ii::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c19vC: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17ik_info" {
     go_up_s17ik_info:
         const go_up_s17ik_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 GHC.Enum.go_up_char_list_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c19vN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c19vR; else goto c19vQ;
       c19vR: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.go_up_char_list_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c19vQ: // global
           I64[Hp - 16] = go_up_s17ik_info;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R2 = R2;
           R1 = Hp - 15;
           call go_up_s17ik_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.go_up_char_list_info" {
     GHC.Enum.go_up_char_list_info:
         const GHC.Enum.go_up_char_list_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.267475965 UTC

[section ""data" . GHC.Enum.go_dn_char_list_closure" {
     GHC.Enum.go_dn_char_list_closure:
         const GHC.Enum.go_dn_char_list_info;
 },
 sat_s17iA_entry() //  [R1]
         { []
         }
     {offset
       c19wx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19wy; else goto c19wz;
       c19wy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19wz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17iu_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17iA_info" {
     sat_s17iA_info:
         const sat_s17iA_entry;
         const 8589934593;
         const 15;
 },
 go_dn_s17iu_entry() //  [R1, R2]
         { []
         }
     {offset
       c19wD: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c19wH; else goto c19wG;
       c19wH: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19wG: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c19wB; else goto c19wC;
       c19wB: // global
           _s17is::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_s17iA_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s17is::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c19wC: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17iu_info" {
     go_dn_s17iu_info:
         const go_dn_s17iu_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 GHC.Enum.go_dn_char_list_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c19wN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c19wR; else goto c19wQ;
       c19wR: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.go_dn_char_list_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c19wQ: // global
           I64[Hp - 16] = go_dn_s17iu_info;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R2 = R2;
           R1 = Hp - 15;
           call go_dn_s17iu_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.go_dn_char_list_info" {
     GHC.Enum.go_dn_char_list_info:
         const GHC.Enum.go_dn_char_list_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.275860934 UTC

[section ""data" . GHC.Enum.efdtCharFB_closure" {
     GHC.Enum.efdtCharFB_closure:
         const GHC.Enum.efdtCharFB_info;
 },
 GHC.Enum.efdtCharFB_slow() //  [R1]
         { []
         }
     {offset
       c19xg: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.efdtCharFB_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Enum.efdtCharFB_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c19xm: // global
           _s17iG::I64 = R5 - R4;
           if (%MO_S_Lt_W64(_s17iG::I64, 0)) goto c19xt; else goto c19xu;
       c19xt: // global
           R6 = R6;
           R5 = _s17iG::I64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.go_dn_char_fb_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
       c19xu: // global
           R6 = R6;
           R5 = _s17iG::I64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.go_up_char_fb_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtCharFB_info" {
     GHC.Enum.efdtCharFB_info:
         const GHC.Enum.efdtCharFB_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 1797;
         const GHC.Enum.efdtCharFB_slow;
 },
 section ""data" . GHC.Enum.efdtChar_closure" {
     GHC.Enum.efdtChar_closure:
         const GHC.Enum.efdtChar_info;
 },
 GHC.Enum.efdtChar_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c19xB: // global
           _s17iL::I64 = R3 - R2;
           if (%MO_S_Lt_W64(_s17iL::I64, 0)) goto c19xI; else goto c19xJ;
       c19xI: // global
           R4 = R4;
           R3 = _s17iL::I64;
           R2 = R2;
           call GHC.Enum.go_dn_char_list_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
       c19xJ: // global
           R4 = R4;
           R3 = _s17iL::I64;
           R2 = R2;
           call GHC.Enum.go_up_char_list_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtChar_info" {
     GHC.Enum.efdtChar_info:
         const GHC.Enum.efdtChar_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.286535083 UTC

[section ""data" . GHC.Enum.$fEnumChar_$cenumFromThenTo_closure" {
     GHC.Enum.$fEnumChar_$cenumFromThenTo_closure:
         const GHC.Enum.$fEnumChar_$cenumFromThenTo_info;
 },
 sat_s17j7_entry() //  [R1]
         { []
         }
     {offset
       c19yI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19yJ; else goto c19yK;
       c19yJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19yK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17j1_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17j7_info" {
     sat_s17j7_info:
         const sat_s17j7_entry;
         const 8589934593;
         const 15;
 },
 go_dn_s17j1_entry() //  [R1, R2]
         { []
         }
     {offset
       c19yO: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c19yS; else goto c19yR;
       c19yS: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19yR: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c19yM; else goto c19yN;
       c19yM: // global
           _s17iX::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_s17j7_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s17iX::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c19yN: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17j1_info" {
     go_dn_s17j1_info:
         const go_dn_s17j1_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s17jf_entry() //  [R1]
         { []
         }
     {offset
       c19zg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19zh; else goto c19zi;
       c19zh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19zi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17j9_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17jf_info" {
     sat_s17jf_info:
         const sat_s17jf_entry;
         const 8589934593;
         const 15;
 },
 go_up_s17j9_entry() //  [R1, R2]
         { []
         }
     {offset
       c19zm: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c19zq; else goto c19zp;
       c19zq: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19zp: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c19zk; else goto c19zl;
       c19zk: // global
           _s17iX::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_s17jf_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s17iX::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c19zl: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17j9_info" {
     go_up_s17j9_info:
         const go_up_s17j9_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 GHC.Enum.$fEnumChar_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c19zw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c19zx; else goto c19zy;
       c19zx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumChar_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c19zy: // global
           I64[Sp - 24] = block_c19y0_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u19zJ; else goto c19y1;
       u19zJ: // global
           call _c19y0(R1) args: 0, res: 0, upd: 0;
       c19y1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumChar_$cenumFromThenTo_info" {
     GHC.Enum.$fEnumChar_$cenumFromThenTo_info:
         const GHC.Enum.$fEnumChar_$cenumFromThenTo_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c19y0() //  [R1]
         { []
         }
     {offset
       c19y0: // global
           I64[Sp] = block_c19y5_info;
           _s17iR::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s17iR::I64;
           if (R1 & 7 != 0) goto u19zH; else goto c19y6;
       u19zH: // global
           call _c19y5(R1) args: 0, res: 0, upd: 0;
       c19y6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c19y0_info" {
     block_c19y0_info:
         const _c19y0;
         const 2;
         const 30;
 },
 _c19y5() //  [R1]
         { []
         }
     {offset
       c19y5: // global
           I64[Sp] = block_c19ya_info;
           _s17iT::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s17iT::I64;
           if (R1 & 7 != 0) goto u19zI; else goto c19yb;
       u19zI: // global
           call _c19ya(R1) args: 0, res: 0, upd: 0;
       c19yb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c19y5_info" {
     block_c19y5_info:
         const _c19y5;
         const 66;
         const 30;
 },
 _c19ya() //  [R1]
         { []
         }
     {offset
       c19ya: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c19zD; else goto c19zC;
       c19zD: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c19zC: // global
           _s17iV::I64 = I64[R1 + 7];
           _s17iW::I64 = I64[Sp + 8];
           _s17iX::I64 = I64[Sp + 16] - _s17iW::I64;
           if (%MO_S_Lt_W64(_s17iX::I64, 0)) goto c19zF; else goto c19zG;
       c19zF: // global
           I64[Hp - 16] = go_dn_s17j1_info;
           I64[Hp - 8] = _s17iX::I64;
           I64[Hp] = _s17iV::I64;
           R2 = _s17iW::I64;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call go_dn_s17j1_entry(R2, R1) args: 8, res: 0, upd: 8;
       c19zG: // global
           I64[Hp - 16] = go_up_s17j9_info;
           I64[Hp - 8] = _s17iX::I64;
           I64[Hp] = _s17iV::I64;
           R2 = _s17iW::I64;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call go_up_s17j9_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c19ya_info" {
     block_c19ya_info:
         const _c19ya;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.303676195 UTC

[section ""data" . GHC.Enum.efdCharFB_closure" {
     GHC.Enum.efdCharFB_closure:
         const GHC.Enum.efdCharFB_info;
 },
 GHC.Enum.efdCharFB_slow() //  [R1]
         { []
         }
     {offset
       c19AI: // global
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Enum.efdCharFB_entry(R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Enum.efdCharFB_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c19AO: // global
           _s17jk::I64 = R5 - R4;
           if (%MO_S_Lt_W64(_s17jk::I64, 0)) goto c19AV; else goto c19AW;
       c19AV: // global
           R6 = 0;
           R5 = _s17jk::I64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.go_dn_char_fb_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
       c19AW: // global
           R6 = 1114111;
           R5 = _s17jk::I64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.go_up_char_fb_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdCharFB_info" {
     GHC.Enum.efdCharFB_info:
         const GHC.Enum.efdCharFB_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 772;
         const GHC.Enum.efdCharFB_slow;
 },
 section ""data" . GHC.Enum.efdChar_closure" {
     GHC.Enum.efdChar_closure:
         const GHC.Enum.efdChar_info;
 },
 GHC.Enum.efdChar_entry() //  [R2, R3]
         { []
         }
     {offset
       c19B3: // global
           _s17jo::I64 = R3 - R2;
           if (%MO_S_Lt_W64(_s17jo::I64, 0)) goto c19Ba; else goto c19Bb;
       c19Ba: // global
           R4 = 0;
           R3 = _s17jo::I64;
           R2 = R2;
           call GHC.Enum.go_dn_char_list_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
       c19Bb: // global
           R4 = 1114111;
           R3 = _s17jo::I64;
           R2 = R2;
           call GHC.Enum.go_up_char_list_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdChar_info" {
     GHC.Enum.efdChar_info:
         const GHC.Enum.efdChar_entry;
         const 0;
         const 14;
         const 8589934604;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.312252305 UTC

[section ""data" . GHC.Enum.$fEnumChar_$cenumFromThen_closure" {
     GHC.Enum.$fEnumChar_$cenumFromThen_closure:
         const GHC.Enum.$fEnumChar_$cenumFromThen_info;
 },
 GHC.Enum.$fEnumChar_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c19Bv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19Bz; else goto c19BA;
       c19Bz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumChar_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c19BA: // global
           I64[Sp - 16] = block_c19Bs_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u19BW; else goto c19Bt;
       u19BW: // global
           call _c19Bs(R1) args: 0, res: 0, upd: 0;
       c19Bt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumChar_$cenumFromThen_info" {
     GHC.Enum.$fEnumChar_$cenumFromThen_info:
         const GHC.Enum.$fEnumChar_$cenumFromThen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c19Bs() //  [R1]
         { []
         }
     {offset
       c19Bs: // global
           I64[Sp] = block_c19By_info;
           _s17jt::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s17jt::I64;
           if (R1 & 7 != 0) goto u19BV; else goto c19BC;
       u19BV: // global
           call _c19By(R1) args: 0, res: 0, upd: 0;
       c19BC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c19Bs_info" {
     block_c19Bs_info:
         const _c19Bs;
         const 1;
         const 30;
 },
 _c19By() //  [R1]
         { []
         }
     {offset
       c19By: // global
           _s17jw::I64 = I64[Sp + 8];
           _s17jx::I64 = I64[R1 + 7] - _s17jw::I64;
           if (%MO_S_Lt_W64(_s17jx::I64, 0)) goto c19BT; else goto c19BU;
       c19BT: // global
           R4 = 0;
           R3 = _s17jx::I64;
           R2 = _s17jw::I64;
           Sp = Sp + 16;
           call GHC.Enum.go_dn_char_list_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
       c19BU: // global
           R4 = 1114111;
           R3 = _s17jx::I64;
           R2 = _s17jw::I64;
           Sp = Sp + 16;
           call GHC.Enum.go_up_char_list_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c19By_info" {
     block_c19By_info:
         const _c19By;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.318964269 UTC

[section ""data" . GHC.Enum.$fEnumChar_closure" {
     GHC.Enum.$fEnumChar_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumChar_$csucc_closure+1;
         const GHC.Enum.$fEnumChar_$cpred_closure+1;
         const GHC.Char.chr_closure+1;
         const GHC.Base.ord_closure+1;
         const GHC.Enum.$fEnumChar_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumChar_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumChar_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumChar_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.3245503 UTC

[section ""data" . GHC.Enum.eftInt_closure" {
     GHC.Enum.eftInt_closure:
         const GHC.Enum.eftInt_info;
 },
 sat_s17jI_entry() //  [R1]
         { []
         }
     {offset
       c19Cz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19CA; else goto c19CB;
       c19CA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19CB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17jE::I64 = I64[R1 + 32];
           if (_s17jE::I64 == I64[R1 + 24]) goto c19Cy; else goto c19Cx;
       c19Cy: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c19Cx: // global
           R2 = _s17jE::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s17jD_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17jI_info" {
     sat_s17jI_info:
         const sat_s17jI_entry;
         const 8589934593;
         const 15;
 },
 go_s17jD_entry() //  [R1, R2]
         { []
         }
     {offset
       c19CG: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c19CK; else goto c19CJ;
       c19CK: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19CJ: // global
           _s17jB::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_s17jI_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s17jB::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s17jD_info" {
     go_s17jD_info:
         const go_s17jD_entry;
         const 4294967296;
         const 10;
         const 4294967300;
 },
 GHC.Enum.eftInt_entry() //  [R2, R3]
         { []
         }
     {offset
       c19CO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c19CS; else goto c19CR;
       c19CS: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.eftInt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c19CR: // global
           if (%MO_S_Le_W64(R2, R3)) goto c19CM; else goto c19CN;
       c19CM: // global
           I64[Hp - 8] = go_s17jD_info;
           I64[Hp] = R3;
           R2 = R2;
           R1 = Hp - 7;
           call go_s17jD_entry(R2, R1) args: 8, res: 0, upd: 8;
       c19CN: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.eftInt_info" {
     GHC.Enum.eftInt_info:
         const GHC.Enum.eftInt_entry;
         const 0;
         const 14;
         const 8589934604;
 },
 section ""data" . GHC.Enum.eftIntFB_closure" {
     GHC.Enum.eftIntFB_closure:
         const GHC.Enum.eftIntFB_info;
 },
 GHC.Enum.eftIntFB_slow() //  [R1]
         { []
         }
     {offset
       c19CU: // global
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Enum.eftIntFB_entry(R5,
                                        R4,
                                        R3,
                                        R2,
                                        R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s17jT_entry() //  [R1]
         { []
         }
     {offset
       c19Df: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19Dg; else goto c19Dh;
       c19Dg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19Dh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17jP::I64 = I64[R1 + 40];
           if (_s17jP::I64 == I64[R1 + 32]) goto c19De; else goto c19Dd;
       c19De: // global
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c19Dd: // global
           R2 = _s17jP::I64 + 1;
           R1 = P64[R1 + 24];
           Sp = Sp - 16;
           call go_s17jO_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17jT_info" {
     sat_s17jT_info:
         const sat_s17jT_entry;
         const 8589934594;
         const 15;
 },
 go_s17jO_entry() //  [R1, R2]
         { []
         }
     {offset
       c19Dl: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c19Dp; else goto c19Do;
       c19Dp: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19Do: // global
           _s17jJ::P64 = P64[R1 + 7];
           _s17jK::P64 = P64[R1 + 15];
           _s17jM::I64 = I64[R1 + 23];
           I64[Hp - 56] = sat_s17jT_info;
           P64[Hp - 40] = _s17jK::P64;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = _s17jM::I64;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 7;
           R1 = _s17jJ::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s17jO_info" {
     go_s17jO_info:
         const go_s17jO_entry;
         const 4294967298;
         const 8;
         const 4294967300;
 },
 GHC.Enum.eftIntFB_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c19Dt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c19Dx; else goto c19Dw;
       c19Dx: // global
           HpAlloc = 32;
           R1 = GHC.Enum.eftIntFB_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c19Dw: // global
           if (%MO_S_Le_W64(R4, R5)) goto c19Dr; else goto c19Ds;
       c19Dr: // global
           I64[Hp - 24] = go_s17jO_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           I64[Hp] = R5;
           R2 = R4;
           R1 = Hp - 23;
           call go_s17jO_entry(R2, R1) args: 8, res: 0, upd: 8;
       c19Ds: // global
           Hp = Hp - 32;
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.eftIntFB_info" {
     GHC.Enum.eftIntFB_info:
         const GHC.Enum.eftIntFB_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 772;
         const GHC.Enum.eftIntFB_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.340346287 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_go_closure" {
     GHC.Enum.$fEnumOrdering_go_closure:
         const GHC.Enum.$fEnumOrdering_go_info;
         const 0;
 },
 sat_s17jZ_entry() //  [R1]
         { []
         }
     {offset
       c19Eo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19Ep; else goto c19Eq;
       c19Ep: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19Eq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17jX::I64 = I64[R1 + 16];
           if (_s17jX::I64 != 2) goto c19Em; else goto c19En;
       c19Em: // global
           R2 = _s17jX::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumOrdering_go_entry(R2) args: 24, res: 0, upd: 24;
       c19En: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17jZ_info" {
     sat_s17jZ_info:
         const sat_s17jZ_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+288;
 },
 sat_s17jW_entry() //  [R1]
         { []
         }
     {offset
       c19ED: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19EE; else goto c19EF;
       c19EE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19EF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17jV::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17jV::I64, 2)) goto u19EG; else goto u19EI;
       u19EG: // global
           if (%MO_S_Lt_W64(_s17jV::I64, 1)) goto u19EH; else goto c19EB;
       u19EH: // global
           if (%MO_S_Lt_W64(_s17jV::I64, 0)) goto c19Ez; else goto c19EA;
       c19EA: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c19EB: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u19EI: // global
           if (%MO_S_Ge_W64(_s17jV::I64, 3)) goto c19Ez; else goto c19EC;
       c19Ez: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c19EC: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17jW_info" {
     sat_s17jW_info:
         const sat_s17jW_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+96;
 },
 GHC.Enum.$fEnumOrdering_go_entry() //  [R2]
         { []
         }
     {offset
       c19EK: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c19EO; else goto c19EN;
       c19EO: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19EN: // global
           I64[Hp - 64] = sat_s17jZ_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17jW_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_go_info" {
     GHC.Enum.$fEnumOrdering_go_info:
         const GHC.Enum.$fEnumOrdering_go_entry;
         const 0;
         const 72057598332895246;
         const 4294967300;
         const S17Oj_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.349616919 UTC

[section ""data" . GHC.Enum.$fEnumOrdering3_closure" {
     GHC.Enum.$fEnumOrdering3_closure:
         const GHC.Enum.$fEnumOrdering3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumOrdering3_entry() //  [R1]
         { []
         }
     {offset
       c19Fo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19Fp; else goto c19Fq;
       c19Fp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19Fq: // global
           (_c19Fl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c19Fl::I64 == 0) goto c19Fn; else goto c19Fm;
       c19Fn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c19Fm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c19Fl::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumOrdering_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering3_info" {
     GHC.Enum.$fEnumOrdering3_info:
         const GHC.Enum.$fEnumOrdering3_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.353777994 UTC

[section ""data" . GHC.Enum.$fEnumOrdering2_closure" {
     GHC.Enum.$fEnumOrdering2_closure:
         const GHC.Enum.$fEnumOrdering2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumOrdering2_entry() //  [R1]
         { []
         }
     {offset
       c19FF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19FG; else goto c19FH;
       c19FG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19FH: // global
           (_c19FC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c19FC::I64 == 0) goto c19FE; else goto c19FD;
       c19FE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c19FD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c19FC::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumOrdering_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering2_info" {
     GHC.Enum.$fEnumOrdering2_info:
         const GHC.Enum.$fEnumOrdering2_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.358534278 UTC

[section ""data" . GHC.Enum.$fEnumOrdering1_closure" {
     GHC.Enum.$fEnumOrdering1_closure:
         const GHC.Enum.$fEnumOrdering1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumOrdering1_entry() //  [R1]
         { []
         }
     {offset
       c19FW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19FX; else goto c19FY;
       c19FX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19FY: // global
           (_c19FT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c19FT::I64 == 0) goto c19FV; else goto c19FU;
       c19FV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c19FU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c19FT::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumOrdering_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering1_info" {
     GHC.Enum.$fEnumOrdering1_info:
         const GHC.Enum.$fEnumOrdering1_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.363133935 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_$cenumFrom_closure" {
     GHC.Enum.$fEnumOrdering_$cenumFrom_closure:
         const GHC.Enum.$fEnumOrdering_$cenumFrom_info;
         const 0;
 },
 GHC.Enum.$fEnumOrdering_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c19Gj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c19Gk; else goto c19Gl;
       c19Gk: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19Gl: // global
           I64[Sp - 8] = block_c19Gb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u19Gw; else goto c19Gc;
       u19Gw: // global
           call _c19Gb(R1) args: 0, res: 0, upd: 0;
       c19Gc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_$cenumFrom_info" {
     GHC.Enum.$fEnumOrdering_$cenumFrom_info:
         const GHC.Enum.$fEnumOrdering_$cenumFrom_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const S17Oj_srt+296;
 },
 _c19Gb() //  [R1]
         { []
         }
     {offset
       c19Gb: // global
           _c19Gi::P64 = R1 & 7;
           if (_c19Gi::P64 < 3) goto u19Gv; else goto c19Gh;
       u19Gv: // global
           if (_c19Gi::P64 < 2) goto c19Gf; else goto c19Gg;
       c19Gf: // global
           R1 = GHC.Enum.$fEnumOrdering3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c19Gg: // global
           R1 = GHC.Enum.$fEnumOrdering2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c19Gh: // global
           R1 = GHC.Enum.$fEnumOrdering1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c19Gb_info" {
     block_c19Gb_info:
         const _c19Gb;
         const 0;
         const 30064771102;
         const S17Oj_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.370307763 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_go2_closure" {
     GHC.Enum.$fEnumOrdering_go2_closure:
         const GHC.Enum.$fEnumOrdering_go2_info;
         const 0;
 },
 sat_s17k7_entry() //  [R1]
         { []
         }
     {offset
       c19GX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19GY; else goto c19GZ;
       c19GY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19GZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17k5::I64 = I64[R1 + 16];
           if (_s17k5::I64 != 0) goto c19GV; else goto c19GW;
       c19GV: // global
           R2 = _s17k5::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumOrdering_go2_entry(R2) args: 24, res: 0, upd: 24;
       c19GW: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17k7_info" {
     sat_s17k7_info:
         const sat_s17k7_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+328;
 },
 sat_s17k4_entry() //  [R1]
         { []
         }
     {offset
       c19Hc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19Hd; else goto c19He;
       c19Hd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19He: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17k3::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17k3::I64, 2)) goto u19Hf; else goto u19Hh;
       u19Hf: // global
           if (%MO_S_Lt_W64(_s17k3::I64, 1)) goto u19Hg; else goto c19Ha;
       u19Hg: // global
           if (%MO_S_Lt_W64(_s17k3::I64, 0)) goto c19H8; else goto c19H9;
       c19H9: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c19Ha: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u19Hh: // global
           if (%MO_S_Ge_W64(_s17k3::I64, 3)) goto c19H8; else goto c19Hb;
       c19H8: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c19Hb: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17k4_info" {
     sat_s17k4_info:
         const sat_s17k4_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+96;
 },
 GHC.Enum.$fEnumOrdering_go2_entry() //  [R2]
         { []
         }
     {offset
       c19Hj: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c19Hn; else goto c19Hm;
       c19Hn: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19Hm: // global
           I64[Hp - 64] = sat_s17k7_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17k4_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_go2_info" {
     GHC.Enum.$fEnumOrdering_go2_info:
         const GHC.Enum.$fEnumOrdering_go2_entry;
         const 0;
         const 2305843013508661262;
         const 4294967300;
         const S17Oj_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.379674184 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_go1_closure" {
     GHC.Enum.$fEnumOrdering_go1_closure:
         const GHC.Enum.$fEnumOrdering_go1_info;
         const 0;
 },
 sat_s17kd_entry() //  [R1]
         { []
         }
     {offset
       c19I3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19I4; else goto c19I5;
       c19I4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19I5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17kb::I64 = I64[R1 + 16];
           if (_s17kb::I64 != 1) goto c19I1; else goto c19I2;
       c19I1: // global
           R2 = _s17kb::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumOrdering_go1_entry(R2) args: 24, res: 0, upd: 24;
       c19I2: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17kd_info" {
     sat_s17kd_info:
         const sat_s17kd_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+336;
 },
 sat_s17ka_entry() //  [R1]
         { []
         }
     {offset
       c19Ii: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19Ij; else goto c19Ik;
       c19Ij: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19Ik: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17k9::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17k9::I64, 2)) goto u19Il; else goto u19In;
       u19Il: // global
           if (%MO_S_Lt_W64(_s17k9::I64, 1)) goto u19Im; else goto c19Ig;
       u19Im: // global
           if (%MO_S_Lt_W64(_s17k9::I64, 0)) goto c19Ie; else goto c19If;
       c19If: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c19Ig: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u19In: // global
           if (%MO_S_Ge_W64(_s17k9::I64, 3)) goto c19Ie; else goto c19Ih;
       c19Ie: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c19Ih: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ka_info" {
     sat_s17ka_info:
         const sat_s17ka_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+96;
 },
 GHC.Enum.$fEnumOrdering_go1_entry() //  [R2]
         { []
         }
     {offset
       c19Ip: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c19It; else goto c19Is;
       c19It: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19Is: // global
           I64[Hp - 64] = sat_s17kd_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17ka_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_go1_info" {
     GHC.Enum.$fEnumOrdering_go1_info:
         const GHC.Enum.$fEnumOrdering_go1_entry;
         const 0;
         const 4611686022722355214;
         const 4294967300;
         const S17Oj_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.389376376 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_$cenumFromTo_closure" {
     GHC.Enum.$fEnumOrdering_$cenumFromTo_closure:
         const GHC.Enum.$fEnumOrdering_$cenumFromTo_info;
         const 0;
 },
 GHC.Enum.$fEnumOrdering_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c19Jb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19Jc; else goto c19Jd;
       c19Jc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c19Jd: // global
           I64[Sp - 16] = block_c19J3_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u19K0; else goto c19J4;
       u19K0: // global
           call _c19J3(R1) args: 0, res: 0, upd: 0;
       c19J4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_$cenumFromTo_info" {
     GHC.Enum.$fEnumOrdering_$cenumFromTo_info:
         const GHC.Enum.$fEnumOrdering_$cenumFromTo_entry;
         const 0;
         const 966367641614;
         const 8589934607;
         const S17Oj_srt+288;
 },
 _c19J3() //  [R1]
         { []
         }
     {offset
       c19J3: // global
           _s17kf::P64 = P64[Sp + 8];
           _c19Ja::P64 = R1 & 7;
           if (_c19Ja::P64 < 3) goto u19JX; else goto c19J9;
       u19JX: // global
           if (_c19Ja::P64 < 2) goto c19J7; else goto c19J8;
       c19J7: // global
           _s17kh::I64 = 0;
           goto s17kg;
       c19J8: // global
           _s17kh::I64 = 1;
           goto s17kg;
       c19J9: // global
           _s17kh::I64 = 2;
           goto s17kg;
       s17kg: // global
           I64[Sp] = block_c19Jh_info;
           R1 = _s17kf::P64;
           I64[Sp + 8] = _s17kh::I64;
           if (R1 & 7 != 0) goto u19JZ; else goto c19Jj;
       u19JZ: // global
           call _c19Jh(R1) args: 0, res: 0, upd: 0;
       c19Jj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c19J3_info" {
     block_c19J3_info:
         const _c19J3;
         const 1;
         const 416611827742;
         const S17Oj_srt+288;
 },
 _c19Jh() //  [R1]
         { []
         }
     {offset
       c19Jh: // global
           _s17kh::I64 = I64[Sp + 8];
           _c19JW::P64 = R1 & 7;
           if (_c19JW::P64 < 3) goto u19JY; else goto c19JM;
       u19JY: // global
           if (_c19JW::P64 < 2) goto c19Ju; else goto c19JD;
       c19Ju: // global
           if (%MO_S_Gt_W64(_s17kh::I64, 0)) goto c19JL; else goto c19Jr;
       c19Jr: // global
           R2 = _s17kh::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumOrdering_go2_entry(R2) args: 8, res: 0, upd: 8;
       c19JD: // global
           if (%MO_S_Gt_W64(_s17kh::I64, 1)) goto c19JL; else goto c19JB;
       c19JB: // global
           R2 = _s17kh::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumOrdering_go1_entry(R2) args: 8, res: 0, upd: 8;
       c19JM: // global
           if (%MO_S_Gt_W64(_s17kh::I64, 2)) goto c19JL; else goto c19JK;
       c19JL: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c19JK: // global
           R2 = _s17kh::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumOrdering_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c19Jh_info" {
     block_c19Jh_info:
         const _c19Jh;
         const 65;
         const 416611827742;
         const S17Oj_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.399376937 UTC

[section ""data" . GHC.Enum.$fEnumBool_go_closure" {
     GHC.Enum.$fEnumBool_go_closure:
         const GHC.Enum.$fEnumBool_go_info;
         const 0;
 },
 sat_s17ks_entry() //  [R1]
         { []
         }
     {offset
       c19Kw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19Kx; else goto c19Ky;
       c19Kx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19Ky: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17kq::I64 = I64[R1 + 16];
           if (_s17kq::I64 != 1) goto c19Ku; else goto c19Kv;
       c19Ku: // global
           R2 = _s17kq::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumBool_go_entry(R2) args: 24, res: 0, upd: 24;
       c19Kv: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ks_info" {
     sat_s17ks_info:
         const sat_s17ks_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+352;
 },
 sat_s17kp_entry() //  [R1]
         { []
         }
     {offset
       c19KK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19KL; else goto c19KM;
       c19KL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19KM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17ko::I64 = I64[R1 + 16];
           if (_s17ko::I64 != 0) goto u19KN; else goto c19KI;
       u19KN: // global
           if (_s17ko::I64 != 1) goto c19KH; else goto c19KJ;
       c19KH: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c19KJ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c19KI: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17kp_info" {
     sat_s17kp_info:
         const sat_s17kp_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 GHC.Enum.$fEnumBool_go_entry() //  [R2]
         { []
         }
     {offset
       c19KP: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c19KT; else goto c19KS;
       c19KT: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19KS: // global
           I64[Hp - 64] = sat_s17ks_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17kp_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_go_info" {
     GHC.Enum.$fEnumBool_go_info:
         const GHC.Enum.$fEnumBool_go_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const S17Oj_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.407241099 UTC

[section ""data" . GHC.Enum.$fEnumBool3_closure" {
     GHC.Enum.$fEnumBool3_closure:
         const GHC.Enum.$fEnumBool3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumBool3_entry() //  [R1]
         { []
         }
     {offset
       c19Lr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19Ls; else goto c19Lt;
       c19Ls: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19Lt: // global
           (_c19Lo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c19Lo::I64 == 0) goto c19Lq; else goto c19Lp;
       c19Lq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c19Lp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c19Lo::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumBool_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool3_info" {
     GHC.Enum.$fEnumBool3_info:
         const GHC.Enum.$fEnumBool3_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.411342115 UTC

[section ""data" . GHC.Enum.$fEnumBool2_closure" {
     GHC.Enum.$fEnumBool2_closure:
         const GHC.Enum.$fEnumBool2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumBool2_entry() //  [R1]
         { []
         }
     {offset
       c19LI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19LJ; else goto c19LK;
       c19LJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19LK: // global
           (_c19LF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c19LF::I64 == 0) goto c19LH; else goto c19LG;
       c19LH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c19LG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c19LF::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumBool_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool2_info" {
     GHC.Enum.$fEnumBool2_info:
         const GHC.Enum.$fEnumBool2_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.41589563 UTC

[section ""data" . GHC.Enum.$fEnumBool_$cenumFrom_closure" {
     GHC.Enum.$fEnumBool_$cenumFrom_closure:
         const GHC.Enum.$fEnumBool_$cenumFrom_info;
         const 0;
 },
 GHC.Enum.$fEnumBool_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c19M4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c19M5; else goto c19M6;
       c19M5: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19M6: // global
           I64[Sp - 8] = block_c19LX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u19Md; else goto c19LY;
       u19Md: // global
           call _c19LX(R1) args: 0, res: 0, upd: 0;
       c19LY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_$cenumFrom_info" {
     GHC.Enum.$fEnumBool_$cenumFrom_info:
         const GHC.Enum.$fEnumBool_$cenumFrom_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S17Oj_srt+368;
 },
 _c19LX() //  [R1]
         { []
         }
     {offset
       c19LX: // global
           if (R1 & 7 == 1) goto c19M1; else goto c19M2;
       c19M1: // global
           R1 = GHC.Enum.$fEnumBool3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c19M2: // global
           R1 = GHC.Enum.$fEnumBool2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c19LX_info" {
     block_c19LX_info:
         const _c19LX;
         const 0;
         const 12884901918;
         const S17Oj_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.422550464 UTC

[section ""data" . GHC.Enum.$fEnumBool_go1_closure" {
     GHC.Enum.$fEnumBool_go1_closure:
         const GHC.Enum.$fEnumBool_go1_info;
         const 0;
 },
 sat_s17kA_entry() //  [R1]
         { []
         }
     {offset
       c19ME: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19MF; else goto c19MG;
       c19MF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19MG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17ky::I64 = I64[R1 + 16];
           if (_s17ky::I64 != 0) goto c19MC; else goto c19MD;
       c19MC: // global
           R2 = _s17ky::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumBool_go1_entry(R2) args: 24, res: 0, upd: 24;
       c19MD: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17kA_info" {
     sat_s17kA_info:
         const sat_s17kA_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+392;
 },
 sat_s17kx_entry() //  [R1]
         { []
         }
     {offset
       c19MS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19MT; else goto c19MU;
       c19MT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19MU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17kw::I64 = I64[R1 + 16];
           if (_s17kw::I64 != 0) goto u19MV; else goto c19MQ;
       u19MV: // global
           if (_s17kw::I64 != 1) goto c19MP; else goto c19MR;
       c19MP: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c19MR: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c19MQ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17kx_info" {
     sat_s17kx_info:
         const sat_s17kx_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 GHC.Enum.$fEnumBool_go1_entry() //  [R2]
         { []
         }
     {offset
       c19MX: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c19N1; else goto c19N0;
       c19N1: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19N0: // global
           I64[Hp - 64] = sat_s17kA_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17kx_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_go1_info" {
     GHC.Enum.$fEnumBool_go1_info:
         const GHC.Enum.$fEnumBool_go1_entry;
         const 0;
         const 73014444046;
         const 4294967300;
         const S17Oj_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.432153884 UTC

[section ""data" . GHC.Enum.$fEnumBool_$cenumFromTo_closure" {
     GHC.Enum.$fEnumBool_$cenumFromTo_closure:
         const GHC.Enum.$fEnumBool_$cenumFromTo_info;
         const 0;
 },
 GHC.Enum.$fEnumBool_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c19NG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19NH; else goto c19NI;
       c19NH: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c19NI: // global
           I64[Sp - 16] = block_c19Nz_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u19Oh; else goto c19NA;
       u19Oh: // global
           call _c19Nz(R1) args: 0, res: 0, upd: 0;
       c19NA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_$cenumFromTo_info" {
     GHC.Enum.$fEnumBool_$cenumFromTo_info:
         const GHC.Enum.$fEnumBool_$cenumFromTo_entry;
         const 0;
         const 416611827726;
         const 8589934607;
         const S17Oj_srt+352;
 },
 _c19Nz() //  [R1]
         { []
         }
     {offset
       c19Nz: // global
           _s17kC::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c19ND; else goto c19NE;
       c19ND: // global
           _s17kE::I64 = 0;
           goto s17kD;
       c19NE: // global
           _s17kE::I64 = 1;
           goto s17kD;
       s17kD: // global
           I64[Sp] = block_c19NM_info;
           R1 = _s17kC::P64;
           I64[Sp + 8] = _s17kE::I64;
           if (R1 & 7 != 0) goto u19Og; else goto c19NO;
       u19Og: // global
           call _c19NM(R1) args: 0, res: 0, upd: 0;
       c19NO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c19Nz_info" {
     block_c19Nz_info:
         const _c19Nz;
         const 1;
         const 141733920798;
         const S17Oj_srt+352;
 },
 _c19NM() //  [R1]
         { []
         }
     {offset
       c19NM: // global
           _s17kE::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto c19NZ; else goto c19O8;
       c19NZ: // global
           if (%MO_S_Gt_W64(_s17kE::I64, 0)) goto c19O7; else goto c19NW;
       c19NW: // global
           R2 = _s17kE::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumBool_go1_entry(R2) args: 8, res: 0, upd: 8;
       c19O8: // global
           if (%MO_S_Gt_W64(_s17kE::I64, 1)) goto c19O7; else goto c19O6;
       c19O7: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c19O6: // global
           R2 = _s17kE::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumBool_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c19NM_info" {
     block_c19NM_info:
         const _c19NM;
         const 65;
         const 141733920798;
         const S17Oj_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.439971349 UTC

[section ""data" . GHC.Enum.$fEnumInt_$cenumFrom_closure" {
     GHC.Enum.$fEnumInt_$cenumFrom_closure:
         const GHC.Enum.$fEnumInt_$cenumFrom_info;
 },
 GHC.Enum.$fEnumInt_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c19OK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c19OL; else goto c19OM;
       c19OL: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumInt_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19OM: // global
           I64[Sp - 8] = block_c19OH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u19OQ; else goto c19OI;
       u19OQ: // global
           call _c19OH(R1) args: 0, res: 0, upd: 0;
       c19OI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInt_$cenumFrom_info" {
     GHC.Enum.$fEnumInt_$cenumFrom_info:
         const GHC.Enum.$fEnumInt_$cenumFrom_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c19OH() //  [R1]
         { []
         }
     {offset
       c19OH: // global
           R3 = 9223372036854775807;
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.eftInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c19OH_info" {
     block_c19OH_info:
         const _c19OH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.446245503 UTC

[section ""data" . GHC.Enum.$fEnumInt_$cenumFromTo_closure" {
     GHC.Enum.$fEnumInt_$cenumFromTo_closure:
         const GHC.Enum.$fEnumInt_$cenumFromTo_info;
 },
 GHC.Enum.$fEnumInt_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c19P8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19Pc; else goto c19Pd;
       c19Pc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumInt_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c19Pd: // global
           I64[Sp - 16] = block_c19P5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u19Pl; else goto c19P6;
       u19Pl: // global
           call _c19P5(R1) args: 0, res: 0, upd: 0;
       c19P6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInt_$cenumFromTo_info" {
     GHC.Enum.$fEnumInt_$cenumFromTo_info:
         const GHC.Enum.$fEnumInt_$cenumFromTo_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c19P5() //  [R1]
         { []
         }
     {offset
       c19P5: // global
           I64[Sp] = block_c19Pb_info;
           _s17kP::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s17kP::I64;
           if (R1 & 7 != 0) goto u19Pk; else goto c19Pf;
       u19Pk: // global
           call _c19Pb(R1) args: 0, res: 0, upd: 0;
       c19Pf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c19P5_info" {
     block_c19P5_info:
         const _c19P5;
         const 1;
         const 30;
 },
 _c19Pb() //  [R1]
         { []
         }
     {offset
       c19Pb: // global
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Enum.eftInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c19Pb_info" {
     block_c19Pb_info:
         const _c19Pb;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.455342264 UTC

[section ""data" . GHC.Enum.efdtIntUp_closure" {
     GHC.Enum.efdtIntUp_closure:
         const GHC.Enum.efdtIntUp_info;
 },
 sat_s17l4_entry() //  [R1]
         { []
         }
     {offset
       c19Q6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19Q7; else goto c19Q8;
       c19Q7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19Q8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17kZ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17l4_info" {
     sat_s17l4_info:
         const sat_s17l4_entry;
         const 8589934593;
         const 15;
 },
 go_up_s17kZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c19Qc: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c19Qg; else goto c19Qf;
       c19Qg: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19Qf: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c19Qa; else goto c19Qb;
       c19Qa: // global
           _s17kX::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_s17l4_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s17kX::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c19Qb: // global
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c19Ql::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c19Ql::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17kZ_info" {
     go_up_s17kZ_info:
         const go_up_s17kZ_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s17l6_entry() //  [R1]
         { []
         }
     {offset
       c19Qm: // global
           _s17l6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c19Qn; else goto c19Qo;
       c19Qo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c19Qq; else goto c19Qp;
       c19Qq: // global
           HpAlloc = 24;
           goto c19Qn;
       c19Qn: // global
           R1 = _s17l6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19Qp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17l6::P64;
           _s17kT::I64 = I64[_s17l6::P64 + 24];
           _s17kX::I64 = _s17kT::I64 - I64[_s17l6::P64 + 16];
           _s17kY::I64 = I64[_s17l6::P64 + 32] - _s17kX::I64;
           I64[Hp - 16] = go_up_s17kZ_info;
           I64[Hp - 8] = _s17kX::I64;
           I64[Hp] = _s17kY::I64;
           R2 = _s17kT::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17kZ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17l6_info" {
     sat_s17l6_info:
         const sat_s17l6_entry;
         const 12884901888;
         const 15;
 },
 GHC.Enum.efdtIntUp_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c19Qu: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c19Qy; else goto c19Qx;
       c19Qy: // global
           HpAlloc = 80;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.efdtIntUp_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c19Qx: // global
           if (%MO_S_Ge_W64(R4, R3)) goto c19Qs; else goto c19Qt;
       c19Qs: // global
           I64[Hp - 72] = sat_s17l6_info;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = R3;
           I64[Hp - 40] = R4;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c19Qt: // global
           if (%MO_S_Ge_W64(R4, R2)) goto c19QI; else goto c19QJ;
       c19QI: // global
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c19QG::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c19QG::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c19QJ: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtIntUp_info" {
     GHC.Enum.efdtIntUp_info:
         const GHC.Enum.efdtIntUp_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.468394734 UTC

[section ""data" . GHC.Enum.efdtIntUpFB_closure" {
     GHC.Enum.efdtIntUpFB_closure:
         const GHC.Enum.efdtIntUpFB_info;
 },
 GHC.Enum.efdtIntUpFB_slow() //  [R1]
         { []
         }
     {offset
       c19Rx: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.efdtIntUpFB_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2,
                                           R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s17ln_entry() //  [R1]
         { []
         }
     {offset
       c19S2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19S3; else goto c19S4;
       c19S3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19S4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17li_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ln_info" {
     sat_s17ln_info:
         const sat_s17ln_entry;
         const 8589934593;
         const 15;
 },
 go_up_s17li_entry() //  [R1, R2]
         { []
         }
     {offset
       c19S8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c19Sc; else goto c19Sb;
       c19Sc: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19Sb: // global
           _s17l9::P64 = P64[R1 + 7];
           if (%MO_S_Le_W64(R2, I64[R1 + 31])) goto c19S6; else goto c19S7;
       c19S6: // global
           _s17lg::I64 = I64[R1 + 23];
           I64[Hp - 48] = sat_s17ln_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = _s17lg::I64;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 7;
           R1 = _s17l9::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c19S7: // global
           _s17la::P64 = P64[R1 + 15];
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = R2;
           _c19Sf::P64 = Hp - 47;
           Hp = Hp - 40;
           R3 = _s17la::P64;
           R2 = _c19Sf::P64;
           R1 = _s17l9::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17li_info" {
     go_up_s17li_info:
         const go_up_s17li_entry;
         const 8589934594;
         const 8;
         const 4294967300;
 },
 sat_s17lp_entry() //  [R1]
         { []
         }
     {offset
       c19Sg: // global
           _s17lp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c19Sh; else goto c19Si;
       c19Si: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c19Sk; else goto c19Sj;
       c19Sk: // global
           HpAlloc = 40;
           goto c19Sh;
       c19Sh: // global
           R1 = _s17lp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19Sj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17lp::P64;
           _s17l9::P64 = P64[_s17lp::P64 + 16];
           _s17la::P64 = P64[_s17lp::P64 + 24];
           _s17lc::I64 = I64[_s17lp::P64 + 40];
           _s17lg::I64 = _s17lc::I64 - I64[_s17lp::P64 + 32];
           _s17lh::I64 = I64[_s17lp::P64 + 48] - _s17lg::I64;
           I64[Hp - 32] = go_up_s17li_info;
           P64[Hp - 24] = _s17l9::P64;
           P64[Hp - 16] = _s17la::P64;
           I64[Hp - 8] = _s17lg::I64;
           I64[Hp] = _s17lh::I64;
           R2 = _s17lc::I64;
           R1 = Hp - 31;
           Sp = Sp - 16;
           call go_up_s17li_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17lp_info" {
     sat_s17lp_info:
         const sat_s17lp_entry;
         const 12884901890;
         const 15;
 },
 GHC.Enum.efdtIntUpFB_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c19So: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c19Ss; else goto c19Sr;
       c19Ss: // global
           HpAlloc = 72;
           R1 = GHC.Enum.efdtIntUpFB_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       c19Sr: // global
           if (%MO_S_Ge_W64(R6, R5)) goto c19Sm; else goto c19Sn;
       c19Sm: // global
           I64[Hp - 64] = sat_s17lp_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = R4;
           I64[Hp - 24] = R5;
           I64[Hp - 16] = R6;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R4;
           R3 = Hp - 64;
           _s17l9::P64 = R2;
           R2 = Hp - 7;
           R1 = _s17l9::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c19Sn: // global
           if (%MO_S_Ge_W64(R6, R4)) goto c19SA; else goto c19SB;
       c19SA: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = R4;
           _c19Sy::P64 = Hp - 63;
           Hp = Hp - 56;
           R3 = R3;
           _s17l9::P64 = R2;
           R2 = _c19Sy::P64;
           R1 = _s17l9::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c19SB: // global
           Hp = Hp - 72;
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtIntUpFB_info" {
     GHC.Enum.efdtIntUpFB_info:
         const GHC.Enum.efdtIntUpFB_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 1797;
         const GHC.Enum.efdtIntUpFB_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.482383192 UTC

[section ""data" . GHC.Enum.efdtIntDn_closure" {
     GHC.Enum.efdtIntDn_closure:
         const GHC.Enum.efdtIntDn_info;
 },
 sat_s17lE_entry() //  [R1]
         { []
         }
     {offset
       c19TB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19TC; else goto c19TD;
       c19TC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19TD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17lz_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17lE_info" {
     sat_s17lE_info:
         const sat_s17lE_entry;
         const 8589934593;
         const 15;
 },
 go_dn_s17lz_entry() //  [R1, R2]
         { []
         }
     {offset
       c19TH: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c19TL; else goto c19TK;
       c19TL: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19TK: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c19TF; else goto c19TG;
       c19TF: // global
           _s17lx::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_s17lE_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s17lx::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c19TG: // global
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c19TQ::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c19TQ::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17lz_info" {
     go_dn_s17lz_info:
         const go_dn_s17lz_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s17lG_entry() //  [R1]
         { []
         }
     {offset
       c19TR: // global
           _s17lG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c19TS; else goto c19TT;
       c19TT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c19TV; else goto c19TU;
       c19TV: // global
           HpAlloc = 24;
           goto c19TS;
       c19TS: // global
           R1 = _s17lG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19TU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17lG::P64;
           _s17lt::I64 = I64[_s17lG::P64 + 24];
           _s17lx::I64 = _s17lt::I64 - I64[_s17lG::P64 + 16];
           _s17ly::I64 = I64[_s17lG::P64 + 32] - _s17lx::I64;
           I64[Hp - 16] = go_dn_s17lz_info;
           I64[Hp - 8] = _s17lx::I64;
           I64[Hp] = _s17ly::I64;
           R2 = _s17lt::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17lz_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17lG_info" {
     sat_s17lG_info:
         const sat_s17lG_entry;
         const 12884901888;
         const 15;
 },
 GHC.Enum.efdtIntDn_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c19TZ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c19U3; else goto c19U2;
       c19U3: // global
           HpAlloc = 80;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.efdtIntDn_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c19U2: // global
           if (%MO_S_Le_W64(R4, R3)) goto c19TX; else goto c19TY;
       c19TX: // global
           I64[Hp - 72] = sat_s17lG_info;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = R3;
           I64[Hp - 40] = R4;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c19TY: // global
           if (%MO_S_Le_W64(R4, R2)) goto c19Ud; else goto c19Ue;
       c19Ud: // global
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c19Ub::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c19Ub::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c19Ue: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtIntDn_info" {
     GHC.Enum.efdtIntDn_info:
         const GHC.Enum.efdtIntDn_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.493077718 UTC

[section ""data" . GHC.Enum.efdInt_closure" {
     GHC.Enum.efdInt_closure:
         const GHC.Enum.efdInt_info;
 },
 GHC.Enum.efdInt_entry() //  [R2, R3]
         { []
         }
     {offset
       c19Va: // global
           if (%MO_S_Lt_W64(R3, R2)) goto c19V8; else goto c19V9;
       c19V8: // global
           R4 = (-9223372036854775808);
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtIntDn_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c19V9: // global
           R4 = 9223372036854775807;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtIntUp_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdInt_info" {
     GHC.Enum.efdInt_info:
         const GHC.Enum.efdInt_entry;
         const 0;
         const 14;
         const 8589934604;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.497149979 UTC

[section ""data" . GHC.Enum.$fEnumInt_$cenumFromThen_closure" {
     GHC.Enum.$fEnumInt_$cenumFromThen_closure:
         const GHC.Enum.$fEnumInt_$cenumFromThen_info;
 },
 GHC.Enum.$fEnumInt_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c19Vo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19Vs; else goto c19Vt;
       c19Vs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumInt_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c19Vt: // global
           I64[Sp - 16] = block_c19Vl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u19VB; else goto c19Vm;
       u19VB: // global
           call _c19Vl(R1) args: 0, res: 0, upd: 0;
       c19Vm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInt_$cenumFromThen_info" {
     GHC.Enum.$fEnumInt_$cenumFromThen_info:
         const GHC.Enum.$fEnumInt_$cenumFromThen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c19Vl() //  [R1]
         { []
         }
     {offset
       c19Vl: // global
           I64[Sp] = block_c19Vr_info;
           _s17lP::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s17lP::I64;
           if (R1 & 7 != 0) goto u19VA; else goto c19Vv;
       u19VA: // global
           call _c19Vr(R1) args: 0, res: 0, upd: 0;
       c19Vv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c19Vl_info" {
     block_c19Vl_info:
         const _c19Vl;
         const 1;
         const 30;
 },
 _c19Vr() //  [R1]
         { []
         }
     {offset
       c19Vr: // global
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c19Vr_info" {
     block_c19Vr_info:
         const _c19Vr;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.506827312 UTC

[section ""data" . GHC.Enum.efdtIntDnFB_closure" {
     GHC.Enum.efdtIntDnFB_closure:
         const GHC.Enum.efdtIntDnFB_info;
 },
 GHC.Enum.efdtIntDnFB_slow() //  [R1]
         { []
         }
     {offset
       c19VS: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.efdtIntDnFB_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2,
                                           R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s17m6_entry() //  [R1]
         { []
         }
     {offset
       c19Wn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19Wo; else goto c19Wp;
       c19Wo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19Wp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17m1_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17m6_info" {
     sat_s17m6_info:
         const sat_s17m6_entry;
         const 8589934593;
         const 15;
 },
 go_dn_s17m1_entry() //  [R1, R2]
         { []
         }
     {offset
       c19Wt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c19Wx; else goto c19Ww;
       c19Wx: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19Ww: // global
           _s17lS::P64 = P64[R1 + 7];
           if (%MO_S_Ge_W64(R2, I64[R1 + 31])) goto c19Wr; else goto c19Ws;
       c19Wr: // global
           _s17lZ::I64 = I64[R1 + 23];
           I64[Hp - 48] = sat_s17m6_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = _s17lZ::I64;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 7;
           R1 = _s17lS::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c19Ws: // global
           _s17lT::P64 = P64[R1 + 15];
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = R2;
           _c19WA::P64 = Hp - 47;
           Hp = Hp - 40;
           R3 = _s17lT::P64;
           R2 = _c19WA::P64;
           R1 = _s17lS::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17m1_info" {
     go_dn_s17m1_info:
         const go_dn_s17m1_entry;
         const 8589934594;
         const 8;
         const 4294967300;
 },
 sat_s17m8_entry() //  [R1]
         { []
         }
     {offset
       c19WB: // global
           _s17m8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c19WC; else goto c19WD;
       c19WD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c19WF; else goto c19WE;
       c19WF: // global
           HpAlloc = 40;
           goto c19WC;
       c19WC: // global
           R1 = _s17m8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19WE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17m8::P64;
           _s17lS::P64 = P64[_s17m8::P64 + 16];
           _s17lT::P64 = P64[_s17m8::P64 + 24];
           _s17lV::I64 = I64[_s17m8::P64 + 40];
           _s17lZ::I64 = _s17lV::I64 - I64[_s17m8::P64 + 32];
           _s17m0::I64 = I64[_s17m8::P64 + 48] - _s17lZ::I64;
           I64[Hp - 32] = go_dn_s17m1_info;
           P64[Hp - 24] = _s17lS::P64;
           P64[Hp - 16] = _s17lT::P64;
           I64[Hp - 8] = _s17lZ::I64;
           I64[Hp] = _s17m0::I64;
           R2 = _s17lV::I64;
           R1 = Hp - 31;
           Sp = Sp - 16;
           call go_dn_s17m1_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17m8_info" {
     sat_s17m8_info:
         const sat_s17m8_entry;
         const 12884901890;
         const 15;
 },
 GHC.Enum.efdtIntDnFB_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c19WJ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c19WN; else goto c19WM;
       c19WN: // global
           HpAlloc = 72;
           R1 = GHC.Enum.efdtIntDnFB_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       c19WM: // global
           if (%MO_S_Le_W64(R6, R5)) goto c19WH; else goto c19WI;
       c19WH: // global
           I64[Hp - 64] = sat_s17m8_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = R4;
           I64[Hp - 24] = R5;
           I64[Hp - 16] = R6;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R4;
           R3 = Hp - 64;
           _s17lS::P64 = R2;
           R2 = Hp - 7;
           R1 = _s17lS::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c19WI: // global
           if (%MO_S_Le_W64(R6, R4)) goto c19WV; else goto c19WW;
       c19WV: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = R4;
           _c19WT::P64 = Hp - 63;
           Hp = Hp - 56;
           R3 = R3;
           _s17lS::P64 = R2;
           R2 = _c19WT::P64;
           R1 = _s17lS::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c19WW: // global
           Hp = Hp - 72;
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtIntDnFB_info" {
     GHC.Enum.efdtIntDnFB_info:
         const GHC.Enum.efdtIntDnFB_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 1797;
         const GHC.Enum.efdtIntDnFB_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.519218371 UTC

[section ""data" . GHC.Enum.efdtInt_closure" {
     GHC.Enum.efdtInt_closure:
         const GHC.Enum.efdtInt_info;
 },
 GHC.Enum.efdtInt_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c19XA: // global
           if (%MO_S_Lt_W64(R3, R2)) goto c19Xy; else goto c19Xz;
       c19Xy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtIntDn_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c19Xz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtIntUp_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtInt_info" {
     GHC.Enum.efdtInt_info:
         const GHC.Enum.efdtInt_entry;
         const 0;
         const 14;
         const 12884901904;
 },
 section ""data" . GHC.Enum.efdtIntFB_closure" {
     GHC.Enum.efdtIntFB_closure:
         const GHC.Enum.efdtIntFB_info;
 },
 GHC.Enum.efdtIntFB_slow() //  [R1]
         { []
         }
     {offset
       c19XE: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.efdtIntFB_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Enum.efdtIntFB_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c19XN: // global
           if (%MO_S_Lt_W64(R5, R4)) goto c19XL; else goto c19XM;
       c19XL: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtIntDnFB_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
       c19XM: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtIntUpFB_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtIntFB_info" {
     GHC.Enum.efdtIntFB_info:
         const GHC.Enum.efdtIntFB_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 1797;
         const GHC.Enum.efdtIntFB_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.569798135 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_$cenumFromThenTo_closure" {
     GHC.Enum.$fEnumOrdering_$cenumFromThenTo_closure:
         const GHC.Enum.$fEnumOrdering_$cenumFromThenTo_info;
         const 0;
 },
 sat_s17mF_entry() //  [R1]
         { []
         }
     {offset
       c19YN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19YO; else goto c19YP;
       c19YO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19YP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17mz_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17mF_info" {
     sat_s17mF_info:
         const sat_s17mF_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+408;
 },
 sat_s17mD_entry() //  [R1]
         { []
         }
     {offset
       c19Z0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19Z1; else goto c19Z2;
       c19Z1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19Z2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17mC::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17mC::I64, 2)) goto u19Z3; else goto u19Z5;
       u19Z3: // global
           if (%MO_S_Lt_W64(_s17mC::I64, 1)) goto u19Z4; else goto c19YY;
       u19Z4: // global
           if (%MO_S_Lt_W64(_s17mC::I64, 0)) goto c19YW; else goto c19YX;
       c19YX: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c19YY: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u19Z5: // global
           if (%MO_S_Ge_W64(_s17mC::I64, 3)) goto c19YW; else goto c19YZ;
       c19YW: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c19YZ: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17mD_info" {
     sat_s17mD_info:
         const sat_s17mD_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17mH_entry() //  [R1]
         { []
         }
     {offset
       c19Zh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19Zi; else goto c19Zj;
       c19Zi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19Zj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17mG::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17mG::I64, 2)) goto u19Zk; else goto u19Zm;
       u19Zk: // global
           if (%MO_S_Lt_W64(_s17mG::I64, 1)) goto u19Zl; else goto c19Zf;
       u19Zl: // global
           if (%MO_S_Lt_W64(_s17mG::I64, 0)) goto c19Zd; else goto c19Ze;
       c19Ze: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c19Zf: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u19Zm: // global
           if (%MO_S_Ge_W64(_s17mG::I64, 3)) goto c19Zd; else goto c19Zg;
       c19Zd: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c19Zg: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17mH_info" {
     sat_s17mH_info:
         const sat_s17mH_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 go_dn_s17mz_entry() //  [R1, R2]
         { []
         }
     {offset
       c19Zq: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c19Zu; else goto c19Zt;
       c19Zu: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c19Zt: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c19Zo; else goto c19Zp;
       c19Zo: // global
           _s17mx::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17mF_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17mx::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17mD_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c19Zp: // global
           I64[Hp - 80] = sat_s17mH_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c19Zw::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c19Zw::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17mz_info" {
     go_dn_s17mz_info:
         const go_dn_s17mz_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+408;
 },
 sat_s17mI_entry() //  [R1]
         { []
         }
     {offset
       c19Zx: // global
           _s17mI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c19Zy; else goto c19Zz;
       c19Zz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c19ZB; else goto c19ZA;
       c19ZB: // global
           HpAlloc = 24;
           goto c19Zy;
       c19Zy: // global
           R1 = _s17mI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19ZA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17mI::P64;
           _s17mr::I64 = I64[_s17mI::P64 + 24];
           _s17mx::I64 = _s17mr::I64 - I64[_s17mI::P64 + 16];
           I64[Hp - 16] = go_dn_s17mz_info;
           I64[Hp - 8] = _s17mx::I64;
           I64[Hp] = 0 - _s17mx::I64;
           R2 = _s17mr::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17mz_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17mI_info" {
     sat_s17mI_info:
         const sat_s17mI_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+408;
 },
 sat_s17mw_entry() //  [R1]
         { []
         }
     {offset
       c19ZM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c19ZN; else goto c19ZO;
       c19ZN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c19ZO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17mv::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17mv::I64, 2)) goto u19ZP; else goto u19ZR;
       u19ZP: // global
           if (%MO_S_Lt_W64(_s17mv::I64, 1)) goto u19ZQ; else goto c19ZK;
       u19ZQ: // global
           if (%MO_S_Lt_W64(_s17mv::I64, 0)) goto c19ZI; else goto c19ZJ;
       c19ZJ: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c19ZK: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u19ZR: // global
           if (%MO_S_Ge_W64(_s17mv::I64, 3)) goto c19ZI; else goto c19ZL;
       c19ZI: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c19ZL: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17mw_info" {
     sat_s17mw_info:
         const sat_s17mw_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17mL_entry() //  [R1]
         { []
         }
     {offset
       c1a06: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a07; else goto c1a08;
       c1a07: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a08: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17mK::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17mK::I64, 2)) goto u1a09; else goto u1a0b;
       u1a09: // global
           if (%MO_S_Lt_W64(_s17mK::I64, 1)) goto u1a0a; else goto c1a04;
       u1a0a: // global
           if (%MO_S_Lt_W64(_s17mK::I64, 0)) goto c1a02; else goto c1a03;
       c1a03: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a04: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a0b: // global
           if (%MO_S_Ge_W64(_s17mK::I64, 3)) goto c1a02; else goto c1a05;
       c1a02: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a05: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17mL_info" {
     sat_s17mL_info:
         const sat_s17mL_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17mX_entry() //  [R1]
         { []
         }
     {offset
       c1a0E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a0F; else goto c1a0G;
       c1a0F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a0G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17mR_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17mX_info" {
     sat_s17mX_info:
         const sat_s17mX_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+408;
 },
 sat_s17mV_entry() //  [R1]
         { []
         }
     {offset
       c1a0R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a0S; else goto c1a0T;
       c1a0S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a0T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17mU::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17mU::I64, 2)) goto u1a0U; else goto u1a0W;
       u1a0U: // global
           if (%MO_S_Lt_W64(_s17mU::I64, 1)) goto u1a0V; else goto c1a0P;
       u1a0V: // global
           if (%MO_S_Lt_W64(_s17mU::I64, 0)) goto c1a0N; else goto c1a0O;
       c1a0O: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a0P: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a0W: // global
           if (%MO_S_Ge_W64(_s17mU::I64, 3)) goto c1a0N; else goto c1a0Q;
       c1a0N: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a0Q: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17mV_info" {
     sat_s17mV_info:
         const sat_s17mV_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17mZ_entry() //  [R1]
         { []
         }
     {offset
       c1a18: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a19; else goto c1a1a;
       c1a19: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a1a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17mY::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17mY::I64, 2)) goto u1a1b; else goto u1a1d;
       u1a1b: // global
           if (%MO_S_Lt_W64(_s17mY::I64, 1)) goto u1a1c; else goto c1a16;
       u1a1c: // global
           if (%MO_S_Lt_W64(_s17mY::I64, 0)) goto c1a14; else goto c1a15;
       c1a15: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a16: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a1d: // global
           if (%MO_S_Ge_W64(_s17mY::I64, 3)) goto c1a14; else goto c1a17;
       c1a14: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a17: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17mZ_info" {
     sat_s17mZ_info:
         const sat_s17mZ_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 go_up_s17mR_entry() //  [R1, R2]
         { []
         }
     {offset
       c1a1h: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1a1l; else goto c1a1k;
       c1a1l: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1a1k: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c1a1f; else goto c1a1g;
       c1a1f: // global
           _s17mP::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17mX_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17mP::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17mV_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1a1g: // global
           I64[Hp - 80] = sat_s17mZ_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1a1n::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1a1n::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17mR_info" {
     go_up_s17mR_info:
         const go_up_s17mR_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+408;
 },
 sat_s17n0_entry() //  [R1]
         { []
         }
     {offset
       c1a1o: // global
           _s17n0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1a1p; else goto c1a1q;
       c1a1q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1a1s; else goto c1a1r;
       c1a1s: // global
           HpAlloc = 24;
           goto c1a1p;
       c1a1p: // global
           R1 = _s17n0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a1r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17n0::P64;
           _s17mr::I64 = I64[_s17n0::P64 + 24];
           _s17mP::I64 = _s17mr::I64 - I64[_s17n0::P64 + 16];
           I64[Hp - 16] = go_up_s17mR_info;
           I64[Hp - 8] = _s17mP::I64;
           I64[Hp] = 0 - _s17mP::I64;
           R2 = _s17mr::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17mR_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17n0_info" {
     sat_s17n0_info:
         const sat_s17n0_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+408;
 },
 sat_s17mO_entry() //  [R1]
         { []
         }
     {offset
       c1a1D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a1E; else goto c1a1F;
       c1a1E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a1F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17mN::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17mN::I64, 2)) goto u1a1G; else goto u1a1I;
       u1a1G: // global
           if (%MO_S_Lt_W64(_s17mN::I64, 1)) goto u1a1H; else goto c1a1B;
       u1a1H: // global
           if (%MO_S_Lt_W64(_s17mN::I64, 0)) goto c1a1z; else goto c1a1A;
       c1a1A: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a1B: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a1I: // global
           if (%MO_S_Ge_W64(_s17mN::I64, 3)) goto c1a1z; else goto c1a1C;
       c1a1z: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a1C: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17mO_info" {
     sat_s17mO_info:
         const sat_s17mO_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17n3_entry() //  [R1]
         { []
         }
     {offset
       c1a1X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a1Y; else goto c1a1Z;
       c1a1Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a1Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17n2::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17n2::I64, 2)) goto u1a20; else goto u1a22;
       u1a20: // global
           if (%MO_S_Lt_W64(_s17n2::I64, 1)) goto u1a21; else goto c1a1V;
       u1a21: // global
           if (%MO_S_Lt_W64(_s17n2::I64, 0)) goto c1a1T; else goto c1a1U;
       c1a1U: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a1V: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a22: // global
           if (%MO_S_Ge_W64(_s17n2::I64, 3)) goto c1a1T; else goto c1a1W;
       c1a1T: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a1W: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17n3_info" {
     sat_s17n3_info:
         const sat_s17n3_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17ng_entry() //  [R1]
         { []
         }
     {offset
       c1a2z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a2A; else goto c1a2B;
       c1a2A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a2B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17na_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ng_info" {
     sat_s17ng_info:
         const sat_s17ng_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+408;
 },
 sat_s17ne_entry() //  [R1]
         { []
         }
     {offset
       c1a2M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a2N; else goto c1a2O;
       c1a2N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a2O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17nd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17nd::I64, 2)) goto u1a2P; else goto u1a2R;
       u1a2P: // global
           if (%MO_S_Lt_W64(_s17nd::I64, 1)) goto u1a2Q; else goto c1a2K;
       u1a2Q: // global
           if (%MO_S_Lt_W64(_s17nd::I64, 0)) goto c1a2I; else goto c1a2J;
       c1a2J: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a2K: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a2R: // global
           if (%MO_S_Ge_W64(_s17nd::I64, 3)) goto c1a2I; else goto c1a2L;
       c1a2I: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a2L: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ne_info" {
     sat_s17ne_info:
         const sat_s17ne_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17ni_entry() //  [R1]
         { []
         }
     {offset
       c1a33: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a34; else goto c1a35;
       c1a34: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a35: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17nh::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17nh::I64, 2)) goto u1a36; else goto u1a38;
       u1a36: // global
           if (%MO_S_Lt_W64(_s17nh::I64, 1)) goto u1a37; else goto c1a31;
       u1a37: // global
           if (%MO_S_Lt_W64(_s17nh::I64, 0)) goto c1a2Z; else goto c1a30;
       c1a30: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a31: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a38: // global
           if (%MO_S_Ge_W64(_s17nh::I64, 3)) goto c1a2Z; else goto c1a32;
       c1a2Z: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a32: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ni_info" {
     sat_s17ni_info:
         const sat_s17ni_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 go_dn_s17na_entry() //  [R1, R2]
         { []
         }
     {offset
       c1a3c: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1a3g; else goto c1a3f;
       c1a3g: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1a3f: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c1a3a; else goto c1a3b;
       c1a3a: // global
           _s17n8::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17ng_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17n8::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17ne_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1a3b: // global
           I64[Hp - 80] = sat_s17ni_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1a3i::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1a3i::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17na_info" {
     go_dn_s17na_info:
         const go_dn_s17na_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+408;
 },
 sat_s17nj_entry() //  [R1]
         { []
         }
     {offset
       c1a3j: // global
           _s17nj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1a3k; else goto c1a3l;
       c1a3l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1a3n; else goto c1a3m;
       c1a3n: // global
           HpAlloc = 24;
           goto c1a3k;
       c1a3k: // global
           R1 = _s17nj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a3m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17nj::P64;
           _s17mr::I64 = I64[_s17nj::P64 + 24];
           _s17n8::I64 = _s17mr::I64 - I64[_s17nj::P64 + 16];
           I64[Hp - 16] = go_dn_s17na_info;
           I64[Hp - 8] = _s17n8::I64;
           I64[Hp] = 1 - _s17n8::I64;
           R2 = _s17mr::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17na_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17nj_info" {
     sat_s17nj_info:
         const sat_s17nj_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+408;
 },
 sat_s17n7_entry() //  [R1]
         { []
         }
     {offset
       c1a3y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a3z; else goto c1a3A;
       c1a3z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a3A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17n6::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17n6::I64, 2)) goto u1a3B; else goto u1a3D;
       u1a3B: // global
           if (%MO_S_Lt_W64(_s17n6::I64, 1)) goto u1a3C; else goto c1a3w;
       u1a3C: // global
           if (%MO_S_Lt_W64(_s17n6::I64, 0)) goto c1a3u; else goto c1a3v;
       c1a3v: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a3w: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a3D: // global
           if (%MO_S_Ge_W64(_s17n6::I64, 3)) goto c1a3u; else goto c1a3x;
       c1a3u: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a3x: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17n7_info" {
     sat_s17n7_info:
         const sat_s17n7_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17nm_entry() //  [R1]
         { []
         }
     {offset
       c1a3S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a3T; else goto c1a3U;
       c1a3T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a3U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17nl::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17nl::I64, 2)) goto u1a3V; else goto u1a3X;
       u1a3V: // global
           if (%MO_S_Lt_W64(_s17nl::I64, 1)) goto u1a3W; else goto c1a3Q;
       u1a3W: // global
           if (%MO_S_Lt_W64(_s17nl::I64, 0)) goto c1a3O; else goto c1a3P;
       c1a3P: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a3Q: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a3X: // global
           if (%MO_S_Ge_W64(_s17nl::I64, 3)) goto c1a3O; else goto c1a3R;
       c1a3O: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a3R: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17nm_info" {
     sat_s17nm_info:
         const sat_s17nm_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17ny_entry() //  [R1]
         { []
         }
     {offset
       c1a4q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a4r; else goto c1a4s;
       c1a4r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a4s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17ns_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ny_info" {
     sat_s17ny_info:
         const sat_s17ny_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+408;
 },
 sat_s17nw_entry() //  [R1]
         { []
         }
     {offset
       c1a4D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a4E; else goto c1a4F;
       c1a4E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a4F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17nv::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17nv::I64, 2)) goto u1a4G; else goto u1a4I;
       u1a4G: // global
           if (%MO_S_Lt_W64(_s17nv::I64, 1)) goto u1a4H; else goto c1a4B;
       u1a4H: // global
           if (%MO_S_Lt_W64(_s17nv::I64, 0)) goto c1a4z; else goto c1a4A;
       c1a4A: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a4B: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a4I: // global
           if (%MO_S_Ge_W64(_s17nv::I64, 3)) goto c1a4z; else goto c1a4C;
       c1a4z: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a4C: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17nw_info" {
     sat_s17nw_info:
         const sat_s17nw_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17nA_entry() //  [R1]
         { []
         }
     {offset
       c1a4U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a4V; else goto c1a4W;
       c1a4V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a4W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17nz::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17nz::I64, 2)) goto u1a4X; else goto u1a4Z;
       u1a4X: // global
           if (%MO_S_Lt_W64(_s17nz::I64, 1)) goto u1a4Y; else goto c1a4S;
       u1a4Y: // global
           if (%MO_S_Lt_W64(_s17nz::I64, 0)) goto c1a4Q; else goto c1a4R;
       c1a4R: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a4S: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a4Z: // global
           if (%MO_S_Ge_W64(_s17nz::I64, 3)) goto c1a4Q; else goto c1a4T;
       c1a4Q: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a4T: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17nA_info" {
     sat_s17nA_info:
         const sat_s17nA_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 go_up_s17ns_entry() //  [R1, R2]
         { []
         }
     {offset
       c1a53: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1a57; else goto c1a56;
       c1a57: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1a56: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c1a51; else goto c1a52;
       c1a51: // global
           _s17nq::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17ny_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17nq::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17nw_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1a52: // global
           I64[Hp - 80] = sat_s17nA_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1a59::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1a59::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17ns_info" {
     go_up_s17ns_info:
         const go_up_s17ns_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+408;
 },
 sat_s17nB_entry() //  [R1]
         { []
         }
     {offset
       c1a5a: // global
           _s17nB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1a5b; else goto c1a5c;
       c1a5c: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1a5e; else goto c1a5d;
       c1a5e: // global
           HpAlloc = 24;
           goto c1a5b;
       c1a5b: // global
           R1 = _s17nB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a5d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17nB::P64;
           _s17mr::I64 = I64[_s17nB::P64 + 24];
           _s17nq::I64 = _s17mr::I64 - I64[_s17nB::P64 + 16];
           I64[Hp - 16] = go_up_s17ns_info;
           I64[Hp - 8] = _s17nq::I64;
           I64[Hp] = 1 - _s17nq::I64;
           R2 = _s17mr::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17ns_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17nB_info" {
     sat_s17nB_info:
         const sat_s17nB_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+408;
 },
 sat_s17np_entry() //  [R1]
         { []
         }
     {offset
       c1a5p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a5q; else goto c1a5r;
       c1a5q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a5r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17no::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17no::I64, 2)) goto u1a5s; else goto u1a5u;
       u1a5s: // global
           if (%MO_S_Lt_W64(_s17no::I64, 1)) goto u1a5t; else goto c1a5n;
       u1a5t: // global
           if (%MO_S_Lt_W64(_s17no::I64, 0)) goto c1a5l; else goto c1a5m;
       c1a5m: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a5n: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a5u: // global
           if (%MO_S_Ge_W64(_s17no::I64, 3)) goto c1a5l; else goto c1a5o;
       c1a5l: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a5o: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17np_info" {
     sat_s17np_info:
         const sat_s17np_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17nE_entry() //  [R1]
         { []
         }
     {offset
       c1a5J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a5K; else goto c1a5L;
       c1a5K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a5L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17nD::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17nD::I64, 2)) goto u1a5M; else goto u1a5O;
       u1a5M: // global
           if (%MO_S_Lt_W64(_s17nD::I64, 1)) goto u1a5N; else goto c1a5H;
       u1a5N: // global
           if (%MO_S_Lt_W64(_s17nD::I64, 0)) goto c1a5F; else goto c1a5G;
       c1a5G: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a5H: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a5O: // global
           if (%MO_S_Ge_W64(_s17nD::I64, 3)) goto c1a5F; else goto c1a5I;
       c1a5F: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a5I: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17nE_info" {
     sat_s17nE_info:
         const sat_s17nE_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17nR_entry() //  [R1]
         { []
         }
     {offset
       c1a6l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a6m; else goto c1a6n;
       c1a6m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a6n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17nL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17nR_info" {
     sat_s17nR_info:
         const sat_s17nR_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+408;
 },
 sat_s17nP_entry() //  [R1]
         { []
         }
     {offset
       c1a6y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a6z; else goto c1a6A;
       c1a6z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a6A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17nO::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17nO::I64, 2)) goto u1a6B; else goto u1a6D;
       u1a6B: // global
           if (%MO_S_Lt_W64(_s17nO::I64, 1)) goto u1a6C; else goto c1a6w;
       u1a6C: // global
           if (%MO_S_Lt_W64(_s17nO::I64, 0)) goto c1a6u; else goto c1a6v;
       c1a6v: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a6w: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a6D: // global
           if (%MO_S_Ge_W64(_s17nO::I64, 3)) goto c1a6u; else goto c1a6x;
       c1a6u: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a6x: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17nP_info" {
     sat_s17nP_info:
         const sat_s17nP_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17nT_entry() //  [R1]
         { []
         }
     {offset
       c1a6P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a6Q; else goto c1a6R;
       c1a6Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a6R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17nS::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17nS::I64, 2)) goto u1a6S; else goto u1a6U;
       u1a6S: // global
           if (%MO_S_Lt_W64(_s17nS::I64, 1)) goto u1a6T; else goto c1a6N;
       u1a6T: // global
           if (%MO_S_Lt_W64(_s17nS::I64, 0)) goto c1a6L; else goto c1a6M;
       c1a6M: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a6N: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a6U: // global
           if (%MO_S_Ge_W64(_s17nS::I64, 3)) goto c1a6L; else goto c1a6O;
       c1a6L: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a6O: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17nT_info" {
     sat_s17nT_info:
         const sat_s17nT_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 go_dn_s17nL_entry() //  [R1, R2]
         { []
         }
     {offset
       c1a6Y: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1a72; else goto c1a71;
       c1a72: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1a71: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c1a6W; else goto c1a6X;
       c1a6W: // global
           _s17nJ::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17nR_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17nJ::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17nP_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1a6X: // global
           I64[Hp - 80] = sat_s17nT_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1a74::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1a74::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17nL_info" {
     go_dn_s17nL_info:
         const go_dn_s17nL_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+408;
 },
 sat_s17nU_entry() //  [R1]
         { []
         }
     {offset
       c1a75: // global
           _s17nU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1a76; else goto c1a77;
       c1a77: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1a79; else goto c1a78;
       c1a79: // global
           HpAlloc = 24;
           goto c1a76;
       c1a76: // global
           R1 = _s17nU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a78: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17nU::P64;
           _s17mr::I64 = I64[_s17nU::P64 + 24];
           _s17nJ::I64 = _s17mr::I64 - I64[_s17nU::P64 + 16];
           I64[Hp - 16] = go_dn_s17nL_info;
           I64[Hp - 8] = _s17nJ::I64;
           I64[Hp] = 2 - _s17nJ::I64;
           R2 = _s17mr::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17nL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17nU_info" {
     sat_s17nU_info:
         const sat_s17nU_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+408;
 },
 sat_s17nI_entry() //  [R1]
         { []
         }
     {offset
       c1a7k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a7l; else goto c1a7m;
       c1a7l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a7m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17nH::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17nH::I64, 2)) goto u1a7n; else goto u1a7p;
       u1a7n: // global
           if (%MO_S_Lt_W64(_s17nH::I64, 1)) goto u1a7o; else goto c1a7i;
       u1a7o: // global
           if (%MO_S_Lt_W64(_s17nH::I64, 0)) goto c1a7g; else goto c1a7h;
       c1a7h: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a7i: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a7p: // global
           if (%MO_S_Ge_W64(_s17nH::I64, 3)) goto c1a7g; else goto c1a7j;
       c1a7g: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a7j: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17nI_info" {
     sat_s17nI_info:
         const sat_s17nI_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17nX_entry() //  [R1]
         { []
         }
     {offset
       c1a7E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a7F; else goto c1a7G;
       c1a7F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a7G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17nW::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17nW::I64, 2)) goto u1a7H; else goto u1a7J;
       u1a7H: // global
           if (%MO_S_Lt_W64(_s17nW::I64, 1)) goto u1a7I; else goto c1a7C;
       u1a7I: // global
           if (%MO_S_Lt_W64(_s17nW::I64, 0)) goto c1a7A; else goto c1a7B;
       c1a7B: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a7C: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a7J: // global
           if (%MO_S_Ge_W64(_s17nW::I64, 3)) goto c1a7A; else goto c1a7D;
       c1a7A: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a7D: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17nX_info" {
     sat_s17nX_info:
         const sat_s17nX_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17o9_entry() //  [R1]
         { []
         }
     {offset
       c1a8c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a8d; else goto c1a8e;
       c1a8d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a8e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17o3_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17o9_info" {
     sat_s17o9_info:
         const sat_s17o9_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+408;
 },
 sat_s17o7_entry() //  [R1]
         { []
         }
     {offset
       c1a8p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a8q; else goto c1a8r;
       c1a8q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a8r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17o6::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17o6::I64, 2)) goto u1a8s; else goto u1a8u;
       u1a8s: // global
           if (%MO_S_Lt_W64(_s17o6::I64, 1)) goto u1a8t; else goto c1a8n;
       u1a8t: // global
           if (%MO_S_Lt_W64(_s17o6::I64, 0)) goto c1a8l; else goto c1a8m;
       c1a8m: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a8n: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a8u: // global
           if (%MO_S_Ge_W64(_s17o6::I64, 3)) goto c1a8l; else goto c1a8o;
       c1a8l: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a8o: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17o7_info" {
     sat_s17o7_info:
         const sat_s17o7_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17ob_entry() //  [R1]
         { []
         }
     {offset
       c1a8G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a8H; else goto c1a8I;
       c1a8H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a8I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17oa::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17oa::I64, 2)) goto u1a8J; else goto u1a8L;
       u1a8J: // global
           if (%MO_S_Lt_W64(_s17oa::I64, 1)) goto u1a8K; else goto c1a8E;
       u1a8K: // global
           if (%MO_S_Lt_W64(_s17oa::I64, 0)) goto c1a8C; else goto c1a8D;
       c1a8D: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a8E: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a8L: // global
           if (%MO_S_Ge_W64(_s17oa::I64, 3)) goto c1a8C; else goto c1a8F;
       c1a8C: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a8F: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ob_info" {
     sat_s17ob_info:
         const sat_s17ob_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 go_up_s17o3_entry() //  [R1, R2]
         { []
         }
     {offset
       c1a8P: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1a8T; else goto c1a8S;
       c1a8T: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1a8S: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c1a8N; else goto c1a8O;
       c1a8N: // global
           _s17o1::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17o9_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17o1::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17o7_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1a8O: // global
           I64[Hp - 80] = sat_s17ob_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1a8V::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1a8V::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17o3_info" {
     go_up_s17o3_info:
         const go_up_s17o3_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+408;
 },
 sat_s17oc_entry() //  [R1]
         { []
         }
     {offset
       c1a8W: // global
           _s17oc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1a8X; else goto c1a8Y;
       c1a8Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1a90; else goto c1a8Z;
       c1a90: // global
           HpAlloc = 24;
           goto c1a8X;
       c1a8X: // global
           R1 = _s17oc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a8Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17oc::P64;
           _s17mr::I64 = I64[_s17oc::P64 + 24];
           _s17o1::I64 = _s17mr::I64 - I64[_s17oc::P64 + 16];
           I64[Hp - 16] = go_up_s17o3_info;
           I64[Hp - 8] = _s17o1::I64;
           I64[Hp] = 2 - _s17o1::I64;
           R2 = _s17mr::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17o3_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17oc_info" {
     sat_s17oc_info:
         const sat_s17oc_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+408;
 },
 sat_s17o0_entry() //  [R1]
         { []
         }
     {offset
       c1a9b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a9c; else goto c1a9d;
       c1a9c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a9d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17nZ::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17nZ::I64, 2)) goto u1a9e; else goto u1a9g;
       u1a9e: // global
           if (%MO_S_Lt_W64(_s17nZ::I64, 1)) goto u1a9f; else goto c1a99;
       u1a9f: // global
           if (%MO_S_Lt_W64(_s17nZ::I64, 0)) goto c1a97; else goto c1a98;
       c1a98: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a99: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a9g: // global
           if (%MO_S_Ge_W64(_s17nZ::I64, 3)) goto c1a97; else goto c1a9a;
       c1a97: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a9a: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17o0_info" {
     sat_s17o0_info:
         const sat_s17o0_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17of_entry() //  [R1]
         { []
         }
     {offset
       c1a9v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1a9w; else goto c1a9x;
       c1a9w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1a9x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17oe::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17oe::I64, 2)) goto u1a9y; else goto u1a9A;
       u1a9y: // global
           if (%MO_S_Lt_W64(_s17oe::I64, 1)) goto u1a9z; else goto c1a9t;
       u1a9z: // global
           if (%MO_S_Lt_W64(_s17oe::I64, 0)) goto c1a9r; else goto c1a9s;
       c1a9s: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1a9t: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1a9A: // global
           if (%MO_S_Ge_W64(_s17oe::I64, 3)) goto c1a9r; else goto c1a9u;
       c1a9r: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1a9u: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17of_info" {
     sat_s17of_info:
         const sat_s17of_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 GHC.Enum.$fEnumOrdering_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1a9J: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1a9K; else goto c1a9L;
       c1a9K: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1a9L: // global
           I64[Sp - 24] = block_c1a9B_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1abr; else goto c1a9C;
       u1abr: // global
           call _c1a9B(R1) args: 0, res: 0, upd: 0;
       c1a9C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_$cenumFromThenTo_info" {
     GHC.Enum.$fEnumOrdering_$cenumFromThenTo_info:
         const GHC.Enum.$fEnumOrdering_$cenumFromThenTo_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S17Oj_srt+408;
 },
 _c1a9B() //  [R1]
         { []
         }
     {offset
       c1a9B: // global
           _s17mm::P64 = P64[Sp + 8];
           _c1a9I::P64 = R1 & 7;
           if (_c1a9I::P64 < 3) goto u1abo; else goto c1a9H;
       u1abo: // global
           if (_c1a9I::P64 < 2) goto c1a9F; else goto c1a9G;
       c1a9F: // global
           _s17mp::I64 = 0;
           goto s17mo;
       c1a9G: // global
           _s17mp::I64 = 1;
           goto s17mo;
       c1a9H: // global
           _s17mp::I64 = 2;
           goto s17mo;
       s17mo: // global
           I64[Sp] = block_c1a9M_info;
           R1 = _s17mm::P64;
           I64[Sp + 8] = _s17mp::I64;
           if (R1 & 7 != 0) goto u1abq; else goto c1aaX;
       u1abq: // global
           call _c1a9M(R1) args: 0, res: 0, upd: 0;
       c1aaX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1a9B_info" {
     block_c1a9B_info:
         const _c1a9B;
         const 2;
         const 4294967326;
         const S17Oj_srt+408;
 },
 _c1a9M() //  [R1]
         { []
         }
     {offset
       c1a9M: // global
           _s17mn::P64 = P64[Sp + 16];
           _c1abl::P64 = R1 & 7;
           if (_c1abl::P64 < 3) goto u1abp; else goto c1abb;
       u1abp: // global
           if (_c1abl::P64 < 2) goto c1ab3; else goto c1ab7;
       c1ab3: // global
           _s17mr::I64 = 0;
           goto s17mq;
       c1ab7: // global
           _s17mr::I64 = 1;
           goto s17mq;
       c1abb: // global
           _s17mr::I64 = 2;
           goto s17mq;
       s17mq: // global
           I64[Sp] = block_c19Ye_info;
           R1 = _s17mn::P64;
           I64[Sp + 16] = _s17mr::I64;
           if (R1 & 7 != 0) goto u1abs; else goto c19Yf;
       u1abs: // global
           call _c19Ye(R1) args: 0, res: 0, upd: 0;
       c19Yf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1a9M_info" {
     block_c1a9M_info:
         const _c1a9M;
         const 66;
         const 4294967326;
         const S17Oj_srt+408;
 },
 _c19Ye() //  [R1]
         { []
         }
     {offset
       c19Ye: // global
           _s17mp::I64 = I64[Sp + 8];
           _s17mr::I64 = I64[Sp + 16];
           _c1abm::P64 = R1 & 7;
           if (_c1abm::P64 < 3) goto u1abn; else goto c1aaA;
       u1abn: // global
           if (_c1abm::P64 < 2) goto c1a9Q; else goto c1aad;
       c1a9Q: // global
           Hp = Hp + 80;
           _s17ms::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1aaD; else goto c1a9S;
       c1a9S: // global
           if (%MO_S_Lt_W64(_s17mr::I64,
                            _s17mp::I64)) goto c1aa3; else goto c1aac;
       c1aa3: // global
           if (%MO_S_Le_W64(0, _s17mr::I64)) goto c1a9W; else goto c1aa1;
       c1a9W: // global
           I64[Hp - 72] = sat_s17mI_info;
           I64[Hp - 56] = _s17mp::I64;
           I64[Hp - 48] = _s17mr::I64;
           I64[Hp - 40] = sat_s17mw_info;
           I64[Hp - 24] = _s17mp::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aa1: // global
           if (%MO_S_Gt_W64(0, _s17mp::I64)) goto c1aaU; else goto c1a9Z;
       c1a9Z: // global
           I64[Hp - 72] = sat_s17mL_info;
           I64[Hp - 56] = _s17mp::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1a9X::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1a9X::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aac: // global
           if (%MO_S_Ge_W64(0, _s17mr::I64)) goto c1aa6; else goto c1aab;
       c1aa6: // global
           I64[Hp - 72] = sat_s17n0_info;
           I64[Hp - 56] = _s17mp::I64;
           I64[Hp - 48] = _s17mr::I64;
           I64[Hp - 40] = sat_s17mO_info;
           I64[Hp - 24] = _s17mp::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aab: // global
           if (%MO_S_Lt_W64(0, _s17mp::I64)) goto c1aaU; else goto c1aa9;
       c1aa9: // global
           I64[Hp - 72] = sat_s17n3_info;
           I64[Hp - 56] = _s17mp::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1aa7::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1aa7::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aad: // global
           Hp = Hp + 80;
           _s17ms::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1aaD; else goto c1aaf;
       c1aaf: // global
           if (%MO_S_Lt_W64(_s17mr::I64,
                            _s17mp::I64)) goto c1aaq; else goto c1aaz;
       c1aaq: // global
           if (%MO_S_Le_W64(1, _s17mr::I64)) goto c1aaj; else goto c1aao;
       c1aaj: // global
           I64[Hp - 72] = sat_s17nj_info;
           I64[Hp - 56] = _s17mp::I64;
           I64[Hp - 48] = _s17mr::I64;
           I64[Hp - 40] = sat_s17n7_info;
           I64[Hp - 24] = _s17mp::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aao: // global
           if (%MO_S_Gt_W64(1, _s17mp::I64)) goto c1aaU; else goto c1aam;
       c1aam: // global
           I64[Hp - 72] = sat_s17nm_info;
           I64[Hp - 56] = _s17mp::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1aak::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1aak::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aaz: // global
           if (%MO_S_Ge_W64(1, _s17mr::I64)) goto c1aat; else goto c1aay;
       c1aat: // global
           I64[Hp - 72] = sat_s17nB_info;
           I64[Hp - 56] = _s17mp::I64;
           I64[Hp - 48] = _s17mr::I64;
           I64[Hp - 40] = sat_s17np_info;
           I64[Hp - 24] = _s17mp::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aay: // global
           if (%MO_S_Lt_W64(1, _s17mp::I64)) goto c1aaU; else goto c1aaw;
       c1aaw: // global
           I64[Hp - 72] = sat_s17nE_info;
           I64[Hp - 56] = _s17mp::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1aau::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1aau::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aaA: // global
           Hp = Hp + 80;
           _s17ms::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1aaD; else goto c1aaC;
       c1aaD: // global
           HpAlloc = 80;
           R1 = _s17ms::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1aaC: // global
           if (%MO_S_Lt_W64(_s17mr::I64,
                            _s17mp::I64)) goto c1aaN; else goto c1aaW;
       c1aaN: // global
           if (%MO_S_Le_W64(2, _s17mr::I64)) goto c1aaG; else goto c1aaL;
       c1aaG: // global
           I64[Hp - 72] = sat_s17nU_info;
           I64[Hp - 56] = _s17mp::I64;
           I64[Hp - 48] = _s17mr::I64;
           I64[Hp - 40] = sat_s17nI_info;
           I64[Hp - 24] = _s17mp::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aaL: // global
           if (%MO_S_Gt_W64(2, _s17mp::I64)) goto c1aaU; else goto c1aaJ;
       c1aaJ: // global
           I64[Hp - 72] = sat_s17nX_info;
           I64[Hp - 56] = _s17mp::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1aaH::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1aaH::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aaW: // global
           if (%MO_S_Ge_W64(2, _s17mr::I64)) goto c1aaQ; else goto c1aaV;
       c1aaQ: // global
           I64[Hp - 72] = sat_s17oc_info;
           I64[Hp - 56] = _s17mp::I64;
           I64[Hp - 48] = _s17mr::I64;
           I64[Hp - 40] = sat_s17o0_info;
           I64[Hp - 24] = _s17mp::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aaV: // global
           if (%MO_S_Lt_W64(2, _s17mp::I64)) goto c1aaU; else goto c1aaT;
       c1aaU: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aaT: // global
           I64[Hp - 72] = sat_s17of_info;
           I64[Hp - 56] = _s17mp::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1aaR::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1aaR::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c19Ye_info" {
     block_c19Ye_info:
         const _c19Ye;
         const 194;
         const 4294967326;
         const S17Oj_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.693668661 UTC

[section ""data" . GHC.Enum.$fEnumBool_$cenumFromThenTo_closure" {
     GHC.Enum.$fEnumBool_$cenumFromThenTo_closure:
         const GHC.Enum.$fEnumBool_$cenumFromThenTo_info;
         const 0;
 },
 sat_s17oC_entry() //  [R1]
         { []
         }
     {offset
       c1alt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1alu; else goto c1alv;
       c1alu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1alv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17ow_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17oC_info" {
     sat_s17oC_info:
         const sat_s17oC_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+360;
 },
 sat_s17oA_entry() //  [R1]
         { []
         }
     {offset
       c1alF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1alG; else goto c1alH;
       c1alG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1alH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17oz::I64 = I64[R1 + 16];
           if (_s17oz::I64 != 0) goto u1alI; else goto c1alD;
       u1alI: // global
           if (_s17oz::I64 != 1) goto c1alC; else goto c1alE;
       c1alC: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1alE: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1alD: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17oA_info" {
     sat_s17oA_info:
         const sat_s17oA_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 sat_s17oE_entry() //  [R1]
         { []
         }
     {offset
       c1alT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1alU; else goto c1alV;
       c1alU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1alV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17oD::I64 = I64[R1 + 16];
           if (_s17oD::I64 != 0) goto u1alW; else goto c1alR;
       u1alW: // global
           if (_s17oD::I64 != 1) goto c1alQ; else goto c1alS;
       c1alQ: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1alS: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1alR: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17oE_info" {
     sat_s17oE_info:
         const sat_s17oE_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 go_dn_s17ow_entry() //  [R1, R2]
         { []
         }
     {offset
       c1am0: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1am4; else goto c1am3;
       c1am4: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1am3: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c1alY; else goto c1alZ;
       c1alY: // global
           _s17ou::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17oC_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17ou::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17oA_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1alZ: // global
           I64[Hp - 80] = sat_s17oE_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1am6::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1am6::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17ow_info" {
     go_dn_s17ow_info:
         const go_dn_s17ow_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+360;
 },
 sat_s17oF_entry() //  [R1]
         { []
         }
     {offset
       c1am7: // global
           _s17oF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1am8; else goto c1am9;
       c1am9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1amb; else goto c1ama;
       c1amb: // global
           HpAlloc = 24;
           goto c1am8;
       c1am8: // global
           R1 = _s17oF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ama: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17oF::P64;
           _s17oo::I64 = I64[_s17oF::P64 + 24];
           _s17ou::I64 = _s17oo::I64 - I64[_s17oF::P64 + 16];
           I64[Hp - 16] = go_dn_s17ow_info;
           I64[Hp - 8] = _s17ou::I64;
           I64[Hp] = 0 - _s17ou::I64;
           R2 = _s17oo::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17ow_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17oF_info" {
     sat_s17oF_info:
         const sat_s17oF_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+360;
 },
 sat_s17ot_entry() //  [R1]
         { []
         }
     {offset
       c1aml: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1amm; else goto c1amn;
       c1amm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1amn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17os::I64 = I64[R1 + 16];
           if (_s17os::I64 != 0) goto u1amo; else goto c1amj;
       u1amo: // global
           if (_s17os::I64 != 1) goto c1ami; else goto c1amk;
       c1ami: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1amk: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1amj: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ot_info" {
     sat_s17ot_info:
         const sat_s17ot_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 sat_s17oI_entry() //  [R1]
         { []
         }
     {offset
       c1amC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1amD; else goto c1amE;
       c1amD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1amE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17oH::I64 = I64[R1 + 16];
           if (_s17oH::I64 != 0) goto u1amF; else goto c1amA;
       u1amF: // global
           if (_s17oH::I64 != 1) goto c1amz; else goto c1amB;
       c1amz: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1amB: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1amA: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17oI_info" {
     sat_s17oI_info:
         const sat_s17oI_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 sat_s17oU_entry() //  [R1]
         { []
         }
     {offset
       c1an8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1an9; else goto c1ana;
       c1an9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ana: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17oO_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17oU_info" {
     sat_s17oU_info:
         const sat_s17oU_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+360;
 },
 sat_s17oS_entry() //  [R1]
         { []
         }
     {offset
       c1ank: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1anl; else goto c1anm;
       c1anl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1anm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17oR::I64 = I64[R1 + 16];
           if (_s17oR::I64 != 0) goto u1ann; else goto c1ani;
       u1ann: // global
           if (_s17oR::I64 != 1) goto c1anh; else goto c1anj;
       c1anh: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1anj: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1ani: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17oS_info" {
     sat_s17oS_info:
         const sat_s17oS_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 sat_s17oW_entry() //  [R1]
         { []
         }
     {offset
       c1any: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1anz; else goto c1anA;
       c1anz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1anA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17oV::I64 = I64[R1 + 16];
           if (_s17oV::I64 != 0) goto u1anB; else goto c1anw;
       u1anB: // global
           if (_s17oV::I64 != 1) goto c1anv; else goto c1anx;
       c1anv: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1anx: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1anw: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17oW_info" {
     sat_s17oW_info:
         const sat_s17oW_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 go_up_s17oO_entry() //  [R1, R2]
         { []
         }
     {offset
       c1anF: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1anJ; else goto c1anI;
       c1anJ: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1anI: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c1anD; else goto c1anE;
       c1anD: // global
           _s17oM::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17oU_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17oM::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17oS_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1anE: // global
           I64[Hp - 80] = sat_s17oW_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1anL::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1anL::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17oO_info" {
     go_up_s17oO_info:
         const go_up_s17oO_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+360;
 },
 sat_s17oX_entry() //  [R1]
         { []
         }
     {offset
       c1anM: // global
           _s17oX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1anN; else goto c1anO;
       c1anO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1anQ; else goto c1anP;
       c1anQ: // global
           HpAlloc = 24;
           goto c1anN;
       c1anN: // global
           R1 = _s17oX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1anP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17oX::P64;
           _s17oo::I64 = I64[_s17oX::P64 + 24];
           _s17oM::I64 = _s17oo::I64 - I64[_s17oX::P64 + 16];
           I64[Hp - 16] = go_up_s17oO_info;
           I64[Hp - 8] = _s17oM::I64;
           I64[Hp] = 0 - _s17oM::I64;
           R2 = _s17oo::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17oO_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17oX_info" {
     sat_s17oX_info:
         const sat_s17oX_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+360;
 },
 sat_s17oL_entry() //  [R1]
         { []
         }
     {offset
       c1ao0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1ao1; else goto c1ao2;
       c1ao1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ao2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17oK::I64 = I64[R1 + 16];
           if (_s17oK::I64 != 0) goto u1ao3; else goto c1anY;
       u1ao3: // global
           if (_s17oK::I64 != 1) goto c1anX; else goto c1anZ;
       c1anX: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1anZ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1anY: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17oL_info" {
     sat_s17oL_info:
         const sat_s17oL_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 sat_s17p0_entry() //  [R1]
         { []
         }
     {offset
       c1aoh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aoi; else goto c1aoj;
       c1aoi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aoj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17oZ::I64 = I64[R1 + 16];
           if (_s17oZ::I64 != 0) goto u1aok; else goto c1aof;
       u1aok: // global
           if (_s17oZ::I64 != 1) goto c1aoe; else goto c1aog;
       c1aoe: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1aog: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aof: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17p0_info" {
     sat_s17p0_info:
         const sat_s17p0_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 sat_s17pd_entry() //  [R1]
         { []
         }
     {offset
       c1aoR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aoS; else goto c1aoT;
       c1aoS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aoT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17p7_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17pd_info" {
     sat_s17pd_info:
         const sat_s17pd_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+360;
 },
 sat_s17pb_entry() //  [R1]
         { []
         }
     {offset
       c1ap3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1ap4; else goto c1ap5;
       c1ap4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ap5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17pa::I64 = I64[R1 + 16];
           if (_s17pa::I64 != 0) goto u1ap6; else goto c1ap1;
       u1ap6: // global
           if (_s17pa::I64 != 1) goto c1ap0; else goto c1ap2;
       c1ap0: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1ap2: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1ap1: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17pb_info" {
     sat_s17pb_info:
         const sat_s17pb_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 sat_s17pf_entry() //  [R1]
         { []
         }
     {offset
       c1aph: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1api; else goto c1apj;
       c1api: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1apj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17pe::I64 = I64[R1 + 16];
           if (_s17pe::I64 != 0) goto u1apk; else goto c1apf;
       u1apk: // global
           if (_s17pe::I64 != 1) goto c1ape; else goto c1apg;
       c1ape: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1apg: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1apf: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17pf_info" {
     sat_s17pf_info:
         const sat_s17pf_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 go_dn_s17p7_entry() //  [R1, R2]
         { []
         }
     {offset
       c1apo: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1aps; else goto c1apr;
       c1aps: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1apr: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c1apm; else goto c1apn;
       c1apm: // global
           _s17p5::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17pd_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17p5::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17pb_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1apn: // global
           I64[Hp - 80] = sat_s17pf_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1apu::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1apu::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17p7_info" {
     go_dn_s17p7_info:
         const go_dn_s17p7_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+360;
 },
 sat_s17pg_entry() //  [R1]
         { []
         }
     {offset
       c1apv: // global
           _s17pg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1apw; else goto c1apx;
       c1apx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1apz; else goto c1apy;
       c1apz: // global
           HpAlloc = 24;
           goto c1apw;
       c1apw: // global
           R1 = _s17pg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1apy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17pg::P64;
           _s17oo::I64 = I64[_s17pg::P64 + 24];
           _s17p5::I64 = _s17oo::I64 - I64[_s17pg::P64 + 16];
           I64[Hp - 16] = go_dn_s17p7_info;
           I64[Hp - 8] = _s17p5::I64;
           I64[Hp] = 1 - _s17p5::I64;
           R2 = _s17oo::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17p7_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17pg_info" {
     sat_s17pg_info:
         const sat_s17pg_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+360;
 },
 sat_s17p4_entry() //  [R1]
         { []
         }
     {offset
       c1apJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1apK; else goto c1apL;
       c1apK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1apL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17p3::I64 = I64[R1 + 16];
           if (_s17p3::I64 != 0) goto u1apM; else goto c1apH;
       u1apM: // global
           if (_s17p3::I64 != 1) goto c1apG; else goto c1apI;
       c1apG: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1apI: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1apH: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17p4_info" {
     sat_s17p4_info:
         const sat_s17p4_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 sat_s17pj_entry() //  [R1]
         { []
         }
     {offset
       c1aq0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aq1; else goto c1aq2;
       c1aq1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aq2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17pi::I64 = I64[R1 + 16];
           if (_s17pi::I64 != 0) goto u1aq3; else goto c1apY;
       u1aq3: // global
           if (_s17pi::I64 != 1) goto c1apX; else goto c1apZ;
       c1apX: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1apZ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1apY: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17pj_info" {
     sat_s17pj_info:
         const sat_s17pj_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 sat_s17pv_entry() //  [R1]
         { []
         }
     {offset
       c1aqw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aqx; else goto c1aqy;
       c1aqx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aqy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17pp_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17pv_info" {
     sat_s17pv_info:
         const sat_s17pv_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+360;
 },
 sat_s17pt_entry() //  [R1]
         { []
         }
     {offset
       c1aqI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aqJ; else goto c1aqK;
       c1aqJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aqK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17ps::I64 = I64[R1 + 16];
           if (_s17ps::I64 != 0) goto u1aqL; else goto c1aqG;
       u1aqL: // global
           if (_s17ps::I64 != 1) goto c1aqF; else goto c1aqH;
       c1aqF: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1aqH: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aqG: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17pt_info" {
     sat_s17pt_info:
         const sat_s17pt_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 sat_s17px_entry() //  [R1]
         { []
         }
     {offset
       c1aqW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aqX; else goto c1aqY;
       c1aqX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aqY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17pw::I64 = I64[R1 + 16];
           if (_s17pw::I64 != 0) goto u1aqZ; else goto c1aqU;
       u1aqZ: // global
           if (_s17pw::I64 != 1) goto c1aqT; else goto c1aqV;
       c1aqT: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1aqV: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aqU: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17px_info" {
     sat_s17px_info:
         const sat_s17px_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 go_up_s17pp_entry() //  [R1, R2]
         { []
         }
     {offset
       c1ar3: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1ar7; else goto c1ar6;
       c1ar7: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1ar6: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c1ar1; else goto c1ar2;
       c1ar1: // global
           _s17pn::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17pv_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17pn::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17pt_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1ar2: // global
           I64[Hp - 80] = sat_s17px_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1ar9::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1ar9::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17pp_info" {
     go_up_s17pp_info:
         const go_up_s17pp_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+360;
 },
 sat_s17py_entry() //  [R1]
         { []
         }
     {offset
       c1ara: // global
           _s17py::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1arb; else goto c1arc;
       c1arc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1are; else goto c1ard;
       c1are: // global
           HpAlloc = 24;
           goto c1arb;
       c1arb: // global
           R1 = _s17py::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ard: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17py::P64;
           _s17oo::I64 = I64[_s17py::P64 + 24];
           _s17pn::I64 = _s17oo::I64 - I64[_s17py::P64 + 16];
           I64[Hp - 16] = go_up_s17pp_info;
           I64[Hp - 8] = _s17pn::I64;
           I64[Hp] = 1 - _s17pn::I64;
           R2 = _s17oo::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17pp_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17py_info" {
     sat_s17py_info:
         const sat_s17py_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+360;
 },
 sat_s17pm_entry() //  [R1]
         { []
         }
     {offset
       c1aro: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1arp; else goto c1arq;
       c1arp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1arq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17pl::I64 = I64[R1 + 16];
           if (_s17pl::I64 != 0) goto u1arr; else goto c1arm;
       u1arr: // global
           if (_s17pl::I64 != 1) goto c1arl; else goto c1arn;
       c1arl: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1arn: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1arm: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17pm_info" {
     sat_s17pm_info:
         const sat_s17pm_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 sat_s17pB_entry() //  [R1]
         { []
         }
     {offset
       c1arF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1arG; else goto c1arH;
       c1arG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1arH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17pA::I64 = I64[R1 + 16];
           if (_s17pA::I64 != 0) goto u1arI; else goto c1arD;
       u1arI: // global
           if (_s17pA::I64 != 1) goto c1arC; else goto c1arE;
       c1arC: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1arE: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1arD: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17pB_info" {
     sat_s17pB_info:
         const sat_s17pB_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 GHC.Enum.$fEnumBool_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1arQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1arR; else goto c1arS;
       c1arR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1arS: // global
           I64[Sp - 24] = block_c1arJ_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1at1; else goto c1arK;
       u1at1: // global
           call _c1arJ(R1) args: 0, res: 0, upd: 0;
       c1arK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_$cenumFromThenTo_info" {
     GHC.Enum.$fEnumBool_$cenumFromThenTo_info:
         const GHC.Enum.$fEnumBool_$cenumFromThenTo_entry;
         const 0;
         const 1103806595086;
         const 12884901911;
         const S17Oj_srt+360;
 },
 _c1arJ() //  [R1]
         { []
         }
     {offset
       c1arJ: // global
           _s17oj::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c1arN; else goto c1arO;
       c1arN: // global
           _s17om::I64 = 0;
           goto s17ol;
       c1arO: // global
           _s17om::I64 = 1;
           goto s17ol;
       s17ol: // global
           I64[Sp] = block_c1arT_info;
           R1 = _s17oj::P64;
           I64[Sp + 8] = _s17om::I64;
           if (R1 & 7 != 0) goto u1at0; else goto c1asH;
       u1at0: // global
           call _c1arT(R1) args: 0, res: 0, upd: 0;
       c1asH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1arJ_info" {
     block_c1arJ_info:
         const _c1arJ;
         const 2;
         const 4294967326;
         const S17Oj_srt+360;
 },
 _c1arT() //  [R1]
         { []
         }
     {offset
       c1arT: // global
           _s17ok::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c1asN; else goto c1asR;
       c1asN: // global
           _s17oo::I64 = 0;
           goto s17on;
       c1asR: // global
           _s17oo::I64 = 1;
           goto s17on;
       s17on: // global
           I64[Sp] = block_c1akU_info;
           R1 = _s17ok::P64;
           I64[Sp + 16] = _s17oo::I64;
           if (R1 & 7 != 0) goto u1at2; else goto c1akV;
       u1at2: // global
           call _c1akU(R1) args: 0, res: 0, upd: 0;
       c1akV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1arT_info" {
     block_c1arT_info:
         const _c1arT;
         const 66;
         const 4294967326;
         const S17Oj_srt+360;
 },
 _c1akU() //  [R1]
         { []
         }
     {offset
       c1akU: // global
           _s17om::I64 = I64[Sp + 8];
           _s17oo::I64 = I64[Sp + 16];
           if (R1 & 7 == 1) goto c1arX; else goto c1ask;
       c1arX: // global
           Hp = Hp + 80;
           _s17op::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1asn; else goto c1arZ;
       c1arZ: // global
           if (%MO_S_Lt_W64(_s17oo::I64,
                            _s17om::I64)) goto c1asa; else goto c1asj;
       c1asa: // global
           if (%MO_S_Le_W64(0, _s17oo::I64)) goto c1as3; else goto c1as8;
       c1as3: // global
           I64[Hp - 72] = sat_s17oF_info;
           I64[Hp - 56] = _s17om::I64;
           I64[Hp - 48] = _s17oo::I64;
           I64[Hp - 40] = sat_s17ot_info;
           I64[Hp - 24] = _s17om::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1as8: // global
           if (%MO_S_Gt_W64(0, _s17om::I64)) goto c1asE; else goto c1as6;
       c1as6: // global
           I64[Hp - 72] = sat_s17oI_info;
           I64[Hp - 56] = _s17om::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1as4::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1as4::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1asj: // global
           if (%MO_S_Ge_W64(0, _s17oo::I64)) goto c1asd; else goto c1asi;
       c1asd: // global
           I64[Hp - 72] = sat_s17oX_info;
           I64[Hp - 56] = _s17om::I64;
           I64[Hp - 48] = _s17oo::I64;
           I64[Hp - 40] = sat_s17oL_info;
           I64[Hp - 24] = _s17om::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1asi: // global
           if (%MO_S_Lt_W64(0, _s17om::I64)) goto c1asE; else goto c1asg;
       c1asg: // global
           I64[Hp - 72] = sat_s17p0_info;
           I64[Hp - 56] = _s17om::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1ase::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1ase::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1ask: // global
           Hp = Hp + 80;
           _s17op::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1asn; else goto c1asm;
       c1asn: // global
           HpAlloc = 80;
           R1 = _s17op::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1asm: // global
           if (%MO_S_Lt_W64(_s17oo::I64,
                            _s17om::I64)) goto c1asx; else goto c1asG;
       c1asx: // global
           if (%MO_S_Le_W64(1, _s17oo::I64)) goto c1asq; else goto c1asv;
       c1asq: // global
           I64[Hp - 72] = sat_s17pg_info;
           I64[Hp - 56] = _s17om::I64;
           I64[Hp - 48] = _s17oo::I64;
           I64[Hp - 40] = sat_s17p4_info;
           I64[Hp - 24] = _s17om::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1asv: // global
           if (%MO_S_Gt_W64(1, _s17om::I64)) goto c1asE; else goto c1ast;
       c1ast: // global
           I64[Hp - 72] = sat_s17pj_info;
           I64[Hp - 56] = _s17om::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1asr::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1asr::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1asG: // global
           if (%MO_S_Ge_W64(1, _s17oo::I64)) goto c1asA; else goto c1asF;
       c1asA: // global
           I64[Hp - 72] = sat_s17py_info;
           I64[Hp - 56] = _s17om::I64;
           I64[Hp - 48] = _s17oo::I64;
           I64[Hp - 40] = sat_s17pm_info;
           I64[Hp - 24] = _s17om::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1asF: // global
           if (%MO_S_Lt_W64(1, _s17om::I64)) goto c1asE; else goto c1asD;
       c1asE: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1asD: // global
           I64[Hp - 72] = sat_s17pB_info;
           I64[Hp - 56] = _s17om::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1asB::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1asB::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1akU_info" {
     block_c1akU_info:
         const _c1akU;
         const 194;
         const 4294967326;
         const S17Oj_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.786132773 UTC

[section ""data" . GHC.Enum.$fEnumInt_$cenumFromThenTo_closure" {
     GHC.Enum.$fEnumInt_$cenumFromThenTo_closure:
         const GHC.Enum.$fEnumInt_$cenumFromThenTo_info;
 },
 GHC.Enum.$fEnumInt_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1ayY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1az7; else goto c1az8;
       c1az7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumInt_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1az8: // global
           I64[Sp - 24] = block_c1ayV_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1azh; else goto c1ayW;
       u1azh: // global
           call _c1ayV(R1) args: 0, res: 0, upd: 0;
       c1ayW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInt_$cenumFromThenTo_info" {
     GHC.Enum.$fEnumInt_$cenumFromThenTo_info:
         const GHC.Enum.$fEnumInt_$cenumFromThenTo_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1ayV() //  [R1]
         { []
         }
     {offset
       c1ayV: // global
           I64[Sp] = block_c1az1_info;
           _s17pI::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s17pI::I64;
           if (R1 & 7 != 0) goto u1azg; else goto c1az2;
       u1azg: // global
           call _c1az1(R1) args: 0, res: 0, upd: 0;
       c1az2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ayV_info" {
     block_c1ayV_info:
         const _c1ayV;
         const 2;
         const 30;
 },
 _c1az1() //  [R1]
         { []
         }
     {offset
       c1az1: // global
           I64[Sp] = block_c1az6_info;
           _s17pK::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s17pK::I64;
           if (R1 & 7 != 0) goto u1azi; else goto c1azb;
       u1azi: // global
           call _c1az6(R1) args: 0, res: 0, upd: 0;
       c1azb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1az1_info" {
     block_c1az1_info:
         const _c1az1;
         const 66;
         const 30;
 },
 _c1az6() //  [R1]
         { []
         }
     {offset
       c1az6: // global
           R4 = I64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Enum.efdtInt_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1az6_info" {
     block_c1az6_info:
         const _c1az6;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.794642752 UTC

[section ""data" . GHC.Enum.$fEnumInt_closure" {
     GHC.Enum.$fEnumInt_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumInt_$csucc_closure+1;
         const GHC.Enum.$fEnumInt_$cpred_closure+1;
         const GHC.Enum.$fEnumInt_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInt_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInt_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumInt_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumInt_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumInt_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.808166968 UTC

[section ""data" . GHC.Enum.boundedEnumFromThen_closure" {
     GHC.Enum.boundedEnumFromThen_closure:
         const GHC.Enum.boundedEnumFromThen_info;
 },
 sat_s17pW_entry() //  [R1]
         { []
         }
     {offset
       c1azX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1azY; else goto c1azZ;
       c1azY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1azZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17pW_info" {
     sat_s17pW_info:
         const sat_s17pW_entry;
         const 1;
         const 16;
 },
 sat_s17q9_entry() //  [R1]
         { []
         }
     {offset
       c1aAv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aAw; else goto c1aAx;
       c1aAw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aAx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17q3_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17q9_info" {
     sat_s17q9_info:
         const sat_s17q9_entry;
         const 8589934593;
         const 15;
 },
 sat_s17q7_entry() //  [R1]
         { []
         }
     {offset
       c1aAD: // global
           _s17q7::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1aAE; else goto c1aAF;
       c1aAF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1aAH; else goto c1aAG;
       c1aAH: // global
           HpAlloc = 16;
           goto c1aAE;
       c1aAE: // global
           R1 = _s17q7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aAG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17q7::P64;
           _s17pN::P64 = P64[_s17q7::P64 + 16];
           _s17q4::I64 = I64[_s17q7::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s17q4::I64;
           R2 = _s17pN::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17q7_info" {
     sat_s17q7_info:
         const sat_s17q7_entry;
         const 4294967297;
         const 19;
 },
 sat_s17qb_entry() //  [R1]
         { []
         }
     {offset
       c1aAO: // global
           _s17qb::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1aAP; else goto c1aAQ;
       c1aAQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1aAS; else goto c1aAR;
       c1aAS: // global
           HpAlloc = 16;
           goto c1aAP;
       c1aAP: // global
           R1 = _s17qb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aAR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17qb::P64;
           _s17pN::P64 = P64[_s17qb::P64 + 16];
           _s17q4::I64 = I64[_s17qb::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s17q4::I64;
           R2 = _s17pN::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17qb_info" {
     sat_s17qb_info:
         const sat_s17qb_entry;
         const 4294967297;
         const 19;
 },
 go_dn_s17q3_entry() //  [R1, R2]
         { []
         }
     {offset
       c1aAW: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1aB0; else goto c1aAZ;
       c1aB0: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1aAZ: // global
           _s17pN::P64 = P64[R1 + 7];
           if (%MO_S_Ge_W64(R2, I64[R1 + 23])) goto c1aAU; else goto c1aAV;
       c1aAU: // global
           _s17q1::I64 = I64[R1 + 15];
           I64[Hp - 88] = sat_s17q9_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = _s17q1::I64;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s17q7_info;
           P64[Hp - 32] = _s17pN::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aAV: // global
           I64[Hp - 88] = sat_s17qb_info;
           P64[Hp - 72] = _s17pN::P64;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 88;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1aB2::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1aB2::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17q3_info" {
     go_dn_s17q3_info:
         const go_dn_s17q3_entry;
         const 8589934593;
         const 8;
         const 4294967300;
 },
 sat_s17qc_entry() //  [R1]
         { []
         }
     {offset
       c1aB3: // global
           _s17qc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1aB4; else goto c1aB5;
       c1aB5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1aB7; else goto c1aB6;
       c1aB7: // global
           HpAlloc = 32;
           goto c1aB4;
       c1aB4: // global
           R1 = _s17qc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aB6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17qc::P64;
           _s17pN::P64 = P64[_s17qc::P64 + 16];
           _s17pS::I64 = I64[_s17qc::P64 + 24];
           _s17q1::I64 = _s17pS::I64 - I64[_s17qc::P64 + 32];
           _s17q2::I64 = I64[_s17qc::P64 + 40] - _s17q1::I64;
           I64[Hp - 24] = go_dn_s17q3_info;
           P64[Hp - 16] = _s17pN::P64;
           I64[Hp - 8] = _s17q1::I64;
           I64[Hp] = _s17q2::I64;
           R2 = _s17pS::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call go_dn_s17q3_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17qc_info" {
     sat_s17qc_info:
         const sat_s17qc_entry;
         const 12884901889;
         const 15;
 },
 sat_s17q0_entry() //  [R1]
         { []
         }
     {offset
       c1aBc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1aBd; else goto c1aBe;
       c1aBd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aBe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17q0_info" {
     sat_s17q0_info:
         const sat_s17q0_entry;
         const 2;
         const 18;
 },
 sat_s17qe_entry() //  [R1]
         { []
         }
     {offset
       c1aBn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1aBo; else goto c1aBp;
       c1aBo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aBp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17qe_info" {
     sat_s17qe_info:
         const sat_s17qe_entry;
         const 2;
         const 18;
 },
 sat_s17qf_entry() //  [R1]
         { []
         }
     {offset
       c1aBv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aBw; else goto c1aBx;
       c1aBw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aBx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17qf_info" {
     sat_s17qf_info:
         const sat_s17qf_entry;
         const 1;
         const 16;
 },
 sat_s17qs_entry() //  [R1]
         { []
         }
     {offset
       c1aC3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aC4; else goto c1aC5;
       c1aC4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aC5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17qm_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17qs_info" {
     sat_s17qs_info:
         const sat_s17qs_entry;
         const 8589934593;
         const 15;
 },
 sat_s17qq_entry() //  [R1]
         { []
         }
     {offset
       c1aCb: // global
           _s17qq::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1aCc; else goto c1aCd;
       c1aCd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1aCf; else goto c1aCe;
       c1aCf: // global
           HpAlloc = 16;
           goto c1aCc;
       c1aCc: // global
           R1 = _s17qq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aCe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17qq::P64;
           _s17pN::P64 = P64[_s17qq::P64 + 16];
           _s17qn::I64 = I64[_s17qq::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s17qn::I64;
           R2 = _s17pN::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17qq_info" {
     sat_s17qq_info:
         const sat_s17qq_entry;
         const 4294967297;
         const 19;
 },
 sat_s17qu_entry() //  [R1]
         { []
         }
     {offset
       c1aCm: // global
           _s17qu::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1aCn; else goto c1aCo;
       c1aCo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1aCq; else goto c1aCp;
       c1aCq: // global
           HpAlloc = 16;
           goto c1aCn;
       c1aCn: // global
           R1 = _s17qu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aCp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17qu::P64;
           _s17pN::P64 = P64[_s17qu::P64 + 16];
           _s17qn::I64 = I64[_s17qu::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s17qn::I64;
           R2 = _s17pN::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17qu_info" {
     sat_s17qu_info:
         const sat_s17qu_entry;
         const 4294967297;
         const 19;
 },
 go_up_s17qm_entry() //  [R1, R2]
         { []
         }
     {offset
       c1aCu: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1aCy; else goto c1aCx;
       c1aCy: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1aCx: // global
           _s17pN::P64 = P64[R1 + 7];
           if (%MO_S_Le_W64(R2, I64[R1 + 23])) goto c1aCs; else goto c1aCt;
       c1aCs: // global
           _s17qk::I64 = I64[R1 + 15];
           I64[Hp - 88] = sat_s17qs_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = _s17qk::I64;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s17qq_info;
           P64[Hp - 32] = _s17pN::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aCt: // global
           I64[Hp - 88] = sat_s17qu_info;
           P64[Hp - 72] = _s17pN::P64;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 88;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1aCA::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1aCA::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17qm_info" {
     go_up_s17qm_info:
         const go_up_s17qm_entry;
         const 8589934593;
         const 8;
         const 4294967300;
 },
 sat_s17qv_entry() //  [R1]
         { []
         }
     {offset
       c1aCB: // global
           _s17qv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1aCC; else goto c1aCD;
       c1aCD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1aCF; else goto c1aCE;
       c1aCF: // global
           HpAlloc = 32;
           goto c1aCC;
       c1aCC: // global
           R1 = _s17qv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aCE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17qv::P64;
           _s17pN::P64 = P64[_s17qv::P64 + 16];
           _s17pS::I64 = I64[_s17qv::P64 + 24];
           _s17qk::I64 = _s17pS::I64 - I64[_s17qv::P64 + 32];
           _s17ql::I64 = I64[_s17qv::P64 + 40] - _s17qk::I64;
           I64[Hp - 24] = go_up_s17qm_info;
           P64[Hp - 16] = _s17pN::P64;
           I64[Hp - 8] = _s17qk::I64;
           I64[Hp] = _s17ql::I64;
           R2 = _s17pS::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call go_up_s17qm_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17qv_info" {
     sat_s17qv_info:
         const sat_s17qv_entry;
         const 12884901889;
         const 15;
 },
 sat_s17qj_entry() //  [R1]
         { []
         }
     {offset
       c1aCK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1aCL; else goto c1aCM;
       c1aCL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aCM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17qj_info" {
     sat_s17qj_info:
         const sat_s17qj_entry;
         const 2;
         const 18;
 },
 sat_s17qx_entry() //  [R1]
         { []
         }
     {offset
       c1aCV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1aCW; else goto c1aCX;
       c1aCW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aCX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17qx_info" {
     sat_s17qx_info:
         const sat_s17qx_entry;
         const 2;
         const 18;
 },
 GHC.Enum.boundedEnumFromThen_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1aCY: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c1aCZ; else goto c1aD0;
       c1aCZ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.boundedEnumFromThen_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1aD0: // global
           I64[Sp - 32] = block_c1azI_info;
           _s17pN::P64 = R2;
           R2 = R2;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = R5;
           P64[Sp - 24] = _s17pN::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.boundedEnumFromThen_info" {
     GHC.Enum.boundedEnumFromThen_info:
         const GHC.Enum.boundedEnumFromThen_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c1azI() //  [R1]
         { []
         }
     {offset
       c1azI: // global
           I64[Sp] = block_c1azM_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 24];
           I64[Sp + 24] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1azI_info" {
     block_c1azI_info:
         const _c1azI;
         const 3;
         const 30;
 },
 _c1azM() //  [R1]
         { []
         }
     {offset
       c1azM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1aD4; else goto c1aD3;
       c1aD4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1aD3: // global
           _s17pN::P64 = P64[Sp + 8];
           _s17pO::P64 = P64[Sp + 16];
           _s17pU::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(I64[Sp + 24],
                            _s17pU::I64)) goto c1aD6; else goto c1aDi;
       c1aD6: // global
           I64[Hp - 16] = sat_s17pW_info;
           P64[Hp] = _s17pO::P64;
           I64[Sp - 8] = block_c1aA0_info;
           R2 = _s17pN::P64;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = Hp - 16;
           I64[Sp] = _s17pU::I64;
           P64[Sp + 16] = R1;
           Sp = Sp - 24;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
       c1aDi: // global
           I64[Hp - 16] = sat_s17qf_info;
           P64[Hp] = _s17pO::P64;
           I64[Sp - 8] = block_c1aBy_info;
           R2 = _s17pN::P64;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = Hp - 16;
           I64[Sp] = _s17pU::I64;
           P64[Sp + 16] = R1;
           Sp = Sp - 24;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1azM_info" {
     block_c1azM_info:
         const _c1azM;
         const 259;
         const 30;
 },
 _c1aA0() //  [R1]
         { []
         }
     {offset
       c1aA0: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c1aD9; else goto c1aD8;
       c1aD9: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1aD8: // global
           _s17pN::P64 = P64[Sp + 16];
           _s17pS::I64 = I64[Sp + 32];
           _s17pT::P64 = P64[Sp + 24];
           _s17pU::I64 = I64[Sp + 8];
           _s17pY::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_s17pY::I64,
                            _s17pS::I64)) goto c1aDc; else goto c1aDh;
       c1aDc: // global
           I64[Hp - 96] = sat_s17qc_info;
           P64[Hp - 80] = _s17pN::P64;
           I64[Hp - 72] = _s17pS::I64;
           I64[Hp - 64] = _s17pU::I64;
           I64[Hp - 56] = _s17pY::I64;
           I64[Hp - 48] = sat_s17q0_info;
           P64[Hp - 32] = _s17pN::P64;
           P64[Hp - 24] = _s17pT::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aDh: // global
           if (%MO_S_Le_W64(_s17pY::I64,
                            _s17pU::I64)) goto c1aDf; else goto u1aDu;
       c1aDf: // global
           I64[Hp - 96] = sat_s17qe_info;
           P64[Hp - 80] = _s17pN::P64;
           P64[Hp - 72] = _s17pT::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 96;
           P64[Hp - 48] = GHC.Types.[]_closure+1;
           _c1aDd::P64 = Hp - 62;
           Hp = Hp - 48;
           R1 = _c1aDd::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u1aDu: // global
           Sp = Sp + 40;
           call _c1aDs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1aA0_info" {
     block_c1aA0_info:
         const _c1aA0;
         const 580;
         const 30;
 },
 _c1aBy() //  [R1]
         { []
         }
     {offset
       c1aBy: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c1aDl; else goto c1aDk;
       c1aDl: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1aDk: // global
           _s17pN::P64 = P64[Sp + 16];
           _s17pS::I64 = I64[Sp + 32];
           _s17pT::P64 = P64[Sp + 24];
           _s17pU::I64 = I64[Sp + 8];
           _s17qh::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s17qh::I64,
                            _s17pS::I64)) goto c1aDo; else goto c1aDt;
       c1aDo: // global
           I64[Hp - 96] = sat_s17qv_info;
           P64[Hp - 80] = _s17pN::P64;
           I64[Hp - 72] = _s17pS::I64;
           I64[Hp - 64] = _s17pU::I64;
           I64[Hp - 56] = _s17qh::I64;
           I64[Hp - 48] = sat_s17qj_info;
           P64[Hp - 32] = _s17pN::P64;
           P64[Hp - 24] = _s17pT::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aDt: // global
           if (%MO_S_Ge_W64(_s17qh::I64,
                            _s17pU::I64)) goto c1aDr; else goto u1aDv;
       c1aDr: // global
           I64[Hp - 96] = sat_s17qx_info;
           P64[Hp - 80] = _s17pN::P64;
           P64[Hp - 72] = _s17pT::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 96;
           P64[Hp - 48] = GHC.Types.[]_closure+1;
           _c1aDp::P64 = Hp - 62;
           Hp = Hp - 48;
           R1 = _c1aDp::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u1aDv: // global
           Sp = Sp + 40;
           call _c1aDs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1aBy_info" {
     block_c1aBy_info:
         const _c1aBy;
         const 580;
         const 30;
 },
 _c1aDs() //  []
         { []
         }
     {offset
       c1aDs: // global
           Hp = Hp - 104;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.860273769 UTC

[section ""data" . GHC.Enum.$fEnumBool_$cenumFromThen_closure" {
     GHC.Enum.$fEnumBool_$cenumFromThen_closure:
         const GHC.Enum.$fEnumBool_$cenumFromThen_info;
         const 0;
 },
 sat_s17qQ_entry() //  [R1]
         { []
         }
     {offset
       c1aHj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aHk; else goto c1aHl;
       c1aHk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aHl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17qK_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17qQ_info" {
     sat_s17qQ_info:
         const sat_s17qQ_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+360;
 },
 sat_s17qO_entry() //  [R1]
         { []
         }
     {offset
       c1aHv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aHw; else goto c1aHx;
       c1aHw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aHx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17qN::I64 = I64[R1 + 16];
           if (_s17qN::I64 != 0) goto u1aHy; else goto c1aHt;
       u1aHy: // global
           if (_s17qN::I64 != 1) goto c1aHs; else goto c1aHu;
       c1aHs: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1aHu: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aHt: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17qO_info" {
     sat_s17qO_info:
         const sat_s17qO_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 sat_s17qS_entry() //  [R1]
         { []
         }
     {offset
       c1aHJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aHK; else goto c1aHL;
       c1aHK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aHL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17qR::I64 = I64[R1 + 16];
           if (_s17qR::I64 != 0) goto u1aHM; else goto c1aHH;
       u1aHM: // global
           if (_s17qR::I64 != 1) goto c1aHG; else goto c1aHI;
       c1aHG: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1aHI: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aHH: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17qS_info" {
     sat_s17qS_info:
         const sat_s17qS_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 go_dn_s17qK_entry() //  [R1, R2]
         { []
         }
     {offset
       c1aHQ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1aHU; else goto c1aHT;
       c1aHU: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1aHT: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c1aHO; else goto c1aHP;
       c1aHO: // global
           _s17qI::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17qQ_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17qI::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17qO_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aHP: // global
           I64[Hp - 80] = sat_s17qS_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1aHW::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1aHW::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17qK_info" {
     go_dn_s17qK_info:
         const go_dn_s17qK_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+360;
 },
 sat_s17qT_entry() //  [R1]
         { []
         }
     {offset
       c1aHX: // global
           _s17qT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1aHY; else goto c1aHZ;
       c1aHZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1aI1; else goto c1aI0;
       c1aI1: // global
           HpAlloc = 24;
           goto c1aHY;
       c1aHY: // global
           R1 = _s17qT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aI0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17qT::P64;
           _s17qB::I64 = I64[_s17qT::P64 + 16];
           _s17qI::I64 = _s17qB::I64 - I64[_s17qT::P64 + 24];
           I64[Hp - 16] = go_dn_s17qK_info;
           I64[Hp - 8] = _s17qI::I64;
           I64[Hp] = 0 - _s17qI::I64;
           R2 = _s17qB::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17qK_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17qT_info" {
     sat_s17qT_info:
         const sat_s17qT_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+360;
 },
 sat_s17qH_entry() //  [R1]
         { []
         }
     {offset
       c1aIb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aIc; else goto c1aId;
       c1aIc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aId: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17qG::I64 = I64[R1 + 16];
           if (_s17qG::I64 != 0) goto u1aIe; else goto c1aI9;
       u1aIe: // global
           if (_s17qG::I64 != 1) goto c1aI8; else goto c1aIa;
       c1aI8: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1aIa: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aI9: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17qH_info" {
     sat_s17qH_info:
         const sat_s17qH_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 sat_s17qW_entry() //  [R1]
         { []
         }
     {offset
       c1aIs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aIt; else goto c1aIu;
       c1aIt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aIu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17qV::I64 = I64[R1 + 16];
           if (_s17qV::I64 != 0) goto u1aIv; else goto c1aIq;
       u1aIv: // global
           if (_s17qV::I64 != 1) goto c1aIp; else goto c1aIr;
       c1aIp: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1aIr: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aIq: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17qW_info" {
     sat_s17qW_info:
         const sat_s17qW_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 sat_s17r8_entry() //  [R1]
         { []
         }
     {offset
       c1aIY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aIZ; else goto c1aJ0;
       c1aIZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aJ0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17r2_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17r8_info" {
     sat_s17r8_info:
         const sat_s17r8_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+360;
 },
 sat_s17r6_entry() //  [R1]
         { []
         }
     {offset
       c1aJa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aJb; else goto c1aJc;
       c1aJb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aJc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17r5::I64 = I64[R1 + 16];
           if (_s17r5::I64 != 0) goto u1aJd; else goto c1aJ8;
       u1aJd: // global
           if (_s17r5::I64 != 1) goto c1aJ7; else goto c1aJ9;
       c1aJ7: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1aJ9: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aJ8: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17r6_info" {
     sat_s17r6_info:
         const sat_s17r6_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 sat_s17ra_entry() //  [R1]
         { []
         }
     {offset
       c1aJo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aJp; else goto c1aJq;
       c1aJp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aJq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17r9::I64 = I64[R1 + 16];
           if (_s17r9::I64 != 0) goto u1aJr; else goto c1aJm;
       u1aJr: // global
           if (_s17r9::I64 != 1) goto c1aJl; else goto c1aJn;
       c1aJl: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1aJn: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aJm: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ra_info" {
     sat_s17ra_info:
         const sat_s17ra_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 go_up_s17r2_entry() //  [R1, R2]
         { []
         }
     {offset
       c1aJv: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1aJz; else goto c1aJy;
       c1aJz: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1aJy: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c1aJt; else goto c1aJu;
       c1aJt: // global
           _s17r0::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17r8_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17r0::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17r6_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aJu: // global
           I64[Hp - 80] = sat_s17ra_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1aJB::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1aJB::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17r2_info" {
     go_up_s17r2_info:
         const go_up_s17r2_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+360;
 },
 sat_s17rb_entry() //  [R1]
         { []
         }
     {offset
       c1aJC: // global
           _s17rb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1aJD; else goto c1aJE;
       c1aJE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1aJG; else goto c1aJF;
       c1aJG: // global
           HpAlloc = 24;
           goto c1aJD;
       c1aJD: // global
           R1 = _s17rb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aJF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17rb::P64;
           _s17qB::I64 = I64[_s17rb::P64 + 16];
           _s17r0::I64 = _s17qB::I64 - I64[_s17rb::P64 + 24];
           I64[Hp - 16] = go_up_s17r2_info;
           I64[Hp - 8] = _s17r0::I64;
           I64[Hp] = 1 - _s17r0::I64;
           R2 = _s17qB::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17r2_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17rb_info" {
     sat_s17rb_info:
         const sat_s17rb_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+360;
 },
 sat_s17qZ_entry() //  [R1]
         { []
         }
     {offset
       c1aJQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aJR; else goto c1aJS;
       c1aJR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aJS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17qY::I64 = I64[R1 + 16];
           if (_s17qY::I64 != 0) goto u1aJT; else goto c1aJO;
       u1aJT: // global
           if (_s17qY::I64 != 1) goto c1aJN; else goto c1aJP;
       c1aJN: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1aJP: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aJO: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17qZ_info" {
     sat_s17qZ_info:
         const sat_s17qZ_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 sat_s17re_entry() //  [R1]
         { []
         }
     {offset
       c1aK7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aK8; else goto c1aK9;
       c1aK8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aK9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17rd::I64 = I64[R1 + 16];
           if (_s17rd::I64 != 0) goto u1aKa; else goto c1aK5;
       u1aKa: // global
           if (_s17rd::I64 != 1) goto c1aK4; else goto c1aK6;
       c1aK4: // global
           R1 = GHC.Enum.$fEnumBool1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1aK6: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aK5: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17re_info" {
     sat_s17re_info:
         const sat_s17re_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+360;
 },
 GHC.Enum.$fEnumBool_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c1aKi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aKj; else goto c1aKk;
       c1aKj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumBool_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1aKk: // global
           I64[Sp - 16] = block_c1aKb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1aL6; else goto c1aKc;
       u1aL6: // global
           call _c1aKb(R1) args: 0, res: 0, upd: 0;
       c1aKc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumBool_$cenumFromThen_info" {
     GHC.Enum.$fEnumBool_$cenumFromThen_info:
         const GHC.Enum.$fEnumBool_$cenumFromThen_entry;
         const 0;
         const 2203318222862;
         const 8589934607;
         const S17Oj_srt+360;
 },
 _c1aKb() //  [R1]
         { []
         }
     {offset
       c1aKb: // global
           _s17qy::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c1aKf; else goto c1aKg;
       c1aKf: // global
           _s17qB::I64 = 0;
           goto s17qA;
       c1aKg: // global
           _s17qB::I64 = 1;
           goto s17qA;
       s17qA: // global
           I64[Sp] = block_c1aKl_info;
           R1 = _s17qy::P64;
           I64[Sp + 8] = _s17qB::I64;
           if (R1 & 7 != 0) goto u1aL5; else goto c1aKJ;
       u1aL5: // global
           call _c1aKl(R1) args: 0, res: 0, upd: 0;
       c1aKJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1aKb_info" {
     block_c1aKb_info:
         const _c1aKb;
         const 1;
         const 4294967326;
         const S17Oj_srt+360;
 },
 _c1aKl() //  [R1]
         { []
         }
     {offset
       c1aKl: // global
           if (R1 & 7 == 1) goto c1aKP; else goto c1aKT;
       c1aKP: // global
           I64[Sp] = 0;
           goto u1aL8;
       c1aKT: // global
           I64[Sp] = 1;
           goto u1aL8;
       u1aL8: // global
           call _c1aGN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1aKl_info" {
     block_c1aKl_info:
         const _c1aKl;
         const 65;
         const 4294967326;
         const S17Oj_srt+360;
 },
 _c1aGN() //  []
         { []
         }
     {offset
       c1aGN: // global
           Hp = Hp + 80;
           _s17qD::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c1aKp; else goto c1aKo;
       c1aKp: // global
           HpAlloc = 80;
           I64[Sp] = block_c1aGM_info;
           R1 = _s17qD::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1aKo: // global
           _s17qB::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s17qB::I64,
                            _s17qD::I64)) goto c1aKz; else goto c1aKI;
       c1aKz: // global
           if (%MO_S_Le_W64(0, _s17qB::I64)) goto c1aKs; else goto c1aKx;
       c1aKs: // global
           I64[Hp - 72] = sat_s17qT_info;
           I64[Hp - 56] = _s17qB::I64;
           I64[Hp - 48] = _s17qD::I64;
           I64[Hp - 40] = sat_s17qH_info;
           I64[Hp - 24] = _s17qD::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aKx: // global
           if (%MO_S_Gt_W64(0, _s17qD::I64)) goto c1aKG; else goto c1aKv;
       c1aKv: // global
           I64[Hp - 72] = sat_s17qW_info;
           I64[Hp - 56] = _s17qD::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1aKt::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1aKt::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aKI: // global
           if (%MO_S_Ge_W64(1, _s17qB::I64)) goto c1aKC; else goto c1aKH;
       c1aKC: // global
           I64[Hp - 72] = sat_s17rb_info;
           I64[Hp - 56] = _s17qB::I64;
           I64[Hp - 48] = _s17qD::I64;
           I64[Hp - 40] = sat_s17qZ_info;
           I64[Hp - 24] = _s17qD::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aKH: // global
           if (%MO_S_Lt_W64(1, _s17qD::I64)) goto c1aKG; else goto c1aKF;
       c1aKG: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aKF: // global
           I64[Hp - 72] = sat_s17re_info;
           I64[Hp - 56] = _s17qD::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1aKD::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1aKD::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1aGM() //  [R1]
         { []
         }
     {offset
       c1aGM: // global
           I64[Sp] = R1;
           call _c1aGN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1aGM_info" {
     block_c1aGM_info:
         const _c1aGM;
         const 65;
         const 4294967326;
         const S17Oj_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.898504183 UTC

[section ""data" . GHC.Enum.$fEnumBool_closure" {
     GHC.Enum.$fEnumBool_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumBool_$csucc_closure+1;
         const GHC.Enum.$fEnumBool_$cpred_closure+1;
         const GHC.Enum.$fEnumBool_$ctoEnum_closure+1;
         const GHC.Enum.$fEnumBool_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumBool_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumBool_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumBool_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumBool_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.912676948 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_$cenumFromThen_closure" {
     GHC.Enum.$fEnumOrdering_$cenumFromThen_closure:
         const GHC.Enum.$fEnumOrdering_$cenumFromThen_info;
         const 0;
 },
 sat_s17rz_entry() //  [R1]
         { []
         }
     {offset
       c1aOZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aP0; else goto c1aP1;
       c1aP0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aP1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17rt_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17rz_info" {
     sat_s17rz_info:
         const sat_s17rz_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+408;
 },
 sat_s17rx_entry() //  [R1]
         { []
         }
     {offset
       c1aPc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aPd; else goto c1aPe;
       c1aPd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aPe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17rw::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17rw::I64, 2)) goto u1aPf; else goto u1aPh;
       u1aPf: // global
           if (%MO_S_Lt_W64(_s17rw::I64, 1)) goto u1aPg; else goto c1aPa;
       u1aPg: // global
           if (%MO_S_Lt_W64(_s17rw::I64, 0)) goto c1aP8; else goto c1aP9;
       c1aP9: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aPa: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1aPh: // global
           if (%MO_S_Ge_W64(_s17rw::I64, 3)) goto c1aP8; else goto c1aPb;
       c1aP8: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1aPb: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17rx_info" {
     sat_s17rx_info:
         const sat_s17rx_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17rB_entry() //  [R1]
         { []
         }
     {offset
       c1aPt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aPu; else goto c1aPv;
       c1aPu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aPv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17rA::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17rA::I64, 2)) goto u1aPw; else goto u1aPy;
       u1aPw: // global
           if (%MO_S_Lt_W64(_s17rA::I64, 1)) goto u1aPx; else goto c1aPr;
       u1aPx: // global
           if (%MO_S_Lt_W64(_s17rA::I64, 0)) goto c1aPp; else goto c1aPq;
       c1aPq: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aPr: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1aPy: // global
           if (%MO_S_Ge_W64(_s17rA::I64, 3)) goto c1aPp; else goto c1aPs;
       c1aPp: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1aPs: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17rB_info" {
     sat_s17rB_info:
         const sat_s17rB_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 go_dn_s17rt_entry() //  [R1, R2]
         { []
         }
     {offset
       c1aPC: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1aPG; else goto c1aPF;
       c1aPG: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1aPF: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c1aPA; else goto c1aPB;
       c1aPA: // global
           _s17rr::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17rz_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17rr::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17rx_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aPB: // global
           I64[Hp - 80] = sat_s17rB_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1aPI::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1aPI::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17rt_info" {
     go_dn_s17rt_info:
         const go_dn_s17rt_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+408;
 },
 sat_s17rC_entry() //  [R1]
         { []
         }
     {offset
       c1aPJ: // global
           _s17rC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1aPK; else goto c1aPL;
       c1aPL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1aPN; else goto c1aPM;
       c1aPN: // global
           HpAlloc = 24;
           goto c1aPK;
       c1aPK: // global
           R1 = _s17rC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aPM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17rC::P64;
           _s17rk::I64 = I64[_s17rC::P64 + 16];
           _s17rr::I64 = _s17rk::I64 - I64[_s17rC::P64 + 24];
           I64[Hp - 16] = go_dn_s17rt_info;
           I64[Hp - 8] = _s17rr::I64;
           I64[Hp] = 0 - _s17rr::I64;
           R2 = _s17rk::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17rt_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17rC_info" {
     sat_s17rC_info:
         const sat_s17rC_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+408;
 },
 sat_s17rq_entry() //  [R1]
         { []
         }
     {offset
       c1aPY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aPZ; else goto c1aQ0;
       c1aPZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aQ0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17rp::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17rp::I64, 2)) goto u1aQ1; else goto u1aQ3;
       u1aQ1: // global
           if (%MO_S_Lt_W64(_s17rp::I64, 1)) goto u1aQ2; else goto c1aPW;
       u1aQ2: // global
           if (%MO_S_Lt_W64(_s17rp::I64, 0)) goto c1aPU; else goto c1aPV;
       c1aPV: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aPW: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1aQ3: // global
           if (%MO_S_Ge_W64(_s17rp::I64, 3)) goto c1aPU; else goto c1aPX;
       c1aPU: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1aPX: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17rq_info" {
     sat_s17rq_info:
         const sat_s17rq_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17rF_entry() //  [R1]
         { []
         }
     {offset
       c1aQi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aQj; else goto c1aQk;
       c1aQj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aQk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17rE::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17rE::I64, 2)) goto u1aQl; else goto u1aQn;
       u1aQl: // global
           if (%MO_S_Lt_W64(_s17rE::I64, 1)) goto u1aQm; else goto c1aQg;
       u1aQm: // global
           if (%MO_S_Lt_W64(_s17rE::I64, 0)) goto c1aQe; else goto c1aQf;
       c1aQf: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aQg: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1aQn: // global
           if (%MO_S_Ge_W64(_s17rE::I64, 3)) goto c1aQe; else goto c1aQh;
       c1aQe: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1aQh: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17rF_info" {
     sat_s17rF_info:
         const sat_s17rF_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17rR_entry() //  [R1]
         { []
         }
     {offset
       c1aQQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aQR; else goto c1aQS;
       c1aQR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aQS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17rL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17rR_info" {
     sat_s17rR_info:
         const sat_s17rR_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+408;
 },
 sat_s17rP_entry() //  [R1]
         { []
         }
     {offset
       c1aR3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aR4; else goto c1aR5;
       c1aR4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aR5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17rO::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17rO::I64, 2)) goto u1aR6; else goto u1aR8;
       u1aR6: // global
           if (%MO_S_Lt_W64(_s17rO::I64, 1)) goto u1aR7; else goto c1aR1;
       u1aR7: // global
           if (%MO_S_Lt_W64(_s17rO::I64, 0)) goto c1aQZ; else goto c1aR0;
       c1aR0: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aR1: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1aR8: // global
           if (%MO_S_Ge_W64(_s17rO::I64, 3)) goto c1aQZ; else goto c1aR2;
       c1aQZ: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1aR2: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17rP_info" {
     sat_s17rP_info:
         const sat_s17rP_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17rT_entry() //  [R1]
         { []
         }
     {offset
       c1aRk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aRl; else goto c1aRm;
       c1aRl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aRm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17rS::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17rS::I64, 2)) goto u1aRn; else goto u1aRp;
       u1aRn: // global
           if (%MO_S_Lt_W64(_s17rS::I64, 1)) goto u1aRo; else goto c1aRi;
       u1aRo: // global
           if (%MO_S_Lt_W64(_s17rS::I64, 0)) goto c1aRg; else goto c1aRh;
       c1aRh: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aRi: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1aRp: // global
           if (%MO_S_Ge_W64(_s17rS::I64, 3)) goto c1aRg; else goto c1aRj;
       c1aRg: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1aRj: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17rT_info" {
     sat_s17rT_info:
         const sat_s17rT_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 go_up_s17rL_entry() //  [R1, R2]
         { []
         }
     {offset
       c1aRt: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1aRx; else goto c1aRw;
       c1aRx: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1aRw: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c1aRr; else goto c1aRs;
       c1aRr: // global
           _s17rJ::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17rR_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17rJ::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17rP_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aRs: // global
           I64[Hp - 80] = sat_s17rT_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1aRz::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1aRz::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17rL_info" {
     go_up_s17rL_info:
         const go_up_s17rL_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+408;
 },
 sat_s17rU_entry() //  [R1]
         { []
         }
     {offset
       c1aRA: // global
           _s17rU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1aRB; else goto c1aRC;
       c1aRC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1aRE; else goto c1aRD;
       c1aRE: // global
           HpAlloc = 24;
           goto c1aRB;
       c1aRB: // global
           R1 = _s17rU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aRD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17rU::P64;
           _s17rk::I64 = I64[_s17rU::P64 + 16];
           _s17rJ::I64 = _s17rk::I64 - I64[_s17rU::P64 + 24];
           I64[Hp - 16] = go_up_s17rL_info;
           I64[Hp - 8] = _s17rJ::I64;
           I64[Hp] = 2 - _s17rJ::I64;
           R2 = _s17rk::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17rL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17rU_info" {
     sat_s17rU_info:
         const sat_s17rU_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+408;
 },
 sat_s17rI_entry() //  [R1]
         { []
         }
     {offset
       c1aRP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aRQ; else goto c1aRR;
       c1aRQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aRR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17rH::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17rH::I64, 2)) goto u1aRS; else goto u1aRU;
       u1aRS: // global
           if (%MO_S_Lt_W64(_s17rH::I64, 1)) goto u1aRT; else goto c1aRN;
       u1aRT: // global
           if (%MO_S_Lt_W64(_s17rH::I64, 0)) goto c1aRL; else goto c1aRM;
       c1aRM: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aRN: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1aRU: // global
           if (%MO_S_Ge_W64(_s17rH::I64, 3)) goto c1aRL; else goto c1aRO;
       c1aRL: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1aRO: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17rI_info" {
     sat_s17rI_info:
         const sat_s17rI_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 sat_s17rX_entry() //  [R1]
         { []
         }
     {offset
       c1aS9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aSa; else goto c1aSb;
       c1aSa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aSb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17rW::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17rW::I64, 2)) goto u1aSc; else goto u1aSe;
       u1aSc: // global
           if (%MO_S_Lt_W64(_s17rW::I64, 1)) goto u1aSd; else goto c1aS7;
       u1aSd: // global
           if (%MO_S_Lt_W64(_s17rW::I64, 0)) goto c1aS5; else goto c1aS6;
       c1aS6: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aS7: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u1aSe: // global
           if (%MO_S_Ge_W64(_s17rW::I64, 3)) goto c1aS5; else goto c1aS8;
       c1aS5: // global
           R1 = GHC.Enum.$fEnumOrdering5_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c1aS8: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17rX_info" {
     sat_s17rX_info:
         const sat_s17rX_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+408;
 },
 GHC.Enum.$fEnumOrdering_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c1aSn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aSo; else goto c1aSp;
       c1aSo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumOrdering_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1aSp: // global
           I64[Sp - 16] = block_c1aSf_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1aTl; else goto c1aSg;
       u1aTl: // global
           call _c1aSf(R1) args: 0, res: 0, upd: 0;
       c1aSg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumOrdering_$cenumFromThen_info" {
     GHC.Enum.$fEnumOrdering_$cenumFromThen_info:
         const GHC.Enum.$fEnumOrdering_$cenumFromThen_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const S17Oj_srt+408;
 },
 _c1aSf() //  [R1]
         { []
         }
     {offset
       c1aSf: // global
           _s17rh::P64 = P64[Sp + 8];
           _c1aSm::P64 = R1 & 7;
           if (_c1aSm::P64 < 3) goto u1aTd; else goto c1aSl;
       u1aTd: // global
           if (_c1aSm::P64 < 2) goto c1aSj; else goto c1aSk;
       c1aSj: // global
           _s17rk::I64 = 0;
           goto s17rj;
       c1aSk: // global
           _s17rk::I64 = 1;
           goto s17rj;
       c1aSl: // global
           _s17rk::I64 = 2;
           goto s17rj;
       s17rj: // global
           I64[Sp] = block_c1aSq_info;
           R1 = _s17rh::P64;
           I64[Sp + 8] = _s17rk::I64;
           if (R1 & 7 != 0) goto u1aTk; else goto c1aSO;
       u1aTk: // global
           call _c1aSq(R1) args: 0, res: 0, upd: 0;
       c1aSO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1aSf_info" {
     block_c1aSf_info:
         const _c1aSf;
         const 1;
         const 4294967326;
         const S17Oj_srt+408;
 },
 _c1aSq() //  [R1]
         { []
         }
     {offset
       c1aSq: // global
           _c1aTc::P64 = R1 & 7;
           if (_c1aTc::P64 < 3) goto u1aTe; else goto c1aT2;
       u1aTe: // global
           if (_c1aTc::P64 < 2) goto c1aSU; else goto c1aSY;
       c1aSU: // global
           I64[Sp] = 0;
           goto u1aTo;
       c1aSY: // global
           I64[Sp] = 1;
           goto u1aTo;
       c1aT2: // global
           I64[Sp] = 2;
           goto u1aTo;
       u1aTo: // global
           call _c1aOt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1aSq_info" {
     block_c1aSq_info:
         const _c1aSq;
         const 65;
         const 4294967326;
         const S17Oj_srt+408;
 },
 _c1aOt() //  []
         { []
         }
     {offset
       c1aOt: // global
           Hp = Hp + 80;
           _s17rm::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c1aSu; else goto c1aSt;
       c1aSu: // global
           HpAlloc = 80;
           I64[Sp] = block_c1aOs_info;
           R1 = _s17rm::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1aSt: // global
           _s17rk::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s17rk::I64,
                            _s17rm::I64)) goto c1aSE; else goto c1aSN;
       c1aSE: // global
           if (%MO_S_Le_W64(0, _s17rk::I64)) goto c1aSx; else goto c1aSC;
       c1aSx: // global
           I64[Hp - 72] = sat_s17rC_info;
           I64[Hp - 56] = _s17rk::I64;
           I64[Hp - 48] = _s17rm::I64;
           I64[Hp - 40] = sat_s17rq_info;
           I64[Hp - 24] = _s17rm::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aSC: // global
           if (%MO_S_Gt_W64(0, _s17rm::I64)) goto c1aSL; else goto c1aSA;
       c1aSA: // global
           I64[Hp - 72] = sat_s17rF_info;
           I64[Hp - 56] = _s17rm::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1aSy::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1aSy::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aSN: // global
           if (%MO_S_Ge_W64(2, _s17rk::I64)) goto c1aSH; else goto c1aSM;
       c1aSH: // global
           I64[Hp - 72] = sat_s17rU_info;
           I64[Hp - 56] = _s17rk::I64;
           I64[Hp - 48] = _s17rm::I64;
           I64[Hp - 40] = sat_s17rI_info;
           I64[Hp - 24] = _s17rm::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aSM: // global
           if (%MO_S_Lt_W64(2, _s17rm::I64)) goto c1aSL; else goto c1aSK;
       c1aSL: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1aSK: // global
           I64[Hp - 72] = sat_s17rX_info;
           I64[Hp - 56] = _s17rm::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1aSI::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1aSI::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1aOs() //  [R1]
         { []
         }
     {offset
       c1aOs: // global
           I64[Sp] = R1;
           call _c1aOt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1aOs_info" {
     block_c1aOs_info:
         const _c1aOs;
         const 65;
         const 4294967326;
         const S17Oj_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.953600255 UTC

[section ""data" . GHC.Enum.$fEnumOrdering_closure" {
     GHC.Enum.$fEnumOrdering_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumOrdering_$csucc_closure+1;
         const GHC.Enum.$fEnumOrdering_$cpred_closure+1;
         const GHC.Enum.$fEnumOrdering_$ctoEnum_closure+1;
         const GHC.Enum.$fEnumOrdering_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumOrdering_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumOrdering_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumOrdering_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumOrdering_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.959006469 UTC

[section ""data" . GHC.Enum.boundedEnumFrom_closure" {
     GHC.Enum.boundedEnumFrom_closure:
         const GHC.Enum.boundedEnumFrom_info;
 },
 sat_s17s5_entry() //  [R1]
         { []
         }
     {offset
       c1aWX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aWY; else goto c1aWZ;
       c1aWY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aWZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17s5_info" {
     sat_s17s5_info:
         const sat_s17s5_entry;
         const 1;
         const 16;
 },
 sat_s17sf_entry() //  [R1]
         { []
         }
     {offset
       c1aXl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aXm; else goto c1aXn;
       c1aXm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aXn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17sa::I64 = I64[R1 + 32];
           if (_s17sa::I64 == I64[R1 + 24]) goto c1aXk; else goto c1aXj;
       c1aXk: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1aXj: // global
           R2 = _s17sa::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s17s9_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17sf_info" {
     sat_s17sf_info:
         const sat_s17sf_entry;
         const 8589934593;
         const 15;
 },
 sat_s17sc_entry() //  [R1]
         { []
         }
     {offset
       c1aXv: // global
           _s17sc::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1aXw; else goto c1aXx;
       c1aXx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1aXz; else goto c1aXy;
       c1aXz: // global
           HpAlloc = 16;
           goto c1aXw;
       c1aXw: // global
           R1 = _s17sc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aXy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17sc::P64;
           _s17s0::P64 = P64[_s17sc::P64 + 16];
           _s17sa::I64 = I64[_s17sc::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s17sa::I64;
           R2 = _s17s0::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17sc_info" {
     sat_s17sc_info:
         const sat_s17sc_entry;
         const 4294967297;
         const 19;
 },
 go_s17s9_entry() //  [R1, R2]
         { []
         }
     {offset
       c1aXB: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1aXF; else goto c1aXE;
       c1aXF: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1aXE: // global
           _s17s0::P64 = P64[R1 + 7];
           _s17s7::I64 = I64[R1 + 15];
           I64[Hp - 88] = sat_s17sf_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = _s17s7::I64;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s17sc_info;
           P64[Hp - 32] = _s17s0::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s17s9_info" {
     go_s17s9_info:
         const go_s17s9_entry;
         const 4294967297;
         const 12;
         const 4294967300;
 },
 GHC.Enum.boundedEnumFrom_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1aXG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1aXH; else goto c1aXI;
       c1aXH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.boundedEnumFrom_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1aXI: // global
           I64[Sp - 24] = block_c1aWP_info;
           _s17s0::P64 = R2;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R4;
           P64[Sp - 16] = _s17s0::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.boundedEnumFrom_info" {
     GHC.Enum.boundedEnumFrom_info:
         const GHC.Enum.boundedEnumFrom_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1aWP() //  [R1]
         { []
         }
     {offset
       c1aWP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1aXL; else goto c1aXK;
       c1aXL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1aXK: // global
           _s17s4::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s17s5_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp] = block_c1aX0_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           I64[Sp + 16] = _s17s4::I64;
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1aWP_info" {
     block_c1aWP_info:
         const _c1aWP;
         const 2;
         const 30;
 },
 _c1aX0() //  [R1]
         { []
         }
     {offset
       c1aX0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1aXO; else goto c1aXN;
       c1aXO: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1aXN: // global
           _s17s4::I64 = I64[Sp + 16];
           _s17s7::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_s17s4::I64,
                            _s17s7::I64)) goto c1aXQ; else goto c1aXR;
       c1aXQ: // global
           I64[Hp - 16] = go_s17s9_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = _s17s7::I64;
           R2 = _s17s4::I64;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call go_s17s9_entry(R2, R1) args: 8, res: 0, upd: 8;
       c1aXR: // global
           Hp = Hp - 24;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1aX0_info" {
     block_c1aX0_info:
         const _c1aX0;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.975199776 UTC

[section ""data" . GHC.Enum.$dmenumFrom_closure" {
     GHC.Enum.$dmenumFrom_closure:
         const GHC.Enum.$dmenumFrom_info;
 },
 sat_s17sq_entry() //  [R1]
         { []
         }
     {offset
       c1aZ2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1aZ3; else goto c1aZ4;
       c1aZ3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aZ4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17so::I64 = I64[R1 + 24];
           if (_s17so::I64 != 9223372036854775807) goto c1aZ0; else goto c1aZ1;
       c1aZ0: // global
           R2 = _s17so::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s17sk_entry(R2, R1) args: 24, res: 0, upd: 24;
       c1aZ1: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17sq_info" {
     sat_s17sq_info:
         const sat_s17sq_entry;
         const 4294967297;
         const 19;
 },
 sat_s17sn_entry() //  [R1]
         { []
         }
     {offset
       c1aZc: // global
           _s17sn::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1aZd; else goto c1aZe;
       c1aZe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1aZg; else goto c1aZf;
       c1aZg: // global
           HpAlloc = 16;
           goto c1aZd;
       c1aZd: // global
           R1 = _s17sn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1aZf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17sn::P64;
           _s17sg::P64 = P64[_s17sn::P64 + 16];
           _s17sl::I64 = I64[_s17sn::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s17sl::I64;
           R2 = _s17sg::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17sn_info" {
     sat_s17sn_info:
         const sat_s17sn_entry;
         const 4294967297;
         const 19;
 },
 go_s17sk_entry() //  [R1, R2]
         { []
         }
     {offset
       c1aZi: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1aZm; else goto c1aZl;
       c1aZm: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1aZl: // global
           _s17sg::P64 = P64[R1 + 7];
           I64[Hp - 80] = sat_s17sq_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s17sn_info;
           P64[Hp - 32] = _s17sg::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s17sk_info" {
     go_s17sk_info:
         const go_s17sk_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 GHC.Enum.$dmenumFrom_entry() //  [R2, R3]
         { []
         }
     {offset
       c1aZn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1aZo; else goto c1aZp;
       c1aZo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$dmenumFrom_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1aZp: // global
           I64[Sp - 16] = block_c1aYL_info;
           _s17sg::P64 = R2;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = R3;
           P64[Sp - 8] = _s17sg::P64;
           Sp = Sp - 32;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$dmenumFrom_info" {
     GHC.Enum.$dmenumFrom_info:
         const GHC.Enum.$dmenumFrom_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1aYL() //  [R1]
         { []
         }
     {offset
       c1aYL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1aZs; else goto c1aZr;
       c1aZs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1aZr: // global
           _s17sj::I64 = I64[R1 + 7];
           I64[Hp - 8] = go_s17sk_info;
           P64[Hp] = P64[Sp + 8];
           R2 = _s17sj::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call go_s17sk_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1aYL_info" {
     block_c1aYL_info:
         const _c1aYL;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:58.987906926 UTC

[section ""data" . GHC.Enum.$dmenumFromThen_closure" {
     GHC.Enum.$dmenumFromThen_closure:
         const GHC.Enum.$dmenumFromThen_info;
 },
 sat_s17sy_entry() //  [R1]
         { []
         }
     {offset
       c1b0o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1b0p; else goto c1b0q;
       c1b0p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1b0q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17sy_info" {
     sat_s17sy_info:
         const sat_s17sy_entry;
         const 1;
         const 16;
 },
 GHC.Enum.$dmenumFromThen_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1b0r: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1b0s; else goto c1b0t;
       c1b0s: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$dmenumFromThen_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1b0t: // global
           I64[Sp - 24] = block_c1b08_info;
           _s17sr::P64 = R2;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = _s17sr::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$dmenumFromThen_info" {
     GHC.Enum.$dmenumFromThen_info:
         const GHC.Enum.$dmenumFromThen_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1b08() //  [R1]
         { []
         }
     {offset
       c1b08: // global
           I64[Sp] = block_c1b0c_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           I64[Sp + 16] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1b08_info" {
     block_c1b08_info:
         const _c1b08;
         const 2;
         const 30;
 },
 _c1b0c() //  [R1]
         { []
         }
     {offset
       c1b0c: // global
           I64[Sp] = block_c1b0g_info;
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 16];
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1b0c_info" {
     block_c1b0c_info:
         const _c1b0c;
         const 130;
         const 30;
 },
 _c1b0g() //  [R1]
         { []
         }
     {offset
       c1b0g: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1b0y; else goto c1b0x;
       c1b0y: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1b0x: // global
           I64[Hp - 16] = sat_s17sy_info;
           P64[Hp] = P64[Sp + 8];
           R3 = R1;
           R2 = Hp - 16;
           Sp = Sp + 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1b0g_info" {
     block_c1b0g_info:
         const _c1b0g;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.000393372 UTC

[section ""data" . GHC.Enum.$dmenumFromTo_closure" {
     GHC.Enum.$dmenumFromTo_closure:
         const GHC.Enum.$dmenumFromTo_info;
 },
 sat_s17sO_entry() //  [R1]
         { []
         }
     {offset
       c1b1u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1b1v; else goto c1b1w;
       c1b1v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1b1w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17sJ::I64 = I64[R1 + 32];
           if (_s17sJ::I64 == I64[R1 + 24]) goto c1b1t; else goto c1b1s;
       c1b1t: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1b1s: // global
           R2 = _s17sJ::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s17sI_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17sO_info" {
     sat_s17sO_info:
         const sat_s17sO_entry;
         const 8589934593;
         const 15;
 },
 sat_s17sL_entry() //  [R1]
         { []
         }
     {offset
       c1b1E: // global
           _s17sL::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1b1F; else goto c1b1G;
       c1b1G: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1b1I; else goto c1b1H;
       c1b1I: // global
           HpAlloc = 16;
           goto c1b1F;
       c1b1F: // global
           R1 = _s17sL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1b1H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17sL::P64;
           _s17sA::P64 = P64[_s17sL::P64 + 16];
           _s17sJ::I64 = I64[_s17sL::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s17sJ::I64;
           R2 = _s17sA::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17sL_info" {
     sat_s17sL_info:
         const sat_s17sL_entry;
         const 4294967297;
         const 19;
 },
 go_s17sI_entry() //  [R1, R2]
         { []
         }
     {offset
       c1b1K: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1b1O; else goto c1b1N;
       c1b1O: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1b1N: // global
           _s17sA::P64 = P64[R1 + 7];
           _s17sG::I64 = I64[R1 + 15];
           I64[Hp - 88] = sat_s17sO_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = _s17sG::I64;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s17sL_info;
           P64[Hp - 32] = _s17sA::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s17sI_info" {
     go_s17sI_info:
         const go_s17sI_entry;
         const 4294967297;
         const 12;
         const 4294967300;
 },
 GHC.Enum.$dmenumFromTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1b1P: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1b1Q; else goto c1b1R;
       c1b1Q: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$dmenumFromTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1b1R: // global
           I64[Sp - 24] = block_c1b15_info;
           _s17sA::P64 = R2;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = _s17sA::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$dmenumFromTo_info" {
     GHC.Enum.$dmenumFromTo_info:
         const GHC.Enum.$dmenumFromTo_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1b15() //  [R1]
         { []
         }
     {offset
       c1b15: // global
           I64[Sp] = block_c1b19_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           I64[Sp + 16] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1b15_info" {
     block_c1b15_info:
         const _c1b15;
         const 2;
         const 30;
 },
 _c1b19() //  [R1]
         { []
         }
     {offset
       c1b19: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1b1V; else goto c1b1U;
       c1b1V: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1b1U: // global
           _s17sE::I64 = I64[Sp + 16];
           _s17sG::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_s17sE::I64,
                            _s17sG::I64)) goto c1b1X; else goto c1b1Y;
       c1b1X: // global
           I64[Hp - 16] = go_s17sI_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = _s17sG::I64;
           R2 = _s17sE::I64;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call go_s17sI_entry(R2, R1) args: 8, res: 0, upd: 8;
       c1b1Y: // global
           Hp = Hp - 24;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1b19_info" {
     block_c1b19_info:
         const _c1b19;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.022614654 UTC

[section ""data" . GHC.Enum.$dmenumFromThenTo_closure" {
     GHC.Enum.$dmenumFromThenTo_closure:
         const GHC.Enum.$dmenumFromThenTo_info;
 },
 sat_s17ta_entry() //  [R1]
         { []
         }
     {offset
       c1b3s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1b3t; else goto c1b3u;
       c1b3t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1b3u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17t4_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ta_info" {
     sat_s17ta_info:
         const sat_s17ta_entry;
         const 8589934593;
         const 15;
 },
 sat_s17t8_entry() //  [R1]
         { []
         }
     {offset
       c1b3A: // global
           _s17t8::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1b3B; else goto c1b3C;
       c1b3C: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1b3E; else goto c1b3D;
       c1b3E: // global
           HpAlloc = 16;
           goto c1b3B;
       c1b3B: // global
           R1 = _s17t8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1b3D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17t8::P64;
           _s17sP::P64 = P64[_s17t8::P64 + 16];
           _s17t5::I64 = I64[_s17t8::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s17t5::I64;
           R2 = _s17sP::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17t8_info" {
     sat_s17t8_info:
         const sat_s17t8_entry;
         const 4294967297;
         const 19;
 },
 sat_s17tc_entry() //  [R1]
         { []
         }
     {offset
       c1b3L: // global
           _s17tc::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1b3M; else goto c1b3N;
       c1b3N: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1b3P; else goto c1b3O;
       c1b3P: // global
           HpAlloc = 16;
           goto c1b3M;
       c1b3M: // global
           R1 = _s17tc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1b3O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17tc::P64;
           _s17sP::P64 = P64[_s17tc::P64 + 16];
           _s17t5::I64 = I64[_s17tc::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s17t5::I64;
           R2 = _s17sP::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17tc_info" {
     sat_s17tc_info:
         const sat_s17tc_entry;
         const 4294967297;
         const 19;
 },
 go_dn_s17t4_entry() //  [R1, R2]
         { []
         }
     {offset
       c1b3T: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1b3X; else goto c1b3W;
       c1b3X: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1b3W: // global
           _s17sP::P64 = P64[R1 + 7];
           if (%MO_S_Ge_W64(R2, I64[R1 + 23])) goto c1b3R; else goto c1b3S;
       c1b3R: // global
           _s17t2::I64 = I64[R1 + 15];
           I64[Hp - 88] = sat_s17ta_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = _s17t2::I64;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s17t8_info;
           P64[Hp - 32] = _s17sP::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1b3S: // global
           I64[Hp - 88] = sat_s17tc_info;
           P64[Hp - 72] = _s17sP::P64;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 88;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1b3Z::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1b3Z::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17t4_info" {
     go_dn_s17t4_info:
         const go_dn_s17t4_entry;
         const 8589934593;
         const 8;
         const 4294967300;
 },
 sat_s17td_entry() //  [R1]
         { []
         }
     {offset
       c1b40: // global
           _s17td::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1b41; else goto c1b42;
       c1b42: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1b44; else goto c1b43;
       c1b44: // global
           HpAlloc = 32;
           goto c1b41;
       c1b41: // global
           R1 = _s17td::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1b43: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17td::P64;
           _s17sP::P64 = P64[_s17td::P64 + 16];
           _s17sW::I64 = I64[_s17td::P64 + 32];
           _s17t2::I64 = _s17sW::I64 - I64[_s17td::P64 + 24];
           _s17t3::I64 = I64[_s17td::P64 + 40] - _s17t2::I64;
           I64[Hp - 24] = go_dn_s17t4_info;
           P64[Hp - 16] = _s17sP::P64;
           I64[Hp - 8] = _s17t2::I64;
           I64[Hp] = _s17t3::I64;
           R2 = _s17sW::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call go_dn_s17t4_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17td_info" {
     sat_s17td_info:
         const sat_s17td_entry;
         const 12884901889;
         const 15;
 },
 sat_s17t1_entry() //  [R1]
         { []
         }
     {offset
       c1b49: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1b4a; else goto c1b4b;
       c1b4a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1b4b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17t1_info" {
     sat_s17t1_info:
         const sat_s17t1_entry;
         const 2;
         const 18;
 },
 sat_s17tf_entry() //  [R1]
         { []
         }
     {offset
       c1b4k: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1b4l; else goto c1b4m;
       c1b4l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1b4m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17tf_info" {
     sat_s17tf_info:
         const sat_s17tf_entry;
         const 2;
         const 18;
 },
 sat_s17tq_entry() //  [R1]
         { []
         }
     {offset
       c1b4P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1b4Q; else goto c1b4R;
       c1b4Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1b4R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17tk_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17tq_info" {
     sat_s17tq_info:
         const sat_s17tq_entry;
         const 8589934593;
         const 15;
 },
 sat_s17to_entry() //  [R1]
         { []
         }
     {offset
       c1b4X: // global
           _s17to::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1b4Y; else goto c1b4Z;
       c1b4Z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1b51; else goto c1b50;
       c1b51: // global
           HpAlloc = 16;
           goto c1b4Y;
       c1b4Y: // global
           R1 = _s17to::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1b50: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17to::P64;
           _s17sP::P64 = P64[_s17to::P64 + 16];
           _s17tl::I64 = I64[_s17to::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s17tl::I64;
           R2 = _s17sP::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17to_info" {
     sat_s17to_info:
         const sat_s17to_entry;
         const 4294967297;
         const 19;
 },
 sat_s17ts_entry() //  [R1]
         { []
         }
     {offset
       c1b58: // global
           _s17ts::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1b59; else goto c1b5a;
       c1b5a: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1b5c; else goto c1b5b;
       c1b5c: // global
           HpAlloc = 16;
           goto c1b59;
       c1b59: // global
           R1 = _s17ts::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1b5b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17ts::P64;
           _s17sP::P64 = P64[_s17ts::P64 + 16];
           _s17tl::I64 = I64[_s17ts::P64 + 24];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s17tl::I64;
           R2 = _s17sP::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17ts_info" {
     sat_s17ts_info:
         const sat_s17ts_entry;
         const 4294967297;
         const 19;
 },
 go_up_s17tk_entry() //  [R1, R2]
         { []
         }
     {offset
       c1b5g: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1b5k; else goto c1b5j;
       c1b5k: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1b5j: // global
           _s17sP::P64 = P64[R1 + 7];
           if (%MO_S_Le_W64(R2, I64[R1 + 23])) goto c1b5e; else goto c1b5f;
       c1b5e: // global
           _s17ti::I64 = I64[R1 + 15];
           I64[Hp - 88] = sat_s17tq_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = _s17ti::I64;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s17to_info;
           P64[Hp - 32] = _s17sP::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1b5f: // global
           I64[Hp - 88] = sat_s17ts_info;
           P64[Hp - 72] = _s17sP::P64;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 88;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1b5m::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1b5m::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17tk_info" {
     go_up_s17tk_info:
         const go_up_s17tk_entry;
         const 8589934593;
         const 8;
         const 4294967300;
 },
 sat_s17tt_entry() //  [R1]
         { []
         }
     {offset
       c1b5n: // global
           _s17tt::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1b5o; else goto c1b5p;
       c1b5p: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1b5r; else goto c1b5q;
       c1b5r: // global
           HpAlloc = 32;
           goto c1b5o;
       c1b5o: // global
           R1 = _s17tt::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1b5q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17tt::P64;
           _s17sP::P64 = P64[_s17tt::P64 + 16];
           _s17sW::I64 = I64[_s17tt::P64 + 32];
           _s17ti::I64 = _s17sW::I64 - I64[_s17tt::P64 + 24];
           _s17tj::I64 = I64[_s17tt::P64 + 40] - _s17ti::I64;
           I64[Hp - 24] = go_up_s17tk_info;
           P64[Hp - 16] = _s17sP::P64;
           I64[Hp - 8] = _s17ti::I64;
           I64[Hp] = _s17tj::I64;
           R2 = _s17sW::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call go_up_s17tk_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17tt_info" {
     sat_s17tt_info:
         const sat_s17tt_entry;
         const 12884901889;
         const 15;
 },
 sat_s17th_entry() //  [R1]
         { []
         }
     {offset
       c1b5w: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1b5x; else goto c1b5y;
       c1b5x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1b5y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17th_info" {
     sat_s17th_info:
         const sat_s17th_entry;
         const 2;
         const 18;
 },
 sat_s17tv_entry() //  [R1]
         { []
         }
     {offset
       c1b5H: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1b5I; else goto c1b5J;
       c1b5I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1b5J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Enum.toEnum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17tv_info" {
     sat_s17tv_info:
         const sat_s17tv_entry;
         const 2;
         const 18;
 },
 GHC.Enum.$dmenumFromThenTo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1b5K: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c1b5L; else goto c1b5M;
       c1b5L: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$dmenumFromThenTo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1b5M: // global
           I64[Sp - 32] = block_c1b2M_info;
           _s17sP::P64 = R2;
           R2 = R2;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = R3;
           P64[Sp - 24] = _s17sP::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 48;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$dmenumFromThenTo_info" {
     GHC.Enum.$dmenumFromThenTo_info:
         const GHC.Enum.$dmenumFromThenTo_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c1b2M() //  [R1]
         { []
         }
     {offset
       c1b2M: // global
           I64[Sp - 8] = block_c1b2Q_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp] = I64[R1 + 7];
           P64[Sp + 16] = R1;
           Sp = Sp - 24;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1b2M_info" {
     block_c1b2M_info:
         const _c1b2M;
         const 3;
         const 30;
 },
 _c1b2Q() //  [R1]
         { []
         }
     {offset
       c1b2Q: // global
           I64[Sp] = block_c1b2U_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 32];
           I64[Sp + 32] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1b2Q_info" {
     block_c1b2Q_info:
         const _c1b2Q;
         const 68;
         const 30;
 },
 _c1b2U() //  [R1]
         { []
         }
     {offset
       c1b2U: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c1b5R; else goto c1b5Q;
       c1b5R: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1b5Q: // global
           _s17sP::P64 = P64[Sp + 16];
           _s17sT::P64 = P64[Sp + 24];
           _s17sU::I64 = I64[Sp + 8];
           _s17sW::I64 = I64[Sp + 32];
           _s17sY::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s17sW::I64,
                            _s17sU::I64)) goto c1b61; else goto c1b6a;
       c1b61: // global
           if (%MO_S_Le_W64(_s17sY::I64,
                            _s17sW::I64)) goto c1b5U; else goto c1b5Z;
       c1b5U: // global
           I64[Hp - 96] = sat_s17td_info;
           P64[Hp - 80] = _s17sP::P64;
           I64[Hp - 72] = _s17sU::I64;
           I64[Hp - 64] = _s17sW::I64;
           I64[Hp - 56] = _s17sY::I64;
           I64[Hp - 48] = sat_s17t1_info;
           P64[Hp - 32] = _s17sP::P64;
           P64[Hp - 24] = _s17sT::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1b5Z: // global
           if (%MO_S_Gt_W64(_s17sY::I64,
                            _s17sU::I64)) goto c1b68; else goto c1b5X;
       c1b5X: // global
           I64[Hp - 96] = sat_s17tf_info;
           P64[Hp - 80] = _s17sP::P64;
           P64[Hp - 72] = _s17sT::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 96;
           P64[Hp - 48] = GHC.Types.[]_closure+1;
           _c1b5V::P64 = Hp - 62;
           Hp = Hp - 48;
           R1 = _c1b5V::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1b6a: // global
           if (%MO_S_Ge_W64(_s17sY::I64,
                            _s17sW::I64)) goto c1b64; else goto c1b69;
       c1b64: // global
           I64[Hp - 96] = sat_s17tt_info;
           P64[Hp - 80] = _s17sP::P64;
           I64[Hp - 72] = _s17sU::I64;
           I64[Hp - 64] = _s17sW::I64;
           I64[Hp - 56] = _s17sY::I64;
           I64[Hp - 48] = sat_s17th_info;
           P64[Hp - 32] = _s17sP::P64;
           P64[Hp - 24] = _s17sT::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1b69: // global
           if (%MO_S_Lt_W64(_s17sY::I64,
                            _s17sU::I64)) goto c1b68; else goto c1b67;
       c1b68: // global
           Hp = Hp - 104;
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1b67: // global
           I64[Hp - 96] = sat_s17tv_info;
           P64[Hp - 80] = _s17sP::P64;
           P64[Hp - 72] = _s17sT::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 96;
           P64[Hp - 48] = GHC.Types.[]_closure+1;
           _c1b65::P64 = Hp - 62;
           Hp = Hp - 48;
           R1 = _c1b65::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1b2U_info" {
     block_c1b2U_info:
         const _c1b2U;
         const 580;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.057987246 UTC

[section ""cstring" . lvl31_rURb_bytes" {
     lvl31_rURb_bytes:
         I8[] [87,111,114,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.060319738 UTC

[section ""data" . lvl32_rURc_closure" {
     lvl32_rURc_closure:
         const lvl32_rURc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl32_rURc_entry() //  [R1]
         { []
         }
     {offset
       c1b92: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1b93; else goto c1b94;
       c1b93: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1b94: // global
           (_c1b8Z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1b8Z::I64 == 0) goto c1b91; else goto c1b90;
       c1b91: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1b90: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1b8Z::I64;
           R2 = lvl31_rURb_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl32_rURc_info" {
     lvl32_rURc_info:
         const lvl32_rURc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.064862225 UTC

[section ""data" . GHC.Enum.$fEnumWord1_closure" {
     GHC.Enum.$fEnumWord1_closure:
         const GHC.Enum.$fEnumWord1_info;
         const 0;
 },
 GHC.Enum.$fEnumWord1_entry() //  [R2]
         { []
         }
     {offset
       c1b9h: // global
           R4 = R2;
           R3 = lvl32_rURc_closure;
           R2 = GHC.Show.$fShowWord_closure;
           call GHC.Enum.fromEnumError_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord1_info" {
     GHC.Enum.$fEnumWord1_info:
         const GHC.Enum.$fEnumWord1_entry;
         const 0;
         const 288230380446679054;
         const 4294967301;
         const S17Oj_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.069082115 UTC

[section ""data" . GHC.Enum.$fEnumWord_$cfromEnum_closure" {
     GHC.Enum.$fEnumWord_$cfromEnum_closure:
         const GHC.Enum.$fEnumWord_$cfromEnum_info;
         const 0;
 },
 GHC.Enum.$fEnumWord_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c1b9v: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1b9w; else goto c1b9x;
       c1b9w: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumWord_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1b9x: // global
           I64[Sp - 8] = block_c1b9s_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1b9O; else goto c1b9t;
       u1b9O: // global
           call _c1b9s(R1) args: 0, res: 0, upd: 0;
       c1b9t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord_$cfromEnum_info" {
     GHC.Enum.$fEnumWord_$cfromEnum_info:
         const GHC.Enum.$fEnumWord_$cfromEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+456;
 },
 _c1b9s() //  [R1]
         { []
         }
     {offset
       c1b9s: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1b9C; else goto c1b9B;
       c1b9C: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1b9B: // global
           _s17tz::I64 = I64[R1 + 7];
           if (_s17tz::I64 > 9223372036854775807) goto c1b9G; else goto c1b9N;
       c1b9G: // global
           Hp = Hp - 16;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Enum.$fEnumWord1_entry(R2) args: 8, res: 0, upd: 8;
       c1b9N: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s17tz::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1b9s_info" {
     block_c1b9s_info:
         const _c1b9s;
         const 0;
         const 4294967326;
         const S17Oj_srt+464;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.079422214 UTC

[section ""data" . GHC.Enum.eftWord_closure" {
     GHC.Enum.eftWord_closure:
         const GHC.Enum.eftWord_info;
 },
 sat_s17tK_entry() //  [R1]
         { []
         }
     {offset
       c1ban: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bao; else goto c1bap;
       c1bao: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bap: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17tG::I64 = I64[R1 + 32];
           if (_s17tG::I64 == I64[R1 + 24]) goto c1bam; else goto c1bal;
       c1bam: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1bal: // global
           R2 = _s17tG::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s17tF_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17tK_info" {
     sat_s17tK_info:
         const sat_s17tK_entry;
         const 8589934593;
         const 15;
 },
 go_s17tF_entry() //  [R1, R2]
         { []
         }
     {offset
       c1bau: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1bay; else goto c1bax;
       c1bay: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bax: // global
           _s17tD::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_s17tK_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s17tD::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.W#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s17tF_info" {
     go_s17tF_info:
         const go_s17tF_entry;
         const 4294967296;
         const 10;
         const 4294967300;
 },
 GHC.Enum.eftWord_entry() //  [R2, R3]
         { []
         }
     {offset
       c1baC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1baG; else goto c1baF;
       c1baG: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.eftWord_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1baF: // global
           if (R2 <= R3) goto c1baA; else goto c1baB;
       c1baA: // global
           I64[Hp - 8] = go_s17tF_info;
           I64[Hp] = R3;
           R2 = R2;
           R1 = Hp - 7;
           call go_s17tF_entry(R2, R1) args: 8, res: 0, upd: 8;
       c1baB: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.eftWord_info" {
     GHC.Enum.eftWord_info:
         const GHC.Enum.eftWord_entry;
         const 0;
         const 14;
         const 8589934604;
 },
 section ""data" . GHC.Enum.eftWordFB_closure" {
     GHC.Enum.eftWordFB_closure:
         const GHC.Enum.eftWordFB_info;
 },
 GHC.Enum.eftWordFB_slow() //  [R1]
         { []
         }
     {offset
       c1baI: // global
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Enum.eftWordFB_entry(R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s17tV_entry() //  [R1]
         { []
         }
     {offset
       c1bb3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bb4; else goto c1bb5;
       c1bb4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bb5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17tR::I64 = I64[R1 + 40];
           if (_s17tR::I64 == I64[R1 + 32]) goto c1bb2; else goto c1bb1;
       c1bb2: // global
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c1bb1: // global
           R2 = _s17tR::I64 + 1;
           R1 = P64[R1 + 24];
           Sp = Sp - 16;
           call go_s17tQ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17tV_info" {
     sat_s17tV_info:
         const sat_s17tV_entry;
         const 8589934594;
         const 15;
 },
 go_s17tQ_entry() //  [R1, R2]
         { []
         }
     {offset
       c1bb9: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c1bbd; else goto c1bbc;
       c1bbd: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bbc: // global
           _s17tL::P64 = P64[R1 + 7];
           _s17tM::P64 = P64[R1 + 15];
           _s17tO::I64 = I64[R1 + 23];
           I64[Hp - 56] = sat_s17tV_info;
           P64[Hp - 40] = _s17tM::P64;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = _s17tO::I64;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 7;
           R1 = _s17tL::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s17tQ_info" {
     go_s17tQ_info:
         const go_s17tQ_entry;
         const 4294967298;
         const 8;
         const 4294967300;
 },
 GHC.Enum.eftWordFB_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1bbh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1bbl; else goto c1bbk;
       c1bbl: // global
           HpAlloc = 32;
           R1 = GHC.Enum.eftWordFB_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c1bbk: // global
           if (R4 <= R5) goto c1bbf; else goto c1bbg;
       c1bbf: // global
           I64[Hp - 24] = go_s17tQ_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           I64[Hp] = R5;
           R2 = R4;
           R1 = Hp - 23;
           call go_s17tQ_entry(R2, R1) args: 8, res: 0, upd: 8;
       c1bbg: // global
           Hp = Hp - 32;
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.eftWordFB_info" {
     GHC.Enum.eftWordFB_info:
         const GHC.Enum.eftWordFB_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 772;
         const GHC.Enum.eftWordFB_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.094824445 UTC

[section ""data" . GHC.Enum.$fEnumWord_$cenumFrom_closure" {
     GHC.Enum.$fEnumWord_$cenumFrom_closure:
         const GHC.Enum.$fEnumWord_$cenumFrom_info;
 },
 GHC.Enum.$fEnumWord_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c1bc7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1bc8; else goto c1bc9;
       c1bc8: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumWord_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bc9: // global
           I64[Sp - 8] = block_c1bc4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1bcd; else goto c1bc5;
       u1bcd: // global
           call _c1bc4(R1) args: 0, res: 0, upd: 0;
       c1bc5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord_$cenumFrom_info" {
     GHC.Enum.$fEnumWord_$cenumFrom_info:
         const GHC.Enum.$fEnumWord_$cenumFrom_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1bc4() //  [R1]
         { []
         }
     {offset
       c1bc4: // global
           R3 = 18446744073709551615;
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.eftWord_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1bc4_info" {
     block_c1bc4_info:
         const _c1bc4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.100706625 UTC

[section ""data" . GHC.Enum.$fEnumWord_$cenumFromTo_closure" {
     GHC.Enum.$fEnumWord_$cenumFromTo_closure:
         const GHC.Enum.$fEnumWord_$cenumFromTo_info;
 },
 GHC.Enum.$fEnumWord_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c1bcv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bcz; else goto c1bcA;
       c1bcz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumWord_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1bcA: // global
           I64[Sp - 16] = block_c1bcs_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1bcI; else goto c1bct;
       u1bcI: // global
           call _c1bcs(R1) args: 0, res: 0, upd: 0;
       c1bct: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord_$cenumFromTo_info" {
     GHC.Enum.$fEnumWord_$cenumFromTo_info:
         const GHC.Enum.$fEnumWord_$cenumFromTo_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1bcs() //  [R1]
         { []
         }
     {offset
       c1bcs: // global
           I64[Sp] = block_c1bcy_info;
           _s17u2::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s17u2::I64;
           if (R1 & 7 != 0) goto u1bcH; else goto c1bcC;
       u1bcH: // global
           call _c1bcy(R1) args: 0, res: 0, upd: 0;
       c1bcC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1bcs_info" {
     block_c1bcs_info:
         const _c1bcs;
         const 1;
         const 30;
 },
 _c1bcy() //  [R1]
         { []
         }
     {offset
       c1bcy: // global
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Enum.eftWord_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1bcy_info" {
     block_c1bcy_info:
         const _c1bcy;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.109943519 UTC

[section ""data" . GHC.Enum.efdtWordUp_closure" {
     GHC.Enum.efdtWordUp_closure:
         const GHC.Enum.efdtWordUp_info;
 },
 sat_s17uh_entry() //  [R1]
         { []
         }
     {offset
       c1bdt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bdu; else goto c1bdv;
       c1bdu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bdv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17uc_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17uh_info" {
     sat_s17uh_info:
         const sat_s17uh_entry;
         const 8589934593;
         const 15;
 },
 go_up_s17uc_entry() //  [R1, R2]
         { []
         }
     {offset
       c1bdz: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1bdD; else goto c1bdC;
       c1bdD: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bdC: // global
           if (R2 <= I64[R1 + 15]) goto c1bdx; else goto c1bdy;
       c1bdx: // global
           _s17ua::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_s17uh_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s17ua::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.W#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bdy: // global
           I64[Hp - 72] = GHC.Types.W#_con_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1bdI::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1bdI::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17uc_info" {
     go_up_s17uc_info:
         const go_up_s17uc_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s17uj_entry() //  [R1]
         { []
         }
     {offset
       c1bdJ: // global
           _s17uj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1bdK; else goto c1bdL;
       c1bdL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1bdN; else goto c1bdM;
       c1bdN: // global
           HpAlloc = 24;
           goto c1bdK;
       c1bdK: // global
           R1 = _s17uj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bdM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17uj::P64;
           _s17u6::I64 = I64[_s17uj::P64 + 24];
           _s17ua::I64 = _s17u6::I64 - I64[_s17uj::P64 + 16];
           _s17ub::I64 = I64[_s17uj::P64 + 32] - _s17ua::I64;
           I64[Hp - 16] = go_up_s17uc_info;
           I64[Hp - 8] = _s17ua::I64;
           I64[Hp] = _s17ub::I64;
           R2 = _s17u6::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17uc_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17uj_info" {
     sat_s17uj_info:
         const sat_s17uj_entry;
         const 12884901888;
         const 15;
 },
 GHC.Enum.efdtWordUp_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1bdR: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1bdV; else goto c1bdU;
       c1bdV: // global
           HpAlloc = 80;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.efdtWordUp_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1bdU: // global
           if (R4 >= R3) goto c1bdP; else goto c1bdQ;
       c1bdP: // global
           I64[Hp - 72] = sat_s17uj_info;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = R3;
           I64[Hp - 40] = R4;
           I64[Hp - 32] = GHC.Types.W#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bdQ: // global
           if (R4 >= R2) goto c1be5; else goto c1be6;
       c1be5: // global
           I64[Hp - 72] = GHC.Types.W#_con_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1be3::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1be3::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1be6: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtWordUp_info" {
     GHC.Enum.efdtWordUp_info:
         const GHC.Enum.efdtWordUp_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.124060276 UTC

[section ""data" . GHC.Enum.efdtWordUpFB_closure" {
     GHC.Enum.efdtWordUpFB_closure:
         const GHC.Enum.efdtWordUpFB_info;
 },
 GHC.Enum.efdtWordUpFB_slow() //  [R1]
         { []
         }
     {offset
       c1beU: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.efdtWordUpFB_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s17uA_entry() //  [R1]
         { []
         }
     {offset
       c1bfp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bfq; else goto c1bfr;
       c1bfq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bfr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17uv_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17uA_info" {
     sat_s17uA_info:
         const sat_s17uA_entry;
         const 8589934593;
         const 15;
 },
 go_up_s17uv_entry() //  [R1, R2]
         { []
         }
     {offset
       c1bfv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1bfz; else goto c1bfy;
       c1bfz: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bfy: // global
           _s17um::P64 = P64[R1 + 7];
           if (R2 <= I64[R1 + 31]) goto c1bft; else goto c1bfu;
       c1bft: // global
           _s17ut::I64 = I64[R1 + 23];
           I64[Hp - 48] = sat_s17uA_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = _s17ut::I64;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 7;
           R1 = _s17um::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1bfu: // global
           _s17un::P64 = P64[R1 + 15];
           I64[Hp - 48] = GHC.Types.W#_con_info;
           I64[Hp - 40] = R2;
           _c1bfC::P64 = Hp - 47;
           Hp = Hp - 40;
           R3 = _s17un::P64;
           R2 = _c1bfC::P64;
           R1 = _s17um::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17uv_info" {
     go_up_s17uv_info:
         const go_up_s17uv_entry;
         const 8589934594;
         const 8;
         const 4294967300;
 },
 sat_s17uC_entry() //  [R1]
         { []
         }
     {offset
       c1bfD: // global
           _s17uC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1bfE; else goto c1bfF;
       c1bfF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1bfH; else goto c1bfG;
       c1bfH: // global
           HpAlloc = 40;
           goto c1bfE;
       c1bfE: // global
           R1 = _s17uC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bfG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17uC::P64;
           _s17um::P64 = P64[_s17uC::P64 + 16];
           _s17un::P64 = P64[_s17uC::P64 + 24];
           _s17up::I64 = I64[_s17uC::P64 + 40];
           _s17ut::I64 = _s17up::I64 - I64[_s17uC::P64 + 32];
           _s17uu::I64 = I64[_s17uC::P64 + 48] - _s17ut::I64;
           I64[Hp - 32] = go_up_s17uv_info;
           P64[Hp - 24] = _s17um::P64;
           P64[Hp - 16] = _s17un::P64;
           I64[Hp - 8] = _s17ut::I64;
           I64[Hp] = _s17uu::I64;
           R2 = _s17up::I64;
           R1 = Hp - 31;
           Sp = Sp - 16;
           call go_up_s17uv_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17uC_info" {
     sat_s17uC_info:
         const sat_s17uC_entry;
         const 12884901890;
         const 15;
 },
 GHC.Enum.efdtWordUpFB_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1bfL: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1bfP; else goto c1bfO;
       c1bfP: // global
           HpAlloc = 72;
           R1 = GHC.Enum.efdtWordUpFB_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       c1bfO: // global
           if (R6 >= R5) goto c1bfJ; else goto c1bfK;
       c1bfJ: // global
           I64[Hp - 64] = sat_s17uC_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = R4;
           I64[Hp - 24] = R5;
           I64[Hp - 16] = R6;
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = R4;
           R3 = Hp - 64;
           _s17um::P64 = R2;
           R2 = Hp - 7;
           R1 = _s17um::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1bfK: // global
           if (R6 >= R4) goto c1bfX; else goto c1bfY;
       c1bfX: // global
           I64[Hp - 64] = GHC.Types.W#_con_info;
           I64[Hp - 56] = R4;
           _c1bfV::P64 = Hp - 63;
           Hp = Hp - 56;
           R3 = R3;
           _s17um::P64 = R2;
           R2 = _c1bfV::P64;
           R1 = _s17um::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1bfY: // global
           Hp = Hp - 72;
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtWordUpFB_info" {
     GHC.Enum.efdtWordUpFB_info:
         const GHC.Enum.efdtWordUpFB_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 1797;
         const GHC.Enum.efdtWordUpFB_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.137956318 UTC

[section ""data" . GHC.Enum.efdtWordDn_closure" {
     GHC.Enum.efdtWordDn_closure:
         const GHC.Enum.efdtWordDn_info;
 },
 sat_s17uR_entry() //  [R1]
         { []
         }
     {offset
       c1bgY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bgZ; else goto c1bh0;
       c1bgZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bh0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17uM_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17uR_info" {
     sat_s17uR_info:
         const sat_s17uR_entry;
         const 8589934593;
         const 15;
 },
 go_dn_s17uM_entry() //  [R1, R2]
         { []
         }
     {offset
       c1bh4: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1bh8; else goto c1bh7;
       c1bh8: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bh7: // global
           if (R2 >= I64[R1 + 15]) goto c1bh2; else goto c1bh3;
       c1bh2: // global
           _s17uK::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_s17uR_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s17uK::I64;
           I64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Types.W#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bh3: // global
           I64[Hp - 72] = GHC.Types.W#_con_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1bhd::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1bhd::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17uM_info" {
     go_dn_s17uM_info:
         const go_dn_s17uM_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s17uT_entry() //  [R1]
         { []
         }
     {offset
       c1bhe: // global
           _s17uT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1bhf; else goto c1bhg;
       c1bhg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1bhi; else goto c1bhh;
       c1bhi: // global
           HpAlloc = 24;
           goto c1bhf;
       c1bhf: // global
           R1 = _s17uT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bhh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17uT::P64;
           _s17uG::I64 = I64[_s17uT::P64 + 24];
           _s17uK::I64 = _s17uG::I64 - I64[_s17uT::P64 + 16];
           _s17uL::I64 = I64[_s17uT::P64 + 32] - _s17uK::I64;
           I64[Hp - 16] = go_dn_s17uM_info;
           I64[Hp - 8] = _s17uK::I64;
           I64[Hp] = _s17uL::I64;
           R2 = _s17uG::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17uM_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17uT_info" {
     sat_s17uT_info:
         const sat_s17uT_entry;
         const 12884901888;
         const 15;
 },
 GHC.Enum.efdtWordDn_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1bhm: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1bhq; else goto c1bhp;
       c1bhq: // global
           HpAlloc = 80;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.efdtWordDn_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1bhp: // global
           if (R4 <= R3) goto c1bhk; else goto c1bhl;
       c1bhk: // global
           I64[Hp - 72] = sat_s17uT_info;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = R3;
           I64[Hp - 40] = R4;
           I64[Hp - 32] = GHC.Types.W#_con_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bhl: // global
           if (R4 <= R2) goto c1bhA; else goto c1bhB;
       c1bhA: // global
           I64[Hp - 72] = GHC.Types.W#_con_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1bhy::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1bhy::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bhB: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtWordDn_info" {
     GHC.Enum.efdtWordDn_info:
         const GHC.Enum.efdtWordDn_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.150696347 UTC

[section ""data" . GHC.Enum.efdtWordDnFB_closure" {
     GHC.Enum.efdtWordDnFB_closure:
         const GHC.Enum.efdtWordDnFB_info;
 },
 GHC.Enum.efdtWordDnFB_slow() //  [R1]
         { []
         }
     {offset
       c1bip: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.efdtWordDnFB_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s17va_entry() //  [R1]
         { []
         }
     {offset
       c1biU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1biV; else goto c1biW;
       c1biV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1biW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17v5_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17va_info" {
     sat_s17va_info:
         const sat_s17va_entry;
         const 8589934593;
         const 15;
 },
 go_dn_s17v5_entry() //  [R1, R2]
         { []
         }
     {offset
       c1bj0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1bj4; else goto c1bj3;
       c1bj4: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bj3: // global
           _s17uW::P64 = P64[R1 + 7];
           if (R2 >= I64[R1 + 31]) goto c1biY; else goto c1biZ;
       c1biY: // global
           _s17v3::I64 = I64[R1 + 23];
           I64[Hp - 48] = sat_s17va_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = _s17v3::I64;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 7;
           R1 = _s17uW::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1biZ: // global
           _s17uX::P64 = P64[R1 + 15];
           I64[Hp - 48] = GHC.Types.W#_con_info;
           I64[Hp - 40] = R2;
           _c1bj7::P64 = Hp - 47;
           Hp = Hp - 40;
           R3 = _s17uX::P64;
           R2 = _c1bj7::P64;
           R1 = _s17uW::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17v5_info" {
     go_dn_s17v5_info:
         const go_dn_s17v5_entry;
         const 8589934594;
         const 8;
         const 4294967300;
 },
 sat_s17vc_entry() //  [R1]
         { []
         }
     {offset
       c1bj8: // global
           _s17vc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1bj9; else goto c1bja;
       c1bja: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1bjc; else goto c1bjb;
       c1bjc: // global
           HpAlloc = 40;
           goto c1bj9;
       c1bj9: // global
           R1 = _s17vc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bjb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17vc::P64;
           _s17uW::P64 = P64[_s17vc::P64 + 16];
           _s17uX::P64 = P64[_s17vc::P64 + 24];
           _s17uZ::I64 = I64[_s17vc::P64 + 40];
           _s17v3::I64 = _s17uZ::I64 - I64[_s17vc::P64 + 32];
           _s17v4::I64 = I64[_s17vc::P64 + 48] - _s17v3::I64;
           I64[Hp - 32] = go_dn_s17v5_info;
           P64[Hp - 24] = _s17uW::P64;
           P64[Hp - 16] = _s17uX::P64;
           I64[Hp - 8] = _s17v3::I64;
           I64[Hp] = _s17v4::I64;
           R2 = _s17uZ::I64;
           R1 = Hp - 31;
           Sp = Sp - 16;
           call go_dn_s17v5_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17vc_info" {
     sat_s17vc_info:
         const sat_s17vc_entry;
         const 12884901890;
         const 15;
 },
 GHC.Enum.efdtWordDnFB_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1bjg: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1bjk; else goto c1bjj;
       c1bjk: // global
           HpAlloc = 72;
           R1 = GHC.Enum.efdtWordDnFB_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       c1bjj: // global
           if (R6 <= R5) goto c1bje; else goto c1bjf;
       c1bje: // global
           I64[Hp - 64] = sat_s17vc_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = R4;
           I64[Hp - 24] = R5;
           I64[Hp - 16] = R6;
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = R4;
           R3 = Hp - 64;
           _s17uW::P64 = R2;
           R2 = Hp - 7;
           R1 = _s17uW::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1bjf: // global
           if (R6 <= R4) goto c1bjs; else goto c1bjt;
       c1bjs: // global
           I64[Hp - 64] = GHC.Types.W#_con_info;
           I64[Hp - 56] = R4;
           _c1bjq::P64 = Hp - 63;
           Hp = Hp - 56;
           R3 = R3;
           _s17uW::P64 = R2;
           R2 = _c1bjq::P64;
           R1 = _s17uW::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1bjt: // global
           Hp = Hp - 72;
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtWordDnFB_info" {
     GHC.Enum.efdtWordDnFB_info:
         const GHC.Enum.efdtWordDnFB_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 1797;
         const GHC.Enum.efdtWordDnFB_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.162579291 UTC

[section ""data" . GHC.Enum.efdtWord_closure" {
     GHC.Enum.efdtWord_closure:
         const GHC.Enum.efdtWord_info;
 },
 GHC.Enum.efdtWord_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1bk7: // global
           if (R3 < R2) goto c1bk5; else goto c1bk6;
       c1bk5: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtWordDn_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c1bk6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtWordUp_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtWord_info" {
     GHC.Enum.efdtWord_info:
         const GHC.Enum.efdtWord_entry;
         const 0;
         const 14;
         const 12884901904;
 },
 section ""data" . GHC.Enum.efdtWordFB_closure" {
     GHC.Enum.efdtWordFB_closure:
         const GHC.Enum.efdtWordFB_info;
 },
 GHC.Enum.efdtWordFB_slow() //  [R1]
         { []
         }
     {offset
       c1bkb: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.efdtWordFB_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Enum.efdtWordFB_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1bkk: // global
           if (R5 < R4) goto c1bki; else goto c1bkj;
       c1bki: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtWordDnFB_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
       c1bkj: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtWordUpFB_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdtWordFB_info" {
     GHC.Enum.efdtWordFB_info:
         const GHC.Enum.efdtWordFB_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 1797;
         const GHC.Enum.efdtWordFB_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.170996444 UTC

[section ""data" . GHC.Enum.$fEnumWord_$cenumFromThenTo_closure" {
     GHC.Enum.$fEnumWord_$cenumFromThenTo_closure:
         const GHC.Enum.$fEnumWord_$cenumFromThenTo_info;
 },
 GHC.Enum.$fEnumWord_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1bkE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1bkN; else goto c1bkO;
       c1bkN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumWord_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1bkO: // global
           I64[Sp - 24] = block_c1bkB_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1bkX; else goto c1bkC;
       u1bkX: // global
           call _c1bkB(R1) args: 0, res: 0, upd: 0;
       c1bkC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord_$cenumFromThenTo_info" {
     GHC.Enum.$fEnumWord_$cenumFromThenTo_info:
         const GHC.Enum.$fEnumWord_$cenumFromThenTo_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1bkB() //  [R1]
         { []
         }
     {offset
       c1bkB: // global
           I64[Sp] = block_c1bkH_info;
           _s17vt::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s17vt::I64;
           if (R1 & 7 != 0) goto u1bkW; else goto c1bkI;
       u1bkW: // global
           call _c1bkH(R1) args: 0, res: 0, upd: 0;
       c1bkI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1bkB_info" {
     block_c1bkB_info:
         const _c1bkB;
         const 2;
         const 30;
 },
 _c1bkH() //  [R1]
         { []
         }
     {offset
       c1bkH: // global
           I64[Sp] = block_c1bkM_info;
           _s17vv::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s17vv::I64;
           if (R1 & 7 != 0) goto u1bkY; else goto c1bkR;
       u1bkY: // global
           call _c1bkM(R1) args: 0, res: 0, upd: 0;
       c1bkR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1bkH_info" {
     block_c1bkH_info:
         const _c1bkH;
         const 66;
         const 30;
 },
 _c1bkM() //  [R1]
         { []
         }
     {offset
       c1bkM: // global
           R4 = I64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Enum.efdtWord_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1bkM_info" {
     block_c1bkM_info:
         const _c1bkM;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.178828727 UTC

[section ""data" . sat_s17vy_closure" {
     sat_s17vy_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.180557766 UTC

[section ""data" . sat_s17vz_closure" {
     sat_s17vz_closure:
         const :_con_info;
         const sat_s17vy_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.183231803 UTC

[section ""data" . GHC.Enum.$fEnumInteger1_closure" {
     GHC.Enum.$fEnumInteger1_closure:
         const GHC.Enum.$fEnumInteger1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumInteger1_entry() //  [R1]
         { []
         }
     {offset
       c1blr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bls; else goto c1blt;
       c1bls: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1blt: // global
           (_c1blo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1blo::I64 == 0) goto c1blq; else goto c1blp;
       c1blq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1blp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1blo::I64;
           R3 = sat_s17vz_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger1_info" {
     GHC.Enum.$fEnumInteger1_info:
         const GHC.Enum.$fEnumInteger1_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.189232205 UTC

[section ""data" . GHC.Enum.enumDeltaToInteger1_closure" {
     GHC.Enum.enumDeltaToInteger1_closure:
         const GHC.Enum.enumDeltaToInteger1_info;
         const 0;
 },
 sat_s17vG_entry() //  [R1]
         { []
         }
     {offset
       c1blW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1blX; else goto c1blY;
       c1blX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1blY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1blU_info;
           R3 = GHC.Enum.$fEnumInteger1_closure;
           R2 = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17vG_info" {
     sat_s17vG_info:
         const sat_s17vG_entry;
         const 2;
         const 12884901906;
         const S17Oj_srt+480;
 },
 _c1blU() //  [R1]
         { []
         }
     {offset
       c1blU: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s17vC_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1blU_info" {
     block_c1blU_info:
         const _c1blU;
         const 1;
         const 12884901918;
         const S17Oj_srt+480;
 },
 go_s17vC_entry() //  [R1, R2]
         { []
         }
     {offset
       c1bm5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1bm6; else goto c1bm7;
       c1bm6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bm7: // global
           I64[Sp - 24] = block_c1blM_info;
           R3 = P64[R1 + 7];
           _s17vD::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s17vD::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s17vC_info" {
     go_s17vC_info:
         const go_s17vC_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S17Oj_srt+480;
 },
 _c1blM() //  [R1]
         { []
         }
     {offset
       c1blM: // global
           if (R1 == 1) goto c1bm4; else goto c1bm3;
       c1bm4: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bm3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1bmb; else goto c1bma;
       c1bmb: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1bma: // global
           I64[Hp - 48] = sat_s17vG_info;
           P64[Hp - 32] = P64[Sp + 8];
           _s17vD::P64 = P64[Sp + 16];
           P64[Hp - 24] = _s17vD::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s17vD::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1blM_info" {
     block_c1blM_info:
         const _c1blM;
         const 2;
         const 12884901918;
         const S17Oj_srt+480;
 },
 GHC.Enum.enumDeltaToInteger1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1bmf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1bmj; else goto c1bmi;
       c1bmj: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.enumDeltaToInteger1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1bmi: // global
           I64[Hp - 8] = go_s17vC_info;
           P64[Hp] = R3;
           R2 = R2;
           R1 = Hp - 7;
           call go_s17vC_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumDeltaToInteger1_info" {
     GHC.Enum.enumDeltaToInteger1_info:
         const GHC.Enum.enumDeltaToInteger1_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S17Oj_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.20373435 UTC

[section ""data" . GHC.Enum.enumDeltaToInteger1FB_closure" {
     GHC.Enum.enumDeltaToInteger1FB_closure:
         const GHC.Enum.enumDeltaToInteger1FB_info;
         const 0;
 },
 sat_s17vP_entry() //  [R1]
         { []
         }
     {offset
       c1bn7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1bn8; else goto c1bn9;
       c1bn8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bn9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1bn5_info;
           R3 = GHC.Enum.$fEnumInteger1_closure;
           R2 = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17vP_info" {
     sat_s17vP_info:
         const sat_s17vP_entry;
         const 2;
         const 12884901906;
         const S17Oj_srt+480;
 },
 _c1bn5() //  [R1]
         { []
         }
     {offset
       c1bn5: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s17vL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1bn5_info" {
     block_c1bn5_info:
         const _c1bn5;
         const 1;
         const 12884901918;
         const S17Oj_srt+480;
 },
 go_s17vL_entry() //  [R1, R2]
         { []
         }
     {offset
       c1bng: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1bnh; else goto c1bni;
       c1bnh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bni: // global
           I64[Sp - 40] = block_c1bmX_info;
           R3 = P64[R1 + 23];
           _s17vM::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s17vM::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s17vL_info" {
     go_s17vL_info:
         const go_s17vL_entry;
         const 3;
         const 12884901896;
         const 4294967301;
         const S17Oj_srt+480;
 },
 _c1bmX() //  [R1]
         { []
         }
     {offset
       c1bmX: // global
           if (R1 == 1) goto c1bnf; else goto c1bne;
       c1bnf: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1bne: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1bnl; else goto c1bnk;
       c1bnl: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1bnk: // global
           I64[Hp - 24] = sat_s17vP_info;
           P64[Hp - 8] = P64[Sp + 24];
           _s17vM::P64 = P64[Sp + 32];
           P64[Hp] = _s17vM::P64;
           R3 = Hp - 24;
           R2 = _s17vM::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1bmX_info" {
     block_c1bmX_info:
         const _c1bmX;
         const 4;
         const 12884901918;
         const S17Oj_srt+480;
 },
 GHC.Enum.enumDeltaToInteger1FB_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1bnp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1bnt; else goto c1bns;
       c1bnt: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.enumDeltaToInteger1FB_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1bns: // global
           I64[Hp - 24] = go_s17vL_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R5;
           R2 = R4;
           R1 = Hp - 23;
           call go_s17vL_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumDeltaToInteger1FB_info" {
     GHC.Enum.enumDeltaToInteger1FB_info:
         const GHC.Enum.enumDeltaToInteger1FB_entry;
         const 0;
         const 47244640270;
         const 17179869208;
         const S17Oj_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.21623271 UTC

[section ""data" . GHC.Enum.up_fb_closure" {
     GHC.Enum.up_fb_closure:
         const GHC.Enum.up_fb_info;
         const 0;
 },
 sat_s17vZ_entry() //  [R1]
         { []
         }
     {offset
       c1boe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1bof; else goto c1bog;
       c1bof: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bog: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1boc_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17vZ_info" {
     sat_s17vZ_info:
         const sat_s17vZ_entry;
         const 3;
         const 4294967311;
         const S17Oj_srt+480;
 },
 _c1boc() //  [R1]
         { []
         }
     {offset
       c1boc: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s17vV_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1boc_info" {
     block_c1boc_info:
         const _c1boc;
         const 1;
         const 4294967326;
         const S17Oj_srt+480;
 },
 go_s17vV_entry() //  [R1, R2]
         { []
         }
     {offset
       c1bon: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1boo; else goto c1bop;
       c1boo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bop: // global
           I64[Sp - 48] = block_c1bo4_info;
           R3 = P64[R1 + 31];
           _s17vW::P64 = R2;
           R2 = R2;
           P64[Sp - 40] = P64[R1 + 7];
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = P64[R1 + 23];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s17vW::P64;
           Sp = Sp - 48;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s17vV_info" {
     go_s17vV_info:
         const go_s17vV_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S17Oj_srt+480;
 },
 _c1bo4() //  [R1]
         { []
         }
     {offset
       c1bo4: // global
           if (R1 == 1) goto c1bom; else goto c1bol;
       c1bom: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1bol: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1bos; else goto c1bor;
       c1bos: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1bor: // global
           I64[Hp - 32] = sat_s17vZ_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           _s17vW::P64 = P64[Sp + 40];
           P64[Hp] = _s17vW::P64;
           R3 = Hp - 32;
           R2 = _s17vW::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1bo4_info" {
     block_c1bo4_info:
         const _c1bo4;
         const 5;
         const 4294967326;
         const S17Oj_srt+480;
 },
 GHC.Enum.up_fb_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1bow: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1boA; else goto c1boz;
       c1boA: // global
           HpAlloc = 40;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.up_fb_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1boz: // global
           I64[Hp - 32] = go_s17vV_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R2 = R4;
           R1 = Hp - 31;
           call go_s17vV_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.up_fb_info" {
     GHC.Enum.up_fb_info:
         const GHC.Enum.up_fb_entry;
         const 0;
         const 73014444046;
         const 21474836505;
         const S17Oj_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.229029426 UTC

[section ""data" . GHC.Enum.dn_fb_closure" {
     GHC.Enum.dn_fb_closure:
         const GHC.Enum.dn_fb_info;
         const 0;
 },
 sat_s17w9_entry() //  [R1]
         { []
         }
     {offset
       c1bpn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1bpo; else goto c1bpp;
       c1bpo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bpp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1bpl_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17w9_info" {
     sat_s17w9_info:
         const sat_s17w9_entry;
         const 3;
         const 4294967311;
         const S17Oj_srt+480;
 },
 _c1bpl() //  [R1]
         { []
         }
     {offset
       c1bpl: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s17w5_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1bpl_info" {
     block_c1bpl_info:
         const _c1bpl;
         const 1;
         const 4294967326;
         const S17Oj_srt+480;
 },
 go_s17w5_entry() //  [R1, R2]
         { []
         }
     {offset
       c1bpw: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1bpx; else goto c1bpy;
       c1bpx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bpy: // global
           I64[Sp - 48] = block_c1bpd_info;
           R3 = P64[R1 + 31];
           _s17w6::P64 = R2;
           R2 = R2;
           P64[Sp - 40] = P64[R1 + 7];
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = P64[R1 + 23];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s17w6::P64;
           Sp = Sp - 48;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s17w5_info" {
     go_s17w5_info:
         const go_s17w5_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S17Oj_srt+480;
 },
 _c1bpd() //  [R1]
         { []
         }
     {offset
       c1bpd: // global
           if (R1 == 1) goto c1bpv; else goto c1bpu;
       c1bpv: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1bpu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1bpB; else goto c1bpA;
       c1bpB: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1bpA: // global
           I64[Hp - 32] = sat_s17w9_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           _s17w6::P64 = P64[Sp + 40];
           P64[Hp] = _s17w6::P64;
           R3 = Hp - 32;
           R2 = _s17w6::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1bpd_info" {
     block_c1bpd_info:
         const _c1bpd;
         const 5;
         const 4294967326;
         const S17Oj_srt+480;
 },
 GHC.Enum.dn_fb_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1bpF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1bpJ; else goto c1bpI;
       c1bpJ: // global
           HpAlloc = 40;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.dn_fb_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1bpI: // global
           I64[Hp - 32] = go_s17w5_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R2 = R4;
           R1 = Hp - 31;
           call go_s17w5_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.dn_fb_info" {
     GHC.Enum.dn_fb_info:
         const GHC.Enum.dn_fb_entry;
         const 0;
         const 141733920782;
         const 21474836505;
         const S17Oj_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.240482428 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_$cfromEnum_closure" {
     GHC.Enum.$fEnumVecElem_$cfromEnum_closure:
         const GHC.Enum.$fEnumVecElem_$cfromEnum_info;
 },
 GHC.Enum.$fEnumVecElem_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c1bql: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1bqr; else goto c1bqs;
       c1bqr: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecElem_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bqs: // global
           I64[Sp - 8] = block_c1bqh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1bqD; else goto c1bqi;
       u1bqD: // global
           call _c1bqh(R1) args: 0, res: 0, upd: 0;
       c1bqi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem_$cfromEnum_info" {
     GHC.Enum.$fEnumVecElem_$cfromEnum_info:
         const GHC.Enum.$fEnumVecElem_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1bqh() //  [R1]
         { []
         }
     {offset
       c1bqh: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c1bqo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1bqh_info" {
     block_c1bqh_info:
         const _c1bqh;
         const 0;
         const 30;
 },
 _c1bqo() //  []
         { []
         }
     {offset
       c1bqo: // global
           Hp = Hp + 16;
           _s17wc::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c1bqy; else goto c1bqx;
       c1bqy: // global
           HpAlloc = 16;
           I64[Sp] = block_c1bqn_info;
           R1 = _s17wc::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1bqx: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s17wc::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1bqn() //  [R1]
         { []
         }
     {offset
       c1bqn: // global
           I64[Sp] = R1;
           call _c1bqo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1bqn_info" {
     block_c1bqn_info:
         const _c1bqn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.249038663 UTC

[section ""cstring" . lvl33_rURd_bytes" {
     lvl33_rURd_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.251398223 UTC

[section ""data" . lvl34_rURe_closure" {
     lvl34_rURe_closure:
         const lvl34_rURe_info;
         const 0;
         const 0;
         const 0;
 },
 lvl34_rURe_entry() //  [R1]
         { []
         }
     {offset
       c1br8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1br9; else goto c1bra;
       c1br9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bra: // global
           (_c1br5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1br5::I64 == 0) goto c1br7; else goto c1br6;
       c1br7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1br6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1br5::I64;
           R2 = lvl33_rURd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl34_rURe_info" {
     lvl34_rURe_info:
         const lvl34_rURe_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.255169842 UTC

[section ""cstring" . GHC.Enum.$trModule4_bytes" {
     GHC.Enum.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.257554253 UTC

[section ""data" . lvl35_rURf_closure" {
     lvl35_rURf_closure:
         const lvl35_rURf_info;
         const 0;
         const 0;
         const 0;
 },
 lvl35_rURf_entry() //  [R1]
         { []
         }
     {offset
       c1brq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1brr; else goto c1brs;
       c1brr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1brs: // global
           (_c1brn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1brn::I64 == 0) goto c1brp; else goto c1bro;
       c1brp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1bro: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1brn::I64;
           R2 = GHC.Enum.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl35_rURf_info" {
     lvl35_rURf_info:
         const lvl35_rURf_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.261067269 UTC

[section ""cstring" . GHC.Enum.$trModule2_bytes" {
     GHC.Enum.$trModule2_bytes:
         I8[] [71,72,67,46,69,110,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.263465361 UTC

[section ""data" . lvl36_rURg_closure" {
     lvl36_rURg_closure:
         const lvl36_rURg_info;
         const 0;
         const 0;
         const 0;
 },
 lvl36_rURg_entry() //  [R1]
         { []
         }
     {offset
       c1brI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1brJ; else goto c1brK;
       c1brJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1brK: // global
           (_c1brF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1brF::I64 == 0) goto c1brH; else goto c1brG;
       c1brH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1brG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1brF::I64;
           R2 = GHC.Enum.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl36_rURg_info" {
     lvl36_rURg_info:
         const lvl36_rURg_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.267102327 UTC

[section ""cstring" . lvl37_rURh_bytes" {
     lvl37_rURh_bytes:
         I8[] [46,47,71,72,67,47,69,110,117,109,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.269569084 UTC

[section ""data" . lvl38_rURi_closure" {
     lvl38_rURi_closure:
         const lvl38_rURi_info;
         const 0;
         const 0;
         const 0;
 },
 lvl38_rURi_entry() //  [R1]
         { []
         }
     {offset
       c1bs0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bs1; else goto c1bs2;
       c1bs1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bs2: // global
           (_c1brX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1brX::I64 == 0) goto c1brZ; else goto c1brY;
       c1brZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1brY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1brX::I64;
           R2 = lvl37_rURh_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl38_rURi_info" {
     lvl38_rURi_info:
         const lvl38_rURi_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.273066507 UTC

[section ""data" . lvl39_rURj_closure" {
     lvl39_rURj_closure:
         const GHC.Types.I#_con_info;
         const 890;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.274842724 UTC

[section ""data" . lvl40_rURk_closure" {
     lvl40_rURk_closure:
         const GHC.Types.I#_con_info;
         const 31;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.277164791 UTC

[section ""data" . lvl41_rURl_closure" {
     lvl41_rURl_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl35_rURf_closure;
         const lvl36_rURg_closure;
         const lvl38_rURi_closure;
         const lvl39_rURj_closure+1;
         const GHC.Enum.$fEnumBool4_closure+1;
         const lvl39_rURj_closure+1;
         const lvl40_rURk_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.279352277 UTC

[section ""data" . lvl42_rURm_closure" {
     lvl42_rURm_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl34_rURe_closure;
         const lvl41_rURl_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.281114095 UTC

[section ""cstring" . lvl43_rURn_bytes" {
     lvl43_rURn_bytes:
         I8[] [112,114,101,100,123,86,101,99,69,108,101,109,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,102,105,114,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.283722149 UTC

[section ""data" . GHC.Enum.$fEnumVecElem1_closure" {
     GHC.Enum.$fEnumVecElem1_closure:
         const GHC.Enum.$fEnumVecElem1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecElem1_entry() //  [R1]
         { []
         }
     {offset
       c1bso: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1bsp; else goto c1bsq;
       c1bsp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bsq: // global
           (_c1bsj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1bsj::I64 == 0) goto c1bsl; else goto c1bsk;
       c1bsl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1bsk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1bsj::I64;
           I64[Sp - 24] = block_c1bsm_info;
           R2 = lvl43_rURn_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem1_info" {
     GHC.Enum.$fEnumVecElem1_info:
         const GHC.Enum.$fEnumVecElem1_entry;
         const 0;
         const 12884901909;
         const S17Oj_srt+528;
 },
 _c1bsm() //  [R1]
         { []
         }
     {offset
       c1bsm: // global
           R3 = R1;
           R2 = lvl42_rURm_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1bsm_info" {
     block_c1bsm_info:
         const _c1bsm;
         const 0;
         const 12884901918;
         const S17Oj_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.290298157 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_$cpred_closure" {
     GHC.Enum.$fEnumVecElem_$cpred_closure:
         const GHC.Enum.$fEnumVecElem_$cpred_info;
         const 0;
 },
 GHC.Enum.$fEnumVecElem_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c1bsR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1bsS; else goto c1bsT;
       c1bsS: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecElem_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bsT: // global
           I64[Sp - 8] = block_c1bsK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1bt4; else goto c1bsL;
       u1bt4: // global
           call _c1bsK(R1) args: 0, res: 0, upd: 0;
       c1bsL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem_$cpred_info" {
     GHC.Enum.$fEnumVecElem_$cpred_info:
         const GHC.Enum.$fEnumVecElem_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+544;
 },
 _c1bsK() //  [R1]
         { []
         }
     {offset
       c1bsK: // global
           if (I32[I64[R1 - 1] + 20] == 0 :: W32) goto c1bsP; else goto c1bsO;
       c1bsP: // global
           R1 = GHC.Enum.$fEnumVecElem1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1bsO: // global
           R1 = I64[(%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) - 1 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1bsK_info" {
     block_c1bsK_info:
         const _c1bsK;
         const 0;
         const 4294967326;
         const S17Oj_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.295336203 UTC

[section ""cstring" . lvl44_rURo_bytes" {
     lvl44_rURo_bytes:
         I8[] [115,117,99,99,123,86,101,99,69,108,101,109,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,108,97,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.298710105 UTC

[section ""data" . GHC.Enum.$fEnumVecElem2_closure" {
     GHC.Enum.$fEnumVecElem2_closure:
         const GHC.Enum.$fEnumVecElem2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecElem2_entry() //  [R1]
         { []
         }
     {offset
       c1btx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1bty; else goto c1btz;
       c1bty: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1btz: // global
           (_c1bts::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1bts::I64 == 0) goto c1btu; else goto c1btt;
       c1btu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1btt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1bts::I64;
           I64[Sp - 24] = block_c1btv_info;
           R2 = lvl44_rURo_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem2_info" {
     GHC.Enum.$fEnumVecElem2_info:
         const GHC.Enum.$fEnumVecElem2_entry;
         const 0;
         const 12884901909;
         const S17Oj_srt+528;
 },
 _c1btv() //  [R1]
         { []
         }
     {offset
       c1btv: // global
           R3 = R1;
           R2 = lvl42_rURm_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1btv_info" {
     block_c1btv_info:
         const _c1btv;
         const 0;
         const 12884901918;
         const S17Oj_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.304705191 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_$csucc_closure" {
     GHC.Enum.$fEnumVecElem_$csucc_closure:
         const GHC.Enum.$fEnumVecElem_$csucc_info;
         const 0;
 },
 GHC.Enum.$fEnumVecElem_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c1bu0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1bu1; else goto c1bu2;
       c1bu1: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecElem_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bu2: // global
           I64[Sp - 8] = block_c1btT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1bud; else goto c1btU;
       u1bud: // global
           call _c1btT(R1) args: 0, res: 0, upd: 0;
       c1btU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem_$csucc_info" {
     GHC.Enum.$fEnumVecElem_$csucc_info:
         const GHC.Enum.$fEnumVecElem_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+560;
 },
 _c1btT() //  [R1]
         { []
         }
     {offset
       c1btT: // global
           if (I32[I64[R1 - 1] + 20] == 9 :: W32) goto c1btY; else goto c1btX;
       c1btY: // global
           R1 = GHC.Enum.$fEnumVecElem2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1btX: // global
           R1 = I64[(%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) + 1 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1btT_info" {
     block_c1btT_info:
         const _c1btT;
         const 0;
         const 4294967326;
         const S17Oj_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.310640882 UTC

[section ""cstring" . lvl45_rURp_bytes" {
     lvl45_rURp_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,101,110,117,109,101,114,97,116,105,111,110,39,115,32,114,97,110,103,101,32,40,48,44]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.312415887 UTC

[section ""cstring" . lvl46_rURq_bytes" {
     lvl46_rURq_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.314734658 UTC

[section ""data" . lvl47_rURr_closure" {
     lvl47_rURr_closure:
         const lvl47_rURr_info;
         const 0;
         const 0;
         const 0;
 },
 lvl47_rURr_entry() //  [R1]
         { []
         }
     {offset
       c1buF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1buG; else goto c1buH;
       c1buG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1buH: // global
           (_c1buC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1buC::I64 == 0) goto c1buE; else goto c1buD;
       c1buE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1buD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1buC::I64;
           R2 = lvl46_rURq_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl47_rURr_info" {
     lvl47_rURr_info:
         const lvl47_rURr_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.319339179 UTC

[section ""data" . lvl48_rURs_closure" {
     lvl48_rURs_closure:
         const lvl48_rURs_info;
         const 0;
         const 0;
         const 0;
 },
 lvl48_rURs_entry() //  [R1]
         { []
         }
     {offset
       c1buZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1bv0; else goto c1bv1;
       c1bv0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bv1: // global
           (_c1buT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1buT::I64 == 0) goto c1buV; else goto c1buU;
       c1buV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1buU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1buT::I64;
           I64[Sp - 24] = block_c1buW_info;
           R4 = lvl47_rURr_closure;
           R3 = 9;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl48_rURs_info" {
     lvl48_rURs_info:
         const lvl48_rURs_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt+576;
 },
 _c1buW() //  [R1, R2]
         { []
         }
     {offset
       c1buW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1bv4; else goto c1bv3;
       c1bv4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1bv3: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1buW_info" {
     block_c1buW_info:
         const _c1buW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.325249143 UTC

[section ""data" . lvl49_rURt_closure" {
     lvl49_rURt_closure:
         const lvl49_rURt_info;
         const 0;
         const 0;
         const 0;
 },
 lvl49_rURt_entry() //  [R1]
         { []
         }
     {offset
       c1bvp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bvq; else goto c1bvr;
       c1bvq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bvr: // global
           (_c1bvm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1bvm::I64 == 0) goto c1bvo; else goto c1bvn;
       c1bvo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1bvn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1bvm::I64;
           R3 = lvl48_rURs_closure;
           R2 = lvl45_rURp_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl49_rURt_info" {
     lvl49_rURt_info:
         const lvl49_rURt_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.32877792 UTC

[section ""cstring" . lvl50_rURu_bytes" {
     lvl50_rURu_bytes:
         I8[] [116,111,69,110,117,109,123,86,101,99,69,108,101,109,125,58,32,116,97,103,32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.332138562 UTC

[section ""data" . GHC.Enum.$wlvl1_closure" {
     GHC.Enum.$wlvl1_closure:
         const GHC.Enum.$wlvl1_info;
         const 0;
 },
 sat_s17wu_entry() //  [R1]
         { []
         }
     {offset
       c1bvM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1bvN; else goto c1bvO;
       c1bvN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bvO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1bvJ_info;
           R4 = lvl49_rURt_closure;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17wu_info" {
     sat_s17wu_info:
         const sat_s17wu_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+592;
 },
 _c1bvJ() //  [R1, R2]
         { []
         }
     {offset
       c1bvJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1bvR; else goto c1bvQ;
       c1bvR: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1bvQ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1bvJ_info" {
     block_c1bvJ_info:
         const _c1bvJ;
         const 0;
         const 30;
 },
 GHC.Enum.$wlvl1_entry() //  [R2]
         { []
         }
     {offset
       c1bvU: // global
           _s17wq::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c1bvV; else goto c1bvW;
       c1bvW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1bvY; else goto c1bvX;
       c1bvY: // global
           HpAlloc = 24;
           goto c1bvV;
       c1bvV: // global
           R2 = _s17wq::I64;
           R1 = GHC.Enum.$wlvl1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bvX: // global
           I64[Hp - 16] = sat_s17wu_info;
           I64[Hp] = _s17wq::I64;
           I64[Sp - 8] = block_c1bvS_info;
           R3 = Hp - 16;
           R2 = lvl50_rURu_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$wlvl1_info" {
     GHC.Enum.$wlvl1_info:
         const GHC.Enum.$wlvl1_entry;
         const 0;
         const 3311419785230;
         const 4294967300;
         const S17Oj_srt+528;
 },
 _c1bvS() //  [R1]
         { []
         }
     {offset
       c1bvS: // global
           R3 = R1;
           R2 = lvl42_rURm_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1bvS_info" {
     block_c1bvS_info:
         const _c1bvS;
         const 0;
         const 12884901918;
         const S17Oj_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.341177986 UTC

[section ""data" . GHC.Enum.$w$ctoEnum1_closure" {
     GHC.Enum.$w$ctoEnum1_closure:
         const GHC.Enum.$w$ctoEnum1_info;
         const 0;
 },
 GHC.Enum.$w$ctoEnum1_entry() //  [R2]
         { []
         }
     {offset
       c1bww: // global
           _s17ww::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto c1bwE; else goto c1bwv;
       c1bwv: // global
           if (%MO_S_Gt_W64(_s17ww::I64, 9)) goto c1bwE; else goto c1bwF;
       c1bwE: // global
           R2 = _s17ww::I64;
           call GHC.Enum.$wlvl1_entry(R2) args: 8, res: 0, upd: 8;
       c1bwF: // global
           R1 = I64[(_s17ww::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$w$ctoEnum1_info" {
     GHC.Enum.$w$ctoEnum1_info:
         const GHC.Enum.$w$ctoEnum1_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const S17Oj_srt+600;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.345378775 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_$ctoEnum_closure" {
     GHC.Enum.$fEnumVecElem_$ctoEnum_closure:
         const GHC.Enum.$fEnumVecElem_$ctoEnum_info;
         const 0;
 },
 GHC.Enum.$fEnumVecElem_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c1bwU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1bwV; else goto c1bwW;
       c1bwV: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecElem_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bwW: // global
           I64[Sp - 8] = block_c1bwR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1bx0; else goto c1bwS;
       u1bx0: // global
           call _c1bwR(R1) args: 0, res: 0, upd: 0;
       c1bwS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem_$ctoEnum_info" {
     GHC.Enum.$fEnumVecElem_$ctoEnum_info:
         const GHC.Enum.$fEnumVecElem_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+608;
 },
 _c1bwR() //  [R1]
         { []
         }
     {offset
       c1bwR: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.$w$ctoEnum1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1bwR_info" {
     block_c1bwR_info:
         const _c1bwR;
         const 0;
         const 4294967326;
         const S17Oj_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.352699886 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_go_closure" {
     GHC.Enum.$fEnumVecElem_go_closure:
         const GHC.Enum.$fEnumVecElem_go_info;
 },
 sat_s17wG_entry() //  [R1]
         { []
         }
     {offset
       c1bxn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bxo; else goto c1bxp;
       c1bxo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bxp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17wE::I64 = I64[R1 + 16];
           if (_s17wE::I64 != 9) goto c1bxl; else goto c1bxm;
       c1bxl: // global
           R2 = _s17wE::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecElem_go_entry(R2) args: 24, res: 0, upd: 24;
       c1bxm: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17wG_info" {
     sat_s17wG_info:
         const sat_s17wG_entry;
         const 4294967296;
         const 17;
 },
 sat_s17wD_entry() //  [R1]
         { []
         }
     {offset
       c1bxw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bxx; else goto c1bxy;
       c1bxx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bxy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17wD_info" {
     sat_s17wD_info:
         const sat_s17wD_entry;
         const 4294967296;
         const 17;
 },
 GHC.Enum.$fEnumVecElem_go_entry() //  [R2]
         { []
         }
     {offset
       c1bxA: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1bxE; else goto c1bxD;
       c1bxE: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecElem_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bxD: // global
           I64[Hp - 64] = sat_s17wG_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17wD_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem_go_info" {
     GHC.Enum.$fEnumVecElem_go_info:
         const GHC.Enum.$fEnumVecElem_go_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.36062464 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_$cenumFrom_closure" {
     GHC.Enum.$fEnumVecElem_$cenumFrom_closure:
         const GHC.Enum.$fEnumVecElem_$cenumFrom_info;
 },
 GHC.Enum.$fEnumVecElem_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c1byc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1byd; else goto c1bye;
       c1byd: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecElem_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bye: // global
           I64[Sp - 8] = block_c1by8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1byt; else goto c1by9;
       u1byt: // global
           call _c1by8(R1) args: 0, res: 0, upd: 0;
       c1by9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem_$cenumFrom_info" {
     GHC.Enum.$fEnumVecElem_$cenumFrom_info:
         const GHC.Enum.$fEnumVecElem_$cenumFrom_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1by8() //  [R1]
         { []
         }
     {offset
       c1by8: // global
           _s17wJ::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Le_W64(_s17wJ::I64, 9)) goto c1byq; else goto c1byr;
       c1byq: // global
           R2 = _s17wJ::I64;
           Sp = Sp + 8;
           call GHC.Enum.$fEnumVecElem_go_entry(R2) args: 8, res: 0, upd: 8;
       c1byr: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1by8_info" {
     block_c1by8_info:
         const _c1by8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.38314394 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_$cenumFromThen_closure" {
     GHC.Enum.$fEnumVecElem_$cenumFromThen_closure:
         const GHC.Enum.$fEnumVecElem_$cenumFromThen_info;
 },
 sat_s17x2_entry() //  [R1]
         { []
         }
     {offset
       c1bzA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bzB; else goto c1bzC;
       c1bzB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bzC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17wX_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17x2_info" {
     sat_s17x2_info:
         const sat_s17x2_entry;
         const 8589934593;
         const 15;
 },
 sat_s17x0_entry() //  [R1]
         { []
         }
     {offset
       c1bzH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bzI; else goto c1bzJ;
       c1bzI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bzJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17x0_info" {
     sat_s17x0_info:
         const sat_s17x0_entry;
         const 4294967296;
         const 17;
 },
 sat_s17x3_entry() //  [R1]
         { []
         }
     {offset
       c1bzP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bzQ; else goto c1bzR;
       c1bzQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bzR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17x3_info" {
     sat_s17x3_info:
         const sat_s17x3_entry;
         const 4294967296;
         const 17;
 },
 go_dn_s17wX_entry() //  [R1, R2]
         { []
         }
     {offset
       c1bzV: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1bzZ; else goto c1bzY;
       c1bzZ: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bzY: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c1bzT; else goto c1bzU;
       c1bzT: // global
           _s17wV::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17x2_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17wV::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17x0_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bzU: // global
           I64[Hp - 80] = sat_s17x3_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1bA1::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1bA1::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17wX_info" {
     go_dn_s17wX_info:
         const go_dn_s17wX_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s17x4_entry() //  [R1]
         { []
         }
     {offset
       c1bA2: // global
           _s17x4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1bA3; else goto c1bA4;
       c1bA4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1bA6; else goto c1bA5;
       c1bA6: // global
           HpAlloc = 24;
           goto c1bA3;
       c1bA3: // global
           R1 = _s17x4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bA5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17x4::P64;
           _s17wQ::I64 = I64[_s17x4::P64 + 24];
           _s17wV::I64 = _s17wQ::I64 - I64[_s17x4::P64 + 16];
           I64[Hp - 16] = go_dn_s17wX_info;
           I64[Hp - 8] = _s17wV::I64;
           I64[Hp] = 9 - _s17wV::I64;
           R2 = _s17wQ::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17wX_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17x4_info" {
     sat_s17x4_info:
         const sat_s17x4_entry;
         const 8589934592;
         const 20;
 },
 sat_s17wU_entry() //  [R1]
         { []
         }
     {offset
       c1bAb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bAc; else goto c1bAd;
       c1bAc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bAd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17wU_info" {
     sat_s17wU_info:
         const sat_s17wU_entry;
         const 4294967296;
         const 17;
 },
 sat_s17x6_entry() //  [R1]
         { []
         }
     {offset
       c1bAm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bAn; else goto c1bAo;
       c1bAn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bAo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17x6_info" {
     sat_s17x6_info:
         const sat_s17x6_entry;
         const 4294967296;
         const 17;
 },
 sat_s17xg_entry() //  [R1]
         { []
         }
     {offset
       c1bAR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bAS; else goto c1bAT;
       c1bAS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bAT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17xb_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17xg_info" {
     sat_s17xg_info:
         const sat_s17xg_entry;
         const 8589934593;
         const 15;
 },
 sat_s17xe_entry() //  [R1]
         { []
         }
     {offset
       c1bAY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bAZ; else goto c1bB0;
       c1bAZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bB0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17xe_info" {
     sat_s17xe_info:
         const sat_s17xe_entry;
         const 4294967296;
         const 17;
 },
 sat_s17xh_entry() //  [R1]
         { []
         }
     {offset
       c1bB6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bB7; else goto c1bB8;
       c1bB7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bB8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17xh_info" {
     sat_s17xh_info:
         const sat_s17xh_entry;
         const 4294967296;
         const 17;
 },
 go_up_s17xb_entry() //  [R1, R2]
         { []
         }
     {offset
       c1bBc: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1bBg; else goto c1bBf;
       c1bBg: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bBf: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c1bBa; else goto c1bBb;
       c1bBa: // global
           _s17x9::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17xg_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17x9::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17xe_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bBb: // global
           I64[Hp - 80] = sat_s17xh_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1bBi::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1bBi::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17xb_info" {
     go_up_s17xb_info:
         const go_up_s17xb_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s17xi_entry() //  [R1]
         { []
         }
     {offset
       c1bBj: // global
           _s17xi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1bBk; else goto c1bBl;
       c1bBl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1bBn; else goto c1bBm;
       c1bBn: // global
           HpAlloc = 24;
           goto c1bBk;
       c1bBk: // global
           R1 = _s17xi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bBm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17xi::P64;
           _s17wQ::I64 = I64[_s17xi::P64 + 24];
           _s17x9::I64 = _s17wQ::I64 - I64[_s17xi::P64 + 16];
           I64[Hp - 16] = go_up_s17xb_info;
           I64[Hp - 8] = _s17x9::I64;
           I64[Hp] = 9 - _s17x9::I64;
           R2 = _s17wQ::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17xb_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17xi_info" {
     sat_s17xi_info:
         const sat_s17xi_entry;
         const 8589934592;
         const 20;
 },
 sat_s17x8_entry() //  [R1]
         { []
         }
     {offset
       c1bBs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bBt; else goto c1bBu;
       c1bBt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bBu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17x8_info" {
     sat_s17x8_info:
         const sat_s17x8_entry;
         const 4294967296;
         const 17;
 },
 sat_s17xk_entry() //  [R1]
         { []
         }
     {offset
       c1bBD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bBE; else goto c1bBF;
       c1bBE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bBF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17xk_info" {
     sat_s17xk_info:
         const sat_s17xk_entry;
         const 4294967296;
         const 17;
 },
 sat_s17xv_entry() //  [R1]
         { []
         }
     {offset
       c1bCb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bCc; else goto c1bCd;
       c1bCc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bCd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17xq_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17xv_info" {
     sat_s17xv_info:
         const sat_s17xv_entry;
         const 8589934593;
         const 15;
 },
 sat_s17xt_entry() //  [R1]
         { []
         }
     {offset
       c1bCi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bCj; else goto c1bCk;
       c1bCj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bCk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17xt_info" {
     sat_s17xt_info:
         const sat_s17xt_entry;
         const 4294967296;
         const 17;
 },
 sat_s17xw_entry() //  [R1]
         { []
         }
     {offset
       c1bCq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bCr; else goto c1bCs;
       c1bCr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bCs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17xw_info" {
     sat_s17xw_info:
         const sat_s17xw_entry;
         const 4294967296;
         const 17;
 },
 go_dn_s17xq_entry() //  [R1, R2]
         { []
         }
     {offset
       c1bCw: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1bCA; else goto c1bCz;
       c1bCA: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bCz: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c1bCu; else goto c1bCv;
       c1bCu: // global
           _s17xo::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17xv_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17xo::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17xt_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bCv: // global
           I64[Hp - 80] = sat_s17xw_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1bCC::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1bCC::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17xq_info" {
     go_dn_s17xq_info:
         const go_dn_s17xq_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s17xx_entry() //  [R1]
         { []
         }
     {offset
       c1bCD: // global
           _s17xx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1bCE; else goto c1bCF;
       c1bCF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1bCH; else goto c1bCG;
       c1bCH: // global
           HpAlloc = 24;
           goto c1bCE;
       c1bCE: // global
           R1 = _s17xx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bCG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17xx::P64;
           _s17wQ::I64 = I64[_s17xx::P64 + 24];
           _s17xo::I64 = _s17wQ::I64 - I64[_s17xx::P64 + 16];
           I64[Hp - 16] = go_dn_s17xq_info;
           I64[Hp - 8] = _s17xo::I64;
           I64[Hp] = 0 - _s17xo::I64;
           R2 = _s17wQ::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17xq_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17xx_info" {
     sat_s17xx_info:
         const sat_s17xx_entry;
         const 8589934592;
         const 20;
 },
 sat_s17xn_entry() //  [R1]
         { []
         }
     {offset
       c1bCM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bCN; else goto c1bCO;
       c1bCN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bCO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17xn_info" {
     sat_s17xn_info:
         const sat_s17xn_entry;
         const 4294967296;
         const 17;
 },
 sat_s17xz_entry() //  [R1]
         { []
         }
     {offset
       c1bCX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bCY; else goto c1bCZ;
       c1bCY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bCZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17xz_info" {
     sat_s17xz_info:
         const sat_s17xz_entry;
         const 4294967296;
         const 17;
 },
 sat_s17xJ_entry() //  [R1]
         { []
         }
     {offset
       c1bDs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bDt; else goto c1bDu;
       c1bDt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bDu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17xE_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17xJ_info" {
     sat_s17xJ_info:
         const sat_s17xJ_entry;
         const 8589934593;
         const 15;
 },
 sat_s17xH_entry() //  [R1]
         { []
         }
     {offset
       c1bDz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bDA; else goto c1bDB;
       c1bDA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bDB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17xH_info" {
     sat_s17xH_info:
         const sat_s17xH_entry;
         const 4294967296;
         const 17;
 },
 sat_s17xK_entry() //  [R1]
         { []
         }
     {offset
       c1bDH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bDI; else goto c1bDJ;
       c1bDI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bDJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17xK_info" {
     sat_s17xK_info:
         const sat_s17xK_entry;
         const 4294967296;
         const 17;
 },
 go_up_s17xE_entry() //  [R1, R2]
         { []
         }
     {offset
       c1bDN: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1bDR; else goto c1bDQ;
       c1bDR: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bDQ: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c1bDL; else goto c1bDM;
       c1bDL: // global
           _s17xC::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17xJ_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17xC::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17xH_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bDM: // global
           I64[Hp - 80] = sat_s17xK_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1bDT::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1bDT::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17xE_info" {
     go_up_s17xE_info:
         const go_up_s17xE_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s17xL_entry() //  [R1]
         { []
         }
     {offset
       c1bDU: // global
           _s17xL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1bDV; else goto c1bDW;
       c1bDW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1bDY; else goto c1bDX;
       c1bDY: // global
           HpAlloc = 24;
           goto c1bDV;
       c1bDV: // global
           R1 = _s17xL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bDX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17xL::P64;
           _s17wQ::I64 = I64[_s17xL::P64 + 24];
           _s17xC::I64 = _s17wQ::I64 - I64[_s17xL::P64 + 16];
           I64[Hp - 16] = go_up_s17xE_info;
           I64[Hp - 8] = _s17xC::I64;
           I64[Hp] = 0 - _s17xC::I64;
           R2 = _s17wQ::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17xE_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17xL_info" {
     sat_s17xL_info:
         const sat_s17xL_entry;
         const 8589934592;
         const 20;
 },
 sat_s17xB_entry() //  [R1]
         { []
         }
     {offset
       c1bE3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bE4; else goto c1bE5;
       c1bE4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bE5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17xB_info" {
     sat_s17xB_info:
         const sat_s17xB_entry;
         const 4294967296;
         const 17;
 },
 sat_s17xN_entry() //  [R1]
         { []
         }
     {offset
       c1bEe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bEf; else goto c1bEg;
       c1bEf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bEg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17xN_info" {
     sat_s17xN_info:
         const sat_s17xN_entry;
         const 4294967296;
         const 17;
 },
 GHC.Enum.$fEnumVecElem_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c1bEh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bEi; else goto c1bEj;
       c1bEi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecElem_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1bEj: // global
           I64[Sp - 16] = block_c1byN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1bFg; else goto c1byO;
       u1bFg: // global
           call _c1byN(R1) args: 0, res: 0, upd: 0;
       c1byO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem_$cenumFromThen_info" {
     GHC.Enum.$fEnumVecElem_$cenumFromThen_info:
         const GHC.Enum.$fEnumVecElem_$cenumFromThen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1byN() //  [R1]
         { []
         }
     {offset
       c1byN: // global
           _s17wO::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c1byV_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s17wO::I64;
           if (R1 & 7 != 0) goto u1bFd; else goto c1byW;
       u1bFd: // global
           call _c1byV(R1) args: 0, res: 0, upd: 0;
       c1byW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1byN_info" {
     block_c1byN_info:
         const _c1byN;
         const 1;
         const 30;
 },
 _c1byV() //  [R1]
         { []
         }
     {offset
       c1byV: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c1bz1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1byV_info" {
     block_c1byV_info:
         const _c1byV;
         const 65;
         const 30;
 },
 _c1bz1() //  []
         { []
         }
     {offset
       c1bz1: // global
           Hp = Hp + 80;
           _s17wQ::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c1bEt; else goto c1bEs;
       c1bEt: // global
           HpAlloc = 80;
           I64[Sp] = block_c1bz0_info;
           R1 = _s17wQ::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1bEs: // global
           _s17wO::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s17wO::I64,
                            _s17wQ::I64)) goto c1bEO; else goto c1bF8;
       c1bEO: // global
           if (%MO_S_Lt_W64(_s17wQ::I64,
                            _s17wO::I64)) goto c1bED; else goto c1bEM;
       c1bED: // global
           if (%MO_S_Le_W64(9, _s17wQ::I64)) goto c1bEw; else goto c1bEB;
       c1bEw: // global
           I64[Hp - 72] = sat_s17x4_info;
           I64[Hp - 56] = _s17wO::I64;
           I64[Hp - 48] = _s17wQ::I64;
           I64[Hp - 40] = sat_s17wU_info;
           I64[Hp - 24] = _s17wO::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bEB: // global
           if (%MO_S_Gt_W64(9, _s17wO::I64)) goto c1bF5; else goto c1bEz;
       c1bEz: // global
           I64[Hp - 72] = sat_s17x6_info;
           I64[Hp - 56] = _s17wO::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1bEx::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1bEx::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bEM: // global
           if (%MO_S_Ge_W64(9, _s17wQ::I64)) goto c1bEG; else goto c1bEL;
       c1bEG: // global
           I64[Hp - 72] = sat_s17xi_info;
           I64[Hp - 56] = _s17wO::I64;
           I64[Hp - 48] = _s17wQ::I64;
           I64[Hp - 40] = sat_s17x8_info;
           I64[Hp - 24] = _s17wO::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bEL: // global
           if (%MO_S_Lt_W64(9, _s17wO::I64)) goto c1bF5; else goto c1bEJ;
       c1bEJ: // global
           I64[Hp - 72] = sat_s17xk_info;
           I64[Hp - 56] = _s17wO::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1bEH::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1bEH::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bF8: // global
           if (%MO_S_Lt_W64(_s17wQ::I64,
                            _s17wO::I64)) goto c1bEY; else goto c1bF7;
       c1bEY: // global
           if (%MO_S_Le_W64(0, _s17wQ::I64)) goto c1bER; else goto c1bEW;
       c1bER: // global
           I64[Hp - 72] = sat_s17xx_info;
           I64[Hp - 56] = _s17wO::I64;
           I64[Hp - 48] = _s17wQ::I64;
           I64[Hp - 40] = sat_s17xn_info;
           I64[Hp - 24] = _s17wO::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bEW: // global
           if (%MO_S_Gt_W64(0, _s17wO::I64)) goto c1bF5; else goto c1bEU;
       c1bEU: // global
           I64[Hp - 72] = sat_s17xz_info;
           I64[Hp - 56] = _s17wO::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1bES::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1bES::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bF7: // global
           if (%MO_S_Ge_W64(0, _s17wQ::I64)) goto c1bF1; else goto c1bF6;
       c1bF1: // global
           I64[Hp - 72] = sat_s17xL_info;
           I64[Hp - 56] = _s17wO::I64;
           I64[Hp - 48] = _s17wQ::I64;
           I64[Hp - 40] = sat_s17xB_info;
           I64[Hp - 24] = _s17wO::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bF6: // global
           if (%MO_S_Lt_W64(0, _s17wO::I64)) goto c1bF5; else goto c1bF4;
       c1bF5: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bF4: // global
           I64[Hp - 72] = sat_s17xN_info;
           I64[Hp - 56] = _s17wO::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1bF2::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1bF2::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1bz0() //  [R1]
         { []
         }
     {offset
       c1bz0: // global
           I64[Sp] = R1;
           call _c1bz1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1bz0_info" {
     block_c1bz0_info:
         const _c1bz0;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.44957671 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_$cenumFromTo_closure" {
     GHC.Enum.$fEnumVecElem_$cenumFromTo_closure:
         const GHC.Enum.$fEnumVecElem_$cenumFromTo_info;
         const 0;
 },
 sat_s17y2_entry() //  [R1]
         { []
         }
     {offset
       c1bLc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bLd; else goto c1bLe;
       c1bLd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bLe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17xW::I64 = I64[R1 + 32];
           if (_s17xW::I64 == I64[R1 + 24]) goto c1bLb; else goto c1bLa;
       c1bLb: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1bLa: // global
           R2 = _s17xW::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s17xV_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17y2_info" {
     sat_s17y2_info:
         const sat_s17y2_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+600;
 },
 sat_s17xZ_entry() //  [R1]
         { []
         }
     {offset
       c1bLq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bLr; else goto c1bLz;
       c1bLr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bLz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17xW::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17xW::I64, 0)) goto c1bLx; else goto c1bLp;
       c1bLp: // global
           if (%MO_S_Gt_W64(_s17xW::I64, 9)) goto c1bLx; else goto c1bLy;
       c1bLx: // global
           R2 = _s17xW::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
       c1bLy: // global
           R1 = I64[(_s17xW::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17xZ_info" {
     sat_s17xZ_info:
         const sat_s17xZ_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+600;
 },
 go_s17xV_entry() //  [R1, R2]
         { []
         }
     {offset
       c1bLB: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1bLF; else goto c1bLE;
       c1bLF: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bLE: // global
           _s17xT::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17y2_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17xT::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17xZ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s17xV_info" {
     go_s17xV_info:
         const go_s17xV_entry;
         const 4294967296;
         const 4294967306;
         const 4294967300;
         const S17Oj_srt+600;
 },
 GHC.Enum.$fEnumVecElem_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c1bLG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bLH; else goto c1bLI;
       c1bLH: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecElem_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1bLI: // global
           I64[Sp - 16] = block_c1bKF_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1bM3; else goto c1bKG;
       u1bM3: // global
           call _c1bKF(R1) args: 0, res: 0, upd: 0;
       c1bKG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem_$cenumFromTo_info" {
     GHC.Enum.$fEnumVecElem_$cenumFromTo_info:
         const GHC.Enum.$fEnumVecElem_$cenumFromTo_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S17Oj_srt+600;
 },
 _c1bKF() //  [R1]
         { []
         }
     {offset
       c1bKF: // global
           _s17xR::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c1bKN_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s17xR::I64;
           if (R1 & 7 != 0) goto u1bM0; else goto c1bKO;
       u1bM0: // global
           call _c1bKN(R1) args: 0, res: 0, upd: 0;
       c1bKO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1bKF_info" {
     block_c1bKF_info:
         const _c1bKF;
         const 1;
         const 4294967326;
         const S17Oj_srt+600;
 },
 _c1bKN() //  [R1]
         { []
         }
     {offset
       c1bKN: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c1bKT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1bKN_info" {
     block_c1bKN_info:
         const _c1bKN;
         const 65;
         const 4294967326;
         const S17Oj_srt+600;
 },
 _c1bKT() //  []
         { []
         }
     {offset
       c1bKT: // global
           Hp = Hp + 16;
           _s17xT::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c1bLS; else goto c1bLR;
       c1bLS: // global
           HpAlloc = 16;
           I64[Sp] = block_c1bKS_info;
           R1 = _s17xT::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1bLR: // global
           _s17xR::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s17xR::I64,
                            _s17xT::I64)) goto c1bLU; else goto c1bLV;
       c1bLU: // global
           I64[Hp - 8] = go_s17xV_info;
           I64[Hp] = _s17xT::I64;
           R2 = _s17xR::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call go_s17xV_entry(R2, R1) args: 8, res: 0, upd: 8;
       c1bLV: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1bKS() //  [R1]
         { []
         }
     {offset
       c1bKS: // global
           I64[Sp] = R1;
           call _c1bKT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1bKS_info" {
     block_c1bKS_info:
         const _c1bKS;
         const 65;
         const 4294967326;
         const S17Oj_srt+600;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.475439058 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_$cenumFromThenTo_closure" {
     GHC.Enum.$fEnumVecElem_$cenumFromThenTo_closure:
         const GHC.Enum.$fEnumVecElem_$cenumFromThenTo_info;
         const 0;
 },
 sat_s17yq_entry() //  [R1]
         { []
         }
     {offset
       c1bNT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bNU; else goto c1bNV;
       c1bNU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bNV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17yj_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17yq_info" {
     sat_s17yq_info:
         const sat_s17yq_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+600;
 },
 sat_s17yo_entry() //  [R1]
         { []
         }
     {offset
       c1bO5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bO6; else goto c1bOe;
       c1bO6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bOe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17yk::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17yk::I64, 0)) goto c1bOc; else goto c1bO4;
       c1bO4: // global
           if (%MO_S_Gt_W64(_s17yk::I64, 9)) goto c1bOc; else goto c1bOd;
       c1bOc: // global
           R2 = _s17yk::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
       c1bOd: // global
           R1 = I64[(_s17yk::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17yo_info" {
     sat_s17yo_info:
         const sat_s17yo_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+600;
 },
 sat_s17yt_entry() //  [R1]
         { []
         }
     {offset
       c1bOp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bOq; else goto c1bOy;
       c1bOq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bOy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17yk::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17yk::I64, 0)) goto c1bOw; else goto c1bOo;
       c1bOo: // global
           if (%MO_S_Gt_W64(_s17yk::I64, 9)) goto c1bOw; else goto c1bOx;
       c1bOw: // global
           R2 = _s17yk::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
       c1bOx: // global
           R1 = I64[(_s17yk::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17yt_info" {
     sat_s17yt_info:
         const sat_s17yt_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+600;
 },
 go_dn_s17yj_entry() //  [R1, R2]
         { []
         }
     {offset
       c1bOC: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1bOG; else goto c1bOF;
       c1bOG: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bOF: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c1bOA; else goto c1bOB;
       c1bOA: // global
           _s17yh::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17yq_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17yh::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17yo_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bOB: // global
           I64[Hp - 80] = sat_s17yt_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1bOI::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1bOI::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17yj_info" {
     go_dn_s17yj_info:
         const go_dn_s17yj_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+600;
 },
 sat_s17yu_entry() //  [R1]
         { []
         }
     {offset
       c1bOJ: // global
           _s17yu::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1bOK; else goto c1bOL;
       c1bOL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1bON; else goto c1bOM;
       c1bON: // global
           HpAlloc = 24;
           goto c1bOK;
       c1bOK: // global
           R1 = _s17yu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bOM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17yu::P64;
           _s17y9::I64 = I64[_s17yu::P64 + 24];
           _s17yh::I64 = _s17y9::I64 - I64[_s17yu::P64 + 16];
           _s17yi::I64 = I64[_s17yu::P64 + 32] - _s17yh::I64;
           I64[Hp - 16] = go_dn_s17yj_info;
           I64[Hp - 8] = _s17yh::I64;
           I64[Hp] = _s17yi::I64;
           R2 = _s17y9::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17yj_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17yu_info" {
     sat_s17yu_info:
         const sat_s17yu_entry;
         const 12884901888;
         const 4294967311;
         const S17Oj_srt+600;
 },
 sat_s17yg_entry() //  [R1]
         { []
         }
     {offset
       c1bOX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bOY; else goto c1bP6;
       c1bOY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bP6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17y7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17y7::I64, 0)) goto c1bP4; else goto c1bOW;
       c1bOW: // global
           if (%MO_S_Gt_W64(_s17y7::I64, 9)) goto c1bP4; else goto c1bP5;
       c1bP4: // global
           R2 = _s17y7::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
       c1bP5: // global
           R1 = I64[(_s17y7::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17yg_info" {
     sat_s17yg_info:
         const sat_s17yg_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+600;
 },
 sat_s17yy_entry() //  [R1]
         { []
         }
     {offset
       c1bPk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bPl; else goto c1bPt;
       c1bPl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bPt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17y7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17y7::I64, 0)) goto c1bPr; else goto c1bPj;
       c1bPj: // global
           if (%MO_S_Gt_W64(_s17y7::I64, 9)) goto c1bPr; else goto c1bPs;
       c1bPr: // global
           R2 = _s17y7::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
       c1bPs: // global
           R1 = I64[(_s17y7::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17yy_info" {
     sat_s17yy_info:
         const sat_s17yy_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+600;
 },
 sat_s17yM_entry() //  [R1]
         { []
         }
     {offset
       c1bPW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bPX; else goto c1bPY;
       c1bPX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bPY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17yF_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17yM_info" {
     sat_s17yM_info:
         const sat_s17yM_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+600;
 },
 sat_s17yK_entry() //  [R1]
         { []
         }
     {offset
       c1bQ8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bQ9; else goto c1bQh;
       c1bQ9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bQh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17yG::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17yG::I64, 0)) goto c1bQf; else goto c1bQ7;
       c1bQ7: // global
           if (%MO_S_Gt_W64(_s17yG::I64, 9)) goto c1bQf; else goto c1bQg;
       c1bQf: // global
           R2 = _s17yG::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
       c1bQg: // global
           R1 = I64[(_s17yG::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17yK_info" {
     sat_s17yK_info:
         const sat_s17yK_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+600;
 },
 sat_s17yP_entry() //  [R1]
         { []
         }
     {offset
       c1bQs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bQt; else goto c1bQB;
       c1bQt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bQB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17yG::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17yG::I64, 0)) goto c1bQz; else goto c1bQr;
       c1bQr: // global
           if (%MO_S_Gt_W64(_s17yG::I64, 9)) goto c1bQz; else goto c1bQA;
       c1bQz: // global
           R2 = _s17yG::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
       c1bQA: // global
           R1 = I64[(_s17yG::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17yP_info" {
     sat_s17yP_info:
         const sat_s17yP_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+600;
 },
 go_up_s17yF_entry() //  [R1, R2]
         { []
         }
     {offset
       c1bQF: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1bQJ; else goto c1bQI;
       c1bQJ: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bQI: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c1bQD; else goto c1bQE;
       c1bQD: // global
           _s17yD::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17yM_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17yD::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17yK_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bQE: // global
           I64[Hp - 80] = sat_s17yP_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1bQL::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1bQL::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17yF_info" {
     go_up_s17yF_info:
         const go_up_s17yF_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+600;
 },
 sat_s17yQ_entry() //  [R1]
         { []
         }
     {offset
       c1bQM: // global
           _s17yQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1bQN; else goto c1bQO;
       c1bQO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1bQQ; else goto c1bQP;
       c1bQQ: // global
           HpAlloc = 24;
           goto c1bQN;
       c1bQN: // global
           R1 = _s17yQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bQP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17yQ::P64;
           _s17y9::I64 = I64[_s17yQ::P64 + 24];
           _s17yD::I64 = _s17y9::I64 - I64[_s17yQ::P64 + 16];
           _s17yE::I64 = I64[_s17yQ::P64 + 32] - _s17yD::I64;
           I64[Hp - 16] = go_up_s17yF_info;
           I64[Hp - 8] = _s17yD::I64;
           I64[Hp] = _s17yE::I64;
           R2 = _s17y9::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17yF_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17yQ_info" {
     sat_s17yQ_info:
         const sat_s17yQ_entry;
         const 12884901888;
         const 4294967311;
         const S17Oj_srt+600;
 },
 sat_s17yC_entry() //  [R1]
         { []
         }
     {offset
       c1bR0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bR1; else goto c1bR9;
       c1bR1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bR9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17y7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17y7::I64, 0)) goto c1bR7; else goto c1bQZ;
       c1bQZ: // global
           if (%MO_S_Gt_W64(_s17y7::I64, 9)) goto c1bR7; else goto c1bR8;
       c1bR7: // global
           R2 = _s17y7::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
       c1bR8: // global
           R1 = I64[(_s17y7::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17yC_info" {
     sat_s17yC_info:
         const sat_s17yC_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+600;
 },
 sat_s17yU_entry() //  [R1]
         { []
         }
     {offset
       c1bRn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bRo; else goto c1bRw;
       c1bRo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bRw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17y7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17y7::I64, 0)) goto c1bRu; else goto c1bRm;
       c1bRm: // global
           if (%MO_S_Gt_W64(_s17y7::I64, 9)) goto c1bRu; else goto c1bRv;
       c1bRu: // global
           R2 = _s17y7::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
       c1bRv: // global
           R1 = I64[(_s17y7::I64 << 3) + GHC.Types.VecElem_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17yU_info" {
     sat_s17yU_info:
         const sat_s17yU_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+600;
 },
 GHC.Enum.$fEnumVecElem_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1bRx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1bRy; else goto c1bRz;
       c1bRy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecElem_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1bRz: // global
           I64[Sp - 24] = block_c1bN1_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1bSg; else goto c1bN2;
       u1bSg: // global
           call _c1bN1(R1) args: 0, res: 0, upd: 0;
       c1bN2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecElem_$cenumFromThenTo_info" {
     GHC.Enum.$fEnumVecElem_$cenumFromThenTo_info:
         const GHC.Enum.$fEnumVecElem_$cenumFromThenTo_entry;
         const 0;
         const 73014444046;
         const 12884901911;
         const S17Oj_srt+600;
 },
 _c1bN1() //  [R1]
         { []
         }
     {offset
       c1bN1: // global
           _s17y7::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c1bN9_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s17y7::I64;
           if (R1 & 7 != 0) goto u1bSc; else goto c1bNa;
       u1bSc: // global
           call _c1bN9(R1) args: 0, res: 0, upd: 0;
       c1bNa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1bN1_info" {
     block_c1bN1_info:
         const _c1bN1;
         const 2;
         const 4294967326;
         const S17Oj_srt+600;
 },
 _c1bN9() //  [R1]
         { []
         }
     {offset
       c1bN9: // global
           _s17y9::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c1bNh_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s17y9::I64;
           if (R1 & 7 != 0) goto u1bSd; else goto c1bNi;
       u1bSd: // global
           call _c1bNh(R1) args: 0, res: 0, upd: 0;
       c1bNi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1bN9_info" {
     block_c1bN9_info:
         const _c1bN9;
         const 66;
         const 4294967326;
         const S17Oj_srt+600;
 },
 _c1bNh() //  [R1]
         { []
         }
     {offset
       c1bNh: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c1bNn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1bNh_info" {
     block_c1bNh_info:
         const _c1bNh;
         const 194;
         const 4294967326;
         const S17Oj_srt+600;
 },
 _c1bNn() //  []
         { []
         }
     {offset
       c1bNn: // global
           Hp = Hp + 88;
           _s17yb::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c1bRN; else goto c1bRM;
       c1bRN: // global
           HpAlloc = 88;
           I64[Sp] = block_c1bNm_info;
           R1 = _s17yb::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1bRM: // global
           _s17y7::I64 = I64[Sp + 8];
           _s17y9::I64 = I64[Sp + 16];
           if (%MO_S_Lt_W64(_s17y9::I64,
                            _s17y7::I64)) goto c1bRX; else goto c1bS6;
       c1bRX: // global
           if (%MO_S_Le_W64(_s17yb::I64,
                            _s17y9::I64)) goto c1bRQ; else goto c1bRV;
       c1bRQ: // global
           I64[Hp - 80] = sat_s17yu_info;
           I64[Hp - 64] = _s17y7::I64;
           I64[Hp - 56] = _s17y9::I64;
           I64[Hp - 48] = _s17yb::I64;
           I64[Hp - 40] = sat_s17yg_info;
           I64[Hp - 24] = _s17y7::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bRV: // global
           if (%MO_S_Gt_W64(_s17yb::I64,
                            _s17y7::I64)) goto c1bS4; else goto c1bRT;
       c1bRT: // global
           I64[Hp - 80] = sat_s17yy_info;
           I64[Hp - 64] = _s17y7::I64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1bRR::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1bRR::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bS6: // global
           if (%MO_S_Ge_W64(_s17yb::I64,
                            _s17y9::I64)) goto c1bS0; else goto c1bS5;
       c1bS0: // global
           I64[Hp - 80] = sat_s17yQ_info;
           I64[Hp - 64] = _s17y7::I64;
           I64[Hp - 56] = _s17y9::I64;
           I64[Hp - 48] = _s17yb::I64;
           I64[Hp - 40] = sat_s17yC_info;
           I64[Hp - 24] = _s17y7::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bS5: // global
           if (%MO_S_Lt_W64(_s17yb::I64,
                            _s17y7::I64)) goto c1bS4; else goto c1bS3;
       c1bS4: // global
           Hp = Hp - 88;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bS3: // global
           I64[Hp - 80] = sat_s17yU_info;
           I64[Hp - 64] = _s17y7::I64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1bS1::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1bS1::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1bNm() //  [R1]
         { []
         }
     {offset
       c1bNm: // global
           I64[Sp] = R1;
           call _c1bNn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1bNm_info" {
     block_c1bNm_info:
         const _c1bNm;
         const 194;
         const 4294967326;
         const S17Oj_srt+600;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.515182917 UTC

[section ""data" . GHC.Enum.$fEnumVecElem_closure" {
     GHC.Enum.$fEnumVecElem_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumVecElem_$csucc_closure+1;
         const GHC.Enum.$fEnumVecElem_$cpred_closure+1;
         const GHC.Enum.$fEnumVecElem_$ctoEnum_closure+1;
         const GHC.Enum.$fEnumVecElem_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumVecElem_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumVecElem_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumVecElem_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumVecElem_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.516875246 UTC

[section ""data" . lvl51_rURv_closure" {
     lvl51_rURv_closure:
         const GHC.Types.I#_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.518496776 UTC

[section ""data" . lvl52_rURw_closure" {
     lvl52_rURw_closure:
         const GHC.Types.I#_con_info;
         const 4;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.520095702 UTC

[section ""data" . lvl53_rURx_closure" {
     lvl53_rURx_closure:
         const GHC.Types.I#_con_info;
         const 5;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.523060718 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_$cfromEnum_closure" {
     GHC.Enum.$fEnumVecCount_$cfromEnum_closure:
         const GHC.Enum.$fEnumVecCount_$cfromEnum_info;
 },
 GHC.Enum.$fEnumVecCount_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c1bVA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1bVB; else goto c1bVC;
       c1bVB: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bVC: // global
           I64[Sp - 8] = block_c1bVp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1bVV; else goto c1bVq;
       u1bVV: // global
           call _c1bVp(R1) args: 0, res: 0, upd: 0;
       c1bVq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_$cfromEnum_info" {
     GHC.Enum.$fEnumVecCount_$cfromEnum_info:
         const GHC.Enum.$fEnumVecCount_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1bVp() //  [R1]
         { []
         }
     {offset
       c1bVp: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c1bVt;
               case 2 : goto c1bVu;
               case 3 : goto c1bVv;
               case 4 : goto c1bVw;
               case 5 : goto c1bVx;
               case 6 : goto c1bVy;
           }
       c1bVy: // global
           R1 = lvl53_rURx_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bVx: // global
           R1 = lvl52_rURw_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bVw: // global
           R1 = lvl51_rURv_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bVv: // global
           R1 = GHC.Enum.$fEnumOrdering4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bVu: // global
           R1 = GHC.Enum.$fEnumBool4_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bVt: // global
           R1 = GHC.Enum.$fEnum()2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1bVp_info" {
     block_c1bVp_info:
         const _c1bVp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.528696842 UTC

[section ""data" . lvl54_rURy_closure" {
     lvl54_rURy_closure:
         const GHC.Types.I#_con_info;
         const 885;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.531150509 UTC

[section ""data" . lvl55_rURz_closure" {
     lvl55_rURz_closure:
         const GHC.Types.I#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.53289621 UTC

[section ""data" . lvl56_rURA_closure" {
     lvl56_rURA_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl35_rURf_closure;
         const lvl36_rURg_closure;
         const lvl38_rURi_closure;
         const lvl54_rURy_closure+1;
         const GHC.Enum.$fEnumBool4_closure+1;
         const lvl54_rURy_closure+1;
         const lvl55_rURz_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.534606444 UTC

[section ""data" . lvl57_rURB_closure" {
     lvl57_rURB_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl34_rURe_closure;
         const lvl56_rURA_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.536247068 UTC

[section ""cstring" . lvl58_rURC_bytes" {
     lvl58_rURC_bytes:
         I8[] [112,114,101,100,123,86,101,99,67,111,117,110,116,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,102,105,114,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.53903712 UTC

[section ""data" . GHC.Enum.$fEnumVecCount7_closure" {
     GHC.Enum.$fEnumVecCount7_closure:
         const GHC.Enum.$fEnumVecCount7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecCount7_entry() //  [R1]
         { []
         }
     {offset
       c1bWu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1bWv; else goto c1bWw;
       c1bWv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bWw: // global
           (_c1bWp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1bWp::I64 == 0) goto c1bWr; else goto c1bWq;
       c1bWr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1bWq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1bWp::I64;
           I64[Sp - 24] = block_c1bWs_info;
           R2 = lvl58_rURC_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount7_info" {
     GHC.Enum.$fEnumVecCount7_info:
         const GHC.Enum.$fEnumVecCount7_entry;
         const 0;
         const 70373039144981;
         const S17Oj_srt+528;
 },
 _c1bWs() //  [R1]
         { []
         }
     {offset
       c1bWs: // global
           R3 = R1;
           R2 = lvl57_rURB_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1bWs_info" {
     block_c1bWs_info:
         const _c1bWs;
         const 0;
         const 70373039144990;
         const S17Oj_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.545519531 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_$cpred_closure" {
     GHC.Enum.$fEnumVecCount_$cpred_closure:
         const GHC.Enum.$fEnumVecCount_$cpred_info;
         const 0;
 },
 GHC.Enum.$fEnumVecCount_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c1bX1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1bX2; else goto c1bX3;
       c1bX2: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bX3: // global
           I64[Sp - 8] = block_c1bWQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1bXm; else goto c1bWR;
       u1bXm: // global
           call _c1bWQ(R1) args: 0, res: 0, upd: 0;
       c1bWR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_$cpred_info" {
     GHC.Enum.$fEnumVecCount_$cpred_info:
         const GHC.Enum.$fEnumVecCount_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+648;
 },
 _c1bWQ() //  [R1]
         { []
         }
     {offset
       c1bWQ: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c1bWU;
               case 2 : goto c1bWV;
               case 3 : goto c1bWW;
               case 4 : goto c1bWX;
               case 5 : goto c1bWY;
               case 6 : goto c1bWZ;
           }
       c1bWZ: // global
           R1 = GHC.Types.Vec32_closure+5;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bWY: // global
           R1 = GHC.Types.Vec16_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bWX: // global
           R1 = GHC.Types.Vec8_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bWW: // global
           R1 = GHC.Types.Vec4_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bWV: // global
           R1 = GHC.Types.Vec2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bWU: // global
           R1 = GHC.Enum.$fEnumVecCount7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1bWQ_info" {
     block_c1bWQ_info:
         const _c1bWQ;
         const 0;
         const 4294967326;
         const S17Oj_srt+656;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.551011169 UTC

[section ""cstring" . lvl59_rURD_bytes" {
     lvl59_rURD_bytes:
         I8[] [115,117,99,99,123,86,101,99,67,111,117,110,116,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,108,97,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.554305935 UTC

[section ""data" . GHC.Enum.$fEnumVecCount8_closure" {
     GHC.Enum.$fEnumVecCount8_closure:
         const GHC.Enum.$fEnumVecCount8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecCount8_entry() //  [R1]
         { []
         }
     {offset
       c1bXW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1bXX; else goto c1bXY;
       c1bXX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bXY: // global
           (_c1bXR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1bXR::I64 == 0) goto c1bXT; else goto c1bXS;
       c1bXT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1bXS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1bXR::I64;
           I64[Sp - 24] = block_c1bXU_info;
           R2 = lvl59_rURD_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount8_info" {
     GHC.Enum.$fEnumVecCount8_info:
         const GHC.Enum.$fEnumVecCount8_entry;
         const 0;
         const 70373039144981;
         const S17Oj_srt+528;
 },
 _c1bXU() //  [R1]
         { []
         }
     {offset
       c1bXU: // global
           R3 = R1;
           R2 = lvl57_rURB_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1bXU_info" {
     block_c1bXU_info:
         const _c1bXU;
         const 0;
         const 70373039144990;
         const S17Oj_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.560507752 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_$csucc_closure" {
     GHC.Enum.$fEnumVecCount_$csucc_closure:
         const GHC.Enum.$fEnumVecCount_$csucc_info;
         const 0;
 },
 GHC.Enum.$fEnumVecCount_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c1bYt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1bYu; else goto c1bYv;
       c1bYu: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1bYv: // global
           I64[Sp - 8] = block_c1bYi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1bYO; else goto c1bYj;
       u1bYO: // global
           call _c1bYi(R1) args: 0, res: 0, upd: 0;
       c1bYj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_$csucc_info" {
     GHC.Enum.$fEnumVecCount_$csucc_info:
         const GHC.Enum.$fEnumVecCount_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+664;
 },
 _c1bYi() //  [R1]
         { []
         }
     {offset
       c1bYi: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c1bYm;
               case 2 : goto c1bYn;
               case 3 : goto c1bYo;
               case 4 : goto c1bYp;
               case 5 : goto c1bYq;
               case 6 : goto c1bYr;
           }
       c1bYr: // global
           R1 = GHC.Enum.$fEnumVecCount8_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1bYq: // global
           R1 = GHC.Types.Vec64_closure+6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bYp: // global
           R1 = GHC.Types.Vec32_closure+5;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bYo: // global
           R1 = GHC.Types.Vec16_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bYn: // global
           R1 = GHC.Types.Vec8_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1bYm: // global
           R1 = GHC.Types.Vec4_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1bYi_info" {
     block_c1bYi_info:
         const _c1bYi;
         const 0;
         const 4294967326;
         const S17Oj_srt+672;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.568074932 UTC

[section ""data" . lvl60_rURE_closure" {
     lvl60_rURE_closure:
         const lvl60_rURE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl60_rURE_entry() //  [R1]
         { []
         }
     {offset
       c1bZo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1bZp; else goto c1bZq;
       c1bZp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bZq: // global
           (_c1bZi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1bZi::I64 == 0) goto c1bZk; else goto c1bZj;
       c1bZk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1bZj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1bZi::I64;
           I64[Sp - 24] = block_c1bZl_info;
           R4 = lvl47_rURr_closure;
           R3 = 5;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl60_rURE_info" {
     lvl60_rURE_info:
         const lvl60_rURE_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt+576;
 },
 _c1bZl() //  [R1, R2]
         { []
         }
     {offset
       c1bZl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1bZt; else goto c1bZs;
       c1bZt: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1bZs: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1bZl_info" {
     block_c1bZl_info:
         const _c1bZl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.573807613 UTC

[section ""data" . lvl61_rURF_closure" {
     lvl61_rURF_closure:
         const lvl61_rURF_info;
         const 0;
         const 0;
         const 0;
 },
 lvl61_rURF_entry() //  [R1]
         { []
         }
     {offset
       c1bZO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1bZP; else goto c1bZQ;
       c1bZP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1bZQ: // global
           (_c1bZL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1bZL::I64 == 0) goto c1bZN; else goto c1bZM;
       c1bZN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1bZM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1bZL::I64;
           R3 = lvl60_rURE_closure;
           R2 = lvl45_rURp_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl61_rURF_info" {
     lvl61_rURF_info:
         const lvl61_rURF_entry;
         const 0;
         const 4294967317;
         const S17Oj_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.577372625 UTC

[section ""cstring" . lvl62_rURG_bytes" {
     lvl62_rURG_bytes:
         I8[] [116,111,69,110,117,109,123,86,101,99,67,111,117,110,116,125,58,32,116,97,103,32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.580663461 UTC

[section ""data" . GHC.Enum.$wlvl_closure" {
     GHC.Enum.$wlvl_closure:
         const GHC.Enum.$wlvl_info;
         const 0;
 },
 sat_s17za_entry() //  [R1]
         { []
         }
     {offset
       c1c0b: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1c0c; else goto c1c0d;
       c1c0c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c0d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1c08_info;
           R4 = lvl61_rURF_closure;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17za_info" {
     sat_s17za_info:
         const sat_s17za_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+688;
 },
 _c1c08() //  [R1, R2]
         { []
         }
     {offset
       c1c08: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1c0g; else goto c1c0f;
       c1c0g: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1c0f: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1c08_info" {
     block_c1c08_info:
         const _c1c08;
         const 0;
         const 30;
 },
 GHC.Enum.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       c1c0j: // global
           _s17z6::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c1c0k; else goto c1c0l;
       c1c0l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1c0n; else goto c1c0m;
       c1c0n: // global
           HpAlloc = 24;
           goto c1c0k;
       c1c0k: // global
           R2 = _s17z6::I64;
           R1 = GHC.Enum.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1c0m: // global
           I64[Hp - 16] = sat_s17za_info;
           I64[Hp] = _s17z6::I64;
           I64[Sp - 8] = block_c1c0h_info;
           R3 = Hp - 16;
           R2 = lvl62_rURG_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$wlvl_info" {
     GHC.Enum.$wlvl_info:
         const GHC.Enum.$wlvl_entry;
         const 0;
         const 13581171921256462;
         const 4294967300;
         const S17Oj_srt+528;
 },
 _c1c0h() //  [R1]
         { []
         }
     {offset
       c1c0h: // global
           R3 = R1;
           R2 = lvl57_rURB_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1c0h_info" {
     block_c1c0h_info:
         const _c1c0h;
         const 0;
         const 70373039144990;
         const S17Oj_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.590046528 UTC

[section ""data" . GHC.Enum.$w$ctoEnum_closure" {
     GHC.Enum.$w$ctoEnum_closure:
         const GHC.Enum.$w$ctoEnum_info;
         const 0;
 },
 GHC.Enum.$w$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c1c0V: // global
           _s17zc::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto c1c13; else goto c1c0U;
       c1c0U: // global
           if (%MO_S_Gt_W64(_s17zc::I64, 5)) goto c1c13; else goto c1c14;
       c1c13: // global
           R2 = _s17zc::I64;
           call GHC.Enum.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c1c14: // global
           R1 = I64[(_s17zc::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$w$ctoEnum_info" {
     GHC.Enum.$w$ctoEnum_info:
         const GHC.Enum.$w$ctoEnum_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const S17Oj_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.594152254 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_$ctoEnum_closure" {
     GHC.Enum.$fEnumVecCount_$ctoEnum_closure:
         const GHC.Enum.$fEnumVecCount_$ctoEnum_info;
         const 0;
 },
 GHC.Enum.$fEnumVecCount_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c1c1j: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1c1k; else goto c1c1l;
       c1c1k: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1c1l: // global
           I64[Sp - 8] = block_c1c1g_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1c1p; else goto c1c1h;
       u1c1p: // global
           call _c1c1g(R1) args: 0, res: 0, upd: 0;
       c1c1h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_$ctoEnum_info" {
     GHC.Enum.$fEnumVecCount_$ctoEnum_info:
         const GHC.Enum.$fEnumVecCount_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+704;
 },
 _c1c1g() //  [R1]
         { []
         }
     {offset
       c1c1g: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.$w$ctoEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1c1g_info" {
     block_c1c1g_info:
         const _c1c1g;
         const 0;
         const 4294967326;
         const S17Oj_srt+712;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.600451761 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_go6_closure" {
     GHC.Enum.$fEnumVecCount_go6_closure:
         const GHC.Enum.$fEnumVecCount_go6_info;
 },
 sat_s17zm_entry() //  [R1]
         { []
         }
     {offset
       c1c1M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c1N; else goto c1c1O;
       c1c1N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c1O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17zk::I64 = I64[R1 + 16];
           if (_s17zk::I64 != 5) goto c1c1K; else goto c1c1L;
       c1c1K: // global
           R2 = _s17zk::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go6_entry(R2) args: 24, res: 0, upd: 24;
       c1c1L: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17zm_info" {
     sat_s17zm_info:
         const sat_s17zm_entry;
         const 4294967296;
         const 17;
 },
 sat_s17zj_entry() //  [R1]
         { []
         }
     {offset
       c1c1V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c1W; else goto c1c1X;
       c1c1W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c1X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17zj_info" {
     sat_s17zj_info:
         const sat_s17zj_entry;
         const 4294967296;
         const 17;
 },
 GHC.Enum.$fEnumVecCount_go6_entry() //  [R2]
         { []
         }
     {offset
       c1c1Z: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1c23; else goto c1c22;
       c1c23: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_go6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1c22: // global
           I64[Hp - 64] = sat_s17zm_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17zj_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_go6_info" {
     GHC.Enum.$fEnumVecCount_go6_info:
         const GHC.Enum.$fEnumVecCount_go6_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.608540078 UTC

[section ""data" . GHC.Enum.$fEnumVecCount6_closure" {
     GHC.Enum.$fEnumVecCount6_closure:
         const GHC.Enum.$fEnumVecCount6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecCount6_entry() //  [R1]
         { []
         }
     {offset
       c1c2z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c2A; else goto c1c2B;
       c1c2A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c2B: // global
           (_c1c2w::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1c2w::I64 == 0) goto c1c2y; else goto c1c2x;
       c1c2y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1c2x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1c2w::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go6_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount6_info" {
     GHC.Enum.$fEnumVecCount6_info:
         const GHC.Enum.$fEnumVecCount6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.612756527 UTC

[section ""data" . GHC.Enum.$fEnumVecCount5_closure" {
     GHC.Enum.$fEnumVecCount5_closure:
         const GHC.Enum.$fEnumVecCount5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecCount5_entry() //  [R1]
         { []
         }
     {offset
       c1c2Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c2R; else goto c1c2S;
       c1c2R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c2S: // global
           (_c1c2N::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1c2N::I64 == 0) goto c1c2P; else goto c1c2O;
       c1c2P: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1c2O: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1c2N::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go6_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount5_info" {
     GHC.Enum.$fEnumVecCount5_info:
         const GHC.Enum.$fEnumVecCount5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.616973979 UTC

[section ""data" . GHC.Enum.$fEnumVecCount4_closure" {
     GHC.Enum.$fEnumVecCount4_closure:
         const GHC.Enum.$fEnumVecCount4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecCount4_entry() //  [R1]
         { []
         }
     {offset
       c1c37: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c38; else goto c1c39;
       c1c38: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c39: // global
           (_c1c34::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1c34::I64 == 0) goto c1c36; else goto c1c35;
       c1c36: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1c35: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1c34::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go6_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount4_info" {
     GHC.Enum.$fEnumVecCount4_info:
         const GHC.Enum.$fEnumVecCount4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.62177845 UTC

[section ""data" . GHC.Enum.$fEnumVecCount3_closure" {
     GHC.Enum.$fEnumVecCount3_closure:
         const GHC.Enum.$fEnumVecCount3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecCount3_entry() //  [R1]
         { []
         }
     {offset
       c1c3o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c3p; else goto c1c3q;
       c1c3p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c3q: // global
           (_c1c3l::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1c3l::I64 == 0) goto c1c3n; else goto c1c3m;
       c1c3n: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1c3m: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1c3l::I64;
           R2 = 3;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go6_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount3_info" {
     GHC.Enum.$fEnumVecCount3_info:
         const GHC.Enum.$fEnumVecCount3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.626116291 UTC

[section ""data" . GHC.Enum.$fEnumVecCount2_closure" {
     GHC.Enum.$fEnumVecCount2_closure:
         const GHC.Enum.$fEnumVecCount2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecCount2_entry() //  [R1]
         { []
         }
     {offset
       c1c3F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c3G; else goto c1c3H;
       c1c3G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c3H: // global
           (_c1c3C::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1c3C::I64 == 0) goto c1c3E; else goto c1c3D;
       c1c3E: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1c3D: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1c3C::I64;
           R2 = 4;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go6_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount2_info" {
     GHC.Enum.$fEnumVecCount2_info:
         const GHC.Enum.$fEnumVecCount2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.630335418 UTC

[section ""data" . GHC.Enum.$fEnumVecCount1_closure" {
     GHC.Enum.$fEnumVecCount1_closure:
         const GHC.Enum.$fEnumVecCount1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumVecCount1_entry() //  [R1]
         { []
         }
     {offset
       c1c3W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c3X; else goto c1c3Y;
       c1c3X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c3Y: // global
           (_c1c3T::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1c3T::I64 == 0) goto c1c3V; else goto c1c3U;
       c1c3V: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1c3U: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1c3T::I64;
           R2 = 5;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go6_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount1_info" {
     GHC.Enum.$fEnumVecCount1_info:
         const GHC.Enum.$fEnumVecCount1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.635149955 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_$cenumFrom_closure" {
     GHC.Enum.$fEnumVecCount_$cenumFrom_closure:
         const GHC.Enum.$fEnumVecCount_$cenumFrom_info;
         const 0;
 },
 GHC.Enum.$fEnumVecCount_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c1c4m: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1c4n; else goto c1c4o;
       c1c4n: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1c4o: // global
           I64[Sp - 8] = block_c1c4b_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1c4H; else goto c1c4c;
       u1c4H: // global
           call _c1c4b(R1) args: 0, res: 0, upd: 0;
       c1c4c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_$cenumFrom_info" {
     GHC.Enum.$fEnumVecCount_$cenumFrom_info:
         const GHC.Enum.$fEnumVecCount_$cenumFrom_entry;
         const 0;
         const 545460846606;
         const 4294967301;
         const S17Oj_srt+720;
 },
 _c1c4b() //  [R1]
         { []
         }
     {offset
       c1c4b: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c1c4f;
               case 2 : goto c1c4g;
               case 3 : goto c1c4h;
               case 4 : goto c1c4i;
               case 5 : goto c1c4j;
               case 6 : goto c1c4k;
           }
       c1c4k: // global
           R1 = GHC.Enum.$fEnumVecCount1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1c4j: // global
           R1 = GHC.Enum.$fEnumVecCount2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1c4i: // global
           R1 = GHC.Enum.$fEnumVecCount3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1c4h: // global
           R1 = GHC.Enum.$fEnumVecCount4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1c4g: // global
           R1 = GHC.Enum.$fEnumVecCount5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1c4f: // global
           R1 = GHC.Enum.$fEnumVecCount6_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1c4b_info" {
     block_c1c4b_info:
         const _c1c4b;
         const 0;
         const 270582939678;
         const S17Oj_srt+728;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.658727073 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_$cenumFromThen_closure" {
     GHC.Enum.$fEnumVecCount_$cenumFromThen_closure:
         const GHC.Enum.$fEnumVecCount_$cenumFromThen_info;
 },
 sat_s17zG_entry() //  [R1]
         { []
         }
     {offset
       c1c5O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c5P; else goto c1c5Q;
       c1c5P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c5Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17zB_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17zG_info" {
     sat_s17zG_info:
         const sat_s17zG_entry;
         const 8589934593;
         const 15;
 },
 sat_s17zE_entry() //  [R1]
         { []
         }
     {offset
       c1c5V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c5W; else goto c1c5X;
       c1c5W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c5X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17zE_info" {
     sat_s17zE_info:
         const sat_s17zE_entry;
         const 4294967296;
         const 17;
 },
 sat_s17zH_entry() //  [R1]
         { []
         }
     {offset
       c1c63: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c64; else goto c1c65;
       c1c64: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c65: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17zH_info" {
     sat_s17zH_info:
         const sat_s17zH_entry;
         const 4294967296;
         const 17;
 },
 go_dn_s17zB_entry() //  [R1, R2]
         { []
         }
     {offset
       c1c69: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1c6d; else goto c1c6c;
       c1c6d: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1c6c: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c1c67; else goto c1c68;
       c1c67: // global
           _s17zz::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17zG_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17zz::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17zE_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1c68: // global
           I64[Hp - 80] = sat_s17zH_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1c6f::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1c6f::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17zB_info" {
     go_dn_s17zB_info:
         const go_dn_s17zB_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s17zI_entry() //  [R1]
         { []
         }
     {offset
       c1c6g: // global
           _s17zI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1c6h; else goto c1c6i;
       c1c6i: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1c6k; else goto c1c6j;
       c1c6k: // global
           HpAlloc = 24;
           goto c1c6h;
       c1c6h: // global
           R1 = _s17zI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c6j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17zI::P64;
           _s17zu::I64 = I64[_s17zI::P64 + 24];
           _s17zz::I64 = _s17zu::I64 - I64[_s17zI::P64 + 16];
           I64[Hp - 16] = go_dn_s17zB_info;
           I64[Hp - 8] = _s17zz::I64;
           I64[Hp] = 5 - _s17zz::I64;
           R2 = _s17zu::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17zB_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17zI_info" {
     sat_s17zI_info:
         const sat_s17zI_entry;
         const 8589934592;
         const 20;
 },
 sat_s17zy_entry() //  [R1]
         { []
         }
     {offset
       c1c6p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c6q; else goto c1c6r;
       c1c6q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c6r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17zy_info" {
     sat_s17zy_info:
         const sat_s17zy_entry;
         const 4294967296;
         const 17;
 },
 sat_s17zK_entry() //  [R1]
         { []
         }
     {offset
       c1c6A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c6B; else goto c1c6C;
       c1c6B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c6C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17zK_info" {
     sat_s17zK_info:
         const sat_s17zK_entry;
         const 4294967296;
         const 17;
 },
 sat_s17zU_entry() //  [R1]
         { []
         }
     {offset
       c1c75: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c76; else goto c1c77;
       c1c76: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c77: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17zP_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17zU_info" {
     sat_s17zU_info:
         const sat_s17zU_entry;
         const 8589934593;
         const 15;
 },
 sat_s17zS_entry() //  [R1]
         { []
         }
     {offset
       c1c7c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c7d; else goto c1c7e;
       c1c7d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c7e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17zS_info" {
     sat_s17zS_info:
         const sat_s17zS_entry;
         const 4294967296;
         const 17;
 },
 sat_s17zV_entry() //  [R1]
         { []
         }
     {offset
       c1c7k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c7l; else goto c1c7m;
       c1c7l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c7m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17zV_info" {
     sat_s17zV_info:
         const sat_s17zV_entry;
         const 4294967296;
         const 17;
 },
 go_up_s17zP_entry() //  [R1, R2]
         { []
         }
     {offset
       c1c7q: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1c7u; else goto c1c7t;
       c1c7u: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1c7t: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c1c7o; else goto c1c7p;
       c1c7o: // global
           _s17zN::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17zU_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17zN::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17zS_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1c7p: // global
           I64[Hp - 80] = sat_s17zV_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1c7w::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1c7w::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17zP_info" {
     go_up_s17zP_info:
         const go_up_s17zP_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s17zW_entry() //  [R1]
         { []
         }
     {offset
       c1c7x: // global
           _s17zW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1c7y; else goto c1c7z;
       c1c7z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1c7B; else goto c1c7A;
       c1c7B: // global
           HpAlloc = 24;
           goto c1c7y;
       c1c7y: // global
           R1 = _s17zW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c7A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17zW::P64;
           _s17zu::I64 = I64[_s17zW::P64 + 24];
           _s17zN::I64 = _s17zu::I64 - I64[_s17zW::P64 + 16];
           I64[Hp - 16] = go_up_s17zP_info;
           I64[Hp - 8] = _s17zN::I64;
           I64[Hp] = 5 - _s17zN::I64;
           R2 = _s17zu::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17zP_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17zW_info" {
     sat_s17zW_info:
         const sat_s17zW_entry;
         const 8589934592;
         const 20;
 },
 sat_s17zM_entry() //  [R1]
         { []
         }
     {offset
       c1c7G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c7H; else goto c1c7I;
       c1c7H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c7I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17zM_info" {
     sat_s17zM_info:
         const sat_s17zM_entry;
         const 4294967296;
         const 17;
 },
 sat_s17zY_entry() //  [R1]
         { []
         }
     {offset
       c1c7R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c7S; else goto c1c7T;
       c1c7S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c7T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17zY_info" {
     sat_s17zY_info:
         const sat_s17zY_entry;
         const 4294967296;
         const 17;
 },
 sat_s17A9_entry() //  [R1]
         { []
         }
     {offset
       c1c8p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c8q; else goto c1c8r;
       c1c8q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c8r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17A4_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17A9_info" {
     sat_s17A9_info:
         const sat_s17A9_entry;
         const 8589934593;
         const 15;
 },
 sat_s17A7_entry() //  [R1]
         { []
         }
     {offset
       c1c8w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c8x; else goto c1c8y;
       c1c8x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c8y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17A7_info" {
     sat_s17A7_info:
         const sat_s17A7_entry;
         const 4294967296;
         const 17;
 },
 sat_s17Aa_entry() //  [R1]
         { []
         }
     {offset
       c1c8E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c8F; else goto c1c8G;
       c1c8F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c8G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Aa_info" {
     sat_s17Aa_info:
         const sat_s17Aa_entry;
         const 4294967296;
         const 17;
 },
 go_dn_s17A4_entry() //  [R1, R2]
         { []
         }
     {offset
       c1c8K: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1c8O; else goto c1c8N;
       c1c8O: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1c8N: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c1c8I; else goto c1c8J;
       c1c8I: // global
           _s17A2::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17A9_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17A2::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17A7_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1c8J: // global
           I64[Hp - 80] = sat_s17Aa_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1c8Q::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1c8Q::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17A4_info" {
     go_dn_s17A4_info:
         const go_dn_s17A4_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s17Ab_entry() //  [R1]
         { []
         }
     {offset
       c1c8R: // global
           _s17Ab::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1c8S; else goto c1c8T;
       c1c8T: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1c8V; else goto c1c8U;
       c1c8V: // global
           HpAlloc = 24;
           goto c1c8S;
       c1c8S: // global
           R1 = _s17Ab::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c8U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17Ab::P64;
           _s17zu::I64 = I64[_s17Ab::P64 + 24];
           _s17A2::I64 = _s17zu::I64 - I64[_s17Ab::P64 + 16];
           I64[Hp - 16] = go_dn_s17A4_info;
           I64[Hp - 8] = _s17A2::I64;
           I64[Hp] = 0 - _s17A2::I64;
           R2 = _s17zu::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17A4_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Ab_info" {
     sat_s17Ab_info:
         const sat_s17Ab_entry;
         const 8589934592;
         const 20;
 },
 sat_s17A1_entry() //  [R1]
         { []
         }
     {offset
       c1c90: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c91; else goto c1c92;
       c1c91: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c92: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17A1_info" {
     sat_s17A1_info:
         const sat_s17A1_entry;
         const 4294967296;
         const 17;
 },
 sat_s17Ad_entry() //  [R1]
         { []
         }
     {offset
       c1c9b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c9c; else goto c1c9d;
       c1c9c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c9d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Ad_info" {
     sat_s17Ad_info:
         const sat_s17Ad_entry;
         const 4294967296;
         const 17;
 },
 sat_s17An_entry() //  [R1]
         { []
         }
     {offset
       c1c9G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c9H; else goto c1c9I;
       c1c9H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c9I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17Ai_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17An_info" {
     sat_s17An_info:
         const sat_s17An_entry;
         const 8589934593;
         const 15;
 },
 sat_s17Al_entry() //  [R1]
         { []
         }
     {offset
       c1c9N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c9O; else goto c1c9P;
       c1c9O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c9P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Al_info" {
     sat_s17Al_info:
         const sat_s17Al_entry;
         const 4294967296;
         const 17;
 },
 sat_s17Ao_entry() //  [R1]
         { []
         }
     {offset
       c1c9V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1c9W; else goto c1c9X;
       c1c9W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1c9X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Ao_info" {
     sat_s17Ao_info:
         const sat_s17Ao_entry;
         const 4294967296;
         const 17;
 },
 go_up_s17Ai_entry() //  [R1, R2]
         { []
         }
     {offset
       c1ca1: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1ca5; else goto c1ca4;
       c1ca5: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1ca4: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c1c9Z; else goto c1ca0;
       c1c9Z: // global
           _s17Ag::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17An_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17Ag::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17Al_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1ca0: // global
           I64[Hp - 80] = sat_s17Ao_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1ca7::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1ca7::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17Ai_info" {
     go_up_s17Ai_info:
         const go_up_s17Ai_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s17Ap_entry() //  [R1]
         { []
         }
     {offset
       c1ca8: // global
           _s17Ap::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1ca9; else goto c1caa;
       c1caa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1cac; else goto c1cab;
       c1cac: // global
           HpAlloc = 24;
           goto c1ca9;
       c1ca9: // global
           R1 = _s17Ap::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cab: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17Ap::P64;
           _s17zu::I64 = I64[_s17Ap::P64 + 24];
           _s17Ag::I64 = _s17zu::I64 - I64[_s17Ap::P64 + 16];
           I64[Hp - 16] = go_up_s17Ai_info;
           I64[Hp - 8] = _s17Ag::I64;
           I64[Hp] = 0 - _s17Ag::I64;
           R2 = _s17zu::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17Ai_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Ap_info" {
     sat_s17Ap_info:
         const sat_s17Ap_entry;
         const 8589934592;
         const 20;
 },
 sat_s17Af_entry() //  [R1]
         { []
         }
     {offset
       c1cah: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cai; else goto c1caj;
       c1cai: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1caj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Af_info" {
     sat_s17Af_info:
         const sat_s17Af_entry;
         const 4294967296;
         const 17;
 },
 sat_s17Ar_entry() //  [R1]
         { []
         }
     {offset
       c1cas: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cat; else goto c1cau;
       c1cat: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cau: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Ar_info" {
     sat_s17Ar_info:
         const sat_s17Ar_entry;
         const 4294967296;
         const 17;
 },
 GHC.Enum.$fEnumVecCount_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c1caG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1caH; else goto c1caI;
       c1caH: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1caI: // global
           I64[Sp - 16] = block_c1cav_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1ccm; else goto c1caw;
       u1ccm: // global
           call _c1cav(R1) args: 0, res: 0, upd: 0;
       c1caw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_$cenumFromThen_info" {
     GHC.Enum.$fEnumVecCount_$cenumFromThen_info:
         const GHC.Enum.$fEnumVecCount_$cenumFromThen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1cav() //  [R1]
         { []
         }
     {offset
       c1cav: // global
           _s17zq::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c1caz;
               case 2 : goto c1caA;
               case 3 : goto c1caB;
               case 4 : goto c1caC;
               case 5 : goto c1caD;
               case 6 : goto c1caE;
           }
       c1caE: // global
           _s17zs::I64 = 5;
           goto s17zr;
       c1caD: // global
           _s17zs::I64 = 4;
           goto s17zr;
       c1caC: // global
           _s17zs::I64 = 3;
           goto s17zr;
       c1caB: // global
           _s17zs::I64 = 2;
           goto s17zr;
       c1caA: // global
           _s17zs::I64 = 1;
           goto s17zr;
       c1caz: // global
           _s17zs::I64 = 0;
           goto s17zr;
       s17zr: // global
           I64[Sp] = block_c1caJ_info;
           R1 = _s17zq::P64;
           I64[Sp + 8] = _s17zs::I64;
           if (R1 & 7 != 0) goto u1ccl; else goto c1cbt;
       u1ccl: // global
           call _c1caJ(R1) args: 0, res: 0, upd: 0;
       c1cbt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1cav_info" {
     block_c1cav_info:
         const _c1cav;
         const 1;
         const 30;
 },
 _c1caJ() //  [R1]
         { []
         }
     {offset
       c1caJ: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c1cbz;
               case 2 : goto c1cbD;
               case 3 : goto c1cbH;
               case 4 : goto c1cbL;
               case 5 : goto c1cbP;
               case 6 : goto c1cbT;
           }
       c1cbT: // global
           I64[Sp] = 5;
           goto u1ccs;
       c1cbP: // global
           I64[Sp] = 4;
           goto u1ccs;
       c1cbL: // global
           I64[Sp] = 3;
           goto u1ccs;
       c1cbH: // global
           I64[Sp] = 2;
           goto u1ccs;
       c1cbD: // global
           I64[Sp] = 1;
           goto u1ccs;
       c1cbz: // global
           I64[Sp] = 0;
           goto u1ccs;
       u1ccs: // global
           call _c1c5f() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1caJ_info" {
     block_c1caJ_info:
         const _c1caJ;
         const 65;
         const 30;
 },
 _c1c5f() //  []
         { []
         }
     {offset
       c1c5f: // global
           Hp = Hp + 80;
           _s17zu::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c1caN; else goto c1caM;
       c1caN: // global
           HpAlloc = 80;
           I64[Sp] = block_c1c5e_info;
           R1 = _s17zu::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1caM: // global
           _s17zs::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s17zs::I64,
                            _s17zu::I64)) goto c1cb8; else goto c1cbs;
       c1cb8: // global
           if (%MO_S_Lt_W64(_s17zu::I64,
                            _s17zs::I64)) goto c1caX; else goto c1cb6;
       c1caX: // global
           if (%MO_S_Le_W64(5, _s17zu::I64)) goto c1caQ; else goto c1caV;
       c1caQ: // global
           I64[Hp - 72] = sat_s17zI_info;
           I64[Hp - 56] = _s17zs::I64;
           I64[Hp - 48] = _s17zu::I64;
           I64[Hp - 40] = sat_s17zy_info;
           I64[Hp - 24] = _s17zs::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1caV: // global
           if (%MO_S_Gt_W64(5, _s17zs::I64)) goto c1cbp; else goto c1caT;
       c1caT: // global
           I64[Hp - 72] = sat_s17zK_info;
           I64[Hp - 56] = _s17zs::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1caR::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1caR::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cb6: // global
           if (%MO_S_Ge_W64(5, _s17zu::I64)) goto c1cb0; else goto c1cb5;
       c1cb0: // global
           I64[Hp - 72] = sat_s17zW_info;
           I64[Hp - 56] = _s17zs::I64;
           I64[Hp - 48] = _s17zu::I64;
           I64[Hp - 40] = sat_s17zM_info;
           I64[Hp - 24] = _s17zs::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cb5: // global
           if (%MO_S_Lt_W64(5, _s17zs::I64)) goto c1cbp; else goto c1cb3;
       c1cb3: // global
           I64[Hp - 72] = sat_s17zY_info;
           I64[Hp - 56] = _s17zs::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1cb1::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1cb1::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cbs: // global
           if (%MO_S_Lt_W64(_s17zu::I64,
                            _s17zs::I64)) goto c1cbi; else goto c1cbr;
       c1cbi: // global
           if (%MO_S_Le_W64(0, _s17zu::I64)) goto c1cbb; else goto c1cbg;
       c1cbb: // global
           I64[Hp - 72] = sat_s17Ab_info;
           I64[Hp - 56] = _s17zs::I64;
           I64[Hp - 48] = _s17zu::I64;
           I64[Hp - 40] = sat_s17A1_info;
           I64[Hp - 24] = _s17zs::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cbg: // global
           if (%MO_S_Gt_W64(0, _s17zs::I64)) goto c1cbp; else goto c1cbe;
       c1cbe: // global
           I64[Hp - 72] = sat_s17Ad_info;
           I64[Hp - 56] = _s17zs::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1cbc::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1cbc::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cbr: // global
           if (%MO_S_Ge_W64(0, _s17zu::I64)) goto c1cbl; else goto c1cbq;
       c1cbl: // global
           I64[Hp - 72] = sat_s17Ap_info;
           I64[Hp - 56] = _s17zs::I64;
           I64[Hp - 48] = _s17zu::I64;
           I64[Hp - 40] = sat_s17Af_info;
           I64[Hp - 24] = _s17zs::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cbq: // global
           if (%MO_S_Lt_W64(0, _s17zs::I64)) goto c1cbp; else goto c1cbo;
       c1cbp: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cbo: // global
           I64[Hp - 72] = sat_s17Ar_info;
           I64[Hp - 56] = _s17zs::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1cbm::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1cbm::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1c5e() //  [R1]
         { []
         }
     {offset
       c1c5e: // global
           I64[Sp] = R1;
           call _c1c5f() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1c5e_info" {
     block_c1c5e_info:
         const _c1c5e;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.724063772 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_go5_closure" {
     GHC.Enum.$fEnumVecCount_go5_closure:
         const GHC.Enum.$fEnumVecCount_go5_info;
         const 0;
 },
 sat_s17AA_entry() //  [R1]
         { []
         }
     {offset
       c1ci2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1ci3; else goto c1ci4;
       c1ci3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ci4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Ay::I64 = I64[R1 + 16];
           if (_s17Ay::I64 != 0) goto c1ci0; else goto c1ci1;
       c1ci0: // global
           R2 = _s17Ay::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go5_entry(R2) args: 24, res: 0, upd: 24;
       c1ci1: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17AA_info" {
     sat_s17AA_info:
         const sat_s17AA_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+776;
 },
 sat_s17Ax_entry() //  [R1]
         { []
         }
     {offset
       c1cig: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cih; else goto c1cip;
       c1cih: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cip: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Au::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Au::I64, 0)) goto c1cin; else goto c1cif;
       c1cif: // global
           if (%MO_S_Gt_W64(_s17Au::I64, 5)) goto c1cin; else goto c1cio;
       c1cin: // global
           R2 = _s17Au::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cio: // global
           R1 = I64[(_s17Au::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Ax_info" {
     sat_s17Ax_info:
         const sat_s17Ax_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 GHC.Enum.$fEnumVecCount_go5_entry() //  [R2]
         { []
         }
     {offset
       c1cir: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1civ; else goto c1ciu;
       c1civ: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_go5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1ciu: // global
           I64[Hp - 64] = sat_s17AA_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17Ax_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_go5_info" {
     GHC.Enum.$fEnumVecCount_go5_info:
         const GHC.Enum.$fEnumVecCount_go5_entry;
         const 0;
         const 4402341478414;
         const 4294967300;
         const S17Oj_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.733285605 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_go4_closure" {
     GHC.Enum.$fEnumVecCount_go4_closure:
         const GHC.Enum.$fEnumVecCount_go4_info;
         const 0;
 },
 sat_s17AH_entry() //  [R1]
         { []
         }
     {offset
       c1cj7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cj8; else goto c1cj9;
       c1cj8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cj9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17AF::I64 = I64[R1 + 16];
           if (_s17AF::I64 != 1) goto c1cj5; else goto c1cj6;
       c1cj5: // global
           R2 = _s17AF::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go4_entry(R2) args: 24, res: 0, upd: 24;
       c1cj6: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17AH_info" {
     sat_s17AH_info:
         const sat_s17AH_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+784;
 },
 sat_s17AE_entry() //  [R1]
         { []
         }
     {offset
       c1cjl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cjm; else goto c1cju;
       c1cjm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cju: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17AB::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17AB::I64, 0)) goto c1cjs; else goto c1cjk;
       c1cjk: // global
           if (%MO_S_Gt_W64(_s17AB::I64, 5)) goto c1cjs; else goto c1cjt;
       c1cjs: // global
           R2 = _s17AB::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cjt: // global
           R1 = I64[(_s17AB::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17AE_info" {
     sat_s17AE_info:
         const sat_s17AE_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 GHC.Enum.$fEnumVecCount_go4_entry() //  [R2]
         { []
         }
     {offset
       c1cjw: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1cjA; else goto c1cjz;
       c1cjA: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_go4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1cjz: // global
           I64[Hp - 64] = sat_s17AH_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17AE_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_go4_info" {
     GHC.Enum.$fEnumVecCount_go4_info:
         const GHC.Enum.$fEnumVecCount_go4_entry;
         const 0;
         const 8800387989518;
         const 4294967300;
         const S17Oj_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.743058425 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_go3_closure" {
     GHC.Enum.$fEnumVecCount_go3_closure:
         const GHC.Enum.$fEnumVecCount_go3_info;
         const 0;
 },
 sat_s17AO_entry() //  [R1]
         { []
         }
     {offset
       c1ckc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1ckd; else goto c1cke;
       c1ckd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cke: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17AM::I64 = I64[R1 + 16];
           if (_s17AM::I64 != 2) goto c1cka; else goto c1ckb;
       c1cka: // global
           R2 = _s17AM::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go3_entry(R2) args: 24, res: 0, upd: 24;
       c1ckb: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17AO_info" {
     sat_s17AO_info:
         const sat_s17AO_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+792;
 },
 sat_s17AL_entry() //  [R1]
         { []
         }
     {offset
       c1ckq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1ckr; else goto c1ckz;
       c1ckr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ckz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17AI::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17AI::I64, 0)) goto c1ckx; else goto c1ckp;
       c1ckp: // global
           if (%MO_S_Gt_W64(_s17AI::I64, 5)) goto c1ckx; else goto c1cky;
       c1ckx: // global
           R2 = _s17AI::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cky: // global
           R1 = I64[(_s17AI::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17AL_info" {
     sat_s17AL_info:
         const sat_s17AL_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 GHC.Enum.$fEnumVecCount_go3_entry() //  [R2]
         { []
         }
     {offset
       c1ckB: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1ckF; else goto c1ckE;
       c1ckF: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_go3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1ckE: // global
           I64[Hp - 64] = sat_s17AO_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17AL_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_go3_info" {
     GHC.Enum.$fEnumVecCount_go3_info:
         const GHC.Enum.$fEnumVecCount_go3_entry;
         const 0;
         const 17596481011726;
         const 4294967300;
         const S17Oj_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.752542408 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_go2_closure" {
     GHC.Enum.$fEnumVecCount_go2_closure:
         const GHC.Enum.$fEnumVecCount_go2_info;
         const 0;
 },
 sat_s17AV_entry() //  [R1]
         { []
         }
     {offset
       c1clh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cli; else goto c1clj;
       c1cli: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1clj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17AT::I64 = I64[R1 + 16];
           if (_s17AT::I64 != 3) goto c1clf; else goto c1clg;
       c1clf: // global
           R2 = _s17AT::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go2_entry(R2) args: 24, res: 0, upd: 24;
       c1clg: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17AV_info" {
     sat_s17AV_info:
         const sat_s17AV_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+800;
 },
 sat_s17AS_entry() //  [R1]
         { []
         }
     {offset
       c1clv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1clw; else goto c1clE;
       c1clw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1clE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17AP::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17AP::I64, 0)) goto c1clC; else goto c1clu;
       c1clu: // global
           if (%MO_S_Gt_W64(_s17AP::I64, 5)) goto c1clC; else goto c1clD;
       c1clC: // global
           R2 = _s17AP::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1clD: // global
           R1 = I64[(_s17AP::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17AS_info" {
     sat_s17AS_info:
         const sat_s17AS_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 GHC.Enum.$fEnumVecCount_go2_entry() //  [R2]
         { []
         }
     {offset
       c1clG: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1clK; else goto c1clJ;
       c1clK: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1clJ: // global
           I64[Hp - 64] = sat_s17AV_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17AS_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_go2_info" {
     GHC.Enum.$fEnumVecCount_go2_info:
         const GHC.Enum.$fEnumVecCount_go2_entry;
         const 0;
         const 35188667056142;
         const 4294967300;
         const S17Oj_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.761642622 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_go1_closure" {
     GHC.Enum.$fEnumVecCount_go1_closure:
         const GHC.Enum.$fEnumVecCount_go1_info;
         const 0;
 },
 sat_s17B2_entry() //  [R1]
         { []
         }
     {offset
       c1cmm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cmn; else goto c1cmo;
       c1cmn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cmo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17B0::I64 = I64[R1 + 16];
           if (_s17B0::I64 != 4) goto c1cmk; else goto c1cml;
       c1cmk: // global
           R2 = _s17B0::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go1_entry(R2) args: 24, res: 0, upd: 24;
       c1cml: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17B2_info" {
     sat_s17B2_info:
         const sat_s17B2_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+808;
 },
 sat_s17AZ_entry() //  [R1]
         { []
         }
     {offset
       c1cmA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cmB; else goto c1cmJ;
       c1cmB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cmJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17AW::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17AW::I64, 0)) goto c1cmH; else goto c1cmz;
       c1cmz: // global
           if (%MO_S_Gt_W64(_s17AW::I64, 5)) goto c1cmH; else goto c1cmI;
       c1cmH: // global
           R2 = _s17AW::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cmI: // global
           R1 = I64[(_s17AW::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17AZ_info" {
     sat_s17AZ_info:
         const sat_s17AZ_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 GHC.Enum.$fEnumVecCount_go1_entry() //  [R2]
         { []
         }
     {offset
       c1cmL: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1cmP; else goto c1cmO;
       c1cmP: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1cmO: // global
           I64[Hp - 64] = sat_s17B2_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17AZ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_go1_info" {
     GHC.Enum.$fEnumVecCount_go1_info:
         const GHC.Enum.$fEnumVecCount_go1_entry;
         const 0;
         const 70373039144974;
         const 4294967300;
         const S17Oj_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.770661967 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_go_closure" {
     GHC.Enum.$fEnumVecCount_go_closure:
         const GHC.Enum.$fEnumVecCount_go_info;
         const 0;
 },
 sat_s17B9_entry() //  [R1]
         { []
         }
     {offset
       c1cnr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cns; else goto c1cnt;
       c1cns: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cnt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17B7::I64 = I64[R1 + 16];
           if (_s17B7::I64 != 5) goto c1cnp; else goto c1cnq;
       c1cnp: // global
           R2 = _s17B7::I64 + 1;
           Sp = Sp - 16;
           call GHC.Enum.$fEnumVecCount_go_entry(R2) args: 24, res: 0, upd: 24;
       c1cnq: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17B9_info" {
     sat_s17B9_info:
         const sat_s17B9_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+816;
 },
 sat_s17B6_entry() //  [R1]
         { []
         }
     {offset
       c1cnF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cnG; else goto c1cnO;
       c1cnG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cnO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17B3::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17B3::I64, 0)) goto c1cnM; else goto c1cnE;
       c1cnE: // global
           if (%MO_S_Gt_W64(_s17B3::I64, 5)) goto c1cnM; else goto c1cnN;
       c1cnM: // global
           R2 = _s17B3::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cnN: // global
           R1 = I64[(_s17B3::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17B6_info" {
     sat_s17B6_info:
         const sat_s17B6_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 GHC.Enum.$fEnumVecCount_go_entry() //  [R2]
         { []
         }
     {offset
       c1cnQ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1cnU; else goto c1cnT;
       c1cnU: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1cnT: // global
           I64[Hp - 64] = sat_s17B9_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17B6_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_go_info" {
     GHC.Enum.$fEnumVecCount_go_info:
         const GHC.Enum.$fEnumVecCount_go_entry;
         const 0;
         const 140741783322638;
         const 4294967300;
         const S17Oj_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.782039879 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_$cenumFromTo_closure" {
     GHC.Enum.$fEnumVecCount_$cenumFromTo_closure:
         const GHC.Enum.$fEnumVecCount_$cenumFromTo_info;
         const 0;
 },
 GHC.Enum.$fEnumVecCount_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c1coB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1coC; else goto c1coD;
       c1coC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1coD: // global
           I64[Sp - 16] = block_c1coq_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1cpY; else goto c1cor;
       u1cpY: // global
           call _c1coq(R1) args: 0, res: 0, upd: 0;
       c1cor: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_$cenumFromTo_info" {
     GHC.Enum.$fEnumVecCount_$cenumFromTo_info:
         const GHC.Enum.$fEnumVecCount_$cenumFromTo_entry;
         const 0;
         const 545460846606;
         const 8589934607;
         const S17Oj_srt+776;
 },
 _c1coq() //  [R1]
         { []
         }
     {offset
       c1coq: // global
           _s17Bb::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c1cou;
               case 2 : goto c1cov;
               case 3 : goto c1cow;
               case 4 : goto c1cox;
               case 5 : goto c1coy;
               case 6 : goto c1coz;
           }
       c1coz: // global
           _s17Bd::I64 = 5;
           goto s17Bc;
       c1coy: // global
           _s17Bd::I64 = 4;
           goto s17Bc;
       c1cox: // global
           _s17Bd::I64 = 3;
           goto s17Bc;
       c1cow: // global
           _s17Bd::I64 = 2;
           goto s17Bc;
       c1cov: // global
           _s17Bd::I64 = 1;
           goto s17Bc;
       c1cou: // global
           _s17Bd::I64 = 0;
           goto s17Bc;
       s17Bc: // global
           I64[Sp] = block_c1coH_info;
           R1 = _s17Bb::P64;
           I64[Sp + 8] = _s17Bd::I64;
           if (R1 & 7 != 0) goto u1cpX; else goto c1coJ;
       u1cpX: // global
           call _c1coH(R1) args: 0, res: 0, upd: 0;
       c1coJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1coq_info" {
     block_c1coq_info:
         const _c1coq;
         const 1;
         const 270582939678;
         const S17Oj_srt+776;
 },
 _c1coH() //  [R1]
         { []
         }
     {offset
       c1coH: // global
           _s17Bd::I64 = I64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c1coU;
               case 2 : goto c1cp3;
               case 3 : goto c1cpc;
               case 4 : goto c1cpl;
               case 5 : goto c1cpu;
               case 6 : goto c1cpD;
           }
       c1cpD: // global
           if (%MO_S_Gt_W64(_s17Bd::I64, 5)) goto c1cpC; else goto c1cpB;
       c1cpB: // global
           R2 = _s17Bd::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumVecCount_go_entry(R2) args: 8, res: 0, upd: 8;
       c1cpu: // global
           if (%MO_S_Gt_W64(_s17Bd::I64, 4)) goto c1cpC; else goto c1cps;
       c1cps: // global
           R2 = _s17Bd::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumVecCount_go1_entry(R2) args: 8, res: 0, upd: 8;
       c1cpl: // global
           if (%MO_S_Gt_W64(_s17Bd::I64, 3)) goto c1cpC; else goto c1cpj;
       c1cpj: // global
           R2 = _s17Bd::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumVecCount_go2_entry(R2) args: 8, res: 0, upd: 8;
       c1cpc: // global
           if (%MO_S_Gt_W64(_s17Bd::I64, 2)) goto c1cpC; else goto c1cpa;
       c1cpa: // global
           R2 = _s17Bd::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumVecCount_go3_entry(R2) args: 8, res: 0, upd: 8;
       c1cp3: // global
           if (%MO_S_Gt_W64(_s17Bd::I64, 1)) goto c1cpC; else goto c1cp1;
       c1cp1: // global
           R2 = _s17Bd::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumVecCount_go4_entry(R2) args: 8, res: 0, upd: 8;
       c1coU: // global
           if (%MO_S_Gt_W64(_s17Bd::I64, 0)) goto c1cpC; else goto c1coR;
       c1cpC: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1coR: // global
           R2 = _s17Bd::I64;
           Sp = Sp + 16;
           call GHC.Enum.$fEnumVecCount_go5_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1coH_info" {
     block_c1coH_info:
         const _c1coH;
         const 65;
         const 270582939678;
         const S17Oj_srt+776;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:59.853701909 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_$cenumFromThenTo_closure" {
     GHC.Enum.$fEnumVecCount_$cenumFromThenTo_closure:
         const GHC.Enum.$fEnumVecCount_$cenumFromThenTo_info;
         const 0;
 },
 sat_s17BI_entry() //  [R1]
         { []
         }
     {offset
       c1crd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cre; else goto c1crf;
       c1cre: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1crf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17BB_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17BI_info" {
     sat_s17BI_info:
         const sat_s17BI_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+696;
 },
 sat_s17BG_entry() //  [R1]
         { []
         }
     {offset
       c1crp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1crq; else goto c1cry;
       c1crq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cry: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17BC::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17BC::I64, 0)) goto c1crw; else goto c1cro;
       c1cro: // global
           if (%MO_S_Gt_W64(_s17BC::I64, 5)) goto c1crw; else goto c1crx;
       c1crw: // global
           R2 = _s17BC::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1crx: // global
           R1 = I64[(_s17BC::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17BG_info" {
     sat_s17BG_info:
         const sat_s17BG_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17BL_entry() //  [R1]
         { []
         }
     {offset
       c1crJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1crK; else goto c1crS;
       c1crK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1crS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17BC::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17BC::I64, 0)) goto c1crQ; else goto c1crI;
       c1crI: // global
           if (%MO_S_Gt_W64(_s17BC::I64, 5)) goto c1crQ; else goto c1crR;
       c1crQ: // global
           R2 = _s17BC::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1crR: // global
           R1 = I64[(_s17BC::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17BL_info" {
     sat_s17BL_info:
         const sat_s17BL_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 go_dn_s17BB_entry() //  [R1, R2]
         { []
         }
     {offset
       c1crW: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1cs0; else goto c1crZ;
       c1cs0: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1crZ: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c1crU; else goto c1crV;
       c1crU: // global
           _s17Bz::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17BI_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17Bz::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17BG_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1crV: // global
           I64[Hp - 80] = sat_s17BL_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1cs2::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1cs2::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17BB_info" {
     go_dn_s17BB_info:
         const go_dn_s17BB_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+696;
 },
 sat_s17BM_entry() //  [R1]
         { []
         }
     {offset
       c1cs3: // global
           _s17BM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1cs4; else goto c1cs5;
       c1cs5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1cs7; else goto c1cs6;
       c1cs7: // global
           HpAlloc = 24;
           goto c1cs4;
       c1cs4: // global
           R1 = _s17BM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cs6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17BM::P64;
           _s17Bs::I64 = I64[_s17BM::P64 + 24];
           _s17Bz::I64 = _s17Bs::I64 - I64[_s17BM::P64 + 16];
           I64[Hp - 16] = go_dn_s17BB_info;
           I64[Hp - 8] = _s17Bz::I64;
           I64[Hp] = 0 - _s17Bz::I64;
           R2 = _s17Bs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17BB_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17BM_info" {
     sat_s17BM_info:
         const sat_s17BM_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+696;
 },
 sat_s17By_entry() //  [R1]
         { []
         }
     {offset
       c1csh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1csi; else goto c1csq;
       c1csi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1csq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cso; else goto c1csg;
       c1csg: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cso; else goto c1csp;
       c1cso: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1csp: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17By_info" {
     sat_s17By_info:
         const sat_s17By_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17BQ_entry() //  [R1]
         { []
         }
     {offset
       c1csE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1csF; else goto c1csN;
       c1csF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1csN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1csL; else goto c1csD;
       c1csD: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1csL; else goto c1csM;
       c1csL: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1csM: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17BQ_info" {
     sat_s17BQ_info:
         const sat_s17BQ_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17C4_entry() //  [R1]
         { []
         }
     {offset
       c1ctg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cth; else goto c1cti;
       c1cth: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cti: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17BX_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17C4_info" {
     sat_s17C4_info:
         const sat_s17C4_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+696;
 },
 sat_s17C2_entry() //  [R1]
         { []
         }
     {offset
       c1cts: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1ctt; else goto c1ctB;
       c1ctt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ctB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17BY::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17BY::I64, 0)) goto c1ctz; else goto c1ctr;
       c1ctr: // global
           if (%MO_S_Gt_W64(_s17BY::I64, 5)) goto c1ctz; else goto c1ctA;
       c1ctz: // global
           R2 = _s17BY::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1ctA: // global
           R1 = I64[(_s17BY::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17C2_info" {
     sat_s17C2_info:
         const sat_s17C2_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17C7_entry() //  [R1]
         { []
         }
     {offset
       c1ctM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1ctN; else goto c1ctV;
       c1ctN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ctV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17BY::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17BY::I64, 0)) goto c1ctT; else goto c1ctL;
       c1ctL: // global
           if (%MO_S_Gt_W64(_s17BY::I64, 5)) goto c1ctT; else goto c1ctU;
       c1ctT: // global
           R2 = _s17BY::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1ctU: // global
           R1 = I64[(_s17BY::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17C7_info" {
     sat_s17C7_info:
         const sat_s17C7_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 go_up_s17BX_entry() //  [R1, R2]
         { []
         }
     {offset
       c1ctZ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1cu3; else goto c1cu2;
       c1cu3: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1cu2: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c1ctX; else goto c1ctY;
       c1ctX: // global
           _s17BV::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17C4_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17BV::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17C2_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1ctY: // global
           I64[Hp - 80] = sat_s17C7_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1cu5::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1cu5::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17BX_info" {
     go_up_s17BX_info:
         const go_up_s17BX_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+696;
 },
 sat_s17C8_entry() //  [R1]
         { []
         }
     {offset
       c1cu6: // global
           _s17C8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1cu7; else goto c1cu8;
       c1cu8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1cua; else goto c1cu9;
       c1cua: // global
           HpAlloc = 24;
           goto c1cu7;
       c1cu7: // global
           R1 = _s17C8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cu9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17C8::P64;
           _s17Bs::I64 = I64[_s17C8::P64 + 24];
           _s17BV::I64 = _s17Bs::I64 - I64[_s17C8::P64 + 16];
           I64[Hp - 16] = go_up_s17BX_info;
           I64[Hp - 8] = _s17BV::I64;
           I64[Hp] = 0 - _s17BV::I64;
           R2 = _s17Bs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17BX_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17C8_info" {
     sat_s17C8_info:
         const sat_s17C8_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+696;
 },
 sat_s17BU_entry() //  [R1]
         { []
         }
     {offset
       c1cuk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cul; else goto c1cut;
       c1cul: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cut: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cur; else goto c1cuj;
       c1cuj: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cur; else goto c1cus;
       c1cur: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cus: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17BU_info" {
     sat_s17BU_info:
         const sat_s17BU_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17Cc_entry() //  [R1]
         { []
         }
     {offset
       c1cuH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cuI; else goto c1cuQ;
       c1cuI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cuQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cuO; else goto c1cuG;
       c1cuG: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cuO; else goto c1cuP;
       c1cuO: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cuP: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Cc_info" {
     sat_s17Cc_info:
         const sat_s17Cc_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17Cr_entry() //  [R1]
         { []
         }
     {offset
       c1cvn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cvo; else goto c1cvp;
       c1cvo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cvp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17Ck_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Cr_info" {
     sat_s17Cr_info:
         const sat_s17Cr_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+696;
 },
 sat_s17Cp_entry() //  [R1]
         { []
         }
     {offset
       c1cvz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cvA; else goto c1cvI;
       c1cvA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cvI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Cl::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Cl::I64, 0)) goto c1cvG; else goto c1cvy;
       c1cvy: // global
           if (%MO_S_Gt_W64(_s17Cl::I64, 5)) goto c1cvG; else goto c1cvH;
       c1cvG: // global
           R2 = _s17Cl::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cvH: // global
           R1 = I64[(_s17Cl::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Cp_info" {
     sat_s17Cp_info:
         const sat_s17Cp_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17Cu_entry() //  [R1]
         { []
         }
     {offset
       c1cvT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cvU; else goto c1cw2;
       c1cvU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cw2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Cl::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Cl::I64, 0)) goto c1cw0; else goto c1cvS;
       c1cvS: // global
           if (%MO_S_Gt_W64(_s17Cl::I64, 5)) goto c1cw0; else goto c1cw1;
       c1cw0: // global
           R2 = _s17Cl::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cw1: // global
           R1 = I64[(_s17Cl::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Cu_info" {
     sat_s17Cu_info:
         const sat_s17Cu_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 go_dn_s17Ck_entry() //  [R1, R2]
         { []
         }
     {offset
       c1cw6: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1cwa; else goto c1cw9;
       c1cwa: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1cw9: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c1cw4; else goto c1cw5;
       c1cw4: // global
           _s17Ci::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17Cr_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17Ci::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17Cp_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cw5: // global
           I64[Hp - 80] = sat_s17Cu_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1cwc::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1cwc::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17Ck_info" {
     go_dn_s17Ck_info:
         const go_dn_s17Ck_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+696;
 },
 sat_s17Cv_entry() //  [R1]
         { []
         }
     {offset
       c1cwd: // global
           _s17Cv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1cwe; else goto c1cwf;
       c1cwf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1cwh; else goto c1cwg;
       c1cwh: // global
           HpAlloc = 24;
           goto c1cwe;
       c1cwe: // global
           R1 = _s17Cv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cwg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17Cv::P64;
           _s17Bs::I64 = I64[_s17Cv::P64 + 24];
           _s17Ci::I64 = _s17Bs::I64 - I64[_s17Cv::P64 + 16];
           I64[Hp - 16] = go_dn_s17Ck_info;
           I64[Hp - 8] = _s17Ci::I64;
           I64[Hp] = 1 - _s17Ci::I64;
           R2 = _s17Bs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17Ck_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Cv_info" {
     sat_s17Cv_info:
         const sat_s17Cv_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+696;
 },
 sat_s17Ch_entry() //  [R1]
         { []
         }
     {offset
       c1cwr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cws; else goto c1cwA;
       c1cws: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cwA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cwy; else goto c1cwq;
       c1cwq: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cwy; else goto c1cwz;
       c1cwy: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cwz: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Ch_info" {
     sat_s17Ch_info:
         const sat_s17Ch_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17Cz_entry() //  [R1]
         { []
         }
     {offset
       c1cwO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cwP; else goto c1cwX;
       c1cwP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cwX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cwV; else goto c1cwN;
       c1cwN: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cwV; else goto c1cwW;
       c1cwV: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cwW: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Cz_info" {
     sat_s17Cz_info:
         const sat_s17Cz_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17CN_entry() //  [R1]
         { []
         }
     {offset
       c1cxq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cxr; else goto c1cxs;
       c1cxr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cxs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17CG_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17CN_info" {
     sat_s17CN_info:
         const sat_s17CN_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+696;
 },
 sat_s17CL_entry() //  [R1]
         { []
         }
     {offset
       c1cxC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cxD; else goto c1cxL;
       c1cxD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cxL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17CH::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17CH::I64, 0)) goto c1cxJ; else goto c1cxB;
       c1cxB: // global
           if (%MO_S_Gt_W64(_s17CH::I64, 5)) goto c1cxJ; else goto c1cxK;
       c1cxJ: // global
           R2 = _s17CH::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cxK: // global
           R1 = I64[(_s17CH::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17CL_info" {
     sat_s17CL_info:
         const sat_s17CL_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17CQ_entry() //  [R1]
         { []
         }
     {offset
       c1cxW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cxX; else goto c1cy5;
       c1cxX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cy5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17CH::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17CH::I64, 0)) goto c1cy3; else goto c1cxV;
       c1cxV: // global
           if (%MO_S_Gt_W64(_s17CH::I64, 5)) goto c1cy3; else goto c1cy4;
       c1cy3: // global
           R2 = _s17CH::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cy4: // global
           R1 = I64[(_s17CH::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17CQ_info" {
     sat_s17CQ_info:
         const sat_s17CQ_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 go_up_s17CG_entry() //  [R1, R2]
         { []
         }
     {offset
       c1cy9: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1cyd; else goto c1cyc;
       c1cyd: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1cyc: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c1cy7; else goto c1cy8;
       c1cy7: // global
           _s17CE::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17CN_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17CE::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17CL_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cy8: // global
           I64[Hp - 80] = sat_s17CQ_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1cyf::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1cyf::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17CG_info" {
     go_up_s17CG_info:
         const go_up_s17CG_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+696;
 },
 sat_s17CR_entry() //  [R1]
         { []
         }
     {offset
       c1cyg: // global
           _s17CR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1cyh; else goto c1cyi;
       c1cyi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1cyk; else goto c1cyj;
       c1cyk: // global
           HpAlloc = 24;
           goto c1cyh;
       c1cyh: // global
           R1 = _s17CR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cyj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17CR::P64;
           _s17Bs::I64 = I64[_s17CR::P64 + 24];
           _s17CE::I64 = _s17Bs::I64 - I64[_s17CR::P64 + 16];
           I64[Hp - 16] = go_up_s17CG_info;
           I64[Hp - 8] = _s17CE::I64;
           I64[Hp] = 1 - _s17CE::I64;
           R2 = _s17Bs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17CG_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17CR_info" {
     sat_s17CR_info:
         const sat_s17CR_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+696;
 },
 sat_s17CD_entry() //  [R1]
         { []
         }
     {offset
       c1cyu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cyv; else goto c1cyD;
       c1cyv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cyD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cyB; else goto c1cyt;
       c1cyt: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cyB; else goto c1cyC;
       c1cyB: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cyC: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17CD_info" {
     sat_s17CD_info:
         const sat_s17CD_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17CV_entry() //  [R1]
         { []
         }
     {offset
       c1cyR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cyS; else goto c1cz0;
       c1cyS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cz0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cyY; else goto c1cyQ;
       c1cyQ: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cyY; else goto c1cyZ;
       c1cyY: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cyZ: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17CV_info" {
     sat_s17CV_info:
         const sat_s17CV_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17Da_entry() //  [R1]
         { []
         }
     {offset
       c1czx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1czy; else goto c1czz;
       c1czy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1czz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17D3_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Da_info" {
     sat_s17Da_info:
         const sat_s17Da_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+696;
 },
 sat_s17D8_entry() //  [R1]
         { []
         }
     {offset
       c1czJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1czK; else goto c1czS;
       c1czK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1czS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17D4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17D4::I64, 0)) goto c1czQ; else goto c1czI;
       c1czI: // global
           if (%MO_S_Gt_W64(_s17D4::I64, 5)) goto c1czQ; else goto c1czR;
       c1czQ: // global
           R2 = _s17D4::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1czR: // global
           R1 = I64[(_s17D4::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17D8_info" {
     sat_s17D8_info:
         const sat_s17D8_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17Dd_entry() //  [R1]
         { []
         }
     {offset
       c1cA3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cA4; else goto c1cAc;
       c1cA4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cAc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17D4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17D4::I64, 0)) goto c1cAa; else goto c1cA2;
       c1cA2: // global
           if (%MO_S_Gt_W64(_s17D4::I64, 5)) goto c1cAa; else goto c1cAb;
       c1cAa: // global
           R2 = _s17D4::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cAb: // global
           R1 = I64[(_s17D4::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Dd_info" {
     sat_s17Dd_info:
         const sat_s17Dd_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 go_dn_s17D3_entry() //  [R1, R2]
         { []
         }
     {offset
       c1cAg: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1cAk; else goto c1cAj;
       c1cAk: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1cAj: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c1cAe; else goto c1cAf;
       c1cAe: // global
           _s17D1::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17Da_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17D1::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17D8_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cAf: // global
           I64[Hp - 80] = sat_s17Dd_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1cAm::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1cAm::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17D3_info" {
     go_dn_s17D3_info:
         const go_dn_s17D3_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+696;
 },
 sat_s17De_entry() //  [R1]
         { []
         }
     {offset
       c1cAn: // global
           _s17De::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1cAo; else goto c1cAp;
       c1cAp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1cAr; else goto c1cAq;
       c1cAr: // global
           HpAlloc = 24;
           goto c1cAo;
       c1cAo: // global
           R1 = _s17De::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cAq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17De::P64;
           _s17Bs::I64 = I64[_s17De::P64 + 24];
           _s17D1::I64 = _s17Bs::I64 - I64[_s17De::P64 + 16];
           I64[Hp - 16] = go_dn_s17D3_info;
           I64[Hp - 8] = _s17D1::I64;
           I64[Hp] = 2 - _s17D1::I64;
           R2 = _s17Bs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17D3_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17De_info" {
     sat_s17De_info:
         const sat_s17De_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+696;
 },
 sat_s17D0_entry() //  [R1]
         { []
         }
     {offset
       c1cAB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cAC; else goto c1cAK;
       c1cAC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cAK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cAI; else goto c1cAA;
       c1cAA: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cAI; else goto c1cAJ;
       c1cAI: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cAJ: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17D0_info" {
     sat_s17D0_info:
         const sat_s17D0_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17Di_entry() //  [R1]
         { []
         }
     {offset
       c1cAY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cAZ; else goto c1cB7;
       c1cAZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cB7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cB5; else goto c1cAX;
       c1cAX: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cB5; else goto c1cB6;
       c1cB5: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cB6: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Di_info" {
     sat_s17Di_info:
         const sat_s17Di_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17Dw_entry() //  [R1]
         { []
         }
     {offset
       c1cBA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cBB; else goto c1cBC;
       c1cBB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cBC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17Dp_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Dw_info" {
     sat_s17Dw_info:
         const sat_s17Dw_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+696;
 },
 sat_s17Du_entry() //  [R1]
         { []
         }
     {offset
       c1cBM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cBN; else goto c1cBV;
       c1cBN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cBV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Dq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Dq::I64, 0)) goto c1cBT; else goto c1cBL;
       c1cBL: // global
           if (%MO_S_Gt_W64(_s17Dq::I64, 5)) goto c1cBT; else goto c1cBU;
       c1cBT: // global
           R2 = _s17Dq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cBU: // global
           R1 = I64[(_s17Dq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Du_info" {
     sat_s17Du_info:
         const sat_s17Du_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17Dz_entry() //  [R1]
         { []
         }
     {offset
       c1cC6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cC7; else goto c1cCf;
       c1cC7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cCf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Dq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Dq::I64, 0)) goto c1cCd; else goto c1cC5;
       c1cC5: // global
           if (%MO_S_Gt_W64(_s17Dq::I64, 5)) goto c1cCd; else goto c1cCe;
       c1cCd: // global
           R2 = _s17Dq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cCe: // global
           R1 = I64[(_s17Dq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Dz_info" {
     sat_s17Dz_info:
         const sat_s17Dz_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 go_up_s17Dp_entry() //  [R1, R2]
         { []
         }
     {offset
       c1cCj: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1cCn; else goto c1cCm;
       c1cCn: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1cCm: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c1cCh; else goto c1cCi;
       c1cCh: // global
           _s17Dn::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17Dw_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17Dn::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17Du_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cCi: // global
           I64[Hp - 80] = sat_s17Dz_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1cCp::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1cCp::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17Dp_info" {
     go_up_s17Dp_info:
         const go_up_s17Dp_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+696;
 },
 sat_s17DA_entry() //  [R1]
         { []
         }
     {offset
       c1cCq: // global
           _s17DA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1cCr; else goto c1cCs;
       c1cCs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1cCu; else goto c1cCt;
       c1cCu: // global
           HpAlloc = 24;
           goto c1cCr;
       c1cCr: // global
           R1 = _s17DA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cCt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17DA::P64;
           _s17Bs::I64 = I64[_s17DA::P64 + 24];
           _s17Dn::I64 = _s17Bs::I64 - I64[_s17DA::P64 + 16];
           I64[Hp - 16] = go_up_s17Dp_info;
           I64[Hp - 8] = _s17Dn::I64;
           I64[Hp] = 2 - _s17Dn::I64;
           R2 = _s17Bs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17Dp_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17DA_info" {
     sat_s17DA_info:
         const sat_s17DA_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+696;
 },
 sat_s17Dm_entry() //  [R1]
         { []
         }
     {offset
       c1cCE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cCF; else goto c1cCN;
       c1cCF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cCN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cCL; else goto c1cCD;
       c1cCD: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cCL; else goto c1cCM;
       c1cCL: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cCM: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Dm_info" {
     sat_s17Dm_info:
         const sat_s17Dm_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17DE_entry() //  [R1]
         { []
         }
     {offset
       c1cD1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cD2; else goto c1cDa;
       c1cD2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cDa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cD8; else goto c1cD0;
       c1cD0: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cD8; else goto c1cD9;
       c1cD8: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cD9: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17DE_info" {
     sat_s17DE_info:
         const sat_s17DE_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17DT_entry() //  [R1]
         { []
         }
     {offset
       c1cDH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cDI; else goto c1cDJ;
       c1cDI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cDJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17DM_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17DT_info" {
     sat_s17DT_info:
         const sat_s17DT_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+696;
 },
 sat_s17DR_entry() //  [R1]
         { []
         }
     {offset
       c1cDT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cDU; else goto c1cE2;
       c1cDU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cE2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17DN::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17DN::I64, 0)) goto c1cE0; else goto c1cDS;
       c1cDS: // global
           if (%MO_S_Gt_W64(_s17DN::I64, 5)) goto c1cE0; else goto c1cE1;
       c1cE0: // global
           R2 = _s17DN::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cE1: // global
           R1 = I64[(_s17DN::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17DR_info" {
     sat_s17DR_info:
         const sat_s17DR_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17DW_entry() //  [R1]
         { []
         }
     {offset
       c1cEd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cEe; else goto c1cEm;
       c1cEe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cEm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17DN::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17DN::I64, 0)) goto c1cEk; else goto c1cEc;
       c1cEc: // global
           if (%MO_S_Gt_W64(_s17DN::I64, 5)) goto c1cEk; else goto c1cEl;
       c1cEk: // global
           R2 = _s17DN::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cEl: // global
           R1 = I64[(_s17DN::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17DW_info" {
     sat_s17DW_info:
         const sat_s17DW_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 go_dn_s17DM_entry() //  [R1, R2]
         { []
         }
     {offset
       c1cEq: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1cEu; else goto c1cEt;
       c1cEu: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1cEt: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c1cEo; else goto c1cEp;
       c1cEo: // global
           _s17DK::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17DT_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17DK::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17DR_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cEp: // global
           I64[Hp - 80] = sat_s17DW_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1cEw::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1cEw::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17DM_info" {
     go_dn_s17DM_info:
         const go_dn_s17DM_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+696;
 },
 sat_s17DX_entry() //  [R1]
         { []
         }
     {offset
       c1cEx: // global
           _s17DX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1cEy; else goto c1cEz;
       c1cEz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1cEB; else goto c1cEA;
       c1cEB: // global
           HpAlloc = 24;
           goto c1cEy;
       c1cEy: // global
           R1 = _s17DX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cEA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17DX::P64;
           _s17Bs::I64 = I64[_s17DX::P64 + 24];
           _s17DK::I64 = _s17Bs::I64 - I64[_s17DX::P64 + 16];
           I64[Hp - 16] = go_dn_s17DM_info;
           I64[Hp - 8] = _s17DK::I64;
           I64[Hp] = 3 - _s17DK::I64;
           R2 = _s17Bs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17DM_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17DX_info" {
     sat_s17DX_info:
         const sat_s17DX_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+696;
 },
 sat_s17DJ_entry() //  [R1]
         { []
         }
     {offset
       c1cEL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cEM; else goto c1cEU;
       c1cEM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cEU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cES; else goto c1cEK;
       c1cEK: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cES; else goto c1cET;
       c1cES: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cET: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17DJ_info" {
     sat_s17DJ_info:
         const sat_s17DJ_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17E1_entry() //  [R1]
         { []
         }
     {offset
       c1cF8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cF9; else goto c1cFh;
       c1cF9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cFh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cFf; else goto c1cF7;
       c1cF7: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cFf; else goto c1cFg;
       c1cFf: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cFg: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17E1_info" {
     sat_s17E1_info:
         const sat_s17E1_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17Ef_entry() //  [R1]
         { []
         }
     {offset
       c1cFK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cFL; else goto c1cFM;
       c1cFL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cFM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17E8_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Ef_info" {
     sat_s17Ef_info:
         const sat_s17Ef_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+696;
 },
 sat_s17Ed_entry() //  [R1]
         { []
         }
     {offset
       c1cFW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cFX; else goto c1cG5;
       c1cFX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cG5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17E9::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17E9::I64, 0)) goto c1cG3; else goto c1cFV;
       c1cFV: // global
           if (%MO_S_Gt_W64(_s17E9::I64, 5)) goto c1cG3; else goto c1cG4;
       c1cG3: // global
           R2 = _s17E9::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cG4: // global
           R1 = I64[(_s17E9::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Ed_info" {
     sat_s17Ed_info:
         const sat_s17Ed_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17Ei_entry() //  [R1]
         { []
         }
     {offset
       c1cGg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cGh; else goto c1cGp;
       c1cGh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cGp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17E9::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17E9::I64, 0)) goto c1cGn; else goto c1cGf;
       c1cGf: // global
           if (%MO_S_Gt_W64(_s17E9::I64, 5)) goto c1cGn; else goto c1cGo;
       c1cGn: // global
           R2 = _s17E9::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cGo: // global
           R1 = I64[(_s17E9::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Ei_info" {
     sat_s17Ei_info:
         const sat_s17Ei_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 go_up_s17E8_entry() //  [R1, R2]
         { []
         }
     {offset
       c1cGt: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1cGx; else goto c1cGw;
       c1cGx: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1cGw: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c1cGr; else goto c1cGs;
       c1cGr: // global
           _s17E6::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17Ef_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17E6::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17Ed_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cGs: // global
           I64[Hp - 80] = sat_s17Ei_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1cGz::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1cGz::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17E8_info" {
     go_up_s17E8_info:
         const go_up_s17E8_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+696;
 },
 sat_s17Ej_entry() //  [R1]
         { []
         }
     {offset
       c1cGA: // global
           _s17Ej::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1cGB; else goto c1cGC;
       c1cGC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1cGE; else goto c1cGD;
       c1cGE: // global
           HpAlloc = 24;
           goto c1cGB;
       c1cGB: // global
           R1 = _s17Ej::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cGD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17Ej::P64;
           _s17Bs::I64 = I64[_s17Ej::P64 + 24];
           _s17E6::I64 = _s17Bs::I64 - I64[_s17Ej::P64 + 16];
           I64[Hp - 16] = go_up_s17E8_info;
           I64[Hp - 8] = _s17E6::I64;
           I64[Hp] = 3 - _s17E6::I64;
           R2 = _s17Bs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17E8_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Ej_info" {
     sat_s17Ej_info:
         const sat_s17Ej_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+696;
 },
 sat_s17E5_entry() //  [R1]
         { []
         }
     {offset
       c1cGO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cGP; else goto c1cGX;
       c1cGP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cGX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cGV; else goto c1cGN;
       c1cGN: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cGV; else goto c1cGW;
       c1cGV: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cGW: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17E5_info" {
     sat_s17E5_info:
         const sat_s17E5_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17En_entry() //  [R1]
         { []
         }
     {offset
       c1cHb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cHc; else goto c1cHk;
       c1cHc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cHk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cHi; else goto c1cHa;
       c1cHa: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cHi; else goto c1cHj;
       c1cHi: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cHj: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17En_info" {
     sat_s17En_info:
         const sat_s17En_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17EC_entry() //  [R1]
         { []
         }
     {offset
       c1cHR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cHS; else goto c1cHT;
       c1cHS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cHT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17Ev_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17EC_info" {
     sat_s17EC_info:
         const sat_s17EC_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+696;
 },
 sat_s17EA_entry() //  [R1]
         { []
         }
     {offset
       c1cI3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cI4; else goto c1cIc;
       c1cI4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cIc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Ew::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Ew::I64, 0)) goto c1cIa; else goto c1cI2;
       c1cI2: // global
           if (%MO_S_Gt_W64(_s17Ew::I64, 5)) goto c1cIa; else goto c1cIb;
       c1cIa: // global
           R2 = _s17Ew::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cIb: // global
           R1 = I64[(_s17Ew::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17EA_info" {
     sat_s17EA_info:
         const sat_s17EA_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17EF_entry() //  [R1]
         { []
         }
     {offset
       c1cIn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cIo; else goto c1cIw;
       c1cIo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cIw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Ew::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Ew::I64, 0)) goto c1cIu; else goto c1cIm;
       c1cIm: // global
           if (%MO_S_Gt_W64(_s17Ew::I64, 5)) goto c1cIu; else goto c1cIv;
       c1cIu: // global
           R2 = _s17Ew::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cIv: // global
           R1 = I64[(_s17Ew::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17EF_info" {
     sat_s17EF_info:
         const sat_s17EF_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 go_dn_s17Ev_entry() //  [R1, R2]
         { []
         }
     {offset
       c1cIA: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1cIE; else goto c1cID;
       c1cIE: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1cID: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c1cIy; else goto c1cIz;
       c1cIy: // global
           _s17Et::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17EC_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17Et::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17EA_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cIz: // global
           I64[Hp - 80] = sat_s17EF_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1cIG::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1cIG::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17Ev_info" {
     go_dn_s17Ev_info:
         const go_dn_s17Ev_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+696;
 },
 sat_s17EG_entry() //  [R1]
         { []
         }
     {offset
       c1cIH: // global
           _s17EG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1cII; else goto c1cIJ;
       c1cIJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1cIL; else goto c1cIK;
       c1cIL: // global
           HpAlloc = 24;
           goto c1cII;
       c1cII: // global
           R1 = _s17EG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cIK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17EG::P64;
           _s17Bs::I64 = I64[_s17EG::P64 + 24];
           _s17Et::I64 = _s17Bs::I64 - I64[_s17EG::P64 + 16];
           I64[Hp - 16] = go_dn_s17Ev_info;
           I64[Hp - 8] = _s17Et::I64;
           I64[Hp] = 4 - _s17Et::I64;
           R2 = _s17Bs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17Ev_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17EG_info" {
     sat_s17EG_info:
         const sat_s17EG_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+696;
 },
 sat_s17Es_entry() //  [R1]
         { []
         }
     {offset
       c1cIV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cIW; else goto c1cJ4;
       c1cIW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cJ4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cJ2; else goto c1cIU;
       c1cIU: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cJ2; else goto c1cJ3;
       c1cJ2: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cJ3: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Es_info" {
     sat_s17Es_info:
         const sat_s17Es_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17EK_entry() //  [R1]
         { []
         }
     {offset
       c1cJi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cJj; else goto c1cJr;
       c1cJj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cJr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cJp; else goto c1cJh;
       c1cJh: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cJp; else goto c1cJq;
       c1cJp: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cJq: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17EK_info" {
     sat_s17EK_info:
         const sat_s17EK_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17EY_entry() //  [R1]
         { []
         }
     {offset
       c1cJU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cJV; else goto c1cJW;
       c1cJV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cJW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17ER_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17EY_info" {
     sat_s17EY_info:
         const sat_s17EY_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+696;
 },
 sat_s17EW_entry() //  [R1]
         { []
         }
     {offset
       c1cK6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cK7; else goto c1cKf;
       c1cK7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cKf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17ES::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17ES::I64, 0)) goto c1cKd; else goto c1cK5;
       c1cK5: // global
           if (%MO_S_Gt_W64(_s17ES::I64, 5)) goto c1cKd; else goto c1cKe;
       c1cKd: // global
           R2 = _s17ES::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cKe: // global
           R1 = I64[(_s17ES::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17EW_info" {
     sat_s17EW_info:
         const sat_s17EW_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17F1_entry() //  [R1]
         { []
         }
     {offset
       c1cKq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cKr; else goto c1cKz;
       c1cKr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cKz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17ES::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17ES::I64, 0)) goto c1cKx; else goto c1cKp;
       c1cKp: // global
           if (%MO_S_Gt_W64(_s17ES::I64, 5)) goto c1cKx; else goto c1cKy;
       c1cKx: // global
           R2 = _s17ES::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cKy: // global
           R1 = I64[(_s17ES::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17F1_info" {
     sat_s17F1_info:
         const sat_s17F1_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 go_up_s17ER_entry() //  [R1, R2]
         { []
         }
     {offset
       c1cKD: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1cKH; else goto c1cKG;
       c1cKH: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1cKG: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c1cKB; else goto c1cKC;
       c1cKB: // global
           _s17EP::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17EY_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17EP::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17EW_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cKC: // global
           I64[Hp - 80] = sat_s17F1_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1cKJ::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1cKJ::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17ER_info" {
     go_up_s17ER_info:
         const go_up_s17ER_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+696;
 },
 sat_s17F2_entry() //  [R1]
         { []
         }
     {offset
       c1cKK: // global
           _s17F2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1cKL; else goto c1cKM;
       c1cKM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1cKO; else goto c1cKN;
       c1cKO: // global
           HpAlloc = 24;
           goto c1cKL;
       c1cKL: // global
           R1 = _s17F2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cKN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17F2::P64;
           _s17Bs::I64 = I64[_s17F2::P64 + 24];
           _s17EP::I64 = _s17Bs::I64 - I64[_s17F2::P64 + 16];
           I64[Hp - 16] = go_up_s17ER_info;
           I64[Hp - 8] = _s17EP::I64;
           I64[Hp] = 4 - _s17EP::I64;
           R2 = _s17Bs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17ER_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17F2_info" {
     sat_s17F2_info:
         const sat_s17F2_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+696;
 },
 sat_s17EO_entry() //  [R1]
         { []
         }
     {offset
       c1cKY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cKZ; else goto c1cL7;
       c1cKZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cL7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cL5; else goto c1cKX;
       c1cKX: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cL5; else goto c1cL6;
       c1cL5: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cL6: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17EO_info" {
     sat_s17EO_info:
         const sat_s17EO_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17F6_entry() //  [R1]
         { []
         }
     {offset
       c1cLl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cLm; else goto c1cLu;
       c1cLm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cLu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cLs; else goto c1cLk;
       c1cLk: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cLs; else goto c1cLt;
       c1cLs: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cLt: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17F6_info" {
     sat_s17F6_info:
         const sat_s17F6_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17Fl_entry() //  [R1]
         { []
         }
     {offset
       c1cM1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cM2; else goto c1cM3;
       c1cM2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cM3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s17Fe_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Fl_info" {
     sat_s17Fl_info:
         const sat_s17Fl_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+696;
 },
 sat_s17Fj_entry() //  [R1]
         { []
         }
     {offset
       c1cMd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cMe; else goto c1cMm;
       c1cMe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cMm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Ff::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Ff::I64, 0)) goto c1cMk; else goto c1cMc;
       c1cMc: // global
           if (%MO_S_Gt_W64(_s17Ff::I64, 5)) goto c1cMk; else goto c1cMl;
       c1cMk: // global
           R2 = _s17Ff::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cMl: // global
           R1 = I64[(_s17Ff::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Fj_info" {
     sat_s17Fj_info:
         const sat_s17Fj_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17Fo_entry() //  [R1]
         { []
         }
     {offset
       c1cMx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cMy; else goto c1cMG;
       c1cMy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cMG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Ff::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Ff::I64, 0)) goto c1cME; else goto c1cMw;
       c1cMw: // global
           if (%MO_S_Gt_W64(_s17Ff::I64, 5)) goto c1cME; else goto c1cMF;
       c1cME: // global
           R2 = _s17Ff::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cMF: // global
           R1 = I64[(_s17Ff::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Fo_info" {
     sat_s17Fo_info:
         const sat_s17Fo_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 go_dn_s17Fe_entry() //  [R1, R2]
         { []
         }
     {offset
       c1cMK: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1cMO; else goto c1cMN;
       c1cMO: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1cMN: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c1cMI; else goto c1cMJ;
       c1cMI: // global
           _s17Fc::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17Fl_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17Fc::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17Fj_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cMJ: // global
           I64[Hp - 80] = sat_s17Fo_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1cMQ::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1cMQ::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s17Fe_info" {
     go_dn_s17Fe_info:
         const go_dn_s17Fe_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+696;
 },
 sat_s17Fp_entry() //  [R1]
         { []
         }
     {offset
       c1cMR: // global
           _s17Fp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1cMS; else goto c1cMT;
       c1cMT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1cMV; else goto c1cMU;
       c1cMV: // global
           HpAlloc = 24;
           goto c1cMS;
       c1cMS: // global
           R1 = _s17Fp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cMU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17Fp::P64;
           _s17Bs::I64 = I64[_s17Fp::P64 + 24];
           _s17Fc::I64 = _s17Bs::I64 - I64[_s17Fp::P64 + 16];
           I64[Hp - 16] = go_dn_s17Fe_info;
           I64[Hp - 8] = _s17Fc::I64;
           I64[Hp] = 5 - _s17Fc::I64;
           R2 = _s17Bs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s17Fe_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Fp_info" {
     sat_s17Fp_info:
         const sat_s17Fp_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+696;
 },
 sat_s17Fb_entry() //  [R1]
         { []
         }
     {offset
       c1cN5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cN6; else goto c1cNe;
       c1cN6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cNe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cNc; else goto c1cN4;
       c1cN4: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cNc; else goto c1cNd;
       c1cNc: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cNd: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Fb_info" {
     sat_s17Fb_info:
         const sat_s17Fb_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17Ft_entry() //  [R1]
         { []
         }
     {offset
       c1cNs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cNt; else goto c1cNB;
       c1cNt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cNB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cNz; else goto c1cNr;
       c1cNr: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cNz; else goto c1cNA;
       c1cNz: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cNA: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Ft_info" {
     sat_s17Ft_info:
         const sat_s17Ft_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17FH_entry() //  [R1]
         { []
         }
     {offset
       c1cO4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cO5; else goto c1cO6;
       c1cO5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cO6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s17FA_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17FH_info" {
     sat_s17FH_info:
         const sat_s17FH_entry;
         const 8589934593;
         const 4294967311;
         const S17Oj_srt+696;
 },
 sat_s17FF_entry() //  [R1]
         { []
         }
     {offset
       c1cOg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cOh; else goto c1cOp;
       c1cOh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cOp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17FB::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17FB::I64, 0)) goto c1cOn; else goto c1cOf;
       c1cOf: // global
           if (%MO_S_Gt_W64(_s17FB::I64, 5)) goto c1cOn; else goto c1cOo;
       c1cOn: // global
           R2 = _s17FB::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cOo: // global
           R1 = I64[(_s17FB::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17FF_info" {
     sat_s17FF_info:
         const sat_s17FF_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17FK_entry() //  [R1]
         { []
         }
     {offset
       c1cOA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cOB; else goto c1cOJ;
       c1cOB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cOJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17FB::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17FB::I64, 0)) goto c1cOH; else goto c1cOz;
       c1cOz: // global
           if (%MO_S_Gt_W64(_s17FB::I64, 5)) goto c1cOH; else goto c1cOI;
       c1cOH: // global
           R2 = _s17FB::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cOI: // global
           R1 = I64[(_s17FB::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17FK_info" {
     sat_s17FK_info:
         const sat_s17FK_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 go_up_s17FA_entry() //  [R1, R2]
         { []
         }
     {offset
       c1cON: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1cOR; else goto c1cOQ;
       c1cOR: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1cOQ: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c1cOL; else goto c1cOM;
       c1cOL: // global
           _s17Fy::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s17FH_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s17Fy::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s17FF_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cOM: // global
           I64[Hp - 80] = sat_s17FK_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c1cOT::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c1cOT::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s17FA_info" {
     go_up_s17FA_info:
         const go_up_s17FA_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S17Oj_srt+696;
 },
 sat_s17FL_entry() //  [R1]
         { []
         }
     {offset
       c1cOU: // global
           _s17FL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1cOV; else goto c1cOW;
       c1cOW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1cOY; else goto c1cOX;
       c1cOY: // global
           HpAlloc = 24;
           goto c1cOV;
       c1cOV: // global
           R1 = _s17FL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cOX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s17FL::P64;
           _s17Bs::I64 = I64[_s17FL::P64 + 24];
           _s17Fy::I64 = _s17Bs::I64 - I64[_s17FL::P64 + 16];
           I64[Hp - 16] = go_up_s17FA_info;
           I64[Hp - 8] = _s17Fy::I64;
           I64[Hp] = 5 - _s17Fy::I64;
           R2 = _s17Bs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s17FA_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17FL_info" {
     sat_s17FL_info:
         const sat_s17FL_entry;
         const 8589934592;
         const 4294967316;
         const S17Oj_srt+696;
 },
 sat_s17Fx_entry() //  [R1]
         { []
         }
     {offset
       c1cP8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cP9; else goto c1cPh;
       c1cP9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cPh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cPf; else goto c1cP7;
       c1cP7: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cPf; else goto c1cPg;
       c1cPf: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cPg: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Fx_info" {
     sat_s17Fx_info:
         const sat_s17Fx_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 sat_s17FP_entry() //  [R1]
         { []
         }
     {offset
       c1cPv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1cPw; else goto c1cPE;
       c1cPw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1cPE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s17Bq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s17Bq::I64, 0)) goto c1cPC; else goto c1cPu;
       c1cPu: // global
           if (%MO_S_Gt_W64(_s17Bq::I64, 5)) goto c1cPC; else goto c1cPD;
       c1cPC: // global
           R2 = _s17Bq::I64;
           Sp = Sp - 16;
           call GHC.Enum.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c1cPD: // global
           R1 = I64[(_s17Bq::I64 << 3) + GHC.Types.VecCount_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17FP_info" {
     sat_s17FP_info:
         const sat_s17FP_entry;
         const 4294967296;
         const 4294967313;
         const S17Oj_srt+696;
 },
 GHC.Enum.$fEnumVecCount_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1cPQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1cPR; else goto c1cPS;
       c1cPR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumVecCount_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1cPS: // global
           I64[Sp - 24] = block_c1cPF_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1cSX; else goto c1cPG;
       u1cSX: // global
           call _c1cPF(R1) args: 0, res: 0, upd: 0;
       c1cPG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumVecCount_$cenumFromThenTo_info" {
     GHC.Enum.$fEnumVecCount_$cenumFromThenTo_info:
         const GHC.Enum.$fEnumVecCount_$cenumFromThenTo_entry;
         const 0;
         const 562954248388622;
         const 12884901911;
         const S17Oj_srt+696;
 },
 _c1cPF() //  [R1]
         { []
         }
     {offset
       c1cPF: // global
           _s17Bn::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c1cPJ;
               case 2 : goto c1cPK;
               case 3 : goto c1cPL;
               case 4 : goto c1cPM;
               case 5 : goto c1cPN;
               case 6 : goto c1cPO;
           }
       c1cPO: // global
           _s17Bq::I64 = 5;
           goto s17Bp;
       c1cPN: // global
           _s17Bq::I64 = 4;
           goto s17Bp;
       c1cPM: // global
           _s17Bq::I64 = 3;
           goto s17Bp;
       c1cPL: // global
           _s17Bq::I64 = 2;
           goto s17Bp;
       c1cPK: // global
           _s17Bq::I64 = 1;
           goto s17Bp;
       c1cPJ: // global
           _s17Bq::I64 = 0;
           goto s17Bp;
       s17Bp: // global
           I64[Sp] = block_c1cPT_info;
           R1 = _s17Bn::P64;
           I64[Sp + 8] = _s17Bq::I64;
           if (R1 & 7 != 0) goto u1cSW; else goto c1cSb;
       u1cSW: // global
           call _c1cPT(R1) args: 0, res: 0, upd: 0;
       c1cSb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1cPF_info" {
     block_c1cPF_info:
         const _c1cPF;
         const 2;
         const 4294967326;
         const S17Oj_srt+696;
 },
 _c1cPT() //  [R1]
         { []
         }
     {offset
       c1cPT: // global
           _s17Bo::P64 = P64[Sp + 16];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c1cSh;
               case 2 : goto c1cSl;
               case 3 : goto c1cSp;
               case 4 : goto c1cSt;
               case 5 : goto c1cSx;
               case 6 : goto c1cSB;
           }
       c1cSB: // global
           _s17Bs::I64 = 5;
           goto s17Br;
       c1cSx: // global
           _s17Bs::I64 = 4;
           goto s17Br;
       c1cSt: // global
           _s17Bs::I64 = 3;
           goto s17Br;
       c1cSp: // global
           _s17Bs::I64 = 2;
           goto s17Br;
       c1cSl: // global
           _s17Bs::I64 = 1;
           goto s17Br;
       c1cSh: // global
           _s17Bs::I64 = 0;
           goto s17Br;
       s17Br: // global
           I64[Sp] = block_c1cqE_info;
           R1 = _s17Bo::P64;
           I64[Sp + 16] = _s17Bs::I64;
           if (R1 & 7 != 0) goto u1cSY; else goto c1cqF;
       u1cSY: // global
           call _c1cqE(R1) args: 0, res: 0, upd: 0;
       c1cqF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1cPT_info" {
     block_c1cPT_info:
         const _c1cPT;
         const 66;
         const 4294967326;
         const S17Oj_srt+696;
 },
 _c1cqE() //  [R1]
         { []
         }
     {offset
       c1cqE: // global
           _s17Bq::I64 = I64[Sp + 8];
           _s17Bs::I64 = I64[Sp + 16];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c1cPX;
               case 2 : goto c1cQk;
               case 3 : goto c1cQH;
               case 4 : goto c1cR4;
               case 5 : goto c1cRr;
               case 6 : goto c1cRO;
           }
       c1cRO: // global
           Hp = Hp + 80;
           _s17Bt::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1cRR; else goto c1cRQ;
       c1cRQ: // global
           if (%MO_S_Lt_W64(_s17Bs::I64,
                            _s17Bq::I64)) goto c1cS1; else goto c1cSa;
       c1cS1: // global
           if (%MO_S_Le_W64(5, _s17Bs::I64)) goto c1cRU; else goto c1cRZ;
       c1cRU: // global
           I64[Hp - 72] = sat_s17Fp_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = _s17Bs::I64;
           I64[Hp - 40] = sat_s17Fb_info;
           I64[Hp - 24] = _s17Bq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cRZ: // global
           if (%MO_S_Gt_W64(5, _s17Bq::I64)) goto c1cS8; else goto c1cRX;
       c1cRX: // global
           I64[Hp - 72] = sat_s17Ft_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1cRV::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1cRV::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cSa: // global
           if (%MO_S_Ge_W64(5, _s17Bs::I64)) goto c1cS4; else goto c1cS9;
       c1cS4: // global
           I64[Hp - 72] = sat_s17FL_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = _s17Bs::I64;
           I64[Hp - 40] = sat_s17Fx_info;
           I64[Hp - 24] = _s17Bq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cS9: // global
           if (%MO_S_Lt_W64(5, _s17Bq::I64)) goto c1cS8; else goto c1cS7;
       c1cS7: // global
           I64[Hp - 72] = sat_s17FP_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1cS5::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1cS5::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cRr: // global
           Hp = Hp + 80;
           _s17Bt::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1cRR; else goto c1cRt;
       c1cRt: // global
           if (%MO_S_Lt_W64(_s17Bs::I64,
                            _s17Bq::I64)) goto c1cRE; else goto c1cRN;
       c1cRE: // global
           if (%MO_S_Le_W64(4, _s17Bs::I64)) goto c1cRx; else goto c1cRC;
       c1cRx: // global
           I64[Hp - 72] = sat_s17EG_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = _s17Bs::I64;
           I64[Hp - 40] = sat_s17Es_info;
           I64[Hp - 24] = _s17Bq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cRC: // global
           if (%MO_S_Gt_W64(4, _s17Bq::I64)) goto c1cS8; else goto c1cRA;
       c1cRA: // global
           I64[Hp - 72] = sat_s17EK_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1cRy::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1cRy::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cRN: // global
           if (%MO_S_Ge_W64(4, _s17Bs::I64)) goto c1cRH; else goto c1cRM;
       c1cRH: // global
           I64[Hp - 72] = sat_s17F2_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = _s17Bs::I64;
           I64[Hp - 40] = sat_s17EO_info;
           I64[Hp - 24] = _s17Bq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cRM: // global
           if (%MO_S_Lt_W64(4, _s17Bq::I64)) goto c1cS8; else goto c1cRK;
       c1cRK: // global
           I64[Hp - 72] = sat_s17F6_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1cRI::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1cRI::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cR4: // global
           Hp = Hp + 80;
           _s17Bt::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1cRR; else goto c1cR6;
       c1cR6: // global
           if (%MO_S_Lt_W64(_s17Bs::I64,
                            _s17Bq::I64)) goto c1cRh; else goto c1cRq;
       c1cRh: // global
           if (%MO_S_Le_W64(3, _s17Bs::I64)) goto c1cRa; else goto c1cRf;
       c1cRa: // global
           I64[Hp - 72] = sat_s17DX_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = _s17Bs::I64;
           I64[Hp - 40] = sat_s17DJ_info;
           I64[Hp - 24] = _s17Bq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cRf: // global
           if (%MO_S_Gt_W64(3, _s17Bq::I64)) goto c1cS8; else goto c1cRd;
       c1cRd: // global
           I64[Hp - 72] = sat_s17E1_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1cRb::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1cRb::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cRq: // global
           if (%MO_S_Ge_W64(3, _s17Bs::I64)) goto c1cRk; else goto c1cRp;
       c1cRk: // global
           I64[Hp - 72] = sat_s17Ej_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = _s17Bs::I64;
           I64[Hp - 40] = sat_s17E5_info;
           I64[Hp - 24] = _s17Bq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cRp: // global
           if (%MO_S_Lt_W64(3, _s17Bq::I64)) goto c1cS8; else goto c1cRn;
       c1cRn: // global
           I64[Hp - 72] = sat_s17En_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1cRl::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1cRl::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cQH: // global
           Hp = Hp + 80;
           _s17Bt::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1cRR; else goto c1cQJ;
       c1cQJ: // global
           if (%MO_S_Lt_W64(_s17Bs::I64,
                            _s17Bq::I64)) goto c1cQU; else goto c1cR3;
       c1cQU: // global
           if (%MO_S_Le_W64(2, _s17Bs::I64)) goto c1cQN; else goto c1cQS;
       c1cQN: // global
           I64[Hp - 72] = sat_s17De_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = _s17Bs::I64;
           I64[Hp - 40] = sat_s17D0_info;
           I64[Hp - 24] = _s17Bq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cQS: // global
           if (%MO_S_Gt_W64(2, _s17Bq::I64)) goto c1cS8; else goto c1cQQ;
       c1cQQ: // global
           I64[Hp - 72] = sat_s17Di_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1cQO::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1cQO::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cR3: // global
           if (%MO_S_Ge_W64(2, _s17Bs::I64)) goto c1cQX; else goto c1cR2;
       c1cQX: // global
           I64[Hp - 72] = sat_s17DA_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = _s17Bs::I64;
           I64[Hp - 40] = sat_s17Dm_info;
           I64[Hp - 24] = _s17Bq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cR2: // global
           if (%MO_S_Lt_W64(2, _s17Bq::I64)) goto c1cS8; else goto c1cR0;
       c1cR0: // global
           I64[Hp - 72] = sat_s17DE_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1cQY::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1cQY::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cQk: // global
           Hp = Hp + 80;
           _s17Bt::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1cRR; else goto c1cQm;
       c1cQm: // global
           if (%MO_S_Lt_W64(_s17Bs::I64,
                            _s17Bq::I64)) goto c1cQx; else goto c1cQG;
       c1cQx: // global
           if (%MO_S_Le_W64(1, _s17Bs::I64)) goto c1cQq; else goto c1cQv;
       c1cQq: // global
           I64[Hp - 72] = sat_s17Cv_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = _s17Bs::I64;
           I64[Hp - 40] = sat_s17Ch_info;
           I64[Hp - 24] = _s17Bq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cQv: // global
           if (%MO_S_Gt_W64(1, _s17Bq::I64)) goto c1cS8; else goto c1cQt;
       c1cQt: // global
           I64[Hp - 72] = sat_s17Cz_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1cQr::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1cQr::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cQG: // global
           if (%MO_S_Ge_W64(1, _s17Bs::I64)) goto c1cQA; else goto c1cQF;
       c1cQA: // global
           I64[Hp - 72] = sat_s17CR_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = _s17Bs::I64;
           I64[Hp - 40] = sat_s17CD_info;
           I64[Hp - 24] = _s17Bq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cQF: // global
           if (%MO_S_Lt_W64(1, _s17Bq::I64)) goto c1cS8; else goto c1cQD;
       c1cQD: // global
           I64[Hp - 72] = sat_s17CV_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1cQB::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1cQB::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cPX: // global
           Hp = Hp + 80;
           _s17Bt::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1cRR; else goto c1cPZ;
       c1cRR: // global
           HpAlloc = 80;
           R1 = _s17Bt::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1cPZ: // global
           if (%MO_S_Lt_W64(_s17Bs::I64,
                            _s17Bq::I64)) goto c1cQa; else goto c1cQj;
       c1cQa: // global
           if (%MO_S_Le_W64(0, _s17Bs::I64)) goto c1cQ3; else goto c1cQ8;
       c1cQ3: // global
           I64[Hp - 72] = sat_s17BM_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = _s17Bs::I64;
           I64[Hp - 40] = sat_s17By_info;
           I64[Hp - 24] = _s17Bq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cQ8: // global
           if (%MO_S_Gt_W64(0, _s17Bq::I64)) goto c1cS8; else goto c1cQ6;
       c1cQ6: // global
           I64[Hp - 72] = sat_s17BQ_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1cQ4::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1cQ4::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cQj: // global
           if (%MO_S_Ge_W64(0, _s17Bs::I64)) goto c1cQd; else goto c1cQi;
       c1cQd: // global
           I64[Hp - 72] = sat_s17C8_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = _s17Bs::I64;
           I64[Hp - 40] = sat_s17BU_info;
           I64[Hp - 24] = _s17Bq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cQi: // global
           if (%MO_S_Lt_W64(0, _s17Bq::I64)) goto c1cS8; else goto c1cQg;
       c1cS8: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1cQg: // global
           I64[Hp - 72] = sat_s17Cc_info;
           I64[Hp - 56] = _s17Bq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c1cQe::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c1cQe::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1cqE_info" {
     block_c1cqE_info:
         const _c1cqE;
         const 194;
         const 4294967326;
         const S17Oj_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.067054245 UTC

[section ""data" . GHC.Enum.$fEnumVecCount_closure" {
     GHC.Enum.$fEnumVecCount_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumVecCount_$csucc_closure+1;
         const GHC.Enum.$fEnumVecCount_$cpred_closure+1;
         const GHC.Enum.$fEnumVecCount_$ctoEnum_closure+1;
         const GHC.Enum.$fEnumVecCount_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumVecCount_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumVecCount_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumVecCount_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumVecCount_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.068757975 UTC

[section ""data" . GHC.Enum.$trModule3_closure" {
     GHC.Enum.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Enum.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.070594143 UTC

[section ""data" . GHC.Enum.$trModule1_closure" {
     GHC.Enum.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Enum.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.072124777 UTC

[section ""data" . GHC.Enum.$trModule_closure" {
     GHC.Enum.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Enum.$trModule3_closure+1;
         const GHC.Enum.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.073894374 UTC

[section ""data" . $krep_rURH_closure" {
     $krep_rURH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.07548713 UTC

[section ""data" . $krep1_rURI_closure" {
     $krep1_rURI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.077079065 UTC

[section ""data" . GHC.Enum.$tcBounded1_closure" {
     GHC.Enum.$tcBounded1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep1_rURI_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.078763188 UTC

[section ""data" . $krep2_rURJ_closure" {
     $krep2_rURJ_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.080341995 UTC

[section ""data" . $krep3_rURK_closure" {
     $krep3_rURK_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rURJ_closure+2;
         const $krep2_rURJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.081945108 UTC

[section ""data" . $krep4_rURL_closure" {
     $krep4_rURL_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rURJ_closure+2;
         const $krep_rURH_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.08355406 UTC

[section ""data" . $krep5_rURM_closure" {
     $krep5_rURM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rURH_closure+1;
         const $krep2_rURJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.085868494 UTC

[section ""data" . $krep6_rURN_closure" {
     $krep6_rURN_closure:
         const :_con_info;
         const $krep2_rURJ_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.087556816 UTC

[section ""data" . $krep7_rURO_closure" {
     $krep7_rURO_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep6_rURN_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.089087754 UTC

[section ""data" . $krep8_rURP_closure" {
     $krep8_rURP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rURJ_closure+2;
         const $krep7_rURO_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.090814303 UTC

[section ""data" . $krep9_rURQ_closure" {
     $krep9_rURQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rURJ_closure+2;
         const $krep8_rURP_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.092441679 UTC

[section ""data" . $krep10_rURR_closure" {
     $krep10_rURR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rURJ_closure+2;
         const $krep9_rURQ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.094158358 UTC

[section ""cstring" . GHC.Enum.$tcBounded3_bytes" {
     GHC.Enum.$tcBounded3_bytes:
         I8[] [66,111,117,110,100,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.095765164 UTC

[section ""data" . GHC.Enum.$tcBounded2_closure" {
     GHC.Enum.$tcBounded2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Enum.$tcBounded3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.09758623 UTC

[section ""data" . GHC.Enum.$tcBounded_closure" {
     GHC.Enum.$tcBounded_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Enum.$trModule_closure+1;
         const GHC.Enum.$tcBounded2_closure+1;
         const GHC.Enum.$tcBounded1_closure+4;
         const 15333921930693502724;
         const 670716372614077232;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.099263126 UTC

[section ""data" . $krep11_rURS_closure" {
     $krep11_rURS_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Enum.$tcBounded_closure+1;
         const $krep6_rURN_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.100881427 UTC

[section ""data" . $krep12_rURT_closure" {
     $krep12_rURT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rURJ_closure+2;
         const $krep11_rURS_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.102589336 UTC

[section ""data" . GHC.Enum.$tc'C:Bounded1_closure" {
     GHC.Enum.$tc'C:Bounded1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rURJ_closure+2;
         const $krep12_rURT_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.104223032 UTC

[section ""cstring" . GHC.Enum.$tc'C:Bounded3_bytes" {
     GHC.Enum.$tc'C:Bounded3_bytes:
         I8[] [39,67,58,66,111,117,110,100,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.105858531 UTC

[section ""data" . GHC.Enum.$tc'C:Bounded2_closure" {
     GHC.Enum.$tc'C:Bounded2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Enum.$tc'C:Bounded3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.1074737 UTC

[section ""data" . GHC.Enum.$tc'C:Bounded_closure" {
     GHC.Enum.$tc'C:Bounded_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Enum.$trModule_closure+1;
         const GHC.Enum.$tc'C:Bounded2_closure+1;
         const GHC.Enum.$tc'C:Bounded1_closure+4;
         const 11653779171057733320;
         const 7915017773108857797;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.109655395 UTC

[section ""cstring" . GHC.Enum.$tcEnum2_bytes" {
     GHC.Enum.$tcEnum2_bytes:
         I8[] [69,110,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.112246162 UTC

[section ""data" . GHC.Enum.$tcEnum1_closure" {
     GHC.Enum.$tcEnum1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Enum.$tcEnum2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.114784141 UTC

[section ""data" . GHC.Enum.$tcEnum_closure" {
     GHC.Enum.$tcEnum_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Enum.$trModule_closure+1;
         const GHC.Enum.$tcEnum1_closure+1;
         const GHC.Enum.$tcBounded1_closure+4;
         const 1732763130676021359;
         const 12945953424921799467;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.117426438 UTC

[section ""data" . $krep13_rURU_closure" {
     $krep13_rURU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Enum.$tcEnum_closure+1;
         const $krep6_rURN_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.119770697 UTC

[section ""data" . $krep14_rURV_closure" {
     $krep14_rURV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rURR_closure+4;
         const $krep13_rURU_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.122199208 UTC

[section ""data" . $krep15_rURW_closure" {
     $krep15_rURW_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_rURQ_closure+4;
         const $krep14_rURV_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.124351151 UTC

[section ""data" . $krep16_rURX_closure" {
     $krep16_rURX_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_rURQ_closure+4;
         const $krep15_rURW_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.126022671 UTC

[section ""data" . $krep17_rURY_closure" {
     $krep17_rURY_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rURP_closure+4;
         const $krep16_rURX_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.127583663 UTC

[section ""data" . $krep18_rURZ_closure" {
     $krep18_rURZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rURL_closure+4;
         const $krep17_rURY_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.129185968 UTC

[section ""data" . $krep19_rUS0_closure" {
     $krep19_rUS0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rURM_closure+4;
         const $krep18_rURZ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.13115066 UTC

[section ""data" . $krep20_rUS1_closure" {
     $krep20_rUS1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rURK_closure+4;
         const $krep19_rUS0_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.132861515 UTC

[section ""data" . GHC.Enum.$tc'C:Enum1_closure" {
     GHC.Enum.$tc'C:Enum1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rURK_closure+4;
         const $krep20_rUS1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.134460337 UTC

[section ""cstring" . GHC.Enum.$tc'C:Enum3_bytes" {
     GHC.Enum.$tc'C:Enum3_bytes:
         I8[] [39,67,58,69,110,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.136096986 UTC

[section ""data" . GHC.Enum.$tc'C:Enum2_closure" {
     GHC.Enum.$tc'C:Enum2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Enum.$tc'C:Enum3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.138660552 UTC

[section ""data" . GHC.Enum.$tc'C:Enum_closure" {
     GHC.Enum.$tc'C:Enum_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Enum.$trModule_closure+1;
         const GHC.Enum.$tc'C:Enum2_closure+1;
         const GHC.Enum.$tc'C:Enum1_closure+4;
         const 1558011785351316622;
         const 1214604065930072985;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.141764189 UTC

[section ""data" . GHC.Enum.$fEnumWord4_closure" {
     GHC.Enum.$fEnumWord4_closure:
         const GHC.Enum.$fEnumWord4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumWord4_entry() //  [R1]
         { []
         }
     {offset
       c1d8Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1d8R; else goto c1d8S;
       c1d8R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1d8S: // global
           (_c1d8N::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1d8N::I64 == 0) goto c1d8P; else goto c1d8O;
       c1d8P: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1d8O: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1d8N::I64;
           R2 = lvl32_rURc_closure;
           Sp = Sp - 16;
           call GHC.Enum.succError_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord4_info" {
     GHC.Enum.$fEnumWord4_info:
         const GHC.Enum.$fEnumWord4_entry;
         const 0;
         const 12884901909;
         const S17Oj_srt+840;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.147976839 UTC

[section ""data" . GHC.Enum.$fEnumWord_$csucc_closure" {
     GHC.Enum.$fEnumWord_$csucc_closure:
         const GHC.Enum.$fEnumWord_$csucc_info;
         const 0;
 },
 GHC.Enum.$fEnumWord_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c1d98: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1d99; else goto c1d9a;
       c1d99: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumWord_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1d9a: // global
           I64[Sp - 8] = block_c1d95_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1d9p; else goto c1d96;
       u1d9p: // global
           call _c1d95(R1) args: 0, res: 0, upd: 0;
       c1d96: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord_$csucc_info" {
     GHC.Enum.$fEnumWord_$csucc_info:
         const GHC.Enum.$fEnumWord_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+856;
 },
 _c1d95() //  [R1]
         { []
         }
     {offset
       c1d95: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1d9f; else goto c1d9e;
       c1d9f: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1d9e: // global
           _s17FV::I64 = I64[R1 + 7];
           if (_s17FV::I64 != 18446744073709551615) goto c1d9n; else goto c1d9o;
       c1d9n: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s17FV::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1d9o: // global
           Hp = Hp - 16;
           R1 = GHC.Enum.$fEnumWord4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1d95_info" {
     block_c1d95_info:
         const _c1d95;
         const 0;
         const 4294967326;
         const S17Oj_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.156476093 UTC

[section ""data" . GHC.Enum.$fEnumWord3_closure" {
     GHC.Enum.$fEnumWord3_closure:
         const GHC.Enum.$fEnumWord3_info;
         const 0;
         const 0;
         const 0;
 },
 section ""relreadonly" . u1d9N_srtd" {
     u1d9N_srtd:
         const S17Oj_srt+280;
         const 71;
         const 1;
         const 64;
 },
 GHC.Enum.$fEnumWord3_entry() //  [R1]
         { []
         }
     {offset
       c1d9K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1d9L; else goto c1d9M;
       c1d9L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1d9M: // global
           (_c1d9H::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1d9H::I64 == 0) goto c1d9J; else goto c1d9I;
       c1d9J: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1d9I: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1d9H::I64;
           R2 = lvl32_rURc_closure;
           Sp = Sp - 16;
           call GHC.Enum.predError_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord3_info" {
     GHC.Enum.$fEnumWord3_info:
         const GHC.Enum.$fEnumWord3_entry;
         const 0;
         const 18446744069414584341;
         const u1d9N_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.164697909 UTC

[section ""data" . GHC.Enum.$fEnumWord_$cpred_closure" {
     GHC.Enum.$fEnumWord_$cpred_closure:
         const GHC.Enum.$fEnumWord_$cpred_info;
         const 0;
 },
 GHC.Enum.$fEnumWord_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c1da4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1da5; else goto c1da6;
       c1da5: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumWord_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1da6: // global
           I64[Sp - 8] = block_c1da1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1dal; else goto c1da2;
       u1dal: // global
           call _c1da1(R1) args: 0, res: 0, upd: 0;
       c1da2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord_$cpred_info" {
     GHC.Enum.$fEnumWord_$cpred_info:
         const GHC.Enum.$fEnumWord_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+872;
 },
 _c1da1() //  [R1]
         { []
         }
     {offset
       c1da1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1dab; else goto c1daa;
       c1dab: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1daa: // global
           _s17G0::I64 = I64[R1 + 7];
           if (_s17G0::I64 != 0) goto c1daj; else goto c1dak;
       c1daj: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s17G0::I64 - 1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1dak: // global
           Hp = Hp - 16;
           R1 = GHC.Enum.$fEnumWord3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1da1_info" {
     block_c1da1_info:
         const _c1da1;
         const 0;
         const 4294967326;
         const S17Oj_srt+880;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.173482891 UTC

[section ""data" . GHC.Enum.$wlvl2_closure" {
     GHC.Enum.$wlvl2_closure:
         const GHC.Enum.$wlvl2_info;
         const 0;
 },
 section ""relreadonly" . u1daH_srtd" {
     u1daH_srtd:
         const S17Oj_srt+208;
         const 80;
         const 1;
         const 32768;
 },
 GHC.Enum.$wlvl2_entry() //  [R2]
         { []
         }
     {offset
       c1daE: // global
           R6 = GHC.Enum.$fBoundedWord_$cmaxBound_closure+1;
           R5 = GHC.Enum.$fBoundedWord_$cminBound_closure+1;
           R4 = R2;
           R3 = lvl32_rURc_closure;
           R2 = GHC.Show.$fShowWord_closure;
           call GHC.Enum.$wtoEnumError_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$wlvl2_info" {
     GHC.Enum.$wlvl2_info:
         const GHC.Enum.$wlvl2_entry;
         const 0;
         const 18446744069414584334;
         const 4294967300;
         const u1daH_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.1804809 UTC

[section ""data" . GHC.Enum.$fEnumWord2_closure" {
     GHC.Enum.$fEnumWord2_closure:
         const GHC.Enum.$fEnumWord2_info;
         const 0;
 },
 GHC.Enum.$fEnumWord2_entry() //  [R2]
         { []
         }
     {offset
       c1daU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1daV; else goto c1daW;
       c1daV: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumWord2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1daW: // global
           I64[Sp - 8] = block_c1daR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1db0; else goto c1daS;
       u1db0: // global
           call _c1daR(R1) args: 0, res: 0, upd: 0;
       c1daS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord2_info" {
     GHC.Enum.$fEnumWord2_info:
         const GHC.Enum.$fEnumWord2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+888;
 },
 _c1daR() //  [R1]
         { []
         }
     {offset
       c1daR: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.$wlvl2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1daR_info" {
     block_c1daR_info:
         const _c1daR;
         const 0;
         const 4294967326;
         const S17Oj_srt+896;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.187789689 UTC

[section ""data" . GHC.Enum.$fEnumWord_$ctoEnum_closure" {
     GHC.Enum.$fEnumWord_$ctoEnum_closure:
         const GHC.Enum.$fEnumWord_$ctoEnum_info;
         const 0;
 },
 GHC.Enum.$fEnumWord_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c1dbi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1dbj; else goto c1dbk;
       c1dbj: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumWord_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1dbk: // global
           I64[Sp - 8] = block_c1dbf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1dbB; else goto c1dbg;
       u1dbB: // global
           call _c1dbf(R1) args: 0, res: 0, upd: 0;
       c1dbg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord_$ctoEnum_info" {
     GHC.Enum.$fEnumWord_$ctoEnum_info:
         const GHC.Enum.$fEnumWord_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+896;
 },
 _c1dbf() //  [R1]
         { []
         }
     {offset
       c1dbf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1dbp; else goto c1dbo;
       c1dbp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1dbo: // global
           _s17G8::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s17G8::I64, 0)) goto c1dbt; else goto c1dbA;
       c1dbt: // global
           Hp = Hp - 16;
           R2 = _s17G8::I64;
           Sp = Sp + 8;
           call GHC.Enum.$wlvl2_entry(R2) args: 8, res: 0, upd: 8;
       c1dbA: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s17G8::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1dbf_info" {
     block_c1dbf_info:
         const _c1dbf;
         const 0;
         const 4294967326;
         const S17Oj_srt+896;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.194567725 UTC

[section ""data" . GHC.Enum.efdWord_closure" {
     GHC.Enum.efdWord_closure:
         const GHC.Enum.efdWord_info;
 },
 GHC.Enum.efdWord_entry() //  [R2, R3]
         { []
         }
     {offset
       c1dbX: // global
           if (R3 < R2) goto c1dbV; else goto c1dbW;
       c1dbV: // global
           R4 = 0;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtWordDn_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c1dbW: // global
           R4 = 18446744073709551615;
           R3 = R3;
           R2 = R2;
           call GHC.Enum.efdtWordUp_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.efdWord_info" {
     GHC.Enum.efdWord_info:
         const GHC.Enum.efdWord_entry;
         const 0;
         const 14;
         const 8589934604;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.19897978 UTC

[section ""data" . GHC.Enum.$fEnumWord_$cenumFromThen_closure" {
     GHC.Enum.$fEnumWord_$cenumFromThen_closure:
         const GHC.Enum.$fEnumWord_$cenumFromThen_info;
 },
 GHC.Enum.$fEnumWord_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c1dcb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1dcf; else goto c1dcg;
       c1dcf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumWord_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1dcg: // global
           I64[Sp - 16] = block_c1dc8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1dco; else goto c1dc9;
       u1dco: // global
           call _c1dc8(R1) args: 0, res: 0, upd: 0;
       c1dc9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumWord_$cenumFromThen_info" {
     GHC.Enum.$fEnumWord_$cenumFromThen_info:
         const GHC.Enum.$fEnumWord_$cenumFromThen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1dc8() //  [R1]
         { []
         }
     {offset
       c1dc8: // global
           I64[Sp] = block_c1dce_info;
           _s17Gh::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s17Gh::I64;
           if (R1 & 7 != 0) goto u1dcn; else goto c1dci;
       u1dcn: // global
           call _c1dce(R1) args: 0, res: 0, upd: 0;
       c1dci: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1dc8_info" {
     block_c1dc8_info:
         const _c1dc8;
         const 1;
         const 30;
 },
 _c1dce() //  [R1]
         { []
         }
     {offset
       c1dce: // global
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Enum.efdWord_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1dce_info" {
     block_c1dce_info:
         const _c1dce;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.205402374 UTC

[section ""data" . GHC.Enum.$fEnumWord_closure" {
     GHC.Enum.$fEnumWord_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumWord_$csucc_closure+1;
         const GHC.Enum.$fEnumWord_$cpred_closure+1;
         const GHC.Enum.$fEnumWord_$ctoEnum_closure+1;
         const GHC.Enum.$fEnumWord_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumWord_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumWord_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumWord_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumWord_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.207767929 UTC

[section ""data" . GHC.Enum.$fEnumInteger_$csucc_closure" {
     GHC.Enum.$fEnumInteger_$csucc_closure:
         const GHC.Enum.$fEnumInteger_$csucc_info;
         const 0;
 },
 GHC.Enum.$fEnumInteger_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c1dcJ: // global
           R3 = GHC.Enum.$fEnumInteger1_closure;
           R2 = R2;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger_$csucc_info" {
     GHC.Enum.$fEnumInteger_$csucc_info:
         const GHC.Enum.$fEnumInteger_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S17Oj_srt+912;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.211380731 UTC

[section ""data" . GHC.Enum.$fEnumInteger_$cpred_closure" {
     GHC.Enum.$fEnumInteger_$cpred_closure:
         const GHC.Enum.$fEnumInteger_$cpred_info;
         const 0;
 },
 GHC.Enum.$fEnumInteger_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c1dcU: // global
           R3 = GHC.Enum.$fEnumInteger1_closure;
           R2 = R2;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger_$cpred_info" {
     GHC.Enum.$fEnumInteger_$cpred_info:
         const GHC.Enum.$fEnumInteger_$cpred_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S17Oj_srt+912;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.216510527 UTC

[section ""data" . GHC.Enum.$wenumDeltaInteger_closure" {
     GHC.Enum.$wenumDeltaInteger_closure:
         const GHC.Enum.$wenumDeltaInteger_info;
         const 0;
 },
 sat_s17Gt_entry() //  [R1]
         { []
         }
     {offset
       c1ddg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1ddm; else goto c1ddn;
       c1ddm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ddn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1dde_info;
           _s17Gn::P64 = P64[R1 + 16];
           R3 = _s17Gn::P64;
           R2 = P64[R1 + 24];
           P64[Sp - 24] = _s17Gn::P64;
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17Gt_info" {
     sat_s17Gt_info:
         const sat_s17Gt_entry;
         const 2;
         const 21474836498;
         const S17Oj_srt+920;
 },
 _c1dde() //  [R1]
         { []
         }
     {offset
       c1dde: // global
           _s17Gn::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1ddj_info;
           R3 = _s17Gn::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Enum.$wenumDeltaInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1dde_info" {
     block_c1dde_info:
         const _c1dde;
         const 1;
         const 4294967326;
         const S17Oj_srt+936;
 },
 _c1ddj() //  [R1, R2]
         { []
         }
     {offset
       c1ddj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1ddr; else goto c1ddq;
       c1ddr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1ddq: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1ddj_info" {
     block_c1ddj_info:
         const _c1ddj;
         const 0;
         const 30;
 },
 GHC.Enum.$wenumDeltaInteger_entry() //  [R2, R3]
         { []
         }
     {offset
       c1dds: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1ddt; else goto c1ddu;
       c1ddt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$wenumDeltaInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1ddu: // global
           I64[Sp - 16] = block_c1dd5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1ddy; else goto c1dd6;
       u1ddy: // global
           call _c1dd5(R1) args: 0, res: 0, upd: 0;
       c1dd6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$wenumDeltaInteger_info" {
     GHC.Enum.$wenumDeltaInteger_info:
         const GHC.Enum.$wenumDeltaInteger_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S17Oj_srt+920;
 },
 _c1dd5() //  [R1]
         { []
         }
     {offset
       c1dd5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1ddx; else goto c1ddw;
       c1ddx: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1ddw: // global
           I64[Hp - 24] = sat_s17Gt_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R2 = Hp - 24;
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1dd5_info" {
     block_c1dd5_info:
         const _c1dd5;
         const 1;
         const 21474836510;
         const S17Oj_srt+920;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.230299241 UTC

[section ""data" . GHC.Enum.enumDeltaIntegerFB_closure" {
     GHC.Enum.enumDeltaIntegerFB_closure:
         const GHC.Enum.enumDeltaIntegerFB_info;
         const 0;
 },
 sat_s17GB_entry() //  [R1]
         { []
         }
     {offset
       c1del: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1dem; else goto c1den;
       c1dem: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1den: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1dej_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17GB_info" {
     sat_s17GB_info:
         const sat_s17GB_entry;
         const 3;
         const 4294967311;
         const S17Oj_srt+920;
 },
 _c1dej() //  [R1]
         { []
         }
     {offset
       c1dej: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s17Gx_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1dej_info" {
     block_c1dej_info:
         const _c1dej;
         const 1;
         const 4294967326;
         const S17Oj_srt+920;
 },
 go_s17Gx_entry() //  [R1, R2]
         { []
         }
     {offset
       c1der: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1des; else goto c1det;
       c1des: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1det: // global
           I64[Sp - 32] = block_c1dea_info;
           _s17Gx::P64 = R1;
           _s17Gu::P64 = P64[R1 + 7];
           _s17Gw::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s17Gu::P64;
           P64[Sp - 16] = _s17Gw::P64;
           P64[Sp - 8] = _s17Gx::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1dex; else goto c1deb;
       u1dex: // global
           call _c1dea(R1) args: 0, res: 0, upd: 0;
       c1deb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s17Gx_info" {
     go_s17Gx_info:
         const go_s17Gx_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S17Oj_srt+920;
 },
 _c1dea() //  [R1]
         { []
         }
     {offset
       c1dea: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1dew; else goto c1dev;
       c1dew: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1dev: // global
           I64[Hp - 32] = sat_s17GB_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R3 = Hp - 32;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1dea_info" {
     block_c1dea_info:
         const _c1dea;
         const 3;
         const 4294967326;
         const S17Oj_srt+920;
 },
 GHC.Enum.enumDeltaIntegerFB_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1dey: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1deC; else goto c1deB;
       c1deC: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.enumDeltaIntegerFB_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1deB: // global
           I64[Hp - 16] = go_s17Gx_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = R3;
           R1 = Hp - 15;
           call go_s17Gx_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumDeltaIntegerFB_info" {
     GHC.Enum.enumDeltaIntegerFB_info:
         const GHC.Enum.enumDeltaIntegerFB_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const S17Oj_srt+920;
 },
 section ""data" . GHC.Enum.enumDeltaInteger_closure" {
     GHC.Enum.enumDeltaInteger_closure:
         const GHC.Enum.enumDeltaInteger_info;
         const 0;
 },
 GHC.Enum.enumDeltaInteger_entry() //  [R2, R3]
         { []
         }
     {offset
       c1deK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1deL; else goto c1deM;
       c1deL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.enumDeltaInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1deM: // global
           I64[Sp - 8] = block_c1deH_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Enum.$wenumDeltaInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumDeltaInteger_info" {
     GHC.Enum.enumDeltaInteger_info:
         const GHC.Enum.enumDeltaInteger_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S17Oj_srt+936;
 },
 _c1deH() //  [R1, R2]
         { []
         }
     {offset
       c1deH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1deP; else goto c1deO;
       c1deP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1deO: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1deH_info" {
     block_c1deH_info:
         const _c1deH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.245083874 UTC

[section ""data" . GHC.Enum.$fEnumInteger_$cenumFrom_closure" {
     GHC.Enum.$fEnumInteger_$cenumFrom_closure:
         const GHC.Enum.$fEnumInteger_$cenumFrom_info;
         const 0;
 },
 GHC.Enum.$fEnumInteger_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c1dfz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1dfA; else goto c1dfB;
       c1dfA: // global
           R2 = R2;
           R1 = GHC.Enum.$fEnumInteger_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1dfB: // global
           I64[Sp - 8] = block_c1dfw_info;
           R3 = GHC.Enum.$fEnumInteger1_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Enum.$wenumDeltaInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger_$cenumFrom_info" {
     GHC.Enum.$fEnumInteger_$cenumFrom_info:
         const GHC.Enum.$fEnumInteger_$cenumFrom_entry;
         const 0;
         const 313532612622;
         const 4294967301;
         const S17Oj_srt+912;
 },
 _c1dfw() //  [R1, R2]
         { []
         }
     {offset
       c1dfw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1dfE; else goto c1dfD;
       c1dfE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1dfD: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1dfw_info" {
     block_c1dfw_info:
         const _c1dfw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.251729483 UTC

[section ""data" . GHC.Enum.$fEnumInteger_$cenumFromThen_closure" {
     GHC.Enum.$fEnumInteger_$cenumFromThen_closure:
         const GHC.Enum.$fEnumInteger_$cenumFromThen_info;
         const 0;
 },
 sat_s17GN_entry() //  [R1]
         { []
         }
     {offset
       c1dfY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1dfZ; else goto c1dg0;
       c1dfZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1dg0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17GN_info" {
     sat_s17GN_info:
         const sat_s17GN_entry;
         const 2;
         const 4294967314;
         const S17Oj_srt+928;
 },
 GHC.Enum.$fEnumInteger_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c1dg4: // global
           _s17GM::P64 = R3;
           _s17GL::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c1dg5; else goto c1dg6;
       c1dg6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1dg8; else goto c1dg7;
       c1dg8: // global
           HpAlloc = 32;
           goto c1dg5;
       c1dg5: // global
           R3 = _s17GM::P64;
           R2 = _s17GL::P64;
           R1 = GHC.Enum.$fEnumInteger_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1dg7: // global
           I64[Hp - 24] = sat_s17GN_info;
           P64[Hp - 8] = _s17GL::P64;
           P64[Hp] = _s17GM::P64;
           I64[Sp - 8] = block_c1dg1_info;
           R3 = Hp - 24;
           R2 = _s17GL::P64;
           Sp = Sp - 8;
           call GHC.Enum.$wenumDeltaInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger_$cenumFromThen_info" {
     GHC.Enum.$fEnumInteger_$cenumFromThen_info:
         const GHC.Enum.$fEnumInteger_$cenumFromThen_entry;
         const 0;
         const 150323855374;
         const 8589934607;
         const S17Oj_srt+928;
 },
 _c1dg1() //  [R1, R2]
         { []
         }
     {offset
       c1dg1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1dgb; else goto c1dga;
       c1dgb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1dga: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1dg1_info" {
     block_c1dg1_info:
         const _c1dg1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.260139511 UTC

[section ""data" . GHC.Enum.$fEnumInteger2_closure" {
     GHC.Enum.$fEnumInteger2_closure:
         const GHC.Enum.$fEnumInteger2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Enum.$fEnumInteger2_entry() //  [R1]
         { []
         }
     {offset
       c1dgz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1dgA; else goto c1dgB;
       c1dgA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1dgB: // global
           (_c1dgw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1dgw::I64 == 0) goto c1dgy; else goto c1dgx;
       c1dgy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1dgx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1dgw::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger2_info" {
     GHC.Enum.$fEnumInteger2_info:
         const GHC.Enum.$fEnumInteger2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.26952338 UTC

[section ""data" . GHC.Enum.enumDeltaToInteger_closure" {
     GHC.Enum.enumDeltaToInteger_closure:
         const GHC.Enum.enumDeltaToInteger_info;
         const 0;
 },
 sat_s17GZ_entry() //  [R1]
         { []
         }
     {offset
       c1dh9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1dha; else goto c1dhb;
       c1dha: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1dhb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1dh7_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17GZ_info" {
     sat_s17GZ_info:
         const sat_s17GZ_entry;
         const 3;
         const 4294967311;
         const S17Oj_srt+920;
 },
 _c1dh7() //  [R1]
         { []
         }
     {offset
       c1dh7: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s17GV_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1dh7_info" {
     block_c1dh7_info:
         const _c1dh7;
         const 1;
         const 4294967326;
         const S17Oj_srt+920;
 },
 go_s17GV_entry() //  [R1, R2]
         { []
         }
     {offset
       c1dhi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1dhj; else goto c1dhk;
       c1dhj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1dhk: // global
           I64[Sp - 32] = block_c1dgZ_info;
           R3 = P64[R1 + 15];
           _s17GW::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s17GW::P64;
           Sp = Sp - 32;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s17GV_info" {
     go_s17GV_info:
         const go_s17GV_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S17Oj_srt+920;
 },
 _c1dgZ() //  [R1]
         { []
         }
     {offset
       c1dgZ: // global
           if (R1 == 1) goto c1dhh; else goto c1dhg;
       c1dhh: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1dhg: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c1dho; else goto c1dhn;
       c1dho: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1dhn: // global
           I64[Hp - 56] = sat_s17GZ_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           _s17GW::P64 = P64[Sp + 24];
           P64[Hp - 24] = _s17GW::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s17GW::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1dgZ_info" {
     block_c1dgZ_info:
         const _c1dgZ;
         const 3;
         const 4294967326;
         const S17Oj_srt+920;
 },
 sat_s17H4_entry() //  [R1]
         { []
         }
     {offset
       c1dhJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1dhK; else goto c1dhL;
       c1dhK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1dhL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1dhH_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s17H4_info" {
     sat_s17H4_info:
         const sat_s17H4_entry;
         const 3;
         const 4294967311;
         const S17Oj_srt+920;
 },
 _c1dhH() //  [R1]
         { []
         }
     {offset
       c1dhH: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s17H0_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1dhH_info" {
     block_c1dhH_info:
         const _c1dhH;
         const 1;
         const 4294967326;
         const S17Oj_srt+920;
 },
 go_s17H0_entry() //  [R1, R2]
         { []
         }
     {offset
       c1dhS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1dhT; else goto c1dhU;
       c1dhT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1dhU: // global
           I64[Sp - 32] = block_c1dhz_info;
           R3 = P64[R1 + 15];
           _s17H1::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s17H1::P64;
           Sp = Sp - 32;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s17H0_info" {
     go_s17H0_info:
         const go_s17H0_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S17Oj_srt+920;
 },
 _c1dhz() //  [R1]
         { []
         }
     {offset
       c1dhz: // global
           if (R1 == 1) goto c1dhR; else goto c1dhQ;
       c1dhR: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1dhQ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c1dhY; else goto c1dhX;
       c1dhY: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1dhX: // global
           I64[Hp - 56] = sat_s17H4_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           _s17H1::P64 = P64[Sp + 24];
           P64[Hp - 24] = _s17H1::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s17H1::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1dhz_info" {
     block_c1dhz_info:
         const _c1dhz;
         const 3;
         const 4294967326;
         const S17Oj_srt+920;
 },
 GHC.Enum.enumDeltaToInteger_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1di5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1di6; else goto c1di7;
       c1di6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.enumDeltaToInteger_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1di7: // global
           I64[Sp - 32] = block_c1dgQ_info;
           _s17GS::P64 = R3;
           R3 = GHC.Enum.$fEnumInteger2_closure;
           _s17GR::P64 = R2;
           R2 = _s17GS::P64;
           P64[Sp - 24] = _s17GR::P64;
           P64[Sp - 16] = _s17GS::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumDeltaToInteger_info" {
     GHC.Enum.enumDeltaToInteger_info:
         const GHC.Enum.enumDeltaToInteger_entry;
         const 0;
         const 1653562408974;
         const 12884901911;
         const S17Oj_srt+920;
 },
 _c1dgQ() //  [R1]
         { []
         }
     {offset
       c1dgQ: // global
           _s17GR::P64 = P64[Sp + 8];
           _s17GS::P64 = P64[Sp + 16];
           _s17GT::P64 = P64[Sp + 24];
           if (R1 == 1) goto c1di4; else goto c1di3;
       c1di4: // global
           Hp = Hp + 24;
           _s17GU::I64 = R1;
           if (Hp > HpLim) (likely: False) goto c1did; else goto c1dic;
       c1dic: // global
           I64[Hp - 16] = go_s17H0_info;
           P64[Hp - 8] = _s17GS::P64;
           P64[Hp] = _s17GT::P64;
           R2 = _s17GR::P64;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call go_s17H0_entry(R2, R1) args: 8, res: 0, upd: 8;
       c1di3: // global
           Hp = Hp + 24;
           _s17GU::I64 = R1;
           if (Hp > HpLim) (likely: False) goto c1did; else goto c1di9;
       c1did: // global
           HpAlloc = 24;
           R1 = _s17GU::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1di9: // global
           I64[Hp - 16] = go_s17GV_info;
           P64[Hp - 8] = _s17GS::P64;
           P64[Hp] = _s17GT::P64;
           R2 = _s17GR::P64;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call go_s17GV_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1dgQ_info" {
     block_c1dgQ_info:
         const _c1dgQ;
         const 3;
         const 4294967326;
         const S17Oj_srt+920;
 },
 section ""data" . GHC.Enum.enumDeltaToIntegerFB_closure" {
     GHC.Enum.enumDeltaToIntegerFB_closure:
         const GHC.Enum.enumDeltaToIntegerFB_info;
         const 0;
 },
 section ""relreadonly" . u1diw_srtd" {
     u1diw_srtd:
         const S17Oj_srt+512;
         const 61;
         const 1729382256910270467;
 },
 GHC.Enum.enumDeltaToIntegerFB_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1din: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1dio; else goto c1dip;
       c1dio: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.enumDeltaToIntegerFB_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1dip: // global
           I64[Sp - 48] = block_c1dii_info;
           _s17H6::P64 = R3;
           R3 = GHC.Enum.$fEnumInteger2_closure;
           _s17H5::P64 = R2;
           R2 = R5;
           P64[Sp - 40] = _s17H5::P64;
           P64[Sp - 32] = _s17H6::P64;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.enumDeltaToIntegerFB_info" {
     GHC.Enum.enumDeltaToIntegerFB_info:
         const GHC.Enum.enumDeltaToIntegerFB_entry;
         const 0;
         const 18446744069414584334;
         const 21474836505;
         const u1diw_srtd;
 },
 _c1dii() //  [R1]
         { []
         }
     {offset
       c1dii: // global
           _s17H5::P64 = P64[Sp + 8];
           _s17H6::P64 = P64[Sp + 16];
           _s17H7::P64 = P64[Sp + 24];
           _s17H8::P64 = P64[Sp + 32];
           _s17H9::P64 = P64[Sp + 40];
           if (R1 == 1) goto c1dim; else goto c1dil;
       c1dim: // global
           R6 = _s17H9::P64;
           R5 = _s17H8::P64;
           R4 = _s17H7::P64;
           R3 = _s17H6::P64;
           R2 = _s17H5::P64;
           Sp = Sp + 48;
           call GHC.Enum.up_fb_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 0, upd: 8;
       c1dil: // global
           R6 = _s17H9::P64;
           R5 = _s17H8::P64;
           R4 = _s17H7::P64;
           R3 = _s17H6::P64;
           R2 = _s17H5::P64;
           Sp = Sp + 48;
           call GHC.Enum.dn_fb_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1dii_info" {
     block_c1dii_info:
         const _c1dii;
         const 5;
         const 12884901918;
         const S17Oj_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.294671258 UTC

[section ""data" . GHC.Enum.$fEnumInteger_$cenumFromTo_closure" {
     GHC.Enum.$fEnumInteger_$cenumFromTo_closure:
         const GHC.Enum.$fEnumInteger_$cenumFromTo_info;
         const 0;
 },
 GHC.Enum.$fEnumInteger_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c1djO: // global
           R3 = R3;
           R2 = R2;
           call GHC.Enum.enumDeltaToInteger1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger_$cenumFromTo_info" {
     GHC.Enum.$fEnumInteger_$cenumFromTo_info:
         const GHC.Enum.$fEnumInteger_$cenumFromTo_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S17Oj_srt+1016;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.298755393 UTC

[section ""data" . GHC.Enum.$fEnumInteger_$cenumFromThenTo_closure" {
     GHC.Enum.$fEnumInteger_$cenumFromThenTo_closure:
         const GHC.Enum.$fEnumInteger_$cenumFromThenTo_info;
         const 0;
 },
 GHC.Enum.$fEnumInteger_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1dk1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1dk2; else goto c1dk3;
       c1dk2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.$fEnumInteger_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1dk3: // global
           I64[Sp - 24] = block_c1djZ_info;
           _s17Hc::P64 = R3;
           R3 = R2;
           _s17Hb::P64 = R2;
           R2 = _s17Hc::P64;
           P64[Sp - 16] = _s17Hb::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.$fEnumInteger_$cenumFromThenTo_info" {
     GHC.Enum.$fEnumInteger_$cenumFromThenTo_info:
         const GHC.Enum.$fEnumInteger_$cenumFromThenTo_entry;
         const 0;
         const 17871358918670;
         const 12884901911;
         const S17Oj_srt+928;
 },
 _c1djZ() //  [R1]
         { []
         }
     {offset
       c1djZ: // global
           R4 = P64[Sp + 16];
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Enum.enumDeltaToInteger_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1djZ_info" {
     block_c1djZ_info:
         const _c1djZ;
         const 2;
         const 4294967326;
         const S17Oj_srt+976;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.303726193 UTC

[section ""data" . GHC.Enum.$fEnumInteger_closure" {
     GHC.Enum.$fEnumInteger_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Enum.$fEnumInteger_$csucc_closure+1;
         const GHC.Enum.$fEnumInteger_$cpred_closure+1;
         const GHC.Enum.$fEnumInteger_$ctoEnum_closure+1;
         const GHC.Enum.$fEnumInteger_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInteger_$cenumFrom_closure+1;
         const GHC.Enum.$fEnumInteger_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumInteger_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumInteger_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.306752547 UTC

[section ""data" . GHC.Enum.C:Bounded_closure" {
     GHC.Enum.C:Bounded_closure:
         const GHC.Enum.C:Bounded_info;
 },
 GHC.Enum.C:Bounded_entry() //  [R2, R3]
         { []
         }
     {offset
       c1dkm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1dkq; else goto c1dkp;
       c1dkq: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Enum.C:Bounded_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1dkp: // global
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.C:Bounded_info" {
     GHC.Enum.C:Bounded_info:
         const GHC.Enum.C:Bounded_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.311567601 UTC

[section ""data" . GHC.Enum.C:Enum_closure" {
     GHC.Enum.C:Enum_closure:
         const GHC.Enum.C:Enum_info;
 },
 GHC.Enum.C:Enum_slow() //  [R1]
         { []
         }
     {offset
       c1dky: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Enum.C:Enum_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2,
                                      R1) args: 32, res: 0, upd: 8;
     }
 },
 GHC.Enum.C:Enum_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1dkD: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1dkH; else goto c1dkG;
       c1dkH: // global
           HpAlloc = 72;
           R1 = GHC.Enum.C:Enum_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c1dkG: // global
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = R6;
           P64[Hp - 16] = P64[Sp];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 63;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.C:Enum_info" {
     GHC.Enum.C:Enum_info:
         const GHC.Enum.C:Enum_entry;
         const 0;
         const 14;
         const 34359738368;
         const 0;
         const 8;
         const GHC.Enum.C:Enum_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.316282802 UTC

[section ""cstring" . i1dkU_str" {
     i1dkU_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,110,117,109,46,67,58,66,111,117,110,100,101,100]
 },
 GHC.Enum.C:Bounded_con_entry() //  [R1]
         { []
         }
     {offset
       c1dkT: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.C:Bounded_con_info" {
     GHC.Enum.C:Bounded_con_info:
         const GHC.Enum.C:Bounded_con_entry;
         const 2;
         const 4;
         const i1dkU_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.319437384 UTC

[section ""cstring" . i1dl1_str" {
     i1dl1_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,110,117,109,46,67,58,69,110,117,109]
 },
 GHC.Enum.C:Enum_con_entry() //  [R1]
         { []
         }
     {offset
       c1dl0: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Enum.C:Enum_con_info" {
     GHC.Enum.C:Enum_con_info:
         const GHC.Enum.C:Enum_con_entry;
         const 8;
         const 1;
         const i1dl1_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:00.32314242 UTC

[section ""relreadonly" . S17Oj_srt" {
     S17Oj_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Enum.$fEnum()_$ctoEnum_closure;
         const GHC.Enum.$fEnum()3_closure;
         const GHC.Enum.$fEnum()4_closure;
         const GHC.Enum.$fEnum()6_closure;
         const GHC.Enum.$fEnumBool1_closure;
         const GHC.Enum.$fEnumBool_$ctoEnum_closure;
         const GHC.Enum.$fEnumBool_$cpred_closure;
         const GHC.Enum.$fEnumBool5_closure;
         const GHC.Enum.$fEnumBool_$csucc_closure;
         const GHC.Enum.$fEnumBool6_closure;
         const GHC.Enum.$fEnumOrdering_$ctoEnum_closure;
         const GHC.Enum.$fEnumOrdering5_closure;
         const GHC.Enum.$fEnumOrdering_$cpred_closure;
         const GHC.Enum.$fEnumOrdering6_closure;
         const GHC.Enum.$fEnumOrdering_$csucc_closure;
         const GHC.Enum.$fEnumOrdering7_closure;
         const GHC.Enum.$fEnumChar_$cpred_closure;
         const GHC.Enum.$fEnumChar1_closure;
         const GHC.Enum.$fEnumChar_$csucc_closure;
         const GHC.Enum.$fEnumChar2_closure;
         const GHC.Enum.$fEnumInt_$cpred_closure;
         const GHC.Enum.$fEnumInt1_closure;
         const GHC.Enum.$fEnumInt_$csucc_closure;
         const GHC.Enum.$fEnumInt2_closure;
         const GHC.Show.$fShow(,)_go1_closure;
         const GHC.Enum.$wtoEnumError_closure;
         const GHC.Enum.toEnumError_closure;
         const lvl21_rUR1_closure;
         const lvl22_rUR2_closure;
         const GHC.Enum.fromEnumError_closure;
         const lvl27_rUR7_closure;
         const GHC.Enum.succError_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const lvl30_rURa_closure;
         const GHC.Enum.predError_closure;
         const GHC.Enum.$fEnumOrdering_go_closure;
         const GHC.Enum.$fEnumOrdering_$cenumFrom_closure;
         const GHC.Enum.$fEnumOrdering1_closure;
         const GHC.Enum.$fEnumOrdering2_closure;
         const GHC.Enum.$fEnumOrdering3_closure;
         const GHC.Enum.$fEnumOrdering_go2_closure;
         const GHC.Enum.$fEnumOrdering_go1_closure;
         const GHC.Enum.$fEnumOrdering_$cenumFromTo_closure;
         const GHC.Enum.$fEnumBool_go_closure;
         const GHC.Enum.$fEnumBool1_closure;
         const GHC.Enum.$fEnumBool_$cenumFrom_closure;
         const GHC.Enum.$fEnumBool2_closure;
         const GHC.Enum.$fEnumBool3_closure;
         const GHC.Enum.$fEnumBool_go1_closure;
         const GHC.Enum.$fEnumBool_$cenumFromTo_closure;
         const GHC.Enum.$fEnumOrdering5_closure;
         const GHC.Enum.$fEnumOrdering_$cenumFromThenTo_closure;
         const GHC.Enum.$fEnumBool_$cenumFromThenTo_closure;
         const GHC.Enum.$fEnumBool_$cenumFromThen_closure;
         const GHC.Enum.$fEnumOrdering_$cenumFromThen_closure;
         const lvl32_rURc_closure;
         const GHC.Enum.$fEnumWord_$cfromEnum_closure;
         const GHC.Enum.$fEnumWord1_closure;
         const sat_s17vz_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Enum.$fEnumInteger1_closure;
         const GHC.Enum.enumDeltaToInteger1_closure;
         const GHC.Enum.enumDeltaToInteger1FB_closure;
         const GHC.Enum.up_fb_closure;
         const GHC.Enum.dn_fb_closure;
         const GHC.Err.error_closure;
         const lvl42_rURm_closure;
         const GHC.Enum.$fEnumVecElem_$cpred_closure;
         const GHC.Enum.$fEnumVecElem1_closure;
         const GHC.Enum.$fEnumVecElem_$csucc_closure;
         const GHC.Enum.$fEnumVecElem2_closure;
         const lvl47_rURr_closure;
         const lvl48_rURs_closure;
         const lvl49_rURt_closure;
         const GHC.Enum.$wlvl1_closure;
         const GHC.Enum.$fEnumVecElem_$ctoEnum_closure;
         const GHC.Enum.$w$ctoEnum1_closure;
         const GHC.Enum.$fEnumVecElem_$cenumFromTo_closure;
         const GHC.Enum.$fEnumVecElem_$cenumFromThenTo_closure;
         const lvl57_rURB_closure;
         const GHC.Enum.$fEnumVecCount_$cpred_closure;
         const GHC.Enum.$fEnumVecCount7_closure;
         const GHC.Enum.$fEnumVecCount_$csucc_closure;
         const GHC.Enum.$fEnumVecCount8_closure;
         const lvl60_rURE_closure;
         const lvl61_rURF_closure;
         const GHC.Enum.$wlvl_closure;
         const GHC.Enum.$fEnumVecCount_$ctoEnum_closure;
         const GHC.Enum.$w$ctoEnum_closure;
         const GHC.Enum.$fEnumVecCount_$cenumFrom_closure;
         const GHC.Enum.$fEnumVecCount1_closure;
         const GHC.Enum.$fEnumVecCount2_closure;
         const GHC.Enum.$fEnumVecCount3_closure;
         const GHC.Enum.$fEnumVecCount4_closure;
         const GHC.Enum.$fEnumVecCount5_closure;
         const GHC.Enum.$fEnumVecCount6_closure;
         const GHC.Enum.$fEnumVecCount_go5_closure;
         const GHC.Enum.$fEnumVecCount_go4_closure;
         const GHC.Enum.$fEnumVecCount_go3_closure;
         const GHC.Enum.$fEnumVecCount_go2_closure;
         const GHC.Enum.$fEnumVecCount_go1_closure;
         const GHC.Enum.$fEnumVecCount_go_closure;
         const GHC.Enum.$fEnumVecCount_$cenumFromTo_closure;
         const GHC.Enum.$fEnumVecCount_$cenumFromThenTo_closure;
         const lvl32_rURc_closure;
         const GHC.Enum.succError_closure;
         const GHC.Enum.$fEnumWord_$csucc_closure;
         const GHC.Enum.$fEnumWord4_closure;
         const GHC.Enum.$fEnumWord_$cpred_closure;
         const GHC.Enum.$fEnumWord3_closure;
         const GHC.Enum.$fEnumWord2_closure;
         const GHC.Enum.$wlvl2_closure;
         const GHC.Enum.$fEnumWord_$ctoEnum_closure;
         const GHC.Enum.$fEnumInteger1_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const GHC.Enum.$wenumDeltaInteger_closure;
         const GHC.Enum.enumDeltaIntegerFB_closure;
         const GHC.Enum.enumDeltaInteger_closure;
         const GHC.Enum.$fEnumInteger_$cenumFrom_closure;
         const GHC.Enum.$fEnumInteger_$cenumFromThen_closure;
         const GHC.Enum.enumDeltaToInteger_closure;
         const GHC.Enum.$fEnumInteger2_closure;
         const GHC.Enum.enumDeltaToIntegerFB_closure;
         const GHC.Enum.dn_fb_closure;
         const GHC.Enum.up_fb_closure;
         const GHC.Enum.enumDeltaToInteger1_closure;
         const GHC.Enum.$fEnumInteger_$cenumFromThenTo_closure;
 }]

