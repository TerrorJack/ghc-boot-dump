
==================== Pre unarise: ====================
2018-03-16 16:02:49.725342712 UTC

GHC.ForeignPtr.$WPlainForeignPtr [InlPrag=INLINE[2]]
  :: GHC.IORef.IORef GHC.ForeignPtr.Finalizers
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m1,
 Unf=OtherCon []] =
    [] \r [dt_s7KbC]
        case dt_s7KbC of {
          GHC.STRef.STRef dt_s7KbE [Occ=Once] ->
              GHC.ForeignPtr.PlainForeignPtr [dt_s7KbE];
        };

GHC.ForeignPtr.$WMallocPtr [InlPrag=INLINE[2]]
  :: GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
     -> GHC.IORef.IORef GHC.ForeignPtr.Finalizers
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>m2,
 Unf=OtherCon []] =
    [] \r [dt_s7KbF dt_s7KbG]
        case dt_s7KbG of {
          GHC.STRef.STRef dt_s7KbI [Occ=Once] ->
              GHC.ForeignPtr.MallocPtr [dt_s7KbF dt_s7KbI];
        };

lvl_r7KaV :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "undefined"#;

lvl1_r7KaW :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_r7KaV;

GHC.ForeignPtr.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

lvl2_r7KaX :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ForeignPtr.$trModule4;

GHC.ForeignPtr.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ForeignPtr"#;

lvl3_r7KaY :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ForeignPtr.$trModule2;

lvl4_r7KaZ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/ForeignPtr.hs"#;

lvl5_r7Kb0 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl4_r7KaZ;

lvl6_r7Kb1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [214#];

lvl7_r7Kb2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [34#];

lvl8_r7Kb3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [43#];

lvl9_r7Kb4 :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl2_r7KaX
                                           lvl3_r7KaY
                                           lvl5_r7Kb0
                                           lvl6_r7Kb1
                                           lvl7_r7Kb2
                                           lvl6_r7Kb1
                                           lvl8_r7Kb3];

lvl10_r7Kb5 :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl1_r7KaW
                                                  lvl9_r7Kb4
                                                  GHC.Stack.Types.EmptyCallStack];

GHC.ForeignPtr.mallocPlainForeignPtr2 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl10_r7Kb5;

lvl11_r7Kb6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocForeignPtr: size must be >= 0"#;

GHC.ForeignPtr.mallocForeignPtr2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl11_r7Kb6 of sat_s7KbJ {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7KbJ;
        };

GHC.ForeignPtr.mallocPlainForeignPtr1
  :: forall a.
     Foreign.Storable.Storable a =>
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=2,
 Str=<S(C(S(S))C(S(S))LLLLLL),U(1*C1(U(U)),1*C1(U(U)),A,A,A,A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s7KbK eta_s7KbL]
        case
            Foreign.Storable.alignment
                $dStorable_s7KbK GHC.ForeignPtr.mallocPlainForeignPtr2
        of
        { GHC.Types.I# align_s7KbN [Occ=Once] ->
              case
                  Foreign.Storable.sizeOf
                      $dStorable_s7KbK GHC.ForeignPtr.mallocPlainForeignPtr2
              of
              { GHC.Types.I# size_s7KbP ->
                    case <# [size_s7KbP 0#] of {
                      __DEFAULT ->
                          case
                              newAlignedPinnedByteArray# [size_s7KbP align_s7KbN eta_s7KbL]
                          of
                          { (#,#) ipv_s7KbS [Occ=Once] ipv1_s7KbT ->
                                let {
                                  sat_s7KbV [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                  [LclId] =
                                      CCCS GHC.ForeignPtr.PlainPtr! [ipv1_s7KbT];
                                } in 
                                  case byteArrayContents# [ipv1_s7KbT] of sat_s7KbU {
                                    __DEFAULT ->
                                        let {
                                          sat_s7KbW [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7IZ0
                                          [LclId] =
                                              CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7KbU sat_s7KbV];
                                        } in  (#,#) [ipv_s7KbS sat_s7KbW];
                                  };
                          };
                      1# -> GHC.ForeignPtr.mallocForeignPtr2;
                    };
              };
        };

GHC.ForeignPtr.mallocPlainForeignPtr
  :: forall a.
     Foreign.Storable.Storable a =>
     GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=2,
 Str=<S(C(S(S))C(S(S))LLLLLL),U(1*C1(U(U)),1*C1(U(U)),A,A,A,A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.ForeignPtr.mallocPlainForeignPtr1 eta_B2 eta_B1;

lvl12_r7Kb7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocPlainForeignPtrBytes: size must be >= 0"#;

GHC.ForeignPtr.mallocPlainForeignPtrBytes2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl12_r7Kb7 of sat_s7KbY {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7KbY;
        };

GHC.ForeignPtr.mallocPlainForeignPtrBytes1
  :: forall a.
     GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [size_s7KbZ eta_s7Kc0]
        case size_s7KbZ of {
          GHC.Types.I# x_s7Kc2 ->
              case <# [x_s7Kc2 0#] of {
                __DEFAULT ->
                    case newPinnedByteArray# [x_s7Kc2 eta_s7Kc0] of {
                      (#,#) ipv_s7Kc5 [Occ=Once] ipv1_s7Kc6 ->
                          let {
                            sat_s7Kc8 [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                            [LclId] =
                                CCCS GHC.ForeignPtr.PlainPtr! [ipv1_s7Kc6];
                          } in 
                            case byteArrayContents# [ipv1_s7Kc6] of sat_s7Kc7 {
                              __DEFAULT ->
                                  let {
                                    sat_s7Kc9 [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7IYG
                                    [LclId] =
                                        CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7Kc7 sat_s7Kc8];
                                  } in  (#,#) [ipv_s7Kc5 sat_s7Kc9];
                            };
                    };
                1# -> GHC.ForeignPtr.mallocPlainForeignPtrBytes2;
              };
        };

GHC.ForeignPtr.mallocPlainForeignPtrBytes
  :: forall a.
     GHC.Types.Int -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.ForeignPtr.mallocPlainForeignPtrBytes1 eta_B2 eta_B1;

lvl13_r7Kb8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocPlainForeignPtrAlignedBytes: size must be >= 0"#;

GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl13_r7Kb8 of sat_s7Kcb {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7Kcb;
        };

GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1
  :: forall a.
     GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [size_s7Kcc _align_s7Kcd eta_s7Kce]
        case size_s7Kcc of {
          GHC.Types.I# x_s7Kcg ->
              case <# [x_s7Kcg 0#] of {
                __DEFAULT ->
                    case _align_s7Kcd of {
                      GHC.Types.I# align_s7Kcj [Occ=Once] ->
                          case
                              newAlignedPinnedByteArray# [x_s7Kcg align_s7Kcj eta_s7Kce]
                          of
                          { (#,#) ipv_s7Kcl [Occ=Once] ipv1_s7Kcm ->
                                let {
                                  sat_s7Kco [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                  [LclId] =
                                      CCCS GHC.ForeignPtr.PlainPtr! [ipv1_s7Kcm];
                                } in 
                                  case byteArrayContents# [ipv1_s7Kcm] of sat_s7Kcn {
                                    __DEFAULT ->
                                        let {
                                          sat_s7Kcp [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7IYd
                                          [LclId] =
                                              CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7Kcn sat_s7Kco];
                                        } in  (#,#) [ipv_s7Kcl sat_s7Kcp];
                                  };
                          };
                    };
                1# -> GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2;
              };
        };

GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes
  :: forall a.
     GHC.Types.Int
     -> GHC.Types.Int -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1
            eta_B3 eta_B2 eta_B1;

lvl14_r7Kb9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ForeignPtr: attempt to mix Haskell and C finalizers in the same ForeignPtr"#;

GHC.ForeignPtr.noMixingError :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl14_r7Kb9 of sat_s7Kcr {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7Kcr;
        };

GHC.ForeignPtr.touchForeignPtr1
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(A,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7Kcs eta_s7Kct]
        case ds_s7Kcs of {
          GHC.ForeignPtr.ForeignPtr _ [Occ=Dead] r_s7Kcw [Occ=Once] ->
              case touch# [r_s7Kcw eta_s7Kct] of s'_s7Kcx {
                __DEFAULT -> (#,#) [s'_s7Kcx GHC.Tuple.()];
              };
        };

GHC.ForeignPtr.touchForeignPtr
  :: forall a. GHC.ForeignPtr.ForeignPtr a -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(A,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.ForeignPtr.touchForeignPtr1 eta_B2 eta_B1;

GHC.ForeignPtr.unsafeForeignPtrToPtr
  :: forall a. GHC.ForeignPtr.ForeignPtr a -> GHC.Ptr.Ptr a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)>m,
 Unf=OtherCon []] =
    [] \r [ds_s7Kcy]
        case ds_s7Kcy of {
          GHC.ForeignPtr.ForeignPtr fo_s7KcA [Occ=Once] _ [Occ=Dead] ->
              GHC.Ptr.Ptr [fo_s7KcA];
        };

GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec
  :: forall a.
     GHC.Types.Int -> GHC.ForeignPtr.ForeignPtr a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(SL),1*U(U,A)><L,1*U>m2,
 Unf=OtherCon []] =
    [] \r [p_s7KcC f_s7KcD eta_s7KcE]
        case f_s7KcD of {
          GHC.ForeignPtr.ForeignPtr fo_s7KcG [Occ=Once] _ [Occ=Dead] ->
              case GHC.Ptr.$w$cshowsPrec fo_s7KcG eta_s7KcE of {
                (#,#) ww3_s7KcJ [Occ=Once] ww4_s7KcK [Occ=Once] ->
                    : [ww3_s7KcJ ww4_s7KcK];
              };
        };

GHC.ForeignPtr.$fShowForeignPtr_$cshow
  :: forall a. GHC.ForeignPtr.ForeignPtr a -> GHC.Base.String
[GblId, Arity=1, Str=<S(SL),1*U(U,A)>m2, Unf=OtherCon []] =
    [] \r [x_s7KcL]
        case x_s7KcL of {
          GHC.ForeignPtr.ForeignPtr fo_s7KcN [Occ=Once] _ [Occ=Dead] ->
              case GHC.Ptr.$w$cshowsPrec fo_s7KcN GHC.Types.[] of {
                (#,#) ww3_s7KcQ [Occ=Once] ww4_s7KcR [Occ=Once] ->
                    : [ww3_s7KcQ ww4_s7KcR];
              };
        };

GHC.ForeignPtr.$fShowForeignPtr1
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S(SL),1*U(U,A)><L,1*U>m2, Unf=OtherCon []] =
    [] \r [f_s7KcS eta_s7KcT]
        case f_s7KcS of {
          GHC.ForeignPtr.ForeignPtr fo_s7KcV [Occ=Once] _ [Occ=Dead] ->
              case GHC.Ptr.$w$cshowsPrec fo_s7KcV eta_s7KcT of {
                (#,#) ww3_s7KcY [Occ=Once] ww4_s7KcZ [Occ=Once] ->
                    : [ww3_s7KcY ww4_s7KcZ];
              };
        };

GHC.ForeignPtr.$fShowForeignPtr_$cshowList
  :: forall a. [GHC.ForeignPtr.ForeignPtr a] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s7Kd0 s_s7Kd1]
        GHC.Show.showList__
            GHC.ForeignPtr.$fShowForeignPtr1 ls_s7Kd0 s_s7Kd1;

GHC.ForeignPtr.$fShowForeignPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show (GHC.ForeignPtr.ForeignPtr a)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec
                                    GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                    GHC.ForeignPtr.$fShowForeignPtr_$cshowList];

GHC.ForeignPtr.$fOrdForeignPtr_$ccompare
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [p_s7Kd2 q_s7Kd3]
        case p_s7Kd2 of {
          GHC.ForeignPtr.ForeignPtr fo_s7Kd5 _ [Occ=Dead] ->
              case q_s7Kd3 of {
                GHC.ForeignPtr.ForeignPtr fo1_s7Kd8 _ [Occ=Dead] ->
                    case ltAddr# [fo_s7Kd5 fo1_s7Kd8] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7Kd5 fo1_s7Kd8] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.EQ [];
                          };
                      1# -> GHC.Types.LT [];
                    };
              };
        };

GHC.ForeignPtr.$fEqForeignPtr_$c==
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [p_s7Kdc q_s7Kdd]
        case p_s7Kdc of {
          GHC.ForeignPtr.ForeignPtr fo_s7Kdf [Occ=Once] _ [Occ=Dead] ->
              case q_s7Kdd of {
                GHC.ForeignPtr.ForeignPtr fo1_s7Kdi [Occ=Once] _ [Occ=Dead] ->
                    case eqAddr# [fo_s7Kdf fo1_s7Kdi] of sat_s7Kdk {
                      __DEFAULT -> tagToEnum# [sat_s7Kdk];
                    };
              };
        };

GHC.ForeignPtr.$fEqForeignPtr_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [eta_s7Kdl eta1_s7Kdm]
        case eta_s7Kdl of {
          GHC.ForeignPtr.ForeignPtr fo_s7Kdo [Occ=Once] _ [Occ=Dead] ->
              case eta1_s7Kdm of {
                GHC.ForeignPtr.ForeignPtr fo1_s7Kdr [Occ=Once] _ [Occ=Dead] ->
                    case eqAddr# [fo_s7Kdo fo1_s7Kdr] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.ForeignPtr.$fEqForeignPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq (GHC.ForeignPtr.ForeignPtr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.ForeignPtr.$fEqForeignPtr_$c==
                                     GHC.ForeignPtr.$fEqForeignPtr_$c/=];

GHC.ForeignPtr.$fOrdForeignPtr_$c<
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [x_s7Kdu y_s7Kdv]
        case x_s7Kdu of {
          GHC.ForeignPtr.ForeignPtr fo_s7Kdx [Occ=Once] _ [Occ=Dead] ->
              case y_s7Kdv of {
                GHC.ForeignPtr.ForeignPtr fo1_s7KdA [Occ=Once] _ [Occ=Dead] ->
                    case ltAddr# [fo_s7Kdx fo1_s7KdA] of {
                      __DEFAULT -> GHC.Types.False [];
                      1# -> GHC.Types.True [];
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$c>=
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [x_s7KdD y_s7KdE]
        case x_s7KdD of {
          GHC.ForeignPtr.ForeignPtr fo_s7KdG [Occ=Once] _ [Occ=Dead] ->
              case y_s7KdE of {
                GHC.ForeignPtr.ForeignPtr fo1_s7KdJ [Occ=Once] _ [Occ=Dead] ->
                    case ltAddr# [fo_s7KdG fo1_s7KdJ] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$c>
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [x_s7KdM y_s7KdN]
        case x_s7KdM of {
          GHC.ForeignPtr.ForeignPtr fo_s7KdP _ [Occ=Dead] ->
              case y_s7KdN of {
                GHC.ForeignPtr.ForeignPtr fo1_s7KdS _ [Occ=Dead] ->
                    case ltAddr# [fo_s7KdP fo1_s7KdS] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7KdP fo1_s7KdS] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$c<=
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [x_s7KdW y_s7KdX]
        case x_s7KdW of {
          GHC.ForeignPtr.ForeignPtr fo_s7KdZ _ [Occ=Dead] ->
              case y_s7KdX of {
                GHC.ForeignPtr.ForeignPtr fo1_s7Ke2 _ [Occ=Dead] ->
                    case ltAddr# [fo_s7KdZ fo1_s7Ke2] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7KdZ fo1_s7Ke2] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# -> GHC.Types.True [];
                          };
                      1# -> GHC.Types.True [];
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$cmax
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.ForeignPtr.ForeignPtr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s7Ke6 y_s7Ke7]
        case x_s7Ke6 of wild_s7Ke8 {
          GHC.ForeignPtr.ForeignPtr fo_s7Ke9 _ [Occ=Dead] ->
              case y_s7Ke7 of wild1_s7Keb {
                GHC.ForeignPtr.ForeignPtr fo1_s7Kec _ [Occ=Dead] ->
                    case ltAddr# [fo_s7Ke9 fo1_s7Kec] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7Ke9 fo1_s7Kec] of {
                            __DEFAULT -> wild_s7Ke8;
                            1# -> wild1_s7Keb;
                          };
                      1# -> wild1_s7Keb;
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$cmin
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.ForeignPtr.ForeignPtr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s7Keg y_s7Keh]
        case x_s7Keg of wild_s7Kei {
          GHC.ForeignPtr.ForeignPtr fo_s7Kej _ [Occ=Dead] ->
              case y_s7Keh of wild1_s7Kel {
                GHC.ForeignPtr.ForeignPtr fo1_s7Kem _ [Occ=Dead] ->
                    case ltAddr# [fo_s7Kej fo1_s7Kem] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7Kej fo1_s7Kem] of {
                            __DEFAULT -> wild1_s7Kel;
                            1# -> wild_s7Kei;
                          };
                      1# -> wild_s7Kei;
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Ord (GHC.ForeignPtr.ForeignPtr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.ForeignPtr.$fEqForeignPtr
                                      GHC.ForeignPtr.$fOrdForeignPtr_$ccompare
                                      GHC.ForeignPtr.$fOrdForeignPtr_$c<
                                      GHC.ForeignPtr.$fOrdForeignPtr_$c<=
                                      GHC.ForeignPtr.$fOrdForeignPtr_$c>
                                      GHC.ForeignPtr.$fOrdForeignPtr_$c>=
                                      GHC.ForeignPtr.$fOrdForeignPtr_$cmax
                                      GHC.ForeignPtr.$fOrdForeignPtr_$cmin];

GHC.ForeignPtr.castForeignPtr1
  :: forall a b.
     GHC.ForeignPtr.ForeignPtr a -> GHC.ForeignPtr.ForeignPtr a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [v_s7Keq] v_s7Keq;

GHC.ForeignPtr.castForeignPtr
  :: forall a b.
     GHC.ForeignPtr.ForeignPtr a -> GHC.ForeignPtr.ForeignPtr b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.castForeignPtr1 eta_B1;

GHC.ForeignPtr.plusForeignPtr
  :: forall a b.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.Types.Int -> GHC.ForeignPtr.ForeignPtr b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s7Ker ds1_s7Kes]
        case ds_s7Ker of {
          GHC.ForeignPtr.ForeignPtr addr_s7Keu [Occ=Once]
                                    c_s7Kev [Occ=Once] ->
              case ds1_s7Kes of {
                GHC.Types.I# d_s7Kex [Occ=Once] ->
                    case plusAddr# [addr_s7Keu d_s7Kex] of sat_s7Key {
                      __DEFAULT -> GHC.ForeignPtr.ForeignPtr [sat_s7Key c_s7Kev];
                    };
              };
        };

GHC.ForeignPtr.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$trModule4];

GHC.ForeignPtr.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$trModule2];

GHC.ForeignPtr.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.ForeignPtr.$trModule3
                                     GHC.ForeignPtr.$trModule1];

$krep_r7Kba :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcRealWorld
                                              GHC.Types.[]];

$krep1_r7Kbb :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep2_r7Kbc :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r7Kbb GHC.Types.[]];

$krep3_r7Kbd :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep2_r7Kbc];

$krep4_r7Kbe :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r7Kbd GHC.Types.[]];

$krep5_r7Kbf :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep4_r7Kbe];

$krep6_r7Kbg :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep7_r7Kbh :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r7Kba GHC.Types.[]];

$krep8_r7Kbi :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcMutableByteArray#
                                              $krep7_r7Kbh];

$krep9_r7Kbj :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWeak#
                                              $krep2_r7Kbc];

$krep10_r7Kbk :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcAddr#
                                              GHC.Types.[]];

GHC.ForeignPtr.$tcFinalizers2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Finalizers"#;

GHC.ForeignPtr.$tcFinalizers1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tcFinalizers2];

GHC.ForeignPtr.$tcFinalizers :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2126386461452460014##
                                    14391791758474672075##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tcFinalizers1
                                    0#
                                    GHC.Types.krep$*];

GHC.ForeignPtr.$tc'NoFinalizers1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcFinalizers
                                              GHC.Types.[]];

GHC.ForeignPtr.$tc'NoFinalizers3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'NoFinalizers"#;

GHC.ForeignPtr.$tc'NoFinalizers2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'NoFinalizers3];

GHC.ForeignPtr.$tc'NoFinalizers :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1940741700794708869##
                                    15606281748314638871##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'NoFinalizers2
                                    0#
                                    GHC.ForeignPtr.$tc'NoFinalizers1];

GHC.ForeignPtr.$tc'CFinalizers1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_r7Kbj
                                         GHC.ForeignPtr.$tc'NoFinalizers1];

GHC.ForeignPtr.$tc'CFinalizers3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'CFinalizers"#;

GHC.ForeignPtr.$tc'CFinalizers2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'CFinalizers3];

GHC.ForeignPtr.$tc'CFinalizers :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5471016724267814004##
                                    11112927960337249170##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'CFinalizers2
                                    0#
                                    GHC.ForeignPtr.$tc'CFinalizers1];

GHC.ForeignPtr.$tc'HaskellFinalizers1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_r7Kbf
                                         GHC.ForeignPtr.$tc'NoFinalizers1];

GHC.ForeignPtr.$tc'HaskellFinalizers3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'HaskellFinalizers"#;

GHC.ForeignPtr.$tc'HaskellFinalizers2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'HaskellFinalizers3];

GHC.ForeignPtr.$tc'HaskellFinalizers :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2766439294378598012##
                                    9182349323511249767##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'HaskellFinalizers2
                                    0#
                                    GHC.ForeignPtr.$tc'HaskellFinalizers1];

$krep11_r7Kbl :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.ForeignPtr.$tc'NoFinalizers1 GHC.Types.[]];

$krep12_r7Kbm :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep11_r7Kbl];

GHC.ForeignPtr.$tcForeignPtrContents2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ForeignPtrContents"#;

GHC.ForeignPtr.$tcForeignPtrContents1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tcForeignPtrContents2];

GHC.ForeignPtr.$tcForeignPtrContents :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2960910307208088010##
                                    1419315288615932334##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tcForeignPtrContents1
                                    0#
                                    GHC.Types.krep$*];

$krep13_r7Kbn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcForeignPtrContents
                                              GHC.Types.[]];

GHC.ForeignPtr.$tc'PlainPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r7Kbi $krep13_r7Kbn];

GHC.ForeignPtr.$tc'PlainPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'PlainPtr"#;

GHC.ForeignPtr.$tc'PlainPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'PlainPtr3];

GHC.ForeignPtr.$tc'PlainPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10386497703892305970##
                                    4483570029522342780##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'PlainPtr2
                                    0#
                                    GHC.ForeignPtr.$tc'PlainPtr1];

GHC.ForeignPtr.$tc'PlainForeignPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_r7Kbm $krep13_r7Kbn];

GHC.ForeignPtr.$tc'PlainForeignPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'PlainForeignPtr"#;

GHC.ForeignPtr.$tc'PlainForeignPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'PlainForeignPtr3];

GHC.ForeignPtr.$tc'PlainForeignPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9658214180323125435##
                                    4797612916438137994##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'PlainForeignPtr2
                                    0#
                                    GHC.ForeignPtr.$tc'PlainForeignPtr1];

GHC.ForeignPtr.$tc'MallocPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r7Kbi
                                         GHC.ForeignPtr.$tc'PlainForeignPtr1];

GHC.ForeignPtr.$tc'MallocPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'MallocPtr"#;

GHC.ForeignPtr.$tc'MallocPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'MallocPtr3];

GHC.ForeignPtr.$tc'MallocPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1358169953258233372##
                                    15155489453511463859##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'MallocPtr2
                                    0#
                                    GHC.ForeignPtr.$tc'MallocPtr1];

GHC.ForeignPtr.$tcForeignPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ForeignPtr"#;

GHC.ForeignPtr.$tcForeignPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tcForeignPtr2];

GHC.ForeignPtr.$tcForeignPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13645276010227069957##
                                    424768606850180054##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tcForeignPtr1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep14_r7Kbo :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep6_r7Kbg GHC.Types.[]];

$krep15_r7Kbp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcForeignPtr
                                              $krep14_r7Kbo];

$krep16_r7Kbq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep13_r7Kbn $krep15_r7Kbp];

GHC.ForeignPtr.$tc'ForeignPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_r7Kbk $krep16_r7Kbq];

GHC.ForeignPtr.$tc'ForeignPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ForeignPtr"#;

GHC.ForeignPtr.$tc'ForeignPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'ForeignPtr3];

GHC.ForeignPtr.$tc'ForeignPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15066988800190837275##
                                    12331496810414125071##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'ForeignPtr2
                                    1#
                                    GHC.ForeignPtr.$tc'ForeignPtr1];

GHC.ForeignPtr.$tcMyWeak2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MyWeak"#;

GHC.ForeignPtr.$tcMyWeak1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tcMyWeak2];

GHC.ForeignPtr.$tcMyWeak :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18176044154139657744##
                                    6003369520845561213##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tcMyWeak1
                                    0#
                                    GHC.Types.krep$*];

$krep17_r7Kbr :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcMyWeak
                                              GHC.Types.[]];

GHC.ForeignPtr.$tc'MyWeak1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_r7Kbj $krep17_r7Kbr];

GHC.ForeignPtr.$tc'MyWeak3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'MyWeak"#;

GHC.ForeignPtr.$tc'MyWeak2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'MyWeak3];

GHC.ForeignPtr.$tc'MyWeak :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12419514784912020020##
                                    3312746660203758866##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'MyWeak2
                                    0#
                                    GHC.ForeignPtr.$tc'MyWeak1];

GHC.ForeignPtr.newForeignPtr_1
  :: forall a.
     GHC.Ptr.Ptr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7Kez eta_s7KeA]
        case ds_s7Kez of {
          GHC.Ptr.Ptr obj_s7KeC [Occ=Once] ->
              case newMutVar# [GHC.ForeignPtr.NoFinalizers eta_s7KeA] of {
                (#,#) ipv_s7KeE [Occ=Once] ipv1_s7KeF [Occ=Once] ->
                    let {
                      sat_s7KeG [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                      [LclId] =
                          CCCS GHC.ForeignPtr.PlainForeignPtr! [ipv1_s7KeF]; } in
                    let {
                      sat_s7KeH [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7IU5
                      [LclId] =
                          CCCS GHC.ForeignPtr.ForeignPtr! [obj_s7KeC sat_s7KeG];
                    } in  (#,#) [ipv_s7KeE sat_s7KeH];
              };
        };

GHC.ForeignPtr.newForeignPtr_
  :: forall a.
     GHC.Ptr.Ptr a -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.ForeignPtr.newForeignPtr_1 eta_B2 eta_B1;

GHC.ForeignPtr.$winsertCFinalizer [InlPrag=NOUSERINLINE[0],
                                   Occ=LoopBreaker]
  :: forall value.
     GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.ForeignPtr.Finalizers
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> value
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=7,
 Str=<S,U><S,U><S,U><S,U><S,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7KeI
           w_s7KeJ
           w1_s7KeK
           w2_s7KeL
           w3_s7KeM
           w4_s7KeN
           w5_s7KeO]
        case readMutVar# [ww_s7KeI w5_s7KeO] of {
          (#,#) ipv_s7KeQ [Occ=Once*] ipv1_s7KeR [Occ=Once!] ->
              case ipv1_s7KeR of {
                GHC.ForeignPtr.NoFinalizers ->
                    case mkWeakNoFinalizer# [ww_s7KeI w4_s7KeN ipv_s7KeQ] of {
                      (#,#) ipv2_s7KeU [Occ=Once] ipv3_s7KeV ->
                          let {
                            lvl24_s7KeW [Occ=OnceL] :: GHC.ForeignPtr.Finalizers
                            [LclId, Unf=OtherCon []] =
                                CCCS GHC.ForeignPtr.CFinalizers! [ipv3_s7KeV]; } in
                          let {
                            lvl25_s7KeX [Occ=OnceL] :: GHC.ForeignPtr.MyWeak
                            [LclId, Unf=OtherCon []] =
                                CCCS GHC.ForeignPtr.MyWeak! [ipv3_s7KeV]; } in
                          let {
                            lvl26_s7KeY [Occ=OnceL] :: (GHC.ForeignPtr.MyWeak, GHC.Types.Bool)
                            [LclId, Unf=OtherCon []] =
                                CCCS (,)! [lvl25_s7KeX GHC.Types.False]; } in
                          let {
                            lvl27_s7KeZ [Occ=OnceL]
                              :: (GHC.ForeignPtr.Finalizers,
                                  (GHC.ForeignPtr.MyWeak, GHC.Types.Bool))
                            [LclId, Unf=OtherCon []] =
                                CCCS (,)! [lvl24_s7KeW lvl26_s7KeY]; } in
                          let {
                            sat_s7Kf6 [Occ=Once]
                              :: GHC.ForeignPtr.Finalizers
                                 -> (GHC.ForeignPtr.Finalizers,
                                     (GHC.ForeignPtr.MyWeak, GHC.Types.Bool))
                            [LclId] =
                                [lvl27_s7KeZ] \r [fin_s7Kf0]
                                    case fin_s7Kf0 of wild1_s7Kf1 {
                                      GHC.ForeignPtr.NoFinalizers -> lvl27_s7KeZ;
                                      GHC.ForeignPtr.CFinalizers w6_s7Kf2 [Occ=Once] ->
                                          let {
                                            sat_s7Kf3 [Occ=Once] :: GHC.ForeignPtr.MyWeak
                                            [LclId] =
                                                CCCS GHC.ForeignPtr.MyWeak! [w6_s7Kf2]; } in
                                          let {
                                            sat_s7Kf4 [Occ=Once]
                                              :: (GHC.ForeignPtr.MyWeak, GHC.Types.Bool)
                                            [LclId] =
                                                CCCS (,)! [sat_s7Kf3 GHC.Types.True];
                                          } in  (,) [wild1_s7Kf1 sat_s7Kf4];
                                      GHC.ForeignPtr.HaskellFinalizers _ [Occ=Dead] ->
                                          GHC.ForeignPtr.noMixingError;
                                    };
                          } in 
                            case atomicModifyMutVar# [ww_s7KeI sat_s7Kf6 ipv2_s7KeU] of {
                              (#,#) ipv4_s7Kf8 [Occ=Once*] ipv5_s7Kf9 [Occ=Once!] ->
                                  case ipv5_s7Kf9 of {
                                    (,) weak_s7Kfb [Occ=Once*!] needKill_s7Kfc [Occ=Once!] ->
                                        let-no-escape {
                                          $w$j_s7Kfd [InlPrag=NOUSERINLINE[0],
                                                      Occ=Once*!T[2],
                                                      Dmd=<C(C(S)),1*C1(C1(U(U,U)))>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.Prim.Weak# ()
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                          [LclId[JoinId(2)],
                                           Arity=2,
                                           Str=<S,U><S,U>,
                                           Unf=OtherCon []] =
                                              sat-only [ww_s7KeI
                                                        w_s7KeJ
                                                        w1_s7KeK
                                                        w2_s7KeL
                                                        w3_s7KeM
                                                        w4_s7KeN] \r [w6_s7Kfe ww1_s7Kff]
                                                  case
                                                      addCFinalizerToWeak# [w_s7KeJ
                                                                            w3_s7KeM
                                                                            w1_s7KeK
                                                                            w2_s7KeL
                                                                            ww1_s7Kff
                                                                            w6_s7Kfe]
                                                  of
                                                  { (#,#) ipv6_s7Kfh [Occ=Once*]
                                                          ipv7_s7Kfi [Occ=Once!] ->
                                                        case ipv7_s7Kfi of {
                                                          __DEFAULT ->
                                                              GHC.ForeignPtr.$winsertCFinalizer
                                                                  ww_s7KeI
                                                                  w_s7KeJ
                                                                  w1_s7KeK
                                                                  w2_s7KeL
                                                                  w3_s7KeM
                                                                  w4_s7KeN
                                                                  ipv6_s7Kfh;
                                                          1# -> (#,#) [ipv6_s7Kfh GHC.Tuple.()];
                                                        };
                                                  };
                                        } in 
                                          case needKill_s7Kfc of {
                                            GHC.Types.False ->
                                                case weak_s7Kfb of {
                                                  GHC.ForeignPtr.MyWeak ww2_s7Kfm [Occ=Once] ->
                                                      $w$j_s7Kfd ipv4_s7Kf8 ww2_s7Kfm;
                                                };
                                            GHC.Types.True ->
                                                case finalizeWeak# [ipv3_s7KeV ipv4_s7Kf8] of {
                                                  (#,,#) ipv6_s7Kfo [Occ=Once]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead] ->
                                                      case weak_s7Kfb of {
                                                        GHC.ForeignPtr.MyWeak ww2_s7Kfs [Occ=Once] ->
                                                            $w$j_s7Kfd ipv6_s7Kfo ww2_s7Kfs;
                                                      };
                                                };
                                          };
                                  };
                            };
                    };
                GHC.ForeignPtr.CFinalizers weak_s7Kft [Occ=Once] ->
                    case
                        addCFinalizerToWeak# [w_s7KeJ
                                              w3_s7KeM
                                              w1_s7KeK
                                              w2_s7KeL
                                              weak_s7Kft
                                              ipv_s7KeQ]
                    of
                    { (#,#) ipv2_s7Kfv [Occ=Once*] ipv3_s7Kfw [Occ=Once!] ->
                          case ipv3_s7Kfw of {
                            __DEFAULT ->
                                GHC.ForeignPtr.$winsertCFinalizer
                                    ww_s7KeI w_s7KeJ w1_s7KeK w2_s7KeL w3_s7KeM w4_s7KeN ipv2_s7Kfv;
                            1# -> (#,#) [ipv2_s7Kfv GHC.Tuple.()];
                          };
                    };
                GHC.ForeignPtr.HaskellFinalizers _ [Occ=Dead] ->
                    GHC.ForeignPtr.noMixingError;
              };
        };

lvl15_r7Kbs :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ForeignPtr: attempt to add a finalizer to a plain pointer"#;

GHC.ForeignPtr.addForeignPtrFinalizer2 :: GHC.Types.IO ()
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl15_r7Kbs of sat_s7KfA {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7KfA;
        };

GHC.ForeignPtr.$waddForeignPtrFinalizerEnv [InlPrag=NOUSERINLINE[0]]
  :: forall env a.
     GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=5,
 Str=<S,U><S,U><S,U><S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7KfB ww1_s7KfC ww2_s7KfD ww3_s7KfE w_s7KfF]
        case ww3_s7KfE of wild_s7KfG {
          GHC.ForeignPtr.PlainForeignPtr dt_s7KfH [Occ=Once] ->
              GHC.ForeignPtr.$winsertCFinalizer
                  dt_s7KfH ww_s7KfB 1# ww1_s7KfC ww2_s7KfD GHC.Tuple.() w_s7KfF;
          GHC.ForeignPtr.MallocPtr _ [Occ=Dead] dt_s7KfJ [Occ=Once] ->
              GHC.ForeignPtr.$winsertCFinalizer
                  dt_s7KfJ ww_s7KfB 1# ww1_s7KfC ww2_s7KfD wild_s7KfG w_s7KfF;
          GHC.ForeignPtr.PlainPtr _ [Occ=Dead] ->
              GHC.ForeignPtr.addForeignPtrFinalizer2;
        };

GHC.ForeignPtr.addForeignPtrFinalizerEnv1 [InlPrag=NOUSERINLINE[0]]
  :: forall env a.
     GHC.Ptr.FunPtr
       (GHC.Ptr.Ptr env -> GHC.Ptr.Ptr a -> GHC.Types.IO ())
     -> GHC.Ptr.Ptr env
     -> GHC.ForeignPtr.ForeignPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(SS),1*U(U,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7KfM w1_s7KfN w2_s7KfO w3_s7KfP]
        case w_s7KfM of {
          GHC.Ptr.FunPtr ww1_s7KfR [Occ=Once] ->
              case w1_s7KfN of {
                GHC.Ptr.Ptr ww3_s7KfT [Occ=Once] ->
                    case w2_s7KfO of {
                      GHC.ForeignPtr.ForeignPtr ww5_s7KfV [Occ=Once]
                                                ww6_s7KfW [Occ=Once] ->
                          GHC.ForeignPtr.$waddForeignPtrFinalizerEnv
                              ww1_s7KfR ww3_s7KfT ww5_s7KfV ww6_s7KfW w3_s7KfP;
                    };
              };
        };

GHC.ForeignPtr.addForeignPtrFinalizerEnv
  :: forall env a.
     GHC.ForeignPtr.FinalizerEnvPtr env a
     -> GHC.Ptr.Ptr env
     -> GHC.ForeignPtr.ForeignPtr a
     -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(SS),1*U(U,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.ForeignPtr.addForeignPtrFinalizerEnv1
            eta_B4 eta_B3 eta_B2 eta_B1;

GHC.ForeignPtr.$waddForeignPtrFinalizer [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<S,U><S,U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7KfX ww1_s7KfY ww2_s7KfZ w_s7Kg0]
        case ww2_s7KfZ of wild_s7Kg1 {
          GHC.ForeignPtr.PlainForeignPtr dt_s7Kg2 [Occ=Once] ->
              GHC.ForeignPtr.$winsertCFinalizer
                  dt_s7Kg2 ww_s7KfX 0# __NULL ww1_s7KfY GHC.Tuple.() w_s7Kg0;
          GHC.ForeignPtr.MallocPtr _ [Occ=Dead] dt_s7Kg4 [Occ=Once] ->
              GHC.ForeignPtr.$winsertCFinalizer
                  dt_s7Kg4 ww_s7KfX 0# __NULL ww1_s7KfY wild_s7Kg1 w_s7Kg0;
          GHC.ForeignPtr.PlainPtr _ [Occ=Dead] ->
              GHC.ForeignPtr.addForeignPtrFinalizer2;
        };

GHC.ForeignPtr.addForeignPtrFinalizer1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Ptr.FunPtr (GHC.Ptr.Ptr a -> GHC.Types.IO ())
     -> GHC.ForeignPtr.ForeignPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(SS),1*U(U,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7Kg7 w1_s7Kg8 w2_s7Kg9]
        case w_s7Kg7 of {
          GHC.Ptr.FunPtr ww1_s7Kgb [Occ=Once] ->
              case w1_s7Kg8 of {
                GHC.ForeignPtr.ForeignPtr ww3_s7Kgd [Occ=Once]
                                          ww4_s7Kge [Occ=Once] ->
                    GHC.ForeignPtr.$waddForeignPtrFinalizer
                        ww1_s7Kgb ww3_s7Kgd ww4_s7Kge w2_s7Kg9;
              };
        };

GHC.ForeignPtr.addForeignPtrFinalizer
  :: forall a.
     GHC.ForeignPtr.FinalizerPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(SS),1*U(U,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.ForeignPtr.addForeignPtrFinalizer1 eta_B3 eta_B2 eta_B1;

lvl16_r7Kbt :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocForeignPtrAlignedBytes: size must be >= 0"#;

GHC.ForeignPtr.mallocForeignPtrAlignedBytes2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl16_r7Kbt of sat_s7Kgf {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7Kgf;
        };

GHC.ForeignPtr.mallocForeignPtrAlignedBytes1
  :: forall a.
     GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [size_s7Kgg _align_s7Kgh eta_s7Kgi]
        case size_s7Kgg of {
          GHC.Types.I# x_s7Kgk ->
              case <# [x_s7Kgk 0#] of {
                __DEFAULT ->
                    case _align_s7Kgh of {
                      GHC.Types.I# align_s7Kgn [Occ=Once] ->
                          case newMutVar# [GHC.ForeignPtr.NoFinalizers eta_s7Kgi] of {
                            (#,#) ipv_s7Kgp [Occ=Once] ipv1_s7Kgq [Occ=Once] ->
                                case
                                    newAlignedPinnedByteArray# [x_s7Kgk align_s7Kgn ipv_s7Kgp]
                                of
                                { (#,#) ipv2_s7Kgs [Occ=Once] ipv3_s7Kgt ->
                                      let {
                                        sat_s7Kgv [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                        [LclId] =
                                            CCCS GHC.ForeignPtr.MallocPtr! [ipv3_s7Kgt ipv1_s7Kgq];
                                      } in 
                                        case byteArrayContents# [ipv3_s7Kgt] of sat_s7Kgu {
                                          __DEFAULT ->
                                              let {
                                                sat_s7Kgw [Occ=Once]
                                                  :: GHC.ForeignPtr.ForeignPtr a_a7J06
                                                [LclId] =
                                                    CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7Kgu
                                                                                     sat_s7Kgv];
                                              } in  (#,#) [ipv2_s7Kgs sat_s7Kgw];
                                        };
                                };
                          };
                    };
                1# -> GHC.ForeignPtr.mallocForeignPtrAlignedBytes2;
              };
        };

GHC.ForeignPtr.mallocForeignPtrAlignedBytes
  :: forall a.
     GHC.Types.Int
     -> GHC.Types.Int -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.ForeignPtr.mallocForeignPtrAlignedBytes1 eta_B3 eta_B2 eta_B1;

lvl17_r7Kbu :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocForeignPtrBytes: size must be >= 0"#;

GHC.ForeignPtr.mallocForeignPtrBytes2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl17_r7Kbu of sat_s7Kgy {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7Kgy;
        };

GHC.ForeignPtr.mallocForeignPtrBytes1
  :: forall a.
     GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [size_s7Kgz eta_s7KgA]
        case size_s7Kgz of {
          GHC.Types.I# x_s7KgC ->
              case <# [x_s7KgC 0#] of {
                __DEFAULT ->
                    case newMutVar# [GHC.ForeignPtr.NoFinalizers eta_s7KgA] of {
                      (#,#) ipv_s7KgF [Occ=Once] ipv1_s7KgG [Occ=Once] ->
                          case newPinnedByteArray# [x_s7KgC ipv_s7KgF] of {
                            (#,#) ipv2_s7KgI [Occ=Once] ipv3_s7KgJ ->
                                let {
                                  sat_s7KgL [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                  [LclId] =
                                      CCCS GHC.ForeignPtr.MallocPtr! [ipv3_s7KgJ ipv1_s7KgG];
                                } in 
                                  case byteArrayContents# [ipv3_s7KgJ] of sat_s7KgK {
                                    __DEFAULT ->
                                        let {
                                          sat_s7KgM [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7J0v
                                          [LclId] =
                                              CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7KgK sat_s7KgL];
                                        } in  (#,#) [ipv2_s7KgI sat_s7KgM];
                                  };
                          };
                    };
                1# -> GHC.ForeignPtr.mallocForeignPtrBytes2;
              };
        };

GHC.ForeignPtr.mallocForeignPtrBytes
  :: forall a.
     GHC.Types.Int -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.ForeignPtr.mallocForeignPtrBytes1 eta_B2 eta_B1;

lvl18_r7Kbv :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [159#];

lvl19_r7Kbw :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [29#];

lvl20_r7Kbx :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [38#];

lvl21_r7Kby :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl2_r7KaX
                                           lvl3_r7KaY
                                           lvl5_r7Kb0
                                           lvl18_r7Kbv
                                           lvl19_r7Kbw
                                           lvl18_r7Kbv
                                           lvl20_r7Kbx];

lvl22_r7Kbz :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl1_r7KaW
                                                  lvl21_r7Kby
                                                  GHC.Stack.Types.EmptyCallStack];

GHC.ForeignPtr.mallocForeignPtr3 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl22_r7Kbz;

GHC.ForeignPtr.mallocForeignPtr1
  :: forall a.
     Foreign.Storable.Storable a =>
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=2,
 Str=<S(C(S(S))C(S(S))LLLLLL),U(1*C1(U(U)),1*C1(U(U)),A,A,A,A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s7KgO eta_s7KgP]
        case
            Foreign.Storable.alignment
                $dStorable_s7KgO GHC.ForeignPtr.mallocForeignPtr3
        of
        { GHC.Types.I# align_s7KgR [Occ=Once] ->
              case
                  Foreign.Storable.sizeOf
                      $dStorable_s7KgO GHC.ForeignPtr.mallocForeignPtr3
              of
              { GHC.Types.I# size_s7KgT ->
                    case <# [size_s7KgT 0#] of {
                      __DEFAULT ->
                          case newMutVar# [GHC.ForeignPtr.NoFinalizers eta_s7KgP] of {
                            (#,#) ipv_s7KgW [Occ=Once] ipv1_s7KgX [Occ=Once] ->
                                case
                                    newAlignedPinnedByteArray# [size_s7KgT align_s7KgR ipv_s7KgW]
                                of
                                { (#,#) ipv2_s7KgZ [Occ=Once] ipv3_s7Kh0 ->
                                      let {
                                        sat_s7Kh2 [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                        [LclId] =
                                            CCCS GHC.ForeignPtr.MallocPtr! [ipv3_s7Kh0 ipv1_s7KgX];
                                      } in 
                                        case byteArrayContents# [ipv3_s7Kh0] of sat_s7Kh1 {
                                          __DEFAULT ->
                                              let {
                                                sat_s7Kh3 [Occ=Once]
                                                  :: GHC.ForeignPtr.ForeignPtr a_a7J0U
                                                [LclId] =
                                                    CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7Kh1
                                                                                     sat_s7Kh2];
                                              } in  (#,#) [ipv2_s7KgZ sat_s7Kh3];
                                        };
                                };
                          };
                      1# -> GHC.ForeignPtr.mallocForeignPtr2;
                    };
              };
        };

GHC.ForeignPtr.mallocForeignPtr
  :: forall a.
     Foreign.Storable.Storable a =>
     GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=2,
 Str=<S(C(S(S))C(S(S))LLLLLL),U(1*C1(U(U)),1*C1(U(U)),A,A,A,A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.ForeignPtr.mallocForeignPtr1 eta_B2 eta_B1;

GHC.ForeignPtr.addForeignPtrConcFinalizer3
  :: GHC.ForeignPtr.Finalizers
     -> (GHC.ForeignPtr.Finalizers, GHC.ForeignPtr.Finalizers)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m, Unf=OtherCon []] =
    [] \r [fs_s7Kh5] (,) [GHC.ForeignPtr.NoFinalizers fs_s7Kh5];

GHC.ForeignPtr.addForeignPtrConcFinalizer4 [Occ=LoopBreaker]
  :: [GHC.Types.IO ()]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7Kh6 eta_s7Kh7]
        case ds_s7Kh6 of {
          [] -> (#,#) [eta_s7Kh7 GHC.Tuple.()];
          : y_s7Kh9 [Occ=Once] ys_s7Kha [Occ=Once] ->
              case y_s7Kh9 eta_s7Kh7 of {
                (#,#) ipv_s7Khc [Occ=Once] _ [Occ=Dead] ->
                    GHC.ForeignPtr.addForeignPtrConcFinalizer4 ys_s7Kha ipv_s7Khc;
              };
        };

GHC.ForeignPtr.$wforeignPtrFinalizer [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.ForeignPtr.Finalizers
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7Khe w_s7Khf]
        case
            atomicModifyMutVar# [ww_s7Khe
                                 GHC.ForeignPtr.addForeignPtrConcFinalizer3
                                 w_s7Khf]
        of
        { (#,#) ipv_s7Khh [Occ=Once*] ipv1_s7Khi [Occ=Once!] ->
              case ipv1_s7Khi of {
                GHC.ForeignPtr.NoFinalizers -> (#,#) [ipv_s7Khh GHC.Tuple.()];
                GHC.ForeignPtr.CFinalizers w1_s7Khk [Occ=Once] ->
                    case finalizeWeak# [w1_s7Khk ipv_s7Khh] of {
                      (#,,#) ipv2_s7Khm [Occ=Once*]
                             ipv3_s7Khn [Occ=Once!]
                             ipv4_s7Kho [Occ=Once!] ->
                          case ipv3_s7Khn of {
                            __DEFAULT -> (#,#) [ipv2_s7Khm GHC.Tuple.()];
                            1# -> ipv4_s7Kho ipv2_s7Khm;
                          };
                    };
                GHC.ForeignPtr.HaskellFinalizers actions_s7Khq [Occ=Once] ->
                    GHC.ForeignPtr.addForeignPtrConcFinalizer4 actions_s7Khq ipv_s7Khh;
              };
        };

GHC.ForeignPtr.finalizeForeignPtr2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IORef.IORef GHC.ForeignPtr.Finalizers
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7Khr w1_s7Khs]
        case w_s7Khr of {
          GHC.STRef.STRef ww1_s7Khu [Occ=Once] ->
              GHC.ForeignPtr.$wforeignPtrFinalizer ww1_s7Khu w1_s7Khs;
        };

GHC.ForeignPtr.finalizeForeignPtr1
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7Khv eta_s7Khw]
        case ds_s7Khv of {
          GHC.ForeignPtr.ForeignPtr _ [Occ=Dead] ds2_s7Khz [Occ=Once!] ->
              case ds2_s7Khz of {
                GHC.ForeignPtr.PlainForeignPtr dt_s7KhB [Occ=Once] ->
                    GHC.ForeignPtr.$wforeignPtrFinalizer dt_s7KhB eta_s7Khw;
                GHC.ForeignPtr.MallocPtr _ [Occ=Dead] dt_s7KhD [Occ=Once] ->
                    GHC.ForeignPtr.$wforeignPtrFinalizer dt_s7KhD eta_s7Khw;
                GHC.ForeignPtr.PlainPtr _ [Occ=Dead] ->
                    (#,#) [eta_s7Khw GHC.Tuple.()];
              };
        };

GHC.ForeignPtr.finalizeForeignPtr
  :: forall a. GHC.ForeignPtr.ForeignPtr a -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.ForeignPtr.finalizeForeignPtr1 eta_B2 eta_B1;

lvl23_r7KbA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ForeignPtr: attempt to add a finalizer to plain pointer"#;

GHC.ForeignPtr.addForeignPtrConcFinalizer2 :: GHC.Types.IO ()
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl23_r7KbA of sat_s7KhF {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7KhF;
        };

GHC.ForeignPtr.$waddForeignPtrConcFinalizer [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.ForeignPtr.ForeignPtrContents
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7KhG w_s7KhH w1_s7KhI]
        case ww_s7KhG of wild_s7KhJ {
          GHC.ForeignPtr.PlainForeignPtr dt_s7KhK ->
              let {
                lvl24_s7KhL [Occ=OnceL] :: [GHC.Types.IO ()]
                [LclId, Unf=OtherCon []] =
                    CCCS :! [w_s7KhH GHC.Types.[]]; } in
              let {
                lvl25_s7KhM [Occ=OnceL] :: GHC.ForeignPtr.Finalizers
                [LclId, Unf=OtherCon []] =
                    CCCS GHC.ForeignPtr.HaskellFinalizers! [lvl24_s7KhL]; } in
              let {
                lvl26_s7KhN [Occ=OnceL]
                  :: (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId, Unf=OtherCon []] =
                    CCCS (,)! [lvl25_s7KhM GHC.Types.True]; } in
              let {
                sat_s7KhU [Occ=Once]
                  :: GHC.ForeignPtr.Finalizers
                     -> (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId] =
                    [w_s7KhH lvl26_s7KhN] \r [finalizers_s7KhO]
                        case finalizers_s7KhO of {
                          GHC.ForeignPtr.NoFinalizers -> lvl26_s7KhN;
                          GHC.ForeignPtr.CFinalizers _ [Occ=Dead] ->
                              GHC.ForeignPtr.noMixingError;
                          GHC.ForeignPtr.HaskellFinalizers fs_s7KhR [Occ=Once] ->
                              let {
                                sat_s7KhS [Occ=Once] :: [GHC.Types.IO ()]
                                [LclId] =
                                    CCCS :! [w_s7KhH fs_s7KhR]; } in
                              let {
                                sat_s7KhT [Occ=Once] :: GHC.ForeignPtr.Finalizers
                                [LclId] =
                                    CCCS GHC.ForeignPtr.HaskellFinalizers! [sat_s7KhS];
                              } in  (,) [sat_s7KhT GHC.Types.False];
                        };
              } in 
                case atomicModifyMutVar# [dt_s7KhK sat_s7KhU w1_s7KhI] of {
                  (#,#) ipv_s7KhW [Occ=Once*] ipv1_s7KhX [Occ=Once!] ->
                      case ipv1_s7KhX of {
                        GHC.Types.False -> (#,#) [ipv_s7KhW GHC.Tuple.()];
                        GHC.Types.True ->
                            let {
                              sat_s7Ki0 [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              [LclId] =
                                  [dt_s7KhK] \r [w2_s7KhZ]
                                      GHC.ForeignPtr.$wforeignPtrFinalizer dt_s7KhK w2_s7KhZ;
                            } in 
                              case mkWeak# [dt_s7KhK GHC.Tuple.() sat_s7Ki0 ipv_s7KhW] of {
                                (#,#) ipv2_s7Ki2 [Occ=Once] _ [Occ=Dead] ->
                                    (#,#) [ipv2_s7Ki2 GHC.Tuple.()];
                              };
                      };
                };
          GHC.ForeignPtr.MallocPtr fo_s7Ki4 [Occ=Once] dt_s7Ki5 ->
              let {
                lvl24_s7Ki6 [Occ=OnceL] :: [GHC.Types.IO ()]
                [LclId, Unf=OtherCon []] =
                    CCCS :! [w_s7KhH GHC.Types.[]]; } in
              let {
                lvl25_s7Ki7 [Occ=OnceL] :: GHC.ForeignPtr.Finalizers
                [LclId, Unf=OtherCon []] =
                    CCCS GHC.ForeignPtr.HaskellFinalizers! [lvl24_s7Ki6]; } in
              let {
                lvl26_s7Ki8 [Occ=OnceL]
                  :: (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId, Unf=OtherCon []] =
                    CCCS (,)! [lvl25_s7Ki7 GHC.Types.True]; } in
              let {
                sat_s7Kif [Occ=Once]
                  :: GHC.ForeignPtr.Finalizers
                     -> (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId] =
                    [w_s7KhH lvl26_s7Ki8] \r [finalizers_s7Ki9]
                        case finalizers_s7Ki9 of {
                          GHC.ForeignPtr.NoFinalizers -> lvl26_s7Ki8;
                          GHC.ForeignPtr.CFinalizers _ [Occ=Dead] ->
                              GHC.ForeignPtr.noMixingError;
                          GHC.ForeignPtr.HaskellFinalizers fs_s7Kic [Occ=Once] ->
                              let {
                                sat_s7Kid [Occ=Once] :: [GHC.Types.IO ()]
                                [LclId] =
                                    CCCS :! [w_s7KhH fs_s7Kic]; } in
                              let {
                                sat_s7Kie [Occ=Once] :: GHC.ForeignPtr.Finalizers
                                [LclId] =
                                    CCCS GHC.ForeignPtr.HaskellFinalizers! [sat_s7Kid];
                              } in  (,) [sat_s7Kie GHC.Types.False];
                        };
              } in 
                case atomicModifyMutVar# [dt_s7Ki5 sat_s7Kif w1_s7KhI] of {
                  (#,#) ipv_s7Kih [Occ=Once*] ipv1_s7Kii [Occ=Once!] ->
                      case ipv1_s7Kii of {
                        GHC.Types.False -> (#,#) [ipv_s7Kih GHC.Tuple.()];
                        GHC.Types.True ->
                            let {
                              sat_s7KiO [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              [LclId] =
                                  [wild_s7KhJ dt_s7Ki5] \r [s_s7Kik]
                                      case
                                          atomicModifyMutVar# [dt_s7Ki5
                                                               GHC.ForeignPtr.addForeignPtrConcFinalizer3
                                                               s_s7Kik]
                                      of
                                      { (#,#) ipv2_s7Kim [Occ=Once*] ipv3_s7Kin [Occ=Once!] ->
                                            case ipv3_s7Kin of {
                                              GHC.ForeignPtr.NoFinalizers ->
                                                  case touch# [wild_s7KhJ ipv2_s7Kim] of s'_s7Kip {
                                                    __DEFAULT -> (#,#) [s'_s7Kip GHC.Tuple.()];
                                                  };
                                              GHC.ForeignPtr.CFinalizers w2_s7Kiq [Occ=Once] ->
                                                  case finalizeWeak# [w2_s7Kiq ipv2_s7Kim] of {
                                                    (#,,#) ipv4_s7Kis [Occ=Once*]
                                                           ipv5_s7Kit [Occ=Once!]
                                                           ipv6_s7Kiu [Occ=Once!] ->
                                                        case ipv5_s7Kit of {
                                                          __DEFAULT ->
                                                              case
                                                                  touch# [wild_s7KhJ ipv4_s7Kis]
                                                              of
                                                              s'_s7Kiw
                                                              { __DEFAULT ->
                                                                    (#,#) [s'_s7Kiw GHC.Tuple.()];
                                                              };
                                                          1# ->
                                                              case ipv6_s7Kiu ipv4_s7Kis of {
                                                                (#,#) ipv7_s7Kiy [Occ=Once]
                                                                      _ [Occ=Dead] ->
                                                                    case
                                                                        touch# [wild_s7KhJ
                                                                                ipv7_s7Kiy]
                                                                    of
                                                                    s'_s7KiA
                                                                    { __DEFAULT ->
                                                                          (#,#) [s'_s7KiA
                                                                                 GHC.Tuple.()];
                                                                    };
                                                              };
                                                        };
                                                  };
                                              GHC.ForeignPtr.HaskellFinalizers actions_s7KiB [Occ=Once] ->
                                                  let-no-escape {
                                                    exit_s7KiC [Occ=OnceL!T[1], Dmd=<L,C(U)>]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               () #)
                                                    [LclId[JoinId(1)],
                                                     Arity=1,
                                                     Str=<S,U>,
                                                     Unf=OtherCon []] =
                                                        sat-only [wild_s7KhJ] \r [eta_s7KiD]
                                                            case
                                                                touch# [wild_s7KhJ eta_s7KiD]
                                                            of
                                                            s'_s7KiE
                                                            { __DEFAULT ->
                                                                  (#,#) [s'_s7KiE GHC.Tuple.()];
                                                            };
                                                  } in 
                                                    let-no-escape {
                                                      go_s7KiF [Occ=LoopBreakerT[2]]
                                                        :: [GHC.Types.IO ()]
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 () #)
                                                      [LclId[JoinId(2)],
                                                       Arity=2,
                                                       Str=<S,1*U><S,U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [exit_s7KiC
                                                                    go_s7KiF] \r [ds_s7KiG
                                                                                  eta_s7KiH]
                                                              case ds_s7KiG of {
                                                                [] -> exit_s7KiC eta_s7KiH;
                                                                : y_s7KiJ [Occ=Once]
                                                                  ys_s7KiK [Occ=Once] ->
                                                                    case y_s7KiJ eta_s7KiH of {
                                                                      (#,#) ipv4_s7KiM [Occ=Once]
                                                                            _ [Occ=Dead] ->
                                                                          go_s7KiF
                                                                              ys_s7KiK ipv4_s7KiM;
                                                                    };
                                                              };
                                                    } in  go_s7KiF actions_s7KiB ipv2_s7Kim;
                                            };
                                      };
                            } in 
                              case mkWeak# [fo_s7Ki4 GHC.Tuple.() sat_s7KiO ipv_s7Kih] of {
                                (#,#) ipv2_s7KiQ [Occ=Once] _ [Occ=Dead] ->
                                    (#,#) [ipv2_s7KiQ GHC.Tuple.()];
                              };
                      };
                };
          GHC.ForeignPtr.PlainPtr _ [Occ=Dead] ->
              GHC.ForeignPtr.addForeignPtrConcFinalizer2;
        };

GHC.ForeignPtr.addForeignPtrConcFinalizer1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Str=<S(LS),1*U(A,1*U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7KiU w1_s7KiV w2_s7KiW]
        case w_s7KiU of {
          GHC.ForeignPtr.ForeignPtr _ [Occ=Dead] ww2_s7KiZ [Occ=Once] ->
              GHC.ForeignPtr.$waddForeignPtrConcFinalizer
                  ww2_s7KiZ w1_s7KiV w2_s7KiW;
        };

GHC.ForeignPtr.addForeignPtrConcFinalizer
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a -> GHC.Types.IO () -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Str=<S(LS),1*U(A,1*U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.ForeignPtr.addForeignPtrConcFinalizer1 eta_B3 eta_B2 eta_B1;

GHC.ForeignPtr.$wnewConcForeignPtr [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Addr#
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7Kj0 w_s7Kj1 w1_s7Kj2]
        case newMutVar# [GHC.ForeignPtr.NoFinalizers w1_s7Kj2] of {
          (#,#) ipv_s7Kj4 [Occ=Once] ipv1_s7Kj5 ->
              let {
                lvl24_s7Kj6 [Occ=OnceL] :: [GHC.Types.IO ()]
                [LclId, Unf=OtherCon []] =
                    CCCS :! [w_s7Kj1 GHC.Types.[]]; } in
              let {
                lvl25_s7Kj7 [Occ=OnceL] :: GHC.ForeignPtr.Finalizers
                [LclId, Unf=OtherCon []] =
                    CCCS GHC.ForeignPtr.HaskellFinalizers! [lvl24_s7Kj6]; } in
              let {
                lvl26_s7Kj8 [Occ=OnceL]
                  :: (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId, Unf=OtherCon []] =
                    CCCS (,)! [lvl25_s7Kj7 GHC.Types.True]; } in
              let {
                sat_s7Kjf [Occ=Once]
                  :: GHC.ForeignPtr.Finalizers
                     -> (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId] =
                    [w_s7Kj1 lvl26_s7Kj8] \r [finalizers_s7Kj9]
                        case finalizers_s7Kj9 of {
                          GHC.ForeignPtr.NoFinalizers -> lvl26_s7Kj8;
                          GHC.ForeignPtr.CFinalizers _ [Occ=Dead] ->
                              GHC.ForeignPtr.noMixingError;
                          GHC.ForeignPtr.HaskellFinalizers fs_s7Kjc [Occ=Once] ->
                              let {
                                sat_s7Kjd [Occ=Once] :: [GHC.Types.IO ()]
                                [LclId] =
                                    CCCS :! [w_s7Kj1 fs_s7Kjc]; } in
                              let {
                                sat_s7Kje [Occ=Once] :: GHC.ForeignPtr.Finalizers
                                [LclId] =
                                    CCCS GHC.ForeignPtr.HaskellFinalizers! [sat_s7Kjd];
                              } in  (,) [sat_s7Kje GHC.Types.False];
                        };
              } in 
                case atomicModifyMutVar# [ipv1_s7Kj5 sat_s7Kjf ipv_s7Kj4] of {
                  (#,#) ipv2_s7Kjh [Occ=Once*] ipv3_s7Kji [Occ=Once!] ->
                      case ipv3_s7Kji of {
                        GHC.Types.False ->
                            let {
                              sat_s7Kjk [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                              [LclId] =
                                  CCCS GHC.ForeignPtr.PlainForeignPtr! [ipv1_s7Kj5]; } in
                            let {
                              sat_s7Kjl [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_s7JPn
                              [LclId] =
                                  CCCS GHC.ForeignPtr.ForeignPtr! [ww_s7Kj0 sat_s7Kjk];
                            } in  (#,#) [ipv2_s7Kjh sat_s7Kjl];
                        GHC.Types.True ->
                            let {
                              sat_s7Kjn [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              [LclId] =
                                  [ipv1_s7Kj5] \r [w2_s7Kjm]
                                      GHC.ForeignPtr.$wforeignPtrFinalizer ipv1_s7Kj5 w2_s7Kjm;
                            } in 
                              case mkWeak# [ipv1_s7Kj5 GHC.Tuple.() sat_s7Kjn ipv2_s7Kjh] of {
                                (#,#) ipv4_s7Kjp [Occ=Once] _ [Occ=Dead] ->
                                    let {
                                      sat_s7Kjr [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                      [LclId] =
                                          CCCS GHC.ForeignPtr.PlainForeignPtr! [ipv1_s7Kj5]; } in
                                    let {
                                      sat_s7Kjs [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_s7JPn
                                      [LclId] =
                                          CCCS GHC.ForeignPtr.ForeignPtr! [ww_s7Kj0 sat_s7Kjr];
                                    } in  (#,#) [ipv4_s7Kjp sat_s7Kjs];
                              };
                      };
                };
        };

GHC.ForeignPtr.newConcForeignPtr1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Ptr.Ptr a
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId, Arity=3, Str=<S(S),1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [w_s7Kjt w1_s7Kju w2_s7Kjv]
        case w_s7Kjt of {
          GHC.Ptr.Ptr ww1_s7Kjx [Occ=Once] ->
              GHC.ForeignPtr.$wnewConcForeignPtr ww1_s7Kjx w1_s7Kju w2_s7Kjv;
        };

GHC.ForeignPtr.newConcForeignPtr
  :: forall a.
     GHC.Ptr.Ptr a
     -> GHC.Types.IO () -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Arity=3, Str=<S(S),1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.ForeignPtr.newConcForeignPtr1 eta_B3 eta_B2 eta_B1;

GHC.ForeignPtr.MyWeak :: GHC.Prim.Weak# () -> GHC.ForeignPtr.MyWeak
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.MyWeak [eta_B1];

GHC.ForeignPtr.PlainForeignPtr
  :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.ForeignPtr.Finalizers
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.PlainForeignPtr [eta_B1];

GHC.ForeignPtr.MallocPtr
  :: GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.ForeignPtr.Finalizers
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.ForeignPtr.MallocPtr [eta_B2 eta_B1];

GHC.ForeignPtr.PlainPtr
  :: GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.PlainPtr [eta_B1];

GHC.ForeignPtr.NoFinalizers :: GHC.ForeignPtr.Finalizers
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.ForeignPtr.NoFinalizers! [];

GHC.ForeignPtr.CFinalizers
  :: GHC.Prim.Weak# () -> GHC.ForeignPtr.Finalizers
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.CFinalizers [eta_B1];

GHC.ForeignPtr.HaskellFinalizers
  :: [GHC.Types.IO ()] -> GHC.ForeignPtr.Finalizers
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.HaskellFinalizers [eta_B1];

GHC.ForeignPtr.ForeignPtr
  :: forall a.
     GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents -> GHC.ForeignPtr.ForeignPtr a
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.ForeignPtr.ForeignPtr [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:02:49.757919331 UTC

GHC.ForeignPtr.$WPlainForeignPtr [InlPrag=INLINE[2]]
  :: GHC.IORef.IORef GHC.ForeignPtr.Finalizers
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m1,
 Unf=OtherCon []] =
    [] \r [dt_s7KbC]
        case dt_s7KbC of {
          GHC.STRef.STRef dt_s7KbE [Occ=Once] ->
              GHC.ForeignPtr.PlainForeignPtr [dt_s7KbE];
        };

GHC.ForeignPtr.$WMallocPtr [InlPrag=INLINE[2]]
  :: GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
     -> GHC.IORef.IORef GHC.ForeignPtr.Finalizers
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>m2,
 Unf=OtherCon []] =
    [] \r [dt_s7KbF dt_s7KbG]
        case dt_s7KbG of {
          GHC.STRef.STRef dt_s7KbI [Occ=Once] ->
              GHC.ForeignPtr.MallocPtr [dt_s7KbF dt_s7KbI];
        };

lvl_r7KaV :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "undefined"#;

lvl1_r7KaW :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_r7KaV;

GHC.ForeignPtr.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

lvl2_r7KaX :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ForeignPtr.$trModule4;

GHC.ForeignPtr.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ForeignPtr"#;

lvl3_r7KaY :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ForeignPtr.$trModule2;

lvl4_r7KaZ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/ForeignPtr.hs"#;

lvl5_r7Kb0 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl4_r7KaZ;

lvl6_r7Kb1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [214#];

lvl7_r7Kb2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [34#];

lvl8_r7Kb3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [43#];

lvl9_r7Kb4 :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl2_r7KaX
                                           lvl3_r7KaY
                                           lvl5_r7Kb0
                                           lvl6_r7Kb1
                                           lvl7_r7Kb2
                                           lvl6_r7Kb1
                                           lvl8_r7Kb3];

lvl10_r7Kb5 :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl1_r7KaW
                                                  lvl9_r7Kb4
                                                  GHC.Stack.Types.EmptyCallStack];

GHC.ForeignPtr.mallocPlainForeignPtr2 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl10_r7Kb5;

lvl11_r7Kb6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocForeignPtr: size must be >= 0"#;

GHC.ForeignPtr.mallocForeignPtr2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl11_r7Kb6 of sat_s7KbJ {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7KbJ;
        };

GHC.ForeignPtr.mallocPlainForeignPtr1
  :: forall a.
     Foreign.Storable.Storable a =>
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=2,
 Str=<S(C(S(S))C(S(S))LLLLLL),U(1*C1(U(U)),1*C1(U(U)),A,A,A,A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s7KbK void_0E]
        case
            Foreign.Storable.alignment
                $dStorable_s7KbK GHC.ForeignPtr.mallocPlainForeignPtr2
        of
        { GHC.Types.I# align_s7KbN [Occ=Once] ->
              case
                  Foreign.Storable.sizeOf
                      $dStorable_s7KbK GHC.ForeignPtr.mallocPlainForeignPtr2
              of
              { GHC.Types.I# size_s7KbP ->
                    case <# [size_s7KbP 0#] of {
                      __DEFAULT ->
                          case
                              newAlignedPinnedByteArray# [size_s7KbP align_s7KbN GHC.Prim.void#]
                          of
                          { Unit# ipv1_s7KbT ->
                                let {
                                  sat_s7KbV [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                  [LclId] =
                                      CCCS GHC.ForeignPtr.PlainPtr! [ipv1_s7KbT];
                                } in 
                                  case byteArrayContents# [ipv1_s7KbT] of sat_s7KbU {
                                    __DEFAULT ->
                                        let {
                                          sat_s7KbW [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7IZ0
                                          [LclId] =
                                              CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7KbU sat_s7KbV];
                                        } in  Unit# [sat_s7KbW];
                                  };
                          };
                      1# -> GHC.ForeignPtr.mallocForeignPtr2;
                    };
              };
        };

GHC.ForeignPtr.mallocPlainForeignPtr
  :: forall a.
     Foreign.Storable.Storable a =>
     GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=2,
 Str=<S(C(S(S))C(S(S))LLLLLL),U(1*C1(U(U)),1*C1(U(U)),A,A,A,A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.ForeignPtr.mallocPlainForeignPtr1 eta_B2 GHC.Prim.void#;

lvl12_r7Kb7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocPlainForeignPtrBytes: size must be >= 0"#;

GHC.ForeignPtr.mallocPlainForeignPtrBytes2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl12_r7Kb7 of sat_s7KbY {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7KbY;
        };

GHC.ForeignPtr.mallocPlainForeignPtrBytes1
  :: forall a.
     GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [size_s7KbZ void_0E]
        case size_s7KbZ of {
          GHC.Types.I# x_s7Kc2 ->
              case <# [x_s7Kc2 0#] of {
                __DEFAULT ->
                    case newPinnedByteArray# [x_s7Kc2 GHC.Prim.void#] of {
                      Unit# ipv1_s7Kc6 ->
                          let {
                            sat_s7Kc8 [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                            [LclId] =
                                CCCS GHC.ForeignPtr.PlainPtr! [ipv1_s7Kc6];
                          } in 
                            case byteArrayContents# [ipv1_s7Kc6] of sat_s7Kc7 {
                              __DEFAULT ->
                                  let {
                                    sat_s7Kc9 [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7IYG
                                    [LclId] =
                                        CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7Kc7 sat_s7Kc8];
                                  } in  Unit# [sat_s7Kc9];
                            };
                    };
                1# -> GHC.ForeignPtr.mallocPlainForeignPtrBytes2;
              };
        };

GHC.ForeignPtr.mallocPlainForeignPtrBytes
  :: forall a.
     GHC.Types.Int -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.ForeignPtr.mallocPlainForeignPtrBytes1 eta_B2 GHC.Prim.void#;

lvl13_r7Kb8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocPlainForeignPtrAlignedBytes: size must be >= 0"#;

GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl13_r7Kb8 of sat_s7Kcb {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7Kcb;
        };

GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1
  :: forall a.
     GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [size_s7Kcc _align_s7Kcd void_0E]
        case size_s7Kcc of {
          GHC.Types.I# x_s7Kcg ->
              case <# [x_s7Kcg 0#] of {
                __DEFAULT ->
                    case _align_s7Kcd of {
                      GHC.Types.I# align_s7Kcj [Occ=Once] ->
                          case
                              newAlignedPinnedByteArray# [x_s7Kcg align_s7Kcj GHC.Prim.void#]
                          of
                          { Unit# ipv1_s7Kcm ->
                                let {
                                  sat_s7Kco [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                  [LclId] =
                                      CCCS GHC.ForeignPtr.PlainPtr! [ipv1_s7Kcm];
                                } in 
                                  case byteArrayContents# [ipv1_s7Kcm] of sat_s7Kcn {
                                    __DEFAULT ->
                                        let {
                                          sat_s7Kcp [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7IYd
                                          [LclId] =
                                              CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7Kcn sat_s7Kco];
                                        } in  Unit# [sat_s7Kcp];
                                  };
                          };
                    };
                1# -> GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2;
              };
        };

GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes
  :: forall a.
     GHC.Types.Int
     -> GHC.Types.Int -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1
            eta_B3 eta_B2 GHC.Prim.void#;

lvl14_r7Kb9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ForeignPtr: attempt to mix Haskell and C finalizers in the same ForeignPtr"#;

GHC.ForeignPtr.noMixingError :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl14_r7Kb9 of sat_s7Kcr {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7Kcr;
        };

GHC.ForeignPtr.touchForeignPtr1
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(A,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7Kcs void_0E]
        case ds_s7Kcs of {
          GHC.ForeignPtr.ForeignPtr _ [Occ=Dead] r_s7Kcw [Occ=Once] ->
              case touch# [r_s7Kcw GHC.Prim.void#] of s'_s7Kcx {
                (##) -> Unit# [GHC.Tuple.()];
              };
        };

GHC.ForeignPtr.touchForeignPtr
  :: forall a. GHC.ForeignPtr.ForeignPtr a -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(A,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.ForeignPtr.touchForeignPtr1 eta_B2 GHC.Prim.void#;

GHC.ForeignPtr.unsafeForeignPtrToPtr
  :: forall a. GHC.ForeignPtr.ForeignPtr a -> GHC.Ptr.Ptr a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)>m,
 Unf=OtherCon []] =
    [] \r [ds_s7Kcy]
        case ds_s7Kcy of {
          GHC.ForeignPtr.ForeignPtr fo_s7KcA [Occ=Once] _ [Occ=Dead] ->
              GHC.Ptr.Ptr [fo_s7KcA];
        };

GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec
  :: forall a.
     GHC.Types.Int -> GHC.ForeignPtr.ForeignPtr a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(SL),1*U(U,A)><L,1*U>m2,
 Unf=OtherCon []] =
    [] \r [p_s7KcC f_s7KcD eta_s7KcE]
        case f_s7KcD of {
          GHC.ForeignPtr.ForeignPtr fo_s7KcG [Occ=Once] _ [Occ=Dead] ->
              case GHC.Ptr.$w$cshowsPrec fo_s7KcG eta_s7KcE of {
                (#,#) ww3_s7KcJ [Occ=Once] ww4_s7KcK [Occ=Once] ->
                    : [ww3_s7KcJ ww4_s7KcK];
              };
        };

GHC.ForeignPtr.$fShowForeignPtr_$cshow
  :: forall a. GHC.ForeignPtr.ForeignPtr a -> GHC.Base.String
[GblId, Arity=1, Str=<S(SL),1*U(U,A)>m2, Unf=OtherCon []] =
    [] \r [x_s7KcL]
        case x_s7KcL of {
          GHC.ForeignPtr.ForeignPtr fo_s7KcN [Occ=Once] _ [Occ=Dead] ->
              case GHC.Ptr.$w$cshowsPrec fo_s7KcN GHC.Types.[] of {
                (#,#) ww3_s7KcQ [Occ=Once] ww4_s7KcR [Occ=Once] ->
                    : [ww3_s7KcQ ww4_s7KcR];
              };
        };

GHC.ForeignPtr.$fShowForeignPtr1
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S(SL),1*U(U,A)><L,1*U>m2, Unf=OtherCon []] =
    [] \r [f_s7KcS eta_s7KcT]
        case f_s7KcS of {
          GHC.ForeignPtr.ForeignPtr fo_s7KcV [Occ=Once] _ [Occ=Dead] ->
              case GHC.Ptr.$w$cshowsPrec fo_s7KcV eta_s7KcT of {
                (#,#) ww3_s7KcY [Occ=Once] ww4_s7KcZ [Occ=Once] ->
                    : [ww3_s7KcY ww4_s7KcZ];
              };
        };

GHC.ForeignPtr.$fShowForeignPtr_$cshowList
  :: forall a. [GHC.ForeignPtr.ForeignPtr a] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s7Kd0 s_s7Kd1]
        GHC.Show.showList__
            GHC.ForeignPtr.$fShowForeignPtr1 ls_s7Kd0 s_s7Kd1;

GHC.ForeignPtr.$fShowForeignPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show (GHC.ForeignPtr.ForeignPtr a)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec
                                    GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                    GHC.ForeignPtr.$fShowForeignPtr_$cshowList];

GHC.ForeignPtr.$fOrdForeignPtr_$ccompare
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [p_s7Kd2 q_s7Kd3]
        case p_s7Kd2 of {
          GHC.ForeignPtr.ForeignPtr fo_s7Kd5 _ [Occ=Dead] ->
              case q_s7Kd3 of {
                GHC.ForeignPtr.ForeignPtr fo1_s7Kd8 _ [Occ=Dead] ->
                    case ltAddr# [fo_s7Kd5 fo1_s7Kd8] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7Kd5 fo1_s7Kd8] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.EQ [];
                          };
                      1# -> GHC.Types.LT [];
                    };
              };
        };

GHC.ForeignPtr.$fEqForeignPtr_$c==
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [p_s7Kdc q_s7Kdd]
        case p_s7Kdc of {
          GHC.ForeignPtr.ForeignPtr fo_s7Kdf [Occ=Once] _ [Occ=Dead] ->
              case q_s7Kdd of {
                GHC.ForeignPtr.ForeignPtr fo1_s7Kdi [Occ=Once] _ [Occ=Dead] ->
                    case eqAddr# [fo_s7Kdf fo1_s7Kdi] of sat_s7Kdk {
                      __DEFAULT -> tagToEnum# [sat_s7Kdk];
                    };
              };
        };

GHC.ForeignPtr.$fEqForeignPtr_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [eta_s7Kdl eta1_s7Kdm]
        case eta_s7Kdl of {
          GHC.ForeignPtr.ForeignPtr fo_s7Kdo [Occ=Once] _ [Occ=Dead] ->
              case eta1_s7Kdm of {
                GHC.ForeignPtr.ForeignPtr fo1_s7Kdr [Occ=Once] _ [Occ=Dead] ->
                    case eqAddr# [fo_s7Kdo fo1_s7Kdr] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.ForeignPtr.$fEqForeignPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq (GHC.ForeignPtr.ForeignPtr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.ForeignPtr.$fEqForeignPtr_$c==
                                     GHC.ForeignPtr.$fEqForeignPtr_$c/=];

GHC.ForeignPtr.$fOrdForeignPtr_$c<
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [x_s7Kdu y_s7Kdv]
        case x_s7Kdu of {
          GHC.ForeignPtr.ForeignPtr fo_s7Kdx [Occ=Once] _ [Occ=Dead] ->
              case y_s7Kdv of {
                GHC.ForeignPtr.ForeignPtr fo1_s7KdA [Occ=Once] _ [Occ=Dead] ->
                    case ltAddr# [fo_s7Kdx fo1_s7KdA] of {
                      __DEFAULT -> GHC.Types.False [];
                      1# -> GHC.Types.True [];
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$c>=
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [x_s7KdD y_s7KdE]
        case x_s7KdD of {
          GHC.ForeignPtr.ForeignPtr fo_s7KdG [Occ=Once] _ [Occ=Dead] ->
              case y_s7KdE of {
                GHC.ForeignPtr.ForeignPtr fo1_s7KdJ [Occ=Once] _ [Occ=Dead] ->
                    case ltAddr# [fo_s7KdG fo1_s7KdJ] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$c>
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [x_s7KdM y_s7KdN]
        case x_s7KdM of {
          GHC.ForeignPtr.ForeignPtr fo_s7KdP _ [Occ=Dead] ->
              case y_s7KdN of {
                GHC.ForeignPtr.ForeignPtr fo1_s7KdS _ [Occ=Dead] ->
                    case ltAddr# [fo_s7KdP fo1_s7KdS] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7KdP fo1_s7KdS] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$c<=
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [x_s7KdW y_s7KdX]
        case x_s7KdW of {
          GHC.ForeignPtr.ForeignPtr fo_s7KdZ _ [Occ=Dead] ->
              case y_s7KdX of {
                GHC.ForeignPtr.ForeignPtr fo1_s7Ke2 _ [Occ=Dead] ->
                    case ltAddr# [fo_s7KdZ fo1_s7Ke2] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7KdZ fo1_s7Ke2] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# -> GHC.Types.True [];
                          };
                      1# -> GHC.Types.True [];
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$cmax
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.ForeignPtr.ForeignPtr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s7Ke6 y_s7Ke7]
        case x_s7Ke6 of wild_s7Ke8 {
          GHC.ForeignPtr.ForeignPtr fo_s7Ke9 _ [Occ=Dead] ->
              case y_s7Ke7 of wild1_s7Keb {
                GHC.ForeignPtr.ForeignPtr fo1_s7Kec _ [Occ=Dead] ->
                    case ltAddr# [fo_s7Ke9 fo1_s7Kec] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7Ke9 fo1_s7Kec] of {
                            __DEFAULT -> wild_s7Ke8;
                            1# -> wild1_s7Keb;
                          };
                      1# -> wild1_s7Keb;
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$cmin
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.ForeignPtr.ForeignPtr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s7Keg y_s7Keh]
        case x_s7Keg of wild_s7Kei {
          GHC.ForeignPtr.ForeignPtr fo_s7Kej _ [Occ=Dead] ->
              case y_s7Keh of wild1_s7Kel {
                GHC.ForeignPtr.ForeignPtr fo1_s7Kem _ [Occ=Dead] ->
                    case ltAddr# [fo_s7Kej fo1_s7Kem] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7Kej fo1_s7Kem] of {
                            __DEFAULT -> wild1_s7Kel;
                            1# -> wild_s7Kei;
                          };
                      1# -> wild_s7Kei;
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Ord (GHC.ForeignPtr.ForeignPtr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.ForeignPtr.$fEqForeignPtr
                                      GHC.ForeignPtr.$fOrdForeignPtr_$ccompare
                                      GHC.ForeignPtr.$fOrdForeignPtr_$c<
                                      GHC.ForeignPtr.$fOrdForeignPtr_$c<=
                                      GHC.ForeignPtr.$fOrdForeignPtr_$c>
                                      GHC.ForeignPtr.$fOrdForeignPtr_$c>=
                                      GHC.ForeignPtr.$fOrdForeignPtr_$cmax
                                      GHC.ForeignPtr.$fOrdForeignPtr_$cmin];

GHC.ForeignPtr.castForeignPtr1
  :: forall a b.
     GHC.ForeignPtr.ForeignPtr a -> GHC.ForeignPtr.ForeignPtr a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [v_s7Keq] v_s7Keq;

GHC.ForeignPtr.castForeignPtr
  :: forall a b.
     GHC.ForeignPtr.ForeignPtr a -> GHC.ForeignPtr.ForeignPtr b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.castForeignPtr1 eta_B1;

GHC.ForeignPtr.plusForeignPtr
  :: forall a b.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.Types.Int -> GHC.ForeignPtr.ForeignPtr b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s7Ker ds1_s7Kes]
        case ds_s7Ker of {
          GHC.ForeignPtr.ForeignPtr addr_s7Keu [Occ=Once]
                                    c_s7Kev [Occ=Once] ->
              case ds1_s7Kes of {
                GHC.Types.I# d_s7Kex [Occ=Once] ->
                    case plusAddr# [addr_s7Keu d_s7Kex] of sat_s7Key {
                      __DEFAULT -> GHC.ForeignPtr.ForeignPtr [sat_s7Key c_s7Kev];
                    };
              };
        };

GHC.ForeignPtr.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$trModule4];

GHC.ForeignPtr.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$trModule2];

GHC.ForeignPtr.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.ForeignPtr.$trModule3
                                     GHC.ForeignPtr.$trModule1];

$krep_r7Kba :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcRealWorld
                                              GHC.Types.[]];

$krep1_r7Kbb :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep2_r7Kbc :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r7Kbb GHC.Types.[]];

$krep3_r7Kbd :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep2_r7Kbc];

$krep4_r7Kbe :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r7Kbd GHC.Types.[]];

$krep5_r7Kbf :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep4_r7Kbe];

$krep6_r7Kbg :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep7_r7Kbh :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r7Kba GHC.Types.[]];

$krep8_r7Kbi :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcMutableByteArray#
                                              $krep7_r7Kbh];

$krep9_r7Kbj :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWeak#
                                              $krep2_r7Kbc];

$krep10_r7Kbk :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcAddr#
                                              GHC.Types.[]];

GHC.ForeignPtr.$tcFinalizers2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Finalizers"#;

GHC.ForeignPtr.$tcFinalizers1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tcFinalizers2];

GHC.ForeignPtr.$tcFinalizers :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2126386461452460014##
                                    14391791758474672075##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tcFinalizers1
                                    0#
                                    GHC.Types.krep$*];

GHC.ForeignPtr.$tc'NoFinalizers1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcFinalizers
                                              GHC.Types.[]];

GHC.ForeignPtr.$tc'NoFinalizers3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'NoFinalizers"#;

GHC.ForeignPtr.$tc'NoFinalizers2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'NoFinalizers3];

GHC.ForeignPtr.$tc'NoFinalizers :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1940741700794708869##
                                    15606281748314638871##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'NoFinalizers2
                                    0#
                                    GHC.ForeignPtr.$tc'NoFinalizers1];

GHC.ForeignPtr.$tc'CFinalizers1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_r7Kbj
                                         GHC.ForeignPtr.$tc'NoFinalizers1];

GHC.ForeignPtr.$tc'CFinalizers3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'CFinalizers"#;

GHC.ForeignPtr.$tc'CFinalizers2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'CFinalizers3];

GHC.ForeignPtr.$tc'CFinalizers :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5471016724267814004##
                                    11112927960337249170##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'CFinalizers2
                                    0#
                                    GHC.ForeignPtr.$tc'CFinalizers1];

GHC.ForeignPtr.$tc'HaskellFinalizers1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_r7Kbf
                                         GHC.ForeignPtr.$tc'NoFinalizers1];

GHC.ForeignPtr.$tc'HaskellFinalizers3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'HaskellFinalizers"#;

GHC.ForeignPtr.$tc'HaskellFinalizers2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'HaskellFinalizers3];

GHC.ForeignPtr.$tc'HaskellFinalizers :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2766439294378598012##
                                    9182349323511249767##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'HaskellFinalizers2
                                    0#
                                    GHC.ForeignPtr.$tc'HaskellFinalizers1];

$krep11_r7Kbl :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.ForeignPtr.$tc'NoFinalizers1 GHC.Types.[]];

$krep12_r7Kbm :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep11_r7Kbl];

GHC.ForeignPtr.$tcForeignPtrContents2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ForeignPtrContents"#;

GHC.ForeignPtr.$tcForeignPtrContents1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tcForeignPtrContents2];

GHC.ForeignPtr.$tcForeignPtrContents :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2960910307208088010##
                                    1419315288615932334##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tcForeignPtrContents1
                                    0#
                                    GHC.Types.krep$*];

$krep13_r7Kbn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcForeignPtrContents
                                              GHC.Types.[]];

GHC.ForeignPtr.$tc'PlainPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r7Kbi $krep13_r7Kbn];

GHC.ForeignPtr.$tc'PlainPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'PlainPtr"#;

GHC.ForeignPtr.$tc'PlainPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'PlainPtr3];

GHC.ForeignPtr.$tc'PlainPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10386497703892305970##
                                    4483570029522342780##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'PlainPtr2
                                    0#
                                    GHC.ForeignPtr.$tc'PlainPtr1];

GHC.ForeignPtr.$tc'PlainForeignPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_r7Kbm $krep13_r7Kbn];

GHC.ForeignPtr.$tc'PlainForeignPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'PlainForeignPtr"#;

GHC.ForeignPtr.$tc'PlainForeignPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'PlainForeignPtr3];

GHC.ForeignPtr.$tc'PlainForeignPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9658214180323125435##
                                    4797612916438137994##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'PlainForeignPtr2
                                    0#
                                    GHC.ForeignPtr.$tc'PlainForeignPtr1];

GHC.ForeignPtr.$tc'MallocPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r7Kbi
                                         GHC.ForeignPtr.$tc'PlainForeignPtr1];

GHC.ForeignPtr.$tc'MallocPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'MallocPtr"#;

GHC.ForeignPtr.$tc'MallocPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'MallocPtr3];

GHC.ForeignPtr.$tc'MallocPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1358169953258233372##
                                    15155489453511463859##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'MallocPtr2
                                    0#
                                    GHC.ForeignPtr.$tc'MallocPtr1];

GHC.ForeignPtr.$tcForeignPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ForeignPtr"#;

GHC.ForeignPtr.$tcForeignPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tcForeignPtr2];

GHC.ForeignPtr.$tcForeignPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13645276010227069957##
                                    424768606850180054##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tcForeignPtr1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep14_r7Kbo :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep6_r7Kbg GHC.Types.[]];

$krep15_r7Kbp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcForeignPtr
                                              $krep14_r7Kbo];

$krep16_r7Kbq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep13_r7Kbn $krep15_r7Kbp];

GHC.ForeignPtr.$tc'ForeignPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_r7Kbk $krep16_r7Kbq];

GHC.ForeignPtr.$tc'ForeignPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ForeignPtr"#;

GHC.ForeignPtr.$tc'ForeignPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'ForeignPtr3];

GHC.ForeignPtr.$tc'ForeignPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15066988800190837275##
                                    12331496810414125071##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'ForeignPtr2
                                    1#
                                    GHC.ForeignPtr.$tc'ForeignPtr1];

GHC.ForeignPtr.$tcMyWeak2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MyWeak"#;

GHC.ForeignPtr.$tcMyWeak1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tcMyWeak2];

GHC.ForeignPtr.$tcMyWeak :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18176044154139657744##
                                    6003369520845561213##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tcMyWeak1
                                    0#
                                    GHC.Types.krep$*];

$krep17_r7Kbr :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcMyWeak
                                              GHC.Types.[]];

GHC.ForeignPtr.$tc'MyWeak1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_r7Kbj $krep17_r7Kbr];

GHC.ForeignPtr.$tc'MyWeak3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'MyWeak"#;

GHC.ForeignPtr.$tc'MyWeak2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'MyWeak3];

GHC.ForeignPtr.$tc'MyWeak :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12419514784912020020##
                                    3312746660203758866##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'MyWeak2
                                    0#
                                    GHC.ForeignPtr.$tc'MyWeak1];

GHC.ForeignPtr.newForeignPtr_1
  :: forall a.
     GHC.Ptr.Ptr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7Kez void_0E]
        case ds_s7Kez of {
          GHC.Ptr.Ptr obj_s7KeC [Occ=Once] ->
              case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
                Unit# ipv1_s7KeF [Occ=Once] ->
                    let {
                      sat_s7KeG [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                      [LclId] =
                          CCCS GHC.ForeignPtr.PlainForeignPtr! [ipv1_s7KeF]; } in
                    let {
                      sat_s7KeH [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7IU5
                      [LclId] =
                          CCCS GHC.ForeignPtr.ForeignPtr! [obj_s7KeC sat_s7KeG];
                    } in  Unit# [sat_s7KeH];
              };
        };

GHC.ForeignPtr.newForeignPtr_
  :: forall a.
     GHC.Ptr.Ptr a -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.ForeignPtr.newForeignPtr_1 eta_B2 GHC.Prim.void#;

GHC.ForeignPtr.$winsertCFinalizer [InlPrag=NOUSERINLINE[0],
                                   Occ=LoopBreaker]
  :: forall value.
     GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.ForeignPtr.Finalizers
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> value
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=7,
 Str=<S,U><S,U><S,U><S,U><S,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7KeI
           w_s7KeJ
           w1_s7KeK
           w2_s7KeL
           w3_s7KeM
           w4_s7KeN
           void_0E]
        case readMutVar# [ww_s7KeI GHC.Prim.void#] of {
          Unit# ipv1_s7KeR [Occ=Once!] ->
              case ipv1_s7KeR of {
                GHC.ForeignPtr.NoFinalizers ->
                    case mkWeakNoFinalizer# [ww_s7KeI w4_s7KeN GHC.Prim.void#] of {
                      Unit# ipv3_s7KeV ->
                          let {
                            lvl24_s7KeW [Occ=OnceL] :: GHC.ForeignPtr.Finalizers
                            [LclId, Unf=OtherCon []] =
                                CCCS GHC.ForeignPtr.CFinalizers! [ipv3_s7KeV]; } in
                          let {
                            lvl25_s7KeX [Occ=OnceL] :: GHC.ForeignPtr.MyWeak
                            [LclId, Unf=OtherCon []] =
                                CCCS GHC.ForeignPtr.MyWeak! [ipv3_s7KeV]; } in
                          let {
                            lvl26_s7KeY [Occ=OnceL] :: (GHC.ForeignPtr.MyWeak, GHC.Types.Bool)
                            [LclId, Unf=OtherCon []] =
                                CCCS (,)! [lvl25_s7KeX GHC.Types.False]; } in
                          let {
                            lvl27_s7KeZ [Occ=OnceL]
                              :: (GHC.ForeignPtr.Finalizers,
                                  (GHC.ForeignPtr.MyWeak, GHC.Types.Bool))
                            [LclId, Unf=OtherCon []] =
                                CCCS (,)! [lvl24_s7KeW lvl26_s7KeY]; } in
                          let {
                            sat_s7Kf6 [Occ=Once]
                              :: GHC.ForeignPtr.Finalizers
                                 -> (GHC.ForeignPtr.Finalizers,
                                     (GHC.ForeignPtr.MyWeak, GHC.Types.Bool))
                            [LclId] =
                                [lvl27_s7KeZ] \r [fin_s7Kf0]
                                    case fin_s7Kf0 of wild1_s7Kf1 {
                                      GHC.ForeignPtr.NoFinalizers -> lvl27_s7KeZ;
                                      GHC.ForeignPtr.CFinalizers w6_s7Kf2 [Occ=Once] ->
                                          let {
                                            sat_s7Kf3 [Occ=Once] :: GHC.ForeignPtr.MyWeak
                                            [LclId] =
                                                CCCS GHC.ForeignPtr.MyWeak! [w6_s7Kf2]; } in
                                          let {
                                            sat_s7Kf4 [Occ=Once]
                                              :: (GHC.ForeignPtr.MyWeak, GHC.Types.Bool)
                                            [LclId] =
                                                CCCS (,)! [sat_s7Kf3 GHC.Types.True];
                                          } in  (,) [wild1_s7Kf1 sat_s7Kf4];
                                      GHC.ForeignPtr.HaskellFinalizers _ [Occ=Dead] ->
                                          GHC.ForeignPtr.noMixingError;
                                    };
                          } in 
                            case atomicModifyMutVar# [ww_s7KeI sat_s7Kf6 GHC.Prim.void#] of {
                              Unit# ipv5_s7Kf9 [Occ=Once!] ->
                                  case ipv5_s7Kf9 of {
                                    (,) weak_s7Kfb [Occ=Once*!] needKill_s7Kfc [Occ=Once!] ->
                                        let-no-escape {
                                          $w$j_s7Kfd [InlPrag=NOUSERINLINE[0],
                                                      Occ=Once*!T[2],
                                                      Dmd=<C(C(S)),1*C1(C1(U(U,U)))>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.Prim.Weak# ()
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                          [LclId[JoinId(2)],
                                           Arity=2,
                                           Str=<S,U><S,U>,
                                           Unf=OtherCon []] =
                                              sat-only [ww_s7KeI
                                                        w_s7KeJ
                                                        w1_s7KeK
                                                        w2_s7KeL
                                                        w3_s7KeM
                                                        w4_s7KeN] \r [void_0E ww1_s7Kff]
                                                  case
                                                      addCFinalizerToWeak# [w_s7KeJ
                                                                            w3_s7KeM
                                                                            w1_s7KeK
                                                                            w2_s7KeL
                                                                            ww1_s7Kff
                                                                            GHC.Prim.void#]
                                                  of
                                                  { Unit# ipv7_s7Kfi [Occ=Once!] ->
                                                        case ipv7_s7Kfi of {
                                                          __DEFAULT ->
                                                              GHC.ForeignPtr.$winsertCFinalizer
                                                                  ww_s7KeI
                                                                  w_s7KeJ
                                                                  w1_s7KeK
                                                                  w2_s7KeL
                                                                  w3_s7KeM
                                                                  w4_s7KeN
                                                                  GHC.Prim.void#;
                                                          1# -> Unit# [GHC.Tuple.()];
                                                        };
                                                  };
                                        } in 
                                          case needKill_s7Kfc of {
                                            GHC.Types.False ->
                                                case weak_s7Kfb of {
                                                  GHC.ForeignPtr.MyWeak ww2_s7Kfm [Occ=Once] ->
                                                      $w$j_s7Kfd GHC.Prim.void# ww2_s7Kfm;
                                                };
                                            GHC.Types.True ->
                                                case finalizeWeak# [ipv3_s7KeV GHC.Prim.void#] of {
                                                  (#,#) _ [Occ=Dead] _ [Occ=Dead] ->
                                                      case weak_s7Kfb of {
                                                        GHC.ForeignPtr.MyWeak ww2_s7Kfs [Occ=Once] ->
                                                            $w$j_s7Kfd GHC.Prim.void# ww2_s7Kfs;
                                                      };
                                                };
                                          };
                                  };
                            };
                    };
                GHC.ForeignPtr.CFinalizers weak_s7Kft [Occ=Once] ->
                    case
                        addCFinalizerToWeak# [w_s7KeJ
                                              w3_s7KeM
                                              w1_s7KeK
                                              w2_s7KeL
                                              weak_s7Kft
                                              GHC.Prim.void#]
                    of
                    { Unit# ipv3_s7Kfw [Occ=Once!] ->
                          case ipv3_s7Kfw of {
                            __DEFAULT ->
                                GHC.ForeignPtr.$winsertCFinalizer
                                    ww_s7KeI
                                    w_s7KeJ
                                    w1_s7KeK
                                    w2_s7KeL
                                    w3_s7KeM
                                    w4_s7KeN
                                    GHC.Prim.void#;
                            1# -> Unit# [GHC.Tuple.()];
                          };
                    };
                GHC.ForeignPtr.HaskellFinalizers _ [Occ=Dead] ->
                    GHC.ForeignPtr.noMixingError;
              };
        };

lvl15_r7Kbs :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ForeignPtr: attempt to add a finalizer to a plain pointer"#;

GHC.ForeignPtr.addForeignPtrFinalizer2 :: GHC.Types.IO ()
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl15_r7Kbs of sat_s7KfA {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7KfA;
        };

GHC.ForeignPtr.$waddForeignPtrFinalizerEnv [InlPrag=NOUSERINLINE[0]]
  :: forall env a.
     GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=5,
 Str=<S,U><S,U><S,U><S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7KfB ww1_s7KfC ww2_s7KfD ww3_s7KfE void_0E]
        case ww3_s7KfE of wild_s7KfG {
          GHC.ForeignPtr.PlainForeignPtr dt_s7KfH [Occ=Once] ->
              GHC.ForeignPtr.$winsertCFinalizer
                  dt_s7KfH
                  ww_s7KfB
                  1#
                  ww1_s7KfC
                  ww2_s7KfD
                  GHC.Tuple.()
                  GHC.Prim.void#;
          GHC.ForeignPtr.MallocPtr _ [Occ=Dead] dt_s7KfJ [Occ=Once] ->
              GHC.ForeignPtr.$winsertCFinalizer
                  dt_s7KfJ ww_s7KfB 1# ww1_s7KfC ww2_s7KfD wild_s7KfG GHC.Prim.void#;
          GHC.ForeignPtr.PlainPtr _ [Occ=Dead] ->
              GHC.ForeignPtr.addForeignPtrFinalizer2;
        };

GHC.ForeignPtr.addForeignPtrFinalizerEnv1 [InlPrag=NOUSERINLINE[0]]
  :: forall env a.
     GHC.Ptr.FunPtr
       (GHC.Ptr.Ptr env -> GHC.Ptr.Ptr a -> GHC.Types.IO ())
     -> GHC.Ptr.Ptr env
     -> GHC.ForeignPtr.ForeignPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(SS),1*U(U,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7KfM w1_s7KfN w2_s7KfO void_0E]
        case w_s7KfM of {
          GHC.Ptr.FunPtr ww1_s7KfR [Occ=Once] ->
              case w1_s7KfN of {
                GHC.Ptr.Ptr ww3_s7KfT [Occ=Once] ->
                    case w2_s7KfO of {
                      GHC.ForeignPtr.ForeignPtr ww5_s7KfV [Occ=Once]
                                                ww6_s7KfW [Occ=Once] ->
                          GHC.ForeignPtr.$waddForeignPtrFinalizerEnv
                              ww1_s7KfR ww3_s7KfT ww5_s7KfV ww6_s7KfW GHC.Prim.void#;
                    };
              };
        };

GHC.ForeignPtr.addForeignPtrFinalizerEnv
  :: forall env a.
     GHC.ForeignPtr.FinalizerEnvPtr env a
     -> GHC.Ptr.Ptr env
     -> GHC.ForeignPtr.ForeignPtr a
     -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(SS),1*U(U,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.ForeignPtr.addForeignPtrFinalizerEnv1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.ForeignPtr.$waddForeignPtrFinalizer [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<S,U><S,U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7KfX ww1_s7KfY ww2_s7KfZ void_0E]
        case ww2_s7KfZ of wild_s7Kg1 {
          GHC.ForeignPtr.PlainForeignPtr dt_s7Kg2 [Occ=Once] ->
              GHC.ForeignPtr.$winsertCFinalizer
                  dt_s7Kg2 ww_s7KfX 0# __NULL ww1_s7KfY GHC.Tuple.() GHC.Prim.void#;
          GHC.ForeignPtr.MallocPtr _ [Occ=Dead] dt_s7Kg4 [Occ=Once] ->
              GHC.ForeignPtr.$winsertCFinalizer
                  dt_s7Kg4 ww_s7KfX 0# __NULL ww1_s7KfY wild_s7Kg1 GHC.Prim.void#;
          GHC.ForeignPtr.PlainPtr _ [Occ=Dead] ->
              GHC.ForeignPtr.addForeignPtrFinalizer2;
        };

GHC.ForeignPtr.addForeignPtrFinalizer1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Ptr.FunPtr (GHC.Ptr.Ptr a -> GHC.Types.IO ())
     -> GHC.ForeignPtr.ForeignPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(SS),1*U(U,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7Kg7 w1_s7Kg8 void_0E]
        case w_s7Kg7 of {
          GHC.Ptr.FunPtr ww1_s7Kgb [Occ=Once] ->
              case w1_s7Kg8 of {
                GHC.ForeignPtr.ForeignPtr ww3_s7Kgd [Occ=Once]
                                          ww4_s7Kge [Occ=Once] ->
                    GHC.ForeignPtr.$waddForeignPtrFinalizer
                        ww1_s7Kgb ww3_s7Kgd ww4_s7Kge GHC.Prim.void#;
              };
        };

GHC.ForeignPtr.addForeignPtrFinalizer
  :: forall a.
     GHC.ForeignPtr.FinalizerPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(SS),1*U(U,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.ForeignPtr.addForeignPtrFinalizer1
            eta_B3 eta_B2 GHC.Prim.void#;

lvl16_r7Kbt :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocForeignPtrAlignedBytes: size must be >= 0"#;

GHC.ForeignPtr.mallocForeignPtrAlignedBytes2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl16_r7Kbt of sat_s7Kgf {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7Kgf;
        };

GHC.ForeignPtr.mallocForeignPtrAlignedBytes1
  :: forall a.
     GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [size_s7Kgg _align_s7Kgh void_0E]
        case size_s7Kgg of {
          GHC.Types.I# x_s7Kgk ->
              case <# [x_s7Kgk 0#] of {
                __DEFAULT ->
                    case _align_s7Kgh of {
                      GHC.Types.I# align_s7Kgn [Occ=Once] ->
                          case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
                            Unit# ipv1_s7Kgq [Occ=Once] ->
                                case
                                    newAlignedPinnedByteArray# [x_s7Kgk align_s7Kgn GHC.Prim.void#]
                                of
                                { Unit# ipv3_s7Kgt ->
                                      let {
                                        sat_s7Kgv [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                        [LclId] =
                                            CCCS GHC.ForeignPtr.MallocPtr! [ipv3_s7Kgt ipv1_s7Kgq];
                                      } in 
                                        case byteArrayContents# [ipv3_s7Kgt] of sat_s7Kgu {
                                          __DEFAULT ->
                                              let {
                                                sat_s7Kgw [Occ=Once]
                                                  :: GHC.ForeignPtr.ForeignPtr a_a7J06
                                                [LclId] =
                                                    CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7Kgu
                                                                                     sat_s7Kgv];
                                              } in  Unit# [sat_s7Kgw];
                                        };
                                };
                          };
                    };
                1# -> GHC.ForeignPtr.mallocForeignPtrAlignedBytes2;
              };
        };

GHC.ForeignPtr.mallocForeignPtrAlignedBytes
  :: forall a.
     GHC.Types.Int
     -> GHC.Types.Int -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.ForeignPtr.mallocForeignPtrAlignedBytes1
            eta_B3 eta_B2 GHC.Prim.void#;

lvl17_r7Kbu :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocForeignPtrBytes: size must be >= 0"#;

GHC.ForeignPtr.mallocForeignPtrBytes2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl17_r7Kbu of sat_s7Kgy {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7Kgy;
        };

GHC.ForeignPtr.mallocForeignPtrBytes1
  :: forall a.
     GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [size_s7Kgz void_0E]
        case size_s7Kgz of {
          GHC.Types.I# x_s7KgC ->
              case <# [x_s7KgC 0#] of {
                __DEFAULT ->
                    case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
                      Unit# ipv1_s7KgG [Occ=Once] ->
                          case newPinnedByteArray# [x_s7KgC GHC.Prim.void#] of {
                            Unit# ipv3_s7KgJ ->
                                let {
                                  sat_s7KgL [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                  [LclId] =
                                      CCCS GHC.ForeignPtr.MallocPtr! [ipv3_s7KgJ ipv1_s7KgG];
                                } in 
                                  case byteArrayContents# [ipv3_s7KgJ] of sat_s7KgK {
                                    __DEFAULT ->
                                        let {
                                          sat_s7KgM [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7J0v
                                          [LclId] =
                                              CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7KgK sat_s7KgL];
                                        } in  Unit# [sat_s7KgM];
                                  };
                          };
                    };
                1# -> GHC.ForeignPtr.mallocForeignPtrBytes2;
              };
        };

GHC.ForeignPtr.mallocForeignPtrBytes
  :: forall a.
     GHC.Types.Int -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.ForeignPtr.mallocForeignPtrBytes1 eta_B2 GHC.Prim.void#;

lvl18_r7Kbv :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [159#];

lvl19_r7Kbw :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [29#];

lvl20_r7Kbx :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [38#];

lvl21_r7Kby :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl2_r7KaX
                                           lvl3_r7KaY
                                           lvl5_r7Kb0
                                           lvl18_r7Kbv
                                           lvl19_r7Kbw
                                           lvl18_r7Kbv
                                           lvl20_r7Kbx];

lvl22_r7Kbz :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl1_r7KaW
                                                  lvl21_r7Kby
                                                  GHC.Stack.Types.EmptyCallStack];

GHC.ForeignPtr.mallocForeignPtr3 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl22_r7Kbz;

GHC.ForeignPtr.mallocForeignPtr1
  :: forall a.
     Foreign.Storable.Storable a =>
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=2,
 Str=<S(C(S(S))C(S(S))LLLLLL),U(1*C1(U(U)),1*C1(U(U)),A,A,A,A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s7KgO void_0E]
        case
            Foreign.Storable.alignment
                $dStorable_s7KgO GHC.ForeignPtr.mallocForeignPtr3
        of
        { GHC.Types.I# align_s7KgR [Occ=Once] ->
              case
                  Foreign.Storable.sizeOf
                      $dStorable_s7KgO GHC.ForeignPtr.mallocForeignPtr3
              of
              { GHC.Types.I# size_s7KgT ->
                    case <# [size_s7KgT 0#] of {
                      __DEFAULT ->
                          case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
                            Unit# ipv1_s7KgX [Occ=Once] ->
                                case
                                    newAlignedPinnedByteArray# [size_s7KgT
                                                                align_s7KgR
                                                                GHC.Prim.void#]
                                of
                                { Unit# ipv3_s7Kh0 ->
                                      let {
                                        sat_s7Kh2 [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                        [LclId] =
                                            CCCS GHC.ForeignPtr.MallocPtr! [ipv3_s7Kh0 ipv1_s7KgX];
                                      } in 
                                        case byteArrayContents# [ipv3_s7Kh0] of sat_s7Kh1 {
                                          __DEFAULT ->
                                              let {
                                                sat_s7Kh3 [Occ=Once]
                                                  :: GHC.ForeignPtr.ForeignPtr a_a7J0U
                                                [LclId] =
                                                    CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7Kh1
                                                                                     sat_s7Kh2];
                                              } in  Unit# [sat_s7Kh3];
                                        };
                                };
                          };
                      1# -> GHC.ForeignPtr.mallocForeignPtr2;
                    };
              };
        };

GHC.ForeignPtr.mallocForeignPtr
  :: forall a.
     Foreign.Storable.Storable a =>
     GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=2,
 Str=<S(C(S(S))C(S(S))LLLLLL),U(1*C1(U(U)),1*C1(U(U)),A,A,A,A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.ForeignPtr.mallocForeignPtr1 eta_B2 GHC.Prim.void#;

GHC.ForeignPtr.addForeignPtrConcFinalizer3
  :: GHC.ForeignPtr.Finalizers
     -> (GHC.ForeignPtr.Finalizers, GHC.ForeignPtr.Finalizers)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m, Unf=OtherCon []] =
    [] \r [fs_s7Kh5] (,) [GHC.ForeignPtr.NoFinalizers fs_s7Kh5];

GHC.ForeignPtr.addForeignPtrConcFinalizer4 [Occ=LoopBreaker]
  :: [GHC.Types.IO ()]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7Kh6 void_0E]
        case ds_s7Kh6 of {
          [] -> Unit# [GHC.Tuple.()];
          : y_s7Kh9 [Occ=Once] ys_s7Kha [Occ=Once] ->
              case y_s7Kh9 GHC.Prim.void# of {
                Unit# _ [Occ=Dead] ->
                    GHC.ForeignPtr.addForeignPtrConcFinalizer4 ys_s7Kha GHC.Prim.void#;
              };
        };

GHC.ForeignPtr.$wforeignPtrFinalizer [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.ForeignPtr.Finalizers
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7Khe void_0E]
        case
            atomicModifyMutVar# [ww_s7Khe
                                 GHC.ForeignPtr.addForeignPtrConcFinalizer3
                                 GHC.Prim.void#]
        of
        { Unit# ipv1_s7Khi [Occ=Once!] ->
              case ipv1_s7Khi of {
                GHC.ForeignPtr.NoFinalizers -> Unit# [GHC.Tuple.()];
                GHC.ForeignPtr.CFinalizers w1_s7Khk [Occ=Once] ->
                    case finalizeWeak# [w1_s7Khk GHC.Prim.void#] of {
                      (#,#) ipv3_s7Khn [Occ=Once!] ipv4_s7Kho [Occ=Once!] ->
                          case ipv3_s7Khn of {
                            __DEFAULT -> Unit# [GHC.Tuple.()];
                            1# -> ipv4_s7Kho GHC.Prim.void#;
                          };
                    };
                GHC.ForeignPtr.HaskellFinalizers actions_s7Khq [Occ=Once] ->
                    GHC.ForeignPtr.addForeignPtrConcFinalizer4
                        actions_s7Khq GHC.Prim.void#;
              };
        };

GHC.ForeignPtr.finalizeForeignPtr2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IORef.IORef GHC.ForeignPtr.Finalizers
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7Khr void_0E]
        case w_s7Khr of {
          GHC.STRef.STRef ww1_s7Khu [Occ=Once] ->
              GHC.ForeignPtr.$wforeignPtrFinalizer ww1_s7Khu GHC.Prim.void#;
        };

GHC.ForeignPtr.finalizeForeignPtr1
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7Khv void_0E]
        case ds_s7Khv of {
          GHC.ForeignPtr.ForeignPtr _ [Occ=Dead] ds2_s7Khz [Occ=Once!] ->
              case ds2_s7Khz of {
                GHC.ForeignPtr.PlainForeignPtr dt_s7KhB [Occ=Once] ->
                    GHC.ForeignPtr.$wforeignPtrFinalizer dt_s7KhB GHC.Prim.void#;
                GHC.ForeignPtr.MallocPtr _ [Occ=Dead] dt_s7KhD [Occ=Once] ->
                    GHC.ForeignPtr.$wforeignPtrFinalizer dt_s7KhD GHC.Prim.void#;
                GHC.ForeignPtr.PlainPtr _ [Occ=Dead] -> Unit# [GHC.Tuple.()];
              };
        };

GHC.ForeignPtr.finalizeForeignPtr
  :: forall a. GHC.ForeignPtr.ForeignPtr a -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.ForeignPtr.finalizeForeignPtr1 eta_B2 GHC.Prim.void#;

lvl23_r7KbA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ForeignPtr: attempt to add a finalizer to plain pointer"#;

GHC.ForeignPtr.addForeignPtrConcFinalizer2 :: GHC.Types.IO ()
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl23_r7KbA of sat_s7KhF {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7KhF;
        };

GHC.ForeignPtr.$waddForeignPtrConcFinalizer [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.ForeignPtr.ForeignPtrContents
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7KhG w_s7KhH void_0E]
        case ww_s7KhG of wild_s7KhJ {
          GHC.ForeignPtr.PlainForeignPtr dt_s7KhK ->
              let {
                lvl24_s7KhL [Occ=OnceL] :: [GHC.Types.IO ()]
                [LclId, Unf=OtherCon []] =
                    CCCS :! [w_s7KhH GHC.Types.[]]; } in
              let {
                lvl25_s7KhM [Occ=OnceL] :: GHC.ForeignPtr.Finalizers
                [LclId, Unf=OtherCon []] =
                    CCCS GHC.ForeignPtr.HaskellFinalizers! [lvl24_s7KhL]; } in
              let {
                lvl26_s7KhN [Occ=OnceL]
                  :: (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId, Unf=OtherCon []] =
                    CCCS (,)! [lvl25_s7KhM GHC.Types.True]; } in
              let {
                sat_s7KhU [Occ=Once]
                  :: GHC.ForeignPtr.Finalizers
                     -> (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId] =
                    [w_s7KhH lvl26_s7KhN] \r [finalizers_s7KhO]
                        case finalizers_s7KhO of {
                          GHC.ForeignPtr.NoFinalizers -> lvl26_s7KhN;
                          GHC.ForeignPtr.CFinalizers _ [Occ=Dead] ->
                              GHC.ForeignPtr.noMixingError;
                          GHC.ForeignPtr.HaskellFinalizers fs_s7KhR [Occ=Once] ->
                              let {
                                sat_s7KhS [Occ=Once] :: [GHC.Types.IO ()]
                                [LclId] =
                                    CCCS :! [w_s7KhH fs_s7KhR]; } in
                              let {
                                sat_s7KhT [Occ=Once] :: GHC.ForeignPtr.Finalizers
                                [LclId] =
                                    CCCS GHC.ForeignPtr.HaskellFinalizers! [sat_s7KhS];
                              } in  (,) [sat_s7KhT GHC.Types.False];
                        };
              } in 
                case atomicModifyMutVar# [dt_s7KhK sat_s7KhU GHC.Prim.void#] of {
                  Unit# ipv1_s7KhX [Occ=Once!] ->
                      case ipv1_s7KhX of {
                        GHC.Types.False -> Unit# [GHC.Tuple.()];
                        GHC.Types.True ->
                            let {
                              sat_s7Ki0 [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              [LclId] =
                                  [dt_s7KhK] \r [void_0E]
                                      GHC.ForeignPtr.$wforeignPtrFinalizer dt_s7KhK GHC.Prim.void#;
                            } in 
                              case mkWeak# [dt_s7KhK GHC.Tuple.() sat_s7Ki0 GHC.Prim.void#] of {
                                Unit# _ [Occ=Dead] -> Unit# [GHC.Tuple.()];
                              };
                      };
                };
          GHC.ForeignPtr.MallocPtr fo_s7Ki4 [Occ=Once] dt_s7Ki5 ->
              let {
                lvl24_s7Ki6 [Occ=OnceL] :: [GHC.Types.IO ()]
                [LclId, Unf=OtherCon []] =
                    CCCS :! [w_s7KhH GHC.Types.[]]; } in
              let {
                lvl25_s7Ki7 [Occ=OnceL] :: GHC.ForeignPtr.Finalizers
                [LclId, Unf=OtherCon []] =
                    CCCS GHC.ForeignPtr.HaskellFinalizers! [lvl24_s7Ki6]; } in
              let {
                lvl26_s7Ki8 [Occ=OnceL]
                  :: (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId, Unf=OtherCon []] =
                    CCCS (,)! [lvl25_s7Ki7 GHC.Types.True]; } in
              let {
                sat_s7Kif [Occ=Once]
                  :: GHC.ForeignPtr.Finalizers
                     -> (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId] =
                    [w_s7KhH lvl26_s7Ki8] \r [finalizers_s7Ki9]
                        case finalizers_s7Ki9 of {
                          GHC.ForeignPtr.NoFinalizers -> lvl26_s7Ki8;
                          GHC.ForeignPtr.CFinalizers _ [Occ=Dead] ->
                              GHC.ForeignPtr.noMixingError;
                          GHC.ForeignPtr.HaskellFinalizers fs_s7Kic [Occ=Once] ->
                              let {
                                sat_s7Kid [Occ=Once] :: [GHC.Types.IO ()]
                                [LclId] =
                                    CCCS :! [w_s7KhH fs_s7Kic]; } in
                              let {
                                sat_s7Kie [Occ=Once] :: GHC.ForeignPtr.Finalizers
                                [LclId] =
                                    CCCS GHC.ForeignPtr.HaskellFinalizers! [sat_s7Kid];
                              } in  (,) [sat_s7Kie GHC.Types.False];
                        };
              } in 
                case atomicModifyMutVar# [dt_s7Ki5 sat_s7Kif GHC.Prim.void#] of {
                  Unit# ipv1_s7Kii [Occ=Once!] ->
                      case ipv1_s7Kii of {
                        GHC.Types.False -> Unit# [GHC.Tuple.()];
                        GHC.Types.True ->
                            let {
                              sat_s7KiO [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              [LclId] =
                                  [wild_s7KhJ dt_s7Ki5] \r [void_0E]
                                      case
                                          atomicModifyMutVar# [dt_s7Ki5
                                                               GHC.ForeignPtr.addForeignPtrConcFinalizer3
                                                               GHC.Prim.void#]
                                      of
                                      { Unit# ipv3_s7Kin [Occ=Once!] ->
                                            case ipv3_s7Kin of {
                                              GHC.ForeignPtr.NoFinalizers ->
                                                  case
                                                      touch# [wild_s7KhJ GHC.Prim.void#]
                                                  of
                                                  s'_s7Kip
                                                  { (##) -> Unit# [GHC.Tuple.()];
                                                  };
                                              GHC.ForeignPtr.CFinalizers w2_s7Kiq [Occ=Once] ->
                                                  case finalizeWeak# [w2_s7Kiq GHC.Prim.void#] of {
                                                    (#,#) ipv5_s7Kit [Occ=Once!]
                                                          ipv6_s7Kiu [Occ=Once!] ->
                                                        case ipv5_s7Kit of {
                                                          __DEFAULT ->
                                                              case
                                                                  touch# [wild_s7KhJ GHC.Prim.void#]
                                                              of
                                                              s'_s7Kiw
                                                              { (##) -> Unit# [GHC.Tuple.()];
                                                              };
                                                          1# ->
                                                              case ipv6_s7Kiu GHC.Prim.void# of {
                                                                Unit# _ [Occ=Dead] ->
                                                                    case
                                                                        touch# [wild_s7KhJ
                                                                                GHC.Prim.void#]
                                                                    of
                                                                    s'_s7KiA
                                                                    { (##) -> Unit# [GHC.Tuple.()];
                                                                    };
                                                              };
                                                        };
                                                  };
                                              GHC.ForeignPtr.HaskellFinalizers actions_s7KiB [Occ=Once] ->
                                                  let-no-escape {
                                                    exit_s7KiC [Occ=OnceL!T[1], Dmd=<L,C(U)>]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               () #)
                                                    [LclId[JoinId(1)],
                                                     Arity=1,
                                                     Str=<S,U>,
                                                     Unf=OtherCon []] =
                                                        sat-only [wild_s7KhJ] \r [void_0E]
                                                            case
                                                                touch# [wild_s7KhJ GHC.Prim.void#]
                                                            of
                                                            s'_s7KiE
                                                            { (##) -> Unit# [GHC.Tuple.()];
                                                            };
                                                  } in 
                                                    let-no-escape {
                                                      go_s7KiF [Occ=LoopBreakerT[2]]
                                                        :: [GHC.Types.IO ()]
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 () #)
                                                      [LclId[JoinId(2)],
                                                       Arity=2,
                                                       Str=<S,1*U><S,U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [exit_s7KiC
                                                                    go_s7KiF] \r [ds_s7KiG void_0E]
                                                              case ds_s7KiG of {
                                                                [] -> exit_s7KiC GHC.Prim.void#;
                                                                : y_s7KiJ [Occ=Once]
                                                                  ys_s7KiK [Occ=Once] ->
                                                                    case y_s7KiJ GHC.Prim.void# of {
                                                                      Unit# _ [Occ=Dead] ->
                                                                          go_s7KiF
                                                                              ys_s7KiK
                                                                              GHC.Prim.void#;
                                                                    };
                                                              };
                                                    } in  go_s7KiF actions_s7KiB GHC.Prim.void#;
                                            };
                                      };
                            } in 
                              case mkWeak# [fo_s7Ki4 GHC.Tuple.() sat_s7KiO GHC.Prim.void#] of {
                                Unit# _ [Occ=Dead] -> Unit# [GHC.Tuple.()];
                              };
                      };
                };
          GHC.ForeignPtr.PlainPtr _ [Occ=Dead] ->
              GHC.ForeignPtr.addForeignPtrConcFinalizer2;
        };

GHC.ForeignPtr.addForeignPtrConcFinalizer1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Str=<S(LS),1*U(A,1*U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7KiU w1_s7KiV void_0E]
        case w_s7KiU of {
          GHC.ForeignPtr.ForeignPtr _ [Occ=Dead] ww2_s7KiZ [Occ=Once] ->
              GHC.ForeignPtr.$waddForeignPtrConcFinalizer
                  ww2_s7KiZ w1_s7KiV GHC.Prim.void#;
        };

GHC.ForeignPtr.addForeignPtrConcFinalizer
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a -> GHC.Types.IO () -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Str=<S(LS),1*U(A,1*U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.ForeignPtr.addForeignPtrConcFinalizer1
            eta_B3 eta_B2 GHC.Prim.void#;

GHC.ForeignPtr.$wnewConcForeignPtr [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Addr#
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7Kj0 w_s7Kj1 void_0E]
        case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
          Unit# ipv1_s7Kj5 ->
              let {
                lvl24_s7Kj6 [Occ=OnceL] :: [GHC.Types.IO ()]
                [LclId, Unf=OtherCon []] =
                    CCCS :! [w_s7Kj1 GHC.Types.[]]; } in
              let {
                lvl25_s7Kj7 [Occ=OnceL] :: GHC.ForeignPtr.Finalizers
                [LclId, Unf=OtherCon []] =
                    CCCS GHC.ForeignPtr.HaskellFinalizers! [lvl24_s7Kj6]; } in
              let {
                lvl26_s7Kj8 [Occ=OnceL]
                  :: (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId, Unf=OtherCon []] =
                    CCCS (,)! [lvl25_s7Kj7 GHC.Types.True]; } in
              let {
                sat_s7Kjf [Occ=Once]
                  :: GHC.ForeignPtr.Finalizers
                     -> (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId] =
                    [w_s7Kj1 lvl26_s7Kj8] \r [finalizers_s7Kj9]
                        case finalizers_s7Kj9 of {
                          GHC.ForeignPtr.NoFinalizers -> lvl26_s7Kj8;
                          GHC.ForeignPtr.CFinalizers _ [Occ=Dead] ->
                              GHC.ForeignPtr.noMixingError;
                          GHC.ForeignPtr.HaskellFinalizers fs_s7Kjc [Occ=Once] ->
                              let {
                                sat_s7Kjd [Occ=Once] :: [GHC.Types.IO ()]
                                [LclId] =
                                    CCCS :! [w_s7Kj1 fs_s7Kjc]; } in
                              let {
                                sat_s7Kje [Occ=Once] :: GHC.ForeignPtr.Finalizers
                                [LclId] =
                                    CCCS GHC.ForeignPtr.HaskellFinalizers! [sat_s7Kjd];
                              } in  (,) [sat_s7Kje GHC.Types.False];
                        };
              } in 
                case atomicModifyMutVar# [ipv1_s7Kj5 sat_s7Kjf GHC.Prim.void#] of {
                  Unit# ipv3_s7Kji [Occ=Once!] ->
                      case ipv3_s7Kji of {
                        GHC.Types.False ->
                            let {
                              sat_s7Kjk [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                              [LclId] =
                                  CCCS GHC.ForeignPtr.PlainForeignPtr! [ipv1_s7Kj5]; } in
                            let {
                              sat_s7Kjl [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_s7JPn
                              [LclId] =
                                  CCCS GHC.ForeignPtr.ForeignPtr! [ww_s7Kj0 sat_s7Kjk];
                            } in  Unit# [sat_s7Kjl];
                        GHC.Types.True ->
                            let {
                              sat_s7Kjn [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              [LclId] =
                                  [ipv1_s7Kj5] \r [void_0E]
                                      GHC.ForeignPtr.$wforeignPtrFinalizer
                                          ipv1_s7Kj5 GHC.Prim.void#;
                            } in 
                              case
                                  mkWeak# [ipv1_s7Kj5 GHC.Tuple.() sat_s7Kjn GHC.Prim.void#]
                              of
                              { Unit# _ [Occ=Dead] ->
                                    let {
                                      sat_s7Kjr [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                      [LclId] =
                                          CCCS GHC.ForeignPtr.PlainForeignPtr! [ipv1_s7Kj5]; } in
                                    let {
                                      sat_s7Kjs [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_s7JPn
                                      [LclId] =
                                          CCCS GHC.ForeignPtr.ForeignPtr! [ww_s7Kj0 sat_s7Kjr];
                                    } in  Unit# [sat_s7Kjs];
                              };
                      };
                };
        };

GHC.ForeignPtr.newConcForeignPtr1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Ptr.Ptr a
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId, Arity=3, Str=<S(S),1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [w_s7Kjt w1_s7Kju void_0E]
        case w_s7Kjt of {
          GHC.Ptr.Ptr ww1_s7Kjx [Occ=Once] ->
              GHC.ForeignPtr.$wnewConcForeignPtr
                  ww1_s7Kjx w1_s7Kju GHC.Prim.void#;
        };

GHC.ForeignPtr.newConcForeignPtr
  :: forall a.
     GHC.Ptr.Ptr a
     -> GHC.Types.IO () -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Arity=3, Str=<S(S),1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.ForeignPtr.newConcForeignPtr1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.ForeignPtr.MyWeak :: GHC.Prim.Weak# () -> GHC.ForeignPtr.MyWeak
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.MyWeak [eta_B1];

GHC.ForeignPtr.PlainForeignPtr
  :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.ForeignPtr.Finalizers
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.PlainForeignPtr [eta_B1];

GHC.ForeignPtr.MallocPtr
  :: GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.ForeignPtr.Finalizers
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.ForeignPtr.MallocPtr [eta_B2 eta_B1];

GHC.ForeignPtr.PlainPtr
  :: GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.PlainPtr [eta_B1];

GHC.ForeignPtr.NoFinalizers :: GHC.ForeignPtr.Finalizers
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.ForeignPtr.NoFinalizers! [];

GHC.ForeignPtr.CFinalizers
  :: GHC.Prim.Weak# () -> GHC.ForeignPtr.Finalizers
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.CFinalizers [eta_B1];

GHC.ForeignPtr.HaskellFinalizers
  :: [GHC.Types.IO ()] -> GHC.ForeignPtr.Finalizers
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.HaskellFinalizers [eta_B1];

GHC.ForeignPtr.ForeignPtr
  :: forall a.
     GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents -> GHC.ForeignPtr.ForeignPtr a
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.ForeignPtr.ForeignPtr [eta_B2 eta_B1];


==================== Pre unarise: ====================
2018-03-16 16:02:52.916287465 UTC

GHC.ForeignPtr.$WPlainForeignPtr [InlPrag=INLINE[2]]
  :: GHC.IORef.IORef GHC.ForeignPtr.Finalizers
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m1,
 Unf=OtherCon []] =
    [] \r [dt_s7LWY]
        case dt_s7LWY of {
          GHC.STRef.STRef dt_s7LX0 [Occ=Once] ->
              GHC.ForeignPtr.PlainForeignPtr [dt_s7LX0];
        };

GHC.ForeignPtr.$WMallocPtr [InlPrag=INLINE[2]]
  :: GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
     -> GHC.IORef.IORef GHC.ForeignPtr.Finalizers
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>m2,
 Unf=OtherCon []] =
    [] \r [dt_s7LX1 dt_s7LX2]
        case dt_s7LX2 of {
          GHC.STRef.STRef dt_s7LX4 [Occ=Once] ->
              GHC.ForeignPtr.MallocPtr [dt_s7LX1 dt_s7LX4];
        };

lvl_r7KaV :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "undefined"#;

lvl1_r7KaW :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_r7KaV;

GHC.ForeignPtr.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

lvl2_r7KaX :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ForeignPtr.$trModule4;

GHC.ForeignPtr.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ForeignPtr"#;

lvl3_r7KaY :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ForeignPtr.$trModule2;

lvl4_r7KaZ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/ForeignPtr.hs"#;

lvl5_r7Kb0 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl4_r7KaZ;

lvl6_r7Kb1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [214#];

lvl7_r7Kb2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [34#];

lvl8_r7Kb3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [43#];

lvl9_r7Kb4 :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl2_r7KaX
                                           lvl3_r7KaY
                                           lvl5_r7Kb0
                                           lvl6_r7Kb1
                                           lvl7_r7Kb2
                                           lvl6_r7Kb1
                                           lvl8_r7Kb3];

lvl10_r7Kb5 :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl1_r7KaW
                                                  lvl9_r7Kb4
                                                  GHC.Stack.Types.EmptyCallStack];

GHC.ForeignPtr.mallocPlainForeignPtr2 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl10_r7Kb5;

lvl11_r7Kb6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocForeignPtr: size must be >= 0"#;

GHC.ForeignPtr.mallocForeignPtr2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl11_r7Kb6 of sat_s7LX5 {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7LX5;
        };

GHC.ForeignPtr.mallocPlainForeignPtr1
  :: forall a.
     Foreign.Storable.Storable a =>
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=2,
 Str=<S(C(S(S))C(S(S))LLLLLL),U(1*C1(U(U)),1*C1(U(U)),A,A,A,A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s7LX6 eta_s7LX7]
        case
            Foreign.Storable.alignment
                $dStorable_s7LX6 GHC.ForeignPtr.mallocPlainForeignPtr2
        of
        { GHC.Types.I# align_s7LX9 [Occ=Once] ->
              case
                  Foreign.Storable.sizeOf
                      $dStorable_s7LX6 GHC.ForeignPtr.mallocPlainForeignPtr2
              of
              { GHC.Types.I# size_s7LXb ->
                    case <# [size_s7LXb 0#] of {
                      __DEFAULT ->
                          case
                              newAlignedPinnedByteArray# [size_s7LXb align_s7LX9 eta_s7LX7]
                          of
                          { (#,#) ipv_s7LXe [Occ=Once] ipv1_s7LXf ->
                                let {
                                  sat_s7LXh [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                  [LclId] =
                                      CCCS GHC.ForeignPtr.PlainPtr! [ipv1_s7LXf];
                                } in 
                                  case byteArrayContents# [ipv1_s7LXf] of sat_s7LXg {
                                    __DEFAULT ->
                                        let {
                                          sat_s7LXi [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7IZ0
                                          [LclId] =
                                              CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7LXg sat_s7LXh];
                                        } in  (#,#) [ipv_s7LXe sat_s7LXi];
                                  };
                          };
                      1# -> GHC.ForeignPtr.mallocForeignPtr2;
                    };
              };
        };

GHC.ForeignPtr.mallocPlainForeignPtr
  :: forall a.
     Foreign.Storable.Storable a =>
     GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=2,
 Str=<S(C(S(S))C(S(S))LLLLLL),U(1*C1(U(U)),1*C1(U(U)),A,A,A,A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.ForeignPtr.mallocPlainForeignPtr1 eta_B2 eta_B1;

lvl12_r7Kb7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocPlainForeignPtrBytes: size must be >= 0"#;

GHC.ForeignPtr.mallocPlainForeignPtrBytes2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl12_r7Kb7 of sat_s7LXk {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7LXk;
        };

GHC.ForeignPtr.mallocPlainForeignPtrBytes1
  :: forall a.
     GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [size_s7LXl eta_s7LXm]
        case size_s7LXl of {
          GHC.Types.I# x_s7LXo ->
              case <# [x_s7LXo 0#] of {
                __DEFAULT ->
                    case newPinnedByteArray# [x_s7LXo eta_s7LXm] of {
                      (#,#) ipv_s7LXr [Occ=Once] ipv1_s7LXs ->
                          let {
                            sat_s7LXu [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                            [LclId] =
                                CCCS GHC.ForeignPtr.PlainPtr! [ipv1_s7LXs];
                          } in 
                            case byteArrayContents# [ipv1_s7LXs] of sat_s7LXt {
                              __DEFAULT ->
                                  let {
                                    sat_s7LXv [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7IYG
                                    [LclId] =
                                        CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7LXt sat_s7LXu];
                                  } in  (#,#) [ipv_s7LXr sat_s7LXv];
                            };
                    };
                1# -> GHC.ForeignPtr.mallocPlainForeignPtrBytes2;
              };
        };

GHC.ForeignPtr.mallocPlainForeignPtrBytes
  :: forall a.
     GHC.Types.Int -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.ForeignPtr.mallocPlainForeignPtrBytes1 eta_B2 eta_B1;

lvl13_r7Kb8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocPlainForeignPtrAlignedBytes: size must be >= 0"#;

GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl13_r7Kb8 of sat_s7LXx {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7LXx;
        };

GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1
  :: forall a.
     GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [size_s7LXy _align_s7LXz eta_s7LXA]
        case size_s7LXy of {
          GHC.Types.I# x_s7LXC ->
              case <# [x_s7LXC 0#] of {
                __DEFAULT ->
                    case _align_s7LXz of {
                      GHC.Types.I# align_s7LXF [Occ=Once] ->
                          case
                              newAlignedPinnedByteArray# [x_s7LXC align_s7LXF eta_s7LXA]
                          of
                          { (#,#) ipv_s7LXH [Occ=Once] ipv1_s7LXI ->
                                let {
                                  sat_s7LXK [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                  [LclId] =
                                      CCCS GHC.ForeignPtr.PlainPtr! [ipv1_s7LXI];
                                } in 
                                  case byteArrayContents# [ipv1_s7LXI] of sat_s7LXJ {
                                    __DEFAULT ->
                                        let {
                                          sat_s7LXL [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7IYd
                                          [LclId] =
                                              CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7LXJ sat_s7LXK];
                                        } in  (#,#) [ipv_s7LXH sat_s7LXL];
                                  };
                          };
                    };
                1# -> GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2;
              };
        };

GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes
  :: forall a.
     GHC.Types.Int
     -> GHC.Types.Int -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1
            eta_B3 eta_B2 eta_B1;

lvl14_r7Kb9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ForeignPtr: attempt to mix Haskell and C finalizers in the same ForeignPtr"#;

GHC.ForeignPtr.noMixingError :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl14_r7Kb9 of sat_s7LXN {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7LXN;
        };

GHC.ForeignPtr.touchForeignPtr1
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(A,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7LXO eta_s7LXP]
        case ds_s7LXO of {
          GHC.ForeignPtr.ForeignPtr _ [Occ=Dead] r_s7LXS [Occ=Once] ->
              case touch# [r_s7LXS eta_s7LXP] of s'_s7LXT {
                __DEFAULT -> (#,#) [s'_s7LXT GHC.Tuple.()];
              };
        };

GHC.ForeignPtr.touchForeignPtr
  :: forall a. GHC.ForeignPtr.ForeignPtr a -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(A,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.ForeignPtr.touchForeignPtr1 eta_B2 eta_B1;

GHC.ForeignPtr.unsafeForeignPtrToPtr
  :: forall a. GHC.ForeignPtr.ForeignPtr a -> GHC.Ptr.Ptr a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)>m,
 Unf=OtherCon []] =
    [] \r [ds_s7LXU]
        case ds_s7LXU of {
          GHC.ForeignPtr.ForeignPtr fo_s7LXW [Occ=Once] _ [Occ=Dead] ->
              GHC.Ptr.Ptr [fo_s7LXW];
        };

GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec
  :: forall a.
     GHC.Types.Int -> GHC.ForeignPtr.ForeignPtr a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(SL),1*U(U,A)><L,1*U>m2,
 Unf=OtherCon []] =
    [] \r [p_s7LXY f_s7LXZ eta_s7LY0]
        case f_s7LXZ of {
          GHC.ForeignPtr.ForeignPtr fo_s7LY2 [Occ=Once] _ [Occ=Dead] ->
              case GHC.Ptr.$w$cshowsPrec fo_s7LY2 eta_s7LY0 of {
                (#,#) ww3_s7LY5 [Occ=Once] ww4_s7LY6 [Occ=Once] ->
                    : [ww3_s7LY5 ww4_s7LY6];
              };
        };

GHC.ForeignPtr.$fShowForeignPtr_$cshow
  :: forall a. GHC.ForeignPtr.ForeignPtr a -> GHC.Base.String
[GblId, Arity=1, Str=<S(SL),1*U(U,A)>m2, Unf=OtherCon []] =
    [] \r [x_s7LY7]
        case x_s7LY7 of {
          GHC.ForeignPtr.ForeignPtr fo_s7LY9 [Occ=Once] _ [Occ=Dead] ->
              case GHC.Ptr.$w$cshowsPrec fo_s7LY9 GHC.Types.[] of {
                (#,#) ww3_s7LYc [Occ=Once] ww4_s7LYd [Occ=Once] ->
                    : [ww3_s7LYc ww4_s7LYd];
              };
        };

GHC.ForeignPtr.$fShowForeignPtr1
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S(SL),1*U(U,A)><L,1*U>m2, Unf=OtherCon []] =
    [] \r [f_s7LYe eta_s7LYf]
        case f_s7LYe of {
          GHC.ForeignPtr.ForeignPtr fo_s7LYh [Occ=Once] _ [Occ=Dead] ->
              case GHC.Ptr.$w$cshowsPrec fo_s7LYh eta_s7LYf of {
                (#,#) ww3_s7LYk [Occ=Once] ww4_s7LYl [Occ=Once] ->
                    : [ww3_s7LYk ww4_s7LYl];
              };
        };

GHC.ForeignPtr.$fShowForeignPtr_$cshowList
  :: forall a. [GHC.ForeignPtr.ForeignPtr a] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s7LYm s_s7LYn]
        GHC.Show.showList__
            GHC.ForeignPtr.$fShowForeignPtr1 ls_s7LYm s_s7LYn;

GHC.ForeignPtr.$fShowForeignPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show (GHC.ForeignPtr.ForeignPtr a)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec
                                    GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                    GHC.ForeignPtr.$fShowForeignPtr_$cshowList];

GHC.ForeignPtr.$fOrdForeignPtr_$ccompare
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [p_s7LYo q_s7LYp]
        case p_s7LYo of {
          GHC.ForeignPtr.ForeignPtr fo_s7LYr _ [Occ=Dead] ->
              case q_s7LYp of {
                GHC.ForeignPtr.ForeignPtr fo1_s7LYu _ [Occ=Dead] ->
                    case ltAddr# [fo_s7LYr fo1_s7LYu] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7LYr fo1_s7LYu] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.EQ [];
                          };
                      1# -> GHC.Types.LT [];
                    };
              };
        };

GHC.ForeignPtr.$fEqForeignPtr_$c==
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [p_s7LYy q_s7LYz]
        case p_s7LYy of {
          GHC.ForeignPtr.ForeignPtr fo_s7LYB [Occ=Once] _ [Occ=Dead] ->
              case q_s7LYz of {
                GHC.ForeignPtr.ForeignPtr fo1_s7LYE [Occ=Once] _ [Occ=Dead] ->
                    case eqAddr# [fo_s7LYB fo1_s7LYE] of sat_s7LYG {
                      __DEFAULT -> tagToEnum# [sat_s7LYG];
                    };
              };
        };

GHC.ForeignPtr.$fEqForeignPtr_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [eta_s7LYH eta1_s7LYI]
        case eta_s7LYH of {
          GHC.ForeignPtr.ForeignPtr fo_s7LYK [Occ=Once] _ [Occ=Dead] ->
              case eta1_s7LYI of {
                GHC.ForeignPtr.ForeignPtr fo1_s7LYN [Occ=Once] _ [Occ=Dead] ->
                    case eqAddr# [fo_s7LYK fo1_s7LYN] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.ForeignPtr.$fEqForeignPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq (GHC.ForeignPtr.ForeignPtr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.ForeignPtr.$fEqForeignPtr_$c==
                                     GHC.ForeignPtr.$fEqForeignPtr_$c/=];

GHC.ForeignPtr.$fOrdForeignPtr_$c<
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [x_s7LYQ y_s7LYR]
        case x_s7LYQ of {
          GHC.ForeignPtr.ForeignPtr fo_s7LYT [Occ=Once] _ [Occ=Dead] ->
              case y_s7LYR of {
                GHC.ForeignPtr.ForeignPtr fo1_s7LYW [Occ=Once] _ [Occ=Dead] ->
                    case ltAddr# [fo_s7LYT fo1_s7LYW] of {
                      __DEFAULT -> GHC.Types.False [];
                      1# -> GHC.Types.True [];
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$c>=
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [x_s7LYZ y_s7LZ0]
        case x_s7LYZ of {
          GHC.ForeignPtr.ForeignPtr fo_s7LZ2 [Occ=Once] _ [Occ=Dead] ->
              case y_s7LZ0 of {
                GHC.ForeignPtr.ForeignPtr fo1_s7LZ5 [Occ=Once] _ [Occ=Dead] ->
                    case ltAddr# [fo_s7LZ2 fo1_s7LZ5] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$c>
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [x_s7LZ8 y_s7LZ9]
        case x_s7LZ8 of {
          GHC.ForeignPtr.ForeignPtr fo_s7LZb _ [Occ=Dead] ->
              case y_s7LZ9 of {
                GHC.ForeignPtr.ForeignPtr fo1_s7LZe _ [Occ=Dead] ->
                    case ltAddr# [fo_s7LZb fo1_s7LZe] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7LZb fo1_s7LZe] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$c<=
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [x_s7LZi y_s7LZj]
        case x_s7LZi of {
          GHC.ForeignPtr.ForeignPtr fo_s7LZl _ [Occ=Dead] ->
              case y_s7LZj of {
                GHC.ForeignPtr.ForeignPtr fo1_s7LZo _ [Occ=Dead] ->
                    case ltAddr# [fo_s7LZl fo1_s7LZo] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7LZl fo1_s7LZo] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# -> GHC.Types.True [];
                          };
                      1# -> GHC.Types.True [];
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$cmax
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.ForeignPtr.ForeignPtr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s7LZs y_s7LZt]
        case x_s7LZs of wild_s7LZu {
          GHC.ForeignPtr.ForeignPtr fo_s7LZv _ [Occ=Dead] ->
              case y_s7LZt of wild1_s7LZx {
                GHC.ForeignPtr.ForeignPtr fo1_s7LZy _ [Occ=Dead] ->
                    case ltAddr# [fo_s7LZv fo1_s7LZy] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7LZv fo1_s7LZy] of {
                            __DEFAULT -> wild_s7LZu;
                            1# -> wild1_s7LZx;
                          };
                      1# -> wild1_s7LZx;
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$cmin
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.ForeignPtr.ForeignPtr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s7LZC y_s7LZD]
        case x_s7LZC of wild_s7LZE {
          GHC.ForeignPtr.ForeignPtr fo_s7LZF _ [Occ=Dead] ->
              case y_s7LZD of wild1_s7LZH {
                GHC.ForeignPtr.ForeignPtr fo1_s7LZI _ [Occ=Dead] ->
                    case ltAddr# [fo_s7LZF fo1_s7LZI] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7LZF fo1_s7LZI] of {
                            __DEFAULT -> wild1_s7LZH;
                            1# -> wild_s7LZE;
                          };
                      1# -> wild_s7LZE;
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Ord (GHC.ForeignPtr.ForeignPtr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.ForeignPtr.$fEqForeignPtr
                                      GHC.ForeignPtr.$fOrdForeignPtr_$ccompare
                                      GHC.ForeignPtr.$fOrdForeignPtr_$c<
                                      GHC.ForeignPtr.$fOrdForeignPtr_$c<=
                                      GHC.ForeignPtr.$fOrdForeignPtr_$c>
                                      GHC.ForeignPtr.$fOrdForeignPtr_$c>=
                                      GHC.ForeignPtr.$fOrdForeignPtr_$cmax
                                      GHC.ForeignPtr.$fOrdForeignPtr_$cmin];

GHC.ForeignPtr.castForeignPtr1
  :: forall a b.
     GHC.ForeignPtr.ForeignPtr a -> GHC.ForeignPtr.ForeignPtr a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [v_s7LZM] v_s7LZM;

GHC.ForeignPtr.castForeignPtr
  :: forall a b.
     GHC.ForeignPtr.ForeignPtr a -> GHC.ForeignPtr.ForeignPtr b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.castForeignPtr1 eta_B1;

GHC.ForeignPtr.plusForeignPtr
  :: forall a b.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.Types.Int -> GHC.ForeignPtr.ForeignPtr b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s7LZN ds1_s7LZO]
        case ds_s7LZN of {
          GHC.ForeignPtr.ForeignPtr addr_s7LZQ [Occ=Once]
                                    c_s7LZR [Occ=Once] ->
              case ds1_s7LZO of {
                GHC.Types.I# d_s7LZT [Occ=Once] ->
                    case plusAddr# [addr_s7LZQ d_s7LZT] of sat_s7LZU {
                      __DEFAULT -> GHC.ForeignPtr.ForeignPtr [sat_s7LZU c_s7LZR];
                    };
              };
        };

GHC.ForeignPtr.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$trModule4];

GHC.ForeignPtr.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$trModule2];

GHC.ForeignPtr.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.ForeignPtr.$trModule3
                                     GHC.ForeignPtr.$trModule1];

$krep_r7Kba :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcRealWorld
                                              GHC.Types.[]];

$krep1_r7Kbb :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep2_r7Kbc :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r7Kbb GHC.Types.[]];

$krep3_r7Kbd :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep2_r7Kbc];

$krep4_r7Kbe :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r7Kbd GHC.Types.[]];

$krep5_r7Kbf :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep4_r7Kbe];

$krep6_r7Kbg :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep7_r7Kbh :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r7Kba GHC.Types.[]];

$krep8_r7Kbi :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcMutableByteArray#
                                              $krep7_r7Kbh];

$krep9_r7Kbj :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWeak#
                                              $krep2_r7Kbc];

$krep10_r7Kbk :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcAddr#
                                              GHC.Types.[]];

GHC.ForeignPtr.$tcFinalizers2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Finalizers"#;

GHC.ForeignPtr.$tcFinalizers1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tcFinalizers2];

GHC.ForeignPtr.$tcFinalizers :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2126386461452460014##
                                    14391791758474672075##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tcFinalizers1
                                    0#
                                    GHC.Types.krep$*];

GHC.ForeignPtr.$tc'NoFinalizers1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcFinalizers
                                              GHC.Types.[]];

GHC.ForeignPtr.$tc'NoFinalizers3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'NoFinalizers"#;

GHC.ForeignPtr.$tc'NoFinalizers2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'NoFinalizers3];

GHC.ForeignPtr.$tc'NoFinalizers :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1940741700794708869##
                                    15606281748314638871##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'NoFinalizers2
                                    0#
                                    GHC.ForeignPtr.$tc'NoFinalizers1];

GHC.ForeignPtr.$tc'CFinalizers1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_r7Kbj
                                         GHC.ForeignPtr.$tc'NoFinalizers1];

GHC.ForeignPtr.$tc'CFinalizers3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'CFinalizers"#;

GHC.ForeignPtr.$tc'CFinalizers2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'CFinalizers3];

GHC.ForeignPtr.$tc'CFinalizers :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5471016724267814004##
                                    11112927960337249170##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'CFinalizers2
                                    0#
                                    GHC.ForeignPtr.$tc'CFinalizers1];

GHC.ForeignPtr.$tc'HaskellFinalizers1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_r7Kbf
                                         GHC.ForeignPtr.$tc'NoFinalizers1];

GHC.ForeignPtr.$tc'HaskellFinalizers3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'HaskellFinalizers"#;

GHC.ForeignPtr.$tc'HaskellFinalizers2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'HaskellFinalizers3];

GHC.ForeignPtr.$tc'HaskellFinalizers :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2766439294378598012##
                                    9182349323511249767##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'HaskellFinalizers2
                                    0#
                                    GHC.ForeignPtr.$tc'HaskellFinalizers1];

$krep11_r7Kbl :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.ForeignPtr.$tc'NoFinalizers1 GHC.Types.[]];

$krep12_r7Kbm :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep11_r7Kbl];

GHC.ForeignPtr.$tcForeignPtrContents2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ForeignPtrContents"#;

GHC.ForeignPtr.$tcForeignPtrContents1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tcForeignPtrContents2];

GHC.ForeignPtr.$tcForeignPtrContents :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2960910307208088010##
                                    1419315288615932334##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tcForeignPtrContents1
                                    0#
                                    GHC.Types.krep$*];

$krep13_r7Kbn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcForeignPtrContents
                                              GHC.Types.[]];

GHC.ForeignPtr.$tc'PlainPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r7Kbi $krep13_r7Kbn];

GHC.ForeignPtr.$tc'PlainPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'PlainPtr"#;

GHC.ForeignPtr.$tc'PlainPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'PlainPtr3];

GHC.ForeignPtr.$tc'PlainPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10386497703892305970##
                                    4483570029522342780##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'PlainPtr2
                                    0#
                                    GHC.ForeignPtr.$tc'PlainPtr1];

GHC.ForeignPtr.$tc'PlainForeignPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_r7Kbm $krep13_r7Kbn];

GHC.ForeignPtr.$tc'PlainForeignPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'PlainForeignPtr"#;

GHC.ForeignPtr.$tc'PlainForeignPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'PlainForeignPtr3];

GHC.ForeignPtr.$tc'PlainForeignPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9658214180323125435##
                                    4797612916438137994##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'PlainForeignPtr2
                                    0#
                                    GHC.ForeignPtr.$tc'PlainForeignPtr1];

GHC.ForeignPtr.$tc'MallocPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r7Kbi
                                         GHC.ForeignPtr.$tc'PlainForeignPtr1];

GHC.ForeignPtr.$tc'MallocPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'MallocPtr"#;

GHC.ForeignPtr.$tc'MallocPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'MallocPtr3];

GHC.ForeignPtr.$tc'MallocPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1358169953258233372##
                                    15155489453511463859##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'MallocPtr2
                                    0#
                                    GHC.ForeignPtr.$tc'MallocPtr1];

GHC.ForeignPtr.$tcForeignPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ForeignPtr"#;

GHC.ForeignPtr.$tcForeignPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tcForeignPtr2];

GHC.ForeignPtr.$tcForeignPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13645276010227069957##
                                    424768606850180054##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tcForeignPtr1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep14_r7Kbo :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep6_r7Kbg GHC.Types.[]];

$krep15_r7Kbp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcForeignPtr
                                              $krep14_r7Kbo];

$krep16_r7Kbq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep13_r7Kbn $krep15_r7Kbp];

GHC.ForeignPtr.$tc'ForeignPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_r7Kbk $krep16_r7Kbq];

GHC.ForeignPtr.$tc'ForeignPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ForeignPtr"#;

GHC.ForeignPtr.$tc'ForeignPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'ForeignPtr3];

GHC.ForeignPtr.$tc'ForeignPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15066988800190837275##
                                    12331496810414125071##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'ForeignPtr2
                                    1#
                                    GHC.ForeignPtr.$tc'ForeignPtr1];

GHC.ForeignPtr.$tcMyWeak2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MyWeak"#;

GHC.ForeignPtr.$tcMyWeak1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tcMyWeak2];

GHC.ForeignPtr.$tcMyWeak :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18176044154139657744##
                                    6003369520845561213##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tcMyWeak1
                                    0#
                                    GHC.Types.krep$*];

$krep17_r7Kbr :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcMyWeak
                                              GHC.Types.[]];

GHC.ForeignPtr.$tc'MyWeak1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_r7Kbj $krep17_r7Kbr];

GHC.ForeignPtr.$tc'MyWeak3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'MyWeak"#;

GHC.ForeignPtr.$tc'MyWeak2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'MyWeak3];

GHC.ForeignPtr.$tc'MyWeak :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12419514784912020020##
                                    3312746660203758866##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'MyWeak2
                                    0#
                                    GHC.ForeignPtr.$tc'MyWeak1];

GHC.ForeignPtr.newForeignPtr_1
  :: forall a.
     GHC.Ptr.Ptr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7LZV eta_s7LZW]
        case ds_s7LZV of {
          GHC.Ptr.Ptr obj_s7LZY [Occ=Once] ->
              case newMutVar# [GHC.ForeignPtr.NoFinalizers eta_s7LZW] of {
                (#,#) ipv_s7M00 [Occ=Once] ipv1_s7M01 [Occ=Once] ->
                    let {
                      sat_s7M02 [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                      [LclId] =
                          CCCS GHC.ForeignPtr.PlainForeignPtr! [ipv1_s7M01]; } in
                    let {
                      sat_s7M03 [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7IU5
                      [LclId] =
                          CCCS GHC.ForeignPtr.ForeignPtr! [obj_s7LZY sat_s7M02];
                    } in  (#,#) [ipv_s7M00 sat_s7M03];
              };
        };

GHC.ForeignPtr.newForeignPtr_
  :: forall a.
     GHC.Ptr.Ptr a -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.ForeignPtr.newForeignPtr_1 eta_B2 eta_B1;

GHC.ForeignPtr.$winsertCFinalizer [InlPrag=NOUSERINLINE[0],
                                   Occ=LoopBreaker]
  :: forall value.
     GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.ForeignPtr.Finalizers
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> value
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=7,
 Str=<S,U><S,U><S,U><S,U><S,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7M04
           w_s7M05
           w1_s7M06
           w2_s7M07
           w3_s7M08
           w4_s7M09
           w5_s7M0a]
        case readMutVar# [ww_s7M04 w5_s7M0a] of {
          (#,#) ipv_s7M0c [Occ=Once*] ipv1_s7M0d [Occ=Once!] ->
              case ipv1_s7M0d of {
                GHC.ForeignPtr.NoFinalizers ->
                    case mkWeakNoFinalizer# [ww_s7M04 w4_s7M09 ipv_s7M0c] of {
                      (#,#) ipv2_s7M0g [Occ=Once] ipv3_s7M0h ->
                          let {
                            lvl24_s7M0i [Occ=OnceL] :: GHC.ForeignPtr.Finalizers
                            [LclId, Unf=OtherCon []] =
                                CCCS GHC.ForeignPtr.CFinalizers! [ipv3_s7M0h]; } in
                          let {
                            lvl25_s7M0j [Occ=OnceL] :: GHC.ForeignPtr.MyWeak
                            [LclId, Unf=OtherCon []] =
                                CCCS GHC.ForeignPtr.MyWeak! [ipv3_s7M0h]; } in
                          let {
                            lvl26_s7M0k [Occ=OnceL] :: (GHC.ForeignPtr.MyWeak, GHC.Types.Bool)
                            [LclId, Unf=OtherCon []] =
                                CCCS (,)! [lvl25_s7M0j GHC.Types.False]; } in
                          let {
                            lvl27_s7M0l [Occ=OnceL]
                              :: (GHC.ForeignPtr.Finalizers,
                                  (GHC.ForeignPtr.MyWeak, GHC.Types.Bool))
                            [LclId, Unf=OtherCon []] =
                                CCCS (,)! [lvl24_s7M0i lvl26_s7M0k]; } in
                          let {
                            sat_s7M0s [Occ=Once]
                              :: GHC.ForeignPtr.Finalizers
                                 -> (GHC.ForeignPtr.Finalizers,
                                     (GHC.ForeignPtr.MyWeak, GHC.Types.Bool))
                            [LclId] =
                                [lvl27_s7M0l] \r [fin_s7M0m]
                                    case fin_s7M0m of wild1_s7M0n {
                                      GHC.ForeignPtr.NoFinalizers -> lvl27_s7M0l;
                                      GHC.ForeignPtr.CFinalizers w6_s7M0o [Occ=Once] ->
                                          let {
                                            sat_s7M0p [Occ=Once] :: GHC.ForeignPtr.MyWeak
                                            [LclId] =
                                                CCCS GHC.ForeignPtr.MyWeak! [w6_s7M0o]; } in
                                          let {
                                            sat_s7M0q [Occ=Once]
                                              :: (GHC.ForeignPtr.MyWeak, GHC.Types.Bool)
                                            [LclId] =
                                                CCCS (,)! [sat_s7M0p GHC.Types.True];
                                          } in  (,) [wild1_s7M0n sat_s7M0q];
                                      GHC.ForeignPtr.HaskellFinalizers _ [Occ=Dead] ->
                                          GHC.ForeignPtr.noMixingError;
                                    };
                          } in 
                            case atomicModifyMutVar# [ww_s7M04 sat_s7M0s ipv2_s7M0g] of {
                              (#,#) ipv4_s7M0u [Occ=Once*] ipv5_s7M0v [Occ=Once!] ->
                                  case ipv5_s7M0v of {
                                    (,) weak_s7M0x [Occ=Once*!] needKill_s7M0y [Occ=Once!] ->
                                        let-no-escape {
                                          $w$j_s7M0z [InlPrag=NOUSERINLINE[0],
                                                      Occ=Once*!T[2],
                                                      Dmd=<C(C(S)),1*C1(C1(U(U,U)))>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.Prim.Weak# ()
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                          [LclId[JoinId(2)],
                                           Arity=2,
                                           Str=<S,U><S,U>,
                                           Unf=OtherCon []] =
                                              sat-only [ww_s7M04
                                                        w_s7M05
                                                        w1_s7M06
                                                        w2_s7M07
                                                        w3_s7M08
                                                        w4_s7M09] \r [w6_s7M0A ww1_s7M0B]
                                                  case
                                                      addCFinalizerToWeak# [w_s7M05
                                                                            w3_s7M08
                                                                            w1_s7M06
                                                                            w2_s7M07
                                                                            ww1_s7M0B
                                                                            w6_s7M0A]
                                                  of
                                                  { (#,#) ipv6_s7M0D [Occ=Once*]
                                                          ipv7_s7M0E [Occ=Once!] ->
                                                        case ipv7_s7M0E of {
                                                          __DEFAULT ->
                                                              GHC.ForeignPtr.$winsertCFinalizer
                                                                  ww_s7M04
                                                                  w_s7M05
                                                                  w1_s7M06
                                                                  w2_s7M07
                                                                  w3_s7M08
                                                                  w4_s7M09
                                                                  ipv6_s7M0D;
                                                          1# -> (#,#) [ipv6_s7M0D GHC.Tuple.()];
                                                        };
                                                  };
                                        } in 
                                          case needKill_s7M0y of {
                                            GHC.Types.False ->
                                                case weak_s7M0x of {
                                                  GHC.ForeignPtr.MyWeak ww2_s7M0I [Occ=Once] ->
                                                      $w$j_s7M0z ipv4_s7M0u ww2_s7M0I;
                                                };
                                            GHC.Types.True ->
                                                case finalizeWeak# [ipv3_s7M0h ipv4_s7M0u] of {
                                                  (#,,#) ipv6_s7M0K [Occ=Once]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead] ->
                                                      case weak_s7M0x of {
                                                        GHC.ForeignPtr.MyWeak ww2_s7M0O [Occ=Once] ->
                                                            $w$j_s7M0z ipv6_s7M0K ww2_s7M0O;
                                                      };
                                                };
                                          };
                                  };
                            };
                    };
                GHC.ForeignPtr.CFinalizers weak_s7M0P [Occ=Once] ->
                    case
                        addCFinalizerToWeak# [w_s7M05
                                              w3_s7M08
                                              w1_s7M06
                                              w2_s7M07
                                              weak_s7M0P
                                              ipv_s7M0c]
                    of
                    { (#,#) ipv2_s7M0R [Occ=Once*] ipv3_s7M0S [Occ=Once!] ->
                          case ipv3_s7M0S of {
                            __DEFAULT ->
                                GHC.ForeignPtr.$winsertCFinalizer
                                    ww_s7M04 w_s7M05 w1_s7M06 w2_s7M07 w3_s7M08 w4_s7M09 ipv2_s7M0R;
                            1# -> (#,#) [ipv2_s7M0R GHC.Tuple.()];
                          };
                    };
                GHC.ForeignPtr.HaskellFinalizers _ [Occ=Dead] ->
                    GHC.ForeignPtr.noMixingError;
              };
        };

lvl15_r7Kbs :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ForeignPtr: attempt to add a finalizer to a plain pointer"#;

GHC.ForeignPtr.addForeignPtrFinalizer2 :: GHC.Types.IO ()
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl15_r7Kbs of sat_s7M0W {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7M0W;
        };

GHC.ForeignPtr.$waddForeignPtrFinalizerEnv [InlPrag=NOUSERINLINE[0]]
  :: forall env a.
     GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=5,
 Str=<S,U><S,U><S,U><S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7M0X ww1_s7M0Y ww2_s7M0Z ww3_s7M10 w_s7M11]
        case ww3_s7M10 of wild_s7M12 {
          GHC.ForeignPtr.PlainForeignPtr dt_s7M13 [Occ=Once] ->
              GHC.ForeignPtr.$winsertCFinalizer
                  dt_s7M13 ww_s7M0X 1# ww1_s7M0Y ww2_s7M0Z GHC.Tuple.() w_s7M11;
          GHC.ForeignPtr.MallocPtr _ [Occ=Dead] dt_s7M15 [Occ=Once] ->
              GHC.ForeignPtr.$winsertCFinalizer
                  dt_s7M15 ww_s7M0X 1# ww1_s7M0Y ww2_s7M0Z wild_s7M12 w_s7M11;
          GHC.ForeignPtr.PlainPtr _ [Occ=Dead] ->
              GHC.ForeignPtr.addForeignPtrFinalizer2;
        };

GHC.ForeignPtr.addForeignPtrFinalizerEnv1 [InlPrag=NOUSERINLINE[0]]
  :: forall env a.
     GHC.Ptr.FunPtr
       (GHC.Ptr.Ptr env -> GHC.Ptr.Ptr a -> GHC.Types.IO ())
     -> GHC.Ptr.Ptr env
     -> GHC.ForeignPtr.ForeignPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(SS),1*U(U,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7M18 w1_s7M19 w2_s7M1a w3_s7M1b]
        case w_s7M18 of {
          GHC.Ptr.FunPtr ww1_s7M1d [Occ=Once] ->
              case w1_s7M19 of {
                GHC.Ptr.Ptr ww3_s7M1f [Occ=Once] ->
                    case w2_s7M1a of {
                      GHC.ForeignPtr.ForeignPtr ww5_s7M1h [Occ=Once]
                                                ww6_s7M1i [Occ=Once] ->
                          GHC.ForeignPtr.$waddForeignPtrFinalizerEnv
                              ww1_s7M1d ww3_s7M1f ww5_s7M1h ww6_s7M1i w3_s7M1b;
                    };
              };
        };

GHC.ForeignPtr.addForeignPtrFinalizerEnv
  :: forall env a.
     GHC.ForeignPtr.FinalizerEnvPtr env a
     -> GHC.Ptr.Ptr env
     -> GHC.ForeignPtr.ForeignPtr a
     -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(SS),1*U(U,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.ForeignPtr.addForeignPtrFinalizerEnv1
            eta_B4 eta_B3 eta_B2 eta_B1;

GHC.ForeignPtr.$waddForeignPtrFinalizer [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<S,U><S,U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7M1j ww1_s7M1k ww2_s7M1l w_s7M1m]
        case ww2_s7M1l of wild_s7M1n {
          GHC.ForeignPtr.PlainForeignPtr dt_s7M1o [Occ=Once] ->
              GHC.ForeignPtr.$winsertCFinalizer
                  dt_s7M1o ww_s7M1j 0# __NULL ww1_s7M1k GHC.Tuple.() w_s7M1m;
          GHC.ForeignPtr.MallocPtr _ [Occ=Dead] dt_s7M1q [Occ=Once] ->
              GHC.ForeignPtr.$winsertCFinalizer
                  dt_s7M1q ww_s7M1j 0# __NULL ww1_s7M1k wild_s7M1n w_s7M1m;
          GHC.ForeignPtr.PlainPtr _ [Occ=Dead] ->
              GHC.ForeignPtr.addForeignPtrFinalizer2;
        };

GHC.ForeignPtr.addForeignPtrFinalizer1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Ptr.FunPtr (GHC.Ptr.Ptr a -> GHC.Types.IO ())
     -> GHC.ForeignPtr.ForeignPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(SS),1*U(U,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7M1t w1_s7M1u w2_s7M1v]
        case w_s7M1t of {
          GHC.Ptr.FunPtr ww1_s7M1x [Occ=Once] ->
              case w1_s7M1u of {
                GHC.ForeignPtr.ForeignPtr ww3_s7M1z [Occ=Once]
                                          ww4_s7M1A [Occ=Once] ->
                    GHC.ForeignPtr.$waddForeignPtrFinalizer
                        ww1_s7M1x ww3_s7M1z ww4_s7M1A w2_s7M1v;
              };
        };

GHC.ForeignPtr.addForeignPtrFinalizer
  :: forall a.
     GHC.ForeignPtr.FinalizerPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(SS),1*U(U,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.ForeignPtr.addForeignPtrFinalizer1 eta_B3 eta_B2 eta_B1;

lvl16_r7Kbt :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocForeignPtrAlignedBytes: size must be >= 0"#;

GHC.ForeignPtr.mallocForeignPtrAlignedBytes2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl16_r7Kbt of sat_s7M1B {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7M1B;
        };

GHC.ForeignPtr.mallocForeignPtrAlignedBytes1
  :: forall a.
     GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [size_s7M1C _align_s7M1D eta_s7M1E]
        case size_s7M1C of {
          GHC.Types.I# x_s7M1G ->
              case <# [x_s7M1G 0#] of {
                __DEFAULT ->
                    case _align_s7M1D of {
                      GHC.Types.I# align_s7M1J [Occ=Once] ->
                          case newMutVar# [GHC.ForeignPtr.NoFinalizers eta_s7M1E] of {
                            (#,#) ipv_s7M1L [Occ=Once] ipv1_s7M1M [Occ=Once] ->
                                case
                                    newAlignedPinnedByteArray# [x_s7M1G align_s7M1J ipv_s7M1L]
                                of
                                { (#,#) ipv2_s7M1O [Occ=Once] ipv3_s7M1P ->
                                      let {
                                        sat_s7M1R [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                        [LclId] =
                                            CCCS GHC.ForeignPtr.MallocPtr! [ipv3_s7M1P ipv1_s7M1M];
                                      } in 
                                        case byteArrayContents# [ipv3_s7M1P] of sat_s7M1Q {
                                          __DEFAULT ->
                                              let {
                                                sat_s7M1S [Occ=Once]
                                                  :: GHC.ForeignPtr.ForeignPtr a_a7J06
                                                [LclId] =
                                                    CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7M1Q
                                                                                     sat_s7M1R];
                                              } in  (#,#) [ipv2_s7M1O sat_s7M1S];
                                        };
                                };
                          };
                    };
                1# -> GHC.ForeignPtr.mallocForeignPtrAlignedBytes2;
              };
        };

GHC.ForeignPtr.mallocForeignPtrAlignedBytes
  :: forall a.
     GHC.Types.Int
     -> GHC.Types.Int -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.ForeignPtr.mallocForeignPtrAlignedBytes1 eta_B3 eta_B2 eta_B1;

lvl17_r7Kbu :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocForeignPtrBytes: size must be >= 0"#;

GHC.ForeignPtr.mallocForeignPtrBytes2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl17_r7Kbu of sat_s7M1U {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7M1U;
        };

GHC.ForeignPtr.mallocForeignPtrBytes1
  :: forall a.
     GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [size_s7M1V eta_s7M1W]
        case size_s7M1V of {
          GHC.Types.I# x_s7M1Y ->
              case <# [x_s7M1Y 0#] of {
                __DEFAULT ->
                    case newMutVar# [GHC.ForeignPtr.NoFinalizers eta_s7M1W] of {
                      (#,#) ipv_s7M21 [Occ=Once] ipv1_s7M22 [Occ=Once] ->
                          case newPinnedByteArray# [x_s7M1Y ipv_s7M21] of {
                            (#,#) ipv2_s7M24 [Occ=Once] ipv3_s7M25 ->
                                let {
                                  sat_s7M27 [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                  [LclId] =
                                      CCCS GHC.ForeignPtr.MallocPtr! [ipv3_s7M25 ipv1_s7M22];
                                } in 
                                  case byteArrayContents# [ipv3_s7M25] of sat_s7M26 {
                                    __DEFAULT ->
                                        let {
                                          sat_s7M28 [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7J0v
                                          [LclId] =
                                              CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7M26 sat_s7M27];
                                        } in  (#,#) [ipv2_s7M24 sat_s7M28];
                                  };
                          };
                    };
                1# -> GHC.ForeignPtr.mallocForeignPtrBytes2;
              };
        };

GHC.ForeignPtr.mallocForeignPtrBytes
  :: forall a.
     GHC.Types.Int -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.ForeignPtr.mallocForeignPtrBytes1 eta_B2 eta_B1;

lvl18_r7Kbv :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [159#];

lvl19_r7Kbw :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [29#];

lvl20_r7Kbx :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [38#];

lvl21_r7Kby :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl2_r7KaX
                                           lvl3_r7KaY
                                           lvl5_r7Kb0
                                           lvl18_r7Kbv
                                           lvl19_r7Kbw
                                           lvl18_r7Kbv
                                           lvl20_r7Kbx];

lvl22_r7Kbz :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl1_r7KaW
                                                  lvl21_r7Kby
                                                  GHC.Stack.Types.EmptyCallStack];

GHC.ForeignPtr.mallocForeignPtr3 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl22_r7Kbz;

GHC.ForeignPtr.mallocForeignPtr1
  :: forall a.
     Foreign.Storable.Storable a =>
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=2,
 Str=<S(C(S(S))C(S(S))LLLLLL),U(1*C1(U(U)),1*C1(U(U)),A,A,A,A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s7M2a eta_s7M2b]
        case
            Foreign.Storable.alignment
                $dStorable_s7M2a GHC.ForeignPtr.mallocForeignPtr3
        of
        { GHC.Types.I# align_s7M2d [Occ=Once] ->
              case
                  Foreign.Storable.sizeOf
                      $dStorable_s7M2a GHC.ForeignPtr.mallocForeignPtr3
              of
              { GHC.Types.I# size_s7M2f ->
                    case <# [size_s7M2f 0#] of {
                      __DEFAULT ->
                          case newMutVar# [GHC.ForeignPtr.NoFinalizers eta_s7M2b] of {
                            (#,#) ipv_s7M2i [Occ=Once] ipv1_s7M2j [Occ=Once] ->
                                case
                                    newAlignedPinnedByteArray# [size_s7M2f align_s7M2d ipv_s7M2i]
                                of
                                { (#,#) ipv2_s7M2l [Occ=Once] ipv3_s7M2m ->
                                      let {
                                        sat_s7M2o [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                        [LclId] =
                                            CCCS GHC.ForeignPtr.MallocPtr! [ipv3_s7M2m ipv1_s7M2j];
                                      } in 
                                        case byteArrayContents# [ipv3_s7M2m] of sat_s7M2n {
                                          __DEFAULT ->
                                              let {
                                                sat_s7M2p [Occ=Once]
                                                  :: GHC.ForeignPtr.ForeignPtr a_a7J0U
                                                [LclId] =
                                                    CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7M2n
                                                                                     sat_s7M2o];
                                              } in  (#,#) [ipv2_s7M2l sat_s7M2p];
                                        };
                                };
                          };
                      1# -> GHC.ForeignPtr.mallocForeignPtr2;
                    };
              };
        };

GHC.ForeignPtr.mallocForeignPtr
  :: forall a.
     Foreign.Storable.Storable a =>
     GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=2,
 Str=<S(C(S(S))C(S(S))LLLLLL),U(1*C1(U(U)),1*C1(U(U)),A,A,A,A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.ForeignPtr.mallocForeignPtr1 eta_B2 eta_B1;

GHC.ForeignPtr.addForeignPtrConcFinalizer3
  :: GHC.ForeignPtr.Finalizers
     -> (GHC.ForeignPtr.Finalizers, GHC.ForeignPtr.Finalizers)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m, Unf=OtherCon []] =
    [] \r [fs_s7M2r] (,) [GHC.ForeignPtr.NoFinalizers fs_s7M2r];

GHC.ForeignPtr.addForeignPtrConcFinalizer4 [Occ=LoopBreaker]
  :: [GHC.Types.IO ()]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7M2s eta_s7M2t]
        case ds_s7M2s of {
          [] -> (#,#) [eta_s7M2t GHC.Tuple.()];
          : y_s7M2v [Occ=Once] ys_s7M2w [Occ=Once] ->
              case y_s7M2v eta_s7M2t of {
                (#,#) ipv_s7M2y [Occ=Once] _ [Occ=Dead] ->
                    GHC.ForeignPtr.addForeignPtrConcFinalizer4 ys_s7M2w ipv_s7M2y;
              };
        };

GHC.ForeignPtr.$wforeignPtrFinalizer [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.ForeignPtr.Finalizers
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7M2A w_s7M2B]
        case
            atomicModifyMutVar# [ww_s7M2A
                                 GHC.ForeignPtr.addForeignPtrConcFinalizer3
                                 w_s7M2B]
        of
        { (#,#) ipv_s7M2D [Occ=Once*] ipv1_s7M2E [Occ=Once!] ->
              case ipv1_s7M2E of {
                GHC.ForeignPtr.NoFinalizers -> (#,#) [ipv_s7M2D GHC.Tuple.()];
                GHC.ForeignPtr.CFinalizers w1_s7M2G [Occ=Once] ->
                    case finalizeWeak# [w1_s7M2G ipv_s7M2D] of {
                      (#,,#) ipv2_s7M2I [Occ=Once*]
                             ipv3_s7M2J [Occ=Once!]
                             ipv4_s7M2K [Occ=Once!] ->
                          case ipv3_s7M2J of {
                            __DEFAULT -> (#,#) [ipv2_s7M2I GHC.Tuple.()];
                            1# -> ipv4_s7M2K ipv2_s7M2I;
                          };
                    };
                GHC.ForeignPtr.HaskellFinalizers actions_s7M2M [Occ=Once] ->
                    GHC.ForeignPtr.addForeignPtrConcFinalizer4 actions_s7M2M ipv_s7M2D;
              };
        };

GHC.ForeignPtr.finalizeForeignPtr2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IORef.IORef GHC.ForeignPtr.Finalizers
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7M2N w1_s7M2O]
        case w_s7M2N of {
          GHC.STRef.STRef ww1_s7M2Q [Occ=Once] ->
              GHC.ForeignPtr.$wforeignPtrFinalizer ww1_s7M2Q w1_s7M2O;
        };

GHC.ForeignPtr.finalizeForeignPtr1
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7M2R eta_s7M2S]
        case ds_s7M2R of {
          GHC.ForeignPtr.ForeignPtr _ [Occ=Dead] ds2_s7M2V [Occ=Once!] ->
              case ds2_s7M2V of {
                GHC.ForeignPtr.PlainForeignPtr dt_s7M2X [Occ=Once] ->
                    GHC.ForeignPtr.$wforeignPtrFinalizer dt_s7M2X eta_s7M2S;
                GHC.ForeignPtr.MallocPtr _ [Occ=Dead] dt_s7M2Z [Occ=Once] ->
                    GHC.ForeignPtr.$wforeignPtrFinalizer dt_s7M2Z eta_s7M2S;
                GHC.ForeignPtr.PlainPtr _ [Occ=Dead] ->
                    (#,#) [eta_s7M2S GHC.Tuple.()];
              };
        };

GHC.ForeignPtr.finalizeForeignPtr
  :: forall a. GHC.ForeignPtr.ForeignPtr a -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.ForeignPtr.finalizeForeignPtr1 eta_B2 eta_B1;

lvl23_r7KbA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ForeignPtr: attempt to add a finalizer to plain pointer"#;

GHC.ForeignPtr.addForeignPtrConcFinalizer2 :: GHC.Types.IO ()
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl23_r7KbA of sat_s7M31 {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7M31;
        };

GHC.ForeignPtr.$waddForeignPtrConcFinalizer [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.ForeignPtr.ForeignPtrContents
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7M32 w_s7M33 w1_s7M34]
        case ww_s7M32 of wild_s7M35 {
          GHC.ForeignPtr.PlainForeignPtr dt_s7M36 ->
              let {
                lvl24_s7M37 [Occ=OnceL] :: [GHC.Types.IO ()]
                [LclId, Unf=OtherCon []] =
                    CCCS :! [w_s7M33 GHC.Types.[]]; } in
              let {
                lvl25_s7M38 [Occ=OnceL] :: GHC.ForeignPtr.Finalizers
                [LclId, Unf=OtherCon []] =
                    CCCS GHC.ForeignPtr.HaskellFinalizers! [lvl24_s7M37]; } in
              let {
                lvl26_s7M39 [Occ=OnceL]
                  :: (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId, Unf=OtherCon []] =
                    CCCS (,)! [lvl25_s7M38 GHC.Types.True]; } in
              let {
                sat_s7M3g [Occ=Once]
                  :: GHC.ForeignPtr.Finalizers
                     -> (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId] =
                    [w_s7M33 lvl26_s7M39] \r [finalizers_s7M3a]
                        case finalizers_s7M3a of {
                          GHC.ForeignPtr.NoFinalizers -> lvl26_s7M39;
                          GHC.ForeignPtr.CFinalizers _ [Occ=Dead] ->
                              GHC.ForeignPtr.noMixingError;
                          GHC.ForeignPtr.HaskellFinalizers fs_s7M3d [Occ=Once] ->
                              let {
                                sat_s7M3e [Occ=Once] :: [GHC.Types.IO ()]
                                [LclId] =
                                    CCCS :! [w_s7M33 fs_s7M3d]; } in
                              let {
                                sat_s7M3f [Occ=Once] :: GHC.ForeignPtr.Finalizers
                                [LclId] =
                                    CCCS GHC.ForeignPtr.HaskellFinalizers! [sat_s7M3e];
                              } in  (,) [sat_s7M3f GHC.Types.False];
                        };
              } in 
                case atomicModifyMutVar# [dt_s7M36 sat_s7M3g w1_s7M34] of {
                  (#,#) ipv_s7M3i [Occ=Once*] ipv1_s7M3j [Occ=Once!] ->
                      case ipv1_s7M3j of {
                        GHC.Types.False -> (#,#) [ipv_s7M3i GHC.Tuple.()];
                        GHC.Types.True ->
                            let {
                              sat_s7M3m [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              [LclId] =
                                  [dt_s7M36] \r [w2_s7M3l]
                                      GHC.ForeignPtr.$wforeignPtrFinalizer dt_s7M36 w2_s7M3l;
                            } in 
                              case mkWeak# [dt_s7M36 GHC.Tuple.() sat_s7M3m ipv_s7M3i] of {
                                (#,#) ipv2_s7M3o [Occ=Once] _ [Occ=Dead] ->
                                    (#,#) [ipv2_s7M3o GHC.Tuple.()];
                              };
                      };
                };
          GHC.ForeignPtr.MallocPtr fo_s7M3q [Occ=Once] dt_s7M3r ->
              let {
                lvl24_s7M3s [Occ=OnceL] :: [GHC.Types.IO ()]
                [LclId, Unf=OtherCon []] =
                    CCCS :! [w_s7M33 GHC.Types.[]]; } in
              let {
                lvl25_s7M3t [Occ=OnceL] :: GHC.ForeignPtr.Finalizers
                [LclId, Unf=OtherCon []] =
                    CCCS GHC.ForeignPtr.HaskellFinalizers! [lvl24_s7M3s]; } in
              let {
                lvl26_s7M3u [Occ=OnceL]
                  :: (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId, Unf=OtherCon []] =
                    CCCS (,)! [lvl25_s7M3t GHC.Types.True]; } in
              let {
                sat_s7M3B [Occ=Once]
                  :: GHC.ForeignPtr.Finalizers
                     -> (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId] =
                    [w_s7M33 lvl26_s7M3u] \r [finalizers_s7M3v]
                        case finalizers_s7M3v of {
                          GHC.ForeignPtr.NoFinalizers -> lvl26_s7M3u;
                          GHC.ForeignPtr.CFinalizers _ [Occ=Dead] ->
                              GHC.ForeignPtr.noMixingError;
                          GHC.ForeignPtr.HaskellFinalizers fs_s7M3y [Occ=Once] ->
                              let {
                                sat_s7M3z [Occ=Once] :: [GHC.Types.IO ()]
                                [LclId] =
                                    CCCS :! [w_s7M33 fs_s7M3y]; } in
                              let {
                                sat_s7M3A [Occ=Once] :: GHC.ForeignPtr.Finalizers
                                [LclId] =
                                    CCCS GHC.ForeignPtr.HaskellFinalizers! [sat_s7M3z];
                              } in  (,) [sat_s7M3A GHC.Types.False];
                        };
              } in 
                case atomicModifyMutVar# [dt_s7M3r sat_s7M3B w1_s7M34] of {
                  (#,#) ipv_s7M3D [Occ=Once*] ipv1_s7M3E [Occ=Once!] ->
                      case ipv1_s7M3E of {
                        GHC.Types.False -> (#,#) [ipv_s7M3D GHC.Tuple.()];
                        GHC.Types.True ->
                            let {
                              sat_s7M4a [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              [LclId] =
                                  [wild_s7M35 dt_s7M3r] \r [s_s7M3G]
                                      case
                                          atomicModifyMutVar# [dt_s7M3r
                                                               GHC.ForeignPtr.addForeignPtrConcFinalizer3
                                                               s_s7M3G]
                                      of
                                      { (#,#) ipv2_s7M3I [Occ=Once*] ipv3_s7M3J [Occ=Once!] ->
                                            case ipv3_s7M3J of {
                                              GHC.ForeignPtr.NoFinalizers ->
                                                  case touch# [wild_s7M35 ipv2_s7M3I] of s'_s7M3L {
                                                    __DEFAULT -> (#,#) [s'_s7M3L GHC.Tuple.()];
                                                  };
                                              GHC.ForeignPtr.CFinalizers w2_s7M3M [Occ=Once] ->
                                                  case finalizeWeak# [w2_s7M3M ipv2_s7M3I] of {
                                                    (#,,#) ipv4_s7M3O [Occ=Once*]
                                                           ipv5_s7M3P [Occ=Once!]
                                                           ipv6_s7M3Q [Occ=Once!] ->
                                                        case ipv5_s7M3P of {
                                                          __DEFAULT ->
                                                              case
                                                                  touch# [wild_s7M35 ipv4_s7M3O]
                                                              of
                                                              s'_s7M3S
                                                              { __DEFAULT ->
                                                                    (#,#) [s'_s7M3S GHC.Tuple.()];
                                                              };
                                                          1# ->
                                                              case ipv6_s7M3Q ipv4_s7M3O of {
                                                                (#,#) ipv7_s7M3U [Occ=Once]
                                                                      _ [Occ=Dead] ->
                                                                    case
                                                                        touch# [wild_s7M35
                                                                                ipv7_s7M3U]
                                                                    of
                                                                    s'_s7M3W
                                                                    { __DEFAULT ->
                                                                          (#,#) [s'_s7M3W
                                                                                 GHC.Tuple.()];
                                                                    };
                                                              };
                                                        };
                                                  };
                                              GHC.ForeignPtr.HaskellFinalizers actions_s7M3X [Occ=Once] ->
                                                  let-no-escape {
                                                    exit_s7M3Y [Occ=OnceL!T[1], Dmd=<L,C(U)>]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               () #)
                                                    [LclId[JoinId(1)],
                                                     Arity=1,
                                                     Str=<S,U>,
                                                     Unf=OtherCon []] =
                                                        sat-only [wild_s7M35] \r [eta_s7M3Z]
                                                            case
                                                                touch# [wild_s7M35 eta_s7M3Z]
                                                            of
                                                            s'_s7M40
                                                            { __DEFAULT ->
                                                                  (#,#) [s'_s7M40 GHC.Tuple.()];
                                                            };
                                                  } in 
                                                    let-no-escape {
                                                      go_s7M41 [Occ=LoopBreakerT[2]]
                                                        :: [GHC.Types.IO ()]
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 () #)
                                                      [LclId[JoinId(2)],
                                                       Arity=2,
                                                       Str=<S,1*U><S,U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [exit_s7M3Y
                                                                    go_s7M41] \r [ds_s7M42
                                                                                  eta_s7M43]
                                                              case ds_s7M42 of {
                                                                [] -> exit_s7M3Y eta_s7M43;
                                                                : y_s7M45 [Occ=Once]
                                                                  ys_s7M46 [Occ=Once] ->
                                                                    case y_s7M45 eta_s7M43 of {
                                                                      (#,#) ipv4_s7M48 [Occ=Once]
                                                                            _ [Occ=Dead] ->
                                                                          go_s7M41
                                                                              ys_s7M46 ipv4_s7M48;
                                                                    };
                                                              };
                                                    } in  go_s7M41 actions_s7M3X ipv2_s7M3I;
                                            };
                                      };
                            } in 
                              case mkWeak# [fo_s7M3q GHC.Tuple.() sat_s7M4a ipv_s7M3D] of {
                                (#,#) ipv2_s7M4c [Occ=Once] _ [Occ=Dead] ->
                                    (#,#) [ipv2_s7M4c GHC.Tuple.()];
                              };
                      };
                };
          GHC.ForeignPtr.PlainPtr _ [Occ=Dead] ->
              GHC.ForeignPtr.addForeignPtrConcFinalizer2;
        };

GHC.ForeignPtr.addForeignPtrConcFinalizer1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Str=<S(LS),1*U(A,1*U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7M4g w1_s7M4h w2_s7M4i]
        case w_s7M4g of {
          GHC.ForeignPtr.ForeignPtr _ [Occ=Dead] ww2_s7M4l [Occ=Once] ->
              GHC.ForeignPtr.$waddForeignPtrConcFinalizer
                  ww2_s7M4l w1_s7M4h w2_s7M4i;
        };

GHC.ForeignPtr.addForeignPtrConcFinalizer
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a -> GHC.Types.IO () -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Str=<S(LS),1*U(A,1*U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.ForeignPtr.addForeignPtrConcFinalizer1 eta_B3 eta_B2 eta_B1;

GHC.ForeignPtr.$wnewConcForeignPtr [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Addr#
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7M4m w_s7M4n w1_s7M4o]
        case newMutVar# [GHC.ForeignPtr.NoFinalizers w1_s7M4o] of {
          (#,#) ipv_s7M4q [Occ=Once] ipv1_s7M4r ->
              let {
                lvl24_s7M4s [Occ=OnceL] :: [GHC.Types.IO ()]
                [LclId, Unf=OtherCon []] =
                    CCCS :! [w_s7M4n GHC.Types.[]]; } in
              let {
                lvl25_s7M4t [Occ=OnceL] :: GHC.ForeignPtr.Finalizers
                [LclId, Unf=OtherCon []] =
                    CCCS GHC.ForeignPtr.HaskellFinalizers! [lvl24_s7M4s]; } in
              let {
                lvl26_s7M4u [Occ=OnceL]
                  :: (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId, Unf=OtherCon []] =
                    CCCS (,)! [lvl25_s7M4t GHC.Types.True]; } in
              let {
                sat_s7M4B [Occ=Once]
                  :: GHC.ForeignPtr.Finalizers
                     -> (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId] =
                    [w_s7M4n lvl26_s7M4u] \r [finalizers_s7M4v]
                        case finalizers_s7M4v of {
                          GHC.ForeignPtr.NoFinalizers -> lvl26_s7M4u;
                          GHC.ForeignPtr.CFinalizers _ [Occ=Dead] ->
                              GHC.ForeignPtr.noMixingError;
                          GHC.ForeignPtr.HaskellFinalizers fs_s7M4y [Occ=Once] ->
                              let {
                                sat_s7M4z [Occ=Once] :: [GHC.Types.IO ()]
                                [LclId] =
                                    CCCS :! [w_s7M4n fs_s7M4y]; } in
                              let {
                                sat_s7M4A [Occ=Once] :: GHC.ForeignPtr.Finalizers
                                [LclId] =
                                    CCCS GHC.ForeignPtr.HaskellFinalizers! [sat_s7M4z];
                              } in  (,) [sat_s7M4A GHC.Types.False];
                        };
              } in 
                case atomicModifyMutVar# [ipv1_s7M4r sat_s7M4B ipv_s7M4q] of {
                  (#,#) ipv2_s7M4D [Occ=Once*] ipv3_s7M4E [Occ=Once!] ->
                      case ipv3_s7M4E of {
                        GHC.Types.False ->
                            let {
                              sat_s7M4G [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                              [LclId] =
                                  CCCS GHC.ForeignPtr.PlainForeignPtr! [ipv1_s7M4r]; } in
                            let {
                              sat_s7M4H [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_s7JPn
                              [LclId] =
                                  CCCS GHC.ForeignPtr.ForeignPtr! [ww_s7M4m sat_s7M4G];
                            } in  (#,#) [ipv2_s7M4D sat_s7M4H];
                        GHC.Types.True ->
                            let {
                              sat_s7M4J [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              [LclId] =
                                  [ipv1_s7M4r] \r [w2_s7M4I]
                                      GHC.ForeignPtr.$wforeignPtrFinalizer ipv1_s7M4r w2_s7M4I;
                            } in 
                              case mkWeak# [ipv1_s7M4r GHC.Tuple.() sat_s7M4J ipv2_s7M4D] of {
                                (#,#) ipv4_s7M4L [Occ=Once] _ [Occ=Dead] ->
                                    let {
                                      sat_s7M4N [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                      [LclId] =
                                          CCCS GHC.ForeignPtr.PlainForeignPtr! [ipv1_s7M4r]; } in
                                    let {
                                      sat_s7M4O [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_s7JPn
                                      [LclId] =
                                          CCCS GHC.ForeignPtr.ForeignPtr! [ww_s7M4m sat_s7M4N];
                                    } in  (#,#) [ipv4_s7M4L sat_s7M4O];
                              };
                      };
                };
        };

GHC.ForeignPtr.newConcForeignPtr1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Ptr.Ptr a
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId, Arity=3, Str=<S(S),1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [w_s7M4P w1_s7M4Q w2_s7M4R]
        case w_s7M4P of {
          GHC.Ptr.Ptr ww1_s7M4T [Occ=Once] ->
              GHC.ForeignPtr.$wnewConcForeignPtr ww1_s7M4T w1_s7M4Q w2_s7M4R;
        };

GHC.ForeignPtr.newConcForeignPtr
  :: forall a.
     GHC.Ptr.Ptr a
     -> GHC.Types.IO () -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Arity=3, Str=<S(S),1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.ForeignPtr.newConcForeignPtr1 eta_B3 eta_B2 eta_B1;

GHC.ForeignPtr.MyWeak :: GHC.Prim.Weak# () -> GHC.ForeignPtr.MyWeak
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.MyWeak [eta_B1];

GHC.ForeignPtr.PlainForeignPtr
  :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.ForeignPtr.Finalizers
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.PlainForeignPtr [eta_B1];

GHC.ForeignPtr.MallocPtr
  :: GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.ForeignPtr.Finalizers
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.ForeignPtr.MallocPtr [eta_B2 eta_B1];

GHC.ForeignPtr.PlainPtr
  :: GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.PlainPtr [eta_B1];

GHC.ForeignPtr.NoFinalizers :: GHC.ForeignPtr.Finalizers
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.ForeignPtr.NoFinalizers! [];

GHC.ForeignPtr.CFinalizers
  :: GHC.Prim.Weak# () -> GHC.ForeignPtr.Finalizers
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.CFinalizers [eta_B1];

GHC.ForeignPtr.HaskellFinalizers
  :: [GHC.Types.IO ()] -> GHC.ForeignPtr.Finalizers
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.HaskellFinalizers [eta_B1];

GHC.ForeignPtr.ForeignPtr
  :: forall a.
     GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents -> GHC.ForeignPtr.ForeignPtr a
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.ForeignPtr.ForeignPtr [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:02:52.952219628 UTC

GHC.ForeignPtr.$WPlainForeignPtr [InlPrag=INLINE[2]]
  :: GHC.IORef.IORef GHC.ForeignPtr.Finalizers
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m1,
 Unf=OtherCon []] =
    [] \r [dt_s7LWY]
        case dt_s7LWY of {
          GHC.STRef.STRef dt_s7LX0 [Occ=Once] ->
              GHC.ForeignPtr.PlainForeignPtr [dt_s7LX0];
        };

GHC.ForeignPtr.$WMallocPtr [InlPrag=INLINE[2]]
  :: GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
     -> GHC.IORef.IORef GHC.ForeignPtr.Finalizers
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>m2,
 Unf=OtherCon []] =
    [] \r [dt_s7LX1 dt_s7LX2]
        case dt_s7LX2 of {
          GHC.STRef.STRef dt_s7LX4 [Occ=Once] ->
              GHC.ForeignPtr.MallocPtr [dt_s7LX1 dt_s7LX4];
        };

lvl_r7KaV :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "undefined"#;

lvl1_r7KaW :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_r7KaV;

GHC.ForeignPtr.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

lvl2_r7KaX :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ForeignPtr.$trModule4;

GHC.ForeignPtr.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ForeignPtr"#;

lvl3_r7KaY :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ForeignPtr.$trModule2;

lvl4_r7KaZ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/ForeignPtr.hs"#;

lvl5_r7Kb0 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl4_r7KaZ;

lvl6_r7Kb1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [214#];

lvl7_r7Kb2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [34#];

lvl8_r7Kb3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [43#];

lvl9_r7Kb4 :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl2_r7KaX
                                           lvl3_r7KaY
                                           lvl5_r7Kb0
                                           lvl6_r7Kb1
                                           lvl7_r7Kb2
                                           lvl6_r7Kb1
                                           lvl8_r7Kb3];

lvl10_r7Kb5 :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl1_r7KaW
                                                  lvl9_r7Kb4
                                                  GHC.Stack.Types.EmptyCallStack];

GHC.ForeignPtr.mallocPlainForeignPtr2 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl10_r7Kb5;

lvl11_r7Kb6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocForeignPtr: size must be >= 0"#;

GHC.ForeignPtr.mallocForeignPtr2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl11_r7Kb6 of sat_s7LX5 {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7LX5;
        };

GHC.ForeignPtr.mallocPlainForeignPtr1
  :: forall a.
     Foreign.Storable.Storable a =>
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=2,
 Str=<S(C(S(S))C(S(S))LLLLLL),U(1*C1(U(U)),1*C1(U(U)),A,A,A,A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s7LX6 void_0E]
        case
            Foreign.Storable.alignment
                $dStorable_s7LX6 GHC.ForeignPtr.mallocPlainForeignPtr2
        of
        { GHC.Types.I# align_s7LX9 [Occ=Once] ->
              case
                  Foreign.Storable.sizeOf
                      $dStorable_s7LX6 GHC.ForeignPtr.mallocPlainForeignPtr2
              of
              { GHC.Types.I# size_s7LXb ->
                    case <# [size_s7LXb 0#] of {
                      __DEFAULT ->
                          case
                              newAlignedPinnedByteArray# [size_s7LXb align_s7LX9 GHC.Prim.void#]
                          of
                          { Unit# ipv1_s7LXf ->
                                let {
                                  sat_s7LXh [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                  [LclId] =
                                      CCCS GHC.ForeignPtr.PlainPtr! [ipv1_s7LXf];
                                } in 
                                  case byteArrayContents# [ipv1_s7LXf] of sat_s7LXg {
                                    __DEFAULT ->
                                        let {
                                          sat_s7LXi [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7IZ0
                                          [LclId] =
                                              CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7LXg sat_s7LXh];
                                        } in  Unit# [sat_s7LXi];
                                  };
                          };
                      1# -> GHC.ForeignPtr.mallocForeignPtr2;
                    };
              };
        };

GHC.ForeignPtr.mallocPlainForeignPtr
  :: forall a.
     Foreign.Storable.Storable a =>
     GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=2,
 Str=<S(C(S(S))C(S(S))LLLLLL),U(1*C1(U(U)),1*C1(U(U)),A,A,A,A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.ForeignPtr.mallocPlainForeignPtr1 eta_B2 GHC.Prim.void#;

lvl12_r7Kb7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocPlainForeignPtrBytes: size must be >= 0"#;

GHC.ForeignPtr.mallocPlainForeignPtrBytes2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl12_r7Kb7 of sat_s7LXk {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7LXk;
        };

GHC.ForeignPtr.mallocPlainForeignPtrBytes1
  :: forall a.
     GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [size_s7LXl void_0E]
        case size_s7LXl of {
          GHC.Types.I# x_s7LXo ->
              case <# [x_s7LXo 0#] of {
                __DEFAULT ->
                    case newPinnedByteArray# [x_s7LXo GHC.Prim.void#] of {
                      Unit# ipv1_s7LXs ->
                          let {
                            sat_s7LXu [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                            [LclId] =
                                CCCS GHC.ForeignPtr.PlainPtr! [ipv1_s7LXs];
                          } in 
                            case byteArrayContents# [ipv1_s7LXs] of sat_s7LXt {
                              __DEFAULT ->
                                  let {
                                    sat_s7LXv [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7IYG
                                    [LclId] =
                                        CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7LXt sat_s7LXu];
                                  } in  Unit# [sat_s7LXv];
                            };
                    };
                1# -> GHC.ForeignPtr.mallocPlainForeignPtrBytes2;
              };
        };

GHC.ForeignPtr.mallocPlainForeignPtrBytes
  :: forall a.
     GHC.Types.Int -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.ForeignPtr.mallocPlainForeignPtrBytes1 eta_B2 GHC.Prim.void#;

lvl13_r7Kb8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocPlainForeignPtrAlignedBytes: size must be >= 0"#;

GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl13_r7Kb8 of sat_s7LXx {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7LXx;
        };

GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1
  :: forall a.
     GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [size_s7LXy _align_s7LXz void_0E]
        case size_s7LXy of {
          GHC.Types.I# x_s7LXC ->
              case <# [x_s7LXC 0#] of {
                __DEFAULT ->
                    case _align_s7LXz of {
                      GHC.Types.I# align_s7LXF [Occ=Once] ->
                          case
                              newAlignedPinnedByteArray# [x_s7LXC align_s7LXF GHC.Prim.void#]
                          of
                          { Unit# ipv1_s7LXI ->
                                let {
                                  sat_s7LXK [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                  [LclId] =
                                      CCCS GHC.ForeignPtr.PlainPtr! [ipv1_s7LXI];
                                } in 
                                  case byteArrayContents# [ipv1_s7LXI] of sat_s7LXJ {
                                    __DEFAULT ->
                                        let {
                                          sat_s7LXL [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7IYd
                                          [LclId] =
                                              CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7LXJ sat_s7LXK];
                                        } in  Unit# [sat_s7LXL];
                                  };
                          };
                    };
                1# -> GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2;
              };
        };

GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes
  :: forall a.
     GHC.Types.Int
     -> GHC.Types.Int -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1
            eta_B3 eta_B2 GHC.Prim.void#;

lvl14_r7Kb9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ForeignPtr: attempt to mix Haskell and C finalizers in the same ForeignPtr"#;

GHC.ForeignPtr.noMixingError :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl14_r7Kb9 of sat_s7LXN {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7LXN;
        };

GHC.ForeignPtr.touchForeignPtr1
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(A,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7LXO void_0E]
        case ds_s7LXO of {
          GHC.ForeignPtr.ForeignPtr _ [Occ=Dead] r_s7LXS [Occ=Once] ->
              case touch# [r_s7LXS GHC.Prim.void#] of s'_s7LXT {
                (##) -> Unit# [GHC.Tuple.()];
              };
        };

GHC.ForeignPtr.touchForeignPtr
  :: forall a. GHC.ForeignPtr.ForeignPtr a -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(A,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.ForeignPtr.touchForeignPtr1 eta_B2 GHC.Prim.void#;

GHC.ForeignPtr.unsafeForeignPtrToPtr
  :: forall a. GHC.ForeignPtr.ForeignPtr a -> GHC.Ptr.Ptr a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)>m,
 Unf=OtherCon []] =
    [] \r [ds_s7LXU]
        case ds_s7LXU of {
          GHC.ForeignPtr.ForeignPtr fo_s7LXW [Occ=Once] _ [Occ=Dead] ->
              GHC.Ptr.Ptr [fo_s7LXW];
        };

GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec
  :: forall a.
     GHC.Types.Int -> GHC.ForeignPtr.ForeignPtr a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(SL),1*U(U,A)><L,1*U>m2,
 Unf=OtherCon []] =
    [] \r [p_s7LXY f_s7LXZ eta_s7LY0]
        case f_s7LXZ of {
          GHC.ForeignPtr.ForeignPtr fo_s7LY2 [Occ=Once] _ [Occ=Dead] ->
              case GHC.Ptr.$w$cshowsPrec fo_s7LY2 eta_s7LY0 of {
                (#,#) ww3_s7LY5 [Occ=Once] ww4_s7LY6 [Occ=Once] ->
                    : [ww3_s7LY5 ww4_s7LY6];
              };
        };

GHC.ForeignPtr.$fShowForeignPtr_$cshow
  :: forall a. GHC.ForeignPtr.ForeignPtr a -> GHC.Base.String
[GblId, Arity=1, Str=<S(SL),1*U(U,A)>m2, Unf=OtherCon []] =
    [] \r [x_s7LY7]
        case x_s7LY7 of {
          GHC.ForeignPtr.ForeignPtr fo_s7LY9 [Occ=Once] _ [Occ=Dead] ->
              case GHC.Ptr.$w$cshowsPrec fo_s7LY9 GHC.Types.[] of {
                (#,#) ww3_s7LYc [Occ=Once] ww4_s7LYd [Occ=Once] ->
                    : [ww3_s7LYc ww4_s7LYd];
              };
        };

GHC.ForeignPtr.$fShowForeignPtr1
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S(SL),1*U(U,A)><L,1*U>m2, Unf=OtherCon []] =
    [] \r [f_s7LYe eta_s7LYf]
        case f_s7LYe of {
          GHC.ForeignPtr.ForeignPtr fo_s7LYh [Occ=Once] _ [Occ=Dead] ->
              case GHC.Ptr.$w$cshowsPrec fo_s7LYh eta_s7LYf of {
                (#,#) ww3_s7LYk [Occ=Once] ww4_s7LYl [Occ=Once] ->
                    : [ww3_s7LYk ww4_s7LYl];
              };
        };

GHC.ForeignPtr.$fShowForeignPtr_$cshowList
  :: forall a. [GHC.ForeignPtr.ForeignPtr a] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s7LYm s_s7LYn]
        GHC.Show.showList__
            GHC.ForeignPtr.$fShowForeignPtr1 ls_s7LYm s_s7LYn;

GHC.ForeignPtr.$fShowForeignPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show (GHC.ForeignPtr.ForeignPtr a)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec
                                    GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                    GHC.ForeignPtr.$fShowForeignPtr_$cshowList];

GHC.ForeignPtr.$fOrdForeignPtr_$ccompare
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [p_s7LYo q_s7LYp]
        case p_s7LYo of {
          GHC.ForeignPtr.ForeignPtr fo_s7LYr _ [Occ=Dead] ->
              case q_s7LYp of {
                GHC.ForeignPtr.ForeignPtr fo1_s7LYu _ [Occ=Dead] ->
                    case ltAddr# [fo_s7LYr fo1_s7LYu] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7LYr fo1_s7LYu] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.EQ [];
                          };
                      1# -> GHC.Types.LT [];
                    };
              };
        };

GHC.ForeignPtr.$fEqForeignPtr_$c==
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [p_s7LYy q_s7LYz]
        case p_s7LYy of {
          GHC.ForeignPtr.ForeignPtr fo_s7LYB [Occ=Once] _ [Occ=Dead] ->
              case q_s7LYz of {
                GHC.ForeignPtr.ForeignPtr fo1_s7LYE [Occ=Once] _ [Occ=Dead] ->
                    case eqAddr# [fo_s7LYB fo1_s7LYE] of sat_s7LYG {
                      __DEFAULT -> tagToEnum# [sat_s7LYG];
                    };
              };
        };

GHC.ForeignPtr.$fEqForeignPtr_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [eta_s7LYH eta1_s7LYI]
        case eta_s7LYH of {
          GHC.ForeignPtr.ForeignPtr fo_s7LYK [Occ=Once] _ [Occ=Dead] ->
              case eta1_s7LYI of {
                GHC.ForeignPtr.ForeignPtr fo1_s7LYN [Occ=Once] _ [Occ=Dead] ->
                    case eqAddr# [fo_s7LYK fo1_s7LYN] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.ForeignPtr.$fEqForeignPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq (GHC.ForeignPtr.ForeignPtr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.ForeignPtr.$fEqForeignPtr_$c==
                                     GHC.ForeignPtr.$fEqForeignPtr_$c/=];

GHC.ForeignPtr.$fOrdForeignPtr_$c<
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [x_s7LYQ y_s7LYR]
        case x_s7LYQ of {
          GHC.ForeignPtr.ForeignPtr fo_s7LYT [Occ=Once] _ [Occ=Dead] ->
              case y_s7LYR of {
                GHC.ForeignPtr.ForeignPtr fo1_s7LYW [Occ=Once] _ [Occ=Dead] ->
                    case ltAddr# [fo_s7LYT fo1_s7LYW] of {
                      __DEFAULT -> GHC.Types.False [];
                      1# -> GHC.Types.True [];
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$c>=
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [x_s7LYZ y_s7LZ0]
        case x_s7LYZ of {
          GHC.ForeignPtr.ForeignPtr fo_s7LZ2 [Occ=Once] _ [Occ=Dead] ->
              case y_s7LZ0 of {
                GHC.ForeignPtr.ForeignPtr fo1_s7LZ5 [Occ=Once] _ [Occ=Dead] ->
                    case ltAddr# [fo_s7LZ2 fo1_s7LZ5] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$c>
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [x_s7LZ8 y_s7LZ9]
        case x_s7LZ8 of {
          GHC.ForeignPtr.ForeignPtr fo_s7LZb _ [Occ=Dead] ->
              case y_s7LZ9 of {
                GHC.ForeignPtr.ForeignPtr fo1_s7LZe _ [Occ=Dead] ->
                    case ltAddr# [fo_s7LZb fo1_s7LZe] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7LZb fo1_s7LZe] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$c<=
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
 Unf=OtherCon []] =
    [] \r [x_s7LZi y_s7LZj]
        case x_s7LZi of {
          GHC.ForeignPtr.ForeignPtr fo_s7LZl _ [Occ=Dead] ->
              case y_s7LZj of {
                GHC.ForeignPtr.ForeignPtr fo1_s7LZo _ [Occ=Dead] ->
                    case ltAddr# [fo_s7LZl fo1_s7LZo] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7LZl fo1_s7LZo] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# -> GHC.Types.True [];
                          };
                      1# -> GHC.Types.True [];
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$cmax
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.ForeignPtr.ForeignPtr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s7LZs y_s7LZt]
        case x_s7LZs of wild_s7LZu {
          GHC.ForeignPtr.ForeignPtr fo_s7LZv _ [Occ=Dead] ->
              case y_s7LZt of wild1_s7LZx {
                GHC.ForeignPtr.ForeignPtr fo1_s7LZy _ [Occ=Dead] ->
                    case ltAddr# [fo_s7LZv fo1_s7LZy] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7LZv fo1_s7LZy] of {
                            __DEFAULT -> wild_s7LZu;
                            1# -> wild1_s7LZx;
                          };
                      1# -> wild1_s7LZx;
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr_$cmin
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.ForeignPtr.ForeignPtr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s7LZC y_s7LZD]
        case x_s7LZC of wild_s7LZE {
          GHC.ForeignPtr.ForeignPtr fo_s7LZF _ [Occ=Dead] ->
              case y_s7LZD of wild1_s7LZH {
                GHC.ForeignPtr.ForeignPtr fo1_s7LZI _ [Occ=Dead] ->
                    case ltAddr# [fo_s7LZF fo1_s7LZI] of {
                      __DEFAULT ->
                          case eqAddr# [fo_s7LZF fo1_s7LZI] of {
                            __DEFAULT -> wild1_s7LZH;
                            1# -> wild_s7LZE;
                          };
                      1# -> wild_s7LZE;
                    };
              };
        };

GHC.ForeignPtr.$fOrdForeignPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Ord (GHC.ForeignPtr.ForeignPtr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.ForeignPtr.$fEqForeignPtr
                                      GHC.ForeignPtr.$fOrdForeignPtr_$ccompare
                                      GHC.ForeignPtr.$fOrdForeignPtr_$c<
                                      GHC.ForeignPtr.$fOrdForeignPtr_$c<=
                                      GHC.ForeignPtr.$fOrdForeignPtr_$c>
                                      GHC.ForeignPtr.$fOrdForeignPtr_$c>=
                                      GHC.ForeignPtr.$fOrdForeignPtr_$cmax
                                      GHC.ForeignPtr.$fOrdForeignPtr_$cmin];

GHC.ForeignPtr.castForeignPtr1
  :: forall a b.
     GHC.ForeignPtr.ForeignPtr a -> GHC.ForeignPtr.ForeignPtr a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [v_s7LZM] v_s7LZM;

GHC.ForeignPtr.castForeignPtr
  :: forall a b.
     GHC.ForeignPtr.ForeignPtr a -> GHC.ForeignPtr.ForeignPtr b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.castForeignPtr1 eta_B1;

GHC.ForeignPtr.plusForeignPtr
  :: forall a b.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.Types.Int -> GHC.ForeignPtr.ForeignPtr b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s7LZN ds1_s7LZO]
        case ds_s7LZN of {
          GHC.ForeignPtr.ForeignPtr addr_s7LZQ [Occ=Once]
                                    c_s7LZR [Occ=Once] ->
              case ds1_s7LZO of {
                GHC.Types.I# d_s7LZT [Occ=Once] ->
                    case plusAddr# [addr_s7LZQ d_s7LZT] of sat_s7LZU {
                      __DEFAULT -> GHC.ForeignPtr.ForeignPtr [sat_s7LZU c_s7LZR];
                    };
              };
        };

GHC.ForeignPtr.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$trModule4];

GHC.ForeignPtr.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$trModule2];

GHC.ForeignPtr.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.ForeignPtr.$trModule3
                                     GHC.ForeignPtr.$trModule1];

$krep_r7Kba :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcRealWorld
                                              GHC.Types.[]];

$krep1_r7Kbb :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep2_r7Kbc :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r7Kbb GHC.Types.[]];

$krep3_r7Kbd :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep2_r7Kbc];

$krep4_r7Kbe :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r7Kbd GHC.Types.[]];

$krep5_r7Kbf :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep4_r7Kbe];

$krep6_r7Kbg :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep7_r7Kbh :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r7Kba GHC.Types.[]];

$krep8_r7Kbi :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcMutableByteArray#
                                              $krep7_r7Kbh];

$krep9_r7Kbj :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWeak#
                                              $krep2_r7Kbc];

$krep10_r7Kbk :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcAddr#
                                              GHC.Types.[]];

GHC.ForeignPtr.$tcFinalizers2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Finalizers"#;

GHC.ForeignPtr.$tcFinalizers1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tcFinalizers2];

GHC.ForeignPtr.$tcFinalizers :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2126386461452460014##
                                    14391791758474672075##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tcFinalizers1
                                    0#
                                    GHC.Types.krep$*];

GHC.ForeignPtr.$tc'NoFinalizers1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcFinalizers
                                              GHC.Types.[]];

GHC.ForeignPtr.$tc'NoFinalizers3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'NoFinalizers"#;

GHC.ForeignPtr.$tc'NoFinalizers2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'NoFinalizers3];

GHC.ForeignPtr.$tc'NoFinalizers :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1940741700794708869##
                                    15606281748314638871##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'NoFinalizers2
                                    0#
                                    GHC.ForeignPtr.$tc'NoFinalizers1];

GHC.ForeignPtr.$tc'CFinalizers1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_r7Kbj
                                         GHC.ForeignPtr.$tc'NoFinalizers1];

GHC.ForeignPtr.$tc'CFinalizers3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'CFinalizers"#;

GHC.ForeignPtr.$tc'CFinalizers2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'CFinalizers3];

GHC.ForeignPtr.$tc'CFinalizers :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5471016724267814004##
                                    11112927960337249170##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'CFinalizers2
                                    0#
                                    GHC.ForeignPtr.$tc'CFinalizers1];

GHC.ForeignPtr.$tc'HaskellFinalizers1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_r7Kbf
                                         GHC.ForeignPtr.$tc'NoFinalizers1];

GHC.ForeignPtr.$tc'HaskellFinalizers3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'HaskellFinalizers"#;

GHC.ForeignPtr.$tc'HaskellFinalizers2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'HaskellFinalizers3];

GHC.ForeignPtr.$tc'HaskellFinalizers :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2766439294378598012##
                                    9182349323511249767##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'HaskellFinalizers2
                                    0#
                                    GHC.ForeignPtr.$tc'HaskellFinalizers1];

$krep11_r7Kbl :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.ForeignPtr.$tc'NoFinalizers1 GHC.Types.[]];

$krep12_r7Kbm :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep11_r7Kbl];

GHC.ForeignPtr.$tcForeignPtrContents2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ForeignPtrContents"#;

GHC.ForeignPtr.$tcForeignPtrContents1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tcForeignPtrContents2];

GHC.ForeignPtr.$tcForeignPtrContents :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2960910307208088010##
                                    1419315288615932334##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tcForeignPtrContents1
                                    0#
                                    GHC.Types.krep$*];

$krep13_r7Kbn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcForeignPtrContents
                                              GHC.Types.[]];

GHC.ForeignPtr.$tc'PlainPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r7Kbi $krep13_r7Kbn];

GHC.ForeignPtr.$tc'PlainPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'PlainPtr"#;

GHC.ForeignPtr.$tc'PlainPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'PlainPtr3];

GHC.ForeignPtr.$tc'PlainPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10386497703892305970##
                                    4483570029522342780##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'PlainPtr2
                                    0#
                                    GHC.ForeignPtr.$tc'PlainPtr1];

GHC.ForeignPtr.$tc'PlainForeignPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_r7Kbm $krep13_r7Kbn];

GHC.ForeignPtr.$tc'PlainForeignPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'PlainForeignPtr"#;

GHC.ForeignPtr.$tc'PlainForeignPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'PlainForeignPtr3];

GHC.ForeignPtr.$tc'PlainForeignPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9658214180323125435##
                                    4797612916438137994##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'PlainForeignPtr2
                                    0#
                                    GHC.ForeignPtr.$tc'PlainForeignPtr1];

GHC.ForeignPtr.$tc'MallocPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r7Kbi
                                         GHC.ForeignPtr.$tc'PlainForeignPtr1];

GHC.ForeignPtr.$tc'MallocPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'MallocPtr"#;

GHC.ForeignPtr.$tc'MallocPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'MallocPtr3];

GHC.ForeignPtr.$tc'MallocPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1358169953258233372##
                                    15155489453511463859##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'MallocPtr2
                                    0#
                                    GHC.ForeignPtr.$tc'MallocPtr1];

GHC.ForeignPtr.$tcForeignPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ForeignPtr"#;

GHC.ForeignPtr.$tcForeignPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tcForeignPtr2];

GHC.ForeignPtr.$tcForeignPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13645276010227069957##
                                    424768606850180054##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tcForeignPtr1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep14_r7Kbo :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep6_r7Kbg GHC.Types.[]];

$krep15_r7Kbp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcForeignPtr
                                              $krep14_r7Kbo];

$krep16_r7Kbq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep13_r7Kbn $krep15_r7Kbp];

GHC.ForeignPtr.$tc'ForeignPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_r7Kbk $krep16_r7Kbq];

GHC.ForeignPtr.$tc'ForeignPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ForeignPtr"#;

GHC.ForeignPtr.$tc'ForeignPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'ForeignPtr3];

GHC.ForeignPtr.$tc'ForeignPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15066988800190837275##
                                    12331496810414125071##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'ForeignPtr2
                                    1#
                                    GHC.ForeignPtr.$tc'ForeignPtr1];

GHC.ForeignPtr.$tcMyWeak2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MyWeak"#;

GHC.ForeignPtr.$tcMyWeak1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tcMyWeak2];

GHC.ForeignPtr.$tcMyWeak :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18176044154139657744##
                                    6003369520845561213##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tcMyWeak1
                                    0#
                                    GHC.Types.krep$*];

$krep17_r7Kbr :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcMyWeak
                                              GHC.Types.[]];

GHC.ForeignPtr.$tc'MyWeak1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_r7Kbj $krep17_r7Kbr];

GHC.ForeignPtr.$tc'MyWeak3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'MyWeak"#;

GHC.ForeignPtr.$tc'MyWeak2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ForeignPtr.$tc'MyWeak3];

GHC.ForeignPtr.$tc'MyWeak :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12419514784912020020##
                                    3312746660203758866##
                                    GHC.ForeignPtr.$trModule
                                    GHC.ForeignPtr.$tc'MyWeak2
                                    0#
                                    GHC.ForeignPtr.$tc'MyWeak1];

GHC.ForeignPtr.newForeignPtr_1
  :: forall a.
     GHC.Ptr.Ptr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7LZV void_0E]
        case ds_s7LZV of {
          GHC.Ptr.Ptr obj_s7LZY [Occ=Once] ->
              case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
                Unit# ipv1_s7M01 [Occ=Once] ->
                    let {
                      sat_s7M02 [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                      [LclId] =
                          CCCS GHC.ForeignPtr.PlainForeignPtr! [ipv1_s7M01]; } in
                    let {
                      sat_s7M03 [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7IU5
                      [LclId] =
                          CCCS GHC.ForeignPtr.ForeignPtr! [obj_s7LZY sat_s7M02];
                    } in  Unit# [sat_s7M03];
              };
        };

GHC.ForeignPtr.newForeignPtr_
  :: forall a.
     GHC.Ptr.Ptr a -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.ForeignPtr.newForeignPtr_1 eta_B2 GHC.Prim.void#;

GHC.ForeignPtr.$winsertCFinalizer [InlPrag=NOUSERINLINE[0],
                                   Occ=LoopBreaker]
  :: forall value.
     GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.ForeignPtr.Finalizers
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> value
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=7,
 Str=<S,U><S,U><S,U><S,U><S,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7M04
           w_s7M05
           w1_s7M06
           w2_s7M07
           w3_s7M08
           w4_s7M09
           void_0E]
        case readMutVar# [ww_s7M04 GHC.Prim.void#] of {
          Unit# ipv1_s7M0d [Occ=Once!] ->
              case ipv1_s7M0d of {
                GHC.ForeignPtr.NoFinalizers ->
                    case mkWeakNoFinalizer# [ww_s7M04 w4_s7M09 GHC.Prim.void#] of {
                      Unit# ipv3_s7M0h ->
                          let {
                            lvl24_s7M0i [Occ=OnceL] :: GHC.ForeignPtr.Finalizers
                            [LclId, Unf=OtherCon []] =
                                CCCS GHC.ForeignPtr.CFinalizers! [ipv3_s7M0h]; } in
                          let {
                            lvl25_s7M0j [Occ=OnceL] :: GHC.ForeignPtr.MyWeak
                            [LclId, Unf=OtherCon []] =
                                CCCS GHC.ForeignPtr.MyWeak! [ipv3_s7M0h]; } in
                          let {
                            lvl26_s7M0k [Occ=OnceL] :: (GHC.ForeignPtr.MyWeak, GHC.Types.Bool)
                            [LclId, Unf=OtherCon []] =
                                CCCS (,)! [lvl25_s7M0j GHC.Types.False]; } in
                          let {
                            lvl27_s7M0l [Occ=OnceL]
                              :: (GHC.ForeignPtr.Finalizers,
                                  (GHC.ForeignPtr.MyWeak, GHC.Types.Bool))
                            [LclId, Unf=OtherCon []] =
                                CCCS (,)! [lvl24_s7M0i lvl26_s7M0k]; } in
                          let {
                            sat_s7M0s [Occ=Once]
                              :: GHC.ForeignPtr.Finalizers
                                 -> (GHC.ForeignPtr.Finalizers,
                                     (GHC.ForeignPtr.MyWeak, GHC.Types.Bool))
                            [LclId] =
                                [lvl27_s7M0l] \r [fin_s7M0m]
                                    case fin_s7M0m of wild1_s7M0n {
                                      GHC.ForeignPtr.NoFinalizers -> lvl27_s7M0l;
                                      GHC.ForeignPtr.CFinalizers w6_s7M0o [Occ=Once] ->
                                          let {
                                            sat_s7M0p [Occ=Once] :: GHC.ForeignPtr.MyWeak
                                            [LclId] =
                                                CCCS GHC.ForeignPtr.MyWeak! [w6_s7M0o]; } in
                                          let {
                                            sat_s7M0q [Occ=Once]
                                              :: (GHC.ForeignPtr.MyWeak, GHC.Types.Bool)
                                            [LclId] =
                                                CCCS (,)! [sat_s7M0p GHC.Types.True];
                                          } in  (,) [wild1_s7M0n sat_s7M0q];
                                      GHC.ForeignPtr.HaskellFinalizers _ [Occ=Dead] ->
                                          GHC.ForeignPtr.noMixingError;
                                    };
                          } in 
                            case atomicModifyMutVar# [ww_s7M04 sat_s7M0s GHC.Prim.void#] of {
                              Unit# ipv5_s7M0v [Occ=Once!] ->
                                  case ipv5_s7M0v of {
                                    (,) weak_s7M0x [Occ=Once*!] needKill_s7M0y [Occ=Once!] ->
                                        let-no-escape {
                                          $w$j_s7M0z [InlPrag=NOUSERINLINE[0],
                                                      Occ=Once*!T[2],
                                                      Dmd=<C(C(S)),1*C1(C1(U(U,U)))>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> GHC.Prim.Weak# ()
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                          [LclId[JoinId(2)],
                                           Arity=2,
                                           Str=<S,U><S,U>,
                                           Unf=OtherCon []] =
                                              sat-only [ww_s7M04
                                                        w_s7M05
                                                        w1_s7M06
                                                        w2_s7M07
                                                        w3_s7M08
                                                        w4_s7M09] \r [void_0E ww1_s7M0B]
                                                  case
                                                      addCFinalizerToWeak# [w_s7M05
                                                                            w3_s7M08
                                                                            w1_s7M06
                                                                            w2_s7M07
                                                                            ww1_s7M0B
                                                                            GHC.Prim.void#]
                                                  of
                                                  { Unit# ipv7_s7M0E [Occ=Once!] ->
                                                        case ipv7_s7M0E of {
                                                          __DEFAULT ->
                                                              GHC.ForeignPtr.$winsertCFinalizer
                                                                  ww_s7M04
                                                                  w_s7M05
                                                                  w1_s7M06
                                                                  w2_s7M07
                                                                  w3_s7M08
                                                                  w4_s7M09
                                                                  GHC.Prim.void#;
                                                          1# -> Unit# [GHC.Tuple.()];
                                                        };
                                                  };
                                        } in 
                                          case needKill_s7M0y of {
                                            GHC.Types.False ->
                                                case weak_s7M0x of {
                                                  GHC.ForeignPtr.MyWeak ww2_s7M0I [Occ=Once] ->
                                                      $w$j_s7M0z GHC.Prim.void# ww2_s7M0I;
                                                };
                                            GHC.Types.True ->
                                                case finalizeWeak# [ipv3_s7M0h GHC.Prim.void#] of {
                                                  (#,#) _ [Occ=Dead] _ [Occ=Dead] ->
                                                      case weak_s7M0x of {
                                                        GHC.ForeignPtr.MyWeak ww2_s7M0O [Occ=Once] ->
                                                            $w$j_s7M0z GHC.Prim.void# ww2_s7M0O;
                                                      };
                                                };
                                          };
                                  };
                            };
                    };
                GHC.ForeignPtr.CFinalizers weak_s7M0P [Occ=Once] ->
                    case
                        addCFinalizerToWeak# [w_s7M05
                                              w3_s7M08
                                              w1_s7M06
                                              w2_s7M07
                                              weak_s7M0P
                                              GHC.Prim.void#]
                    of
                    { Unit# ipv3_s7M0S [Occ=Once!] ->
                          case ipv3_s7M0S of {
                            __DEFAULT ->
                                GHC.ForeignPtr.$winsertCFinalizer
                                    ww_s7M04
                                    w_s7M05
                                    w1_s7M06
                                    w2_s7M07
                                    w3_s7M08
                                    w4_s7M09
                                    GHC.Prim.void#;
                            1# -> Unit# [GHC.Tuple.()];
                          };
                    };
                GHC.ForeignPtr.HaskellFinalizers _ [Occ=Dead] ->
                    GHC.ForeignPtr.noMixingError;
              };
        };

lvl15_r7Kbs :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ForeignPtr: attempt to add a finalizer to a plain pointer"#;

GHC.ForeignPtr.addForeignPtrFinalizer2 :: GHC.Types.IO ()
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl15_r7Kbs of sat_s7M0W {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7M0W;
        };

GHC.ForeignPtr.$waddForeignPtrFinalizerEnv [InlPrag=NOUSERINLINE[0]]
  :: forall env a.
     GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=5,
 Str=<S,U><S,U><S,U><S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7M0X ww1_s7M0Y ww2_s7M0Z ww3_s7M10 void_0E]
        case ww3_s7M10 of wild_s7M12 {
          GHC.ForeignPtr.PlainForeignPtr dt_s7M13 [Occ=Once] ->
              GHC.ForeignPtr.$winsertCFinalizer
                  dt_s7M13
                  ww_s7M0X
                  1#
                  ww1_s7M0Y
                  ww2_s7M0Z
                  GHC.Tuple.()
                  GHC.Prim.void#;
          GHC.ForeignPtr.MallocPtr _ [Occ=Dead] dt_s7M15 [Occ=Once] ->
              GHC.ForeignPtr.$winsertCFinalizer
                  dt_s7M15 ww_s7M0X 1# ww1_s7M0Y ww2_s7M0Z wild_s7M12 GHC.Prim.void#;
          GHC.ForeignPtr.PlainPtr _ [Occ=Dead] ->
              GHC.ForeignPtr.addForeignPtrFinalizer2;
        };

GHC.ForeignPtr.addForeignPtrFinalizerEnv1 [InlPrag=NOUSERINLINE[0]]
  :: forall env a.
     GHC.Ptr.FunPtr
       (GHC.Ptr.Ptr env -> GHC.Ptr.Ptr a -> GHC.Types.IO ())
     -> GHC.Ptr.Ptr env
     -> GHC.ForeignPtr.ForeignPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(SS),1*U(U,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7M18 w1_s7M19 w2_s7M1a void_0E]
        case w_s7M18 of {
          GHC.Ptr.FunPtr ww1_s7M1d [Occ=Once] ->
              case w1_s7M19 of {
                GHC.Ptr.Ptr ww3_s7M1f [Occ=Once] ->
                    case w2_s7M1a of {
                      GHC.ForeignPtr.ForeignPtr ww5_s7M1h [Occ=Once]
                                                ww6_s7M1i [Occ=Once] ->
                          GHC.ForeignPtr.$waddForeignPtrFinalizerEnv
                              ww1_s7M1d ww3_s7M1f ww5_s7M1h ww6_s7M1i GHC.Prim.void#;
                    };
              };
        };

GHC.ForeignPtr.addForeignPtrFinalizerEnv
  :: forall env a.
     GHC.ForeignPtr.FinalizerEnvPtr env a
     -> GHC.Ptr.Ptr env
     -> GHC.ForeignPtr.ForeignPtr a
     -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(SS),1*U(U,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.ForeignPtr.addForeignPtrFinalizerEnv1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.ForeignPtr.$waddForeignPtrFinalizer [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<S,U><S,U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7M1j ww1_s7M1k ww2_s7M1l void_0E]
        case ww2_s7M1l of wild_s7M1n {
          GHC.ForeignPtr.PlainForeignPtr dt_s7M1o [Occ=Once] ->
              GHC.ForeignPtr.$winsertCFinalizer
                  dt_s7M1o ww_s7M1j 0# __NULL ww1_s7M1k GHC.Tuple.() GHC.Prim.void#;
          GHC.ForeignPtr.MallocPtr _ [Occ=Dead] dt_s7M1q [Occ=Once] ->
              GHC.ForeignPtr.$winsertCFinalizer
                  dt_s7M1q ww_s7M1j 0# __NULL ww1_s7M1k wild_s7M1n GHC.Prim.void#;
          GHC.ForeignPtr.PlainPtr _ [Occ=Dead] ->
              GHC.ForeignPtr.addForeignPtrFinalizer2;
        };

GHC.ForeignPtr.addForeignPtrFinalizer1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Ptr.FunPtr (GHC.Ptr.Ptr a -> GHC.Types.IO ())
     -> GHC.ForeignPtr.ForeignPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(SS),1*U(U,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7M1t w1_s7M1u void_0E]
        case w_s7M1t of {
          GHC.Ptr.FunPtr ww1_s7M1x [Occ=Once] ->
              case w1_s7M1u of {
                GHC.ForeignPtr.ForeignPtr ww3_s7M1z [Occ=Once]
                                          ww4_s7M1A [Occ=Once] ->
                    GHC.ForeignPtr.$waddForeignPtrFinalizer
                        ww1_s7M1x ww3_s7M1z ww4_s7M1A GHC.Prim.void#;
              };
        };

GHC.ForeignPtr.addForeignPtrFinalizer
  :: forall a.
     GHC.ForeignPtr.FinalizerPtr a
     -> GHC.ForeignPtr.ForeignPtr a -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(SS),1*U(U,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.ForeignPtr.addForeignPtrFinalizer1
            eta_B3 eta_B2 GHC.Prim.void#;

lvl16_r7Kbt :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocForeignPtrAlignedBytes: size must be >= 0"#;

GHC.ForeignPtr.mallocForeignPtrAlignedBytes2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl16_r7Kbt of sat_s7M1B {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7M1B;
        };

GHC.ForeignPtr.mallocForeignPtrAlignedBytes1
  :: forall a.
     GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [size_s7M1C _align_s7M1D void_0E]
        case size_s7M1C of {
          GHC.Types.I# x_s7M1G ->
              case <# [x_s7M1G 0#] of {
                __DEFAULT ->
                    case _align_s7M1D of {
                      GHC.Types.I# align_s7M1J [Occ=Once] ->
                          case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
                            Unit# ipv1_s7M1M [Occ=Once] ->
                                case
                                    newAlignedPinnedByteArray# [x_s7M1G align_s7M1J GHC.Prim.void#]
                                of
                                { Unit# ipv3_s7M1P ->
                                      let {
                                        sat_s7M1R [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                        [LclId] =
                                            CCCS GHC.ForeignPtr.MallocPtr! [ipv3_s7M1P ipv1_s7M1M];
                                      } in 
                                        case byteArrayContents# [ipv3_s7M1P] of sat_s7M1Q {
                                          __DEFAULT ->
                                              let {
                                                sat_s7M1S [Occ=Once]
                                                  :: GHC.ForeignPtr.ForeignPtr a_a7J06
                                                [LclId] =
                                                    CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7M1Q
                                                                                     sat_s7M1R];
                                              } in  Unit# [sat_s7M1S];
                                        };
                                };
                          };
                    };
                1# -> GHC.ForeignPtr.mallocForeignPtrAlignedBytes2;
              };
        };

GHC.ForeignPtr.mallocForeignPtrAlignedBytes
  :: forall a.
     GHC.Types.Int
     -> GHC.Types.Int -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.ForeignPtr.mallocForeignPtrAlignedBytes1
            eta_B3 eta_B2 GHC.Prim.void#;

lvl17_r7Kbu :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mallocForeignPtrBytes: size must be >= 0"#;

GHC.ForeignPtr.mallocForeignPtrBytes2
  :: forall a. GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl17_r7Kbu of sat_s7M1U {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7M1U;
        };

GHC.ForeignPtr.mallocForeignPtrBytes1
  :: forall a.
     GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [size_s7M1V void_0E]
        case size_s7M1V of {
          GHC.Types.I# x_s7M1Y ->
              case <# [x_s7M1Y 0#] of {
                __DEFAULT ->
                    case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
                      Unit# ipv1_s7M22 [Occ=Once] ->
                          case newPinnedByteArray# [x_s7M1Y GHC.Prim.void#] of {
                            Unit# ipv3_s7M25 ->
                                let {
                                  sat_s7M27 [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                  [LclId] =
                                      CCCS GHC.ForeignPtr.MallocPtr! [ipv3_s7M25 ipv1_s7M22];
                                } in 
                                  case byteArrayContents# [ipv3_s7M25] of sat_s7M26 {
                                    __DEFAULT ->
                                        let {
                                          sat_s7M28 [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_a7J0v
                                          [LclId] =
                                              CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7M26 sat_s7M27];
                                        } in  Unit# [sat_s7M28];
                                  };
                          };
                    };
                1# -> GHC.ForeignPtr.mallocForeignPtrBytes2;
              };
        };

GHC.ForeignPtr.mallocForeignPtrBytes
  :: forall a.
     GHC.Types.Int -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.ForeignPtr.mallocForeignPtrBytes1 eta_B2 GHC.Prim.void#;

lvl18_r7Kbv :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [159#];

lvl19_r7Kbw :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [29#];

lvl20_r7Kbx :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [38#];

lvl21_r7Kby :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl2_r7KaX
                                           lvl3_r7KaY
                                           lvl5_r7Kb0
                                           lvl18_r7Kbv
                                           lvl19_r7Kbw
                                           lvl18_r7Kbv
                                           lvl20_r7Kbx];

lvl22_r7Kbz :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl1_r7KaW
                                                  lvl21_r7Kby
                                                  GHC.Stack.Types.EmptyCallStack];

GHC.ForeignPtr.mallocForeignPtr3 :: forall a. a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl22_r7Kbz;

GHC.ForeignPtr.mallocForeignPtr1
  :: forall a.
     Foreign.Storable.Storable a =>
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId,
 Arity=2,
 Str=<S(C(S(S))C(S(S))LLLLLL),U(1*C1(U(U)),1*C1(U(U)),A,A,A,A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dStorable_s7M2a void_0E]
        case
            Foreign.Storable.alignment
                $dStorable_s7M2a GHC.ForeignPtr.mallocForeignPtr3
        of
        { GHC.Types.I# align_s7M2d [Occ=Once] ->
              case
                  Foreign.Storable.sizeOf
                      $dStorable_s7M2a GHC.ForeignPtr.mallocForeignPtr3
              of
              { GHC.Types.I# size_s7M2f ->
                    case <# [size_s7M2f 0#] of {
                      __DEFAULT ->
                          case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
                            Unit# ipv1_s7M2j [Occ=Once] ->
                                case
                                    newAlignedPinnedByteArray# [size_s7M2f
                                                                align_s7M2d
                                                                GHC.Prim.void#]
                                of
                                { Unit# ipv3_s7M2m ->
                                      let {
                                        sat_s7M2o [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                        [LclId] =
                                            CCCS GHC.ForeignPtr.MallocPtr! [ipv3_s7M2m ipv1_s7M2j];
                                      } in 
                                        case byteArrayContents# [ipv3_s7M2m] of sat_s7M2n {
                                          __DEFAULT ->
                                              let {
                                                sat_s7M2p [Occ=Once]
                                                  :: GHC.ForeignPtr.ForeignPtr a_a7J0U
                                                [LclId] =
                                                    CCCS GHC.ForeignPtr.ForeignPtr! [sat_s7M2n
                                                                                     sat_s7M2o];
                                              } in  Unit# [sat_s7M2p];
                                        };
                                };
                          };
                      1# -> GHC.ForeignPtr.mallocForeignPtr2;
                    };
              };
        };

GHC.ForeignPtr.mallocForeignPtr
  :: forall a.
     Foreign.Storable.Storable a =>
     GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId,
 Arity=2,
 Str=<S(C(S(S))C(S(S))LLLLLL),U(1*C1(U(U)),1*C1(U(U)),A,A,A,A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.ForeignPtr.mallocForeignPtr1 eta_B2 GHC.Prim.void#;

GHC.ForeignPtr.addForeignPtrConcFinalizer3
  :: GHC.ForeignPtr.Finalizers
     -> (GHC.ForeignPtr.Finalizers, GHC.ForeignPtr.Finalizers)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m, Unf=OtherCon []] =
    [] \r [fs_s7M2r] (,) [GHC.ForeignPtr.NoFinalizers fs_s7M2r];

GHC.ForeignPtr.addForeignPtrConcFinalizer4 [Occ=LoopBreaker]
  :: [GHC.Types.IO ()]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7M2s void_0E]
        case ds_s7M2s of {
          [] -> Unit# [GHC.Tuple.()];
          : y_s7M2v [Occ=Once] ys_s7M2w [Occ=Once] ->
              case y_s7M2v GHC.Prim.void# of {
                Unit# _ [Occ=Dead] ->
                    GHC.ForeignPtr.addForeignPtrConcFinalizer4 ys_s7M2w GHC.Prim.void#;
              };
        };

GHC.ForeignPtr.$wforeignPtrFinalizer [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.ForeignPtr.Finalizers
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7M2A void_0E]
        case
            atomicModifyMutVar# [ww_s7M2A
                                 GHC.ForeignPtr.addForeignPtrConcFinalizer3
                                 GHC.Prim.void#]
        of
        { Unit# ipv1_s7M2E [Occ=Once!] ->
              case ipv1_s7M2E of {
                GHC.ForeignPtr.NoFinalizers -> Unit# [GHC.Tuple.()];
                GHC.ForeignPtr.CFinalizers w1_s7M2G [Occ=Once] ->
                    case finalizeWeak# [w1_s7M2G GHC.Prim.void#] of {
                      (#,#) ipv3_s7M2J [Occ=Once!] ipv4_s7M2K [Occ=Once!] ->
                          case ipv3_s7M2J of {
                            __DEFAULT -> Unit# [GHC.Tuple.()];
                            1# -> ipv4_s7M2K GHC.Prim.void#;
                          };
                    };
                GHC.ForeignPtr.HaskellFinalizers actions_s7M2M [Occ=Once] ->
                    GHC.ForeignPtr.addForeignPtrConcFinalizer4
                        actions_s7M2M GHC.Prim.void#;
              };
        };

GHC.ForeignPtr.finalizeForeignPtr2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.IORef.IORef GHC.ForeignPtr.Finalizers
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7M2N void_0E]
        case w_s7M2N of {
          GHC.STRef.STRef ww1_s7M2Q [Occ=Once] ->
              GHC.ForeignPtr.$wforeignPtrFinalizer ww1_s7M2Q GHC.Prim.void#;
        };

GHC.ForeignPtr.finalizeForeignPtr1
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7M2R void_0E]
        case ds_s7M2R of {
          GHC.ForeignPtr.ForeignPtr _ [Occ=Dead] ds2_s7M2V [Occ=Once!] ->
              case ds2_s7M2V of {
                GHC.ForeignPtr.PlainForeignPtr dt_s7M2X [Occ=Once] ->
                    GHC.ForeignPtr.$wforeignPtrFinalizer dt_s7M2X GHC.Prim.void#;
                GHC.ForeignPtr.MallocPtr _ [Occ=Dead] dt_s7M2Z [Occ=Once] ->
                    GHC.ForeignPtr.$wforeignPtrFinalizer dt_s7M2Z GHC.Prim.void#;
                GHC.ForeignPtr.PlainPtr _ [Occ=Dead] -> Unit# [GHC.Tuple.()];
              };
        };

GHC.ForeignPtr.finalizeForeignPtr
  :: forall a. GHC.ForeignPtr.ForeignPtr a -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.ForeignPtr.finalizeForeignPtr1 eta_B2 GHC.Prim.void#;

lvl23_r7KbA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ForeignPtr: attempt to add a finalizer to plain pointer"#;

GHC.ForeignPtr.addForeignPtrConcFinalizer2 :: GHC.Types.IO ()
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl23_r7KbA of sat_s7M31 {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s7M31;
        };

GHC.ForeignPtr.$waddForeignPtrConcFinalizer [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.ForeignPtr.ForeignPtrContents
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7M32 w_s7M33 void_0E]
        case ww_s7M32 of wild_s7M35 {
          GHC.ForeignPtr.PlainForeignPtr dt_s7M36 ->
              let {
                lvl24_s7M37 [Occ=OnceL] :: [GHC.Types.IO ()]
                [LclId, Unf=OtherCon []] =
                    CCCS :! [w_s7M33 GHC.Types.[]]; } in
              let {
                lvl25_s7M38 [Occ=OnceL] :: GHC.ForeignPtr.Finalizers
                [LclId, Unf=OtherCon []] =
                    CCCS GHC.ForeignPtr.HaskellFinalizers! [lvl24_s7M37]; } in
              let {
                lvl26_s7M39 [Occ=OnceL]
                  :: (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId, Unf=OtherCon []] =
                    CCCS (,)! [lvl25_s7M38 GHC.Types.True]; } in
              let {
                sat_s7M3g [Occ=Once]
                  :: GHC.ForeignPtr.Finalizers
                     -> (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId] =
                    [w_s7M33 lvl26_s7M39] \r [finalizers_s7M3a]
                        case finalizers_s7M3a of {
                          GHC.ForeignPtr.NoFinalizers -> lvl26_s7M39;
                          GHC.ForeignPtr.CFinalizers _ [Occ=Dead] ->
                              GHC.ForeignPtr.noMixingError;
                          GHC.ForeignPtr.HaskellFinalizers fs_s7M3d [Occ=Once] ->
                              let {
                                sat_s7M3e [Occ=Once] :: [GHC.Types.IO ()]
                                [LclId] =
                                    CCCS :! [w_s7M33 fs_s7M3d]; } in
                              let {
                                sat_s7M3f [Occ=Once] :: GHC.ForeignPtr.Finalizers
                                [LclId] =
                                    CCCS GHC.ForeignPtr.HaskellFinalizers! [sat_s7M3e];
                              } in  (,) [sat_s7M3f GHC.Types.False];
                        };
              } in 
                case atomicModifyMutVar# [dt_s7M36 sat_s7M3g GHC.Prim.void#] of {
                  Unit# ipv1_s7M3j [Occ=Once!] ->
                      case ipv1_s7M3j of {
                        GHC.Types.False -> Unit# [GHC.Tuple.()];
                        GHC.Types.True ->
                            let {
                              sat_s7M3m [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              [LclId] =
                                  [dt_s7M36] \r [void_0E]
                                      GHC.ForeignPtr.$wforeignPtrFinalizer dt_s7M36 GHC.Prim.void#;
                            } in 
                              case mkWeak# [dt_s7M36 GHC.Tuple.() sat_s7M3m GHC.Prim.void#] of {
                                Unit# _ [Occ=Dead] -> Unit# [GHC.Tuple.()];
                              };
                      };
                };
          GHC.ForeignPtr.MallocPtr fo_s7M3q [Occ=Once] dt_s7M3r ->
              let {
                lvl24_s7M3s [Occ=OnceL] :: [GHC.Types.IO ()]
                [LclId, Unf=OtherCon []] =
                    CCCS :! [w_s7M33 GHC.Types.[]]; } in
              let {
                lvl25_s7M3t [Occ=OnceL] :: GHC.ForeignPtr.Finalizers
                [LclId, Unf=OtherCon []] =
                    CCCS GHC.ForeignPtr.HaskellFinalizers! [lvl24_s7M3s]; } in
              let {
                lvl26_s7M3u [Occ=OnceL]
                  :: (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId, Unf=OtherCon []] =
                    CCCS (,)! [lvl25_s7M3t GHC.Types.True]; } in
              let {
                sat_s7M3B [Occ=Once]
                  :: GHC.ForeignPtr.Finalizers
                     -> (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId] =
                    [w_s7M33 lvl26_s7M3u] \r [finalizers_s7M3v]
                        case finalizers_s7M3v of {
                          GHC.ForeignPtr.NoFinalizers -> lvl26_s7M3u;
                          GHC.ForeignPtr.CFinalizers _ [Occ=Dead] ->
                              GHC.ForeignPtr.noMixingError;
                          GHC.ForeignPtr.HaskellFinalizers fs_s7M3y [Occ=Once] ->
                              let {
                                sat_s7M3z [Occ=Once] :: [GHC.Types.IO ()]
                                [LclId] =
                                    CCCS :! [w_s7M33 fs_s7M3y]; } in
                              let {
                                sat_s7M3A [Occ=Once] :: GHC.ForeignPtr.Finalizers
                                [LclId] =
                                    CCCS GHC.ForeignPtr.HaskellFinalizers! [sat_s7M3z];
                              } in  (,) [sat_s7M3A GHC.Types.False];
                        };
              } in 
                case atomicModifyMutVar# [dt_s7M3r sat_s7M3B GHC.Prim.void#] of {
                  Unit# ipv1_s7M3E [Occ=Once!] ->
                      case ipv1_s7M3E of {
                        GHC.Types.False -> Unit# [GHC.Tuple.()];
                        GHC.Types.True ->
                            let {
                              sat_s7M4a [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              [LclId] =
                                  [wild_s7M35 dt_s7M3r] \r [void_0E]
                                      case
                                          atomicModifyMutVar# [dt_s7M3r
                                                               GHC.ForeignPtr.addForeignPtrConcFinalizer3
                                                               GHC.Prim.void#]
                                      of
                                      { Unit# ipv3_s7M3J [Occ=Once!] ->
                                            case ipv3_s7M3J of {
                                              GHC.ForeignPtr.NoFinalizers ->
                                                  case
                                                      touch# [wild_s7M35 GHC.Prim.void#]
                                                  of
                                                  s'_s7M3L
                                                  { (##) -> Unit# [GHC.Tuple.()];
                                                  };
                                              GHC.ForeignPtr.CFinalizers w2_s7M3M [Occ=Once] ->
                                                  case finalizeWeak# [w2_s7M3M GHC.Prim.void#] of {
                                                    (#,#) ipv5_s7M3P [Occ=Once!]
                                                          ipv6_s7M3Q [Occ=Once!] ->
                                                        case ipv5_s7M3P of {
                                                          __DEFAULT ->
                                                              case
                                                                  touch# [wild_s7M35 GHC.Prim.void#]
                                                              of
                                                              s'_s7M3S
                                                              { (##) -> Unit# [GHC.Tuple.()];
                                                              };
                                                          1# ->
                                                              case ipv6_s7M3Q GHC.Prim.void# of {
                                                                Unit# _ [Occ=Dead] ->
                                                                    case
                                                                        touch# [wild_s7M35
                                                                                GHC.Prim.void#]
                                                                    of
                                                                    s'_s7M3W
                                                                    { (##) -> Unit# [GHC.Tuple.()];
                                                                    };
                                                              };
                                                        };
                                                  };
                                              GHC.ForeignPtr.HaskellFinalizers actions_s7M3X [Occ=Once] ->
                                                  let-no-escape {
                                                    exit_s7M3Y [Occ=OnceL!T[1], Dmd=<L,C(U)>]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               () #)
                                                    [LclId[JoinId(1)],
                                                     Arity=1,
                                                     Str=<S,U>,
                                                     Unf=OtherCon []] =
                                                        sat-only [wild_s7M35] \r [void_0E]
                                                            case
                                                                touch# [wild_s7M35 GHC.Prim.void#]
                                                            of
                                                            s'_s7M40
                                                            { (##) -> Unit# [GHC.Tuple.()];
                                                            };
                                                  } in 
                                                    let-no-escape {
                                                      go_s7M41 [Occ=LoopBreakerT[2]]
                                                        :: [GHC.Types.IO ()]
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 () #)
                                                      [LclId[JoinId(2)],
                                                       Arity=2,
                                                       Str=<S,1*U><S,U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [exit_s7M3Y
                                                                    go_s7M41] \r [ds_s7M42 void_0E]
                                                              case ds_s7M42 of {
                                                                [] -> exit_s7M3Y GHC.Prim.void#;
                                                                : y_s7M45 [Occ=Once]
                                                                  ys_s7M46 [Occ=Once] ->
                                                                    case y_s7M45 GHC.Prim.void# of {
                                                                      Unit# _ [Occ=Dead] ->
                                                                          go_s7M41
                                                                              ys_s7M46
                                                                              GHC.Prim.void#;
                                                                    };
                                                              };
                                                    } in  go_s7M41 actions_s7M3X GHC.Prim.void#;
                                            };
                                      };
                            } in 
                              case mkWeak# [fo_s7M3q GHC.Tuple.() sat_s7M4a GHC.Prim.void#] of {
                                Unit# _ [Occ=Dead] -> Unit# [GHC.Tuple.()];
                              };
                      };
                };
          GHC.ForeignPtr.PlainPtr _ [Occ=Dead] ->
              GHC.ForeignPtr.addForeignPtrConcFinalizer2;
        };

GHC.ForeignPtr.addForeignPtrConcFinalizer1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Str=<S(LS),1*U(A,1*U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7M4g w1_s7M4h void_0E]
        case w_s7M4g of {
          GHC.ForeignPtr.ForeignPtr _ [Occ=Dead] ww2_s7M4l [Occ=Once] ->
              GHC.ForeignPtr.$waddForeignPtrConcFinalizer
                  ww2_s7M4l w1_s7M4h GHC.Prim.void#;
        };

GHC.ForeignPtr.addForeignPtrConcFinalizer
  :: forall a.
     GHC.ForeignPtr.ForeignPtr a -> GHC.Types.IO () -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Str=<S(LS),1*U(A,1*U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.ForeignPtr.addForeignPtrConcFinalizer1
            eta_B3 eta_B2 GHC.Prim.void#;

GHC.ForeignPtr.$wnewConcForeignPtr [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Addr#
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7M4m w_s7M4n void_0E]
        case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
          Unit# ipv1_s7M4r ->
              let {
                lvl24_s7M4s [Occ=OnceL] :: [GHC.Types.IO ()]
                [LclId, Unf=OtherCon []] =
                    CCCS :! [w_s7M4n GHC.Types.[]]; } in
              let {
                lvl25_s7M4t [Occ=OnceL] :: GHC.ForeignPtr.Finalizers
                [LclId, Unf=OtherCon []] =
                    CCCS GHC.ForeignPtr.HaskellFinalizers! [lvl24_s7M4s]; } in
              let {
                lvl26_s7M4u [Occ=OnceL]
                  :: (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId, Unf=OtherCon []] =
                    CCCS (,)! [lvl25_s7M4t GHC.Types.True]; } in
              let {
                sat_s7M4B [Occ=Once]
                  :: GHC.ForeignPtr.Finalizers
                     -> (GHC.ForeignPtr.Finalizers, GHC.Types.Bool)
                [LclId] =
                    [w_s7M4n lvl26_s7M4u] \r [finalizers_s7M4v]
                        case finalizers_s7M4v of {
                          GHC.ForeignPtr.NoFinalizers -> lvl26_s7M4u;
                          GHC.ForeignPtr.CFinalizers _ [Occ=Dead] ->
                              GHC.ForeignPtr.noMixingError;
                          GHC.ForeignPtr.HaskellFinalizers fs_s7M4y [Occ=Once] ->
                              let {
                                sat_s7M4z [Occ=Once] :: [GHC.Types.IO ()]
                                [LclId] =
                                    CCCS :! [w_s7M4n fs_s7M4y]; } in
                              let {
                                sat_s7M4A [Occ=Once] :: GHC.ForeignPtr.Finalizers
                                [LclId] =
                                    CCCS GHC.ForeignPtr.HaskellFinalizers! [sat_s7M4z];
                              } in  (,) [sat_s7M4A GHC.Types.False];
                        };
              } in 
                case atomicModifyMutVar# [ipv1_s7M4r sat_s7M4B GHC.Prim.void#] of {
                  Unit# ipv3_s7M4E [Occ=Once!] ->
                      case ipv3_s7M4E of {
                        GHC.Types.False ->
                            let {
                              sat_s7M4G [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                              [LclId] =
                                  CCCS GHC.ForeignPtr.PlainForeignPtr! [ipv1_s7M4r]; } in
                            let {
                              sat_s7M4H [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_s7JPn
                              [LclId] =
                                  CCCS GHC.ForeignPtr.ForeignPtr! [ww_s7M4m sat_s7M4G];
                            } in  Unit# [sat_s7M4H];
                        GHC.Types.True ->
                            let {
                              sat_s7M4J [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              [LclId] =
                                  [ipv1_s7M4r] \r [void_0E]
                                      GHC.ForeignPtr.$wforeignPtrFinalizer
                                          ipv1_s7M4r GHC.Prim.void#;
                            } in 
                              case
                                  mkWeak# [ipv1_s7M4r GHC.Tuple.() sat_s7M4J GHC.Prim.void#]
                              of
                              { Unit# _ [Occ=Dead] ->
                                    let {
                                      sat_s7M4N [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                                      [LclId] =
                                          CCCS GHC.ForeignPtr.PlainForeignPtr! [ipv1_s7M4r]; } in
                                    let {
                                      sat_s7M4O [Occ=Once] :: GHC.ForeignPtr.ForeignPtr a_s7JPn
                                      [LclId] =
                                          CCCS GHC.ForeignPtr.ForeignPtr! [ww_s7M4m sat_s7M4N];
                                    } in  Unit# [sat_s7M4O];
                              };
                      };
                };
        };

GHC.ForeignPtr.newConcForeignPtr1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Ptr.Ptr a
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.ForeignPtr.ForeignPtr a #)
[GblId, Arity=3, Str=<S(S),1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [w_s7M4P w1_s7M4Q void_0E]
        case w_s7M4P of {
          GHC.Ptr.Ptr ww1_s7M4T [Occ=Once] ->
              GHC.ForeignPtr.$wnewConcForeignPtr
                  ww1_s7M4T w1_s7M4Q GHC.Prim.void#;
        };

GHC.ForeignPtr.newConcForeignPtr
  :: forall a.
     GHC.Ptr.Ptr a
     -> GHC.Types.IO () -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr a)
[GblId, Arity=3, Str=<S(S),1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.ForeignPtr.newConcForeignPtr1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.ForeignPtr.MyWeak :: GHC.Prim.Weak# () -> GHC.ForeignPtr.MyWeak
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.MyWeak [eta_B1];

GHC.ForeignPtr.PlainForeignPtr
  :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.ForeignPtr.Finalizers
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.PlainForeignPtr [eta_B1];

GHC.ForeignPtr.MallocPtr
  :: GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.ForeignPtr.Finalizers
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.ForeignPtr.MallocPtr [eta_B2 eta_B1];

GHC.ForeignPtr.PlainPtr
  :: GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
     -> GHC.ForeignPtr.ForeignPtrContents
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.PlainPtr [eta_B1];

GHC.ForeignPtr.NoFinalizers :: GHC.ForeignPtr.Finalizers
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.ForeignPtr.NoFinalizers! [];

GHC.ForeignPtr.CFinalizers
  :: GHC.Prim.Weak# () -> GHC.ForeignPtr.Finalizers
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.CFinalizers [eta_B1];

GHC.ForeignPtr.HaskellFinalizers
  :: [GHC.Types.IO ()] -> GHC.ForeignPtr.Finalizers
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.ForeignPtr.HaskellFinalizers [eta_B1];

GHC.ForeignPtr.ForeignPtr
  :: forall a.
     GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents -> GHC.ForeignPtr.ForeignPtr a
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.ForeignPtr.ForeignPtr [eta_B2 eta_B1];

