
==================== Pre unarise: ====================
2018-03-16 16:11:12.909816377 UTC

GHC.StaticPtr.fromStaticPtr [InlPrag=INLINE]
  :: forall (p :: * -> *).
     GHC.StaticPtr.IsStatic p =>
     forall a. GHC.StaticPtr.StaticPtr a -> p a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_sfvlJ] v_sfvlJ;

GHC.StaticPtr.$fIsStaticStaticPtr [InlPrag=INLINE (sat-args=0)]
  :: GHC.StaticPtr.IsStatic GHC.StaticPtr.StaticPtr
[GblId[DFunId(nt)],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.id eta_B1;

GHC.StaticPtr.$fShowStaticPtrInfo6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "StaticPtrInfo {"#;

GHC.StaticPtr.$fShowStaticPtrInfo5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "spInfoUnitId = "#;

GHC.StaticPtr.$fShowStaticPtrInfo4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "spInfoModuleName = "#;

GHC.StaticPtr.$fShowStaticPtrInfo3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "spInfoSrcLoc = "#;

GHC.StaticPtr.$fShowStaticPtrInfo2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

GHC.StaticPtr.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Base.String
     -> GHC.Base.String
     -> (GHC.Types.Int, GHC.Types.Int)
     -> GHC.Base.String
     -> GHC.Base.String
[GblId,
 Arity=5,
 Str=<S,U><L,1*U><L,1*U><L,1*U(U(U),U(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sfvlK ww1_sfvlL ww2_sfvlM ww3_sfvlN w_sfvlO]
        let {
          p_sfvlP [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [ww1_sfvlL ww2_sfvlM ww3_sfvlN] \r [x_sfvlQ]
                  let {
                    sat_sfvmo [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww1_sfvlL ww2_sfvlM ww3_sfvlN x_sfvlQ] \u []
                            let {
                              sat_sfvmm [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [ww1_sfvlL ww2_sfvlM ww3_sfvlN x_sfvlQ] \u []
                                      let {
                                        sat_sfvmk [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww2_sfvlM ww3_sfvlN x_sfvlQ] \u []
                                                let {
                                                  sat_sfvmj [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [ww2_sfvlM ww3_sfvlN x_sfvlQ] \s []
                                                          let {
                                                            sat_sfvmh [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [ww2_sfvlM ww3_sfvlN x_sfvlQ] \u []
                                                                    let {
                                                                      sat_sfvmf [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [ww3_sfvlN x_sfvlQ] \u []
                                                                              let {
                                                                                sat_sfvme [Occ=Once,
                                                                                           Dmd=<L,1*U>]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    [ww3_sfvlN
                                                                                     x_sfvlQ] \s []
                                                                                        let {
                                                                                          sat_sfvmd [Occ=Once]
                                                                                            :: [GHC.Types.Char]
                                                                                          [LclId] =
                                                                                              [ww3_sfvlN
                                                                                               x_sfvlQ] \u []
                                                                                                  case
                                                                                                      ww3_sfvlN
                                                                                                  of
                                                                                                  { (,) ww5_sfvlS [Occ=OnceL!]
                                                                                                        ww6_sfvlT [Occ=OnceL!] ->
                                                                                                        let {
                                                                                                          sat_sfvmc [Occ=Once]
                                                                                                            :: [GHC.Types.Char]
                                                                                                          [LclId] =
                                                                                                              [x_sfvlQ
                                                                                                               ww5_sfvlS
                                                                                                               ww6_sfvlT] \u []
                                                                                                                  let {
                                                                                                                    sat_sfvma [Occ=Once]
                                                                                                                      :: [GHC.Types.Char]
                                                                                                                    [LclId] =
                                                                                                                        [x_sfvlQ] \u []
                                                                                                                            GHC.CString.unpackAppendCString#
                                                                                                                                GHC.StaticPtr.$fShowStaticPtrInfo2
                                                                                                                                x_sfvlQ; } in
                                                                                                                  let {
                                                                                                                    sat_sfvmb [Occ=Once]
                                                                                                                      :: GHC.Base.String
                                                                                                                    [LclId] =
                                                                                                                        CCCS :! [GHC.Show.$fShow(,)2
                                                                                                                                 sat_sfvma]; } in
                                                                                                                  let {
                                                                                                                    sat_sfvm7 [Occ=Once]
                                                                                                                      :: GHC.Show.ShowS
                                                                                                                    [LclId] =
                                                                                                                        [ww6_sfvlT] \r [w2_sfvm1]
                                                                                                                            case
                                                                                                                                ww6_sfvlT
                                                                                                                            of
                                                                                                                            { GHC.Types.I# ww8_sfvm3 [Occ=Once] ->
                                                                                                                                  case
                                                                                                                                      GHC.Show.$wshowSignedInt
                                                                                                                                          0#
                                                                                                                                          ww8_sfvm3
                                                                                                                                          w2_sfvm1
                                                                                                                                  of
                                                                                                                                  { (#,#) ww10_sfvm5 [Occ=Once]
                                                                                                                                          ww11_sfvm6 [Occ=Once] ->
                                                                                                                                        : [ww10_sfvm5
                                                                                                                                           ww11_sfvm6];
                                                                                                                                  };
                                                                                                                            }; } in
                                                                                                                  let {
                                                                                                                    sat_sfvm8 [Occ=Once]
                                                                                                                      :: [GHC.Show.ShowS]
                                                                                                                    [LclId] =
                                                                                                                        CCCS :! [sat_sfvm7
                                                                                                                                 GHC.Types.[]]; } in
                                                                                                                  let {
                                                                                                                    sat_sfvm0 [Occ=Once]
                                                                                                                      :: GHC.Show.ShowS
                                                                                                                    [LclId] =
                                                                                                                        [ww5_sfvlS] \r [w2_sfvlU]
                                                                                                                            case
                                                                                                                                ww5_sfvlS
                                                                                                                            of
                                                                                                                            { GHC.Types.I# ww8_sfvlW [Occ=Once] ->
                                                                                                                                  case
                                                                                                                                      GHC.Show.$wshowSignedInt
                                                                                                                                          0#
                                                                                                                                          ww8_sfvlW
                                                                                                                                          w2_sfvlU
                                                                                                                                  of
                                                                                                                                  { (#,#) ww10_sfvlY [Occ=Once]
                                                                                                                                          ww11_sfvlZ [Occ=Once] ->
                                                                                                                                        : [ww10_sfvlY
                                                                                                                                           ww11_sfvlZ];
                                                                                                                                  };
                                                                                                                            }; } in
                                                                                                                  let {
                                                                                                                    sat_sfvm9 [Occ=Once]
                                                                                                                      :: [GHC.Base.String
                                                                                                                          -> GHC.Base.String]
                                                                                                                    [LclId] =
                                                                                                                        CCCS :! [sat_sfvm0
                                                                                                                                 sat_sfvm8];
                                                                                                                  } in 
                                                                                                                    GHC.Show.$fShow(,)_go1
                                                                                                                        sat_sfvm9
                                                                                                                        sat_sfvmb;
                                                                                                        } in 
                                                                                                          : [GHC.Show.$fShow(,)4
                                                                                                             sat_sfvmc];
                                                                                                  };
                                                                                        } in 
                                                                                          GHC.CString.unpackAppendCString#
                                                                                              GHC.StaticPtr.$fShowStaticPtrInfo3
                                                                                              sat_sfvmd;
                                                                              } in 
                                                                                GHC.Base.++
                                                                                    GHC.Show.showCommaSpace1
                                                                                    sat_sfvme; } in
                                                                    let {
                                                                      sat_sfvmg [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   sat_sfvmf];
                                                                    } in 
                                                                      GHC.Show.showLitString
                                                                          ww2_sfvlM sat_sfvmg; } in
                                                          let {
                                                            sat_sfvmi [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)3
                                                                         sat_sfvmh];
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                GHC.StaticPtr.$fShowStaticPtrInfo4
                                                                sat_sfvmi;
                                                } in 
                                                  GHC.Base.++
                                                      GHC.Show.showCommaSpace1 sat_sfvmj; } in
                                      let {
                                        sat_sfvml [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)3 sat_sfvmk];
                                      } in  GHC.Show.showLitString ww1_sfvlL sat_sfvml; } in
                            let {
                              sat_sfvmn [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  CCCS :! [GHC.Show.$fShow(,)3 sat_sfvmm];
                            } in 
                              GHC.CString.unpackAppendCString#
                                  GHC.StaticPtr.$fShowStaticPtrInfo5 sat_sfvmn;
                  } in 
                    GHC.CString.unpackAppendCString#
                        GHC.StaticPtr.$fShowStaticPtrInfo6 sat_sfvmo;
        } in 
          case >=# [ww_sfvlK 11#] of {
            __DEFAULT -> p_sfvlP w_sfvlO;
            1# ->
                let {
                  sat_sfvmr [Occ=Once] :: [GHC.Types.Char]
                  [LclId] =
                      [w_sfvlO p_sfvlP] \u []
                          let {
                            sat_sfvmq [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)2 w_sfvlO];
                          } in  p_sfvlP sat_sfvmq;
                } in  : [GHC.Show.$fShow(,)4 sat_sfvmr];
          };

GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.StaticPtr.StaticPtrInfo -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U,1*U(U(U),U(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sfvms w1_sfvmt w2_sfvmu]
        case w_sfvms of {
          GHC.Types.I# ww1_sfvmw [Occ=Once] ->
              case w1_sfvmt of {
                GHC.StaticPtr.StaticPtrInfo ww3_sfvmy [Occ=Once]
                                            ww4_sfvmz [Occ=Once]
                                            ww5_sfvmA [Occ=Once] ->
                    GHC.StaticPtr.$w$cshowsPrec
                        ww1_sfvmw ww3_sfvmy ww4_sfvmz ww5_sfvmA w2_sfvmu;
              };
        };

GHC.StaticPtr.$fShowStaticPtrInfo7 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.StaticPtr.$fShowStaticPtrInfo_$cshow
  :: GHC.StaticPtr.StaticPtrInfo -> GHC.Base.String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U,1*U,1*U(U(U),U(U)))>,
 Unf=OtherCon []] =
    [] \r [x_sfvmB]
        case x_sfvmB of {
          GHC.StaticPtr.StaticPtrInfo ww1_sfvmD [Occ=Once]
                                      ww2_sfvmE [Occ=Once]
                                      ww3_sfvmF [Occ=Once] ->
              GHC.StaticPtr.$w$cshowsPrec
                  0# ww1_sfvmD ww2_sfvmE ww3_sfvmF GHC.Types.[];
        };

GHC.StaticPtr.$fShowStaticPtrInfo1
  :: GHC.StaticPtr.StaticPtrInfo -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U(1*U,1*U,1*U(U(U),U(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sfvmG w1_sfvmH]
        case w_sfvmG of {
          GHC.StaticPtr.StaticPtrInfo ww1_sfvmJ [Occ=Once]
                                      ww2_sfvmK [Occ=Once]
                                      ww3_sfvmL [Occ=Once] ->
              GHC.StaticPtr.$w$cshowsPrec
                  0# ww1_sfvmJ ww2_sfvmK ww3_sfvmL w1_sfvmH;
        };

GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList
  :: [GHC.StaticPtr.StaticPtrInfo] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sfvmM s_sfvmN]
        GHC.Show.showList__
            GHC.StaticPtr.$fShowStaticPtrInfo1 ls_sfvmM s_sfvmN;

GHC.StaticPtr.$fShowStaticPtrInfo [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.StaticPtr.StaticPtrInfo
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec
                                    GHC.StaticPtr.$fShowStaticPtrInfo_$cshow
                                    GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList];

GHC.StaticPtr.spInfoSrcLoc
  :: GHC.StaticPtr.StaticPtrInfo -> (GHC.Types.Int, GHC.Types.Int)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLS),1*U(A,A,1*U(U,U))>m,
 Unf=OtherCon []] =
    [] \r [ds_sfvmO]
        case ds_sfvmO of {
          GHC.StaticPtr.StaticPtrInfo _ [Occ=Dead]
                                      _ [Occ=Dead]
                                      ds3_sfvmS [Occ=Once] ->
              ds3_sfvmS;
        };

GHC.StaticPtr.spInfoModuleName
  :: GHC.StaticPtr.StaticPtrInfo -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),1*U(A,1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sfvmT]
        case ds_sfvmT of {
          GHC.StaticPtr.StaticPtrInfo _ [Occ=Dead]
                                      ds2_sfvmW [Occ=Once]
                                      _ [Occ=Dead] ->
              ds2_sfvmW;
        };

GHC.StaticPtr.spInfoUnitId
  :: GHC.StaticPtr.StaticPtrInfo -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),1*U(1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sfvmY]
        case ds_sfvmY of {
          GHC.StaticPtr.StaticPtrInfo ds1_sfvn0 [Occ=Once]
                                      _ [Occ=Dead]
                                      _ [Occ=Dead] ->
              ds1_sfvn0;
        };

GHC.StaticPtr.deRefStaticPtr
  :: forall a. GHC.StaticPtr.StaticPtr a -> a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLS),1*U(A,A,A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_sfvn3]
        case ds_sfvn3 of {
          GHC.StaticPtr.StaticPtr _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  v_sfvn8 [Occ=Once] ->
              v_sfvn8;
        };

GHC.StaticPtr.staticKey
  :: forall a. GHC.StaticPtr.StaticPtr a -> GHC.StaticPtr.StaticKey
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SSLL),1*U(U,U,A,A)>m,
 Unf=OtherCon []] =
    [] \r [ds_sfvn9]
        case ds_sfvn9 of {
          GHC.StaticPtr.StaticPtr w0_sfvnb [Occ=Once]
                                  w1_sfvnc [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              GHC.Fingerprint.Type.Fingerprint [w0_sfvnb w1_sfvnc];
        };

GHC.StaticPtr.staticPtrInfo
  :: forall a.
     GHC.StaticPtr.StaticPtr a -> GHC.StaticPtr.StaticPtrInfo
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSL),1*U(A,A,1*U(U,U,U),A)>m,
 Unf=OtherCon []] =
    [] \r [ds_sfvnf]
        case ds_sfvnf of {
          GHC.StaticPtr.StaticPtr _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  n_sfvnj [Occ=Once]
                                  _ [Occ=Dead] ->
              n_sfvnj;
        };

GHC.StaticPtr.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.StaticPtr.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$trModule4];

GHC.StaticPtr.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.StaticPtr"#;

GHC.StaticPtr.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$trModule2];

GHC.StaticPtr.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.StaticPtr.$trModule3
                                     GHC.StaticPtr.$trModule1];

$krep_rfvlo :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep1_rfvlp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep2_rfvlq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep3_rfvlr :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rfvlp GHC.Types.[]];

$krep4_rfvls :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep3_rfvlr];

$krep5_rfvlt :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rfvlo GHC.Types.[]];

$krep6_rfvlu :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rfvlo $krep5_rfvlt];

$krep7_rfvlv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep6_rfvlu];

GHC.StaticPtr.$tcIsStatic1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*Arr*
                                         $krep2_rfvlq];

$krep8_rfvlw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep9_rfvlx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord#
                                              GHC.Types.[]];

GHC.StaticPtr.$tcStaticPtrInfo2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "StaticPtrInfo"#;

GHC.StaticPtr.$tcStaticPtrInfo1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tcStaticPtrInfo2];

GHC.StaticPtr.$tcStaticPtrInfo :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9809180260958205610##
                                    5820027882667808380##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tcStaticPtrInfo1
                                    0#
                                    GHC.Types.krep$*];

$krep10_rfvly :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.StaticPtr.$tcStaticPtrInfo
                                              GHC.Types.[]];

$krep11_rfvlz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_rfvlv $krep10_rfvly];

$krep12_rfvlA :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rfvls $krep11_rfvlz];

GHC.StaticPtr.$tc'StaticPtrInfo1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rfvls $krep12_rfvlA];

GHC.StaticPtr.$tc'StaticPtrInfo3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'StaticPtrInfo"#;

GHC.StaticPtr.$tc'StaticPtrInfo2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tc'StaticPtrInfo3];

GHC.StaticPtr.$tc'StaticPtrInfo :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12332739532642204119##
                                    17636067641148941699##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tc'StaticPtrInfo2
                                    0#
                                    GHC.StaticPtr.$tc'StaticPtrInfo1];

GHC.StaticPtr.$tcStaticPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "StaticPtr"#;

GHC.StaticPtr.$tcStaticPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tcStaticPtr2];

GHC.StaticPtr.$tcStaticPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6538784347774135987##
                                    451387415853290179##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tcStaticPtr1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep13_rfvlB :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep8_rfvlw GHC.Types.[]];

$krep14_rfvlC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.StaticPtr.$tcStaticPtr
                                              $krep13_rfvlB];

$krep15_rfvlD :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rfvlw $krep14_rfvlC];

$krep16_rfvlE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_rfvly $krep15_rfvlD];

$krep17_rfvlF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_rfvlx $krep16_rfvlE];

GHC.StaticPtr.$tc'StaticPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_rfvlx $krep17_rfvlF];

GHC.StaticPtr.$tc'StaticPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'StaticPtr"#;

GHC.StaticPtr.$tc'StaticPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tc'StaticPtr3];

GHC.StaticPtr.$tc'StaticPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3211798574336347514##
                                    9816765169815661376##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tc'StaticPtr2
                                    1#
                                    GHC.StaticPtr.$tc'StaticPtr1];

GHC.StaticPtr.$tcIsStatic3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IsStatic"#;

GHC.StaticPtr.$tcIsStatic2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tcIsStatic3];

GHC.StaticPtr.$tcIsStatic :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12653381617957437053##
                                    3253287492145771790##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tcIsStatic2
                                    0#
                                    GHC.StaticPtr.$tcIsStatic1];

GHC.StaticPtr.$wunsafeLookupStaticPtr [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe (GHC.StaticPtr.StaticPtr a) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sfvnl ww1_sfvnm w_sfvnn]
        let {
          vals_sfvno [Occ=OnceL] :: GHC.Word.Word64
          [LclId, Unf=OtherCon []] =
              CCCS GHC.Word.W64#! [ww_sfvnl]; } in
        let {
          vals1_sfvnp [Occ=OnceL] :: GHC.Word.Word64
          [LclId, Unf=OtherCon []] =
              CCCS GHC.Word.W64#! [ww1_sfvnm]; } in
        let {
          vals2_sfvnq [Occ=OnceL] :: [GHC.Word.Word64]
          [LclId, Unf=OtherCon []] =
              CCCS :! [vals1_sfvnp GHC.Types.[]]; } in
        let {
          vals3_sfvnr [Dmd=<S,U>] :: [GHC.Word.Word64]
          [LclId, Unf=OtherCon []] =
              CCCS :! [vals_sfvno vals2_sfvnq];
        } in 
          case GHC.List.$wlenAcc vals3_sfvnr 0# of ww2_sfvns {
            __DEFAULT ->
                case *# [ww2_sfvns 8#] of sat_sfvnt {
                  __DEFAULT ->
                      case newAlignedPinnedByteArray# [sat_sfvnt 8# w_sfvnn] of {
                        (#,#) ipv_sfvnv [Occ=Once] ipv1_sfvnw [Occ=Once] ->
                            case unsafeFreezeByteArray# [ipv1_sfvnw ipv_sfvnv] of {
                              (#,#) ipv2_sfvny [Occ=Once] ipv3_sfvnz ->
                                  case byteArrayContents# [ipv3_sfvnz] of ptr_sfvnA [Dmd=<S,U>] {
                                    __DEFAULT ->
                                        let-no-escape {
                                          exit_sfvnB [Occ=OnceL!T[1], Dmd=<C(S),C(U(U,U))>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     GHC.Base.Maybe
                                                       (GHC.StaticPtr.StaticPtr a_sfvff) #)
                                          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                              sat-only [ipv3_sfvnz ptr_sfvnA] \r [eta1_sfvnC]
                                                  case
                                                      __pkg_ccall base-4.11.0.0 [ptr_sfvnA
                                                                                 eta1_sfvnC]
                                                  of
                                                  { (#,#) ds_sfvnF [Occ=Once] ds1_sfvnG ->
                                                        case addrToAny# [ds1_sfvnG] of {
                                                          Unit# spe_sfvnI [Occ=Once] ->
                                                              case
                                                                  touch# [ipv3_sfvnz ds_sfvnF]
                                                              of
                                                              s4_sfvnJ
                                                              { __DEFAULT ->
                                                                    case
                                                                        eqAddr# [ds1_sfvnG __NULL]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          let {
                                                                            sat_sfvnL [Occ=Once]
                                                                              :: GHC.Base.Maybe
                                                                                   (GHC.StaticPtr.StaticPtr
                                                                                      a_sfvff)
                                                                            [LclId] =
                                                                                CCCS GHC.Base.Just! [spe_sfvnI];
                                                                          } in 
                                                                            (#,#) [s4_sfvnJ
                                                                                   sat_sfvnL];
                                                                      1# ->
                                                                          (#,#) [s4_sfvnJ
                                                                                 GHC.Base.Nothing];
                                                                    };
                                                              };
                                                        };
                                                  };
                                        } in 
                                          let-no-escape {
                                            go_sfvnM [Occ=LoopBreakerT[3]]
                                              :: [GHC.Word.Word64]
                                                 -> GHC.Prim.Int#
                                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Base.Maybe
                                                         (GHC.StaticPtr.StaticPtr a_sfvff) #)
                                            [LclId[JoinId(3)],
                                             Arity=3,
                                             Str=<S,1*U><L,U><S,U>,
                                             Unf=OtherCon []] =
                                                sat-only [ptr_sfvnA
                                                          exit_sfvnB
                                                          go_sfvnM] \r [ds_sfvnN
                                                                        ds1_sfvnO
                                                                        eta1_sfvnP]
                                                    case ds_sfvnN of {
                                                      [] -> exit_sfvnB eta1_sfvnP;
                                                      : val_sfvnR [Occ=Once!]
                                                        vals4_sfvnS [Occ=Once] ->
                                                          case val_sfvnR of {
                                                            GHC.Word.W64# x_sfvnU [Occ=Once] ->
                                                                case
                                                                    writeWord64OffAddr# [ptr_sfvnA
                                                                                         ds1_sfvnO
                                                                                         x_sfvnU
                                                                                         eta1_sfvnP]
                                                                of
                                                                s2_sfvnV
                                                                { __DEFAULT ->
                                                                      case
                                                                          +# [ds1_sfvnO 1#]
                                                                      of
                                                                      sat_sfvnW
                                                                      { __DEFAULT ->
                                                                            go_sfvnM
                                                                                vals4_sfvnS
                                                                                sat_sfvnW
                                                                                s2_sfvnV;
                                                                      };
                                                                };
                                                          };
                                                    };
                                          } in  go_sfvnM vals3_sfvnr 0# ipv2_sfvny;
                                  };
                            };
                      };
                };
          };

GHC.StaticPtr.unsafeLookupStaticPtr1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Fingerprint.Type.Fingerprint
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe (GHC.StaticPtr.StaticPtr a) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sfvnX w1_sfvnY]
        case w_sfvnX of {
          GHC.Fingerprint.Type.Fingerprint ww1_sfvo0 [Occ=Once]
                                           ww2_sfvo1 [Occ=Once] ->
              GHC.StaticPtr.$wunsafeLookupStaticPtr ww1_sfvo0 ww2_sfvo1 w1_sfvnY;
        };

GHC.StaticPtr.unsafeLookupStaticPtr
  :: forall a.
     GHC.StaticPtr.StaticKey
     -> GHC.Types.IO (GHC.Base.Maybe (GHC.StaticPtr.StaticPtr a))
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.StaticPtr.unsafeLookupStaticPtr1 eta_B2 eta_B1;

lvl_rfvlG :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC/StaticPtr.hs:131:41-79|lambda"#;

lvl1_rfvlH :: GHC.Types.IO GHC.Fingerprint.Type.Fingerprint
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.patError lvl_rfvlG;

GHC.StaticPtr.staticPtrKeys2 [Occ=LoopBreaker]
  :: [GHC.Ptr.Ptr GHC.Word.Word64]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           [GHC.Fingerprint.Type.Fingerprint] #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ds_sfvo2 eta_sfvo3]
        case ds_sfvo2 of {
          [] -> (#,#) [eta_sfvo3 GHC.Types.[]];
          : y_sfvo5 ys_sfvo6 [Occ=Once] ->
              let-no-escape {
                exit_sfvo7 [Occ=OnceL!T[2], Dmd=<C(C(S)),C(C1(U(U,U)))>]
                  :: [GHC.Word.Word64]
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                           [GHC.Fingerprint.Type.Fingerprint] #)
                [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
                    sat-only [y_sfvo5 ys_sfvo6] \r [w3_sfvo8 w4_sfvo9]
                        case y_sfvo5 of {
                          GHC.Ptr.Ptr a_sfvob [Occ=Once] ->
                              case readWord64OffAddr# [a_sfvob 0# w4_sfvo9] of {
                                (#,#) ipv_sfvod [Occ=Once] ipv1_sfvoe [Occ=Once] ->
                                    case w3_sfvo8 of {
                                      [] -> lvl1_rfvlH;
                                      : w2_sfvoh [Occ=Once!] ds1_sfvoi [Occ=Once!] ->
                                          case ds1_sfvoi of {
                                            [] ->
                                                case
                                                    GHC.StaticPtr.staticPtrKeys2 ys_sfvo6 ipv_sfvod
                                                of
                                                { (#,#) ipv2_sfvol [Occ=Once]
                                                        ipv3_sfvom [Occ=Once] ->
                                                      let {
                                                        sat_sfvop [Occ=Once]
                                                          :: GHC.Fingerprint.Type.Fingerprint
                                                        [LclId] =
                                                            [ipv1_sfvoe w2_sfvoh] \u []
                                                                case w2_sfvoh of {
                                                                  GHC.Word.W64# dt1_sfvoo [Occ=Once] ->
                                                                      GHC.Fingerprint.Type.Fingerprint [ipv1_sfvoe
                                                                                                        dt1_sfvoo];
                                                                }; } in
                                                      let {
                                                        sat_sfvoq [Occ=Once]
                                                          :: [GHC.Fingerprint.Type.Fingerprint]
                                                        [LclId] =
                                                            CCCS :! [sat_sfvop ipv3_sfvom];
                                                      } in  (#,#) [ipv2_sfvol sat_sfvoq];
                                                };
                                            : _ [Occ=Dead] _ [Occ=Dead] -> lvl1_rfvlH;
                                          };
                                    };
                              };
                        };
              } in 
                let-no-escape {
                  $wf_sfvou [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                    :: GHC.Prim.Int#
                       -> [GHC.Word.Word64]
                       -> GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                             [GHC.Fingerprint.Type.Fingerprint] #)
                  [LclId[JoinId(3)],
                   Arity=3,
                   Str=<S,1*U><L,U><S,U>,
                   Unf=OtherCon []] =
                      sat-only [y_sfvo5 exit_sfvo7 $wf_sfvou] \r [ww1_sfvov
                                                                  w3_sfvow
                                                                  w4_sfvox]
                          case ww1_sfvov of ds1_sfvoy {
                            __DEFAULT ->
                                case y_sfvo5 of {
                                  GHC.Ptr.Ptr a_sfvoA [Occ=Once] ->
                                      case readWord64OffAddr# [a_sfvoA ds1_sfvoy w4_sfvox] of {
                                        (#,#) ipv_sfvoC [Occ=Once] ipv1_sfvoD [Occ=Once] ->
                                            let {
                                              sat_sfvoF [Occ=Once] :: GHC.Word.Word64
                                              [LclId] =
                                                  CCCS GHC.Word.W64#! [ipv1_sfvoD]; } in
                                            let {
                                              sat_sfvoG [Occ=Once] :: [GHC.Word.Word64]
                                              [LclId] =
                                                  CCCS :! [sat_sfvoF w3_sfvow];
                                            } in 
                                              case -# [ds1_sfvoy 1#] of sat_sfvoE {
                                                __DEFAULT ->
                                                    $wf_sfvou sat_sfvoE sat_sfvoG ipv_sfvoC;
                                              };
                                      };
                                };
                            0# -> exit_sfvo7 w3_sfvow w4_sfvox;
                          };
                } in  $wf_sfvou 1# GHC.Types.[] eta_sfvo3;
        };

GHC.StaticPtr.staticPtrKeys1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           [GHC.StaticPtr.StaticKey] #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_sfvoH]
        case __pkg_ccall base-4.11.0.0 [s_sfvoH] of {
          (#,#) ds_sfvoK [Occ=Once] ds1_sfvoL [Occ=Once] ->
              case narrow32Int# [ds1_sfvoL] of ipv1_sfvoM [Dmd=<S,U>] {
                __DEFAULT ->
                    case *# [ipv1_sfvoM 8#] of sat_sfvoN {
                      __DEFAULT ->
                          case newAlignedPinnedByteArray# [sat_sfvoN 8# ds_sfvoK] of {
                            (#,#) ipv_sfvoP [Occ=Once] ipv2_sfvoQ [Occ=Once] ->
                                case unsafeFreezeByteArray# [ipv2_sfvoQ ipv_sfvoP] of {
                                  (#,#) ipv3_sfvoS [Occ=Once] ipv4_sfvoT ->
                                      case byteArrayContents# [ipv4_sfvoT] of p_sfvoU [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case
                                                __pkg_ccall base-4.11.0.0 [p_sfvoU
                                                                           ipv1_sfvoM
                                                                           ipv3_sfvoS]
                                            of
                                            { (#,#) ds5_sfvoX [Occ=Once*] ds6_sfvoY [Occ=Once] ->
                                                  case
                                                      narrow32Int# [ds6_sfvoY]
                                                  of
                                                  ww_sfvoZ [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case <=# [ww_sfvoZ 0#] of {
                                                          __DEFAULT ->
                                                              case -# [ww_sfvoZ 1#] of sat_sfvpo {
                                                                __DEFAULT ->
                                                                    let-no-escape {
                                                                      exit_sfvp1 [Occ=OnceL!T[2],
                                                                                  Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                                        :: [GHC.Ptr.Ptr
                                                                              GHC.Word.Word64]
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 [GHC.StaticPtr.StaticKey] #)
                                                                      [LclId[JoinId(2)],
                                                                       Arity=2,
                                                                       Str=<L,U><S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [ipv4_sfvoT
                                                                                    p_sfvoU] \r [w3_sfvp2
                                                                                                 w4_sfvp3]
                                                                              case
                                                                                  readAddrOffAddr# [p_sfvoU
                                                                                                    0#
                                                                                                    w4_sfvp3]
                                                                              of
                                                                              { (#,#) ipv5_sfvp5 [Occ=Once]
                                                                                      ipv6_sfvp6 [Occ=Once] ->
                                                                                    let {
                                                                                      sat_sfvp7 [Occ=Once]
                                                                                        :: GHC.Ptr.Ptr
                                                                                             GHC.Word.Word64
                                                                                      [LclId] =
                                                                                          CCCS GHC.Ptr.Ptr! [ipv6_sfvp6]; } in
                                                                                    let {
                                                                                      sat_sfvp8 [Occ=Once]
                                                                                        :: [GHC.Ptr.Ptr
                                                                                              GHC.Word.Word64]
                                                                                      [LclId] =
                                                                                          CCCS :! [sat_sfvp7
                                                                                                   w3_sfvp2];
                                                                                    } in 
                                                                                      case
                                                                                          GHC.StaticPtr.staticPtrKeys2
                                                                                              sat_sfvp8
                                                                                              ipv5_sfvp5
                                                                                      of
                                                                                      { (#,#) ipv7_sfvpa [Occ=Once]
                                                                                              ipv8_sfvpb [Occ=Once] ->
                                                                                            case
                                                                                                touch# [ipv4_sfvoT
                                                                                                        ipv7_sfvpa]
                                                                                            of
                                                                                            s4_sfvpc
                                                                                            { __DEFAULT ->
                                                                                                  (#,#) [s4_sfvpc
                                                                                                         ipv8_sfvpb];
                                                                                            };
                                                                                      };
                                                                              };
                                                                    } in 
                                                                      let-no-escape {
                                                                        $wf_sfvpd [InlPrag=NOUSERINLINE[0],
                                                                                   Occ=LoopBreakerT[3]]
                                                                          :: GHC.Prim.Int#
                                                                             -> [GHC.Ptr.Ptr
                                                                                   GHC.Word.Word64]
                                                                             -> GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   [GHC.StaticPtr.StaticKey] #)
                                                                        [LclId[JoinId(3)],
                                                                         Arity=3,
                                                                         Str=<S,1*U><L,U><S,U>,
                                                                         Unf=OtherCon []] =
                                                                            sat-only [p_sfvoU
                                                                                      exit_sfvp1
                                                                                      $wf_sfvpd] \r [ww1_sfvpe
                                                                                                     w3_sfvpf
                                                                                                     w4_sfvpg]
                                                                                case
                                                                                    ww1_sfvpe
                                                                                of
                                                                                ds7_sfvph
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          readAddrOffAddr# [p_sfvoU
                                                                                                            ds7_sfvph
                                                                                                            w4_sfvpg]
                                                                                      of
                                                                                      { (#,#) ipv5_sfvpj [Occ=Once]
                                                                                              ipv6_sfvpk [Occ=Once] ->
                                                                                            let {
                                                                                              sat_sfvpm [Occ=Once]
                                                                                                :: GHC.Ptr.Ptr
                                                                                                     GHC.Word.Word64
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Ptr.Ptr! [ipv6_sfvpk]; } in
                                                                                            let {
                                                                                              sat_sfvpn [Occ=Once]
                                                                                                :: [GHC.Ptr.Ptr
                                                                                                      GHC.Word.Word64]
                                                                                              [LclId] =
                                                                                                  CCCS :! [sat_sfvpm
                                                                                                           w3_sfvpf];
                                                                                            } in 
                                                                                              case
                                                                                                  -# [ds7_sfvph
                                                                                                      1#]
                                                                                              of
                                                                                              sat_sfvpl
                                                                                              { __DEFAULT ->
                                                                                                    $wf_sfvpd
                                                                                                        sat_sfvpl
                                                                                                        sat_sfvpn
                                                                                                        ipv5_sfvpj;
                                                                                              };
                                                                                      };
                                                                                  0# ->
                                                                                      exit_sfvp1
                                                                                          w3_sfvpf
                                                                                          w4_sfvpg;
                                                                                };
                                                                      } in 
                                                                        $wf_sfvpd
                                                                            sat_sfvpo
                                                                            GHC.Types.[]
                                                                            ds5_sfvoX;
                                                              };
                                                          1# ->
                                                              case
                                                                  GHC.StaticPtr.staticPtrKeys2
                                                                      GHC.Types.[] ds5_sfvoX
                                                              of
                                                              { (#,#) ipv5_sfvpq [Occ=Once]
                                                                      ipv6_sfvpr [Occ=Once] ->
                                                                    case
                                                                        touch# [ipv4_sfvoT
                                                                                ipv5_sfvpq]
                                                                    of
                                                                    s4_sfvps
                                                                    { __DEFAULT ->
                                                                          (#,#) [s4_sfvps
                                                                                 ipv6_sfvpr];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.StaticPtr.staticPtrKeys [InlPrag=NOINLINE]
  :: GHC.Types.IO [GHC.StaticPtr.StaticKey]
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.StaticPtr.staticPtrKeys1 eta_B1;

GHC.StaticPtr.StaticPtr
  :: forall a.
     GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.StaticPtr.StaticPtrInfo
     -> a
     -> GHC.StaticPtr.StaticPtr a
[GblId[DataCon],
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.StaticPtr.StaticPtr [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.StaticPtr.StaticPtrInfo
  :: GHC.Base.String
     -> GHC.Base.String
     -> (GHC.Types.Int, GHC.Types.Int)
     -> GHC.StaticPtr.StaticPtrInfo
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.StaticPtr.StaticPtrInfo [eta_B3 eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:11:12.92512578 UTC

GHC.StaticPtr.fromStaticPtr [InlPrag=INLINE]
  :: forall (p :: * -> *).
     GHC.StaticPtr.IsStatic p =>
     forall a. GHC.StaticPtr.StaticPtr a -> p a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_sfvlJ] v_sfvlJ;

GHC.StaticPtr.$fIsStaticStaticPtr [InlPrag=INLINE (sat-args=0)]
  :: GHC.StaticPtr.IsStatic GHC.StaticPtr.StaticPtr
[GblId[DFunId(nt)],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.id eta_B1;

GHC.StaticPtr.$fShowStaticPtrInfo6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "StaticPtrInfo {"#;

GHC.StaticPtr.$fShowStaticPtrInfo5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "spInfoUnitId = "#;

GHC.StaticPtr.$fShowStaticPtrInfo4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "spInfoModuleName = "#;

GHC.StaticPtr.$fShowStaticPtrInfo3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "spInfoSrcLoc = "#;

GHC.StaticPtr.$fShowStaticPtrInfo2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

GHC.StaticPtr.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Base.String
     -> GHC.Base.String
     -> (GHC.Types.Int, GHC.Types.Int)
     -> GHC.Base.String
     -> GHC.Base.String
[GblId,
 Arity=5,
 Str=<S,U><L,1*U><L,1*U><L,1*U(U(U),U(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sfvlK ww1_sfvlL ww2_sfvlM ww3_sfvlN w_sfvlO]
        let {
          p_sfvlP [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [ww1_sfvlL ww2_sfvlM ww3_sfvlN] \r [x_sfvlQ]
                  let {
                    sat_sfvmo [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww1_sfvlL ww2_sfvlM ww3_sfvlN x_sfvlQ] \u []
                            let {
                              sat_sfvmm [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [ww1_sfvlL ww2_sfvlM ww3_sfvlN x_sfvlQ] \u []
                                      let {
                                        sat_sfvmk [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww2_sfvlM ww3_sfvlN x_sfvlQ] \u []
                                                let {
                                                  sat_sfvmj [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [ww2_sfvlM ww3_sfvlN x_sfvlQ] \s []
                                                          let {
                                                            sat_sfvmh [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [ww2_sfvlM ww3_sfvlN x_sfvlQ] \u []
                                                                    let {
                                                                      sat_sfvmf [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [ww3_sfvlN x_sfvlQ] \u []
                                                                              let {
                                                                                sat_sfvme [Occ=Once,
                                                                                           Dmd=<L,1*U>]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    [ww3_sfvlN
                                                                                     x_sfvlQ] \s []
                                                                                        let {
                                                                                          sat_sfvmd [Occ=Once]
                                                                                            :: [GHC.Types.Char]
                                                                                          [LclId] =
                                                                                              [ww3_sfvlN
                                                                                               x_sfvlQ] \u []
                                                                                                  case
                                                                                                      ww3_sfvlN
                                                                                                  of
                                                                                                  { (,) ww5_sfvlS [Occ=OnceL!]
                                                                                                        ww6_sfvlT [Occ=OnceL!] ->
                                                                                                        let {
                                                                                                          sat_sfvmc [Occ=Once]
                                                                                                            :: [GHC.Types.Char]
                                                                                                          [LclId] =
                                                                                                              [x_sfvlQ
                                                                                                               ww5_sfvlS
                                                                                                               ww6_sfvlT] \u []
                                                                                                                  let {
                                                                                                                    sat_sfvma [Occ=Once]
                                                                                                                      :: [GHC.Types.Char]
                                                                                                                    [LclId] =
                                                                                                                        [x_sfvlQ] \u []
                                                                                                                            GHC.CString.unpackAppendCString#
                                                                                                                                GHC.StaticPtr.$fShowStaticPtrInfo2
                                                                                                                                x_sfvlQ; } in
                                                                                                                  let {
                                                                                                                    sat_sfvmb [Occ=Once]
                                                                                                                      :: GHC.Base.String
                                                                                                                    [LclId] =
                                                                                                                        CCCS :! [GHC.Show.$fShow(,)2
                                                                                                                                 sat_sfvma]; } in
                                                                                                                  let {
                                                                                                                    sat_sfvm7 [Occ=Once]
                                                                                                                      :: GHC.Show.ShowS
                                                                                                                    [LclId] =
                                                                                                                        [ww6_sfvlT] \r [w2_sfvm1]
                                                                                                                            case
                                                                                                                                ww6_sfvlT
                                                                                                                            of
                                                                                                                            { GHC.Types.I# ww8_sfvm3 [Occ=Once] ->
                                                                                                                                  case
                                                                                                                                      GHC.Show.$wshowSignedInt
                                                                                                                                          0#
                                                                                                                                          ww8_sfvm3
                                                                                                                                          w2_sfvm1
                                                                                                                                  of
                                                                                                                                  { (#,#) ww10_sfvm5 [Occ=Once]
                                                                                                                                          ww11_sfvm6 [Occ=Once] ->
                                                                                                                                        : [ww10_sfvm5
                                                                                                                                           ww11_sfvm6];
                                                                                                                                  };
                                                                                                                            }; } in
                                                                                                                  let {
                                                                                                                    sat_sfvm8 [Occ=Once]
                                                                                                                      :: [GHC.Show.ShowS]
                                                                                                                    [LclId] =
                                                                                                                        CCCS :! [sat_sfvm7
                                                                                                                                 GHC.Types.[]]; } in
                                                                                                                  let {
                                                                                                                    sat_sfvm0 [Occ=Once]
                                                                                                                      :: GHC.Show.ShowS
                                                                                                                    [LclId] =
                                                                                                                        [ww5_sfvlS] \r [w2_sfvlU]
                                                                                                                            case
                                                                                                                                ww5_sfvlS
                                                                                                                            of
                                                                                                                            { GHC.Types.I# ww8_sfvlW [Occ=Once] ->
                                                                                                                                  case
                                                                                                                                      GHC.Show.$wshowSignedInt
                                                                                                                                          0#
                                                                                                                                          ww8_sfvlW
                                                                                                                                          w2_sfvlU
                                                                                                                                  of
                                                                                                                                  { (#,#) ww10_sfvlY [Occ=Once]
                                                                                                                                          ww11_sfvlZ [Occ=Once] ->
                                                                                                                                        : [ww10_sfvlY
                                                                                                                                           ww11_sfvlZ];
                                                                                                                                  };
                                                                                                                            }; } in
                                                                                                                  let {
                                                                                                                    sat_sfvm9 [Occ=Once]
                                                                                                                      :: [GHC.Base.String
                                                                                                                          -> GHC.Base.String]
                                                                                                                    [LclId] =
                                                                                                                        CCCS :! [sat_sfvm0
                                                                                                                                 sat_sfvm8];
                                                                                                                  } in 
                                                                                                                    GHC.Show.$fShow(,)_go1
                                                                                                                        sat_sfvm9
                                                                                                                        sat_sfvmb;
                                                                                                        } in 
                                                                                                          : [GHC.Show.$fShow(,)4
                                                                                                             sat_sfvmc];
                                                                                                  };
                                                                                        } in 
                                                                                          GHC.CString.unpackAppendCString#
                                                                                              GHC.StaticPtr.$fShowStaticPtrInfo3
                                                                                              sat_sfvmd;
                                                                              } in 
                                                                                GHC.Base.++
                                                                                    GHC.Show.showCommaSpace1
                                                                                    sat_sfvme; } in
                                                                    let {
                                                                      sat_sfvmg [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   sat_sfvmf];
                                                                    } in 
                                                                      GHC.Show.showLitString
                                                                          ww2_sfvlM sat_sfvmg; } in
                                                          let {
                                                            sat_sfvmi [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)3
                                                                         sat_sfvmh];
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                GHC.StaticPtr.$fShowStaticPtrInfo4
                                                                sat_sfvmi;
                                                } in 
                                                  GHC.Base.++
                                                      GHC.Show.showCommaSpace1 sat_sfvmj; } in
                                      let {
                                        sat_sfvml [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)3 sat_sfvmk];
                                      } in  GHC.Show.showLitString ww1_sfvlL sat_sfvml; } in
                            let {
                              sat_sfvmn [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  CCCS :! [GHC.Show.$fShow(,)3 sat_sfvmm];
                            } in 
                              GHC.CString.unpackAppendCString#
                                  GHC.StaticPtr.$fShowStaticPtrInfo5 sat_sfvmn;
                  } in 
                    GHC.CString.unpackAppendCString#
                        GHC.StaticPtr.$fShowStaticPtrInfo6 sat_sfvmo;
        } in 
          case >=# [ww_sfvlK 11#] of {
            __DEFAULT -> p_sfvlP w_sfvlO;
            1# ->
                let {
                  sat_sfvmr [Occ=Once] :: [GHC.Types.Char]
                  [LclId] =
                      [w_sfvlO p_sfvlP] \u []
                          let {
                            sat_sfvmq [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)2 w_sfvlO];
                          } in  p_sfvlP sat_sfvmq;
                } in  : [GHC.Show.$fShow(,)4 sat_sfvmr];
          };

GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.StaticPtr.StaticPtrInfo -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U,1*U(U(U),U(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sfvms w1_sfvmt w2_sfvmu]
        case w_sfvms of {
          GHC.Types.I# ww1_sfvmw [Occ=Once] ->
              case w1_sfvmt of {
                GHC.StaticPtr.StaticPtrInfo ww3_sfvmy [Occ=Once]
                                            ww4_sfvmz [Occ=Once]
                                            ww5_sfvmA [Occ=Once] ->
                    GHC.StaticPtr.$w$cshowsPrec
                        ww1_sfvmw ww3_sfvmy ww4_sfvmz ww5_sfvmA w2_sfvmu;
              };
        };

GHC.StaticPtr.$fShowStaticPtrInfo7 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.StaticPtr.$fShowStaticPtrInfo_$cshow
  :: GHC.StaticPtr.StaticPtrInfo -> GHC.Base.String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U,1*U,1*U(U(U),U(U)))>,
 Unf=OtherCon []] =
    [] \r [x_sfvmB]
        case x_sfvmB of {
          GHC.StaticPtr.StaticPtrInfo ww1_sfvmD [Occ=Once]
                                      ww2_sfvmE [Occ=Once]
                                      ww3_sfvmF [Occ=Once] ->
              GHC.StaticPtr.$w$cshowsPrec
                  0# ww1_sfvmD ww2_sfvmE ww3_sfvmF GHC.Types.[];
        };

GHC.StaticPtr.$fShowStaticPtrInfo1
  :: GHC.StaticPtr.StaticPtrInfo -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U(1*U,1*U,1*U(U(U),U(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sfvmG w1_sfvmH]
        case w_sfvmG of {
          GHC.StaticPtr.StaticPtrInfo ww1_sfvmJ [Occ=Once]
                                      ww2_sfvmK [Occ=Once]
                                      ww3_sfvmL [Occ=Once] ->
              GHC.StaticPtr.$w$cshowsPrec
                  0# ww1_sfvmJ ww2_sfvmK ww3_sfvmL w1_sfvmH;
        };

GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList
  :: [GHC.StaticPtr.StaticPtrInfo] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sfvmM s_sfvmN]
        GHC.Show.showList__
            GHC.StaticPtr.$fShowStaticPtrInfo1 ls_sfvmM s_sfvmN;

GHC.StaticPtr.$fShowStaticPtrInfo [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.StaticPtr.StaticPtrInfo
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec
                                    GHC.StaticPtr.$fShowStaticPtrInfo_$cshow
                                    GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList];

GHC.StaticPtr.spInfoSrcLoc
  :: GHC.StaticPtr.StaticPtrInfo -> (GHC.Types.Int, GHC.Types.Int)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLS),1*U(A,A,1*U(U,U))>m,
 Unf=OtherCon []] =
    [] \r [ds_sfvmO]
        case ds_sfvmO of {
          GHC.StaticPtr.StaticPtrInfo _ [Occ=Dead]
                                      _ [Occ=Dead]
                                      ds3_sfvmS [Occ=Once] ->
              ds3_sfvmS;
        };

GHC.StaticPtr.spInfoModuleName
  :: GHC.StaticPtr.StaticPtrInfo -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),1*U(A,1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sfvmT]
        case ds_sfvmT of {
          GHC.StaticPtr.StaticPtrInfo _ [Occ=Dead]
                                      ds2_sfvmW [Occ=Once]
                                      _ [Occ=Dead] ->
              ds2_sfvmW;
        };

GHC.StaticPtr.spInfoUnitId
  :: GHC.StaticPtr.StaticPtrInfo -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),1*U(1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sfvmY]
        case ds_sfvmY of {
          GHC.StaticPtr.StaticPtrInfo ds1_sfvn0 [Occ=Once]
                                      _ [Occ=Dead]
                                      _ [Occ=Dead] ->
              ds1_sfvn0;
        };

GHC.StaticPtr.deRefStaticPtr
  :: forall a. GHC.StaticPtr.StaticPtr a -> a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLS),1*U(A,A,A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_sfvn3]
        case ds_sfvn3 of {
          GHC.StaticPtr.StaticPtr _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  v_sfvn8 [Occ=Once] ->
              v_sfvn8;
        };

GHC.StaticPtr.staticKey
  :: forall a. GHC.StaticPtr.StaticPtr a -> GHC.StaticPtr.StaticKey
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SSLL),1*U(U,U,A,A)>m,
 Unf=OtherCon []] =
    [] \r [ds_sfvn9]
        case ds_sfvn9 of {
          GHC.StaticPtr.StaticPtr w0_sfvnb [Occ=Once]
                                  w1_sfvnc [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              GHC.Fingerprint.Type.Fingerprint [w0_sfvnb w1_sfvnc];
        };

GHC.StaticPtr.staticPtrInfo
  :: forall a.
     GHC.StaticPtr.StaticPtr a -> GHC.StaticPtr.StaticPtrInfo
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSL),1*U(A,A,1*U(U,U,U),A)>m,
 Unf=OtherCon []] =
    [] \r [ds_sfvnf]
        case ds_sfvnf of {
          GHC.StaticPtr.StaticPtr _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  n_sfvnj [Occ=Once]
                                  _ [Occ=Dead] ->
              n_sfvnj;
        };

GHC.StaticPtr.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.StaticPtr.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$trModule4];

GHC.StaticPtr.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.StaticPtr"#;

GHC.StaticPtr.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$trModule2];

GHC.StaticPtr.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.StaticPtr.$trModule3
                                     GHC.StaticPtr.$trModule1];

$krep_rfvlo :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep1_rfvlp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep2_rfvlq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep3_rfvlr :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rfvlp GHC.Types.[]];

$krep4_rfvls :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep3_rfvlr];

$krep5_rfvlt :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rfvlo GHC.Types.[]];

$krep6_rfvlu :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rfvlo $krep5_rfvlt];

$krep7_rfvlv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep6_rfvlu];

GHC.StaticPtr.$tcIsStatic1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*Arr*
                                         $krep2_rfvlq];

$krep8_rfvlw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep9_rfvlx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord#
                                              GHC.Types.[]];

GHC.StaticPtr.$tcStaticPtrInfo2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "StaticPtrInfo"#;

GHC.StaticPtr.$tcStaticPtrInfo1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tcStaticPtrInfo2];

GHC.StaticPtr.$tcStaticPtrInfo :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9809180260958205610##
                                    5820027882667808380##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tcStaticPtrInfo1
                                    0#
                                    GHC.Types.krep$*];

$krep10_rfvly :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.StaticPtr.$tcStaticPtrInfo
                                              GHC.Types.[]];

$krep11_rfvlz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_rfvlv $krep10_rfvly];

$krep12_rfvlA :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rfvls $krep11_rfvlz];

GHC.StaticPtr.$tc'StaticPtrInfo1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rfvls $krep12_rfvlA];

GHC.StaticPtr.$tc'StaticPtrInfo3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'StaticPtrInfo"#;

GHC.StaticPtr.$tc'StaticPtrInfo2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tc'StaticPtrInfo3];

GHC.StaticPtr.$tc'StaticPtrInfo :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12332739532642204119##
                                    17636067641148941699##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tc'StaticPtrInfo2
                                    0#
                                    GHC.StaticPtr.$tc'StaticPtrInfo1];

GHC.StaticPtr.$tcStaticPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "StaticPtr"#;

GHC.StaticPtr.$tcStaticPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tcStaticPtr2];

GHC.StaticPtr.$tcStaticPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6538784347774135987##
                                    451387415853290179##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tcStaticPtr1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep13_rfvlB :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep8_rfvlw GHC.Types.[]];

$krep14_rfvlC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.StaticPtr.$tcStaticPtr
                                              $krep13_rfvlB];

$krep15_rfvlD :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rfvlw $krep14_rfvlC];

$krep16_rfvlE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_rfvly $krep15_rfvlD];

$krep17_rfvlF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_rfvlx $krep16_rfvlE];

GHC.StaticPtr.$tc'StaticPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_rfvlx $krep17_rfvlF];

GHC.StaticPtr.$tc'StaticPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'StaticPtr"#;

GHC.StaticPtr.$tc'StaticPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tc'StaticPtr3];

GHC.StaticPtr.$tc'StaticPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3211798574336347514##
                                    9816765169815661376##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tc'StaticPtr2
                                    1#
                                    GHC.StaticPtr.$tc'StaticPtr1];

GHC.StaticPtr.$tcIsStatic3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IsStatic"#;

GHC.StaticPtr.$tcIsStatic2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tcIsStatic3];

GHC.StaticPtr.$tcIsStatic :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12653381617957437053##
                                    3253287492145771790##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tcIsStatic2
                                    0#
                                    GHC.StaticPtr.$tcIsStatic1];

GHC.StaticPtr.$wunsafeLookupStaticPtr [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe (GHC.StaticPtr.StaticPtr a) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sfvnl ww1_sfvnm void_0E]
        let {
          vals_sfvno [Occ=OnceL] :: GHC.Word.Word64
          [LclId, Unf=OtherCon []] =
              CCCS GHC.Word.W64#! [ww_sfvnl]; } in
        let {
          vals1_sfvnp [Occ=OnceL] :: GHC.Word.Word64
          [LclId, Unf=OtherCon []] =
              CCCS GHC.Word.W64#! [ww1_sfvnm]; } in
        let {
          vals2_sfvnq [Occ=OnceL] :: [GHC.Word.Word64]
          [LclId, Unf=OtherCon []] =
              CCCS :! [vals1_sfvnp GHC.Types.[]]; } in
        let {
          vals3_sfvnr [Dmd=<S,U>] :: [GHC.Word.Word64]
          [LclId, Unf=OtherCon []] =
              CCCS :! [vals_sfvno vals2_sfvnq];
        } in 
          case GHC.List.$wlenAcc vals3_sfvnr 0# of ww2_sfvns {
            __DEFAULT ->
                case *# [ww2_sfvns 8#] of sat_sfvnt {
                  __DEFAULT ->
                      case newAlignedPinnedByteArray# [sat_sfvnt 8# GHC.Prim.void#] of {
                        Unit# ipv1_sfvnw [Occ=Once] ->
                            case unsafeFreezeByteArray# [ipv1_sfvnw GHC.Prim.void#] of {
                              Unit# ipv3_sfvnz ->
                                  case byteArrayContents# [ipv3_sfvnz] of ptr_sfvnA [Dmd=<S,U>] {
                                    __DEFAULT ->
                                        let-no-escape {
                                          exit_sfvnB [Occ=OnceL!T[1], Dmd=<C(S),C(U(U,U))>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     GHC.Base.Maybe
                                                       (GHC.StaticPtr.StaticPtr a_sfvff) #)
                                          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                              sat-only [ipv3_sfvnz ptr_sfvnA] \r [void_0E]
                                                  case
                                                      __pkg_ccall base-4.11.0.0 [ptr_sfvnA
                                                                                 GHC.Prim.void#]
                                                  of
                                                  { Unit# ds1_sfvnG ->
                                                        case addrToAny# [ds1_sfvnG] of {
                                                          Unit# spe_sfvnI [Occ=Once] ->
                                                              case
                                                                  touch# [ipv3_sfvnz GHC.Prim.void#]
                                                              of
                                                              s4_sfvnJ
                                                              { (##) ->
                                                                    case
                                                                        eqAddr# [ds1_sfvnG __NULL]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          let {
                                                                            sat_sfvnL [Occ=Once]
                                                                              :: GHC.Base.Maybe
                                                                                   (GHC.StaticPtr.StaticPtr
                                                                                      a_sfvff)
                                                                            [LclId] =
                                                                                CCCS GHC.Base.Just! [spe_sfvnI];
                                                                          } in  Unit# [sat_sfvnL];
                                                                      1# ->
                                                                          Unit# [GHC.Base.Nothing];
                                                                    };
                                                              };
                                                        };
                                                  };
                                        } in 
                                          let-no-escape {
                                            go_sfvnM [Occ=LoopBreakerT[3]]
                                              :: [GHC.Word.Word64]
                                                 -> GHC.Prim.Int#
                                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Base.Maybe
                                                         (GHC.StaticPtr.StaticPtr a_sfvff) #)
                                            [LclId[JoinId(3)],
                                             Arity=3,
                                             Str=<S,1*U><L,U><S,U>,
                                             Unf=OtherCon []] =
                                                sat-only [ptr_sfvnA
                                                          exit_sfvnB
                                                          go_sfvnM] \r [ds_sfvnN ds1_sfvnO void_0E]
                                                    case ds_sfvnN of {
                                                      [] -> exit_sfvnB GHC.Prim.void#;
                                                      : val_sfvnR [Occ=Once!]
                                                        vals4_sfvnS [Occ=Once] ->
                                                          case val_sfvnR of {
                                                            GHC.Word.W64# x_sfvnU [Occ=Once] ->
                                                                case
                                                                    writeWord64OffAddr# [ptr_sfvnA
                                                                                         ds1_sfvnO
                                                                                         x_sfvnU
                                                                                         GHC.Prim.void#]
                                                                of
                                                                s2_sfvnV
                                                                { (##) ->
                                                                      case
                                                                          +# [ds1_sfvnO 1#]
                                                                      of
                                                                      sat_sfvnW
                                                                      { __DEFAULT ->
                                                                            go_sfvnM
                                                                                vals4_sfvnS
                                                                                sat_sfvnW
                                                                                GHC.Prim.void#;
                                                                      };
                                                                };
                                                          };
                                                    };
                                          } in  go_sfvnM vals3_sfvnr 0# GHC.Prim.void#;
                                  };
                            };
                      };
                };
          };

GHC.StaticPtr.unsafeLookupStaticPtr1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Fingerprint.Type.Fingerprint
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe (GHC.StaticPtr.StaticPtr a) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sfvnX void_0E]
        case w_sfvnX of {
          GHC.Fingerprint.Type.Fingerprint ww1_sfvo0 [Occ=Once]
                                           ww2_sfvo1 [Occ=Once] ->
              GHC.StaticPtr.$wunsafeLookupStaticPtr
                  ww1_sfvo0 ww2_sfvo1 GHC.Prim.void#;
        };

GHC.StaticPtr.unsafeLookupStaticPtr
  :: forall a.
     GHC.StaticPtr.StaticKey
     -> GHC.Types.IO (GHC.Base.Maybe (GHC.StaticPtr.StaticPtr a))
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.StaticPtr.unsafeLookupStaticPtr1 eta_B2 GHC.Prim.void#;

lvl_rfvlG :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC/StaticPtr.hs:131:41-79|lambda"#;

lvl1_rfvlH :: GHC.Types.IO GHC.Fingerprint.Type.Fingerprint
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.patError lvl_rfvlG;

GHC.StaticPtr.staticPtrKeys2 [Occ=LoopBreaker]
  :: [GHC.Ptr.Ptr GHC.Word.Word64]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           [GHC.Fingerprint.Type.Fingerprint] #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ds_sfvo2 void_0E]
        case ds_sfvo2 of {
          [] -> Unit# [GHC.Types.[]];
          : y_sfvo5 ys_sfvo6 [Occ=Once] ->
              let-no-escape {
                exit_sfvo7 [Occ=OnceL!T[2], Dmd=<C(C(S)),C(C1(U(U,U)))>]
                  :: [GHC.Word.Word64]
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                           [GHC.Fingerprint.Type.Fingerprint] #)
                [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
                    sat-only [y_sfvo5 ys_sfvo6] \r [w3_sfvo8 void_0E]
                        case y_sfvo5 of {
                          GHC.Ptr.Ptr a_sfvob [Occ=Once] ->
                              case readWord64OffAddr# [a_sfvob 0# GHC.Prim.void#] of {
                                Unit# ipv1_sfvoe [Occ=Once] ->
                                    case w3_sfvo8 of {
                                      [] -> lvl1_rfvlH;
                                      : w2_sfvoh [Occ=Once!] ds1_sfvoi [Occ=Once!] ->
                                          case ds1_sfvoi of {
                                            [] ->
                                                case
                                                    GHC.StaticPtr.staticPtrKeys2
                                                        ys_sfvo6 GHC.Prim.void#
                                                of
                                                { Unit# ipv3_sfvom [Occ=Once] ->
                                                      let {
                                                        sat_sfvop [Occ=Once]
                                                          :: GHC.Fingerprint.Type.Fingerprint
                                                        [LclId] =
                                                            [ipv1_sfvoe w2_sfvoh] \u []
                                                                case w2_sfvoh of {
                                                                  GHC.Word.W64# dt1_sfvoo [Occ=Once] ->
                                                                      GHC.Fingerprint.Type.Fingerprint [ipv1_sfvoe
                                                                                                        dt1_sfvoo];
                                                                }; } in
                                                      let {
                                                        sat_sfvoq [Occ=Once]
                                                          :: [GHC.Fingerprint.Type.Fingerprint]
                                                        [LclId] =
                                                            CCCS :! [sat_sfvop ipv3_sfvom];
                                                      } in  Unit# [sat_sfvoq];
                                                };
                                            : _ [Occ=Dead] _ [Occ=Dead] -> lvl1_rfvlH;
                                          };
                                    };
                              };
                        };
              } in 
                let-no-escape {
                  $wf_sfvou [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                    :: GHC.Prim.Int#
                       -> [GHC.Word.Word64]
                       -> GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                             [GHC.Fingerprint.Type.Fingerprint] #)
                  [LclId[JoinId(3)],
                   Arity=3,
                   Str=<S,1*U><L,U><S,U>,
                   Unf=OtherCon []] =
                      sat-only [y_sfvo5 exit_sfvo7 $wf_sfvou] \r [ww1_sfvov
                                                                  w3_sfvow
                                                                  void_0E]
                          case ww1_sfvov of ds1_sfvoy {
                            __DEFAULT ->
                                case y_sfvo5 of {
                                  GHC.Ptr.Ptr a_sfvoA [Occ=Once] ->
                                      case
                                          readWord64OffAddr# [a_sfvoA ds1_sfvoy GHC.Prim.void#]
                                      of
                                      { Unit# ipv1_sfvoD [Occ=Once] ->
                                            let {
                                              sat_sfvoF [Occ=Once] :: GHC.Word.Word64
                                              [LclId] =
                                                  CCCS GHC.Word.W64#! [ipv1_sfvoD]; } in
                                            let {
                                              sat_sfvoG [Occ=Once] :: [GHC.Word.Word64]
                                              [LclId] =
                                                  CCCS :! [sat_sfvoF w3_sfvow];
                                            } in 
                                              case -# [ds1_sfvoy 1#] of sat_sfvoE {
                                                __DEFAULT ->
                                                    $wf_sfvou sat_sfvoE sat_sfvoG GHC.Prim.void#;
                                              };
                                      };
                                };
                            0# -> exit_sfvo7 w3_sfvow GHC.Prim.void#;
                          };
                } in  $wf_sfvou 1# GHC.Types.[] GHC.Prim.void#;
        };

GHC.StaticPtr.staticPtrKeys1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           [GHC.StaticPtr.StaticKey] #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.void#] of {
          Unit# ds1_sfvoL [Occ=Once] ->
              case narrow32Int# [ds1_sfvoL] of ipv1_sfvoM [Dmd=<S,U>] {
                __DEFAULT ->
                    case *# [ipv1_sfvoM 8#] of sat_sfvoN {
                      __DEFAULT ->
                          case newAlignedPinnedByteArray# [sat_sfvoN 8# GHC.Prim.void#] of {
                            Unit# ipv2_sfvoQ [Occ=Once] ->
                                case unsafeFreezeByteArray# [ipv2_sfvoQ GHC.Prim.void#] of {
                                  Unit# ipv4_sfvoT ->
                                      case byteArrayContents# [ipv4_sfvoT] of p_sfvoU [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case
                                                __pkg_ccall base-4.11.0.0 [p_sfvoU
                                                                           ipv1_sfvoM
                                                                           GHC.Prim.void#]
                                            of
                                            { Unit# ds6_sfvoY [Occ=Once] ->
                                                  case
                                                      narrow32Int# [ds6_sfvoY]
                                                  of
                                                  ww_sfvoZ [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case <=# [ww_sfvoZ 0#] of {
                                                          __DEFAULT ->
                                                              case -# [ww_sfvoZ 1#] of sat_sfvpo {
                                                                __DEFAULT ->
                                                                    let-no-escape {
                                                                      exit_sfvp1 [Occ=OnceL!T[2],
                                                                                  Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                                        :: [GHC.Ptr.Ptr
                                                                              GHC.Word.Word64]
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 [GHC.StaticPtr.StaticKey] #)
                                                                      [LclId[JoinId(2)],
                                                                       Arity=2,
                                                                       Str=<L,U><S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [ipv4_sfvoT
                                                                                    p_sfvoU] \r [w3_sfvp2
                                                                                                 void_0E]
                                                                              case
                                                                                  readAddrOffAddr# [p_sfvoU
                                                                                                    0#
                                                                                                    GHC.Prim.void#]
                                                                              of
                                                                              { Unit# ipv6_sfvp6 [Occ=Once] ->
                                                                                    let {
                                                                                      sat_sfvp7 [Occ=Once]
                                                                                        :: GHC.Ptr.Ptr
                                                                                             GHC.Word.Word64
                                                                                      [LclId] =
                                                                                          CCCS GHC.Ptr.Ptr! [ipv6_sfvp6]; } in
                                                                                    let {
                                                                                      sat_sfvp8 [Occ=Once]
                                                                                        :: [GHC.Ptr.Ptr
                                                                                              GHC.Word.Word64]
                                                                                      [LclId] =
                                                                                          CCCS :! [sat_sfvp7
                                                                                                   w3_sfvp2];
                                                                                    } in 
                                                                                      case
                                                                                          GHC.StaticPtr.staticPtrKeys2
                                                                                              sat_sfvp8
                                                                                              GHC.Prim.void#
                                                                                      of
                                                                                      { Unit# ipv8_sfvpb [Occ=Once] ->
                                                                                            case
                                                                                                touch# [ipv4_sfvoT
                                                                                                        GHC.Prim.void#]
                                                                                            of
                                                                                            s4_sfvpc
                                                                                            { (##) ->
                                                                                                  Unit# [ipv8_sfvpb];
                                                                                            };
                                                                                      };
                                                                              };
                                                                    } in 
                                                                      let-no-escape {
                                                                        $wf_sfvpd [InlPrag=NOUSERINLINE[0],
                                                                                   Occ=LoopBreakerT[3]]
                                                                          :: GHC.Prim.Int#
                                                                             -> [GHC.Ptr.Ptr
                                                                                   GHC.Word.Word64]
                                                                             -> GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   [GHC.StaticPtr.StaticKey] #)
                                                                        [LclId[JoinId(3)],
                                                                         Arity=3,
                                                                         Str=<S,1*U><L,U><S,U>,
                                                                         Unf=OtherCon []] =
                                                                            sat-only [p_sfvoU
                                                                                      exit_sfvp1
                                                                                      $wf_sfvpd] \r [ww1_sfvpe
                                                                                                     w3_sfvpf
                                                                                                     void_0E]
                                                                                case
                                                                                    ww1_sfvpe
                                                                                of
                                                                                ds7_sfvph
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          readAddrOffAddr# [p_sfvoU
                                                                                                            ds7_sfvph
                                                                                                            GHC.Prim.void#]
                                                                                      of
                                                                                      { Unit# ipv6_sfvpk [Occ=Once] ->
                                                                                            let {
                                                                                              sat_sfvpm [Occ=Once]
                                                                                                :: GHC.Ptr.Ptr
                                                                                                     GHC.Word.Word64
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Ptr.Ptr! [ipv6_sfvpk]; } in
                                                                                            let {
                                                                                              sat_sfvpn [Occ=Once]
                                                                                                :: [GHC.Ptr.Ptr
                                                                                                      GHC.Word.Word64]
                                                                                              [LclId] =
                                                                                                  CCCS :! [sat_sfvpm
                                                                                                           w3_sfvpf];
                                                                                            } in 
                                                                                              case
                                                                                                  -# [ds7_sfvph
                                                                                                      1#]
                                                                                              of
                                                                                              sat_sfvpl
                                                                                              { __DEFAULT ->
                                                                                                    $wf_sfvpd
                                                                                                        sat_sfvpl
                                                                                                        sat_sfvpn
                                                                                                        GHC.Prim.void#;
                                                                                              };
                                                                                      };
                                                                                  0# ->
                                                                                      exit_sfvp1
                                                                                          w3_sfvpf
                                                                                          GHC.Prim.void#;
                                                                                };
                                                                      } in 
                                                                        $wf_sfvpd
                                                                            sat_sfvpo
                                                                            GHC.Types.[]
                                                                            GHC.Prim.void#;
                                                              };
                                                          1# ->
                                                              case
                                                                  GHC.StaticPtr.staticPtrKeys2
                                                                      GHC.Types.[] GHC.Prim.void#
                                                              of
                                                              { Unit# ipv6_sfvpr [Occ=Once] ->
                                                                    case
                                                                        touch# [ipv4_sfvoT
                                                                                GHC.Prim.void#]
                                                                    of
                                                                    s4_sfvps
                                                                    { (##) -> Unit# [ipv6_sfvpr];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.StaticPtr.staticPtrKeys [InlPrag=NOINLINE]
  :: GHC.Types.IO [GHC.StaticPtr.StaticKey]
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.StaticPtr.staticPtrKeys1 GHC.Prim.void#;

GHC.StaticPtr.StaticPtr
  :: forall a.
     GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.StaticPtr.StaticPtrInfo
     -> a
     -> GHC.StaticPtr.StaticPtr a
[GblId[DataCon],
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.StaticPtr.StaticPtr [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.StaticPtr.StaticPtrInfo
  :: GHC.Base.String
     -> GHC.Base.String
     -> (GHC.Types.Int, GHC.Types.Int)
     -> GHC.StaticPtr.StaticPtrInfo
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.StaticPtr.StaticPtrInfo [eta_B3 eta_B2 eta_B1];


==================== Pre unarise: ====================
2018-03-16 16:11:13.948619586 UTC

GHC.StaticPtr.fromStaticPtr [InlPrag=INLINE]
  :: forall (p :: * -> *).
     GHC.StaticPtr.IsStatic p =>
     forall a. GHC.StaticPtr.StaticPtr a -> p a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_sfw2W] v_sfw2W;

GHC.StaticPtr.$fIsStaticStaticPtr [InlPrag=INLINE (sat-args=0)]
  :: GHC.StaticPtr.IsStatic GHC.StaticPtr.StaticPtr
[GblId[DFunId(nt)],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.id eta_B1;

GHC.StaticPtr.$fShowStaticPtrInfo6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "StaticPtrInfo {"#;

GHC.StaticPtr.$fShowStaticPtrInfo5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "spInfoUnitId = "#;

GHC.StaticPtr.$fShowStaticPtrInfo4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "spInfoModuleName = "#;

GHC.StaticPtr.$fShowStaticPtrInfo3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "spInfoSrcLoc = "#;

GHC.StaticPtr.$fShowStaticPtrInfo2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

GHC.StaticPtr.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Base.String
     -> GHC.Base.String
     -> (GHC.Types.Int, GHC.Types.Int)
     -> GHC.Base.String
     -> GHC.Base.String
[GblId,
 Arity=5,
 Str=<S,U><L,1*U><L,1*U><L,1*U(U(U),U(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sfw2X ww1_sfw2Y ww2_sfw2Z ww3_sfw30 w_sfw31]
        let {
          p_sfw32 [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [ww1_sfw2Y ww2_sfw2Z ww3_sfw30] \r [x_sfw33]
                  let {
                    sat_sfw3B [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww1_sfw2Y ww2_sfw2Z ww3_sfw30 x_sfw33] \u []
                            let {
                              sat_sfw3z [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [ww1_sfw2Y ww2_sfw2Z ww3_sfw30 x_sfw33] \u []
                                      let {
                                        sat_sfw3x [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww2_sfw2Z ww3_sfw30 x_sfw33] \u []
                                                let {
                                                  sat_sfw3w [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [ww2_sfw2Z ww3_sfw30 x_sfw33] \s []
                                                          let {
                                                            sat_sfw3u [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [ww2_sfw2Z ww3_sfw30 x_sfw33] \u []
                                                                    let {
                                                                      sat_sfw3s [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [ww3_sfw30 x_sfw33] \u []
                                                                              let {
                                                                                sat_sfw3r [Occ=Once,
                                                                                           Dmd=<L,1*U>]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    [ww3_sfw30
                                                                                     x_sfw33] \s []
                                                                                        let {
                                                                                          sat_sfw3q [Occ=Once]
                                                                                            :: [GHC.Types.Char]
                                                                                          [LclId] =
                                                                                              [ww3_sfw30
                                                                                               x_sfw33] \u []
                                                                                                  case
                                                                                                      ww3_sfw30
                                                                                                  of
                                                                                                  { (,) ww5_sfw35 [Occ=OnceL!]
                                                                                                        ww6_sfw36 [Occ=OnceL!] ->
                                                                                                        let {
                                                                                                          sat_sfw3p [Occ=Once]
                                                                                                            :: [GHC.Types.Char]
                                                                                                          [LclId] =
                                                                                                              [x_sfw33
                                                                                                               ww5_sfw35
                                                                                                               ww6_sfw36] \u []
                                                                                                                  let {
                                                                                                                    sat_sfw3n [Occ=Once]
                                                                                                                      :: [GHC.Types.Char]
                                                                                                                    [LclId] =
                                                                                                                        [x_sfw33] \u []
                                                                                                                            GHC.CString.unpackAppendCString#
                                                                                                                                GHC.StaticPtr.$fShowStaticPtrInfo2
                                                                                                                                x_sfw33; } in
                                                                                                                  let {
                                                                                                                    sat_sfw3o [Occ=Once]
                                                                                                                      :: GHC.Base.String
                                                                                                                    [LclId] =
                                                                                                                        CCCS :! [GHC.Show.$fShow(,)2
                                                                                                                                 sat_sfw3n]; } in
                                                                                                                  let {
                                                                                                                    sat_sfw3k [Occ=Once]
                                                                                                                      :: GHC.Show.ShowS
                                                                                                                    [LclId] =
                                                                                                                        [ww6_sfw36] \r [w2_sfw3e]
                                                                                                                            case
                                                                                                                                ww6_sfw36
                                                                                                                            of
                                                                                                                            { GHC.Types.I# ww8_sfw3g [Occ=Once] ->
                                                                                                                                  case
                                                                                                                                      GHC.Show.$wshowSignedInt
                                                                                                                                          0#
                                                                                                                                          ww8_sfw3g
                                                                                                                                          w2_sfw3e
                                                                                                                                  of
                                                                                                                                  { (#,#) ww10_sfw3i [Occ=Once]
                                                                                                                                          ww11_sfw3j [Occ=Once] ->
                                                                                                                                        : [ww10_sfw3i
                                                                                                                                           ww11_sfw3j];
                                                                                                                                  };
                                                                                                                            }; } in
                                                                                                                  let {
                                                                                                                    sat_sfw3l [Occ=Once]
                                                                                                                      :: [GHC.Show.ShowS]
                                                                                                                    [LclId] =
                                                                                                                        CCCS :! [sat_sfw3k
                                                                                                                                 GHC.Types.[]]; } in
                                                                                                                  let {
                                                                                                                    sat_sfw3d [Occ=Once]
                                                                                                                      :: GHC.Show.ShowS
                                                                                                                    [LclId] =
                                                                                                                        [ww5_sfw35] \r [w2_sfw37]
                                                                                                                            case
                                                                                                                                ww5_sfw35
                                                                                                                            of
                                                                                                                            { GHC.Types.I# ww8_sfw39 [Occ=Once] ->
                                                                                                                                  case
                                                                                                                                      GHC.Show.$wshowSignedInt
                                                                                                                                          0#
                                                                                                                                          ww8_sfw39
                                                                                                                                          w2_sfw37
                                                                                                                                  of
                                                                                                                                  { (#,#) ww10_sfw3b [Occ=Once]
                                                                                                                                          ww11_sfw3c [Occ=Once] ->
                                                                                                                                        : [ww10_sfw3b
                                                                                                                                           ww11_sfw3c];
                                                                                                                                  };
                                                                                                                            }; } in
                                                                                                                  let {
                                                                                                                    sat_sfw3m [Occ=Once]
                                                                                                                      :: [GHC.Base.String
                                                                                                                          -> GHC.Base.String]
                                                                                                                    [LclId] =
                                                                                                                        CCCS :! [sat_sfw3d
                                                                                                                                 sat_sfw3l];
                                                                                                                  } in 
                                                                                                                    GHC.Show.$fShow(,)_go1
                                                                                                                        sat_sfw3m
                                                                                                                        sat_sfw3o;
                                                                                                        } in 
                                                                                                          : [GHC.Show.$fShow(,)4
                                                                                                             sat_sfw3p];
                                                                                                  };
                                                                                        } in 
                                                                                          GHC.CString.unpackAppendCString#
                                                                                              GHC.StaticPtr.$fShowStaticPtrInfo3
                                                                                              sat_sfw3q;
                                                                              } in 
                                                                                GHC.Base.++
                                                                                    GHC.Show.showCommaSpace1
                                                                                    sat_sfw3r; } in
                                                                    let {
                                                                      sat_sfw3t [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   sat_sfw3s];
                                                                    } in 
                                                                      GHC.Show.showLitString
                                                                          ww2_sfw2Z sat_sfw3t; } in
                                                          let {
                                                            sat_sfw3v [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)3
                                                                         sat_sfw3u];
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                GHC.StaticPtr.$fShowStaticPtrInfo4
                                                                sat_sfw3v;
                                                } in 
                                                  GHC.Base.++
                                                      GHC.Show.showCommaSpace1 sat_sfw3w; } in
                                      let {
                                        sat_sfw3y [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)3 sat_sfw3x];
                                      } in  GHC.Show.showLitString ww1_sfw2Y sat_sfw3y; } in
                            let {
                              sat_sfw3A [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  CCCS :! [GHC.Show.$fShow(,)3 sat_sfw3z];
                            } in 
                              GHC.CString.unpackAppendCString#
                                  GHC.StaticPtr.$fShowStaticPtrInfo5 sat_sfw3A;
                  } in 
                    GHC.CString.unpackAppendCString#
                        GHC.StaticPtr.$fShowStaticPtrInfo6 sat_sfw3B;
        } in 
          case >=# [ww_sfw2X 11#] of {
            __DEFAULT -> p_sfw32 w_sfw31;
            1# ->
                let {
                  sat_sfw3E [Occ=Once] :: [GHC.Types.Char]
                  [LclId] =
                      [w_sfw31 p_sfw32] \u []
                          let {
                            sat_sfw3D [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)2 w_sfw31];
                          } in  p_sfw32 sat_sfw3D;
                } in  : [GHC.Show.$fShow(,)4 sat_sfw3E];
          };

GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.StaticPtr.StaticPtrInfo -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U,1*U(U(U),U(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sfw3F w1_sfw3G w2_sfw3H]
        case w_sfw3F of {
          GHC.Types.I# ww1_sfw3J [Occ=Once] ->
              case w1_sfw3G of {
                GHC.StaticPtr.StaticPtrInfo ww3_sfw3L [Occ=Once]
                                            ww4_sfw3M [Occ=Once]
                                            ww5_sfw3N [Occ=Once] ->
                    GHC.StaticPtr.$w$cshowsPrec
                        ww1_sfw3J ww3_sfw3L ww4_sfw3M ww5_sfw3N w2_sfw3H;
              };
        };

GHC.StaticPtr.$fShowStaticPtrInfo7 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.StaticPtr.$fShowStaticPtrInfo_$cshow
  :: GHC.StaticPtr.StaticPtrInfo -> GHC.Base.String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U,1*U,1*U(U(U),U(U)))>,
 Unf=OtherCon []] =
    [] \r [x_sfw3O]
        case x_sfw3O of {
          GHC.StaticPtr.StaticPtrInfo ww1_sfw3Q [Occ=Once]
                                      ww2_sfw3R [Occ=Once]
                                      ww3_sfw3S [Occ=Once] ->
              GHC.StaticPtr.$w$cshowsPrec
                  0# ww1_sfw3Q ww2_sfw3R ww3_sfw3S GHC.Types.[];
        };

GHC.StaticPtr.$fShowStaticPtrInfo1
  :: GHC.StaticPtr.StaticPtrInfo -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U(1*U,1*U,1*U(U(U),U(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sfw3T w1_sfw3U]
        case w_sfw3T of {
          GHC.StaticPtr.StaticPtrInfo ww1_sfw3W [Occ=Once]
                                      ww2_sfw3X [Occ=Once]
                                      ww3_sfw3Y [Occ=Once] ->
              GHC.StaticPtr.$w$cshowsPrec
                  0# ww1_sfw3W ww2_sfw3X ww3_sfw3Y w1_sfw3U;
        };

GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList
  :: [GHC.StaticPtr.StaticPtrInfo] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sfw3Z s_sfw40]
        GHC.Show.showList__
            GHC.StaticPtr.$fShowStaticPtrInfo1 ls_sfw3Z s_sfw40;

GHC.StaticPtr.$fShowStaticPtrInfo [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.StaticPtr.StaticPtrInfo
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec
                                    GHC.StaticPtr.$fShowStaticPtrInfo_$cshow
                                    GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList];

GHC.StaticPtr.spInfoSrcLoc
  :: GHC.StaticPtr.StaticPtrInfo -> (GHC.Types.Int, GHC.Types.Int)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLS),1*U(A,A,1*U(U,U))>m,
 Unf=OtherCon []] =
    [] \r [ds_sfw41]
        case ds_sfw41 of {
          GHC.StaticPtr.StaticPtrInfo _ [Occ=Dead]
                                      _ [Occ=Dead]
                                      ds3_sfw45 [Occ=Once] ->
              ds3_sfw45;
        };

GHC.StaticPtr.spInfoModuleName
  :: GHC.StaticPtr.StaticPtrInfo -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),1*U(A,1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sfw46]
        case ds_sfw46 of {
          GHC.StaticPtr.StaticPtrInfo _ [Occ=Dead]
                                      ds2_sfw49 [Occ=Once]
                                      _ [Occ=Dead] ->
              ds2_sfw49;
        };

GHC.StaticPtr.spInfoUnitId
  :: GHC.StaticPtr.StaticPtrInfo -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),1*U(1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sfw4b]
        case ds_sfw4b of {
          GHC.StaticPtr.StaticPtrInfo ds1_sfw4d [Occ=Once]
                                      _ [Occ=Dead]
                                      _ [Occ=Dead] ->
              ds1_sfw4d;
        };

GHC.StaticPtr.deRefStaticPtr
  :: forall a. GHC.StaticPtr.StaticPtr a -> a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLS),1*U(A,A,A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_sfw4g]
        case ds_sfw4g of {
          GHC.StaticPtr.StaticPtr _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  v_sfw4l [Occ=Once] ->
              v_sfw4l;
        };

GHC.StaticPtr.staticKey
  :: forall a. GHC.StaticPtr.StaticPtr a -> GHC.StaticPtr.StaticKey
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SSLL),1*U(U,U,A,A)>m,
 Unf=OtherCon []] =
    [] \r [ds_sfw4m]
        case ds_sfw4m of {
          GHC.StaticPtr.StaticPtr w0_sfw4o [Occ=Once]
                                  w1_sfw4p [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              GHC.Fingerprint.Type.Fingerprint [w0_sfw4o w1_sfw4p];
        };

GHC.StaticPtr.staticPtrInfo
  :: forall a.
     GHC.StaticPtr.StaticPtr a -> GHC.StaticPtr.StaticPtrInfo
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSL),1*U(A,A,1*U(U,U,U),A)>m,
 Unf=OtherCon []] =
    [] \r [ds_sfw4s]
        case ds_sfw4s of {
          GHC.StaticPtr.StaticPtr _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  n_sfw4w [Occ=Once]
                                  _ [Occ=Dead] ->
              n_sfw4w;
        };

GHC.StaticPtr.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.StaticPtr.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$trModule4];

GHC.StaticPtr.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.StaticPtr"#;

GHC.StaticPtr.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$trModule2];

GHC.StaticPtr.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.StaticPtr.$trModule3
                                     GHC.StaticPtr.$trModule1];

$krep_rfvlo :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep1_rfvlp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep2_rfvlq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep3_rfvlr :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rfvlp GHC.Types.[]];

$krep4_rfvls :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep3_rfvlr];

$krep5_rfvlt :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rfvlo GHC.Types.[]];

$krep6_rfvlu :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rfvlo $krep5_rfvlt];

$krep7_rfvlv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep6_rfvlu];

GHC.StaticPtr.$tcIsStatic1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*Arr*
                                         $krep2_rfvlq];

$krep8_rfvlw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep9_rfvlx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord#
                                              GHC.Types.[]];

GHC.StaticPtr.$tcStaticPtrInfo2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "StaticPtrInfo"#;

GHC.StaticPtr.$tcStaticPtrInfo1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tcStaticPtrInfo2];

GHC.StaticPtr.$tcStaticPtrInfo :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9809180260958205610##
                                    5820027882667808380##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tcStaticPtrInfo1
                                    0#
                                    GHC.Types.krep$*];

$krep10_rfvly :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.StaticPtr.$tcStaticPtrInfo
                                              GHC.Types.[]];

$krep11_rfvlz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_rfvlv $krep10_rfvly];

$krep12_rfvlA :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rfvls $krep11_rfvlz];

GHC.StaticPtr.$tc'StaticPtrInfo1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rfvls $krep12_rfvlA];

GHC.StaticPtr.$tc'StaticPtrInfo3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'StaticPtrInfo"#;

GHC.StaticPtr.$tc'StaticPtrInfo2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tc'StaticPtrInfo3];

GHC.StaticPtr.$tc'StaticPtrInfo :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12332739532642204119##
                                    17636067641148941699##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tc'StaticPtrInfo2
                                    0#
                                    GHC.StaticPtr.$tc'StaticPtrInfo1];

GHC.StaticPtr.$tcStaticPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "StaticPtr"#;

GHC.StaticPtr.$tcStaticPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tcStaticPtr2];

GHC.StaticPtr.$tcStaticPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6538784347774135987##
                                    451387415853290179##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tcStaticPtr1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep13_rfvlB :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep8_rfvlw GHC.Types.[]];

$krep14_rfvlC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.StaticPtr.$tcStaticPtr
                                              $krep13_rfvlB];

$krep15_rfvlD :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rfvlw $krep14_rfvlC];

$krep16_rfvlE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_rfvly $krep15_rfvlD];

$krep17_rfvlF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_rfvlx $krep16_rfvlE];

GHC.StaticPtr.$tc'StaticPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_rfvlx $krep17_rfvlF];

GHC.StaticPtr.$tc'StaticPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'StaticPtr"#;

GHC.StaticPtr.$tc'StaticPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tc'StaticPtr3];

GHC.StaticPtr.$tc'StaticPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3211798574336347514##
                                    9816765169815661376##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tc'StaticPtr2
                                    1#
                                    GHC.StaticPtr.$tc'StaticPtr1];

GHC.StaticPtr.$tcIsStatic3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IsStatic"#;

GHC.StaticPtr.$tcIsStatic2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tcIsStatic3];

GHC.StaticPtr.$tcIsStatic :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12653381617957437053##
                                    3253287492145771790##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tcIsStatic2
                                    0#
                                    GHC.StaticPtr.$tcIsStatic1];

GHC.StaticPtr.$wunsafeLookupStaticPtr [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe (GHC.StaticPtr.StaticPtr a) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sfw4y ww1_sfw4z w_sfw4A]
        let {
          vals_sfw4B [Occ=OnceL] :: GHC.Word.Word64
          [LclId, Unf=OtherCon []] =
              CCCS GHC.Word.W64#! [ww_sfw4y]; } in
        let {
          vals1_sfw4C [Occ=OnceL] :: GHC.Word.Word64
          [LclId, Unf=OtherCon []] =
              CCCS GHC.Word.W64#! [ww1_sfw4z]; } in
        let {
          vals2_sfw4D [Occ=OnceL] :: [GHC.Word.Word64]
          [LclId, Unf=OtherCon []] =
              CCCS :! [vals1_sfw4C GHC.Types.[]]; } in
        let {
          vals3_sfw4E [Dmd=<S,U>] :: [GHC.Word.Word64]
          [LclId, Unf=OtherCon []] =
              CCCS :! [vals_sfw4B vals2_sfw4D];
        } in 
          case GHC.List.$wlenAcc vals3_sfw4E 0# of ww2_sfw4F {
            __DEFAULT ->
                case *# [ww2_sfw4F 8#] of sat_sfw4G {
                  __DEFAULT ->
                      case newAlignedPinnedByteArray# [sat_sfw4G 8# w_sfw4A] of {
                        (#,#) ipv_sfw4I [Occ=Once] ipv1_sfw4J [Occ=Once] ->
                            case unsafeFreezeByteArray# [ipv1_sfw4J ipv_sfw4I] of {
                              (#,#) ipv2_sfw4L [Occ=Once] ipv3_sfw4M ->
                                  case byteArrayContents# [ipv3_sfw4M] of ptr_sfw4N [Dmd=<S,U>] {
                                    __DEFAULT ->
                                        let-no-escape {
                                          exit_sfw4O [Occ=OnceL!T[1], Dmd=<C(S),C(U(U,U))>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     GHC.Base.Maybe
                                                       (GHC.StaticPtr.StaticPtr a_sfvff) #)
                                          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                              sat-only [ipv3_sfw4M ptr_sfw4N] \r [eta1_sfw4P]
                                                  case
                                                      __pkg_ccall base-4.11.0.0 [ptr_sfw4N
                                                                                 eta1_sfw4P]
                                                  of
                                                  { (#,#) ds_sfw4S [Occ=Once] ds1_sfw4T ->
                                                        case addrToAny# [ds1_sfw4T] of {
                                                          Unit# spe_sfw4V [Occ=Once] ->
                                                              case
                                                                  touch# [ipv3_sfw4M ds_sfw4S]
                                                              of
                                                              s4_sfw4W
                                                              { __DEFAULT ->
                                                                    case
                                                                        eqAddr# [ds1_sfw4T __NULL]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          let {
                                                                            sat_sfw4Y [Occ=Once]
                                                                              :: GHC.Base.Maybe
                                                                                   (GHC.StaticPtr.StaticPtr
                                                                                      a_sfvff)
                                                                            [LclId] =
                                                                                CCCS GHC.Base.Just! [spe_sfw4V];
                                                                          } in 
                                                                            (#,#) [s4_sfw4W
                                                                                   sat_sfw4Y];
                                                                      1# ->
                                                                          (#,#) [s4_sfw4W
                                                                                 GHC.Base.Nothing];
                                                                    };
                                                              };
                                                        };
                                                  };
                                        } in 
                                          let-no-escape {
                                            go_sfw4Z [Occ=LoopBreakerT[3]]
                                              :: [GHC.Word.Word64]
                                                 -> GHC.Prim.Int#
                                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Base.Maybe
                                                         (GHC.StaticPtr.StaticPtr a_sfvff) #)
                                            [LclId[JoinId(3)],
                                             Arity=3,
                                             Str=<S,1*U><L,U><S,U>,
                                             Unf=OtherCon []] =
                                                sat-only [ptr_sfw4N
                                                          exit_sfw4O
                                                          go_sfw4Z] \r [ds_sfw50
                                                                        ds1_sfw51
                                                                        eta1_sfw52]
                                                    case ds_sfw50 of {
                                                      [] -> exit_sfw4O eta1_sfw52;
                                                      : val_sfw54 [Occ=Once!]
                                                        vals4_sfw55 [Occ=Once] ->
                                                          case val_sfw54 of {
                                                            GHC.Word.W64# x_sfw57 [Occ=Once] ->
                                                                case
                                                                    writeWord64OffAddr# [ptr_sfw4N
                                                                                         ds1_sfw51
                                                                                         x_sfw57
                                                                                         eta1_sfw52]
                                                                of
                                                                s2_sfw58
                                                                { __DEFAULT ->
                                                                      case
                                                                          +# [ds1_sfw51 1#]
                                                                      of
                                                                      sat_sfw59
                                                                      { __DEFAULT ->
                                                                            go_sfw4Z
                                                                                vals4_sfw55
                                                                                sat_sfw59
                                                                                s2_sfw58;
                                                                      };
                                                                };
                                                          };
                                                    };
                                          } in  go_sfw4Z vals3_sfw4E 0# ipv2_sfw4L;
                                  };
                            };
                      };
                };
          };

GHC.StaticPtr.unsafeLookupStaticPtr1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Fingerprint.Type.Fingerprint
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe (GHC.StaticPtr.StaticPtr a) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sfw5a w1_sfw5b]
        case w_sfw5a of {
          GHC.Fingerprint.Type.Fingerprint ww1_sfw5d [Occ=Once]
                                           ww2_sfw5e [Occ=Once] ->
              GHC.StaticPtr.$wunsafeLookupStaticPtr ww1_sfw5d ww2_sfw5e w1_sfw5b;
        };

GHC.StaticPtr.unsafeLookupStaticPtr
  :: forall a.
     GHC.StaticPtr.StaticKey
     -> GHC.Types.IO (GHC.Base.Maybe (GHC.StaticPtr.StaticPtr a))
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.StaticPtr.unsafeLookupStaticPtr1 eta_B2 eta_B1;

lvl_rfvlG :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC/StaticPtr.hs:131:41-79|lambda"#;

lvl1_rfvlH :: GHC.Types.IO GHC.Fingerprint.Type.Fingerprint
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.patError lvl_rfvlG;

GHC.StaticPtr.staticPtrKeys2 [Occ=LoopBreaker]
  :: [GHC.Ptr.Ptr GHC.Word.Word64]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           [GHC.Fingerprint.Type.Fingerprint] #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ds_sfw5f eta_sfw5g]
        case ds_sfw5f of {
          [] -> (#,#) [eta_sfw5g GHC.Types.[]];
          : y_sfw5i ys_sfw5j [Occ=Once] ->
              let-no-escape {
                exit_sfw5k [Occ=OnceL!T[2], Dmd=<C(C(S)),C(C1(U(U,U)))>]
                  :: [GHC.Word.Word64]
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                           [GHC.Fingerprint.Type.Fingerprint] #)
                [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
                    sat-only [y_sfw5i ys_sfw5j] \r [w3_sfw5l w4_sfw5m]
                        case y_sfw5i of {
                          GHC.Ptr.Ptr a_sfw5o [Occ=Once] ->
                              case readWord64OffAddr# [a_sfw5o 0# w4_sfw5m] of {
                                (#,#) ipv_sfw5q [Occ=Once] ipv1_sfw5r [Occ=Once] ->
                                    case w3_sfw5l of {
                                      [] -> lvl1_rfvlH;
                                      : w2_sfw5u [Occ=Once!] ds1_sfw5v [Occ=Once!] ->
                                          case ds1_sfw5v of {
                                            [] ->
                                                case
                                                    GHC.StaticPtr.staticPtrKeys2 ys_sfw5j ipv_sfw5q
                                                of
                                                { (#,#) ipv2_sfw5y [Occ=Once]
                                                        ipv3_sfw5z [Occ=Once] ->
                                                      let {
                                                        sat_sfw5C [Occ=Once]
                                                          :: GHC.Fingerprint.Type.Fingerprint
                                                        [LclId] =
                                                            [ipv1_sfw5r w2_sfw5u] \u []
                                                                case w2_sfw5u of {
                                                                  GHC.Word.W64# dt1_sfw5B [Occ=Once] ->
                                                                      GHC.Fingerprint.Type.Fingerprint [ipv1_sfw5r
                                                                                                        dt1_sfw5B];
                                                                }; } in
                                                      let {
                                                        sat_sfw5D [Occ=Once]
                                                          :: [GHC.Fingerprint.Type.Fingerprint]
                                                        [LclId] =
                                                            CCCS :! [sat_sfw5C ipv3_sfw5z];
                                                      } in  (#,#) [ipv2_sfw5y sat_sfw5D];
                                                };
                                            : _ [Occ=Dead] _ [Occ=Dead] -> lvl1_rfvlH;
                                          };
                                    };
                              };
                        };
              } in 
                let-no-escape {
                  $wf_sfw5H [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                    :: GHC.Prim.Int#
                       -> [GHC.Word.Word64]
                       -> GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                             [GHC.Fingerprint.Type.Fingerprint] #)
                  [LclId[JoinId(3)],
                   Arity=3,
                   Str=<S,1*U><L,U><S,U>,
                   Unf=OtherCon []] =
                      sat-only [y_sfw5i exit_sfw5k $wf_sfw5H] \r [ww1_sfw5I
                                                                  w3_sfw5J
                                                                  w4_sfw5K]
                          case ww1_sfw5I of ds1_sfw5L {
                            __DEFAULT ->
                                case y_sfw5i of {
                                  GHC.Ptr.Ptr a_sfw5N [Occ=Once] ->
                                      case readWord64OffAddr# [a_sfw5N ds1_sfw5L w4_sfw5K] of {
                                        (#,#) ipv_sfw5P [Occ=Once] ipv1_sfw5Q [Occ=Once] ->
                                            let {
                                              sat_sfw5S [Occ=Once] :: GHC.Word.Word64
                                              [LclId] =
                                                  CCCS GHC.Word.W64#! [ipv1_sfw5Q]; } in
                                            let {
                                              sat_sfw5T [Occ=Once] :: [GHC.Word.Word64]
                                              [LclId] =
                                                  CCCS :! [sat_sfw5S w3_sfw5J];
                                            } in 
                                              case -# [ds1_sfw5L 1#] of sat_sfw5R {
                                                __DEFAULT ->
                                                    $wf_sfw5H sat_sfw5R sat_sfw5T ipv_sfw5P;
                                              };
                                      };
                                };
                            0# -> exit_sfw5k w3_sfw5J w4_sfw5K;
                          };
                } in  $wf_sfw5H 1# GHC.Types.[] eta_sfw5g;
        };

GHC.StaticPtr.staticPtrKeys1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           [GHC.StaticPtr.StaticKey] #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_sfw5U]
        case __pkg_ccall base-4.11.0.0 [s_sfw5U] of {
          (#,#) ds_sfw5X [Occ=Once] ds1_sfw5Y [Occ=Once] ->
              case narrow32Int# [ds1_sfw5Y] of ipv1_sfw5Z [Dmd=<S,U>] {
                __DEFAULT ->
                    case *# [ipv1_sfw5Z 8#] of sat_sfw60 {
                      __DEFAULT ->
                          case newAlignedPinnedByteArray# [sat_sfw60 8# ds_sfw5X] of {
                            (#,#) ipv_sfw62 [Occ=Once] ipv2_sfw63 [Occ=Once] ->
                                case unsafeFreezeByteArray# [ipv2_sfw63 ipv_sfw62] of {
                                  (#,#) ipv3_sfw65 [Occ=Once] ipv4_sfw66 ->
                                      case byteArrayContents# [ipv4_sfw66] of p_sfw67 [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case
                                                __pkg_ccall base-4.11.0.0 [p_sfw67
                                                                           ipv1_sfw5Z
                                                                           ipv3_sfw65]
                                            of
                                            { (#,#) ds5_sfw6a [Occ=Once*] ds6_sfw6b [Occ=Once] ->
                                                  case
                                                      narrow32Int# [ds6_sfw6b]
                                                  of
                                                  ww_sfw6c [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case <=# [ww_sfw6c 0#] of {
                                                          __DEFAULT ->
                                                              case -# [ww_sfw6c 1#] of sat_sfw6B {
                                                                __DEFAULT ->
                                                                    let-no-escape {
                                                                      exit_sfw6e [Occ=OnceL!T[2],
                                                                                  Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                                        :: [GHC.Ptr.Ptr
                                                                              GHC.Word.Word64]
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 [GHC.StaticPtr.StaticKey] #)
                                                                      [LclId[JoinId(2)],
                                                                       Arity=2,
                                                                       Str=<L,U><S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [ipv4_sfw66
                                                                                    p_sfw67] \r [w3_sfw6f
                                                                                                 w4_sfw6g]
                                                                              case
                                                                                  readAddrOffAddr# [p_sfw67
                                                                                                    0#
                                                                                                    w4_sfw6g]
                                                                              of
                                                                              { (#,#) ipv5_sfw6i [Occ=Once]
                                                                                      ipv6_sfw6j [Occ=Once] ->
                                                                                    let {
                                                                                      sat_sfw6k [Occ=Once]
                                                                                        :: GHC.Ptr.Ptr
                                                                                             GHC.Word.Word64
                                                                                      [LclId] =
                                                                                          CCCS GHC.Ptr.Ptr! [ipv6_sfw6j]; } in
                                                                                    let {
                                                                                      sat_sfw6l [Occ=Once]
                                                                                        :: [GHC.Ptr.Ptr
                                                                                              GHC.Word.Word64]
                                                                                      [LclId] =
                                                                                          CCCS :! [sat_sfw6k
                                                                                                   w3_sfw6f];
                                                                                    } in 
                                                                                      case
                                                                                          GHC.StaticPtr.staticPtrKeys2
                                                                                              sat_sfw6l
                                                                                              ipv5_sfw6i
                                                                                      of
                                                                                      { (#,#) ipv7_sfw6n [Occ=Once]
                                                                                              ipv8_sfw6o [Occ=Once] ->
                                                                                            case
                                                                                                touch# [ipv4_sfw66
                                                                                                        ipv7_sfw6n]
                                                                                            of
                                                                                            s4_sfw6p
                                                                                            { __DEFAULT ->
                                                                                                  (#,#) [s4_sfw6p
                                                                                                         ipv8_sfw6o];
                                                                                            };
                                                                                      };
                                                                              };
                                                                    } in 
                                                                      let-no-escape {
                                                                        $wf_sfw6q [InlPrag=NOUSERINLINE[0],
                                                                                   Occ=LoopBreakerT[3]]
                                                                          :: GHC.Prim.Int#
                                                                             -> [GHC.Ptr.Ptr
                                                                                   GHC.Word.Word64]
                                                                             -> GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   [GHC.StaticPtr.StaticKey] #)
                                                                        [LclId[JoinId(3)],
                                                                         Arity=3,
                                                                         Str=<S,1*U><L,U><S,U>,
                                                                         Unf=OtherCon []] =
                                                                            sat-only [p_sfw67
                                                                                      exit_sfw6e
                                                                                      $wf_sfw6q] \r [ww1_sfw6r
                                                                                                     w3_sfw6s
                                                                                                     w4_sfw6t]
                                                                                case
                                                                                    ww1_sfw6r
                                                                                of
                                                                                ds7_sfw6u
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          readAddrOffAddr# [p_sfw67
                                                                                                            ds7_sfw6u
                                                                                                            w4_sfw6t]
                                                                                      of
                                                                                      { (#,#) ipv5_sfw6w [Occ=Once]
                                                                                              ipv6_sfw6x [Occ=Once] ->
                                                                                            let {
                                                                                              sat_sfw6z [Occ=Once]
                                                                                                :: GHC.Ptr.Ptr
                                                                                                     GHC.Word.Word64
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Ptr.Ptr! [ipv6_sfw6x]; } in
                                                                                            let {
                                                                                              sat_sfw6A [Occ=Once]
                                                                                                :: [GHC.Ptr.Ptr
                                                                                                      GHC.Word.Word64]
                                                                                              [LclId] =
                                                                                                  CCCS :! [sat_sfw6z
                                                                                                           w3_sfw6s];
                                                                                            } in 
                                                                                              case
                                                                                                  -# [ds7_sfw6u
                                                                                                      1#]
                                                                                              of
                                                                                              sat_sfw6y
                                                                                              { __DEFAULT ->
                                                                                                    $wf_sfw6q
                                                                                                        sat_sfw6y
                                                                                                        sat_sfw6A
                                                                                                        ipv5_sfw6w;
                                                                                              };
                                                                                      };
                                                                                  0# ->
                                                                                      exit_sfw6e
                                                                                          w3_sfw6s
                                                                                          w4_sfw6t;
                                                                                };
                                                                      } in 
                                                                        $wf_sfw6q
                                                                            sat_sfw6B
                                                                            GHC.Types.[]
                                                                            ds5_sfw6a;
                                                              };
                                                          1# ->
                                                              case
                                                                  GHC.StaticPtr.staticPtrKeys2
                                                                      GHC.Types.[] ds5_sfw6a
                                                              of
                                                              { (#,#) ipv5_sfw6D [Occ=Once]
                                                                      ipv6_sfw6E [Occ=Once] ->
                                                                    case
                                                                        touch# [ipv4_sfw66
                                                                                ipv5_sfw6D]
                                                                    of
                                                                    s4_sfw6F
                                                                    { __DEFAULT ->
                                                                          (#,#) [s4_sfw6F
                                                                                 ipv6_sfw6E];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.StaticPtr.staticPtrKeys [InlPrag=NOINLINE]
  :: GHC.Types.IO [GHC.StaticPtr.StaticKey]
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.StaticPtr.staticPtrKeys1 eta_B1;

GHC.StaticPtr.StaticPtr
  :: forall a.
     GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.StaticPtr.StaticPtrInfo
     -> a
     -> GHC.StaticPtr.StaticPtr a
[GblId[DataCon],
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.StaticPtr.StaticPtr [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.StaticPtr.StaticPtrInfo
  :: GHC.Base.String
     -> GHC.Base.String
     -> (GHC.Types.Int, GHC.Types.Int)
     -> GHC.StaticPtr.StaticPtrInfo
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.StaticPtr.StaticPtrInfo [eta_B3 eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:11:13.967007507 UTC

GHC.StaticPtr.fromStaticPtr [InlPrag=INLINE]
  :: forall (p :: * -> *).
     GHC.StaticPtr.IsStatic p =>
     forall a. GHC.StaticPtr.StaticPtr a -> p a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_sfw2W] v_sfw2W;

GHC.StaticPtr.$fIsStaticStaticPtr [InlPrag=INLINE (sat-args=0)]
  :: GHC.StaticPtr.IsStatic GHC.StaticPtr.StaticPtr
[GblId[DFunId(nt)],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.id eta_B1;

GHC.StaticPtr.$fShowStaticPtrInfo6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "StaticPtrInfo {"#;

GHC.StaticPtr.$fShowStaticPtrInfo5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "spInfoUnitId = "#;

GHC.StaticPtr.$fShowStaticPtrInfo4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "spInfoModuleName = "#;

GHC.StaticPtr.$fShowStaticPtrInfo3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "spInfoSrcLoc = "#;

GHC.StaticPtr.$fShowStaticPtrInfo2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

GHC.StaticPtr.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Base.String
     -> GHC.Base.String
     -> (GHC.Types.Int, GHC.Types.Int)
     -> GHC.Base.String
     -> GHC.Base.String
[GblId,
 Arity=5,
 Str=<S,U><L,1*U><L,1*U><L,1*U(U(U),U(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sfw2X ww1_sfw2Y ww2_sfw2Z ww3_sfw30 w_sfw31]
        let {
          p_sfw32 [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [ww1_sfw2Y ww2_sfw2Z ww3_sfw30] \r [x_sfw33]
                  let {
                    sat_sfw3B [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww1_sfw2Y ww2_sfw2Z ww3_sfw30 x_sfw33] \u []
                            let {
                              sat_sfw3z [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [ww1_sfw2Y ww2_sfw2Z ww3_sfw30 x_sfw33] \u []
                                      let {
                                        sat_sfw3x [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww2_sfw2Z ww3_sfw30 x_sfw33] \u []
                                                let {
                                                  sat_sfw3w [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [ww2_sfw2Z ww3_sfw30 x_sfw33] \s []
                                                          let {
                                                            sat_sfw3u [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [ww2_sfw2Z ww3_sfw30 x_sfw33] \u []
                                                                    let {
                                                                      sat_sfw3s [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [ww3_sfw30 x_sfw33] \u []
                                                                              let {
                                                                                sat_sfw3r [Occ=Once,
                                                                                           Dmd=<L,1*U>]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    [ww3_sfw30
                                                                                     x_sfw33] \s []
                                                                                        let {
                                                                                          sat_sfw3q [Occ=Once]
                                                                                            :: [GHC.Types.Char]
                                                                                          [LclId] =
                                                                                              [ww3_sfw30
                                                                                               x_sfw33] \u []
                                                                                                  case
                                                                                                      ww3_sfw30
                                                                                                  of
                                                                                                  { (,) ww5_sfw35 [Occ=OnceL!]
                                                                                                        ww6_sfw36 [Occ=OnceL!] ->
                                                                                                        let {
                                                                                                          sat_sfw3p [Occ=Once]
                                                                                                            :: [GHC.Types.Char]
                                                                                                          [LclId] =
                                                                                                              [x_sfw33
                                                                                                               ww5_sfw35
                                                                                                               ww6_sfw36] \u []
                                                                                                                  let {
                                                                                                                    sat_sfw3n [Occ=Once]
                                                                                                                      :: [GHC.Types.Char]
                                                                                                                    [LclId] =
                                                                                                                        [x_sfw33] \u []
                                                                                                                            GHC.CString.unpackAppendCString#
                                                                                                                                GHC.StaticPtr.$fShowStaticPtrInfo2
                                                                                                                                x_sfw33; } in
                                                                                                                  let {
                                                                                                                    sat_sfw3o [Occ=Once]
                                                                                                                      :: GHC.Base.String
                                                                                                                    [LclId] =
                                                                                                                        CCCS :! [GHC.Show.$fShow(,)2
                                                                                                                                 sat_sfw3n]; } in
                                                                                                                  let {
                                                                                                                    sat_sfw3k [Occ=Once]
                                                                                                                      :: GHC.Show.ShowS
                                                                                                                    [LclId] =
                                                                                                                        [ww6_sfw36] \r [w2_sfw3e]
                                                                                                                            case
                                                                                                                                ww6_sfw36
                                                                                                                            of
                                                                                                                            { GHC.Types.I# ww8_sfw3g [Occ=Once] ->
                                                                                                                                  case
                                                                                                                                      GHC.Show.$wshowSignedInt
                                                                                                                                          0#
                                                                                                                                          ww8_sfw3g
                                                                                                                                          w2_sfw3e
                                                                                                                                  of
                                                                                                                                  { (#,#) ww10_sfw3i [Occ=Once]
                                                                                                                                          ww11_sfw3j [Occ=Once] ->
                                                                                                                                        : [ww10_sfw3i
                                                                                                                                           ww11_sfw3j];
                                                                                                                                  };
                                                                                                                            }; } in
                                                                                                                  let {
                                                                                                                    sat_sfw3l [Occ=Once]
                                                                                                                      :: [GHC.Show.ShowS]
                                                                                                                    [LclId] =
                                                                                                                        CCCS :! [sat_sfw3k
                                                                                                                                 GHC.Types.[]]; } in
                                                                                                                  let {
                                                                                                                    sat_sfw3d [Occ=Once]
                                                                                                                      :: GHC.Show.ShowS
                                                                                                                    [LclId] =
                                                                                                                        [ww5_sfw35] \r [w2_sfw37]
                                                                                                                            case
                                                                                                                                ww5_sfw35
                                                                                                                            of
                                                                                                                            { GHC.Types.I# ww8_sfw39 [Occ=Once] ->
                                                                                                                                  case
                                                                                                                                      GHC.Show.$wshowSignedInt
                                                                                                                                          0#
                                                                                                                                          ww8_sfw39
                                                                                                                                          w2_sfw37
                                                                                                                                  of
                                                                                                                                  { (#,#) ww10_sfw3b [Occ=Once]
                                                                                                                                          ww11_sfw3c [Occ=Once] ->
                                                                                                                                        : [ww10_sfw3b
                                                                                                                                           ww11_sfw3c];
                                                                                                                                  };
                                                                                                                            }; } in
                                                                                                                  let {
                                                                                                                    sat_sfw3m [Occ=Once]
                                                                                                                      :: [GHC.Base.String
                                                                                                                          -> GHC.Base.String]
                                                                                                                    [LclId] =
                                                                                                                        CCCS :! [sat_sfw3d
                                                                                                                                 sat_sfw3l];
                                                                                                                  } in 
                                                                                                                    GHC.Show.$fShow(,)_go1
                                                                                                                        sat_sfw3m
                                                                                                                        sat_sfw3o;
                                                                                                        } in 
                                                                                                          : [GHC.Show.$fShow(,)4
                                                                                                             sat_sfw3p];
                                                                                                  };
                                                                                        } in 
                                                                                          GHC.CString.unpackAppendCString#
                                                                                              GHC.StaticPtr.$fShowStaticPtrInfo3
                                                                                              sat_sfw3q;
                                                                              } in 
                                                                                GHC.Base.++
                                                                                    GHC.Show.showCommaSpace1
                                                                                    sat_sfw3r; } in
                                                                    let {
                                                                      sat_sfw3t [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   sat_sfw3s];
                                                                    } in 
                                                                      GHC.Show.showLitString
                                                                          ww2_sfw2Z sat_sfw3t; } in
                                                          let {
                                                            sat_sfw3v [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)3
                                                                         sat_sfw3u];
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                GHC.StaticPtr.$fShowStaticPtrInfo4
                                                                sat_sfw3v;
                                                } in 
                                                  GHC.Base.++
                                                      GHC.Show.showCommaSpace1 sat_sfw3w; } in
                                      let {
                                        sat_sfw3y [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)3 sat_sfw3x];
                                      } in  GHC.Show.showLitString ww1_sfw2Y sat_sfw3y; } in
                            let {
                              sat_sfw3A [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  CCCS :! [GHC.Show.$fShow(,)3 sat_sfw3z];
                            } in 
                              GHC.CString.unpackAppendCString#
                                  GHC.StaticPtr.$fShowStaticPtrInfo5 sat_sfw3A;
                  } in 
                    GHC.CString.unpackAppendCString#
                        GHC.StaticPtr.$fShowStaticPtrInfo6 sat_sfw3B;
        } in 
          case >=# [ww_sfw2X 11#] of {
            __DEFAULT -> p_sfw32 w_sfw31;
            1# ->
                let {
                  sat_sfw3E [Occ=Once] :: [GHC.Types.Char]
                  [LclId] =
                      [w_sfw31 p_sfw32] \u []
                          let {
                            sat_sfw3D [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)2 w_sfw31];
                          } in  p_sfw32 sat_sfw3D;
                } in  : [GHC.Show.$fShow(,)4 sat_sfw3E];
          };

GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.StaticPtr.StaticPtrInfo -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U,1*U(U(U),U(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sfw3F w1_sfw3G w2_sfw3H]
        case w_sfw3F of {
          GHC.Types.I# ww1_sfw3J [Occ=Once] ->
              case w1_sfw3G of {
                GHC.StaticPtr.StaticPtrInfo ww3_sfw3L [Occ=Once]
                                            ww4_sfw3M [Occ=Once]
                                            ww5_sfw3N [Occ=Once] ->
                    GHC.StaticPtr.$w$cshowsPrec
                        ww1_sfw3J ww3_sfw3L ww4_sfw3M ww5_sfw3N w2_sfw3H;
              };
        };

GHC.StaticPtr.$fShowStaticPtrInfo7 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.StaticPtr.$fShowStaticPtrInfo_$cshow
  :: GHC.StaticPtr.StaticPtrInfo -> GHC.Base.String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U,1*U,1*U(U(U),U(U)))>,
 Unf=OtherCon []] =
    [] \r [x_sfw3O]
        case x_sfw3O of {
          GHC.StaticPtr.StaticPtrInfo ww1_sfw3Q [Occ=Once]
                                      ww2_sfw3R [Occ=Once]
                                      ww3_sfw3S [Occ=Once] ->
              GHC.StaticPtr.$w$cshowsPrec
                  0# ww1_sfw3Q ww2_sfw3R ww3_sfw3S GHC.Types.[];
        };

GHC.StaticPtr.$fShowStaticPtrInfo1
  :: GHC.StaticPtr.StaticPtrInfo -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U(1*U,1*U,1*U(U(U),U(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sfw3T w1_sfw3U]
        case w_sfw3T of {
          GHC.StaticPtr.StaticPtrInfo ww1_sfw3W [Occ=Once]
                                      ww2_sfw3X [Occ=Once]
                                      ww3_sfw3Y [Occ=Once] ->
              GHC.StaticPtr.$w$cshowsPrec
                  0# ww1_sfw3W ww2_sfw3X ww3_sfw3Y w1_sfw3U;
        };

GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList
  :: [GHC.StaticPtr.StaticPtrInfo] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sfw3Z s_sfw40]
        GHC.Show.showList__
            GHC.StaticPtr.$fShowStaticPtrInfo1 ls_sfw3Z s_sfw40;

GHC.StaticPtr.$fShowStaticPtrInfo [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.StaticPtr.StaticPtrInfo
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec
                                    GHC.StaticPtr.$fShowStaticPtrInfo_$cshow
                                    GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList];

GHC.StaticPtr.spInfoSrcLoc
  :: GHC.StaticPtr.StaticPtrInfo -> (GHC.Types.Int, GHC.Types.Int)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLS),1*U(A,A,1*U(U,U))>m,
 Unf=OtherCon []] =
    [] \r [ds_sfw41]
        case ds_sfw41 of {
          GHC.StaticPtr.StaticPtrInfo _ [Occ=Dead]
                                      _ [Occ=Dead]
                                      ds3_sfw45 [Occ=Once] ->
              ds3_sfw45;
        };

GHC.StaticPtr.spInfoModuleName
  :: GHC.StaticPtr.StaticPtrInfo -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),1*U(A,1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sfw46]
        case ds_sfw46 of {
          GHC.StaticPtr.StaticPtrInfo _ [Occ=Dead]
                                      ds2_sfw49 [Occ=Once]
                                      _ [Occ=Dead] ->
              ds2_sfw49;
        };

GHC.StaticPtr.spInfoUnitId
  :: GHC.StaticPtr.StaticPtrInfo -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),1*U(1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sfw4b]
        case ds_sfw4b of {
          GHC.StaticPtr.StaticPtrInfo ds1_sfw4d [Occ=Once]
                                      _ [Occ=Dead]
                                      _ [Occ=Dead] ->
              ds1_sfw4d;
        };

GHC.StaticPtr.deRefStaticPtr
  :: forall a. GHC.StaticPtr.StaticPtr a -> a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLS),1*U(A,A,A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_sfw4g]
        case ds_sfw4g of {
          GHC.StaticPtr.StaticPtr _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  v_sfw4l [Occ=Once] ->
              v_sfw4l;
        };

GHC.StaticPtr.staticKey
  :: forall a. GHC.StaticPtr.StaticPtr a -> GHC.StaticPtr.StaticKey
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SSLL),1*U(U,U,A,A)>m,
 Unf=OtherCon []] =
    [] \r [ds_sfw4m]
        case ds_sfw4m of {
          GHC.StaticPtr.StaticPtr w0_sfw4o [Occ=Once]
                                  w1_sfw4p [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              GHC.Fingerprint.Type.Fingerprint [w0_sfw4o w1_sfw4p];
        };

GHC.StaticPtr.staticPtrInfo
  :: forall a.
     GHC.StaticPtr.StaticPtr a -> GHC.StaticPtr.StaticPtrInfo
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSL),1*U(A,A,1*U(U,U,U),A)>m,
 Unf=OtherCon []] =
    [] \r [ds_sfw4s]
        case ds_sfw4s of {
          GHC.StaticPtr.StaticPtr _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  n_sfw4w [Occ=Once]
                                  _ [Occ=Dead] ->
              n_sfw4w;
        };

GHC.StaticPtr.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.StaticPtr.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$trModule4];

GHC.StaticPtr.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.StaticPtr"#;

GHC.StaticPtr.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$trModule2];

GHC.StaticPtr.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.StaticPtr.$trModule3
                                     GHC.StaticPtr.$trModule1];

$krep_rfvlo :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep1_rfvlp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep2_rfvlq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep3_rfvlr :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rfvlp GHC.Types.[]];

$krep4_rfvls :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep3_rfvlr];

$krep5_rfvlt :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rfvlo GHC.Types.[]];

$krep6_rfvlu :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rfvlo $krep5_rfvlt];

$krep7_rfvlv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep6_rfvlu];

GHC.StaticPtr.$tcIsStatic1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*Arr*
                                         $krep2_rfvlq];

$krep8_rfvlw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep9_rfvlx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord#
                                              GHC.Types.[]];

GHC.StaticPtr.$tcStaticPtrInfo2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "StaticPtrInfo"#;

GHC.StaticPtr.$tcStaticPtrInfo1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tcStaticPtrInfo2];

GHC.StaticPtr.$tcStaticPtrInfo :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9809180260958205610##
                                    5820027882667808380##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tcStaticPtrInfo1
                                    0#
                                    GHC.Types.krep$*];

$krep10_rfvly :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.StaticPtr.$tcStaticPtrInfo
                                              GHC.Types.[]];

$krep11_rfvlz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_rfvlv $krep10_rfvly];

$krep12_rfvlA :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rfvls $krep11_rfvlz];

GHC.StaticPtr.$tc'StaticPtrInfo1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rfvls $krep12_rfvlA];

GHC.StaticPtr.$tc'StaticPtrInfo3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'StaticPtrInfo"#;

GHC.StaticPtr.$tc'StaticPtrInfo2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tc'StaticPtrInfo3];

GHC.StaticPtr.$tc'StaticPtrInfo :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12332739532642204119##
                                    17636067641148941699##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tc'StaticPtrInfo2
                                    0#
                                    GHC.StaticPtr.$tc'StaticPtrInfo1];

GHC.StaticPtr.$tcStaticPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "StaticPtr"#;

GHC.StaticPtr.$tcStaticPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tcStaticPtr2];

GHC.StaticPtr.$tcStaticPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6538784347774135987##
                                    451387415853290179##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tcStaticPtr1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep13_rfvlB :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep8_rfvlw GHC.Types.[]];

$krep14_rfvlC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.StaticPtr.$tcStaticPtr
                                              $krep13_rfvlB];

$krep15_rfvlD :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rfvlw $krep14_rfvlC];

$krep16_rfvlE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_rfvly $krep15_rfvlD];

$krep17_rfvlF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_rfvlx $krep16_rfvlE];

GHC.StaticPtr.$tc'StaticPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_rfvlx $krep17_rfvlF];

GHC.StaticPtr.$tc'StaticPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'StaticPtr"#;

GHC.StaticPtr.$tc'StaticPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tc'StaticPtr3];

GHC.StaticPtr.$tc'StaticPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3211798574336347514##
                                    9816765169815661376##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tc'StaticPtr2
                                    1#
                                    GHC.StaticPtr.$tc'StaticPtr1];

GHC.StaticPtr.$tcIsStatic3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IsStatic"#;

GHC.StaticPtr.$tcIsStatic2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.StaticPtr.$tcIsStatic3];

GHC.StaticPtr.$tcIsStatic :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12653381617957437053##
                                    3253287492145771790##
                                    GHC.StaticPtr.$trModule
                                    GHC.StaticPtr.$tcIsStatic2
                                    0#
                                    GHC.StaticPtr.$tcIsStatic1];

GHC.StaticPtr.$wunsafeLookupStaticPtr [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe (GHC.StaticPtr.StaticPtr a) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sfw4y ww1_sfw4z void_0E]
        let {
          vals_sfw4B [Occ=OnceL] :: GHC.Word.Word64
          [LclId, Unf=OtherCon []] =
              CCCS GHC.Word.W64#! [ww_sfw4y]; } in
        let {
          vals1_sfw4C [Occ=OnceL] :: GHC.Word.Word64
          [LclId, Unf=OtherCon []] =
              CCCS GHC.Word.W64#! [ww1_sfw4z]; } in
        let {
          vals2_sfw4D [Occ=OnceL] :: [GHC.Word.Word64]
          [LclId, Unf=OtherCon []] =
              CCCS :! [vals1_sfw4C GHC.Types.[]]; } in
        let {
          vals3_sfw4E [Dmd=<S,U>] :: [GHC.Word.Word64]
          [LclId, Unf=OtherCon []] =
              CCCS :! [vals_sfw4B vals2_sfw4D];
        } in 
          case GHC.List.$wlenAcc vals3_sfw4E 0# of ww2_sfw4F {
            __DEFAULT ->
                case *# [ww2_sfw4F 8#] of sat_sfw4G {
                  __DEFAULT ->
                      case newAlignedPinnedByteArray# [sat_sfw4G 8# GHC.Prim.void#] of {
                        Unit# ipv1_sfw4J [Occ=Once] ->
                            case unsafeFreezeByteArray# [ipv1_sfw4J GHC.Prim.void#] of {
                              Unit# ipv3_sfw4M ->
                                  case byteArrayContents# [ipv3_sfw4M] of ptr_sfw4N [Dmd=<S,U>] {
                                    __DEFAULT ->
                                        let-no-escape {
                                          exit_sfw4O [Occ=OnceL!T[1], Dmd=<C(S),C(U(U,U))>]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     GHC.Base.Maybe
                                                       (GHC.StaticPtr.StaticPtr a_sfvff) #)
                                          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                              sat-only [ipv3_sfw4M ptr_sfw4N] \r [void_0E]
                                                  case
                                                      __pkg_ccall base-4.11.0.0 [ptr_sfw4N
                                                                                 GHC.Prim.void#]
                                                  of
                                                  { Unit# ds1_sfw4T ->
                                                        case addrToAny# [ds1_sfw4T] of {
                                                          Unit# spe_sfw4V [Occ=Once] ->
                                                              case
                                                                  touch# [ipv3_sfw4M GHC.Prim.void#]
                                                              of
                                                              s4_sfw4W
                                                              { (##) ->
                                                                    case
                                                                        eqAddr# [ds1_sfw4T __NULL]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          let {
                                                                            sat_sfw4Y [Occ=Once]
                                                                              :: GHC.Base.Maybe
                                                                                   (GHC.StaticPtr.StaticPtr
                                                                                      a_sfvff)
                                                                            [LclId] =
                                                                                CCCS GHC.Base.Just! [spe_sfw4V];
                                                                          } in  Unit# [sat_sfw4Y];
                                                                      1# ->
                                                                          Unit# [GHC.Base.Nothing];
                                                                    };
                                                              };
                                                        };
                                                  };
                                        } in 
                                          let-no-escape {
                                            go_sfw4Z [Occ=LoopBreakerT[3]]
                                              :: [GHC.Word.Word64]
                                                 -> GHC.Prim.Int#
                                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Base.Maybe
                                                         (GHC.StaticPtr.StaticPtr a_sfvff) #)
                                            [LclId[JoinId(3)],
                                             Arity=3,
                                             Str=<S,1*U><L,U><S,U>,
                                             Unf=OtherCon []] =
                                                sat-only [ptr_sfw4N
                                                          exit_sfw4O
                                                          go_sfw4Z] \r [ds_sfw50 ds1_sfw51 void_0E]
                                                    case ds_sfw50 of {
                                                      [] -> exit_sfw4O GHC.Prim.void#;
                                                      : val_sfw54 [Occ=Once!]
                                                        vals4_sfw55 [Occ=Once] ->
                                                          case val_sfw54 of {
                                                            GHC.Word.W64# x_sfw57 [Occ=Once] ->
                                                                case
                                                                    writeWord64OffAddr# [ptr_sfw4N
                                                                                         ds1_sfw51
                                                                                         x_sfw57
                                                                                         GHC.Prim.void#]
                                                                of
                                                                s2_sfw58
                                                                { (##) ->
                                                                      case
                                                                          +# [ds1_sfw51 1#]
                                                                      of
                                                                      sat_sfw59
                                                                      { __DEFAULT ->
                                                                            go_sfw4Z
                                                                                vals4_sfw55
                                                                                sat_sfw59
                                                                                GHC.Prim.void#;
                                                                      };
                                                                };
                                                          };
                                                    };
                                          } in  go_sfw4Z vals3_sfw4E 0# GHC.Prim.void#;
                                  };
                            };
                      };
                };
          };

GHC.StaticPtr.unsafeLookupStaticPtr1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Fingerprint.Type.Fingerprint
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe (GHC.StaticPtr.StaticPtr a) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sfw5a void_0E]
        case w_sfw5a of {
          GHC.Fingerprint.Type.Fingerprint ww1_sfw5d [Occ=Once]
                                           ww2_sfw5e [Occ=Once] ->
              GHC.StaticPtr.$wunsafeLookupStaticPtr
                  ww1_sfw5d ww2_sfw5e GHC.Prim.void#;
        };

GHC.StaticPtr.unsafeLookupStaticPtr
  :: forall a.
     GHC.StaticPtr.StaticKey
     -> GHC.Types.IO (GHC.Base.Maybe (GHC.StaticPtr.StaticPtr a))
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.StaticPtr.unsafeLookupStaticPtr1 eta_B2 GHC.Prim.void#;

lvl_rfvlG :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC/StaticPtr.hs:131:41-79|lambda"#;

lvl1_rfvlH :: GHC.Types.IO GHC.Fingerprint.Type.Fingerprint
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.patError lvl_rfvlG;

GHC.StaticPtr.staticPtrKeys2 [Occ=LoopBreaker]
  :: [GHC.Ptr.Ptr GHC.Word.Word64]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           [GHC.Fingerprint.Type.Fingerprint] #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [ds_sfw5f void_0E]
        case ds_sfw5f of {
          [] -> Unit# [GHC.Types.[]];
          : y_sfw5i ys_sfw5j [Occ=Once] ->
              let-no-escape {
                exit_sfw5k [Occ=OnceL!T[2], Dmd=<C(C(S)),C(C1(U(U,U)))>]
                  :: [GHC.Word.Word64]
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                           [GHC.Fingerprint.Type.Fingerprint] #)
                [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
                    sat-only [y_sfw5i ys_sfw5j] \r [w3_sfw5l void_0E]
                        case y_sfw5i of {
                          GHC.Ptr.Ptr a_sfw5o [Occ=Once] ->
                              case readWord64OffAddr# [a_sfw5o 0# GHC.Prim.void#] of {
                                Unit# ipv1_sfw5r [Occ=Once] ->
                                    case w3_sfw5l of {
                                      [] -> lvl1_rfvlH;
                                      : w2_sfw5u [Occ=Once!] ds1_sfw5v [Occ=Once!] ->
                                          case ds1_sfw5v of {
                                            [] ->
                                                case
                                                    GHC.StaticPtr.staticPtrKeys2
                                                        ys_sfw5j GHC.Prim.void#
                                                of
                                                { Unit# ipv3_sfw5z [Occ=Once] ->
                                                      let {
                                                        sat_sfw5C [Occ=Once]
                                                          :: GHC.Fingerprint.Type.Fingerprint
                                                        [LclId] =
                                                            [ipv1_sfw5r w2_sfw5u] \u []
                                                                case w2_sfw5u of {
                                                                  GHC.Word.W64# dt1_sfw5B [Occ=Once] ->
                                                                      GHC.Fingerprint.Type.Fingerprint [ipv1_sfw5r
                                                                                                        dt1_sfw5B];
                                                                }; } in
                                                      let {
                                                        sat_sfw5D [Occ=Once]
                                                          :: [GHC.Fingerprint.Type.Fingerprint]
                                                        [LclId] =
                                                            CCCS :! [sat_sfw5C ipv3_sfw5z];
                                                      } in  Unit# [sat_sfw5D];
                                                };
                                            : _ [Occ=Dead] _ [Occ=Dead] -> lvl1_rfvlH;
                                          };
                                    };
                              };
                        };
              } in 
                let-no-escape {
                  $wf_sfw5H [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[3]]
                    :: GHC.Prim.Int#
                       -> [GHC.Word.Word64]
                       -> GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                             [GHC.Fingerprint.Type.Fingerprint] #)
                  [LclId[JoinId(3)],
                   Arity=3,
                   Str=<S,1*U><L,U><S,U>,
                   Unf=OtherCon []] =
                      sat-only [y_sfw5i exit_sfw5k $wf_sfw5H] \r [ww1_sfw5I
                                                                  w3_sfw5J
                                                                  void_0E]
                          case ww1_sfw5I of ds1_sfw5L {
                            __DEFAULT ->
                                case y_sfw5i of {
                                  GHC.Ptr.Ptr a_sfw5N [Occ=Once] ->
                                      case
                                          readWord64OffAddr# [a_sfw5N ds1_sfw5L GHC.Prim.void#]
                                      of
                                      { Unit# ipv1_sfw5Q [Occ=Once] ->
                                            let {
                                              sat_sfw5S [Occ=Once] :: GHC.Word.Word64
                                              [LclId] =
                                                  CCCS GHC.Word.W64#! [ipv1_sfw5Q]; } in
                                            let {
                                              sat_sfw5T [Occ=Once] :: [GHC.Word.Word64]
                                              [LclId] =
                                                  CCCS :! [sat_sfw5S w3_sfw5J];
                                            } in 
                                              case -# [ds1_sfw5L 1#] of sat_sfw5R {
                                                __DEFAULT ->
                                                    $wf_sfw5H sat_sfw5R sat_sfw5T GHC.Prim.void#;
                                              };
                                      };
                                };
                            0# -> exit_sfw5k w3_sfw5J GHC.Prim.void#;
                          };
                } in  $wf_sfw5H 1# GHC.Types.[] GHC.Prim.void#;
        };

GHC.StaticPtr.staticPtrKeys1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           [GHC.StaticPtr.StaticKey] #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.void#] of {
          Unit# ds1_sfw5Y [Occ=Once] ->
              case narrow32Int# [ds1_sfw5Y] of ipv1_sfw5Z [Dmd=<S,U>] {
                __DEFAULT ->
                    case *# [ipv1_sfw5Z 8#] of sat_sfw60 {
                      __DEFAULT ->
                          case newAlignedPinnedByteArray# [sat_sfw60 8# GHC.Prim.void#] of {
                            Unit# ipv2_sfw63 [Occ=Once] ->
                                case unsafeFreezeByteArray# [ipv2_sfw63 GHC.Prim.void#] of {
                                  Unit# ipv4_sfw66 ->
                                      case byteArrayContents# [ipv4_sfw66] of p_sfw67 [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case
                                                __pkg_ccall base-4.11.0.0 [p_sfw67
                                                                           ipv1_sfw5Z
                                                                           GHC.Prim.void#]
                                            of
                                            { Unit# ds6_sfw6b [Occ=Once] ->
                                                  case
                                                      narrow32Int# [ds6_sfw6b]
                                                  of
                                                  ww_sfw6c [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case <=# [ww_sfw6c 0#] of {
                                                          __DEFAULT ->
                                                              case -# [ww_sfw6c 1#] of sat_sfw6B {
                                                                __DEFAULT ->
                                                                    let-no-escape {
                                                                      exit_sfw6e [Occ=OnceL!T[2],
                                                                                  Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                                        :: [GHC.Ptr.Ptr
                                                                              GHC.Word.Word64]
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 [GHC.StaticPtr.StaticKey] #)
                                                                      [LclId[JoinId(2)],
                                                                       Arity=2,
                                                                       Str=<L,U><S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [ipv4_sfw66
                                                                                    p_sfw67] \r [w3_sfw6f
                                                                                                 void_0E]
                                                                              case
                                                                                  readAddrOffAddr# [p_sfw67
                                                                                                    0#
                                                                                                    GHC.Prim.void#]
                                                                              of
                                                                              { Unit# ipv6_sfw6j [Occ=Once] ->
                                                                                    let {
                                                                                      sat_sfw6k [Occ=Once]
                                                                                        :: GHC.Ptr.Ptr
                                                                                             GHC.Word.Word64
                                                                                      [LclId] =
                                                                                          CCCS GHC.Ptr.Ptr! [ipv6_sfw6j]; } in
                                                                                    let {
                                                                                      sat_sfw6l [Occ=Once]
                                                                                        :: [GHC.Ptr.Ptr
                                                                                              GHC.Word.Word64]
                                                                                      [LclId] =
                                                                                          CCCS :! [sat_sfw6k
                                                                                                   w3_sfw6f];
                                                                                    } in 
                                                                                      case
                                                                                          GHC.StaticPtr.staticPtrKeys2
                                                                                              sat_sfw6l
                                                                                              GHC.Prim.void#
                                                                                      of
                                                                                      { Unit# ipv8_sfw6o [Occ=Once] ->
                                                                                            case
                                                                                                touch# [ipv4_sfw66
                                                                                                        GHC.Prim.void#]
                                                                                            of
                                                                                            s4_sfw6p
                                                                                            { (##) ->
                                                                                                  Unit# [ipv8_sfw6o];
                                                                                            };
                                                                                      };
                                                                              };
                                                                    } in 
                                                                      let-no-escape {
                                                                        $wf_sfw6q [InlPrag=NOUSERINLINE[0],
                                                                                   Occ=LoopBreakerT[3]]
                                                                          :: GHC.Prim.Int#
                                                                             -> [GHC.Ptr.Ptr
                                                                                   GHC.Word.Word64]
                                                                             -> GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   [GHC.StaticPtr.StaticKey] #)
                                                                        [LclId[JoinId(3)],
                                                                         Arity=3,
                                                                         Str=<S,1*U><L,U><S,U>,
                                                                         Unf=OtherCon []] =
                                                                            sat-only [p_sfw67
                                                                                      exit_sfw6e
                                                                                      $wf_sfw6q] \r [ww1_sfw6r
                                                                                                     w3_sfw6s
                                                                                                     void_0E]
                                                                                case
                                                                                    ww1_sfw6r
                                                                                of
                                                                                ds7_sfw6u
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          readAddrOffAddr# [p_sfw67
                                                                                                            ds7_sfw6u
                                                                                                            GHC.Prim.void#]
                                                                                      of
                                                                                      { Unit# ipv6_sfw6x [Occ=Once] ->
                                                                                            let {
                                                                                              sat_sfw6z [Occ=Once]
                                                                                                :: GHC.Ptr.Ptr
                                                                                                     GHC.Word.Word64
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Ptr.Ptr! [ipv6_sfw6x]; } in
                                                                                            let {
                                                                                              sat_sfw6A [Occ=Once]
                                                                                                :: [GHC.Ptr.Ptr
                                                                                                      GHC.Word.Word64]
                                                                                              [LclId] =
                                                                                                  CCCS :! [sat_sfw6z
                                                                                                           w3_sfw6s];
                                                                                            } in 
                                                                                              case
                                                                                                  -# [ds7_sfw6u
                                                                                                      1#]
                                                                                              of
                                                                                              sat_sfw6y
                                                                                              { __DEFAULT ->
                                                                                                    $wf_sfw6q
                                                                                                        sat_sfw6y
                                                                                                        sat_sfw6A
                                                                                                        GHC.Prim.void#;
                                                                                              };
                                                                                      };
                                                                                  0# ->
                                                                                      exit_sfw6e
                                                                                          w3_sfw6s
                                                                                          GHC.Prim.void#;
                                                                                };
                                                                      } in 
                                                                        $wf_sfw6q
                                                                            sat_sfw6B
                                                                            GHC.Types.[]
                                                                            GHC.Prim.void#;
                                                              };
                                                          1# ->
                                                              case
                                                                  GHC.StaticPtr.staticPtrKeys2
                                                                      GHC.Types.[] GHC.Prim.void#
                                                              of
                                                              { Unit# ipv6_sfw6E [Occ=Once] ->
                                                                    case
                                                                        touch# [ipv4_sfw66
                                                                                GHC.Prim.void#]
                                                                    of
                                                                    s4_sfw6F
                                                                    { (##) -> Unit# [ipv6_sfw6E];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.StaticPtr.staticPtrKeys [InlPrag=NOINLINE]
  :: GHC.Types.IO [GHC.StaticPtr.StaticKey]
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.StaticPtr.staticPtrKeys1 GHC.Prim.void#;

GHC.StaticPtr.StaticPtr
  :: forall a.
     GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.StaticPtr.StaticPtrInfo
     -> a
     -> GHC.StaticPtr.StaticPtr a
[GblId[DataCon],
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.StaticPtr.StaticPtr [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.StaticPtr.StaticPtrInfo
  :: GHC.Base.String
     -> GHC.Base.String
     -> (GHC.Types.Int, GHC.Types.Int)
     -> GHC.StaticPtr.StaticPtrInfo
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.StaticPtr.StaticPtrInfo [eta_B3 eta_B2 eta_B1];

