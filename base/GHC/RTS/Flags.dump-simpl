
==================== Tidy Core ====================
2018-03-16 16:07:50.801625041 UTC

Result size of Tidy Core
  = {terms: 11,374, types: 7,331, coercions: 44, joins: 25/224}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres10 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$fEnumDoCostCentres10 = GHC.Types.I# 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres9 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$fEnumDoCostCentres9 = GHC.Types.I# 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres8 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$fEnumDoCostCentres8 = GHC.Types.I# 2#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres7 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$fEnumDoCostCentres7 = GHC.Types.I# 3#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres6 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$fEnumDoCostCentres6 = GHC.Types.I# 4#

-- RHS size: {terms: 13, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum :: GiveGCStats -> Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPNL [Occ=Once!] :: GiveGCStats) ->
                 case ds_dcPNL of {
                   NoGCStats -> GHC.RTS.Flags.$fEnumDoCostCentres10;
                   CollectGCStats -> GHC.RTS.Flags.$fEnumDoCostCentres9;
                   OneLineGCStats -> GHC.RTS.Flags.$fEnumDoCostCentres8;
                   SummaryGCStats -> GHC.RTS.Flags.$fEnumDoCostCentres7;
                   VerboseGCStats -> GHC.RTS.Flags.$fEnumDoCostCentres6
                 }}]
GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum
  = \ (ds_dcPNL :: GiveGCStats) ->
      case ds_dcPNL of {
        NoGCStats -> GHC.RTS.Flags.$fEnumDoCostCentres10;
        CollectGCStats -> GHC.RTS.Flags.$fEnumDoCostCentres9;
        OneLineGCStats -> GHC.RTS.Flags.$fEnumDoCostCentres8;
        SummaryGCStats -> GHC.RTS.Flags.$fEnumDoCostCentres7;
        VerboseGCStats -> GHC.RTS.Flags.$fEnumDoCostCentres6
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_rcV4Y :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_rcV4Y = "invalid enum for GiveGCStats: "#

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$wlvl3 [InlPrag=NOUSERINLINE[0]]
  :: Int# -> GiveGCStats
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
GHC.RTS.Flags.$wlvl3
  = \ (ww_scTeS :: Int#) ->
      errorWithoutStackTrace
        @ 'LiftedRep
        @ GiveGCStats
        (unpackAppendCString#
           lvl_rcV4Y
           (case GHC.Show.$wshowSignedInt 0# ww_scTeS (GHC.Types.[] @ Char) of
            { (# ww5_i7NVe, ww6_i7NVf #) ->
            GHC.Types.: @ Char ww5_i7NVe ww6_i7NVf
            }))

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumGiveGCStats6 [InlPrag=NOUSERINLINE[0]]
  :: Int -> GiveGCStats
[GblId,
 Arity=1,
 Str=<B,1*U(U)>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scTeP [Occ=Once!] :: Int) ->
                 case w_scTeP of { I# ww1_scTeS [Occ=Once] ->
                 GHC.RTS.Flags.$wlvl3 ww1_scTeS
                 }}]
GHC.RTS.Flags.$fEnumGiveGCStats6
  = \ (w_scTeP :: Int) ->
      case w_scTeP of { I# ww1_scTeS -> GHC.RTS.Flags.$wlvl3 ww1_scTeS }

-- RHS size: {terms: 16, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$w$ctoEnum2 [InlPrag=NOUSERINLINE[0]]
  :: Int# -> GiveGCStats
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [70] 80 50}]
GHC.RTS.Flags.$w$ctoEnum2
  = \ (ww_scTeY :: Int#) ->
      case ww_scTeY of ds_XcPNN {
        __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
        0# -> GHC.RTS.Flags.NoGCStats;
        1# -> GHC.RTS.Flags.CollectGCStats;
        2# -> GHC.RTS.Flags.OneLineGCStats;
        3# -> GHC.RTS.Flags.SummaryGCStats;
        4# -> GHC.RTS.Flags.VerboseGCStats
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: Int -> GiveGCStats
[GblId,
 Arity=1,
 Str=<S(S),1*U(1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scTeV [Occ=Once!] :: Int) ->
                 case w_scTeV of { I# ww1_scTeY [Occ=Once] ->
                 GHC.RTS.Flags.$w$ctoEnum2 ww1_scTeY
                 }}]
GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum
  = \ (w_scTeV :: Int) ->
      case w_scTeV of { I# ww1_scTeY ->
      GHC.RTS.Flags.$w$ctoEnum2 ww1_scTeY
      }

-- RHS size: {terms: 13, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum
  :: DoCostCentres -> Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPNz [Occ=Once!] :: DoCostCentres) ->
                 case ds_dcPNz of {
                   CostCentresNone -> GHC.RTS.Flags.$fEnumDoCostCentres10;
                   CostCentresSummary -> GHC.RTS.Flags.$fEnumDoCostCentres9;
                   CostCentresVerbose -> GHC.RTS.Flags.$fEnumDoCostCentres8;
                   CostCentresAll -> GHC.RTS.Flags.$fEnumDoCostCentres7;
                   CostCentresJSON -> GHC.RTS.Flags.$fEnumDoCostCentres6
                 }}]
GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum
  = \ (ds_dcPNz :: DoCostCentres) ->
      case ds_dcPNz of {
        CostCentresNone -> GHC.RTS.Flags.$fEnumDoCostCentres10;
        CostCentresSummary -> GHC.RTS.Flags.$fEnumDoCostCentres9;
        CostCentresVerbose -> GHC.RTS.Flags.$fEnumDoCostCentres8;
        CostCentresAll -> GHC.RTS.Flags.$fEnumDoCostCentres7;
        CostCentresJSON -> GHC.RTS.Flags.$fEnumDoCostCentres6
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl1_rcV4Z :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl1_rcV4Z = "invalid enum for DoCostCentres: "#

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: Int# -> DoCostCentres
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
GHC.RTS.Flags.$wlvl
  = \ (ww_scTf4 :: Int#) ->
      errorWithoutStackTrace
        @ 'LiftedRep
        @ DoCostCentres
        (unpackAppendCString#
           lvl1_rcV4Z
           (case GHC.Show.$wshowSignedInt 0# ww_scTf4 (GHC.Types.[] @ Char) of
            { (# ww5_i7NVe, ww6_i7NVf #) ->
            GHC.Types.: @ Char ww5_i7NVe ww6_i7NVf
            }))

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres11 [InlPrag=NOUSERINLINE[0]]
  :: Int -> DoCostCentres
[GblId,
 Arity=1,
 Str=<B,1*U(U)>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scTf1 [Occ=Once!] :: Int) ->
                 case w_scTf1 of { I# ww1_scTf4 [Occ=Once] ->
                 GHC.RTS.Flags.$wlvl ww1_scTf4
                 }}]
GHC.RTS.Flags.$fEnumDoCostCentres11
  = \ (w_scTf1 :: Int) ->
      case w_scTf1 of { I# ww1_scTf4 -> GHC.RTS.Flags.$wlvl ww1_scTf4 }

-- RHS size: {terms: 16, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: Int# -> DoCostCentres
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [70] 80 50}]
GHC.RTS.Flags.$w$ctoEnum
  = \ (ww_scTfa :: Int#) ->
      case ww_scTfa of ds_XcPND {
        __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
        0# -> GHC.RTS.Flags.CostCentresNone;
        1# -> GHC.RTS.Flags.CostCentresSummary;
        2# -> GHC.RTS.Flags.CostCentresVerbose;
        3# -> GHC.RTS.Flags.CostCentresAll;
        4# -> GHC.RTS.Flags.CostCentresJSON
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: Int -> DoCostCentres
[GblId,
 Arity=1,
 Str=<S(S),1*U(1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scTf7 [Occ=Once!] :: Int) ->
                 case w_scTf7 of { I# ww1_scTfa [Occ=Once] ->
                 GHC.RTS.Flags.$w$ctoEnum ww1_scTfa
                 }}]
GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum
  = \ (w_scTf7 :: Int) ->
      case w_scTf7 of { I# ww1_scTfa ->
      GHC.RTS.Flags.$w$ctoEnum ww1_scTfa
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile12 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$fEnumDoHeapProfile12 = GHC.Types.I# 5#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile11 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$fEnumDoHeapProfile11 = GHC.Types.I# 6#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile10 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$fEnumDoHeapProfile10 = GHC.Types.I# 7#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile9 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$fEnumDoHeapProfile9 = GHC.Types.I# 8#

-- RHS size: {terms: 19, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum
  :: DoHeapProfile -> Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPNk [Occ=Once!] :: DoHeapProfile) ->
                 case ds_dcPNk of {
                   NoHeapProfiling -> GHC.RTS.Flags.$fEnumDoCostCentres10;
                   HeapByCCS -> GHC.RTS.Flags.$fEnumDoCostCentres9;
                   HeapByMod -> GHC.RTS.Flags.$fEnumDoCostCentres8;
                   HeapByDescr -> GHC.RTS.Flags.$fEnumDoCostCentres6;
                   HeapByType -> GHC.RTS.Flags.$fEnumDoHeapProfile12;
                   HeapByRetainer -> GHC.RTS.Flags.$fEnumDoHeapProfile11;
                   HeapByLDV -> GHC.RTS.Flags.$fEnumDoHeapProfile10;
                   HeapByClosureType -> GHC.RTS.Flags.$fEnumDoHeapProfile9
                 }}]
GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum
  = \ (ds_dcPNk :: DoHeapProfile) ->
      case ds_dcPNk of {
        NoHeapProfiling -> GHC.RTS.Flags.$fEnumDoCostCentres10;
        HeapByCCS -> GHC.RTS.Flags.$fEnumDoCostCentres9;
        HeapByMod -> GHC.RTS.Flags.$fEnumDoCostCentres8;
        HeapByDescr -> GHC.RTS.Flags.$fEnumDoCostCentres6;
        HeapByType -> GHC.RTS.Flags.$fEnumDoHeapProfile12;
        HeapByRetainer -> GHC.RTS.Flags.$fEnumDoHeapProfile11;
        HeapByLDV -> GHC.RTS.Flags.$fEnumDoHeapProfile10;
        HeapByClosureType -> GHC.RTS.Flags.$fEnumDoHeapProfile9
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl2_rcV50 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl2_rcV50 = "invalid enum for DoHeapProfile: "#

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$wlvl1 [InlPrag=NOUSERINLINE[0]]
  :: Int# -> DoHeapProfile
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
GHC.RTS.Flags.$wlvl1
  = \ (ww_scTfg :: Int#) ->
      errorWithoutStackTrace
        @ 'LiftedRep
        @ DoHeapProfile
        (unpackAppendCString#
           lvl2_rcV50
           (case GHC.Show.$wshowSignedInt 0# ww_scTfg (GHC.Types.[] @ Char) of
            { (# ww5_i7NVe, ww6_i7NVf #) ->
            GHC.Types.: @ Char ww5_i7NVe ww6_i7NVf
            }))

-- RHS size: {terms: 22, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$w$ctoEnum1 [InlPrag=NOUSERINLINE[0]]
  :: Int# -> DoHeapProfile
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [100] 110 80}]
GHC.RTS.Flags.$w$ctoEnum1
  = \ (ww_scTfm :: Int#) ->
      case ww_scTfm of ds_XcPNq {
        __DEFAULT -> GHC.RTS.Flags.$wlvl1 ds_XcPNq;
        0# -> GHC.RTS.Flags.NoHeapProfiling;
        1# -> GHC.RTS.Flags.HeapByCCS;
        2# -> GHC.RTS.Flags.HeapByMod;
        4# -> GHC.RTS.Flags.HeapByDescr;
        5# -> GHC.RTS.Flags.HeapByType;
        6# -> GHC.RTS.Flags.HeapByRetainer;
        7# -> GHC.RTS.Flags.HeapByLDV;
        8# -> GHC.RTS.Flags.HeapByClosureType
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: Int -> DoHeapProfile
[GblId,
 Arity=1,
 Str=<S(S),1*U(1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scTfj [Occ=Once!] :: Int) ->
                 case w_scTfj of { I# ww1_scTfm [Occ=Once] ->
                 GHC.RTS.Flags.$w$ctoEnum1 ww1_scTfm
                 }}]
GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum
  = \ (w_scTfj :: Int) ->
      case w_scTfj of { I# ww1_scTfm ->
      GHC.RTS.Flags.$w$ctoEnum1 ww1_scTfm
      }

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum :: DoTrace -> Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPMK [Occ=Once!] :: DoTrace) ->
                 case ds_dcPMK of {
                   TraceNone -> GHC.RTS.Flags.$fEnumDoCostCentres10;
                   TraceEventLog -> GHC.RTS.Flags.$fEnumDoCostCentres9;
                   TraceStderr -> GHC.RTS.Flags.$fEnumDoCostCentres8
                 }}]
GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum
  = \ (ds_dcPMK :: DoTrace) ->
      case ds_dcPMK of {
        TraceNone -> GHC.RTS.Flags.$fEnumDoCostCentres10;
        TraceEventLog -> GHC.RTS.Flags.$fEnumDoCostCentres9;
        TraceStderr -> GHC.RTS.Flags.$fEnumDoCostCentres8
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl3_rcV51 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl3_rcV51 = "invalid enum for DoTrace: "#

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$wlvl2 [InlPrag=NOUSERINLINE[0]] :: Int# -> DoTrace
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
GHC.RTS.Flags.$wlvl2
  = \ (ww_scTfs :: Int#) ->
      errorWithoutStackTrace
        @ 'LiftedRep
        @ DoTrace
        (unpackAppendCString#
           lvl3_rcV51
           (case GHC.Show.$wshowSignedInt 0# ww_scTfs (GHC.Types.[] @ Char) of
            { (# ww5_i7NVe, ww6_i7NVf #) ->
            GHC.Types.: @ Char ww5_i7NVe ww6_i7NVf
            }))

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoTrace1 [InlPrag=NOUSERINLINE[0]]
  :: Int -> DoTrace
[GblId,
 Arity=1,
 Str=<B,1*U(U)>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scTfp [Occ=Once!] :: Int) ->
                 case w_scTfp of { I# ww1_scTfs [Occ=Once] ->
                 GHC.RTS.Flags.$wlvl2 ww1_scTfs
                 }}]
GHC.RTS.Flags.$fEnumDoTrace1
  = \ (w_scTfp :: Int) ->
      case w_scTfp of { I# ww1_scTfs -> GHC.RTS.Flags.$wlvl2 ww1_scTfs }

-- RHS size: {terms: 15, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum :: Int -> DoTrace
[GblId,
 Arity=1,
 Str=<S(S),1*U(1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPMF [Occ=Once!] :: Int) ->
                 case ds_dcPMF of wild_X63 { I# ds1_dcPMH [Occ=Once!] ->
                 case ds1_dcPMH of {
                   __DEFAULT -> GHC.RTS.Flags.$fEnumDoTrace1 wild_X63;
                   0# -> GHC.RTS.Flags.TraceNone;
                   1# -> GHC.RTS.Flags.TraceEventLog;
                   2# -> GHC.RTS.Flags.TraceStderr
                 }
                 }}]
GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum
  = \ (ds_dcPMF :: Int) ->
      case ds_dcPMF of { I# ds1_dcPMH ->
      case ds1_dcPMH of ds2_XcPMS {
        __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds2_XcPMS;
        0# -> GHC.RTS.Flags.TraceNone;
        1# -> GHC.RTS.Flags.TraceEventLog;
        2# -> GHC.RTS.Flags.TraceStderr
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowCCFlags2 = "}"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
g_rcV52 :: [Char]
[GblId]
g_rcV52 = unpackCString# GHC.RTS.Flags.$fShowCCFlags2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl4_rcV53 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl4_rcV53 = "ParFlags {"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl5_rcV54 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl5_rcV54 = "nCapabilities = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl6_rcV55 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl6_rcV55 = "migrate = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl7_rcV56 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl7_rcV56 = "maxLocalSparks = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl8_rcV57 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl8_rcV57 = "parGcEnabled = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl9_rcV58 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl9_rcV58 = "parGcGen = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl10_rcV59 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl10_rcV59 = "parGcLoadBalancingEnabled = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl11_rcV5a :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl11_rcV5a = "parGcLoadBalancingGen = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl12_rcV5b :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl12_rcV5b = "parGcNoSyncWithIdle = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl13_rcV5c :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl13_rcV5c = "parGcThreads = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl14_rcV5d :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl14_rcV5d = "setAffinity = "#

-- RHS size: {terms: 178, types: 119, coercions: 0, joins: 0/4}
GHC.RTS.Flags.$fShowParFlags_$cshowsPrec
  :: Int -> ParFlags -> ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U(U),1*U,1*U(U),1*U,1*U(U),1*U,1*U(U),1*U(U),1*U(U),1*U)><L,U>,
 Unf=OtherCon []]
GHC.RTS.Flags.$fShowParFlags_$cshowsPrec
  = \ (a_acOk0 :: Int) (ds_dcPMl :: ParFlags) (eta_B1 :: String) ->
      case ds_dcPMl of
      { ParFlags b1_acOk1 b2_acOk2 b3_acOk3 b4_acOk4 b5_acOk5 b6_acOk6
                 b7_acOk7 b8_acOk8 b9_acOk9 b10_acOka ->
      case a_acOk0 of { I# x_alMY ->
      let {
        p_scQxw [Dmd=<L,1*C1(U)>] :: ShowS
        [LclId, Arity=1, Str=<L,1*U>, Unf=OtherCon []]
        p_scQxw
          = \ (x1_X7RFP [OS=OneShot] :: String) ->
              unpackAppendCString#
                lvl4_rcV53
                (unpackAppendCString#
                   lvl5_rcV54
                   (case b1_acOk1 of { GHC.Word.W32# x#_i9hbW ->
                    case GHC.Show.$witos
                           (word2Int# x#_i9hbW)
                           (++
                              @ Char
                              GHC.Show.showCommaSpace1
                              (unpackAppendCString#
                                 lvl6_rcV55
                                 (let {
                                    eta1_scQxO [Dmd=<L,1*U>] :: String
                                    [LclId]
                                    eta1_scQxO
                                      = ++
                                          @ Char
                                          GHC.Show.showCommaSpace1
                                          (unpackAppendCString#
                                             lvl7_rcV56
                                             (case b3_acOk3 of { GHC.Word.W32# x#1_X9hkl ->
                                              case GHC.Show.$witos
                                                     (word2Int# x#1_X9hkl)
                                                     (++
                                                        @ Char
                                                        GHC.Show.showCommaSpace1
                                                        (unpackAppendCString#
                                                           lvl8_rcV57
                                                           (let {
                                                              eta2_scQxN [Dmd=<L,1*U>] :: String
                                                              [LclId]
                                                              eta2_scQxN
                                                                = ++
                                                                    @ Char
                                                                    GHC.Show.showCommaSpace1
                                                                    (unpackAppendCString#
                                                                       lvl9_rcV58
                                                                       (case b5_acOk5 of
                                                                        { GHC.Word.W32# x#2_X9hkr ->
                                                                        case GHC.Show.$witos
                                                                               (word2Int# x#2_X9hkr)
                                                                               (++
                                                                                  @ Char
                                                                                  GHC.Show.showCommaSpace1
                                                                                  (unpackAppendCString#
                                                                                     lvl10_rcV59
                                                                                     (let {
                                                                                        eta3_scQxM [Dmd=<L,1*U>]
                                                                                          :: String
                                                                                        [LclId]
                                                                                        eta3_scQxM
                                                                                          = ++
                                                                                              @ Char
                                                                                              GHC.Show.showCommaSpace1
                                                                                              (unpackAppendCString#
                                                                                                 lvl11_rcV5a
                                                                                                 (case b7_acOk7
                                                                                                  of
                                                                                                  { GHC.Word.W32# x#3_X9hkx ->
                                                                                                  case GHC.Show.$witos
                                                                                                         (word2Int#
                                                                                                            x#3_X9hkx)
                                                                                                         (++
                                                                                                            @ Char
                                                                                                            GHC.Show.showCommaSpace1
                                                                                                            (unpackAppendCString#
                                                                                                               lvl12_rcV5b
                                                                                                               (case b8_acOk8
                                                                                                                of
                                                                                                                { GHC.Word.W32# x#4_X9hkC ->
                                                                                                                case GHC.Show.$witos
                                                                                                                       (word2Int#
                                                                                                                          x#4_X9hkC)
                                                                                                                       (++
                                                                                                                          @ Char
                                                                                                                          GHC.Show.showCommaSpace1
                                                                                                                          (unpackAppendCString#
                                                                                                                             lvl13_rcV5c
                                                                                                                             (case b9_acOk9
                                                                                                                              of
                                                                                                                              { GHC.Word.W32# x#5_X9hkH ->
                                                                                                                              case GHC.Show.$witos
                                                                                                                                     (word2Int#
                                                                                                                                        x#5_X9hkH)
                                                                                                                                     (++
                                                                                                                                        @ Char
                                                                                                                                        GHC.Show.showCommaSpace1
                                                                                                                                        (unpackAppendCString#
                                                                                                                                           lvl14_rcV5d
                                                                                                                                           (case b10_acOka
                                                                                                                                            of {
                                                                                                                                              False ->
                                                                                                                                                ++
                                                                                                                                                  @ Char
                                                                                                                                                  GHC.Show.$fShowBool4
                                                                                                                                                  (++
                                                                                                                                                     @ Char
                                                                                                                                                     g_rcV52
                                                                                                                                                     x1_X7RFP);
                                                                                                                                              True ->
                                                                                                                                                ++
                                                                                                                                                  @ Char
                                                                                                                                                  GHC.Show.$fShowBool2
                                                                                                                                                  (++
                                                                                                                                                     @ Char
                                                                                                                                                     g_rcV52
                                                                                                                                                     x1_X7RFP)
                                                                                                                                            })))
                                                                                                                              of
                                                                                                                              { (# ww5_i9hc4,
                                                                                                                                   ww6_i9hc5 #) ->
                                                                                                                              GHC.Types.:
                                                                                                                                @ Char
                                                                                                                                ww5_i9hc4
                                                                                                                                ww6_i9hc5
                                                                                                                              }
                                                                                                                              })))
                                                                                                                of
                                                                                                                { (# ww5_i9hc4,
                                                                                                                     ww6_i9hc5 #) ->
                                                                                                                GHC.Types.:
                                                                                                                  @ Char
                                                                                                                  ww5_i9hc4
                                                                                                                  ww6_i9hc5
                                                                                                                }
                                                                                                                })))
                                                                                                  of
                                                                                                  { (# ww5_i9hc4,
                                                                                                       ww6_i9hc5 #) ->
                                                                                                  GHC.Types.:
                                                                                                    @ Char
                                                                                                    ww5_i9hc4
                                                                                                    ww6_i9hc5
                                                                                                  }
                                                                                                  })) } in
                                                                                      case b6_acOk6
                                                                                      of {
                                                                                        False ->
                                                                                          ++
                                                                                            @ Char
                                                                                            GHC.Show.$fShowBool4
                                                                                            eta3_scQxM;
                                                                                        True ->
                                                                                          ++
                                                                                            @ Char
                                                                                            GHC.Show.$fShowBool2
                                                                                            eta3_scQxM
                                                                                      })))
                                                                        of
                                                                        { (# ww5_i9hc4,
                                                                             ww6_i9hc5 #) ->
                                                                        GHC.Types.:
                                                                          @ Char ww5_i9hc4 ww6_i9hc5
                                                                        }
                                                                        })) } in
                                                            case b4_acOk4 of {
                                                              False ->
                                                                ++
                                                                  @ Char
                                                                  GHC.Show.$fShowBool4
                                                                  eta2_scQxN;
                                                              True ->
                                                                ++
                                                                  @ Char
                                                                  GHC.Show.$fShowBool2
                                                                  eta2_scQxN
                                                            })))
                                              of
                                              { (# ww5_i9hc4, ww6_i9hc5 #) ->
                                              GHC.Types.: @ Char ww5_i9hc4 ww6_i9hc5
                                              }
                                              })) } in
                                  case b2_acOk2 of {
                                    False -> ++ @ Char GHC.Show.$fShowBool4 eta1_scQxO;
                                    True -> ++ @ Char GHC.Show.$fShowBool2 eta1_scQxO
                                  })))
                    of
                    { (# ww5_i9hc4, ww6_i9hc5 #) ->
                    GHC.Types.: @ Char ww5_i9hc4 ww6_i9hc5
                    }
                    })) } in
      case >=# x_alMY 11# of {
        __DEFAULT -> p_scQxw eta_B1;
        1# ->
          GHC.Types.:
            @ Char
            GHC.Show.$fShow(,)4
            (p_scQxw (GHC.Types.: @ Char GHC.Show.$fShow(,)2 eta_B1))
      }
      }
      }

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowParFlags_$cshow :: ParFlags -> String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U(U),1*U,1*U(U),1*U,1*U(U),1*U,1*U(U),1*U(U),1*U(U),1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once] :: ParFlags) ->
                 GHC.RTS.Flags.$fShowParFlags_$cshowsPrec
                   GHC.RTS.Flags.$fEnumDoCostCentres10 x_i7Jay (GHC.Types.[] @ Char)}]
GHC.RTS.Flags.$fShowParFlags_$cshow
  = \ (x_i7Jay :: ParFlags) ->
      GHC.RTS.Flags.$fShowParFlags_$cshowsPrec
        GHC.RTS.Flags.$fEnumDoCostCentres10 x_i7Jay (GHC.Types.[] @ Char)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowParFlags1 :: ParFlags -> ShowS
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.RTS.Flags.$fShowParFlags1
  = GHC.RTS.Flags.$fShowParFlags_$cshowsPrec
      GHC.RTS.Flags.$fEnumDoCostCentres10

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowParFlags_$cshowList :: [ParFlags] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [ParFlags])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ ParFlags GHC.RTS.Flags.$fShowParFlags1 ls_i7JaB s_i7JaC}]
GHC.RTS.Flags.$fShowParFlags_$cshowList
  = \ (ls_i7JaB :: [ParFlags]) (s_i7JaC :: String) ->
      showList__
        @ ParFlags GHC.RTS.Flags.$fShowParFlags1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowParFlags [InlPrag=NOUSERINLINE CONLIKE]
  :: Show ParFlags
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: ParFlags
                       GHC.RTS.Flags.$fShowParFlags_$cshowsPrec
                       GHC.RTS.Flags.$fShowParFlags_$cshow
                       GHC.RTS.Flags.$fShowParFlags_$cshowList]
GHC.RTS.Flags.$fShowParFlags
  = GHC.Show.C:Show
      @ ParFlags
      GHC.RTS.Flags.$fShowParFlags_$cshowsPrec
      GHC.RTS.Flags.$fShowParFlags_$cshow
      GHC.RTS.Flags.$fShowParFlags_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowTickyFlags5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$fShowTickyFlags5 = "TickyFlags {"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowTickyFlags4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowTickyFlags4
  = unpackCString# GHC.RTS.Flags.$fShowTickyFlags5

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowTickyFlags3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.RTS.Flags.$fShowTickyFlags3 = "showTickyStats = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowTickyFlags2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$fShowTickyFlags2 = "tickyFile = "#

-- RHS size: {terms: 78, types: 26, coercions: 0, joins: 0/1}
GHC.RTS.Flags.$w$cshowsPrec8 [InlPrag=NOUSERINLINE[0]]
  :: Int# -> Bool -> Maybe FilePath -> ShowS
[GblId,
 Arity=3,
 Str=<S,U><L,U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 350 0] 841 120}]
GHC.RTS.Flags.$w$cshowsPrec8
  = \ (ww_scTfU :: Int#)
      (ww1_scTfY :: Bool)
      (ww2_scTfZ :: Maybe FilePath) ->
      let {
        f8_scQxf [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f8_scQxf
          = GHC.Show.$fShowMaybe_$cshowsPrec
              @ [Char]
              GHC.Show.$fShow[]_$s$fShow[]1
              GHC.RTS.Flags.$fEnumDoCostCentres10
              ww2_scTfZ } in
      case >=# ww_scTfU 11# of {
        __DEFAULT ->
          \ (x_X7RE2 :: String) ->
            ++
              @ Char
              GHC.RTS.Flags.$fShowTickyFlags4
              (unpackAppendCString#
                 GHC.RTS.Flags.$fShowTickyFlags3
                 (case ww1_scTfY of {
                    False ->
                      ++
                        @ Char
                        GHC.Show.$fShowBool4
                        (++
                           @ Char
                           GHC.Show.showCommaSpace1
                           (unpackAppendCString#
                              GHC.RTS.Flags.$fShowTickyFlags2
                              (f8_scQxf
                                 (unpackAppendCString# GHC.RTS.Flags.$fShowCCFlags2 x_X7RE2))));
                    True ->
                      ++
                        @ Char
                        GHC.Show.$fShowBool2
                        (++
                           @ Char
                           GHC.Show.showCommaSpace1
                           (unpackAppendCString#
                              GHC.RTS.Flags.$fShowTickyFlags2
                              (f8_scQxf
                                 (unpackAppendCString# GHC.RTS.Flags.$fShowCCFlags2 x_X7RE2))))
                  }));
        1# ->
          \ (x_i88RR :: String) ->
            GHC.Types.:
              @ Char
              GHC.Show.$fShow(,)4
              (++
                 @ Char
                 GHC.RTS.Flags.$fShowTickyFlags4
                 (unpackAppendCString#
                    GHC.RTS.Flags.$fShowTickyFlags3
                    (case ww1_scTfY of {
                       False ->
                         ++
                           @ Char
                           GHC.Show.$fShowBool4
                           (++
                              @ Char
                              GHC.Show.showCommaSpace1
                              (unpackAppendCString#
                                 GHC.RTS.Flags.$fShowTickyFlags2
                                 (f8_scQxf
                                    (unpackAppendCString#
                                       GHC.RTS.Flags.$fShowCCFlags2
                                       (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_i88RR)))));
                       True ->
                         ++
                           @ Char
                           GHC.Show.$fShowBool2
                           (++
                              @ Char
                              GHC.Show.showCommaSpace1
                              (unpackAppendCString#
                                 GHC.RTS.Flags.$fShowTickyFlags2
                                 (f8_scQxf
                                    (unpackAppendCString#
                                       GHC.RTS.Flags.$fShowCCFlags2
                                       (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_i88RR)))))
                     })))
      }

-- RHS size: {terms: 12, types: 8, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> TickyFlags -> ShowS
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S,1*U(U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scTfQ [Occ=Once!] :: Int)
                 (w1_scTfR [Occ=Once!] :: TickyFlags) ->
                 case w_scTfQ of { I# ww1_scTfU [Occ=Once] ->
                 case w1_scTfR of
                 { TickyFlags ww3_scTfY [Occ=Once] ww4_scTfZ [Occ=Once] ->
                 GHC.RTS.Flags.$w$cshowsPrec8 ww1_scTfU ww3_scTfY ww4_scTfZ
                 }
                 }}]
GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec
  = \ (w_scTfQ :: Int) (w1_scTfR :: TickyFlags) ->
      case w_scTfQ of { I# ww1_scTfU ->
      case w1_scTfR of { TickyFlags ww3_scTfY ww4_scTfZ ->
      GHC.RTS.Flags.$w$cshowsPrec8 ww1_scTfU ww3_scTfY ww4_scTfZ
      }
      }

-- RHS size: {terms: 9, types: 6, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowTickyFlags_$cshow :: TickyFlags -> String
[GblId,
 Arity=1,
 Str=<S,1*U(U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once] :: TickyFlags) ->
                 GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec
                   GHC.RTS.Flags.$fEnumDoCostCentres10 x_i7Jay (GHC.Types.[] @ Char)}]
GHC.RTS.Flags.$fShowTickyFlags_$cshow
  = \ (x_i7Jay :: TickyFlags) ->
      case x_i7Jay of { TickyFlags ww1_scTfY ww2_scTfZ ->
      GHC.RTS.Flags.$w$cshowsPrec8
        0# ww1_scTfY ww2_scTfZ (GHC.Types.[] @ Char)
      }

-- RHS size: {terms: 8, types: 5, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowTickyFlags1 :: TickyFlags -> ShowS
[GblId,
 Arity=1,
 Str=<S,1*U(U,1*U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 50 0}]
GHC.RTS.Flags.$fShowTickyFlags1
  = \ (w_scTfR :: TickyFlags) ->
      case w_scTfR of { TickyFlags ww1_scTfY ww2_scTfZ ->
      GHC.RTS.Flags.$w$cshowsPrec8 0# ww1_scTfY ww2_scTfZ
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowTickyFlags_$cshowList :: [TickyFlags] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [TickyFlags])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ TickyFlags GHC.RTS.Flags.$fShowTickyFlags1 ls_i7JaB s_i7JaC}]
GHC.RTS.Flags.$fShowTickyFlags_$cshowList
  = \ (ls_i7JaB :: [TickyFlags]) (s_i7JaC :: String) ->
      showList__
        @ TickyFlags GHC.RTS.Flags.$fShowTickyFlags1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowTickyFlags [InlPrag=NOUSERINLINE CONLIKE]
  :: Show TickyFlags
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: TickyFlags
                       GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec
                       GHC.RTS.Flags.$fShowTickyFlags_$cshow
                       GHC.RTS.Flags.$fShowTickyFlags_$cshowList]
GHC.RTS.Flags.$fShowTickyFlags
  = GHC.Show.C:Show
      @ TickyFlags
      GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec
      GHC.RTS.Flags.$fShowTickyFlags_$cshow
      GHC.RTS.Flags.$fShowTickyFlags_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoTrace6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$fShowDoTrace6 = "TraceNone"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoTrace5 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowDoTrace5
  = unpackCString# GHC.RTS.Flags.$fShowDoTrace6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoTrace4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$fShowDoTrace4 = "TraceEventLog"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoTrace3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowDoTrace3
  = unpackCString# GHC.RTS.Flags.$fShowDoTrace4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoTrace2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$fShowDoTrace2 = "TraceStderr"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoTrace1 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowDoTrace1
  = unpackCString# GHC.RTS.Flags.$fShowDoTrace2

-- RHS size: {terms: 16, types: 6, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$w$cshowsPrec4 [InlPrag=NOUSERINLINE[0]]
  :: DoTrace -> String -> String
[GblId,
 Arity=2,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [100 0] 120 0}]
GHC.RTS.Flags.$w$cshowsPrec4
  = \ (w_scTg3 :: DoTrace) (w1_scTg4 :: String) ->
      case w_scTg3 of {
        TraceNone -> ++ @ Char GHC.RTS.Flags.$fShowDoTrace5 w1_scTg4;
        TraceEventLog -> ++ @ Char GHC.RTS.Flags.$fShowDoTrace3 w1_scTg4;
        TraceStderr -> ++ @ Char GHC.RTS.Flags.$fShowDoTrace1 w1_scTg4
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> DoTrace -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (w1_scTg3 [Occ=Once] :: DoTrace)
                 (w2_scTg4 [Occ=Once] :: String) ->
                 GHC.RTS.Flags.$w$cshowsPrec4 w1_scTg3 w2_scTg4}]
GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec
  = \ _ [Occ=Dead] (w1_scTg3 :: DoTrace) (w2_scTg4 :: String) ->
      GHC.RTS.Flags.$w$cshowsPrec4 w1_scTg3 w2_scTg4

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoTrace_$cshow :: DoTrace -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once!] :: DoTrace) ->
                 case x_i7Jay of {
                   TraceNone -> GHC.RTS.Flags.$fShowDoTrace5;
                   TraceEventLog -> GHC.RTS.Flags.$fShowDoTrace3;
                   TraceStderr -> GHC.RTS.Flags.$fShowDoTrace1
                 }}]
GHC.RTS.Flags.$fShowDoTrace_$cshow
  = \ (x_i7Jay :: DoTrace) ->
      case x_i7Jay of {
        TraceNone -> GHC.RTS.Flags.$fShowDoTrace5;
        TraceEventLog -> GHC.RTS.Flags.$fShowDoTrace3;
        TraceStderr -> GHC.RTS.Flags.$fShowDoTrace1
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoTrace_$cshowList :: [DoTrace] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [DoTrace])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ DoTrace GHC.RTS.Flags.$w$cshowsPrec4 ls_i7JaB s_i7JaC}]
GHC.RTS.Flags.$fShowDoTrace_$cshowList
  = \ (ls_i7JaB :: [DoTrace]) (s_i7JaC :: String) ->
      showList__ @ DoTrace GHC.RTS.Flags.$w$cshowsPrec4 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoTrace [InlPrag=NOUSERINLINE CONLIKE]
  :: Show DoTrace
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: DoTrace
                       GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec
                       GHC.RTS.Flags.$fShowDoTrace_$cshow
                       GHC.RTS.Flags.$fShowDoTrace_$cshowList]
GHC.RTS.Flags.$fShowDoTrace
  = GHC.Show.C:Show
      @ DoTrace
      GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec
      GHC.RTS.Flags.$fShowDoTrace_$cshow
      GHC.RTS.Flags.$fShowDoTrace_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_rcV5e :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
f_rcV5e = "TraceFlags {"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f1_rcV5f :: [Char]
[GblId]
f1_rcV5f = unpackCString# f_rcV5e

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl15_rcV5g :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl15_rcV5g = "tracing = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl16_rcV5h :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl16_rcV5h = "timestamp = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl17_rcV5i :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl17_rcV5i = "traceScheduler = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl18_rcV5j :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl18_rcV5j = "traceGc = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl19_rcV5k :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl19_rcV5k = "sparksSampled = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl20_rcV5l :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl20_rcV5l = "sparksFull = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl21_rcV5m :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl21_rcV5m = "user = "#

-- RHS size: {terms: 199, types: 73, coercions: 0, joins: 0/5}
GHC.RTS.Flags.$w$cshowsPrec9 [InlPrag=NOUSERINLINE[0]]
  :: Int#
     -> DoTrace
     -> Bool
     -> Bool
     -> Bool
     -> Bool
     -> Bool
     -> Bool
     -> String
     -> String
[GblId,
 Arity=9,
 Str=<S,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,U>,
 Unf=OtherCon []]
GHC.RTS.Flags.$w$cshowsPrec9
  = \ (ww_scTgc :: Int#)
      (ww1_scTgg :: DoTrace)
      (ww2_scTgh :: Bool)
      (ww3_scTgi :: Bool)
      (ww4_scTgj :: Bool)
      (ww5_scTgk :: Bool)
      (ww6_scTgl :: Bool)
      (ww7_scTgm :: Bool)
      (w_scTg9 :: String) ->
      let {
        g1_scQwK [Dmd=<L,1*C1(U)>] :: String -> String
        [LclId, Arity=1, Str=<L,1*U>, Unf=OtherCon []]
        g1_scQwK
          = \ (x_X7RFl [OS=OneShot] :: String) ->
              unpackAppendCString#
                lvl15_rcV5g
                (let {
                   eta_Xco [Dmd=<L,1*U>] :: String
                   [LclId]
                   eta_Xco
                     = ++
                         @ Char
                         GHC.Show.showCommaSpace1
                         (unpackAppendCString#
                            lvl16_rcV5h
                            (let {
                               eta1_scQx4 [Dmd=<L,1*U>] :: String
                               [LclId]
                               eta1_scQx4
                                 = ++
                                     @ Char
                                     GHC.Show.showCommaSpace1
                                     (unpackAppendCString#
                                        lvl17_rcV5i
                                        (let {
                                           eta2_scQx3 [Dmd=<L,1*U>] :: String
                                           [LclId]
                                           eta2_scQx3
                                             = ++
                                                 @ Char
                                                 GHC.Show.showCommaSpace1
                                                 (unpackAppendCString#
                                                    lvl18_rcV5j
                                                    (let {
                                                       eta3_scQx2 [Dmd=<L,1*U>] :: String
                                                       [LclId]
                                                       eta3_scQx2
                                                         = ++
                                                             @ Char
                                                             GHC.Show.showCommaSpace1
                                                             (unpackAppendCString#
                                                                lvl19_rcV5k
                                                                (case ww5_scTgk of {
                                                                   False ->
                                                                     ++
                                                                       @ Char
                                                                       GHC.Show.$fShowBool4
                                                                       (++
                                                                          @ Char
                                                                          GHC.Show.showCommaSpace1
                                                                          (unpackAppendCString#
                                                                             lvl20_rcV5l
                                                                             (case ww6_scTgl of {
                                                                                False ->
                                                                                  ++
                                                                                    @ Char
                                                                                    GHC.Show.$fShowBool4
                                                                                    (++
                                                                                       @ Char
                                                                                       GHC.Show.showCommaSpace1
                                                                                       (unpackAppendCString#
                                                                                          lvl21_rcV5m
                                                                                          (case ww7_scTgm
                                                                                           of {
                                                                                             False ->
                                                                                               ++
                                                                                                 @ Char
                                                                                                 GHC.Show.$fShowBool4
                                                                                                 (++
                                                                                                    @ Char
                                                                                                    g_rcV52
                                                                                                    x_X7RFl);
                                                                                             True ->
                                                                                               ++
                                                                                                 @ Char
                                                                                                 GHC.Show.$fShowBool2
                                                                                                 (++
                                                                                                    @ Char
                                                                                                    g_rcV52
                                                                                                    x_X7RFl)
                                                                                           })));
                                                                                True ->
                                                                                  ++
                                                                                    @ Char
                                                                                    GHC.Show.$fShowBool2
                                                                                    (++
                                                                                       @ Char
                                                                                       GHC.Show.showCommaSpace1
                                                                                       (unpackAppendCString#
                                                                                          lvl21_rcV5m
                                                                                          (case ww7_scTgm
                                                                                           of {
                                                                                             False ->
                                                                                               ++
                                                                                                 @ Char
                                                                                                 GHC.Show.$fShowBool4
                                                                                                 (++
                                                                                                    @ Char
                                                                                                    g_rcV52
                                                                                                    x_X7RFl);
                                                                                             True ->
                                                                                               ++
                                                                                                 @ Char
                                                                                                 GHC.Show.$fShowBool2
                                                                                                 (++
                                                                                                    @ Char
                                                                                                    g_rcV52
                                                                                                    x_X7RFl)
                                                                                           })))
                                                                              })));
                                                                   True ->
                                                                     ++
                                                                       @ Char
                                                                       GHC.Show.$fShowBool2
                                                                       (++
                                                                          @ Char
                                                                          GHC.Show.showCommaSpace1
                                                                          (unpackAppendCString#
                                                                             lvl20_rcV5l
                                                                             (case ww6_scTgl of {
                                                                                False ->
                                                                                  ++
                                                                                    @ Char
                                                                                    GHC.Show.$fShowBool4
                                                                                    (++
                                                                                       @ Char
                                                                                       GHC.Show.showCommaSpace1
                                                                                       (unpackAppendCString#
                                                                                          lvl21_rcV5m
                                                                                          (case ww7_scTgm
                                                                                           of {
                                                                                             False ->
                                                                                               ++
                                                                                                 @ Char
                                                                                                 GHC.Show.$fShowBool4
                                                                                                 (++
                                                                                                    @ Char
                                                                                                    g_rcV52
                                                                                                    x_X7RFl);
                                                                                             True ->
                                                                                               ++
                                                                                                 @ Char
                                                                                                 GHC.Show.$fShowBool2
                                                                                                 (++
                                                                                                    @ Char
                                                                                                    g_rcV52
                                                                                                    x_X7RFl)
                                                                                           })));
                                                                                True ->
                                                                                  ++
                                                                                    @ Char
                                                                                    GHC.Show.$fShowBool2
                                                                                    (++
                                                                                       @ Char
                                                                                       GHC.Show.showCommaSpace1
                                                                                       (unpackAppendCString#
                                                                                          lvl21_rcV5m
                                                                                          (case ww7_scTgm
                                                                                           of {
                                                                                             False ->
                                                                                               ++
                                                                                                 @ Char
                                                                                                 GHC.Show.$fShowBool4
                                                                                                 (++
                                                                                                    @ Char
                                                                                                    g_rcV52
                                                                                                    x_X7RFl);
                                                                                             True ->
                                                                                               ++
                                                                                                 @ Char
                                                                                                 GHC.Show.$fShowBool2
                                                                                                 (++
                                                                                                    @ Char
                                                                                                    g_rcV52
                                                                                                    x_X7RFl)
                                                                                           })))
                                                                              })))
                                                                 })) } in
                                                     case ww4_scTgj of {
                                                       False ->
                                                         ++ @ Char GHC.Show.$fShowBool4 eta3_scQx2;
                                                       True ->
                                                         ++ @ Char GHC.Show.$fShowBool2 eta3_scQx2
                                                     })) } in
                                         case ww3_scTgi of {
                                           False -> ++ @ Char GHC.Show.$fShowBool4 eta2_scQx3;
                                           True -> ++ @ Char GHC.Show.$fShowBool2 eta2_scQx3
                                         })) } in
                             case ww2_scTgh of {
                               False -> ++ @ Char GHC.Show.$fShowBool4 eta1_scQx4;
                               True -> ++ @ Char GHC.Show.$fShowBool2 eta1_scQx4
                             })) } in
                 case ww1_scTgg of {
                   TraceNone -> ++ @ Char GHC.RTS.Flags.$fShowDoTrace5 eta_Xco;
                   TraceEventLog -> ++ @ Char GHC.RTS.Flags.$fShowDoTrace3 eta_Xco;
                   TraceStderr -> ++ @ Char GHC.RTS.Flags.$fShowDoTrace1 eta_Xco
                 }) } in
      case >=# ww_scTgc 11# of {
        __DEFAULT -> ++ @ Char f1_rcV5f (g1_scQwK w_scTg9);
        1# ->
          GHC.Types.:
            @ Char
            GHC.Show.$fShow(,)4
            (++
               @ Char
               f1_rcV5f
               (g1_scQwK (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w_scTg9)))
      }

-- RHS size: {terms: 19, types: 13, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> TraceFlags -> ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scTg7 [Occ=Once!] :: Int)
                 (w1_scTg8 [Occ=Once!] :: TraceFlags)
                 (w2_scTg9 [Occ=Once] :: String) ->
                 case w_scTg7 of { I# ww1_scTgc [Occ=Once] ->
                 case w1_scTg8 of
                 { TraceFlags ww3_scTgg [Occ=Once] ww4_scTgh [Occ=Once]
                              ww5_scTgi [Occ=Once] ww6_scTgj [Occ=Once] ww7_scTgk [Occ=Once]
                              ww8_scTgl [Occ=Once] ww9_scTgm [Occ=Once] ->
                 GHC.RTS.Flags.$w$cshowsPrec9
                   ww1_scTgc
                   ww3_scTgg
                   ww4_scTgh
                   ww5_scTgi
                   ww6_scTgj
                   ww7_scTgk
                   ww8_scTgl
                   ww9_scTgm
                   w2_scTg9
                 }
                 }}]
GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec
  = \ (w_scTg7 :: Int)
      (w1_scTg8 :: TraceFlags)
      (w2_scTg9 :: String) ->
      case w_scTg7 of { I# ww1_scTgc ->
      case w1_scTg8 of
      { TraceFlags ww3_scTgg ww4_scTgh ww5_scTgi ww6_scTgj ww7_scTgk
                   ww8_scTgl ww9_scTgm ->
      GHC.RTS.Flags.$w$cshowsPrec9
        ww1_scTgc
        ww3_scTgg
        ww4_scTgh
        ww5_scTgi
        ww6_scTgj
        ww7_scTgk
        ww8_scTgl
        ww9_scTgm
        w2_scTg9
      }
      }

-- RHS size: {terms: 14, types: 10, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowTraceFlags_$cshow :: TraceFlags -> String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once] :: TraceFlags) ->
                 GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec
                   GHC.RTS.Flags.$fEnumDoCostCentres10 x_i7Jay (GHC.Types.[] @ Char)}]
GHC.RTS.Flags.$fShowTraceFlags_$cshow
  = \ (x_i7Jay :: TraceFlags) ->
      case x_i7Jay of
      { TraceFlags ww1_scTgg ww2_scTgh ww3_scTgi ww4_scTgj ww5_scTgk
                   ww6_scTgl ww7_scTgm ->
      GHC.RTS.Flags.$w$cshowsPrec9
        0#
        ww1_scTgg
        ww2_scTgh
        ww3_scTgi
        ww4_scTgj
        ww5_scTgk
        ww6_scTgl
        ww7_scTgm
        (GHC.Types.[] @ Char)
      }

-- RHS size: {terms: 15, types: 10, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowTraceFlags1 :: TraceFlags -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 110 0}]
GHC.RTS.Flags.$fShowTraceFlags1
  = \ (w_scTg8 :: TraceFlags) (w1_scTg9 :: String) ->
      case w_scTg8 of
      { TraceFlags ww1_scTgg ww2_scTgh ww3_scTgi ww4_scTgj ww5_scTgk
                   ww6_scTgl ww7_scTgm ->
      GHC.RTS.Flags.$w$cshowsPrec9
        0#
        ww1_scTgg
        ww2_scTgh
        ww3_scTgi
        ww4_scTgj
        ww5_scTgk
        ww6_scTgl
        ww7_scTgm
        w1_scTg9
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowTraceFlags_$cshowList :: [TraceFlags] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [TraceFlags])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ TraceFlags GHC.RTS.Flags.$fShowTraceFlags1 ls_i7JaB s_i7JaC}]
GHC.RTS.Flags.$fShowTraceFlags_$cshowList
  = \ (ls_i7JaB :: [TraceFlags]) (s_i7JaC :: String) ->
      showList__
        @ TraceFlags GHC.RTS.Flags.$fShowTraceFlags1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowTraceFlags [InlPrag=NOUSERINLINE CONLIKE]
  :: Show TraceFlags
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: TraceFlags
                       GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec
                       GHC.RTS.Flags.$fShowTraceFlags_$cshow
                       GHC.RTS.Flags.$fShowTraceFlags_$cshowList]
GHC.RTS.Flags.$fShowTraceFlags
  = GHC.Show.C:Show
      @ TraceFlags
      GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec
      GHC.RTS.Flags.$fShowTraceFlags_$cshow
      GHC.RTS.Flags.$fShowTraceFlags_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile16 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$fShowDoHeapProfile16 = "NoHeapProfiling"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile15 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowDoHeapProfile15
  = unpackCString# GHC.RTS.Flags.$fShowDoHeapProfile16

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile14 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$fShowDoHeapProfile14 = "HeapByCCS"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile13 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowDoHeapProfile13
  = unpackCString# GHC.RTS.Flags.$fShowDoHeapProfile14

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile12 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$fShowDoHeapProfile12 = "HeapByMod"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile11 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowDoHeapProfile11
  = unpackCString# GHC.RTS.Flags.$fShowDoHeapProfile12

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile10 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$fShowDoHeapProfile10 = "HeapByDescr"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile9 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowDoHeapProfile9
  = unpackCString# GHC.RTS.Flags.$fShowDoHeapProfile10

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile8 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$fShowDoHeapProfile8 = "HeapByType"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile7 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowDoHeapProfile7
  = unpackCString# GHC.RTS.Flags.$fShowDoHeapProfile8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$fShowDoHeapProfile6 = "HeapByRetainer"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile5 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowDoHeapProfile5
  = unpackCString# GHC.RTS.Flags.$fShowDoHeapProfile6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$fShowDoHeapProfile4 = "HeapByLDV"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowDoHeapProfile3
  = unpackCString# GHC.RTS.Flags.$fShowDoHeapProfile4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.RTS.Flags.$fShowDoHeapProfile2 = "HeapByClosureType"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile1 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowDoHeapProfile1
  = unpackCString# GHC.RTS.Flags.$fShowDoHeapProfile2

-- RHS size: {terms: 36, types: 11, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$w$cshowsPrec3 [InlPrag=NOUSERINLINE[0]]
  :: DoHeapProfile -> String -> String
[GblId,
 Arity=2,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [300 0] 320 0}]
GHC.RTS.Flags.$w$cshowsPrec3
  = \ (w_scTgq :: DoHeapProfile) (w1_scTgr :: String) ->
      case w_scTgq of {
        NoHeapProfiling ->
          ++ @ Char GHC.RTS.Flags.$fShowDoHeapProfile15 w1_scTgr;
        HeapByCCS ->
          ++ @ Char GHC.RTS.Flags.$fShowDoHeapProfile13 w1_scTgr;
        HeapByMod ->
          ++ @ Char GHC.RTS.Flags.$fShowDoHeapProfile11 w1_scTgr;
        HeapByDescr ->
          ++ @ Char GHC.RTS.Flags.$fShowDoHeapProfile9 w1_scTgr;
        HeapByType ->
          ++ @ Char GHC.RTS.Flags.$fShowDoHeapProfile7 w1_scTgr;
        HeapByRetainer ->
          ++ @ Char GHC.RTS.Flags.$fShowDoHeapProfile5 w1_scTgr;
        HeapByLDV -> ++ @ Char GHC.RTS.Flags.$fShowDoHeapProfile3 w1_scTgr;
        HeapByClosureType ->
          ++ @ Char GHC.RTS.Flags.$fShowDoHeapProfile1 w1_scTgr
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> DoHeapProfile -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (w1_scTgq [Occ=Once] :: DoHeapProfile)
                 (w2_scTgr [Occ=Once] :: String) ->
                 GHC.RTS.Flags.$w$cshowsPrec3 w1_scTgq w2_scTgr}]
GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec
  = \ _ [Occ=Dead]
      (w1_scTgq :: DoHeapProfile)
      (w2_scTgr :: String) ->
      GHC.RTS.Flags.$w$cshowsPrec3 w1_scTgq w2_scTgr

-- RHS size: {terms: 19, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile_$cshow :: DoHeapProfile -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once!] :: DoHeapProfile) ->
                 case x_i7Jay of {
                   NoHeapProfiling -> GHC.RTS.Flags.$fShowDoHeapProfile15;
                   HeapByCCS -> GHC.RTS.Flags.$fShowDoHeapProfile13;
                   HeapByMod -> GHC.RTS.Flags.$fShowDoHeapProfile11;
                   HeapByDescr -> GHC.RTS.Flags.$fShowDoHeapProfile9;
                   HeapByType -> GHC.RTS.Flags.$fShowDoHeapProfile7;
                   HeapByRetainer -> GHC.RTS.Flags.$fShowDoHeapProfile5;
                   HeapByLDV -> GHC.RTS.Flags.$fShowDoHeapProfile3;
                   HeapByClosureType -> GHC.RTS.Flags.$fShowDoHeapProfile1
                 }}]
GHC.RTS.Flags.$fShowDoHeapProfile_$cshow
  = \ (x_i7Jay :: DoHeapProfile) ->
      case x_i7Jay of {
        NoHeapProfiling -> GHC.RTS.Flags.$fShowDoHeapProfile15;
        HeapByCCS -> GHC.RTS.Flags.$fShowDoHeapProfile13;
        HeapByMod -> GHC.RTS.Flags.$fShowDoHeapProfile11;
        HeapByDescr -> GHC.RTS.Flags.$fShowDoHeapProfile9;
        HeapByType -> GHC.RTS.Flags.$fShowDoHeapProfile7;
        HeapByRetainer -> GHC.RTS.Flags.$fShowDoHeapProfile5;
        HeapByLDV -> GHC.RTS.Flags.$fShowDoHeapProfile3;
        HeapByClosureType -> GHC.RTS.Flags.$fShowDoHeapProfile1
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList
  :: [DoHeapProfile] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [DoHeapProfile])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ DoHeapProfile GHC.RTS.Flags.$w$cshowsPrec3 ls_i7JaB s_i7JaC}]
GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList
  = \ (ls_i7JaB :: [DoHeapProfile]) (s_i7JaC :: String) ->
      showList__
        @ DoHeapProfile GHC.RTS.Flags.$w$cshowsPrec3 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoHeapProfile [InlPrag=NOUSERINLINE CONLIKE]
  :: Show DoHeapProfile
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: DoHeapProfile
                       GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec
                       GHC.RTS.Flags.$fShowDoHeapProfile_$cshow
                       GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList]
GHC.RTS.Flags.$fShowDoHeapProfile
  = GHC.Show.C:Show
      @ DoHeapProfile
      GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec
      GHC.RTS.Flags.$fShowDoHeapProfile_$cshow
      GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f2_rcV5n :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
f2_rcV5n = "ProfFlags {"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f3_rcV5o :: [Char]
[GblId]
f3_rcV5o = unpackCString# f2_rcV5n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl22_rcV5p :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl22_rcV5p = "showCCSOnException = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl23_rcV5q :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl23_rcV5q = "maxRetainerSetSize = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl24_rcV5r :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl24_rcV5r = "ccsLength = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl25_rcV5s :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl25_rcV5s = "modSelector = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl26_rcV5t :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl26_rcV5t = "descrSelector = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl27_rcV5u :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl27_rcV5u = "typeSelector = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl28_rcV5v :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl28_rcV5v = "ccSelector = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl29_rcV5w :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl29_rcV5w = "ccsSelector = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl30_rcV5x :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl30_rcV5x = "retainerSelector = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl31_rcV5y :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl31_rcV5y = "bioSelector = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl32_rcV5z :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl32_rcV5z = "doHeapProfile = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl33_rcV5A :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl33_rcV5A = "heapProfileInterval = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl34_rcV5B :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl34_rcV5B = "heapProfileIntervalTicks = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl35_rcV5C :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl35_rcV5C = "includeTSOs = "#

-- RHS size: {terms: 224, types: 141, coercions: 0, joins: 0/11}
GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec
  :: Int -> ProfFlags -> ShowS
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S,1*U(U,1*U(U),U(U),U,U,U(U),U(U),1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
 Unf=OtherCon []]
GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec
  = \ (a_acOjA :: Int) (ds_dcPMg :: ProfFlags) ->
      case ds_dcPMg of
      { ProfFlags b1_acOjB b2_acOjC b3_acOjD b4_acOjE b5_acOjF b6_acOjG
                  b7_acOjH b8_acOjI b9_acOjJ b10_acOjK b11_acOjL b12_acOjM b13_acOjN
                  b14_acOjO ->
      case a_acOjA of { I# x_alMY ->
      let {
        w1_scQwq :: integer-simple-0.1.1.1:GHC.Integer.Type.Integer
        [LclId]
        w1_scQwq
          = case b2_acOjC of { GHC.Word.W64# x#_i9hmC ->
            let {
              i#_scQwy [Dmd=<S,U>] :: Int#
              [LclId]
              i#_scQwy = word2Int# x#_i9hmC } in
            case >=# i#_scQwy 0# of {
              __DEFAULT ->
                integer-simple-0.1.1.1:GHC.Integer.Type.wordToInteger x#_i9hmC;
              1# -> integer-simple-0.1.1.1:GHC.Integer.Type.smallInteger i#_scQwy
            }
            } } in
      let {
        f8_scQwj [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f8_scQwj
          = GHC.Show.$fShowMaybe_$cshowsPrec
              @ [Char]
              GHC.Show.$fShow[]_$s$fShow[]1
              GHC.RTS.Flags.$fEnumDoCostCentres10
              b8_acOjI } in
      let {
        f9_scQwh [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f9_scQwh
          = GHC.Show.$fShowMaybe_$cshowsPrec
              @ [Char]
              GHC.Show.$fShow[]_$s$fShow[]1
              GHC.RTS.Flags.$fEnumDoCostCentres10
              b9_acOjJ } in
      let {
        f10_scQwf [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f10_scQwf
          = GHC.Show.$fShowMaybe_$cshowsPrec
              @ [Char]
              GHC.Show.$fShow[]_$s$fShow[]1
              GHC.RTS.Flags.$fEnumDoCostCentres10
              b10_acOjK } in
      let {
        f11_scQwd [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f11_scQwd
          = GHC.Show.$fShowMaybe_$cshowsPrec
              @ [Char]
              GHC.Show.$fShow[]_$s$fShow[]1
              GHC.RTS.Flags.$fEnumDoCostCentres10
              b11_acOjL } in
      let {
        f12_scQwb [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f12_scQwb
          = GHC.Show.$fShowMaybe_$cshowsPrec
              @ [Char]
              GHC.Show.$fShow[]_$s$fShow[]1
              GHC.RTS.Flags.$fEnumDoCostCentres10
              b12_acOjM } in
      let {
        f13_scQw9 [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f13_scQw9
          = GHC.Show.$fShowMaybe_$cshowsPrec
              @ [Char]
              GHC.Show.$fShow[]_$s$fShow[]1
              GHC.RTS.Flags.$fEnumDoCostCentres10
              b13_acOjN } in
      let {
        f14_scQw7 [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f14_scQw7
          = GHC.Show.$fShowMaybe_$cshowsPrec
              @ [Char]
              GHC.Show.$fShow[]_$s$fShow[]1
              GHC.RTS.Flags.$fEnumDoCostCentres10
              b14_acOjO } in
      let {
        g1_scQw5 [Dmd=<L,C(U)>] :: String -> String
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        g1_scQw5
          = \ (x1_X7RGI :: String) ->
              ++
                @ Char
                GHC.Show.showCommaSpace1
                (unpackAppendCString#
                   lvl23_rcV5q
                   (case b6_acOjG of { W# w_icPQa ->
                    case GHC.Show.$wshowWord
                           w_icPQa
                           (++
                              @ Char
                              GHC.Show.showCommaSpace1
                              (unpackAppendCString#
                                 lvl24_rcV5r
                                 (case b7_acOjH of { W# w2_XcPZm ->
                                  case GHC.Show.$wshowWord
                                         w2_XcPZm
                                         (++
                                            @ Char
                                            GHC.Show.showCommaSpace1
                                            (unpackAppendCString#
                                               lvl25_rcV5s
                                               (f8_scQwj
                                                  (++
                                                     @ Char
                                                     GHC.Show.showCommaSpace1
                                                     (unpackAppendCString#
                                                        lvl26_rcV5t
                                                        (f9_scQwh
                                                           (++
                                                              @ Char
                                                              GHC.Show.showCommaSpace1
                                                              (unpackAppendCString#
                                                                 lvl27_rcV5u
                                                                 (f10_scQwf
                                                                    (++
                                                                       @ Char
                                                                       GHC.Show.showCommaSpace1
                                                                       (unpackAppendCString#
                                                                          lvl28_rcV5v
                                                                          (f11_scQwd
                                                                             (++
                                                                                @ Char
                                                                                GHC.Show.showCommaSpace1
                                                                                (unpackAppendCString#
                                                                                   lvl29_rcV5w
                                                                                   (f12_scQwb
                                                                                      (++
                                                                                         @ Char
                                                                                         GHC.Show.showCommaSpace1
                                                                                         (unpackAppendCString#
                                                                                            lvl30_rcV5x
                                                                                            (f13_scQw9
                                                                                               (++
                                                                                                  @ Char
                                                                                                  GHC.Show.showCommaSpace1
                                                                                                  (unpackAppendCString#
                                                                                                     lvl31_rcV5y
                                                                                                     (f14_scQw7
                                                                                                        (unpackAppendCString#
                                                                                                           GHC.RTS.Flags.$fShowCCFlags2
                                                                                                           x1_X7RGI))))))))))))))))))))))
                                  of
                                  { (# ww1_icPQh, ww2_icPQi #) ->
                                  GHC.Types.: @ Char ww1_icPQh ww2_icPQi
                                  }
                                  })))
                    of
                    { (# ww1_icPQh, ww2_icPQi #) ->
                    GHC.Types.: @ Char ww1_icPQh ww2_icPQi
                    }
                    })) } in
      let {
        g2_scQw4 [Dmd=<L,C(U)>] :: String -> String
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        g2_scQw4
          = \ (x1_X7RH8 :: String) ->
              unpackAppendCString#
                lvl32_rcV5z
                (GHC.RTS.Flags.$w$cshowsPrec3
                   b1_acOjB
                   (++
                      @ Char
                      GHC.Show.showCommaSpace1
                      (unpackAppendCString#
                         lvl33_rcV5A
                         (case GHC.Show.$w$cshowsPrec4
                                 0#
                                 w1_scQwq
                                 (++
                                    @ Char
                                    GHC.Show.showCommaSpace1
                                    (unpackAppendCString#
                                       lvl34_rcV5B
                                       (case b3_acOjD of { W# w_icPQa ->
                                        case GHC.Show.$wshowWord
                                               w_icPQa
                                               (++
                                                  @ Char
                                                  GHC.Show.showCommaSpace1
                                                  (unpackAppendCString#
                                                     lvl35_rcV5C
                                                     (case b4_acOjE of {
                                                        False ->
                                                          ++
                                                            @ Char
                                                            GHC.Show.$fShowBool4
                                                            (++
                                                               @ Char
                                                               GHC.Show.showCommaSpace1
                                                               (unpackAppendCString#
                                                                  lvl22_rcV5p
                                                                  (case b5_acOjF of {
                                                                     False ->
                                                                       ++
                                                                         @ Char
                                                                         GHC.Show.$fShowBool4
                                                                         (g1_scQw5 x1_X7RH8);
                                                                     True ->
                                                                       ++
                                                                         @ Char
                                                                         GHC.Show.$fShowBool2
                                                                         (g1_scQw5 x1_X7RH8)
                                                                   })));
                                                        True ->
                                                          ++
                                                            @ Char
                                                            GHC.Show.$fShowBool2
                                                            (++
                                                               @ Char
                                                               GHC.Show.showCommaSpace1
                                                               (unpackAppendCString#
                                                                  lvl22_rcV5p
                                                                  (case b5_acOjF of {
                                                                     False ->
                                                                       ++
                                                                         @ Char
                                                                         GHC.Show.$fShowBool4
                                                                         (g1_scQw5 x1_X7RH8);
                                                                     True ->
                                                                       ++
                                                                         @ Char
                                                                         GHC.Show.$fShowBool2
                                                                         (g1_scQw5 x1_X7RH8)
                                                                   })))
                                                      })))
                                        of
                                        { (# ww1_icPQh, ww2_icPQi #) ->
                                        GHC.Types.: @ Char ww1_icPQh ww2_icPQi
                                        }
                                        })))
                          of
                          { (# ww3_i9hmN, ww4_i9hmO #) ->
                          GHC.Types.: @ Char ww3_i9hmN ww4_i9hmO
                          })))) } in
      case >=# x_alMY 11# of {
        __DEFAULT ->
          \ (x1_X7RHa :: String) -> ++ @ Char f3_rcV5o (g2_scQw4 x1_X7RHa);
        1# ->
          \ (x1_i88RR :: String) ->
            GHC.Types.:
              @ Char
              GHC.Show.$fShow(,)4
              (++
                 @ Char
                 f3_rcV5o
                 (g2_scQw4 (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x1_i88RR)))
      }
      }
      }

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowProfFlags_$cshow :: ProfFlags -> String
[GblId,
 Arity=1,
 Str=<S,1*U(U,1*U(U),U(U),U,U,U(U),U(U),1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once] :: ProfFlags) ->
                 GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec
                   GHC.RTS.Flags.$fEnumDoCostCentres10 x_i7Jay (GHC.Types.[] @ Char)}]
GHC.RTS.Flags.$fShowProfFlags_$cshow
  = \ (x_i7Jay :: ProfFlags) ->
      GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec
        GHC.RTS.Flags.$fEnumDoCostCentres10 x_i7Jay (GHC.Types.[] @ Char)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowProfFlags1 :: ProfFlags -> ShowS
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.RTS.Flags.$fShowProfFlags1
  = GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec
      GHC.RTS.Flags.$fEnumDoCostCentres10

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowProfFlags_$cshowList :: [ProfFlags] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [ProfFlags])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ ProfFlags GHC.RTS.Flags.$fShowProfFlags1 ls_i7JaB s_i7JaC}]
GHC.RTS.Flags.$fShowProfFlags_$cshowList
  = \ (ls_i7JaB :: [ProfFlags]) (s_i7JaC :: String) ->
      showList__
        @ ProfFlags GHC.RTS.Flags.$fShowProfFlags1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowProfFlags [InlPrag=NOUSERINLINE CONLIKE]
  :: Show ProfFlags
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: ProfFlags
                       GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec
                       GHC.RTS.Flags.$fShowProfFlags_$cshow
                       GHC.RTS.Flags.$fShowProfFlags_$cshowList]
GHC.RTS.Flags.$fShowProfFlags
  = GHC.Show.C:Show
      @ ProfFlags
      GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec
      GHC.RTS.Flags.$fShowProfFlags_$cshow
      GHC.RTS.Flags.$fShowProfFlags_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags14 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$fShowCCFlags14 = "CostCentresNone"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags13 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowCCFlags13
  = unpackCString# GHC.RTS.Flags.$fShowCCFlags14

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags12 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.RTS.Flags.$fShowCCFlags12 = "CostCentresSummary"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags11 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowCCFlags11
  = unpackCString# GHC.RTS.Flags.$fShowCCFlags12

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags10 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.RTS.Flags.$fShowCCFlags10 = "CostCentresVerbose"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags9 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowCCFlags9
  = unpackCString# GHC.RTS.Flags.$fShowCCFlags10

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags8 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$fShowCCFlags8 = "CostCentresAll"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags7 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowCCFlags7
  = unpackCString# GHC.RTS.Flags.$fShowCCFlags8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$fShowCCFlags6 = "CostCentresJSON"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags5 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowCCFlags5
  = unpackCString# GHC.RTS.Flags.$fShowCCFlags6

-- RHS size: {terms: 24, types: 8, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$w$cshowsPrec1 [InlPrag=NOUSERINLINE[0]]
  :: DoCostCentres -> String -> String
[GblId,
 Arity=2,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [180 0] 200 0}]
GHC.RTS.Flags.$w$cshowsPrec1
  = \ (w_scTgW :: DoCostCentres) (w1_scTgX :: String) ->
      case w_scTgW of {
        CostCentresNone ->
          ++ @ Char GHC.RTS.Flags.$fShowCCFlags13 w1_scTgX;
        CostCentresSummary ->
          ++ @ Char GHC.RTS.Flags.$fShowCCFlags11 w1_scTgX;
        CostCentresVerbose ->
          ++ @ Char GHC.RTS.Flags.$fShowCCFlags9 w1_scTgX;
        CostCentresAll -> ++ @ Char GHC.RTS.Flags.$fShowCCFlags7 w1_scTgX;
        CostCentresJSON -> ++ @ Char GHC.RTS.Flags.$fShowCCFlags5 w1_scTgX
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> DoCostCentres -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (w1_scTgW [Occ=Once] :: DoCostCentres)
                 (w2_scTgX [Occ=Once] :: String) ->
                 GHC.RTS.Flags.$w$cshowsPrec1 w1_scTgW w2_scTgX}]
GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec
  = \ _ [Occ=Dead]
      (w1_scTgW :: DoCostCentres)
      (w2_scTgX :: String) ->
      GHC.RTS.Flags.$w$cshowsPrec1 w1_scTgW w2_scTgX

-- RHS size: {terms: 13, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoCostCentres_$cshow :: DoCostCentres -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once!] :: DoCostCentres) ->
                 case x_i7Jay of {
                   CostCentresNone -> GHC.RTS.Flags.$fShowCCFlags13;
                   CostCentresSummary -> GHC.RTS.Flags.$fShowCCFlags11;
                   CostCentresVerbose -> GHC.RTS.Flags.$fShowCCFlags9;
                   CostCentresAll -> GHC.RTS.Flags.$fShowCCFlags7;
                   CostCentresJSON -> GHC.RTS.Flags.$fShowCCFlags5
                 }}]
GHC.RTS.Flags.$fShowDoCostCentres_$cshow
  = \ (x_i7Jay :: DoCostCentres) ->
      case x_i7Jay of {
        CostCentresNone -> GHC.RTS.Flags.$fShowCCFlags13;
        CostCentresSummary -> GHC.RTS.Flags.$fShowCCFlags11;
        CostCentresVerbose -> GHC.RTS.Flags.$fShowCCFlags9;
        CostCentresAll -> GHC.RTS.Flags.$fShowCCFlags7;
        CostCentresJSON -> GHC.RTS.Flags.$fShowCCFlags5
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoCostCentres_$cshowList
  :: [DoCostCentres] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [DoCostCentres])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ DoCostCentres GHC.RTS.Flags.$w$cshowsPrec1 ls_i7JaB s_i7JaC}]
GHC.RTS.Flags.$fShowDoCostCentres_$cshowList
  = \ (ls_i7JaB :: [DoCostCentres]) (s_i7JaC :: String) ->
      showList__
        @ DoCostCentres GHC.RTS.Flags.$w$cshowsPrec1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDoCostCentres [InlPrag=NOUSERINLINE CONLIKE]
  :: Show DoCostCentres
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: DoCostCentres
                       GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec
                       GHC.RTS.Flags.$fShowDoCostCentres_$cshow
                       GHC.RTS.Flags.$fShowDoCostCentres_$cshowList]
GHC.RTS.Flags.$fShowDoCostCentres
  = GHC.Show.C:Show
      @ DoCostCentres
      GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec
      GHC.RTS.Flags.$fShowDoCostCentres_$cshow
      GHC.RTS.Flags.$fShowDoCostCentres_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags16 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$fShowCCFlags16 = "CCFlags {"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags15 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$fShowCCFlags15 = "doCostCentres = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$fShowCCFlags4 = "profilerTicks = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$fShowCCFlags3 = "msecsPerTick = "#

-- RHS size: {terms: 60, types: 36, coercions: 0, joins: 0/1}
GHC.RTS.Flags.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int# -> DoCostCentres -> Int -> Int -> String -> String
[GblId,
 Arity=5,
 Str=<S,U><L,1*U><L,1*U(U)><L,1*U(U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 20 20 0] 481 30}]
GHC.RTS.Flags.$w$cshowsPrec
  = \ (ww_scTh5 :: Int#)
      (ww1_scTh9 :: DoCostCentres)
      (ww2_scTha :: Int)
      (ww3_scThb :: Int)
      (w_scTh2 :: String) ->
      let {
        p_scQvu [Dmd=<L,1*C1(U)>] :: ShowS
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_scQvu
          = \ (x_X7REM [OS=OneShot] :: String) ->
              unpackAppendCString#
                GHC.RTS.Flags.$fShowCCFlags16
                (unpackAppendCString#
                   GHC.RTS.Flags.$fShowCCFlags15
                   (GHC.RTS.Flags.$w$cshowsPrec1
                      ww1_scTh9
                      (++
                         @ Char
                         GHC.Show.showCommaSpace1
                         (unpackAppendCString#
                            GHC.RTS.Flags.$fShowCCFlags4
                            (case ww2_scTha of { I# ww5_i7NVa ->
                             case GHC.Show.$wshowSignedInt
                                    0#
                                    ww5_i7NVa
                                    (++
                                       @ Char
                                       GHC.Show.showCommaSpace1
                                       (unpackAppendCString#
                                          GHC.RTS.Flags.$fShowCCFlags3
                                          (case ww3_scThb of { I# ww7_X7O8P ->
                                           case GHC.Show.$wshowSignedInt
                                                  0#
                                                  ww7_X7O8P
                                                  (unpackAppendCString#
                                                     GHC.RTS.Flags.$fShowCCFlags2 x_X7REM)
                                           of
                                           { (# ww9_i7NVe, ww10_i7NVf #) ->
                                           GHC.Types.: @ Char ww9_i7NVe ww10_i7NVf
                                           }
                                           })))
                             of
                             { (# ww7_i7NVe, ww8_i7NVf #) ->
                             GHC.Types.: @ Char ww7_i7NVe ww8_i7NVf
                             }
                             }))))) } in
      case >=# ww_scTh5 11# of {
        __DEFAULT -> p_scQvu w_scTh2;
        1# ->
          GHC.Types.:
            @ Char
            GHC.Show.$fShow(,)4
            (p_scQvu (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w_scTh2))
      }

-- RHS size: {terms: 15, types: 9, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> CCFlags -> ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U(U),1*U(U))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scTh0 [Occ=Once!] :: Int)
                 (w1_scTh1 [Occ=Once!] :: CCFlags)
                 (w2_scTh2 [Occ=Once] :: String) ->
                 case w_scTh0 of { I# ww1_scTh5 [Occ=Once] ->
                 case w1_scTh1 of
                 { CCFlags ww3_scTh9 [Occ=Once] ww4_scTha [Occ=Once]
                           ww5_scThb [Occ=Once] ->
                 GHC.RTS.Flags.$w$cshowsPrec
                   ww1_scTh5 ww3_scTh9 ww4_scTha ww5_scThb w2_scTh2
                 }
                 }}]
GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec
  = \ (w_scTh0 :: Int) (w1_scTh1 :: CCFlags) (w2_scTh2 :: String) ->
      case w_scTh0 of { I# ww1_scTh5 ->
      case w1_scTh1 of { CCFlags ww3_scTh9 ww4_scTha ww5_scThb ->
      GHC.RTS.Flags.$w$cshowsPrec
        ww1_scTh5 ww3_scTh9 ww4_scTha ww5_scThb w2_scTh2
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags17 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.RTS.Flags.$fShowCCFlags17
  = unpackAppendCString#
      GHC.RTS.Flags.$fShowCCFlags2 (GHC.Types.[] @ Char)

-- RHS size: {terms: 40, types: 29, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$w$cshow [InlPrag=NOUSERINLINE[0]]
  :: DoCostCentres -> Int -> Int -> String
[GblId,
 Arity=3,
 Str=<L,1*U><L,1*U(U)><L,1*U(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 20] 350 0}]
GHC.RTS.Flags.$w$cshow
  = \ (ww_scThh :: DoCostCentres)
      (ww1_scThi :: Int)
      (ww2_scThj :: Int) ->
      unpackAppendCString#
        GHC.RTS.Flags.$fShowCCFlags16
        (unpackAppendCString#
           GHC.RTS.Flags.$fShowCCFlags15
           (GHC.RTS.Flags.$w$cshowsPrec1
              ww_scThh
              (++
                 @ Char
                 GHC.Show.showCommaSpace1
                 (unpackAppendCString#
                    GHC.RTS.Flags.$fShowCCFlags4
                    (case ww1_scThi of { I# ww4_i7NVa ->
                     case GHC.Show.$wshowSignedInt
                            0#
                            ww4_i7NVa
                            (++
                               @ Char
                               GHC.Show.showCommaSpace1
                               (unpackAppendCString#
                                  GHC.RTS.Flags.$fShowCCFlags3
                                  (case ww2_scThj of { I# ww6_X7O8M ->
                                   case GHC.Show.$wshowSignedInt
                                          0# ww6_X7O8M GHC.RTS.Flags.$fShowCCFlags17
                                   of
                                   { (# ww8_i7NVe, ww9_i7NVf #) ->
                                   GHC.Types.: @ Char ww8_i7NVe ww9_i7NVf
                                   }
                                   })))
                     of
                     { (# ww6_i7NVe, ww7_i7NVf #) ->
                     GHC.Types.: @ Char ww6_i7NVe ww7_i7NVf
                     }
                     })))))

-- RHS size: {terms: 8, types: 5, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags_$cshow [InlPrag=NOUSERINLINE[0]]
  :: CCFlags -> String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U,1*U(U),1*U(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scThe [Occ=Once!] :: CCFlags) ->
                 case w_scThe of
                 { CCFlags ww1_scThh [Occ=Once] ww2_scThi [Occ=Once]
                           ww3_scThj [Occ=Once] ->
                 GHC.RTS.Flags.$w$cshow ww1_scThh ww2_scThi ww3_scThj
                 }}]
GHC.RTS.Flags.$fShowCCFlags_$cshow
  = \ (w_scThe :: CCFlags) ->
      case w_scThe of { CCFlags ww1_scThh ww2_scThi ww3_scThj ->
      GHC.RTS.Flags.$w$cshow ww1_scThh ww2_scThi ww3_scThj
      }

-- RHS size: {terms: 11, types: 6, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags1 :: CCFlags -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U(1*U,1*U(U),1*U(U))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 70 0}]
GHC.RTS.Flags.$fShowCCFlags1
  = \ (w_scTh1 :: CCFlags) (w1_scTh2 :: String) ->
      case w_scTh1 of { CCFlags ww1_scTh9 ww2_scTha ww3_scThb ->
      GHC.RTS.Flags.$w$cshowsPrec
        0# ww1_scTh9 ww2_scTha ww3_scThb w1_scTh2
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags_$cshowList :: [CCFlags] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [CCFlags])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ CCFlags GHC.RTS.Flags.$fShowCCFlags1 ls_i7JaB s_i7JaC}]
GHC.RTS.Flags.$fShowCCFlags_$cshowList
  = \ (ls_i7JaB :: [CCFlags]) (s_i7JaC :: String) ->
      showList__ @ CCFlags GHC.RTS.Flags.$fShowCCFlags1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowCCFlags [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CCFlags
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CCFlags
                       GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec
                       GHC.RTS.Flags.$fShowCCFlags_$cshow
                       GHC.RTS.Flags.$fShowCCFlags_$cshowList]
GHC.RTS.Flags.$fShowCCFlags
  = GHC.Show.C:Show
      @ CCFlags
      GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec
      GHC.RTS.Flags.$fShowCCFlags_$cshow
      GHC.RTS.Flags.$fShowCCFlags_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f4_rcV5D :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
f4_rcV5D = "DebugFlags {"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f5_rcV5E :: [Char]
[GblId]
f5_rcV5E = unpackCString# f4_rcV5D

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl36_rcV5F :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl36_rcV5F = "scheduler = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl37_rcV5G :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl37_rcV5G = "interpreter = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl38_rcV5H :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl38_rcV5H = "weak = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl39_rcV5I :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl39_rcV5I = "gccafs = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl40_rcV5J :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl40_rcV5J = "gc = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl41_rcV5K :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl41_rcV5K = "block_alloc = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl42_rcV5L :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl42_rcV5L = "sanity = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl43_rcV5M :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl43_rcV5M = "stable = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl44_rcV5N :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl44_rcV5N = "prof = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl45_rcV5O :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl45_rcV5O = "linker = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl46_rcV5P :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl46_rcV5P = "apply = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl47_rcV5Q :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl47_rcV5Q = "stm = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl48_rcV5R :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl48_rcV5R = "squeeze = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl49_rcV5S :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl49_rcV5S = "hpc = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl50_rcV5T :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl50_rcV5T = "sparks = "#

-- RHS size: {terms: 315, types: 124, coercions: 0, joins: 0/13}
GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec
  :: Int -> DebugFlags -> ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U>,
 Unf=OtherCon []]
GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec
  = \ (a_acOjg :: Int) (ds_dcPMa :: DebugFlags) (eta_B1 :: String) ->
      case ds_dcPMa of
      { DebugFlags b1_acOjh b2_acOji b3_acOjj b4_acOjk b5_acOjl b6_acOjm
                   b7_acOjn b8_acOjo b9_acOjp b10_acOjq b11_acOjr b12_acOjs b13_acOjt
                   b14_acOju b15_acOjv ->
      case a_acOjg of { I# x_alMY ->
      let {
        g1_scQuB [Dmd=<L,1*C1(U)>] :: String -> String
        [LclId, Arity=1, Str=<L,1*U>, Unf=OtherCon []]
        g1_scQuB
          = \ (x1_X7RHC [OS=OneShot] :: String) ->
              unpackAppendCString#
                lvl36_rcV5F
                (let {
                   eta1_scQvk [Dmd=<L,1*U>] :: String
                   [LclId]
                   eta1_scQvk
                     = ++
                         @ Char
                         GHC.Show.showCommaSpace1
                         (unpackAppendCString#
                            lvl37_rcV5G
                            (let {
                               eta2_scQvj [Dmd=<L,1*U>] :: String
                               [LclId]
                               eta2_scQvj
                                 = ++
                                     @ Char
                                     GHC.Show.showCommaSpace1
                                     (unpackAppendCString#
                                        lvl38_rcV5H
                                        (let {
                                           eta3_scQvi [Dmd=<L,1*U>] :: String
                                           [LclId]
                                           eta3_scQvi
                                             = ++
                                                 @ Char
                                                 GHC.Show.showCommaSpace1
                                                 (unpackAppendCString#
                                                    lvl39_rcV5I
                                                    (let {
                                                       eta4_scQvh [Dmd=<L,1*U>] :: String
                                                       [LclId]
                                                       eta4_scQvh
                                                         = ++
                                                             @ Char
                                                             GHC.Show.showCommaSpace1
                                                             (unpackAppendCString#
                                                                lvl40_rcV5J
                                                                (let {
                                                                   eta5_scQvg [Dmd=<L,1*U>]
                                                                     :: String
                                                                   [LclId]
                                                                   eta5_scQvg
                                                                     = ++
                                                                         @ Char
                                                                         GHC.Show.showCommaSpace1
                                                                         (unpackAppendCString#
                                                                            lvl41_rcV5K
                                                                            (let {
                                                                               eta6_scQvf [Dmd=<L,1*U>]
                                                                                 :: String
                                                                               [LclId]
                                                                               eta6_scQvf
                                                                                 = ++
                                                                                     @ Char
                                                                                     GHC.Show.showCommaSpace1
                                                                                     (unpackAppendCString#
                                                                                        lvl42_rcV5L
                                                                                        (let {
                                                                                           eta7_scQve [Dmd=<L,1*U>]
                                                                                             :: String
                                                                                           [LclId]
                                                                                           eta7_scQve
                                                                                             = ++
                                                                                                 @ Char
                                                                                                 GHC.Show.showCommaSpace1
                                                                                                 (unpackAppendCString#
                                                                                                    lvl43_rcV5M
                                                                                                    (let {
                                                                                                       eta8_scQvd [Dmd=<L,1*U>]
                                                                                                         :: String
                                                                                                       [LclId]
                                                                                                       eta8_scQvd
                                                                                                         = ++
                                                                                                             @ Char
                                                                                                             GHC.Show.showCommaSpace1
                                                                                                             (unpackAppendCString#
                                                                                                                lvl44_rcV5N
                                                                                                                (let {
                                                                                                                   eta9_scQvc [Dmd=<L,1*U>]
                                                                                                                     :: String
                                                                                                                   [LclId]
                                                                                                                   eta9_scQvc
                                                                                                                     = ++
                                                                                                                         @ Char
                                                                                                                         GHC.Show.showCommaSpace1
                                                                                                                         (unpackAppendCString#
                                                                                                                            lvl45_rcV5O
                                                                                                                            (let {
                                                                                                                               eta10_scQvb [Dmd=<L,1*U>]
                                                                                                                                 :: String
                                                                                                                               [LclId]
                                                                                                                               eta10_scQvb
                                                                                                                                 = ++
                                                                                                                                     @ Char
                                                                                                                                     GHC.Show.showCommaSpace1
                                                                                                                                     (unpackAppendCString#
                                                                                                                                        lvl46_rcV5P
                                                                                                                                        (let {
                                                                                                                                           eta11_scQva [Dmd=<L,1*U>]
                                                                                                                                             :: String
                                                                                                                                           [LclId]
                                                                                                                                           eta11_scQva
                                                                                                                                             = ++
                                                                                                                                                 @ Char
                                                                                                                                                 GHC.Show.showCommaSpace1
                                                                                                                                                 (unpackAppendCString#
                                                                                                                                                    lvl47_rcV5Q
                                                                                                                                                    (let {
                                                                                                                                                       eta12_scQv9 [Dmd=<L,1*U>]
                                                                                                                                                         :: String
                                                                                                                                                       [LclId]
                                                                                                                                                       eta12_scQv9
                                                                                                                                                         = ++
                                                                                                                                                             @ Char
                                                                                                                                                             GHC.Show.showCommaSpace1
                                                                                                                                                             (unpackAppendCString#
                                                                                                                                                                lvl48_rcV5R
                                                                                                                                                                (case b13_acOjt
                                                                                                                                                                 of {
                                                                                                                                                                   False ->
                                                                                                                                                                     ++
                                                                                                                                                                       @ Char
                                                                                                                                                                       GHC.Show.$fShowBool4
                                                                                                                                                                       (++
                                                                                                                                                                          @ Char
                                                                                                                                                                          GHC.Show.showCommaSpace1
                                                                                                                                                                          (unpackAppendCString#
                                                                                                                                                                             lvl49_rcV5S
                                                                                                                                                                             (case b14_acOju
                                                                                                                                                                              of {
                                                                                                                                                                                False ->
                                                                                                                                                                                  ++
                                                                                                                                                                                    @ Char
                                                                                                                                                                                    GHC.Show.$fShowBool4
                                                                                                                                                                                    (++
                                                                                                                                                                                       @ Char
                                                                                                                                                                                       GHC.Show.showCommaSpace1
                                                                                                                                                                                       (unpackAppendCString#
                                                                                                                                                                                          lvl50_rcV5T
                                                                                                                                                                                          (case b15_acOjv
                                                                                                                                                                                           of {
                                                                                                                                                                                             False ->
                                                                                                                                                                                               ++
                                                                                                                                                                                                 @ Char
                                                                                                                                                                                                 GHC.Show.$fShowBool4
                                                                                                                                                                                                 (++
                                                                                                                                                                                                    @ Char
                                                                                                                                                                                                    g_rcV52
                                                                                                                                                                                                    x1_X7RHC);
                                                                                                                                                                                             True ->
                                                                                                                                                                                               ++
                                                                                                                                                                                                 @ Char
                                                                                                                                                                                                 GHC.Show.$fShowBool2
                                                                                                                                                                                                 (++
                                                                                                                                                                                                    @ Char
                                                                                                                                                                                                    g_rcV52
                                                                                                                                                                                                    x1_X7RHC)
                                                                                                                                                                                           })));
                                                                                                                                                                                True ->
                                                                                                                                                                                  ++
                                                                                                                                                                                    @ Char
                                                                                                                                                                                    GHC.Show.$fShowBool2
                                                                                                                                                                                    (++
                                                                                                                                                                                       @ Char
                                                                                                                                                                                       GHC.Show.showCommaSpace1
                                                                                                                                                                                       (unpackAppendCString#
                                                                                                                                                                                          lvl50_rcV5T
                                                                                                                                                                                          (case b15_acOjv
                                                                                                                                                                                           of {
                                                                                                                                                                                             False ->
                                                                                                                                                                                               ++
                                                                                                                                                                                                 @ Char
                                                                                                                                                                                                 GHC.Show.$fShowBool4
                                                                                                                                                                                                 (++
                                                                                                                                                                                                    @ Char
                                                                                                                                                                                                    g_rcV52
                                                                                                                                                                                                    x1_X7RHC);
                                                                                                                                                                                             True ->
                                                                                                                                                                                               ++
                                                                                                                                                                                                 @ Char
                                                                                                                                                                                                 GHC.Show.$fShowBool2
                                                                                                                                                                                                 (++
                                                                                                                                                                                                    @ Char
                                                                                                                                                                                                    g_rcV52
                                                                                                                                                                                                    x1_X7RHC)
                                                                                                                                                                                           })))
                                                                                                                                                                              })));
                                                                                                                                                                   True ->
                                                                                                                                                                     ++
                                                                                                                                                                       @ Char
                                                                                                                                                                       GHC.Show.$fShowBool2
                                                                                                                                                                       (++
                                                                                                                                                                          @ Char
                                                                                                                                                                          GHC.Show.showCommaSpace1
                                                                                                                                                                          (unpackAppendCString#
                                                                                                                                                                             lvl49_rcV5S
                                                                                                                                                                             (case b14_acOju
                                                                                                                                                                              of {
                                                                                                                                                                                False ->
                                                                                                                                                                                  ++
                                                                                                                                                                                    @ Char
                                                                                                                                                                                    GHC.Show.$fShowBool4
                                                                                                                                                                                    (++
                                                                                                                                                                                       @ Char
                                                                                                                                                                                       GHC.Show.showCommaSpace1
                                                                                                                                                                                       (unpackAppendCString#
                                                                                                                                                                                          lvl50_rcV5T
                                                                                                                                                                                          (case b15_acOjv
                                                                                                                                                                                           of {
                                                                                                                                                                                             False ->
                                                                                                                                                                                               ++
                                                                                                                                                                                                 @ Char
                                                                                                                                                                                                 GHC.Show.$fShowBool4
                                                                                                                                                                                                 (++
                                                                                                                                                                                                    @ Char
                                                                                                                                                                                                    g_rcV52
                                                                                                                                                                                                    x1_X7RHC);
                                                                                                                                                                                             True ->
                                                                                                                                                                                               ++
                                                                                                                                                                                                 @ Char
                                                                                                                                                                                                 GHC.Show.$fShowBool2
                                                                                                                                                                                                 (++
                                                                                                                                                                                                    @ Char
                                                                                                                                                                                                    g_rcV52
                                                                                                                                                                                                    x1_X7RHC)
                                                                                                                                                                                           })));
                                                                                                                                                                                True ->
                                                                                                                                                                                  ++
                                                                                                                                                                                    @ Char
                                                                                                                                                                                    GHC.Show.$fShowBool2
                                                                                                                                                                                    (++
                                                                                                                                                                                       @ Char
                                                                                                                                                                                       GHC.Show.showCommaSpace1
                                                                                                                                                                                       (unpackAppendCString#
                                                                                                                                                                                          lvl50_rcV5T
                                                                                                                                                                                          (case b15_acOjv
                                                                                                                                                                                           of {
                                                                                                                                                                                             False ->
                                                                                                                                                                                               ++
                                                                                                                                                                                                 @ Char
                                                                                                                                                                                                 GHC.Show.$fShowBool4
                                                                                                                                                                                                 (++
                                                                                                                                                                                                    @ Char
                                                                                                                                                                                                    g_rcV52
                                                                                                                                                                                                    x1_X7RHC);
                                                                                                                                                                                             True ->
                                                                                                                                                                                               ++
                                                                                                                                                                                                 @ Char
                                                                                                                                                                                                 GHC.Show.$fShowBool2
                                                                                                                                                                                                 (++
                                                                                                                                                                                                    @ Char
                                                                                                                                                                                                    g_rcV52
                                                                                                                                                                                                    x1_X7RHC)
                                                                                                                                                                                           })))
                                                                                                                                                                              })))
                                                                                                                                                                 })) } in
                                                                                                                                                     case b12_acOjs
                                                                                                                                                     of {
                                                                                                                                                       False ->
                                                                                                                                                         ++
                                                                                                                                                           @ Char
                                                                                                                                                           GHC.Show.$fShowBool4
                                                                                                                                                           eta12_scQv9;
                                                                                                                                                       True ->
                                                                                                                                                         ++
                                                                                                                                                           @ Char
                                                                                                                                                           GHC.Show.$fShowBool2
                                                                                                                                                           eta12_scQv9
                                                                                                                                                     })) } in
                                                                                                                                         case b11_acOjr
                                                                                                                                         of {
                                                                                                                                           False ->
                                                                                                                                             ++
                                                                                                                                               @ Char
                                                                                                                                               GHC.Show.$fShowBool4
                                                                                                                                               eta11_scQva;
                                                                                                                                           True ->
                                                                                                                                             ++
                                                                                                                                               @ Char
                                                                                                                                               GHC.Show.$fShowBool2
                                                                                                                                               eta11_scQva
                                                                                                                                         })) } in
                                                                                                                             case b10_acOjq
                                                                                                                             of {
                                                                                                                               False ->
                                                                                                                                 ++
                                                                                                                                   @ Char
                                                                                                                                   GHC.Show.$fShowBool4
                                                                                                                                   eta10_scQvb;
                                                                                                                               True ->
                                                                                                                                 ++
                                                                                                                                   @ Char
                                                                                                                                   GHC.Show.$fShowBool2
                                                                                                                                   eta10_scQvb
                                                                                                                             })) } in
                                                                                                                 case b9_acOjp
                                                                                                                 of {
                                                                                                                   False ->
                                                                                                                     ++
                                                                                                                       @ Char
                                                                                                                       GHC.Show.$fShowBool4
                                                                                                                       eta9_scQvc;
                                                                                                                   True ->
                                                                                                                     ++
                                                                                                                       @ Char
                                                                                                                       GHC.Show.$fShowBool2
                                                                                                                       eta9_scQvc
                                                                                                                 })) } in
                                                                                                     case b8_acOjo
                                                                                                     of {
                                                                                                       False ->
                                                                                                         ++
                                                                                                           @ Char
                                                                                                           GHC.Show.$fShowBool4
                                                                                                           eta8_scQvd;
                                                                                                       True ->
                                                                                                         ++
                                                                                                           @ Char
                                                                                                           GHC.Show.$fShowBool2
                                                                                                           eta8_scQvd
                                                                                                     })) } in
                                                                                         case b7_acOjn
                                                                                         of {
                                                                                           False ->
                                                                                             ++
                                                                                               @ Char
                                                                                               GHC.Show.$fShowBool4
                                                                                               eta7_scQve;
                                                                                           True ->
                                                                                             ++
                                                                                               @ Char
                                                                                               GHC.Show.$fShowBool2
                                                                                               eta7_scQve
                                                                                         })) } in
                                                                             case b6_acOjm of {
                                                                               False ->
                                                                                 ++
                                                                                   @ Char
                                                                                   GHC.Show.$fShowBool4
                                                                                   eta6_scQvf;
                                                                               True ->
                                                                                 ++
                                                                                   @ Char
                                                                                   GHC.Show.$fShowBool2
                                                                                   eta6_scQvf
                                                                             })) } in
                                                                 case b5_acOjl of {
                                                                   False ->
                                                                     ++
                                                                       @ Char
                                                                       GHC.Show.$fShowBool4
                                                                       eta5_scQvg;
                                                                   True ->
                                                                     ++
                                                                       @ Char
                                                                       GHC.Show.$fShowBool2
                                                                       eta5_scQvg
                                                                 })) } in
                                                     case b4_acOjk of {
                                                       False ->
                                                         ++ @ Char GHC.Show.$fShowBool4 eta4_scQvh;
                                                       True ->
                                                         ++ @ Char GHC.Show.$fShowBool2 eta4_scQvh
                                                     })) } in
                                         case b3_acOjj of {
                                           False -> ++ @ Char GHC.Show.$fShowBool4 eta3_scQvi;
                                           True -> ++ @ Char GHC.Show.$fShowBool2 eta3_scQvi
                                         })) } in
                             case b2_acOji of {
                               False -> ++ @ Char GHC.Show.$fShowBool4 eta2_scQvj;
                               True -> ++ @ Char GHC.Show.$fShowBool2 eta2_scQvj
                             })) } in
                 case b1_acOjh of {
                   False -> ++ @ Char GHC.Show.$fShowBool4 eta1_scQvk;
                   True -> ++ @ Char GHC.Show.$fShowBool2 eta1_scQvk
                 }) } in
      case >=# x_alMY 11# of {
        __DEFAULT -> ++ @ Char f5_rcV5E (g1_scQuB eta_B1);
        1# ->
          GHC.Types.:
            @ Char
            GHC.Show.$fShow(,)4
            (++
               @ Char
               f5_rcV5E
               (g1_scQuB (GHC.Types.: @ Char GHC.Show.$fShow(,)2 eta_B1)))
      }
      }
      }

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDebugFlags_$cshow :: DebugFlags -> String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once] :: DebugFlags) ->
                 GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec
                   GHC.RTS.Flags.$fEnumDoCostCentres10 x_i7Jay (GHC.Types.[] @ Char)}]
GHC.RTS.Flags.$fShowDebugFlags_$cshow
  = \ (x_i7Jay :: DebugFlags) ->
      GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec
        GHC.RTS.Flags.$fEnumDoCostCentres10 x_i7Jay (GHC.Types.[] @ Char)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDebugFlags1 :: DebugFlags -> ShowS
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.RTS.Flags.$fShowDebugFlags1
  = GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec
      GHC.RTS.Flags.$fEnumDoCostCentres10

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDebugFlags_$cshowList :: [DebugFlags] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [DebugFlags])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ DebugFlags GHC.RTS.Flags.$fShowDebugFlags1 ls_i7JaB s_i7JaC}]
GHC.RTS.Flags.$fShowDebugFlags_$cshowList
  = \ (ls_i7JaB :: [DebugFlags]) (s_i7JaC :: String) ->
      showList__
        @ DebugFlags GHC.RTS.Flags.$fShowDebugFlags1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowDebugFlags [InlPrag=NOUSERINLINE CONLIKE]
  :: Show DebugFlags
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: DebugFlags
                       GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec
                       GHC.RTS.Flags.$fShowDebugFlags_$cshow
                       GHC.RTS.Flags.$fShowDebugFlags_$cshowList]
GHC.RTS.Flags.$fShowDebugFlags
  = GHC.Show.C:Show
      @ DebugFlags
      GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec
      GHC.RTS.Flags.$fShowDebugFlags_$cshow
      GHC.RTS.Flags.$fShowDebugFlags_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl51_rcV5U :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl51_rcV5U = "MiscFlags {"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl52_rcV5V :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl52_rcV5V = "tickInterval = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl53_rcV5W :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl53_rcV5W = "installSignalHandlers = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl54_rcV5X :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl54_rcV5X = "installSEHHandlers = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl55_rcV5Y :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl55_rcV5Y = "generateCrashDumpFile = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl56_rcV5Z :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl56_rcV5Z = "generateStackTrace = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl57_rcV60 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl57_rcV60 = "machineReadable = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl58_rcV61 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl58_rcV61 = "linkerMemBase = "#

-- RHS size: {terms: 159, types: 79, coercions: 0, joins: 0/7}
GHC.RTS.Flags.$w$cshowsPrec6 [InlPrag=NOUSERINLINE[0]]
  :: Int#
     -> RtsTime -> Bool -> Bool -> Bool -> Bool -> Bool -> Word -> ShowS
[GblId,
 Arity=8,
 Str=<S,U><L,1*U(U)><L,U><L,U><L,U><L,U><L,U><L,U(U)>,
 Unf=OtherCon []]
GHC.RTS.Flags.$w$cshowsPrec6
  = \ (ww_scThR :: Int#)
      (ww1_scThV :: RtsTime)
      (ww2_scThW :: Bool)
      (ww3_scThX :: Bool)
      (ww4_scThY :: Bool)
      (ww5_scThZ :: Bool)
      (ww6_scTi0 :: Bool)
      (ww7_scTi1 :: Word) ->
      let {
        w1_scQu4 :: integer-simple-0.1.1.1:GHC.Integer.Type.Integer
        [LclId]
        w1_scQu4
          = case ww1_scThV of { GHC.Word.W64# x#_i9hmC ->
            let {
              i#_scQui [Dmd=<S,U>] :: Int#
              [LclId]
              i#_scQui = word2Int# x#_i9hmC } in
            case >=# i#_scQui 0# of {
              __DEFAULT ->
                integer-simple-0.1.1.1:GHC.Integer.Type.wordToInteger x#_i9hmC;
              1# -> integer-simple-0.1.1.1:GHC.Integer.Type.smallInteger i#_scQui
            }
            } } in
      let {
        p_scQtW :: ShowS
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_scQtW
          = \ (x_X7RFS :: String) ->
              unpackAppendCString#
                lvl51_rcV5U
                (unpackAppendCString#
                   lvl52_rcV5V
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           w1_scQu4
                           (++
                              @ Char
                              GHC.Show.showCommaSpace1
                              (unpackAppendCString#
                                 lvl53_rcV5W
                                 (let {
                                    eta_scQug [Dmd=<L,1*U>] :: String
                                    [LclId]
                                    eta_scQug
                                      = ++
                                          @ Char
                                          GHC.Show.showCommaSpace1
                                          (unpackAppendCString#
                                             lvl54_rcV5X
                                             (let {
                                                eta1_scQuf [Dmd=<L,1*U>] :: String
                                                [LclId]
                                                eta1_scQuf
                                                  = ++
                                                      @ Char
                                                      GHC.Show.showCommaSpace1
                                                      (unpackAppendCString#
                                                         lvl55_rcV5Y
                                                         (let {
                                                            eta2_scQue [Dmd=<L,1*U>] :: String
                                                            [LclId]
                                                            eta2_scQue
                                                              = ++
                                                                  @ Char
                                                                  GHC.Show.showCommaSpace1
                                                                  (unpackAppendCString#
                                                                     lvl56_rcV5Z
                                                                     (let {
                                                                        eta3_scQud [Dmd=<L,1*U>]
                                                                          :: String
                                                                        [LclId]
                                                                        eta3_scQud
                                                                          = ++
                                                                              @ Char
                                                                              GHC.Show.showCommaSpace1
                                                                              (unpackAppendCString#
                                                                                 lvl57_rcV60
                                                                                 (case ww6_scTi0
                                                                                  of {
                                                                                    False ->
                                                                                      ++
                                                                                        @ Char
                                                                                        GHC.Show.$fShowBool4
                                                                                        (++
                                                                                           @ Char
                                                                                           GHC.Show.showCommaSpace1
                                                                                           (unpackAppendCString#
                                                                                              lvl58_rcV61
                                                                                              (case ww7_scTi1
                                                                                               of
                                                                                               { W# w_icPQa ->
                                                                                               case GHC.Show.$wshowWord
                                                                                                      w_icPQa
                                                                                                      (unpackAppendCString#
                                                                                                         GHC.RTS.Flags.$fShowCCFlags2
                                                                                                         x_X7RFS)
                                                                                               of
                                                                                               { (# ww9_icPQh,
                                                                                                    ww10_icPQi #) ->
                                                                                               GHC.Types.:
                                                                                                 @ Char
                                                                                                 ww9_icPQh
                                                                                                 ww10_icPQi
                                                                                               }
                                                                                               })));
                                                                                    True ->
                                                                                      ++
                                                                                        @ Char
                                                                                        GHC.Show.$fShowBool2
                                                                                        (++
                                                                                           @ Char
                                                                                           GHC.Show.showCommaSpace1
                                                                                           (unpackAppendCString#
                                                                                              lvl58_rcV61
                                                                                              (case ww7_scTi1
                                                                                               of
                                                                                               { W# w_icPQa ->
                                                                                               case GHC.Show.$wshowWord
                                                                                                      w_icPQa
                                                                                                      (unpackAppendCString#
                                                                                                         GHC.RTS.Flags.$fShowCCFlags2
                                                                                                         x_X7RFS)
                                                                                               of
                                                                                               { (# ww9_icPQh,
                                                                                                    ww10_icPQi #) ->
                                                                                               GHC.Types.:
                                                                                                 @ Char
                                                                                                 ww9_icPQh
                                                                                                 ww10_icPQi
                                                                                               }
                                                                                               })))
                                                                                  })) } in
                                                                      case ww5_scThZ of {
                                                                        False ->
                                                                          ++
                                                                            @ Char
                                                                            GHC.Show.$fShowBool4
                                                                            eta3_scQud;
                                                                        True ->
                                                                          ++
                                                                            @ Char
                                                                            GHC.Show.$fShowBool2
                                                                            eta3_scQud
                                                                      })) } in
                                                          case ww4_scThY of {
                                                            False ->
                                                              ++
                                                                @ Char
                                                                GHC.Show.$fShowBool4
                                                                eta2_scQue;
                                                            True ->
                                                              ++
                                                                @ Char
                                                                GHC.Show.$fShowBool2
                                                                eta2_scQue
                                                          })) } in
                                              case ww3_scThX of {
                                                False -> ++ @ Char GHC.Show.$fShowBool4 eta1_scQuf;
                                                True -> ++ @ Char GHC.Show.$fShowBool2 eta1_scQuf
                                              })) } in
                                  case ww2_scThW of {
                                    False -> ++ @ Char GHC.Show.$fShowBool4 eta_scQug;
                                    True -> ++ @ Char GHC.Show.$fShowBool2 eta_scQug
                                  })))
                    of
                    { (# ww9_i9hmN, ww10_i9hmO #) ->
                    GHC.Types.: @ Char ww9_i9hmN ww10_i9hmO
                    })) } in
      case >=# ww_scThR 11# of {
        __DEFAULT -> p_scQtW;
        1# ->
          \ (x_i88RR :: String) ->
            GHC.Types.:
              @ Char
              GHC.Show.$fShow(,)4
              (p_scQtW (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_i88RR))
      }

-- RHS size: {terms: 17, types: 12, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> MiscFlags -> ShowS
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S,1*U(1*U(U),U,U,U,U,U,U(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scThN [Occ=Once!] :: Int)
                 (w1_scThO [Occ=Once!] :: MiscFlags) ->
                 case w_scThN of { I# ww1_scThR [Occ=Once] ->
                 case w1_scThO of
                 { MiscFlags ww3_scThV [Occ=Once] ww4_scThW [Occ=Once]
                             ww5_scThX [Occ=Once] ww6_scThY [Occ=Once] ww7_scThZ [Occ=Once]
                             ww8_scTi0 [Occ=Once] ww9_scTi1 [Occ=Once] ->
                 GHC.RTS.Flags.$w$cshowsPrec6
                   ww1_scThR
                   ww3_scThV
                   ww4_scThW
                   ww5_scThX
                   ww6_scThY
                   ww7_scThZ
                   ww8_scTi0
                   ww9_scTi1
                 }
                 }}]
GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec
  = \ (w_scThN :: Int) (w1_scThO :: MiscFlags) ->
      case w_scThN of { I# ww1_scThR ->
      case w1_scThO of
      { MiscFlags ww3_scThV ww4_scThW ww5_scThX ww6_scThY ww7_scThZ
                  ww8_scTi0 ww9_scTi1 ->
      GHC.RTS.Flags.$w$cshowsPrec6
        ww1_scThR
        ww3_scThV
        ww4_scThW
        ww5_scThX
        ww6_scThY
        ww7_scThZ
        ww8_scTi0
        ww9_scTi1
      }
      }

-- RHS size: {terms: 14, types: 10, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowMiscFlags_$cshow :: MiscFlags -> String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U(U),U,U,U,U,U,U(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once] :: MiscFlags) ->
                 GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec
                   GHC.RTS.Flags.$fEnumDoCostCentres10 x_i7Jay (GHC.Types.[] @ Char)}]
GHC.RTS.Flags.$fShowMiscFlags_$cshow
  = \ (x_i7Jay :: MiscFlags) ->
      case x_i7Jay of
      { MiscFlags ww1_scThV ww2_scThW ww3_scThX ww4_scThY ww5_scThZ
                  ww6_scTi0 ww7_scTi1 ->
      GHC.RTS.Flags.$w$cshowsPrec6
        0#
        ww1_scThV
        ww2_scThW
        ww3_scThX
        ww4_scThY
        ww5_scThZ
        ww6_scTi0
        ww7_scTi1
        (GHC.Types.[] @ Char)
      }

-- RHS size: {terms: 13, types: 9, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowMiscFlags1 :: MiscFlags -> ShowS
[GblId,
 Arity=1,
 Str=<S,1*U(1*U(U),U,U,U,U,U,U(U))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 100 0}]
GHC.RTS.Flags.$fShowMiscFlags1
  = \ (w_scThO :: MiscFlags) ->
      case w_scThO of
      { MiscFlags ww1_scThV ww2_scThW ww3_scThX ww4_scThY ww5_scThZ
                  ww6_scTi0 ww7_scTi1 ->
      GHC.RTS.Flags.$w$cshowsPrec6
        0#
        ww1_scThV
        ww2_scThW
        ww3_scThX
        ww4_scThY
        ww5_scThZ
        ww6_scTi0
        ww7_scTi1
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowMiscFlags_$cshowList :: [MiscFlags] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [MiscFlags])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ MiscFlags GHC.RTS.Flags.$fShowMiscFlags1 ls_i7JaB s_i7JaC}]
GHC.RTS.Flags.$fShowMiscFlags_$cshowList
  = \ (ls_i7JaB :: [MiscFlags]) (s_i7JaC :: String) ->
      showList__
        @ MiscFlags GHC.RTS.Flags.$fShowMiscFlags1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowMiscFlags [InlPrag=NOUSERINLINE CONLIKE]
  :: Show MiscFlags
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: MiscFlags
                       GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec
                       GHC.RTS.Flags.$fShowMiscFlags_$cshow
                       GHC.RTS.Flags.$fShowMiscFlags_$cshowList]
GHC.RTS.Flags.$fShowMiscFlags
  = GHC.Show.C:Show
      @ MiscFlags
      GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec
      GHC.RTS.Flags.$fShowMiscFlags_$cshow
      GHC.RTS.Flags.$fShowMiscFlags_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowConcFlags4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$fShowConcFlags4 = "ConcFlags {"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowConcFlags3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.RTS.Flags.$fShowConcFlags3 = "ctxtSwitchTime = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowConcFlags2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.RTS.Flags.$fShowConcFlags2 = "ctxtSwitchTicks = "#

-- RHS size: {terms: 66, types: 37, coercions: 0, joins: 0/3}
GHC.RTS.Flags.$w$cshowsPrec2 [InlPrag=NOUSERINLINE[0]]
  :: Int# -> RtsTime -> Int -> ShowS
[GblId,
 Arity=3,
 Str=<S,U><L,1*U(U)><L,U(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 20 20] 452 120}]
GHC.RTS.Flags.$w$cshowsPrec2
  = \ (ww_scTi9 :: Int#) (ww1_scTid :: RtsTime) (ww2_scTie :: Int) ->
      let {
        w1_scQtG :: integer-simple-0.1.1.1:GHC.Integer.Type.Integer
        [LclId]
        w1_scQtG
          = case ww1_scTid of { GHC.Word.W64# x#_i9hmC ->
            let {
              i#_scQtK [Dmd=<S,U>] :: Int#
              [LclId]
              i#_scQtK = word2Int# x#_i9hmC } in
            case >=# i#_scQtK 0# of {
              __DEFAULT ->
                integer-simple-0.1.1.1:GHC.Integer.Type.wordToInteger x#_i9hmC;
              1# -> integer-simple-0.1.1.1:GHC.Integer.Type.smallInteger i#_scQtK
            }
            } } in
      let {
        p_scQtC :: ShowS
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_scQtC
          = \ (x_X7REN :: String) ->
              unpackAppendCString#
                GHC.RTS.Flags.$fShowConcFlags4
                (unpackAppendCString#
                   GHC.RTS.Flags.$fShowConcFlags3
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           w1_scQtG
                           (++
                              @ Char
                              GHC.Show.showCommaSpace1
                              (unpackAppendCString#
                                 GHC.RTS.Flags.$fShowConcFlags2
                                 (case ww2_scTie of { I# ww4_i7NVa ->
                                  case GHC.Show.$wshowSignedInt
                                         0#
                                         ww4_i7NVa
                                         (unpackAppendCString# GHC.RTS.Flags.$fShowCCFlags2 x_X7REN)
                                  of
                                  { (# ww6_i7NVe, ww7_i7NVf #) ->
                                  GHC.Types.: @ Char ww6_i7NVe ww7_i7NVf
                                  }
                                  })))
                    of
                    { (# ww4_i9hmN, ww5_i9hmO #) ->
                    GHC.Types.: @ Char ww4_i9hmN ww5_i9hmO
                    })) } in
      case >=# ww_scTi9 11# of {
        __DEFAULT -> p_scQtC;
        1# ->
          \ (x_i88RR :: String) ->
            GHC.Types.:
              @ Char
              GHC.Show.$fShow(,)4
              (p_scQtC (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_i88RR))
      }

-- RHS size: {terms: 12, types: 7, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> ConcFlags -> ShowS
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S,1*U(1*U(U),U(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scTi5 [Occ=Once!] :: Int)
                 (w1_scTi6 [Occ=Once!] :: ConcFlags) ->
                 case w_scTi5 of { I# ww1_scTi9 [Occ=Once] ->
                 case w1_scTi6 of
                 { ConcFlags ww3_scTid [Occ=Once] ww4_scTie [Occ=Once] ->
                 GHC.RTS.Flags.$w$cshowsPrec2 ww1_scTi9 ww3_scTid ww4_scTie
                 }
                 }}]
GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec
  = \ (w_scTi5 :: Int) (w1_scTi6 :: ConcFlags) ->
      case w_scTi5 of { I# ww1_scTi9 ->
      case w1_scTi6 of { ConcFlags ww3_scTid ww4_scTie ->
      GHC.RTS.Flags.$w$cshowsPrec2 ww1_scTi9 ww3_scTid ww4_scTie
      }
      }

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowConcFlags_$cshow :: ConcFlags -> String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U(U),U(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once] :: ConcFlags) ->
                 GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec
                   GHC.RTS.Flags.$fEnumDoCostCentres10 x_i7Jay (GHC.Types.[] @ Char)}]
GHC.RTS.Flags.$fShowConcFlags_$cshow
  = \ (x_i7Jay :: ConcFlags) ->
      case x_i7Jay of { ConcFlags ww1_scTid ww2_scTie ->
      GHC.RTS.Flags.$w$cshowsPrec2
        0# ww1_scTid ww2_scTie (GHC.Types.[] @ Char)
      }

-- RHS size: {terms: 8, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowConcFlags1 :: ConcFlags -> ShowS
[GblId,
 Arity=1,
 Str=<S,1*U(1*U(U),U(U))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 50 0}]
GHC.RTS.Flags.$fShowConcFlags1
  = \ (w_scTi6 :: ConcFlags) ->
      case w_scTi6 of { ConcFlags ww1_scTid ww2_scTie ->
      GHC.RTS.Flags.$w$cshowsPrec2 0# ww1_scTid ww2_scTie
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowConcFlags_$cshowList :: [ConcFlags] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [ConcFlags])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ ConcFlags GHC.RTS.Flags.$fShowConcFlags1 ls_i7JaB s_i7JaC}]
GHC.RTS.Flags.$fShowConcFlags_$cshowList
  = \ (ls_i7JaB :: [ConcFlags]) (s_i7JaC :: String) ->
      showList__
        @ ConcFlags GHC.RTS.Flags.$fShowConcFlags1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowConcFlags [InlPrag=NOUSERINLINE CONLIKE]
  :: Show ConcFlags
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: ConcFlags
                       GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec
                       GHC.RTS.Flags.$fShowConcFlags_$cshow
                       GHC.RTS.Flags.$fShowConcFlags_$cshowList]
GHC.RTS.Flags.$fShowConcFlags
  = GHC.Show.C:Show
      @ ConcFlags
      GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec
      GHC.RTS.Flags.$fShowConcFlags_$cshow
      GHC.RTS.Flags.$fShowConcFlags_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowGiveGCStats10 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$fShowGiveGCStats10 = "NoGCStats"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowGiveGCStats9 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowGiveGCStats9
  = unpackCString# GHC.RTS.Flags.$fShowGiveGCStats10

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowGiveGCStats8 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$fShowGiveGCStats8 = "CollectGCStats"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowGiveGCStats7 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowGiveGCStats7
  = unpackCString# GHC.RTS.Flags.$fShowGiveGCStats8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowGiveGCStats6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$fShowGiveGCStats6 = "OneLineGCStats"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowGiveGCStats5 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowGiveGCStats5
  = unpackCString# GHC.RTS.Flags.$fShowGiveGCStats6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowGiveGCStats4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$fShowGiveGCStats4 = "SummaryGCStats"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowGiveGCStats3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowGiveGCStats3
  = unpackCString# GHC.RTS.Flags.$fShowGiveGCStats4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowGiveGCStats2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$fShowGiveGCStats2 = "VerboseGCStats"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowGiveGCStats1 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fShowGiveGCStats1
  = unpackCString# GHC.RTS.Flags.$fShowGiveGCStats2

-- RHS size: {terms: 24, types: 8, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$w$cshowsPrec5 [InlPrag=NOUSERINLINE[0]]
  :: GiveGCStats -> String -> String
[GblId,
 Arity=2,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [180 0] 200 0}]
GHC.RTS.Flags.$w$cshowsPrec5
  = \ (w_scTii :: GiveGCStats) (w1_scTij :: String) ->
      case w_scTii of {
        NoGCStats -> ++ @ Char GHC.RTS.Flags.$fShowGiveGCStats9 w1_scTij;
        CollectGCStats ->
          ++ @ Char GHC.RTS.Flags.$fShowGiveGCStats7 w1_scTij;
        OneLineGCStats ->
          ++ @ Char GHC.RTS.Flags.$fShowGiveGCStats5 w1_scTij;
        SummaryGCStats ->
          ++ @ Char GHC.RTS.Flags.$fShowGiveGCStats3 w1_scTij;
        VerboseGCStats ->
          ++ @ Char GHC.RTS.Flags.$fShowGiveGCStats1 w1_scTij
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> GiveGCStats -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (w1_scTii [Occ=Once] :: GiveGCStats)
                 (w2_scTij [Occ=Once] :: String) ->
                 GHC.RTS.Flags.$w$cshowsPrec5 w1_scTii w2_scTij}]
GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec
  = \ _ [Occ=Dead] (w1_scTii :: GiveGCStats) (w2_scTij :: String) ->
      GHC.RTS.Flags.$w$cshowsPrec5 w1_scTii w2_scTij

-- RHS size: {terms: 13, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowGiveGCStats_$cshow :: GiveGCStats -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once!] :: GiveGCStats) ->
                 case x_i7Jay of {
                   NoGCStats -> GHC.RTS.Flags.$fShowGiveGCStats9;
                   CollectGCStats -> GHC.RTS.Flags.$fShowGiveGCStats7;
                   OneLineGCStats -> GHC.RTS.Flags.$fShowGiveGCStats5;
                   SummaryGCStats -> GHC.RTS.Flags.$fShowGiveGCStats3;
                   VerboseGCStats -> GHC.RTS.Flags.$fShowGiveGCStats1
                 }}]
GHC.RTS.Flags.$fShowGiveGCStats_$cshow
  = \ (x_i7Jay :: GiveGCStats) ->
      case x_i7Jay of {
        NoGCStats -> GHC.RTS.Flags.$fShowGiveGCStats9;
        CollectGCStats -> GHC.RTS.Flags.$fShowGiveGCStats7;
        OneLineGCStats -> GHC.RTS.Flags.$fShowGiveGCStats5;
        SummaryGCStats -> GHC.RTS.Flags.$fShowGiveGCStats3;
        VerboseGCStats -> GHC.RTS.Flags.$fShowGiveGCStats1
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowGiveGCStats_$cshowList
  :: [GiveGCStats] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [GiveGCStats])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ GiveGCStats GHC.RTS.Flags.$w$cshowsPrec5 ls_i7JaB s_i7JaC}]
GHC.RTS.Flags.$fShowGiveGCStats_$cshowList
  = \ (ls_i7JaB :: [GiveGCStats]) (s_i7JaC :: String) ->
      showList__
        @ GiveGCStats GHC.RTS.Flags.$w$cshowsPrec5 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowGiveGCStats [InlPrag=NOUSERINLINE CONLIKE]
  :: Show GiveGCStats
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: GiveGCStats
                       GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec
                       GHC.RTS.Flags.$fShowGiveGCStats_$cshow
                       GHC.RTS.Flags.$fShowGiveGCStats_$cshowList]
GHC.RTS.Flags.$fShowGiveGCStats
  = GHC.Show.C:Show
      @ GiveGCStats
      GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec
      GHC.RTS.Flags.$fShowGiveGCStats_$cshow
      GHC.RTS.Flags.$fShowGiveGCStats_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f6_rcV62 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
f6_rcV62 = "GCFlags {"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f7_rcV63 :: [Char]
[GblId]
f7_rcV63 = unpackCString# f6_rcV62

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl59_rcV64 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl59_rcV64 = "statsFile = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl60_rcV65 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl60_rcV65 = "giveStats = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl61_rcV66 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl61_rcV66 = "maxStkSize = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl62_rcV67 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl62_rcV67 = "initialStkSize = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl63_rcV68 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl63_rcV68 = "stkChunkSize = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl64_rcV69 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl64_rcV69 = "stkChunkBufferSize = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl65_rcV6a :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl65_rcV6a = "maxHeapSize = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl66_rcV6b :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl66_rcV6b = "minAllocAreaSize = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl67_rcV6c :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl67_rcV6c = "largeAllocLim = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl68_rcV6d :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl68_rcV6d = "nurseryChunkSize = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl69_rcV6e :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl69_rcV6e = "minOldGenSize = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl70_rcV6f :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl70_rcV6f = "heapSizeSuggestion = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl71_rcV6g :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl71_rcV6g = "heapSizeSuggestionAuto = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl72_rcV6h :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl72_rcV6h = "oldGenFactor = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl73_rcV6i :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl73_rcV6i = "pcFreeHeap = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl74_rcV6j :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl74_rcV6j = "generations = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl75_rcV6k :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl75_rcV6k = "squeezeUpdFrames = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl76_rcV6l :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl76_rcV6l = "compact = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl77_rcV6m :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl77_rcV6m = "compactThreshold = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl78_rcV6n :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl78_rcV6n = "sweep = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl79_rcV6o :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl79_rcV6o = "ringBell = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl80_rcV6p :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl80_rcV6p = "idleGCDelayTime = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl81_rcV6q :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl81_rcV6q = "doIdleGC = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl82_rcV6r :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl82_rcV6r = "heapBase = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl83_rcV6s :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl83_rcV6s = "allocLimitGrace = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl84_rcV6t :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl84_rcV6t = "numa = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl85_rcV6u :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl85_rcV6u = "numaMask = "#

-- RHS size: {terms: 441, types: 308, coercions: 0, joins: 0/13}
GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec :: Int -> GCFlags -> ShowS
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S,1*U(1*U,U,U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U,1*U(U),1*U(U),U(U),U,U,1*U(U),U,U,1*U(U),U,U(U),U(U),U,U(U))>,
 Unf=OtherCon []]
GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec
  = \ (a_acOiD :: Int) (ds_dcPM7 :: GCFlags) ->
      case ds_dcPM7 of
      { GCFlags b1_acOiE b2_acOiF b3_acOiG b4_acOiH b5_acOiI b6_acOiJ
                b7_acOiK b8_acOiL b9_acOiM b10_acOiN b11_acOiO b12_acOiP b13_acOiQ
                b14_acOiR b15_acOiS b16_acOiT b17_acOiU b18_acOiV b19_acOiW
                b20_acOiX b21_acOiY b22_acOiZ b23_acOj0 b24_acOj1 b25_acOj2
                b26_acOj3 b27_acOj4 ->
      case a_acOiD of { I# x_alMY ->
      let {
        f8_scQtc [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f8_scQtc
          = GHC.Show.$fShowMaybe_$cshowsPrec
              @ [Char]
              GHC.Show.$fShow[]_$s$fShow[]1
              GHC.RTS.Flags.$fEnumDoCostCentres10
              b1_acOiE } in
      let {
        f9_scQsX [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f9_scQsX
          = case b14_acOiR of { D# ww1_icPTh ->
            GHC.Float.$w$sshowSignedFloat
              GHC.Float.$fShowDouble2
              GHC.RTS.Flags.$fEnumDoCostCentres10
              ww1_icPTh
            } } in
      let {
        f10_scQsV [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f10_scQsV
          = case b15_acOiS of { D# ww1_icPTh ->
            GHC.Float.$w$sshowSignedFloat
              GHC.Float.$fShowDouble2
              GHC.RTS.Flags.$fEnumDoCostCentres10
              ww1_icPTh
            } } in
      let {
        f11_scQsQ [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f11_scQsQ
          = case b19_acOiW of { D# ww1_icPTh ->
            GHC.Float.$w$sshowSignedFloat
              GHC.Float.$fShowDouble2
              GHC.RTS.Flags.$fEnumDoCostCentres10
              ww1_icPTh
            } } in
      let {
        w1_scQsM :: integer-simple-0.1.1.1:GHC.Integer.Type.Integer
        [LclId]
        w1_scQsM
          = case b22_acOiZ of { GHC.Word.W64# x#_i9hmC ->
            let {
              i#_scQtu [Dmd=<S,U>] :: Int#
              [LclId]
              i#_scQtu = word2Int# x#_i9hmC } in
            case >=# i#_scQtu 0# of {
              __DEFAULT ->
                integer-simple-0.1.1.1:GHC.Integer.Type.wordToInteger x#_i9hmC;
              1# -> integer-simple-0.1.1.1:GHC.Integer.Type.smallInteger i#_scQtu
            }
            } } in
      let {
        g1_scQsF [Dmd=<L,C(U)>] :: String -> String
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        g1_scQsF
          = \ (x1_X7RKO :: String) ->
              unpackAppendCString#
                lvl59_rcV64
                (f8_scQtc
                   (++
                      @ Char
                      GHC.Show.showCommaSpace1
                      (unpackAppendCString#
                         lvl60_rcV65
                         (GHC.RTS.Flags.$w$cshowsPrec5
                            b2_acOiF
                            (++
                               @ Char
                               GHC.Show.showCommaSpace1
                               (unpackAppendCString#
                                  lvl61_rcV66
                                  (case b3_acOiG of { GHC.Word.W32# x#_i9hbW ->
                                   case GHC.Show.$witos
                                          (word2Int# x#_i9hbW)
                                          (++
                                             @ Char
                                             GHC.Show.showCommaSpace1
                                             (unpackAppendCString#
                                                lvl62_rcV67
                                                (case b4_acOiH of { GHC.Word.W32# x#1_X9hm7 ->
                                                 case GHC.Show.$witos
                                                        (word2Int# x#1_X9hm7)
                                                        (++
                                                           @ Char
                                                           GHC.Show.showCommaSpace1
                                                           (unpackAppendCString#
                                                              lvl63_rcV68
                                                              (case b5_acOiI of
                                                               { GHC.Word.W32# x#2_X9hmc ->
                                                               case GHC.Show.$witos
                                                                      (word2Int# x#2_X9hmc)
                                                                      (++
                                                                         @ Char
                                                                         GHC.Show.showCommaSpace1
                                                                         (unpackAppendCString#
                                                                            lvl64_rcV69
                                                                            (case b6_acOiJ of
                                                                             { GHC.Word.W32# x#3_X9hmh ->
                                                                             case GHC.Show.$witos
                                                                                    (word2Int#
                                                                                       x#3_X9hmh)
                                                                                    (++
                                                                                       @ Char
                                                                                       GHC.Show.showCommaSpace1
                                                                                       (unpackAppendCString#
                                                                                          lvl65_rcV6a
                                                                                          (case b7_acOiK
                                                                                           of
                                                                                           { GHC.Word.W32# x#4_X9hmm ->
                                                                                           case GHC.Show.$witos
                                                                                                  (word2Int#
                                                                                                     x#4_X9hmm)
                                                                                                  (++
                                                                                                     @ Char
                                                                                                     GHC.Show.showCommaSpace1
                                                                                                     (unpackAppendCString#
                                                                                                        lvl66_rcV6b
                                                                                                        (case b8_acOiL
                                                                                                         of
                                                                                                         { GHC.Word.W32# x#5_X9hmr ->
                                                                                                         case GHC.Show.$witos
                                                                                                                (word2Int#
                                                                                                                   x#5_X9hmr)
                                                                                                                (++
                                                                                                                   @ Char
                                                                                                                   GHC.Show.showCommaSpace1
                                                                                                                   (unpackAppendCString#
                                                                                                                      lvl67_rcV6c
                                                                                                                      (case b9_acOiM
                                                                                                                       of
                                                                                                                       { GHC.Word.W32# x#6_X9hmw ->
                                                                                                                       case GHC.Show.$witos
                                                                                                                              (word2Int#
                                                                                                                                 x#6_X9hmw)
                                                                                                                              (++
                                                                                                                                 @ Char
                                                                                                                                 GHC.Show.showCommaSpace1
                                                                                                                                 (unpackAppendCString#
                                                                                                                                    lvl68_rcV6d
                                                                                                                                    (case b10_acOiN
                                                                                                                                     of
                                                                                                                                     { GHC.Word.W32# x#7_X9hmB ->
                                                                                                                                     case GHC.Show.$witos
                                                                                                                                            (word2Int#
                                                                                                                                               x#7_X9hmB)
                                                                                                                                            (++
                                                                                                                                               @ Char
                                                                                                                                               GHC.Show.showCommaSpace1
                                                                                                                                               (unpackAppendCString#
                                                                                                                                                  lvl69_rcV6e
                                                                                                                                                  (case b11_acOiO
                                                                                                                                                   of
                                                                                                                                                   { GHC.Word.W32# x#8_X9hmG ->
                                                                                                                                                   case GHC.Show.$witos
                                                                                                                                                          (word2Int#
                                                                                                                                                             x#8_X9hmG)
                                                                                                                                                          (++
                                                                                                                                                             @ Char
                                                                                                                                                             GHC.Show.showCommaSpace1
                                                                                                                                                             (unpackAppendCString#
                                                                                                                                                                lvl70_rcV6f
                                                                                                                                                                (case b12_acOiP
                                                                                                                                                                 of
                                                                                                                                                                 { GHC.Word.W32# x#9_X9hmL ->
                                                                                                                                                                 case GHC.Show.$witos
                                                                                                                                                                        (word2Int#
                                                                                                                                                                           x#9_X9hmL)
                                                                                                                                                                        (++
                                                                                                                                                                           @ Char
                                                                                                                                                                           GHC.Show.showCommaSpace1
                                                                                                                                                                           (unpackAppendCString#
                                                                                                                                                                              lvl71_rcV6g
                                                                                                                                                                              (let {
                                                                                                                                                                                 eta_scQts [Dmd=<L,1*U>]
                                                                                                                                                                                   :: String
                                                                                                                                                                                 [LclId]
                                                                                                                                                                                 eta_scQts
                                                                                                                                                                                   = ++
                                                                                                                                                                                       @ Char
                                                                                                                                                                                       GHC.Show.showCommaSpace1
                                                                                                                                                                                       (unpackAppendCString#
                                                                                                                                                                                          lvl72_rcV6h
                                                                                                                                                                                          (f9_scQsX
                                                                                                                                                                                             (++
                                                                                                                                                                                                @ Char
                                                                                                                                                                                                GHC.Show.showCommaSpace1
                                                                                                                                                                                                (unpackAppendCString#
                                                                                                                                                                                                   lvl73_rcV6i
                                                                                                                                                                                                   (f10_scQsV
                                                                                                                                                                                                      (++
                                                                                                                                                                                                         @ Char
                                                                                                                                                                                                         GHC.Show.showCommaSpace1
                                                                                                                                                                                                         (unpackAppendCString#
                                                                                                                                                                                                            lvl74_rcV6j
                                                                                                                                                                                                            (case b16_acOiT
                                                                                                                                                                                                             of
                                                                                                                                                                                                             { GHC.Word.W32# x#10_X9hmR ->
                                                                                                                                                                                                             case GHC.Show.$witos
                                                                                                                                                                                                                    (word2Int#
                                                                                                                                                                                                                       x#10_X9hmR)
                                                                                                                                                                                                                    (++
                                                                                                                                                                                                                       @ Char
                                                                                                                                                                                                                       GHC.Show.showCommaSpace1
                                                                                                                                                                                                                       (unpackAppendCString#
                                                                                                                                                                                                                          lvl75_rcV6k
                                                                                                                                                                                                                          (let {
                                                                                                                                                                                                                             eta1_scQtr [Dmd=<L,1*U>]
                                                                                                                                                                                                                               :: String
                                                                                                                                                                                                                             [LclId]
                                                                                                                                                                                                                             eta1_scQtr
                                                                                                                                                                                                                               = ++
                                                                                                                                                                                                                                   @ Char
                                                                                                                                                                                                                                   GHC.Show.showCommaSpace1
                                                                                                                                                                                                                                   (unpackAppendCString#
                                                                                                                                                                                                                                      lvl76_rcV6l
                                                                                                                                                                                                                                      (let {
                                                                                                                                                                                                                                         eta2_scQtq [Dmd=<L,1*U>]
                                                                                                                                                                                                                                           :: String
                                                                                                                                                                                                                                         [LclId]
                                                                                                                                                                                                                                         eta2_scQtq
                                                                                                                                                                                                                                           = ++
                                                                                                                                                                                                                                               @ Char
                                                                                                                                                                                                                                               GHC.Show.showCommaSpace1
                                                                                                                                                                                                                                               (unpackAppendCString#
                                                                                                                                                                                                                                                  lvl77_rcV6m
                                                                                                                                                                                                                                                  (f11_scQsQ
                                                                                                                                                                                                                                                     (++
                                                                                                                                                                                                                                                        @ Char
                                                                                                                                                                                                                                                        GHC.Show.showCommaSpace1
                                                                                                                                                                                                                                                        (unpackAppendCString#
                                                                                                                                                                                                                                                           lvl78_rcV6n
                                                                                                                                                                                                                                                           (let {
                                                                                                                                                                                                                                                              eta3_scQtp [Dmd=<L,1*U>]
                                                                                                                                                                                                                                                                :: String
                                                                                                                                                                                                                                                              [LclId]
                                                                                                                                                                                                                                                              eta3_scQtp
                                                                                                                                                                                                                                                                = ++
                                                                                                                                                                                                                                                                    @ Char
                                                                                                                                                                                                                                                                    GHC.Show.showCommaSpace1
                                                                                                                                                                                                                                                                    (unpackAppendCString#
                                                                                                                                                                                                                                                                       lvl79_rcV6o
                                                                                                                                                                                                                                                                       (let {
                                                                                                                                                                                                                                                                          eta4_scQto [Dmd=<L,1*U>]
                                                                                                                                                                                                                                                                            :: String
                                                                                                                                                                                                                                                                          [LclId]
                                                                                                                                                                                                                                                                          eta4_scQto
                                                                                                                                                                                                                                                                            = ++
                                                                                                                                                                                                                                                                                @ Char
                                                                                                                                                                                                                                                                                GHC.Show.showCommaSpace1
                                                                                                                                                                                                                                                                                (unpackAppendCString#
                                                                                                                                                                                                                                                                                   lvl80_rcV6p
                                                                                                                                                                                                                                                                                   (case GHC.Show.$w$cshowsPrec4
                                                                                                                                                                                                                                                                                           0#
                                                                                                                                                                                                                                                                                           w1_scQsM
                                                                                                                                                                                                                                                                                           (++
                                                                                                                                                                                                                                                                                              @ Char
                                                                                                                                                                                                                                                                                              GHC.Show.showCommaSpace1
                                                                                                                                                                                                                                                                                              (unpackAppendCString#
                                                                                                                                                                                                                                                                                                 lvl81_rcV6q
                                                                                                                                                                                                                                                                                                 (let {
                                                                                                                                                                                                                                                                                                    eta5_scQtn [Dmd=<L,1*U>]
                                                                                                                                                                                                                                                                                                      :: String
                                                                                                                                                                                                                                                                                                    [LclId]
                                                                                                                                                                                                                                                                                                    eta5_scQtn
                                                                                                                                                                                                                                                                                                      = ++
                                                                                                                                                                                                                                                                                                          @ Char
                                                                                                                                                                                                                                                                                                          GHC.Show.showCommaSpace1
                                                                                                                                                                                                                                                                                                          (unpackAppendCString#
                                                                                                                                                                                                                                                                                                             lvl82_rcV6r
                                                                                                                                                                                                                                                                                                             (case b24_acOj1
                                                                                                                                                                                                                                                                                                              of
                                                                                                                                                                                                                                                                                                              { W# w_icPQa ->
                                                                                                                                                                                                                                                                                                              case GHC.Show.$wshowWord
                                                                                                                                                                                                                                                                                                                     w_icPQa
                                                                                                                                                                                                                                                                                                                     (++
                                                                                                                                                                                                                                                                                                                        @ Char
                                                                                                                                                                                                                                                                                                                        GHC.Show.showCommaSpace1
                                                                                                                                                                                                                                                                                                                        (unpackAppendCString#
                                                                                                                                                                                                                                                                                                                           lvl83_rcV6s
                                                                                                                                                                                                                                                                                                                           (case b25_acOj2
                                                                                                                                                                                                                                                                                                                            of
                                                                                                                                                                                                                                                                                                                            { W# w2_XcQ1k ->
                                                                                                                                                                                                                                                                                                                            case GHC.Show.$wshowWord
                                                                                                                                                                                                                                                                                                                                   w2_XcQ1k
                                                                                                                                                                                                                                                                                                                                   (++
                                                                                                                                                                                                                                                                                                                                      @ Char
                                                                                                                                                                                                                                                                                                                                      GHC.Show.showCommaSpace1
                                                                                                                                                                                                                                                                                                                                      (unpackAppendCString#
                                                                                                                                                                                                                                                                                                                                         lvl84_rcV6t
                                                                                                                                                                                                                                                                                                                                         (case b26_acOj3
                                                                                                                                                                                                                                                                                                                                          of {
                                                                                                                                                                                                                                                                                                                                            False ->
                                                                                                                                                                                                                                                                                                                                              ++
                                                                                                                                                                                                                                                                                                                                                @ Char
                                                                                                                                                                                                                                                                                                                                                GHC.Show.$fShowBool4
                                                                                                                                                                                                                                                                                                                                                (++
                                                                                                                                                                                                                                                                                                                                                   @ Char
                                                                                                                                                                                                                                                                                                                                                   GHC.Show.showCommaSpace1
                                                                                                                                                                                                                                                                                                                                                   (unpackAppendCString#
                                                                                                                                                                                                                                                                                                                                                      lvl85_rcV6u
                                                                                                                                                                                                                                                                                                                                                      (case b27_acOj4
                                                                                                                                                                                                                                                                                                                                                       of
                                                                                                                                                                                                                                                                                                                                                       { W# w3_XcQ1q ->
                                                                                                                                                                                                                                                                                                                                                       case GHC.Show.$wshowWord
                                                                                                                                                                                                                                                                                                                                                              w3_XcQ1q
                                                                                                                                                                                                                                                                                                                                                              (unpackAppendCString#
                                                                                                                                                                                                                                                                                                                                                                 GHC.RTS.Flags.$fShowCCFlags2
                                                                                                                                                                                                                                                                                                                                                                 x1_X7RKO)
                                                                                                                                                                                                                                                                                                                                                       of
                                                                                                                                                                                                                                                                                                                                                       { (# ww1_icPQh,
                                                                                                                                                                                                                                                                                                                                                            ww2_icPQi #) ->
                                                                                                                                                                                                                                                                                                                                                       GHC.Types.:
                                                                                                                                                                                                                                                                                                                                                         @ Char
                                                                                                                                                                                                                                                                                                                                                         ww1_icPQh
                                                                                                                                                                                                                                                                                                                                                         ww2_icPQi
                                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                                       })));
                                                                                                                                                                                                                                                                                                                                            True ->
                                                                                                                                                                                                                                                                                                                                              ++
                                                                                                                                                                                                                                                                                                                                                @ Char
                                                                                                                                                                                                                                                                                                                                                GHC.Show.$fShowBool2
                                                                                                                                                                                                                                                                                                                                                (++
                                                                                                                                                                                                                                                                                                                                                   @ Char
                                                                                                                                                                                                                                                                                                                                                   GHC.Show.showCommaSpace1
                                                                                                                                                                                                                                                                                                                                                   (unpackAppendCString#
                                                                                                                                                                                                                                                                                                                                                      lvl85_rcV6u
                                                                                                                                                                                                                                                                                                                                                      (case b27_acOj4
                                                                                                                                                                                                                                                                                                                                                       of
                                                                                                                                                                                                                                                                                                                                                       { W# w3_XcQ1q ->
                                                                                                                                                                                                                                                                                                                                                       case GHC.Show.$wshowWord
                                                                                                                                                                                                                                                                                                                                                              w3_XcQ1q
                                                                                                                                                                                                                                                                                                                                                              (unpackAppendCString#
                                                                                                                                                                                                                                                                                                                                                                 GHC.RTS.Flags.$fShowCCFlags2
                                                                                                                                                                                                                                                                                                                                                                 x1_X7RKO)
                                                                                                                                                                                                                                                                                                                                                       of
                                                                                                                                                                                                                                                                                                                                                       { (# ww1_icPQh,
                                                                                                                                                                                                                                                                                                                                                            ww2_icPQi #) ->
                                                                                                                                                                                                                                                                                                                                                       GHC.Types.:
                                                                                                                                                                                                                                                                                                                                                         @ Char
                                                                                                                                                                                                                                                                                                                                                         ww1_icPQh
                                                                                                                                                                                                                                                                                                                                                         ww2_icPQi
                                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                                       })))
                                                                                                                                                                                                                                                                                                                                          })))
                                                                                                                                                                                                                                                                                                                            of
                                                                                                                                                                                                                                                                                                                            { (# ww1_icPQh,
                                                                                                                                                                                                                                                                                                                                 ww2_icPQi #) ->
                                                                                                                                                                                                                                                                                                                            GHC.Types.:
                                                                                                                                                                                                                                                                                                                              @ Char
                                                                                                                                                                                                                                                                                                                              ww1_icPQh
                                                                                                                                                                                                                                                                                                                              ww2_icPQi
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                            })))
                                                                                                                                                                                                                                                                                                              of
                                                                                                                                                                                                                                                                                                              { (# ww1_icPQh,
                                                                                                                                                                                                                                                                                                                   ww2_icPQi #) ->
                                                                                                                                                                                                                                                                                                              GHC.Types.:
                                                                                                                                                                                                                                                                                                                @ Char
                                                                                                                                                                                                                                                                                                                ww1_icPQh
                                                                                                                                                                                                                                                                                                                ww2_icPQi
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                              })) } in
                                                                                                                                                                                                                                                                                                  case b23_acOj0
                                                                                                                                                                                                                                                                                                  of {
                                                                                                                                                                                                                                                                                                    False ->
                                                                                                                                                                                                                                                                                                      ++
                                                                                                                                                                                                                                                                                                        @ Char
                                                                                                                                                                                                                                                                                                        GHC.Show.$fShowBool4
                                                                                                                                                                                                                                                                                                        eta5_scQtn;
                                                                                                                                                                                                                                                                                                    True ->
                                                                                                                                                                                                                                                                                                      ++
                                                                                                                                                                                                                                                                                                        @ Char
                                                                                                                                                                                                                                                                                                        GHC.Show.$fShowBool2
                                                                                                                                                                                                                                                                                                        eta5_scQtn
                                                                                                                                                                                                                                                                                                  })))
                                                                                                                                                                                                                                                                                    of
                                                                                                                                                                                                                                                                                    { (# ww3_i9hmN,
                                                                                                                                                                                                                                                                                         ww4_i9hmO #) ->
                                                                                                                                                                                                                                                                                    GHC.Types.:
                                                                                                                                                                                                                                                                                      @ Char
                                                                                                                                                                                                                                                                                      ww3_i9hmN
                                                                                                                                                                                                                                                                                      ww4_i9hmO
                                                                                                                                                                                                                                                                                    })) } in
                                                                                                                                                                                                                                                                        case b21_acOiY
                                                                                                                                                                                                                                                                        of {
                                                                                                                                                                                                                                                                          False ->
                                                                                                                                                                                                                                                                            ++
                                                                                                                                                                                                                                                                              @ Char
                                                                                                                                                                                                                                                                              GHC.Show.$fShowBool4
                                                                                                                                                                                                                                                                              eta4_scQto;
                                                                                                                                                                                                                                                                          True ->
                                                                                                                                                                                                                                                                            ++
                                                                                                                                                                                                                                                                              @ Char
                                                                                                                                                                                                                                                                              GHC.Show.$fShowBool2
                                                                                                                                                                                                                                                                              eta4_scQto
                                                                                                                                                                                                                                                                        })) } in
                                                                                                                                                                                                                                                            case b20_acOiX
                                                                                                                                                                                                                                                            of {
                                                                                                                                                                                                                                                              False ->
                                                                                                                                                                                                                                                                ++
                                                                                                                                                                                                                                                                  @ Char
                                                                                                                                                                                                                                                                  GHC.Show.$fShowBool4
                                                                                                                                                                                                                                                                  eta3_scQtp;
                                                                                                                                                                                                                                                              True ->
                                                                                                                                                                                                                                                                ++
                                                                                                                                                                                                                                                                  @ Char
                                                                                                                                                                                                                                                                  GHC.Show.$fShowBool2
                                                                                                                                                                                                                                                                  eta3_scQtp
                                                                                                                                                                                                                                                            }))))) } in
                                                                                                                                                                                                                                       case b18_acOiV
                                                                                                                                                                                                                                       of {
                                                                                                                                                                                                                                         False ->
                                                                                                                                                                                                                                           ++
                                                                                                                                                                                                                                             @ Char
                                                                                                                                                                                                                                             GHC.Show.$fShowBool4
                                                                                                                                                                                                                                             eta2_scQtq;
                                                                                                                                                                                                                                         True ->
                                                                                                                                                                                                                                           ++
                                                                                                                                                                                                                                             @ Char
                                                                                                                                                                                                                                             GHC.Show.$fShowBool2
                                                                                                                                                                                                                                             eta2_scQtq
                                                                                                                                                                                                                                       })) } in
                                                                                                                                                                                                                           case b17_acOiU
                                                                                                                                                                                                                           of {
                                                                                                                                                                                                                             False ->
                                                                                                                                                                                                                               ++
                                                                                                                                                                                                                                 @ Char
                                                                                                                                                                                                                                 GHC.Show.$fShowBool4
                                                                                                                                                                                                                                 eta1_scQtr;
                                                                                                                                                                                                                             True ->
                                                                                                                                                                                                                               ++
                                                                                                                                                                                                                                 @ Char
                                                                                                                                                                                                                                 GHC.Show.$fShowBool2
                                                                                                                                                                                                                                 eta1_scQtr
                                                                                                                                                                                                                           })))
                                                                                                                                                                                                             of
                                                                                                                                                                                                             { (# ww5_i9hc4,
                                                                                                                                                                                                                  ww6_i9hc5 #) ->
                                                                                                                                                                                                             GHC.Types.:
                                                                                                                                                                                                               @ Char
                                                                                                                                                                                                               ww5_i9hc4
                                                                                                                                                                                                               ww6_i9hc5
                                                                                                                                                                                                             }
                                                                                                                                                                                                             })))))))) } in
                                                                                                                                                                               case b13_acOiQ
                                                                                                                                                                               of {
                                                                                                                                                                                 False ->
                                                                                                                                                                                   ++
                                                                                                                                                                                     @ Char
                                                                                                                                                                                     GHC.Show.$fShowBool4
                                                                                                                                                                                     eta_scQts;
                                                                                                                                                                                 True ->
                                                                                                                                                                                   ++
                                                                                                                                                                                     @ Char
                                                                                                                                                                                     GHC.Show.$fShowBool2
                                                                                                                                                                                     eta_scQts
                                                                                                                                                                               })))
                                                                                                                                                                 of
                                                                                                                                                                 { (# ww5_i9hc4,
                                                                                                                                                                      ww6_i9hc5 #) ->
                                                                                                                                                                 GHC.Types.:
                                                                                                                                                                   @ Char
                                                                                                                                                                   ww5_i9hc4
                                                                                                                                                                   ww6_i9hc5
                                                                                                                                                                 }
                                                                                                                                                                 })))
                                                                                                                                                   of
                                                                                                                                                   { (# ww5_i9hc4,
                                                                                                                                                        ww6_i9hc5 #) ->
                                                                                                                                                   GHC.Types.:
                                                                                                                                                     @ Char
                                                                                                                                                     ww5_i9hc4
                                                                                                                                                     ww6_i9hc5
                                                                                                                                                   }
                                                                                                                                                   })))
                                                                                                                                     of
                                                                                                                                     { (# ww5_i9hc4,
                                                                                                                                          ww6_i9hc5 #) ->
                                                                                                                                     GHC.Types.:
                                                                                                                                       @ Char
                                                                                                                                       ww5_i9hc4
                                                                                                                                       ww6_i9hc5
                                                                                                                                     }
                                                                                                                                     })))
                                                                                                                       of
                                                                                                                       { (# ww5_i9hc4,
                                                                                                                            ww6_i9hc5 #) ->
                                                                                                                       GHC.Types.:
                                                                                                                         @ Char
                                                                                                                         ww5_i9hc4
                                                                                                                         ww6_i9hc5
                                                                                                                       }
                                                                                                                       })))
                                                                                                         of
                                                                                                         { (# ww5_i9hc4,
                                                                                                              ww6_i9hc5 #) ->
                                                                                                         GHC.Types.:
                                                                                                           @ Char
                                                                                                           ww5_i9hc4
                                                                                                           ww6_i9hc5
                                                                                                         }
                                                                                                         })))
                                                                                           of
                                                                                           { (# ww5_i9hc4,
                                                                                                ww6_i9hc5 #) ->
                                                                                           GHC.Types.:
                                                                                             @ Char
                                                                                             ww5_i9hc4
                                                                                             ww6_i9hc5
                                                                                           }
                                                                                           })))
                                                                             of
                                                                             { (# ww5_i9hc4,
                                                                                  ww6_i9hc5 #) ->
                                                                             GHC.Types.:
                                                                               @ Char
                                                                               ww5_i9hc4
                                                                               ww6_i9hc5
                                                                             }
                                                                             })))
                                                               of
                                                               { (# ww5_i9hc4, ww6_i9hc5 #) ->
                                                               GHC.Types.:
                                                                 @ Char ww5_i9hc4 ww6_i9hc5
                                                               }
                                                               })))
                                                 of
                                                 { (# ww5_i9hc4, ww6_i9hc5 #) ->
                                                 GHC.Types.: @ Char ww5_i9hc4 ww6_i9hc5
                                                 }
                                                 })))
                                   of
                                   { (# ww5_i9hc4, ww6_i9hc5 #) ->
                                   GHC.Types.: @ Char ww5_i9hc4 ww6_i9hc5
                                   }
                                   }))))))) } in
      case >=# x_alMY 11# of {
        __DEFAULT ->
          \ (x1_X7RKQ :: String) -> ++ @ Char f7_rcV63 (g1_scQsF x1_X7RKQ);
        1# ->
          \ (x1_i88RR :: String) ->
            GHC.Types.:
              @ Char
              GHC.Show.$fShow(,)4
              (++
                 @ Char
                 f7_rcV63
                 (g1_scQsF (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x1_i88RR)))
      }
      }
      }

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowGCFlags_$cshow :: GCFlags -> String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U,U,U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U,1*U(U),1*U(U),U(U),U,U,1*U(U),U,U,1*U(U),U,U(U),U(U),U,U(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once] :: GCFlags) ->
                 GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec
                   GHC.RTS.Flags.$fEnumDoCostCentres10 x_i7Jay (GHC.Types.[] @ Char)}]
GHC.RTS.Flags.$fShowGCFlags_$cshow
  = \ (x_i7Jay :: GCFlags) ->
      GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec
        GHC.RTS.Flags.$fEnumDoCostCentres10 x_i7Jay (GHC.Types.[] @ Char)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowGCFlags1 :: GCFlags -> ShowS
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.RTS.Flags.$fShowGCFlags1
  = GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec
      GHC.RTS.Flags.$fEnumDoCostCentres10

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowGCFlags_$cshowList :: [GCFlags] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [GCFlags])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ GCFlags GHC.RTS.Flags.$fShowGCFlags1 ls_i7JaB s_i7JaC}]
GHC.RTS.Flags.$fShowGCFlags_$cshowList
  = \ (ls_i7JaB :: [GCFlags]) (s_i7JaC :: String) ->
      showList__ @ GCFlags GHC.RTS.Flags.$fShowGCFlags1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowGCFlags [InlPrag=NOUSERINLINE CONLIKE]
  :: Show GCFlags
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: GCFlags
                       GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec
                       GHC.RTS.Flags.$fShowGCFlags_$cshow
                       GHC.RTS.Flags.$fShowGCFlags_$cshowList]
GHC.RTS.Flags.$fShowGCFlags
  = GHC.Show.C:Show
      @ GCFlags
      GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec
      GHC.RTS.Flags.$fShowGCFlags_$cshow
      GHC.RTS.Flags.$fShowGCFlags_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl86_rcV6v :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl86_rcV6v = "RTSFlags {"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl87_rcV6w :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl87_rcV6w = "gcFlags = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl88_rcV6x :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl88_rcV6x = "concurrentFlags = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl89_rcV6y :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl89_rcV6y = "miscFlags = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl90_rcV6z :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl90_rcV6z = "debugFlags = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl91_rcV6A :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl91_rcV6A = "costCentreFlags = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl92_rcV6B :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl92_rcV6B = "profilingFlags = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl93_rcV6C :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl93_rcV6C = "traceFlags = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl94_rcV6D :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl94_rcV6D = "tickyFlags = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl95_rcV6E :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl95_rcV6E = "parFlags = "#

-- RHS size: {terms: 133, types: 61, coercions: 0, joins: 0/6}
GHC.RTS.Flags.$w$cshowsPrec7 [InlPrag=NOUSERINLINE[0]]
  :: Int#
     -> GCFlags
     -> ConcFlags
     -> MiscFlags
     -> DebugFlags
     -> CCFlags
     -> ProfFlags
     -> TraceFlags
     -> TickyFlags
     -> ParFlags
     -> ShowS
[GblId,
 Arity=10,
 Str=<S,U><L,1*U(1*U,U,U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U,1*U(U),1*U(U),U(U),U,U,1*U(U),U,U,1*U(U),U,U(U),U(U),U,U(U))><L,1*U(1*U(U),U(U))><L,1*U(1*U(U),U,U,U,U,U,U(U))><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U(U),U(U))><L,1*U(U,1*U(U),U(U),U,U,U(U),U(U),1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U(U,U,U,U,U,U,U)><L,1*U(U,1*U)><L,U(U(U),U,U(U),U,U(U),U,U(U),U(U),U(U),U)>,
 Unf=OtherCon []]
GHC.RTS.Flags.$w$cshowsPrec7
  = \ (ww_scTj1 :: Int#)
      (ww1_scTj5 :: GCFlags)
      (ww2_scTj6 :: ConcFlags)
      (ww3_scTj7 :: MiscFlags)
      (ww4_scTj8 :: DebugFlags)
      (ww5_scTj9 :: CCFlags)
      (ww6_scTja :: ProfFlags)
      (ww7_scTjb :: TraceFlags)
      (ww8_scTjc :: TickyFlags)
      (ww9_scTjd :: ParFlags) ->
      let {
        f8_scQs2 [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f8_scQs2
          = GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec
              GHC.RTS.Flags.$fEnumDoCostCentres10 ww1_scTj5 } in
      let {
        f9_scQs0 [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f9_scQs0
          = case ww2_scTj6 of { ConcFlags ww11_scTid ww12_scTie ->
            GHC.RTS.Flags.$w$cshowsPrec2 0# ww11_scTid ww12_scTie
            } } in
      let {
        f10_scQrY [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f10_scQrY
          = case ww3_scTj7 of
            { MiscFlags ww11_scThV ww12_scThW ww13_scThX ww14_scThY ww15_scThZ
                        ww16_scTi0 ww17_scTi1 ->
            GHC.RTS.Flags.$w$cshowsPrec6
              0#
              ww11_scThV
              ww12_scThW
              ww13_scThX
              ww14_scThY
              ww15_scThZ
              ww16_scTi0
              ww17_scTi1
            } } in
      let {
        f11_scQrS [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f11_scQrS
          = GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec
              GHC.RTS.Flags.$fEnumDoCostCentres10 ww6_scTja } in
      let {
        f12_scQrO [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f12_scQrO
          = case ww8_scTjc of { TickyFlags ww11_scTfY ww12_scTfZ ->
            GHC.RTS.Flags.$w$cshowsPrec8 0# ww11_scTfY ww12_scTfZ
            } } in
      let {
        p_scQrK :: ShowS
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_scQrK
          = \ (x_X7RGA :: String) ->
              unpackAppendCString#
                lvl86_rcV6v
                (unpackAppendCString#
                   lvl87_rcV6w
                   (f8_scQs2
                      (++
                         @ Char
                         GHC.Show.showCommaSpace1
                         (unpackAppendCString#
                            lvl88_rcV6x
                            (f9_scQs0
                               (++
                                  @ Char
                                  GHC.Show.showCommaSpace1
                                  (unpackAppendCString#
                                     lvl89_rcV6y
                                     (f10_scQrY
                                        (++
                                           @ Char
                                           GHC.Show.showCommaSpace1
                                           (unpackAppendCString#
                                              lvl90_rcV6z
                                              (GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec
                                                 GHC.RTS.Flags.$fEnumDoCostCentres10
                                                 ww4_scTj8
                                                 (++
                                                    @ Char
                                                    GHC.Show.showCommaSpace1
                                                    (unpackAppendCString#
                                                       lvl91_rcV6A
                                                       (case ww5_scTj9 of
                                                        { CCFlags ww11_scTh9 ww12_scTha
                                                                  ww13_scThb ->
                                                        GHC.RTS.Flags.$w$cshowsPrec
                                                          0#
                                                          ww11_scTh9
                                                          ww12_scTha
                                                          ww13_scThb
                                                          (++
                                                             @ Char
                                                             GHC.Show.showCommaSpace1
                                                             (unpackAppendCString#
                                                                lvl92_rcV6B
                                                                (f11_scQrS
                                                                   (++
                                                                      @ Char
                                                                      GHC.Show.showCommaSpace1
                                                                      (unpackAppendCString#
                                                                         lvl93_rcV6C
                                                                         (case ww7_scTjb of
                                                                          { TraceFlags ww15_scTgg
                                                                                       ww16_scTgh
                                                                                       ww17_scTgi
                                                                                       ww18_scTgj
                                                                                       ww19_scTgk
                                                                                       ww20_scTgl
                                                                                       ww21_scTgm ->
                                                                          GHC.RTS.Flags.$w$cshowsPrec9
                                                                            0#
                                                                            ww15_scTgg
                                                                            ww16_scTgh
                                                                            ww17_scTgi
                                                                            ww18_scTgj
                                                                            ww19_scTgk
                                                                            ww20_scTgl
                                                                            ww21_scTgm
                                                                            (++
                                                                               @ Char
                                                                               GHC.Show.showCommaSpace1
                                                                               (unpackAppendCString#
                                                                                  lvl94_rcV6D
                                                                                  (f12_scQrO
                                                                                     (++
                                                                                        @ Char
                                                                                        GHC.Show.showCommaSpace1
                                                                                        (unpackAppendCString#
                                                                                           lvl95_rcV6E
                                                                                           (GHC.RTS.Flags.$fShowParFlags_$cshowsPrec
                                                                                              GHC.RTS.Flags.$fEnumDoCostCentres10
                                                                                              ww9_scTjd
                                                                                              (unpackAppendCString#
                                                                                                 GHC.RTS.Flags.$fShowCCFlags2
                                                                                                 x_X7RGA)))))))
                                                                          }))))))
                                                        })))))))))))))) } in
      case >=# ww_scTj1 11# of {
        __DEFAULT -> p_scQrK;
        1# ->
          \ (x_i88RR :: String) ->
            GHC.Types.:
              @ Char
              GHC.Show.$fShow(,)4
              (p_scQrK (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_i88RR))
      }

-- RHS size: {terms: 19, types: 14, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> RTSFlags -> ShowS
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S,1*U(1*U(1*U,U,U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U,1*U(U),1*U(U),U(U),U,U,1*U(U),U,U,1*U(U),U,U(U),U(U),U,U(U)),1*U(1*U(U),U(U)),1*U(1*U(U),U,U,U,U,U,U(U)),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U(U,U(U),U(U)),1*U(U,1*U(U),U(U),U,U,U(U),U(U),1*U,1*U,1*U,1*U,1*U,1*U,1*U),U(U,U,U,U,U,U,U),1*U(U,1*U),U(U(U),U,U(U),U,U(U),U,U(U),U(U),U(U),U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scTiX [Occ=Once!] :: Int)
                 (w1_scTiY [Occ=Once!] :: RTSFlags) ->
                 case w_scTiX of { I# ww1_scTj1 [Occ=Once] ->
                 case w1_scTiY of
                 { RTSFlags ww3_scTj5 [Occ=Once] ww4_scTj6 [Occ=Once]
                            ww5_scTj7 [Occ=Once] ww6_scTj8 [Occ=Once] ww7_scTj9 [Occ=Once]
                            ww8_scTja [Occ=Once] ww9_scTjb [Occ=Once] ww10_scTjc [Occ=Once]
                            ww11_scTjd [Occ=Once] ->
                 GHC.RTS.Flags.$w$cshowsPrec7
                   ww1_scTj1
                   ww3_scTj5
                   ww4_scTj6
                   ww5_scTj7
                   ww6_scTj8
                   ww7_scTj9
                   ww8_scTja
                   ww9_scTjb
                   ww10_scTjc
                   ww11_scTjd
                 }
                 }}]
GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec
  = \ (w_scTiX :: Int) (w1_scTiY :: RTSFlags) ->
      case w_scTiX of { I# ww1_scTj1 ->
      case w1_scTiY of
      { RTSFlags ww3_scTj5 ww4_scTj6 ww5_scTj7 ww6_scTj8 ww7_scTj9
                 ww8_scTja ww9_scTjb ww10_scTjc ww11_scTjd ->
      GHC.RTS.Flags.$w$cshowsPrec7
        ww1_scTj1
        ww3_scTj5
        ww4_scTj6
        ww5_scTj7
        ww6_scTj8
        ww7_scTj9
        ww8_scTja
        ww9_scTjb
        ww10_scTjc
        ww11_scTjd
      }
      }

-- RHS size: {terms: 16, types: 12, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowRTSFlags_$cshow :: RTSFlags -> String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U(1*U,U,U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U,1*U(U),1*U(U),U(U),U,U,1*U(U),U,U,1*U(U),U,U(U),U(U),U,U(U)),1*U(1*U(U),U(U)),1*U(1*U(U),U,U,U,U,U,U(U)),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U(U,U(U),U(U)),1*U(U,1*U(U),U(U),U,U,U(U),U(U),1*U,1*U,1*U,1*U,1*U,1*U,1*U),U(U,U,U,U,U,U,U),1*U(U,1*U),U(U(U),U,U(U),U,U(U),U,U(U),U(U),U(U),U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once] :: RTSFlags) ->
                 GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec
                   GHC.RTS.Flags.$fEnumDoCostCentres10 x_i7Jay (GHC.Types.[] @ Char)}]
GHC.RTS.Flags.$fShowRTSFlags_$cshow
  = \ (x_i7Jay :: RTSFlags) ->
      case x_i7Jay of
      { RTSFlags ww1_scTj5 ww2_scTj6 ww3_scTj7 ww4_scTj8 ww5_scTj9
                 ww6_scTja ww7_scTjb ww8_scTjc ww9_scTjd ->
      GHC.RTS.Flags.$w$cshowsPrec7
        0#
        ww1_scTj5
        ww2_scTj6
        ww3_scTj7
        ww4_scTj8
        ww5_scTj9
        ww6_scTja
        ww7_scTjb
        ww8_scTjc
        ww9_scTjd
        (GHC.Types.[] @ Char)
      }

-- RHS size: {terms: 15, types: 11, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowRTSFlags1 :: RTSFlags -> ShowS
[GblId,
 Arity=1,
 Str=<S,1*U(1*U(1*U,U,U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U,1*U(U),1*U(U),U(U),U,U,1*U(U),U,U,1*U(U),U,U(U),U(U),U,U(U)),1*U(1*U(U),U(U)),1*U(1*U(U),U,U,U,U,U,U(U)),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U(U,U(U),U(U)),1*U(U,1*U(U),U(U),U,U,U(U),U(U),1*U,1*U,1*U,1*U,1*U,1*U,1*U),U(U,U,U,U,U,U,U),1*U(U,1*U),U(U(U),U,U(U),U,U(U),U,U(U),U(U),U(U),U))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 120 0}]
GHC.RTS.Flags.$fShowRTSFlags1
  = \ (w_scTiY :: RTSFlags) ->
      case w_scTiY of
      { RTSFlags ww1_scTj5 ww2_scTj6 ww3_scTj7 ww4_scTj8 ww5_scTj9
                 ww6_scTja ww7_scTjb ww8_scTjc ww9_scTjd ->
      GHC.RTS.Flags.$w$cshowsPrec7
        0#
        ww1_scTj5
        ww2_scTj6
        ww3_scTj7
        ww4_scTj8
        ww5_scTj9
        ww6_scTja
        ww7_scTjb
        ww8_scTjc
        ww9_scTjd
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowRTSFlags_$cshowList :: [RTSFlags] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [RTSFlags])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ RTSFlags GHC.RTS.Flags.$fShowRTSFlags1 ls_i7JaB s_i7JaC}]
GHC.RTS.Flags.$fShowRTSFlags_$cshowList
  = \ (ls_i7JaB :: [RTSFlags]) (s_i7JaC :: String) ->
      showList__
        @ RTSFlags GHC.RTS.Flags.$fShowRTSFlags1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fShowRTSFlags [InlPrag=NOUSERINLINE CONLIKE]
  :: Show RTSFlags
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: RTSFlags
                       GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec
                       GHC.RTS.Flags.$fShowRTSFlags_$cshow
                       GHC.RTS.Flags.$fShowRTSFlags_$cshowList]
GHC.RTS.Flags.$fShowRTSFlags
  = GHC.Show.C:Show
      @ RTSFlags
      GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec
      GHC.RTS.Flags.$fShowRTSFlags_$cshow
      GHC.RTS.Flags.$fShowRTSFlags_$cshowList

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
numaMask :: GCFlags -> Word
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLLLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U))>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPLD [Occ=Once!] :: GCFlags) ->
                 case ds_dcPLD of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] ds27_dcPM4 [Occ=Once] ->
                 ds27_dcPM4
                 }}]
numaMask
  = \ (ds_dcPLD :: GCFlags) ->
      case ds_dcPLD of
      { GCFlags ds1_dcPLE ds2_dcPLF ds3_dcPLG ds4_dcPLH ds5_dcPLI
                ds6_dcPLJ ds7_dcPLK ds8_dcPLL ds9_dcPLM ds10_dcPLN ds11_dcPLO
                ds12_dcPLP ds13_dcPLQ ds14_dcPLR ds15_dcPLS ds16_dcPLT ds17_dcPLU
                ds18_dcPLV ds19_dcPLW ds20_dcPLX ds21_dcPLY ds22_dcPLZ ds23_dcPM0
                ds24_dcPM1 ds25_dcPM2 ds26_dcPM3 ds27_dcPM4 ->
      ds27_dcPM4
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
numa :: GCFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLLLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPLb [Occ=Once!] :: GCFlags) ->
                 case ds_dcPLb of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] ds26_dcPLB [Occ=Once] _ [Occ=Dead] ->
                 ds26_dcPLB
                 }}]
numa
  = \ (ds_dcPLb :: GCFlags) ->
      case ds_dcPLb of
      { GCFlags ds1_dcPLc ds2_dcPLd ds3_dcPLe ds4_dcPLf ds5_dcPLg
                ds6_dcPLh ds7_dcPLi ds8_dcPLj ds9_dcPLk ds10_dcPLl ds11_dcPLm
                ds12_dcPLn ds13_dcPLo ds14_dcPLp ds15_dcPLq ds16_dcPLr ds17_dcPLs
                ds18_dcPLt ds19_dcPLu ds20_dcPLv ds21_dcPLw ds22_dcPLx ds23_dcPLy
                ds24_dcPLz ds25_dcPLA ds26_dcPLB ds27_dcPLC ->
      ds26_dcPLB
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
allocLimitGrace :: GCFlags -> Word
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLLLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPKJ [Occ=Once!] :: GCFlags) ->
                 case ds_dcPKJ of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           ds25_dcPL8 [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds25_dcPL8
                 }}]
allocLimitGrace
  = \ (ds_dcPKJ :: GCFlags) ->
      case ds_dcPKJ of
      { GCFlags ds1_dcPKK ds2_dcPKL ds3_dcPKM ds4_dcPKN ds5_dcPKO
                ds6_dcPKP ds7_dcPKQ ds8_dcPKR ds9_dcPKS ds10_dcPKT ds11_dcPKU
                ds12_dcPKV ds13_dcPKW ds14_dcPKX ds15_dcPKY ds16_dcPKZ ds17_dcPL0
                ds18_dcPL1 ds19_dcPL2 ds20_dcPL3 ds21_dcPL4 ds22_dcPL5 ds23_dcPL6
                ds24_dcPL7 ds25_dcPL8 ds26_dcPL9 ds27_dcPLa ->
      ds25_dcPL8
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
heapBase :: GCFlags -> Word
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLLLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPKh [Occ=Once!] :: GCFlags) ->
                 case ds_dcPKh of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           ds24_dcPKF [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds24_dcPKF
                 }}]
heapBase
  = \ (ds_dcPKh :: GCFlags) ->
      case ds_dcPKh of
      { GCFlags ds1_dcPKi ds2_dcPKj ds3_dcPKk ds4_dcPKl ds5_dcPKm
                ds6_dcPKn ds7_dcPKo ds8_dcPKp ds9_dcPKq ds10_dcPKr ds11_dcPKs
                ds12_dcPKt ds13_dcPKu ds14_dcPKv ds15_dcPKw ds16_dcPKx ds17_dcPKy
                ds18_dcPKz ds19_dcPKA ds20_dcPKB ds21_dcPKC ds22_dcPKD ds23_dcPKE
                ds24_dcPKF ds25_dcPKG ds26_dcPKH ds27_dcPKI ->
      ds24_dcPKF
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
doIdleGC :: GCFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLLLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPJP [Occ=Once!] :: GCFlags) ->
                 case ds_dcPJP of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds23_dcPKc [Occ=Once]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds23_dcPKc
                 }}]
doIdleGC
  = \ (ds_dcPJP :: GCFlags) ->
      case ds_dcPJP of
      { GCFlags ds1_dcPJQ ds2_dcPJR ds3_dcPJS ds4_dcPJT ds5_dcPJU
                ds6_dcPJV ds7_dcPJW ds8_dcPJX ds9_dcPJY ds10_dcPJZ ds11_dcPK0
                ds12_dcPK1 ds13_dcPK2 ds14_dcPK3 ds15_dcPK4 ds16_dcPK5 ds17_dcPK6
                ds18_dcPK7 ds19_dcPK8 ds20_dcPK9 ds21_dcPKa ds22_dcPKb ds23_dcPKc
                ds24_dcPKd ds25_dcPKe ds26_dcPKf ds27_dcPKg ->
      ds23_dcPKc
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
idleGCDelayTime :: GCFlags -> RtsTime
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLLLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPJn [Occ=Once!] :: GCFlags) ->
                 case ds_dcPJn of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] ds22_dcPJJ [Occ=Once] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds22_dcPJJ
                 }}]
idleGCDelayTime
  = \ (ds_dcPJn :: GCFlags) ->
      case ds_dcPJn of
      { GCFlags ds1_dcPJo ds2_dcPJp ds3_dcPJq ds4_dcPJr ds5_dcPJs
                ds6_dcPJt ds7_dcPJu ds8_dcPJv ds9_dcPJw ds10_dcPJx ds11_dcPJy
                ds12_dcPJz ds13_dcPJA ds14_dcPJB ds15_dcPJC ds16_dcPJD ds17_dcPJE
                ds18_dcPJF ds19_dcPJG ds20_dcPJH ds21_dcPJI ds22_dcPJJ ds23_dcPJK
                ds24_dcPJL ds25_dcPJM ds26_dcPJN ds27_dcPJO ->
      ds22_dcPJJ
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
ringBell :: GCFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLLLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPIV [Occ=Once!] :: GCFlags) ->
                 case ds_dcPIV of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] ds21_dcPJg [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds21_dcPJg
                 }}]
ringBell
  = \ (ds_dcPIV :: GCFlags) ->
      case ds_dcPIV of
      { GCFlags ds1_dcPIW ds2_dcPIX ds3_dcPIY ds4_dcPIZ ds5_dcPJ0
                ds6_dcPJ1 ds7_dcPJ2 ds8_dcPJ3 ds9_dcPJ4 ds10_dcPJ5 ds11_dcPJ6
                ds12_dcPJ7 ds13_dcPJ8 ds14_dcPJ9 ds15_dcPJa ds16_dcPJb ds17_dcPJc
                ds18_dcPJd ds19_dcPJe ds20_dcPJf ds21_dcPJg ds22_dcPJh ds23_dcPJi
                ds24_dcPJj ds25_dcPJk ds26_dcPJl ds27_dcPJm ->
      ds21_dcPJg
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
sweep :: GCFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLLLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPIt [Occ=Once!] :: GCFlags) ->
                 case ds_dcPIt of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           ds20_dcPIN [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds20_dcPIN
                 }}]
sweep
  = \ (ds_dcPIt :: GCFlags) ->
      case ds_dcPIt of
      { GCFlags ds1_dcPIu ds2_dcPIv ds3_dcPIw ds4_dcPIx ds5_dcPIy
                ds6_dcPIz ds7_dcPIA ds8_dcPIB ds9_dcPIC ds10_dcPID ds11_dcPIE
                ds12_dcPIF ds13_dcPIG ds14_dcPIH ds15_dcPII ds16_dcPIJ ds17_dcPIK
                ds18_dcPIL ds19_dcPIM ds20_dcPIN ds21_dcPIO ds22_dcPIP ds23_dcPIQ
                ds24_dcPIR ds25_dcPIS ds26_dcPIT ds27_dcPIU ->
      ds20_dcPIN
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
compactThreshold :: GCFlags -> Double
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLLLLLLSLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPI1 [Occ=Once!] :: GCFlags) ->
                 case ds_dcPI1 of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           ds19_dcPIk [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds19_dcPIk
                 }}]
compactThreshold
  = \ (ds_dcPI1 :: GCFlags) ->
      case ds_dcPI1 of
      { GCFlags ds1_dcPI2 ds2_dcPI3 ds3_dcPI4 ds4_dcPI5 ds5_dcPI6
                ds6_dcPI7 ds7_dcPI8 ds8_dcPI9 ds9_dcPIa ds10_dcPIb ds11_dcPIc
                ds12_dcPId ds13_dcPIe ds14_dcPIf ds15_dcPIg ds16_dcPIh ds17_dcPIi
                ds18_dcPIj ds19_dcPIk ds20_dcPIl ds21_dcPIm ds22_dcPIn ds23_dcPIo
                ds24_dcPIp ds25_dcPIq ds26_dcPIr ds27_dcPIs ->
      ds19_dcPIk
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
compact :: GCFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLLLLLSLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPHz [Occ=Once!] :: GCFlags) ->
                 case ds_dcPHz of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds18_dcPHR [Occ=Once]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds18_dcPHR
                 }}]
compact
  = \ (ds_dcPHz :: GCFlags) ->
      case ds_dcPHz of
      { GCFlags ds1_dcPHA ds2_dcPHB ds3_dcPHC ds4_dcPHD ds5_dcPHE
                ds6_dcPHF ds7_dcPHG ds8_dcPHH ds9_dcPHI ds10_dcPHJ ds11_dcPHK
                ds12_dcPHL ds13_dcPHM ds14_dcPHN ds15_dcPHO ds16_dcPHP ds17_dcPHQ
                ds18_dcPHR ds19_dcPHS ds20_dcPHT ds21_dcPHU ds22_dcPHV ds23_dcPHW
                ds24_dcPHX ds25_dcPHY ds26_dcPHZ ds27_dcPI0 ->
      ds18_dcPHR
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
squeezeUpdFrames :: GCFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLLLLSLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPH7 [Occ=Once!] :: GCFlags) ->
                 case ds_dcPH7 of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] ds17_dcPHo [Occ=Once] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds17_dcPHo
                 }}]
squeezeUpdFrames
  = \ (ds_dcPH7 :: GCFlags) ->
      case ds_dcPH7 of
      { GCFlags ds1_dcPH8 ds2_dcPH9 ds3_dcPHa ds4_dcPHb ds5_dcPHc
                ds6_dcPHd ds7_dcPHe ds8_dcPHf ds9_dcPHg ds10_dcPHh ds11_dcPHi
                ds12_dcPHj ds13_dcPHk ds14_dcPHl ds15_dcPHm ds16_dcPHn ds17_dcPHo
                ds18_dcPHp ds19_dcPHq ds20_dcPHr ds21_dcPHs ds22_dcPHt ds23_dcPHu
                ds24_dcPHv ds25_dcPHw ds26_dcPHx ds27_dcPHy ->
      ds17_dcPHo
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
generations :: GCFlags -> Word32
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPGF [Occ=Once!] :: GCFlags) ->
                 case ds_dcPGF of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] ds16_dcPGV [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds16_dcPGV
                 }}]
generations
  = \ (ds_dcPGF :: GCFlags) ->
      case ds_dcPGF of
      { GCFlags ds1_dcPGG ds2_dcPGH ds3_dcPGI ds4_dcPGJ ds5_dcPGK
                ds6_dcPGL ds7_dcPGM ds8_dcPGN ds9_dcPGO ds10_dcPGP ds11_dcPGQ
                ds12_dcPGR ds13_dcPGS ds14_dcPGT ds15_dcPGU ds16_dcPGV ds17_dcPGW
                ds18_dcPGX ds19_dcPGY ds20_dcPGZ ds21_dcPH0 ds22_dcPH1 ds23_dcPH2
                ds24_dcPH3 ds25_dcPH4 ds26_dcPH5 ds27_dcPH6 ->
      ds16_dcPGV
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
pcFreeHeap :: GCFlags -> Double
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLLSLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPGd [Occ=Once!] :: GCFlags) ->
                 case ds_dcPGd of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           ds15_dcPGs [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds15_dcPGs
                 }}]
pcFreeHeap
  = \ (ds_dcPGd :: GCFlags) ->
      case ds_dcPGd of
      { GCFlags ds1_dcPGe ds2_dcPGf ds3_dcPGg ds4_dcPGh ds5_dcPGi
                ds6_dcPGj ds7_dcPGk ds8_dcPGl ds9_dcPGm ds10_dcPGn ds11_dcPGo
                ds12_dcPGp ds13_dcPGq ds14_dcPGr ds15_dcPGs ds16_dcPGt ds17_dcPGu
                ds18_dcPGv ds19_dcPGw ds20_dcPGx ds21_dcPGy ds22_dcPGz ds23_dcPGA
                ds24_dcPGB ds25_dcPGC ds26_dcPGD ds27_dcPGE ->
      ds15_dcPGs
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
oldGenFactor :: GCFlags -> Double
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLSLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPFL [Occ=Once!] :: GCFlags) ->
                 case ds_dcPFL of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           ds14_dcPFZ [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds14_dcPFZ
                 }}]
oldGenFactor
  = \ (ds_dcPFL :: GCFlags) ->
      case ds_dcPFL of
      { GCFlags ds1_dcPFM ds2_dcPFN ds3_dcPFO ds4_dcPFP ds5_dcPFQ
                ds6_dcPFR ds7_dcPFS ds8_dcPFT ds9_dcPFU ds10_dcPFV ds11_dcPFW
                ds12_dcPFX ds13_dcPFY ds14_dcPFZ ds15_dcPG0 ds16_dcPG1 ds17_dcPG2
                ds18_dcPG3 ds19_dcPG4 ds20_dcPG5 ds21_dcPG6 ds22_dcPG7 ds23_dcPG8
                ds24_dcPG9 ds25_dcPGa ds26_dcPGb ds27_dcPGc ->
      ds14_dcPFZ
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
heapSizeSuggestionAuto :: GCFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLSLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPFj [Occ=Once!] :: GCFlags) ->
                 case ds_dcPFj of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds13_dcPFw [Occ=Once]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds13_dcPFw
                 }}]
heapSizeSuggestionAuto
  = \ (ds_dcPFj :: GCFlags) ->
      case ds_dcPFj of
      { GCFlags ds1_dcPFk ds2_dcPFl ds3_dcPFm ds4_dcPFn ds5_dcPFo
                ds6_dcPFp ds7_dcPFq ds8_dcPFr ds9_dcPFs ds10_dcPFt ds11_dcPFu
                ds12_dcPFv ds13_dcPFw ds14_dcPFx ds15_dcPFy ds16_dcPFz ds17_dcPFA
                ds18_dcPFB ds19_dcPFC ds20_dcPFD ds21_dcPFE ds22_dcPFF ds23_dcPFG
                ds24_dcPFH ds25_dcPFI ds26_dcPFJ ds27_dcPFK ->
      ds13_dcPFw
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
heapSizeSuggestion :: GCFlags -> Word32
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLSLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPER [Occ=Once!] :: GCFlags) ->
                 case ds_dcPER of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] ds12_dcPF3 [Occ=Once] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds12_dcPF3
                 }}]
heapSizeSuggestion
  = \ (ds_dcPER :: GCFlags) ->
      case ds_dcPER of
      { GCFlags ds1_dcPES ds2_dcPET ds3_dcPEU ds4_dcPEV ds5_dcPEW
                ds6_dcPEX ds7_dcPEY ds8_dcPEZ ds9_dcPF0 ds10_dcPF1 ds11_dcPF2
                ds12_dcPF3 ds13_dcPF4 ds14_dcPF5 ds15_dcPF6 ds16_dcPF7 ds17_dcPF8
                ds18_dcPF9 ds19_dcPFa ds20_dcPFb ds21_dcPFc ds22_dcPFd ds23_dcPFe
                ds24_dcPFf ds25_dcPFg ds26_dcPFh ds27_dcPFi ->
      ds12_dcPF3
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
minOldGenSize :: GCFlags -> Word32
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLSLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPEp [Occ=Once!] :: GCFlags) ->
                 case ds_dcPEp of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] ds11_dcPEA [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds11_dcPEA
                 }}]
minOldGenSize
  = \ (ds_dcPEp :: GCFlags) ->
      case ds_dcPEp of
      { GCFlags ds1_dcPEq ds2_dcPEr ds3_dcPEs ds4_dcPEt ds5_dcPEu
                ds6_dcPEv ds7_dcPEw ds8_dcPEx ds9_dcPEy ds10_dcPEz ds11_dcPEA
                ds12_dcPEB ds13_dcPEC ds14_dcPED ds15_dcPEE ds16_dcPEF ds17_dcPEG
                ds18_dcPEH ds19_dcPEI ds20_dcPEJ ds21_dcPEK ds22_dcPEL ds23_dcPEM
                ds24_dcPEN ds25_dcPEO ds26_dcPEP ds27_dcPEQ ->
      ds11_dcPEA
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
nurseryChunkSize :: GCFlags -> Word32
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLSLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPDX [Occ=Once!] :: GCFlags) ->
                 case ds_dcPDX of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           ds10_dcPE7 [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds10_dcPE7
                 }}]
nurseryChunkSize
  = \ (ds_dcPDX :: GCFlags) ->
      case ds_dcPDX of
      { GCFlags ds1_dcPDY ds2_dcPDZ ds3_dcPE0 ds4_dcPE1 ds5_dcPE2
                ds6_dcPE3 ds7_dcPE4 ds8_dcPE5 ds9_dcPE6 ds10_dcPE7 ds11_dcPE8
                ds12_dcPE9 ds13_dcPEa ds14_dcPEb ds15_dcPEc ds16_dcPEd ds17_dcPEe
                ds18_dcPEf ds19_dcPEg ds20_dcPEh ds21_dcPEi ds22_dcPEj ds23_dcPEk
                ds24_dcPEl ds25_dcPEm ds26_dcPEn ds27_dcPEo ->
      ds10_dcPE7
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
largeAllocLim :: GCFlags -> Word32
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLSLLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPDv [Occ=Once!] :: GCFlags) ->
                 case ds_dcPDv of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           ds9_dcPDE [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds9_dcPDE
                 }}]
largeAllocLim
  = \ (ds_dcPDv :: GCFlags) ->
      case ds_dcPDv of
      { GCFlags ds1_dcPDw ds2_dcPDx ds3_dcPDy ds4_dcPDz ds5_dcPDA
                ds6_dcPDB ds7_dcPDC ds8_dcPDD ds9_dcPDE ds10_dcPDF ds11_dcPDG
                ds12_dcPDH ds13_dcPDI ds14_dcPDJ ds15_dcPDK ds16_dcPDL ds17_dcPDM
                ds18_dcPDN ds19_dcPDO ds20_dcPDP ds21_dcPDQ ds22_dcPDR ds23_dcPDS
                ds24_dcPDT ds25_dcPDU ds26_dcPDV ds27_dcPDW ->
      ds9_dcPDE
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
minAllocAreaSize :: GCFlags -> Word32
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLSLLLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPD3 [Occ=Once!] :: GCFlags) ->
                 case ds_dcPD3 of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds8_dcPDb [Occ=Once]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds8_dcPDb
                 }}]
minAllocAreaSize
  = \ (ds_dcPD3 :: GCFlags) ->
      case ds_dcPD3 of
      { GCFlags ds1_dcPD4 ds2_dcPD5 ds3_dcPD6 ds4_dcPD7 ds5_dcPD8
                ds6_dcPD9 ds7_dcPDa ds8_dcPDb ds9_dcPDc ds10_dcPDd ds11_dcPDe
                ds12_dcPDf ds13_dcPDg ds14_dcPDh ds15_dcPDi ds16_dcPDj ds17_dcPDk
                ds18_dcPDl ds19_dcPDm ds20_dcPDn ds21_dcPDo ds22_dcPDp ds23_dcPDq
                ds24_dcPDr ds25_dcPDs ds26_dcPDt ds27_dcPDu ->
      ds8_dcPDb
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
maxHeapSize :: GCFlags -> Word32
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLSLLLLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPCB [Occ=Once!] :: GCFlags) ->
                 case ds_dcPCB of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] ds7_dcPCI [Occ=Once] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds7_dcPCI
                 }}]
maxHeapSize
  = \ (ds_dcPCB :: GCFlags) ->
      case ds_dcPCB of
      { GCFlags ds1_dcPCC ds2_dcPCD ds3_dcPCE ds4_dcPCF ds5_dcPCG
                ds6_dcPCH ds7_dcPCI ds8_dcPCJ ds9_dcPCK ds10_dcPCL ds11_dcPCM
                ds12_dcPCN ds13_dcPCO ds14_dcPCP ds15_dcPCQ ds16_dcPCR ds17_dcPCS
                ds18_dcPCT ds19_dcPCU ds20_dcPCV ds21_dcPCW ds22_dcPCX ds23_dcPCY
                ds24_dcPCZ ds25_dcPD0 ds26_dcPD1 ds27_dcPD2 ->
      ds7_dcPCI
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
stkChunkBufferSize :: GCFlags -> Word32
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPC9 [Occ=Once!] :: GCFlags) ->
                 case ds_dcPC9 of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] ds6_dcPCf [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds6_dcPCf
                 }}]
stkChunkBufferSize
  = \ (ds_dcPC9 :: GCFlags) ->
      case ds_dcPC9 of
      { GCFlags ds1_dcPCa ds2_dcPCb ds3_dcPCc ds4_dcPCd ds5_dcPCe
                ds6_dcPCf ds7_dcPCg ds8_dcPCh ds9_dcPCi ds10_dcPCj ds11_dcPCk
                ds12_dcPCl ds13_dcPCm ds14_dcPCn ds15_dcPCo ds16_dcPCp ds17_dcPCq
                ds18_dcPCr ds19_dcPCs ds20_dcPCt ds21_dcPCu ds22_dcPCv ds23_dcPCw
                ds24_dcPCx ds25_dcPCy ds26_dcPCz ds27_dcPCA ->
      ds6_dcPCf
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
stkChunkSize :: GCFlags -> Word32
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPBH [Occ=Once!] :: GCFlags) ->
                 case ds_dcPBH of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           ds5_dcPBM [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds5_dcPBM
                 }}]
stkChunkSize
  = \ (ds_dcPBH :: GCFlags) ->
      case ds_dcPBH of
      { GCFlags ds1_dcPBI ds2_dcPBJ ds3_dcPBK ds4_dcPBL ds5_dcPBM
                ds6_dcPBN ds7_dcPBO ds8_dcPBP ds9_dcPBQ ds10_dcPBR ds11_dcPBS
                ds12_dcPBT ds13_dcPBU ds14_dcPBV ds15_dcPBW ds16_dcPBX ds17_dcPBY
                ds18_dcPBZ ds19_dcPC0 ds20_dcPC1 ds21_dcPC2 ds22_dcPC3 ds23_dcPC4
                ds24_dcPC5 ds25_dcPC6 ds26_dcPC7 ds27_dcPC8 ->
      ds5_dcPBM
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
initialStkSize :: GCFlags -> Word32
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPBf [Occ=Once!] :: GCFlags) ->
                 case ds_dcPBf of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           ds4_dcPBj [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds4_dcPBj
                 }}]
initialStkSize
  = \ (ds_dcPBf :: GCFlags) ->
      case ds_dcPBf of
      { GCFlags ds1_dcPBg ds2_dcPBh ds3_dcPBi ds4_dcPBj ds5_dcPBk
                ds6_dcPBl ds7_dcPBm ds8_dcPBn ds9_dcPBo ds10_dcPBp ds11_dcPBq
                ds12_dcPBr ds13_dcPBs ds14_dcPBt ds15_dcPBu ds16_dcPBv ds17_dcPBw
                ds18_dcPBx ds19_dcPBy ds20_dcPBz ds21_dcPBA ds22_dcPBB ds23_dcPBC
                ds24_dcPBD ds25_dcPBE ds26_dcPBF ds27_dcPBG ->
      ds4_dcPBj
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
maxStkSize :: GCFlags -> Word32
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPAN [Occ=Once!] :: GCFlags) ->
                 case ds_dcPAN of
                 { GCFlags _ [Occ=Dead] _ [Occ=Dead] ds3_dcPAQ [Occ=Once]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds3_dcPAQ
                 }}]
maxStkSize
  = \ (ds_dcPAN :: GCFlags) ->
      case ds_dcPAN of
      { GCFlags ds1_dcPAO ds2_dcPAP ds3_dcPAQ ds4_dcPAR ds5_dcPAS
                ds6_dcPAT ds7_dcPAU ds8_dcPAV ds9_dcPAW ds10_dcPAX ds11_dcPAY
                ds12_dcPAZ ds13_dcPB0 ds14_dcPB1 ds15_dcPB2 ds16_dcPB3 ds17_dcPB4
                ds18_dcPB5 ds19_dcPB6 ds20_dcPB7 ds21_dcPB8 ds22_dcPB9 ds23_dcPBa
                ds24_dcPBb ds25_dcPBc ds26_dcPBd ds27_dcPBe ->
      ds3_dcPAQ
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
giveStats :: GCFlags -> GiveGCStats
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLLLLLLLLLLLLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPAl [Occ=Once!] :: GCFlags) ->
                 case ds_dcPAl of
                 { GCFlags _ [Occ=Dead] ds2_dcPAn [Occ=Once] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds2_dcPAn
                 }}]
giveStats
  = \ (ds_dcPAl :: GCFlags) ->
      case ds_dcPAl of
      { GCFlags ds1_dcPAm ds2_dcPAn ds3_dcPAo ds4_dcPAp ds5_dcPAq
                ds6_dcPAr ds7_dcPAs ds8_dcPAt ds9_dcPAu ds10_dcPAv ds11_dcPAw
                ds12_dcPAx ds13_dcPAy ds14_dcPAz ds15_dcPAA ds16_dcPAB ds17_dcPAC
                ds18_dcPAD ds19_dcPAE ds20_dcPAF ds21_dcPAG ds22_dcPAH ds23_dcPAI
                ds24_dcPAJ ds25_dcPAK ds26_dcPAL ds27_dcPAM ->
      ds2_dcPAn
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
statsFile :: GCFlags -> Maybe FilePath
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPzT [Occ=Once!] :: GCFlags) ->
                 case ds_dcPzT of
                 { GCFlags ds1_dcPzU [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds1_dcPzU
                 }}]
statsFile
  = \ (ds_dcPzT :: GCFlags) ->
      case ds_dcPzT of
      { GCFlags ds1_dcPzU ds2_dcPzV ds3_dcPzW ds4_dcPzX ds5_dcPzY
                ds6_dcPzZ ds7_dcPA0 ds8_dcPA1 ds9_dcPA2 ds10_dcPA3 ds11_dcPA4
                ds12_dcPA5 ds13_dcPA6 ds14_dcPA7 ds15_dcPA8 ds16_dcPA9 ds17_dcPAa
                ds18_dcPAb ds19_dcPAc ds20_dcPAd ds21_dcPAe ds22_dcPAf ds23_dcPAg
                ds24_dcPAh ds25_dcPAi ds26_dcPAj ds27_dcPAk ->
      ds1_dcPzU
      }

-- RHS size: {terms: 5, types: 4, coercions: 0, joins: 0/0}
ctxtSwitchTicks :: ConcFlags -> Int
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U(U))>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPzQ [Occ=Once!] :: ConcFlags) ->
                 case ds_dcPzQ of { ConcFlags _ [Occ=Dead] ds2_dcPzS [Occ=Once] ->
                 ds2_dcPzS
                 }}]
ctxtSwitchTicks
  = \ (ds_dcPzQ :: ConcFlags) ->
      case ds_dcPzQ of { ConcFlags ds1_dcPzR ds2_dcPzS -> ds2_dcPzS }

-- RHS size: {terms: 5, types: 4, coercions: 0, joins: 0/0}
ctxtSwitchTime :: ConcFlags -> RtsTime
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U(U),A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPzN [Occ=Once!] :: ConcFlags) ->
                 case ds_dcPzN of { ConcFlags ds1_dcPzO [Occ=Once] _ [Occ=Dead] ->
                 ds1_dcPzO
                 }}]
ctxtSwitchTime
  = \ (ds_dcPzN :: ConcFlags) ->
      case ds_dcPzN of { ConcFlags ds1_dcPzO ds2_dcPzP -> ds1_dcPzO }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
linkerMemBase :: MiscFlags -> Word
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLS),1*U(A,A,A,A,A,A,1*U(U))>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPzF [Occ=Once!] :: MiscFlags) ->
                 case ds_dcPzF of
                 { MiscFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] ds7_dcPzM [Occ=Once] ->
                 ds7_dcPzM
                 }}]
linkerMemBase
  = \ (ds_dcPzF :: MiscFlags) ->
      case ds_dcPzF of
      { MiscFlags ds1_dcPzG ds2_dcPzH ds3_dcPzI ds4_dcPzJ ds5_dcPzK
                  ds6_dcPzL ds7_dcPzM ->
      ds7_dcPzM
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
machineReadable :: MiscFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPzx [Occ=Once!] :: MiscFlags) ->
                 case ds_dcPzx of
                 { MiscFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] ds6_dcPzD [Occ=Once] _ [Occ=Dead] ->
                 ds6_dcPzD
                 }}]
machineReadable
  = \ (ds_dcPzx :: MiscFlags) ->
      case ds_dcPzx of
      { MiscFlags ds1_dcPzy ds2_dcPzz ds3_dcPzA ds4_dcPzB ds5_dcPzC
                  ds6_dcPzD ds7_dcPzE ->
      ds6_dcPzD
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
generateStackTrace :: MiscFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPzp [Occ=Once!] :: MiscFlags) ->
                 case ds_dcPzp of
                 { MiscFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             ds5_dcPzu [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds5_dcPzu
                 }}]
generateStackTrace
  = \ (ds_dcPzp :: MiscFlags) ->
      case ds_dcPzp of
      { MiscFlags ds1_dcPzq ds2_dcPzr ds3_dcPzs ds4_dcPzt ds5_dcPzu
                  ds6_dcPzv ds7_dcPzw ->
      ds5_dcPzu
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
generateCrashDumpFile :: MiscFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLL),1*U(A,A,A,1*U,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPzh [Occ=Once!] :: MiscFlags) ->
                 case ds_dcPzh of
                 { MiscFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             ds4_dcPzl [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds4_dcPzl
                 }}]
generateCrashDumpFile
  = \ (ds_dcPzh :: MiscFlags) ->
      case ds_dcPzh of
      { MiscFlags ds1_dcPzi ds2_dcPzj ds3_dcPzk ds4_dcPzl ds5_dcPzm
                  ds6_dcPzn ds7_dcPzo ->
      ds4_dcPzl
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
installSEHHandlers :: MiscFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPz9 [Occ=Once!] :: MiscFlags) ->
                 case ds_dcPz9 of
                 { MiscFlags _ [Occ=Dead] _ [Occ=Dead] ds3_dcPzc [Occ=Once]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds3_dcPzc
                 }}]
installSEHHandlers
  = \ (ds_dcPz9 :: MiscFlags) ->
      case ds_dcPz9 of
      { MiscFlags ds1_dcPza ds2_dcPzb ds3_dcPzc ds4_dcPzd ds5_dcPze
                  ds6_dcPzf ds7_dcPzg ->
      ds3_dcPzc
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
installSignalHandlers :: MiscFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPz1 [Occ=Once!] :: MiscFlags) ->
                 case ds_dcPz1 of
                 { MiscFlags _ [Occ=Dead] ds2_dcPz3 [Occ=Once] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds2_dcPz3
                 }}]
installSignalHandlers
  = \ (ds_dcPz1 :: MiscFlags) ->
      case ds_dcPz1 of
      { MiscFlags ds1_dcPz2 ds2_dcPz3 ds3_dcPz4 ds4_dcPz5 ds5_dcPz6
                  ds6_dcPz7 ds7_dcPz8 ->
      ds2_dcPz3
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
tickInterval :: MiscFlags -> RtsTime
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLL),1*U(1*U(U),A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPyT [Occ=Once!] :: MiscFlags) ->
                 case ds_dcPyT of
                 { MiscFlags ds1_dcPyU [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds1_dcPyU
                 }}]
tickInterval
  = \ (ds_dcPyT :: MiscFlags) ->
      case ds_dcPyT of
      { MiscFlags ds1_dcPyU ds2_dcPyV ds3_dcPyW ds4_dcPyX ds5_dcPyY
                  ds6_dcPyZ ds7_dcPz0 ->
      ds1_dcPyU
      }

-- RHS size: {terms: 5, types: 17, coercions: 0, joins: 0/0}
sparks :: DebugFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPyD [Occ=Once!] :: DebugFlags) ->
                 case ds_dcPyD of
                 { DebugFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              ds15_dcPyS [Occ=Once] ->
                 ds15_dcPyS
                 }}]
sparks
  = \ (ds_dcPyD :: DebugFlags) ->
      case ds_dcPyD of
      { DebugFlags ds1_dcPyE ds2_dcPyF ds3_dcPyG ds4_dcPyH ds5_dcPyI
                   ds6_dcPyJ ds7_dcPyK ds8_dcPyL ds9_dcPyM ds10_dcPyN ds11_dcPyO
                   ds12_dcPyP ds13_dcPyQ ds14_dcPyR ds15_dcPyS ->
      ds15_dcPyS
      }

-- RHS size: {terms: 5, types: 17, coercions: 0, joins: 0/0}
hpc :: DebugFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPyn [Occ=Once!] :: DebugFlags) ->
                 case ds_dcPyn of
                 { DebugFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              ds14_dcPyB [Occ=Once] _ [Occ=Dead] ->
                 ds14_dcPyB
                 }}]
hpc
  = \ (ds_dcPyn :: DebugFlags) ->
      case ds_dcPyn of
      { DebugFlags ds1_dcPyo ds2_dcPyp ds3_dcPyq ds4_dcPyr ds5_dcPys
                   ds6_dcPyt ds7_dcPyu ds8_dcPyv ds9_dcPyw ds10_dcPyx ds11_dcPyy
                   ds12_dcPyz ds13_dcPyA ds14_dcPyB ds15_dcPyC ->
      ds14_dcPyB
      }

-- RHS size: {terms: 5, types: 17, coercions: 0, joins: 0/0}
squeeze :: DebugFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPy7 [Occ=Once!] :: DebugFlags) ->
                 case ds_dcPy7 of
                 { DebugFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds13_dcPyk [Occ=Once]
                              _ [Occ=Dead] _ [Occ=Dead] ->
                 ds13_dcPyk
                 }}]
squeeze
  = \ (ds_dcPy7 :: DebugFlags) ->
      case ds_dcPy7 of
      { DebugFlags ds1_dcPy8 ds2_dcPy9 ds3_dcPya ds4_dcPyb ds5_dcPyc
                   ds6_dcPyd ds7_dcPye ds8_dcPyf ds9_dcPyg ds10_dcPyh ds11_dcPyi
                   ds12_dcPyj ds13_dcPyk ds14_dcPyl ds15_dcPym ->
      ds13_dcPyk
      }

-- RHS size: {terms: 5, types: 17, coercions: 0, joins: 0/0}
stm :: DebugFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPxR [Occ=Once!] :: DebugFlags) ->
                 case ds_dcPxR of
                 { DebugFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] ds12_dcPy3 [Occ=Once] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] ->
                 ds12_dcPy3
                 }}]
stm
  = \ (ds_dcPxR :: DebugFlags) ->
      case ds_dcPxR of
      { DebugFlags ds1_dcPxS ds2_dcPxT ds3_dcPxU ds4_dcPxV ds5_dcPxW
                   ds6_dcPxX ds7_dcPxY ds8_dcPxZ ds9_dcPy0 ds10_dcPy1 ds11_dcPy2
                   ds12_dcPy3 ds13_dcPy4 ds14_dcPy5 ds15_dcPy6 ->
      ds12_dcPy3
      }

-- RHS size: {terms: 5, types: 17, coercions: 0, joins: 0/0}
apply :: DebugFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPxB [Occ=Once!] :: DebugFlags) ->
                 case ds_dcPxB of
                 { DebugFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] ds11_dcPxM [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] ->
                 ds11_dcPxM
                 }}]
apply
  = \ (ds_dcPxB :: DebugFlags) ->
      case ds_dcPxB of
      { DebugFlags ds1_dcPxC ds2_dcPxD ds3_dcPxE ds4_dcPxF ds5_dcPxG
                   ds6_dcPxH ds7_dcPxI ds8_dcPxJ ds9_dcPxK ds10_dcPxL ds11_dcPxM
                   ds12_dcPxN ds13_dcPxO ds14_dcPxP ds15_dcPxQ ->
      ds11_dcPxM
      }

-- RHS size: {terms: 5, types: 17, coercions: 0, joins: 0/0}
linker :: DebugFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPxl [Occ=Once!] :: DebugFlags) ->
                 case ds_dcPxl of
                 { DebugFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              ds10_dcPxv [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] ->
                 ds10_dcPxv
                 }}]
linker
  = \ (ds_dcPxl :: DebugFlags) ->
      case ds_dcPxl of
      { DebugFlags ds1_dcPxm ds2_dcPxn ds3_dcPxo ds4_dcPxp ds5_dcPxq
                   ds6_dcPxr ds7_dcPxs ds8_dcPxt ds9_dcPxu ds10_dcPxv ds11_dcPxw
                   ds12_dcPxx ds13_dcPxy ds14_dcPxz ds15_dcPxA ->
      ds10_dcPxv
      }

-- RHS size: {terms: 5, types: 17, coercions: 0, joins: 0/0}
prof :: DebugFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPx5 [Occ=Once!] :: DebugFlags) ->
                 case ds_dcPx5 of
                 { DebugFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              ds9_dcPxe [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds9_dcPxe
                 }}]
prof
  = \ (ds_dcPx5 :: DebugFlags) ->
      case ds_dcPx5 of
      { DebugFlags ds1_dcPx6 ds2_dcPx7 ds3_dcPx8 ds4_dcPx9 ds5_dcPxa
                   ds6_dcPxb ds7_dcPxc ds8_dcPxd ds9_dcPxe ds10_dcPxf ds11_dcPxg
                   ds12_dcPxh ds13_dcPxi ds14_dcPxj ds15_dcPxk ->
      ds9_dcPxe
      }

-- RHS size: {terms: 5, types: 17, coercions: 0, joins: 0/0}
stable :: DebugFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPwP [Occ=Once!] :: DebugFlags) ->
                 case ds_dcPwP of
                 { DebugFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds8_dcPwX [Occ=Once]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] ->
                 ds8_dcPwX
                 }}]
stable
  = \ (ds_dcPwP :: DebugFlags) ->
      case ds_dcPwP of
      { DebugFlags ds1_dcPwQ ds2_dcPwR ds3_dcPwS ds4_dcPwT ds5_dcPwU
                   ds6_dcPwV ds7_dcPwW ds8_dcPwX ds9_dcPwY ds10_dcPwZ ds11_dcPx0
                   ds12_dcPx1 ds13_dcPx2 ds14_dcPx3 ds15_dcPx4 ->
      ds8_dcPwX
      }

-- RHS size: {terms: 5, types: 17, coercions: 0, joins: 0/0}
sanity :: DebugFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLSLLLLLLLL),1*U(A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPwz [Occ=Once!] :: DebugFlags) ->
                 case ds_dcPwz of
                 { DebugFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] ds7_dcPwG [Occ=Once] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] ->
                 ds7_dcPwG
                 }}]
sanity
  = \ (ds_dcPwz :: DebugFlags) ->
      case ds_dcPwz of
      { DebugFlags ds1_dcPwA ds2_dcPwB ds3_dcPwC ds4_dcPwD ds5_dcPwE
                   ds6_dcPwF ds7_dcPwG ds8_dcPwH ds9_dcPwI ds10_dcPwJ ds11_dcPwK
                   ds12_dcPwL ds13_dcPwM ds14_dcPwN ds15_dcPwO ->
      ds7_dcPwG
      }

-- RHS size: {terms: 5, types: 17, coercions: 0, joins: 0/0}
block_alloc :: DebugFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSLLLLLLLLL),1*U(A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPwj [Occ=Once!] :: DebugFlags) ->
                 case ds_dcPwj of
                 { DebugFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] ds6_dcPwp [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] ->
                 ds6_dcPwp
                 }}]
block_alloc
  = \ (ds_dcPwj :: DebugFlags) ->
      case ds_dcPwj of
      { DebugFlags ds1_dcPwk ds2_dcPwl ds3_dcPwm ds4_dcPwn ds5_dcPwo
                   ds6_dcPwp ds7_dcPwq ds8_dcPwr ds9_dcPws ds10_dcPwt ds11_dcPwu
                   ds12_dcPwv ds13_dcPww ds14_dcPwx ds15_dcPwy ->
      ds6_dcPwp
      }

-- RHS size: {terms: 5, types: 17, coercions: 0, joins: 0/0}
gc :: DebugFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLLLLLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPw3 [Occ=Once!] :: DebugFlags) ->
                 case ds_dcPw3 of
                 { DebugFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              ds5_dcPw8 [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] ->
                 ds5_dcPw8
                 }}]
gc
  = \ (ds_dcPw3 :: DebugFlags) ->
      case ds_dcPw3 of
      { DebugFlags ds1_dcPw4 ds2_dcPw5 ds3_dcPw6 ds4_dcPw7 ds5_dcPw8
                   ds6_dcPw9 ds7_dcPwa ds8_dcPwb ds9_dcPwc ds10_dcPwd ds11_dcPwe
                   ds12_dcPwf ds13_dcPwg ds14_dcPwh ds15_dcPwi ->
      ds5_dcPw8
      }

-- RHS size: {terms: 5, types: 17, coercions: 0, joins: 0/0}
gccafs :: DebugFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLLLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPvN [Occ=Once!] :: DebugFlags) ->
                 case ds_dcPvN of
                 { DebugFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              ds4_dcPvR [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds4_dcPvR
                 }}]
gccafs
  = \ (ds_dcPvN :: DebugFlags) ->
      case ds_dcPvN of
      { DebugFlags ds1_dcPvO ds2_dcPvP ds3_dcPvQ ds4_dcPvR ds5_dcPvS
                   ds6_dcPvT ds7_dcPvU ds8_dcPvV ds9_dcPvW ds10_dcPvX ds11_dcPvY
                   ds12_dcPvZ ds13_dcPw0 ds14_dcPw1 ds15_dcPw2 ->
      ds4_dcPvR
      }

-- RHS size: {terms: 5, types: 17, coercions: 0, joins: 0/0}
weak :: DebugFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLLLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPvx [Occ=Once!] :: DebugFlags) ->
                 case ds_dcPvx of
                 { DebugFlags _ [Occ=Dead] _ [Occ=Dead] ds3_dcPvA [Occ=Once]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] ->
                 ds3_dcPvA
                 }}]
weak
  = \ (ds_dcPvx :: DebugFlags) ->
      case ds_dcPvx of
      { DebugFlags ds1_dcPvy ds2_dcPvz ds3_dcPvA ds4_dcPvB ds5_dcPvC
                   ds6_dcPvD ds7_dcPvE ds8_dcPvF ds9_dcPvG ds10_dcPvH ds11_dcPvI
                   ds12_dcPvJ ds13_dcPvK ds14_dcPvL ds15_dcPvM ->
      ds3_dcPvA
      }

-- RHS size: {terms: 5, types: 17, coercions: 0, joins: 0/0}
interpreter :: DebugFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPvh [Occ=Once!] :: DebugFlags) ->
                 case ds_dcPvh of
                 { DebugFlags _ [Occ=Dead] ds2_dcPvj [Occ=Once] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] ->
                 ds2_dcPvj
                 }}]
interpreter
  = \ (ds_dcPvh :: DebugFlags) ->
      case ds_dcPvh of
      { DebugFlags ds1_dcPvi ds2_dcPvj ds3_dcPvk ds4_dcPvl ds5_dcPvm
                   ds6_dcPvn ds7_dcPvo ds8_dcPvp ds9_dcPvq ds10_dcPvr ds11_dcPvs
                   ds12_dcPvt ds13_dcPvu ds14_dcPvv ds15_dcPvw ->
      ds2_dcPvj
      }

-- RHS size: {terms: 5, types: 17, coercions: 0, joins: 0/0}
scheduler :: DebugFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPv1 [Occ=Once!] :: DebugFlags) ->
                 case ds_dcPv1 of
                 { DebugFlags ds1_dcPv2 [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] ->
                 ds1_dcPv2
                 }}]
scheduler
  = \ (ds_dcPv1 :: DebugFlags) ->
      case ds_dcPv1 of
      { DebugFlags ds1_dcPv2 ds2_dcPv3 ds3_dcPv4 ds4_dcPv5 ds5_dcPv6
                   ds6_dcPv7 ds7_dcPv8 ds8_dcPv9 ds9_dcPva ds10_dcPvb ds11_dcPvc
                   ds12_dcPvd ds13_dcPve ds14_dcPvf ds15_dcPvg ->
      ds1_dcPv2
      }

-- RHS size: {terms: 5, types: 5, coercions: 0, joins: 0/0}
msecsPerTick :: CCFlags -> Int
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLS),1*U(A,A,1*U(U))>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPuX [Occ=Once!] :: CCFlags) ->
                 case ds_dcPuX of
                 { CCFlags _ [Occ=Dead] _ [Occ=Dead] ds3_dcPv0 [Occ=Once] ->
                 ds3_dcPv0
                 }}]
msecsPerTick
  = \ (ds_dcPuX :: CCFlags) ->
      case ds_dcPuX of { CCFlags ds1_dcPuY ds2_dcPuZ ds3_dcPv0 ->
      ds3_dcPv0
      }

-- RHS size: {terms: 5, types: 5, coercions: 0, joins: 0/0}
profilerTicks :: CCFlags -> Int
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),1*U(A,1*U(U),A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPuT [Occ=Once!] :: CCFlags) ->
                 case ds_dcPuT of
                 { CCFlags _ [Occ=Dead] ds2_dcPuV [Occ=Once] _ [Occ=Dead] ->
                 ds2_dcPuV
                 }}]
profilerTicks
  = \ (ds_dcPuT :: CCFlags) ->
      case ds_dcPuT of { CCFlags ds1_dcPuU ds2_dcPuV ds3_dcPuW ->
      ds2_dcPuV
      }

-- RHS size: {terms: 5, types: 5, coercions: 0, joins: 0/0}
doCostCentres :: CCFlags -> DoCostCentres
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),1*U(1*U,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPuP [Occ=Once!] :: CCFlags) ->
                 case ds_dcPuP of
                 { CCFlags ds1_dcPuQ [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds1_dcPuQ
                 }}]
doCostCentres
  = \ (ds_dcPuP :: CCFlags) ->
      case ds_dcPuP of { CCFlags ds1_dcPuQ ds2_dcPuR ds3_dcPuS ->
      ds1_dcPuQ
      }

-- RHS size: {terms: 5, types: 23, coercions: 0, joins: 0/0}
bioSelector :: ProfFlags -> Maybe String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPuA [Occ=Once!] :: ProfFlags) ->
                 case ds_dcPuA of
                 { ProfFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             ds14_dcPuO [Occ=Once] ->
                 ds14_dcPuO
                 }}]
bioSelector
  = \ (ds_dcPuA :: ProfFlags) ->
      case ds_dcPuA of
      { ProfFlags ds1_dcPuB ds2_dcPuC ds3_dcPuD ds4_dcPuE ds5_dcPuF
                  ds6_dcPuG ds7_dcPuH ds8_dcPuI ds9_dcPuJ ds10_dcPuK ds11_dcPuL
                  ds12_dcPuM ds13_dcPuN ds14_dcPuO ->
      ds14_dcPuO
      }

-- RHS size: {terms: 5, types: 23, coercions: 0, joins: 0/0}
retainerSelector :: ProfFlags -> Maybe String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPul [Occ=Once!] :: ProfFlags) ->
                 case ds_dcPul of
                 { ProfFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds13_dcPuy [Occ=Once]
                             _ [Occ=Dead] ->
                 ds13_dcPuy
                 }}]
retainerSelector
  = \ (ds_dcPul :: ProfFlags) ->
      case ds_dcPul of
      { ProfFlags ds1_dcPum ds2_dcPun ds3_dcPuo ds4_dcPup ds5_dcPuq
                  ds6_dcPur ds7_dcPus ds8_dcPut ds9_dcPuu ds10_dcPuv ds11_dcPuw
                  ds12_dcPux ds13_dcPuy ds14_dcPuz ->
      ds13_dcPuy
      }

-- RHS size: {terms: 5, types: 23, coercions: 0, joins: 0/0}
ccsSelector :: ProfFlags -> Maybe String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPu6 [Occ=Once!] :: ProfFlags) ->
                 case ds_dcPu6 of
                 { ProfFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] ds12_dcPui [Occ=Once] _ [Occ=Dead]
                             _ [Occ=Dead] ->
                 ds12_dcPui
                 }}]
ccsSelector
  = \ (ds_dcPu6 :: ProfFlags) ->
      case ds_dcPu6 of
      { ProfFlags ds1_dcPu7 ds2_dcPu8 ds3_dcPu9 ds4_dcPua ds5_dcPub
                  ds6_dcPuc ds7_dcPud ds8_dcPue ds9_dcPuf ds10_dcPug ds11_dcPuh
                  ds12_dcPui ds13_dcPuj ds14_dcPuk ->
      ds12_dcPui
      }

-- RHS size: {terms: 5, types: 23, coercions: 0, joins: 0/0}
ccSelector :: ProfFlags -> Maybe String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPtR [Occ=Once!] :: ProfFlags) ->
                 case ds_dcPtR of
                 { ProfFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] ds11_dcPu2 [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] ->
                 ds11_dcPu2
                 }}]
ccSelector
  = \ (ds_dcPtR :: ProfFlags) ->
      case ds_dcPtR of
      { ProfFlags ds1_dcPtS ds2_dcPtT ds3_dcPtU ds4_dcPtV ds5_dcPtW
                  ds6_dcPtX ds7_dcPtY ds8_dcPtZ ds9_dcPu0 ds10_dcPu1 ds11_dcPu2
                  ds12_dcPu3 ds13_dcPu4 ds14_dcPu5 ->
      ds11_dcPu2
      }

-- RHS size: {terms: 5, types: 23, coercions: 0, joins: 0/0}
typeSelector :: ProfFlags -> Maybe String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPtC [Occ=Once!] :: ProfFlags) ->
                 case ds_dcPtC of
                 { ProfFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             ds10_dcPtM [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] ->
                 ds10_dcPtM
                 }}]
typeSelector
  = \ (ds_dcPtC :: ProfFlags) ->
      case ds_dcPtC of
      { ProfFlags ds1_dcPtD ds2_dcPtE ds3_dcPtF ds4_dcPtG ds5_dcPtH
                  ds6_dcPtI ds7_dcPtJ ds8_dcPtK ds9_dcPtL ds10_dcPtM ds11_dcPtN
                  ds12_dcPtO ds13_dcPtP ds14_dcPtQ ->
      ds10_dcPtM
      }

-- RHS size: {terms: 5, types: 23, coercions: 0, joins: 0/0}
descrSelector :: ProfFlags -> Maybe String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPtn [Occ=Once!] :: ProfFlags) ->
                 case ds_dcPtn of
                 { ProfFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             ds9_dcPtw [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] ->
                 ds9_dcPtw
                 }}]
descrSelector
  = \ (ds_dcPtn :: ProfFlags) ->
      case ds_dcPtn of
      { ProfFlags ds1_dcPto ds2_dcPtp ds3_dcPtq ds4_dcPtr ds5_dcPts
                  ds6_dcPtt ds7_dcPtu ds8_dcPtv ds9_dcPtw ds10_dcPtx ds11_dcPty
                  ds12_dcPtz ds13_dcPtA ds14_dcPtB ->
      ds9_dcPtw
      }

-- RHS size: {terms: 5, types: 23, coercions: 0, joins: 0/0}
modSelector :: ProfFlags -> Maybe String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPt8 [Occ=Once!] :: ProfFlags) ->
                 case ds_dcPt8 of
                 { ProfFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds8_dcPtg [Occ=Once]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] ->
                 ds8_dcPtg
                 }}]
modSelector
  = \ (ds_dcPt8 :: ProfFlags) ->
      case ds_dcPt8 of
      { ProfFlags ds1_dcPt9 ds2_dcPta ds3_dcPtb ds4_dcPtc ds5_dcPtd
                  ds6_dcPte ds7_dcPtf ds8_dcPtg ds9_dcPth ds10_dcPti ds11_dcPtj
                  ds12_dcPtk ds13_dcPtl ds14_dcPtm ->
      ds8_dcPtg
      }

-- RHS size: {terms: 5, types: 23, coercions: 0, joins: 0/0}
ccsLength :: ProfFlags -> Word
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPsT [Occ=Once!] :: ProfFlags) ->
                 case ds_dcPsT of
                 { ProfFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] ds7_dcPt0 [Occ=Once] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] ->
                 ds7_dcPt0
                 }}]
ccsLength
  = \ (ds_dcPsT :: ProfFlags) ->
      case ds_dcPsT of
      { ProfFlags ds1_dcPsU ds2_dcPsV ds3_dcPsW ds4_dcPsX ds5_dcPsY
                  ds6_dcPsZ ds7_dcPt0 ds8_dcPt1 ds9_dcPt2 ds10_dcPt3 ds11_dcPt4
                  ds12_dcPt5 ds13_dcPt6 ds14_dcPt7 ->
      ds7_dcPt0
      }

-- RHS size: {terms: 5, types: 23, coercions: 0, joins: 0/0}
maxRetainerSetSize :: ProfFlags -> Word
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSLLLLLLLL),1*U(A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPsE [Occ=Once!] :: ProfFlags) ->
                 case ds_dcPsE of
                 { ProfFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] ds6_dcPsK [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] ->
                 ds6_dcPsK
                 }}]
maxRetainerSetSize
  = \ (ds_dcPsE :: ProfFlags) ->
      case ds_dcPsE of
      { ProfFlags ds1_dcPsF ds2_dcPsG ds3_dcPsH ds4_dcPsI ds5_dcPsJ
                  ds6_dcPsK ds7_dcPsL ds8_dcPsM ds9_dcPsN ds10_dcPsO ds11_dcPsP
                  ds12_dcPsQ ds13_dcPsR ds14_dcPsS ->
      ds6_dcPsK
      }

-- RHS size: {terms: 5, types: 23, coercions: 0, joins: 0/0}
showCCSOnException :: ProfFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLLLLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPsp [Occ=Once!] :: ProfFlags) ->
                 case ds_dcPsp of
                 { ProfFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             ds5_dcPsu [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] ->
                 ds5_dcPsu
                 }}]
showCCSOnException
  = \ (ds_dcPsp :: ProfFlags) ->
      case ds_dcPsp of
      { ProfFlags ds1_dcPsq ds2_dcPsr ds3_dcPss ds4_dcPst ds5_dcPsu
                  ds6_dcPsv ds7_dcPsw ds8_dcPsx ds9_dcPsy ds10_dcPsz ds11_dcPsA
                  ds12_dcPsB ds13_dcPsC ds14_dcPsD ->
      ds5_dcPsu
      }

-- RHS size: {terms: 5, types: 23, coercions: 0, joins: 0/0}
includeTSOs :: ProfFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPsa [Occ=Once!] :: ProfFlags) ->
                 case ds_dcPsa of
                 { ProfFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             ds4_dcPse [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] ->
                 ds4_dcPse
                 }}]
includeTSOs
  = \ (ds_dcPsa :: ProfFlags) ->
      case ds_dcPsa of
      { ProfFlags ds1_dcPsb ds2_dcPsc ds3_dcPsd ds4_dcPse ds5_dcPsf
                  ds6_dcPsg ds7_dcPsh ds8_dcPsi ds9_dcPsj ds10_dcPsk ds11_dcPsl
                  ds12_dcPsm ds13_dcPsn ds14_dcPso ->
      ds4_dcPse
      }

-- RHS size: {terms: 5, types: 23, coercions: 0, joins: 0/0}
heapProfileIntervalTicks :: ProfFlags -> Word
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLLLLLLLLL),1*U(A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPrV [Occ=Once!] :: ProfFlags) ->
                 case ds_dcPrV of
                 { ProfFlags _ [Occ=Dead] _ [Occ=Dead] ds3_dcPrY [Occ=Once]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] ->
                 ds3_dcPrY
                 }}]
heapProfileIntervalTicks
  = \ (ds_dcPrV :: ProfFlags) ->
      case ds_dcPrV of
      { ProfFlags ds1_dcPrW ds2_dcPrX ds3_dcPrY ds4_dcPrZ ds5_dcPs0
                  ds6_dcPs1 ds7_dcPs2 ds8_dcPs3 ds9_dcPs4 ds10_dcPs5 ds11_dcPs6
                  ds12_dcPs7 ds13_dcPs8 ds14_dcPs9 ->
      ds3_dcPrY
      }

-- RHS size: {terms: 5, types: 23, coercions: 0, joins: 0/0}
heapProfileInterval :: ProfFlags -> RtsTime
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLLLLLLLLL),1*U(A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPrG [Occ=Once!] :: ProfFlags) ->
                 case ds_dcPrG of
                 { ProfFlags _ [Occ=Dead] ds2_dcPrI [Occ=Once] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] ->
                 ds2_dcPrI
                 }}]
heapProfileInterval
  = \ (ds_dcPrG :: ProfFlags) ->
      case ds_dcPrG of
      { ProfFlags ds1_dcPrH ds2_dcPrI ds3_dcPrJ ds4_dcPrK ds5_dcPrL
                  ds6_dcPrM ds7_dcPrN ds8_dcPrO ds9_dcPrP ds10_dcPrQ ds11_dcPrR
                  ds12_dcPrS ds13_dcPrT ds14_dcPrU ->
      ds2_dcPrI
      }

-- RHS size: {terms: 5, types: 23, coercions: 0, joins: 0/0}
doHeapProfile :: ProfFlags -> DoHeapProfile
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPrr [Occ=Once!] :: ProfFlags) ->
                 case ds_dcPrr of
                 { ProfFlags ds1_dcPrs [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             _ [Occ=Dead] ->
                 ds1_dcPrs
                 }}]
doHeapProfile
  = \ (ds_dcPrr :: ProfFlags) ->
      case ds_dcPrr of
      { ProfFlags ds1_dcPrs ds2_dcPrt ds3_dcPru ds4_dcPrv ds5_dcPrw
                  ds6_dcPrx ds7_dcPry ds8_dcPrz ds9_dcPrA ds10_dcPrB ds11_dcPrC
                  ds12_dcPrD ds13_dcPrE ds14_dcPrF ->
      ds1_dcPrs
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
user :: TraceFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLS),1*U(A,A,A,A,A,A,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPrj [Occ=Once!] :: TraceFlags) ->
                 case ds_dcPrj of
                 { TraceFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] ds7_dcPrq [Occ=Once] ->
                 ds7_dcPrq
                 }}]
user
  = \ (ds_dcPrj :: TraceFlags) ->
      case ds_dcPrj of
      { TraceFlags ds1_dcPrk ds2_dcPrl ds3_dcPrm ds4_dcPrn ds5_dcPro
                   ds6_dcPrp ds7_dcPrq ->
      ds7_dcPrq
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
sparksFull :: TraceFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPrb [Occ=Once!] :: TraceFlags) ->
                 case ds_dcPrb of
                 { TraceFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] ds6_dcPrh [Occ=Once] _ [Occ=Dead] ->
                 ds6_dcPrh
                 }}]
sparksFull
  = \ (ds_dcPrb :: TraceFlags) ->
      case ds_dcPrb of
      { TraceFlags ds1_dcPrc ds2_dcPrd ds3_dcPre ds4_dcPrf ds5_dcPrg
                   ds6_dcPrh ds7_dcPri ->
      ds6_dcPrh
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
sparksSampled :: TraceFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPr3 [Occ=Once!] :: TraceFlags) ->
                 case ds_dcPr3 of
                 { TraceFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              ds5_dcPr8 [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds5_dcPr8
                 }}]
sparksSampled
  = \ (ds_dcPr3 :: TraceFlags) ->
      case ds_dcPr3 of
      { TraceFlags ds1_dcPr4 ds2_dcPr5 ds3_dcPr6 ds4_dcPr7 ds5_dcPr8
                   ds6_dcPr9 ds7_dcPra ->
      ds5_dcPr8
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
traceGc :: TraceFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLL),1*U(A,A,A,1*U,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPqV [Occ=Once!] :: TraceFlags) ->
                 case ds_dcPqV of
                 { TraceFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                              ds4_dcPqZ [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds4_dcPqZ
                 }}]
traceGc
  = \ (ds_dcPqV :: TraceFlags) ->
      case ds_dcPqV of
      { TraceFlags ds1_dcPqW ds2_dcPqX ds3_dcPqY ds4_dcPqZ ds5_dcPr0
                   ds6_dcPr1 ds7_dcPr2 ->
      ds4_dcPqZ
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
traceScheduler :: TraceFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPqN [Occ=Once!] :: TraceFlags) ->
                 case ds_dcPqN of
                 { TraceFlags _ [Occ=Dead] _ [Occ=Dead] ds3_dcPqQ [Occ=Once]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds3_dcPqQ
                 }}]
traceScheduler
  = \ (ds_dcPqN :: TraceFlags) ->
      case ds_dcPqN of
      { TraceFlags ds1_dcPqO ds2_dcPqP ds3_dcPqQ ds4_dcPqR ds5_dcPqS
                   ds6_dcPqT ds7_dcPqU ->
      ds3_dcPqQ
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
timestamp :: TraceFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPqF [Occ=Once!] :: TraceFlags) ->
                 case ds_dcPqF of
                 { TraceFlags _ [Occ=Dead] ds2_dcPqH [Occ=Once] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds2_dcPqH
                 }}]
timestamp
  = \ (ds_dcPqF :: TraceFlags) ->
      case ds_dcPqF of
      { TraceFlags ds1_dcPqG ds2_dcPqH ds3_dcPqI ds4_dcPqJ ds5_dcPqK
                   ds6_dcPqL ds7_dcPqM ->
      ds2_dcPqH
      }

-- RHS size: {terms: 5, types: 9, coercions: 0, joins: 0/0}
tracing :: TraceFlags -> DoTrace
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLL),1*U(1*U,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPqx [Occ=Once!] :: TraceFlags) ->
                 case ds_dcPqx of
                 { TraceFlags ds1_dcPqy [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds1_dcPqy
                 }}]
tracing
  = \ (ds_dcPqx :: TraceFlags) ->
      case ds_dcPqx of
      { TraceFlags ds1_dcPqy ds2_dcPqz ds3_dcPqA ds4_dcPqB ds5_dcPqC
                   ds6_dcPqD ds7_dcPqE ->
      ds1_dcPqy
      }

-- RHS size: {terms: 5, types: 5, coercions: 0, joins: 0/0}
tickyFile :: TickyFlags -> Maybe FilePath
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPqu [Occ=Once!] :: TickyFlags) ->
                 case ds_dcPqu of { TickyFlags _ [Occ=Dead] ds2_dcPqw [Occ=Once] ->
                 ds2_dcPqw
                 }}]
tickyFile
  = \ (ds_dcPqu :: TickyFlags) ->
      case ds_dcPqu of { TickyFlags ds1_dcPqv ds2_dcPqw -> ds2_dcPqw }

-- RHS size: {terms: 5, types: 5, coercions: 0, joins: 0/0}
showTickyStats :: TickyFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPqr [Occ=Once!] :: TickyFlags) ->
                 case ds_dcPqr of { TickyFlags ds1_dcPqs [Occ=Once] _ [Occ=Dead] ->
                 ds1_dcPqs
                 }}]
showTickyStats
  = \ (ds_dcPqr :: TickyFlags) ->
      case ds_dcPqr of { TickyFlags ds1_dcPqs ds2_dcPqt -> ds1_dcPqs }

-- RHS size: {terms: 5, types: 12, coercions: 0, joins: 0/0}
setAffinity :: ParFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPqg [Occ=Once!] :: ParFlags) ->
                 case ds_dcPqg of
                 { ParFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            ds10_dcPqq [Occ=Once] ->
                 ds10_dcPqq
                 }}]
setAffinity
  = \ (ds_dcPqg :: ParFlags) ->
      case ds_dcPqg of
      { ParFlags ds1_dcPqh ds2_dcPqi ds3_dcPqj ds4_dcPqk ds5_dcPql
                 ds6_dcPqm ds7_dcPqn ds8_dcPqo ds9_dcPqp ds10_dcPqq ->
      ds10_dcPqq
      }

-- RHS size: {terms: 5, types: 12, coercions: 0, joins: 0/0}
parGcThreads :: ParFlags -> Word32
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,1*U(U),A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPq5 [Occ=Once!] :: ParFlags) ->
                 case ds_dcPq5 of
                 { ParFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            ds9_dcPqe [Occ=Once] _ [Occ=Dead] ->
                 ds9_dcPqe
                 }}]
parGcThreads
  = \ (ds_dcPq5 :: ParFlags) ->
      case ds_dcPq5 of
      { ParFlags ds1_dcPq6 ds2_dcPq7 ds3_dcPq8 ds4_dcPq9 ds5_dcPqa
                 ds6_dcPqb ds7_dcPqc ds8_dcPqd ds9_dcPqe ds10_dcPqf ->
      ds9_dcPqe
      }

-- RHS size: {terms: 5, types: 12, coercions: 0, joins: 0/0}
parGcNoSyncWithIdle :: ParFlags -> Word32
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLSLL),1*U(A,A,A,A,A,A,A,1*U(U),A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPpU [Occ=Once!] :: ParFlags) ->
                 case ds_dcPpU of
                 { ParFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds8_dcPq2 [Occ=Once]
                            _ [Occ=Dead] _ [Occ=Dead] ->
                 ds8_dcPq2
                 }}]
parGcNoSyncWithIdle
  = \ (ds_dcPpU :: ParFlags) ->
      case ds_dcPpU of
      { ParFlags ds1_dcPpV ds2_dcPpW ds3_dcPpX ds4_dcPpY ds5_dcPpZ
                 ds6_dcPq0 ds7_dcPq1 ds8_dcPq2 ds9_dcPq3 ds10_dcPq4 ->
      ds8_dcPq2
      }

-- RHS size: {terms: 5, types: 12, coercions: 0, joins: 0/0}
parGcLoadBalancingGen :: ParFlags -> Word32
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLSLLL),1*U(A,A,A,A,A,A,1*U(U),A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPpJ [Occ=Once!] :: ParFlags) ->
                 case ds_dcPpJ of
                 { ParFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] ds7_dcPpQ [Occ=Once] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] ->
                 ds7_dcPpQ
                 }}]
parGcLoadBalancingGen
  = \ (ds_dcPpJ :: ParFlags) ->
      case ds_dcPpJ of
      { ParFlags ds1_dcPpK ds2_dcPpL ds3_dcPpM ds4_dcPpN ds5_dcPpO
                 ds6_dcPpP ds7_dcPpQ ds8_dcPpR ds9_dcPpS ds10_dcPpT ->
      ds7_dcPpQ
      }

-- RHS size: {terms: 5, types: 12, coercions: 0, joins: 0/0}
parGcLoadBalancingEnabled :: ParFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSLLLL),1*U(A,A,A,A,A,1*U,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPpy [Occ=Once!] :: ParFlags) ->
                 case ds_dcPpy of
                 { ParFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] ds6_dcPpE [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] ->
                 ds6_dcPpE
                 }}]
parGcLoadBalancingEnabled
  = \ (ds_dcPpy :: ParFlags) ->
      case ds_dcPpy of
      { ParFlags ds1_dcPpz ds2_dcPpA ds3_dcPpB ds4_dcPpC ds5_dcPpD
                 ds6_dcPpE ds7_dcPpF ds8_dcPpG ds9_dcPpH ds10_dcPpI ->
      ds6_dcPpE
      }

-- RHS size: {terms: 5, types: 12, coercions: 0, joins: 0/0}
parGcGen :: ParFlags -> Word32
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLLLLL),1*U(A,A,A,A,1*U(U),A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPpn [Occ=Once!] :: ParFlags) ->
                 case ds_dcPpn of
                 { ParFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            ds5_dcPps [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] ->
                 ds5_dcPps
                 }}]
parGcGen
  = \ (ds_dcPpn :: ParFlags) ->
      case ds_dcPpn of
      { ParFlags ds1_dcPpo ds2_dcPpp ds3_dcPpq ds4_dcPpr ds5_dcPps
                 ds6_dcPpt ds7_dcPpu ds8_dcPpv ds9_dcPpw ds10_dcPpx ->
      ds5_dcPps
      }

-- RHS size: {terms: 5, types: 12, coercions: 0, joins: 0/0}
parGcEnabled :: ParFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPpc [Occ=Once!] :: ParFlags) ->
                 case ds_dcPpc of
                 { ParFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            ds4_dcPpg [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds4_dcPpg
                 }}]
parGcEnabled
  = \ (ds_dcPpc :: ParFlags) ->
      case ds_dcPpc of
      { ParFlags ds1_dcPpd ds2_dcPpe ds3_dcPpf ds4_dcPpg ds5_dcPph
                 ds6_dcPpi ds7_dcPpj ds8_dcPpk ds9_dcPpl ds10_dcPpm ->
      ds4_dcPpg
      }

-- RHS size: {terms: 5, types: 12, coercions: 0, joins: 0/0}
maxLocalSparks :: ParFlags -> Word32
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLLLLL),1*U(A,A,1*U(U),A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPp1 [Occ=Once!] :: ParFlags) ->
                 case ds_dcPp1 of
                 { ParFlags _ [Occ=Dead] _ [Occ=Dead] ds3_dcPp4 [Occ=Once]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] ->
                 ds3_dcPp4
                 }}]
maxLocalSparks
  = \ (ds_dcPp1 :: ParFlags) ->
      case ds_dcPp1 of
      { ParFlags ds1_dcPp2 ds2_dcPp3 ds3_dcPp4 ds4_dcPp5 ds5_dcPp6
                 ds6_dcPp7 ds7_dcPp8 ds8_dcPp9 ds9_dcPpa ds10_dcPpb ->
      ds3_dcPp4
      }

-- RHS size: {terms: 5, types: 12, coercions: 0, joins: 0/0}
migrate :: ParFlags -> Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPoQ [Occ=Once!] :: ParFlags) ->
                 case ds_dcPoQ of
                 { ParFlags _ [Occ=Dead] ds2_dcPoS [Occ=Once] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] ->
                 ds2_dcPoS
                 }}]
migrate
  = \ (ds_dcPoQ :: ParFlags) ->
      case ds_dcPoQ of
      { ParFlags ds1_dcPoR ds2_dcPoS ds3_dcPoT ds4_dcPoU ds5_dcPoV
                 ds6_dcPoW ds7_dcPoX ds8_dcPoY ds9_dcPoZ ds10_dcPp0 ->
      ds2_dcPoS
      }

-- RHS size: {terms: 5, types: 12, coercions: 0, joins: 0/0}
nCapabilities :: ParFlags -> Word32
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLLLLL),1*U(1*U(U),A,A,A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPoF [Occ=Once!] :: ParFlags) ->
                 case ds_dcPoF of
                 { ParFlags ds1_dcPoG [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] ->
                 ds1_dcPoG
                 }}]
nCapabilities
  = \ (ds_dcPoF :: ParFlags) ->
      case ds_dcPoF of
      { ParFlags ds1_dcPoG ds2_dcPoH ds3_dcPoI ds4_dcPoJ ds5_dcPoK
                 ds6_dcPoL ds7_dcPoM ds8_dcPoN ds9_dcPoO ds10_dcPoP ->
      ds1_dcPoG
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
parFlags :: RTSFlags -> ParFlags
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLS),1*U(A,A,A,A,A,A,A,A,1*U(U,U,U,U,U,U,U,U,U,U))>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPov [Occ=Once!] :: RTSFlags) ->
                 case ds_dcPov of
                 { RTSFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            ds9_dcPoE [Occ=Once] ->
                 ds9_dcPoE
                 }}]
parFlags
  = \ (ds_dcPov :: RTSFlags) ->
      case ds_dcPov of
      { RTSFlags ds1_dcPow ds2_dcPox ds3_dcPoy ds4_dcPoz ds5_dcPoA
                 ds6_dcPoB ds7_dcPoC ds8_dcPoD ds9_dcPoE ->
      ds9_dcPoE
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
tickyFlags :: RTSFlags -> TickyFlags
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLSL),1*U(A,A,A,A,A,A,A,1*U(U,U),A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPol [Occ=Once!] :: RTSFlags) ->
                 case ds_dcPol of
                 { RTSFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ds8_dcPot [Occ=Once]
                            _ [Occ=Dead] ->
                 ds8_dcPot
                 }}]
tickyFlags
  = \ (ds_dcPol :: RTSFlags) ->
      case ds_dcPol of
      { RTSFlags ds1_dcPom ds2_dcPon ds3_dcPoo ds4_dcPop ds5_dcPoq
                 ds6_dcPor ds7_dcPos ds8_dcPot ds9_dcPou ->
      ds8_dcPot
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
traceFlags :: RTSFlags -> TraceFlags
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLSLL),1*U(A,A,A,A,A,A,1*U(U,U,U,U,U,U,U),A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPob [Occ=Once!] :: RTSFlags) ->
                 case ds_dcPob of
                 { RTSFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] ds7_dcPoi [Occ=Once] _ [Occ=Dead]
                            _ [Occ=Dead] ->
                 ds7_dcPoi
                 }}]
traceFlags
  = \ (ds_dcPob :: RTSFlags) ->
      case ds_dcPob of
      { RTSFlags ds1_dcPoc ds2_dcPod ds3_dcPoe ds4_dcPof ds5_dcPog
                 ds6_dcPoh ds7_dcPoi ds8_dcPoj ds9_dcPok ->
      ds7_dcPoi
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
profilingFlags :: RTSFlags -> ProfFlags
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSLLL),1*U(A,A,A,A,A,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U),A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPo1 [Occ=Once!] :: RTSFlags) ->
                 case ds_dcPo1 of
                 { RTSFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] ds6_dcPo7 [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] ->
                 ds6_dcPo7
                 }}]
profilingFlags
  = \ (ds_dcPo1 :: RTSFlags) ->
      case ds_dcPo1 of
      { RTSFlags ds1_dcPo2 ds2_dcPo3 ds3_dcPo4 ds4_dcPo5 ds5_dcPo6
                 ds6_dcPo7 ds7_dcPo8 ds8_dcPo9 ds9_dcPoa ->
      ds6_dcPo7
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
costCentreFlags :: RTSFlags -> CCFlags
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLLLL),1*U(A,A,A,A,1*U(U,U,U),A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPnR [Occ=Once!] :: RTSFlags) ->
                 case ds_dcPnR of
                 { RTSFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            ds5_dcPnW [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] ->
                 ds5_dcPnW
                 }}]
costCentreFlags
  = \ (ds_dcPnR :: RTSFlags) ->
      case ds_dcPnR of
      { RTSFlags ds1_dcPnS ds2_dcPnT ds3_dcPnU ds4_dcPnV ds5_dcPnW
                 ds6_dcPnX ds7_dcPnY ds8_dcPnZ ds9_dcPo0 ->
      ds5_dcPnW
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
debugFlags :: RTSFlags -> DebugFlags
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLLLL),1*U(A,A,A,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPnH [Occ=Once!] :: RTSFlags) ->
                 case ds_dcPnH of
                 { RTSFlags _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            ds4_dcPnL [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] ->
                 ds4_dcPnL
                 }}]
debugFlags
  = \ (ds_dcPnH :: RTSFlags) ->
      case ds_dcPnH of
      { RTSFlags ds1_dcPnI ds2_dcPnJ ds3_dcPnK ds4_dcPnL ds5_dcPnM
                 ds6_dcPnN ds7_dcPnO ds8_dcPnP ds9_dcPnQ ->
      ds4_dcPnL
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
miscFlags :: RTSFlags -> MiscFlags
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLLLL),1*U(A,A,1*U(U,U,U,U,U,U,U),A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPnx [Occ=Once!] :: RTSFlags) ->
                 case ds_dcPnx of
                 { RTSFlags _ [Occ=Dead] _ [Occ=Dead] ds3_dcPnA [Occ=Once]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] ->
                 ds3_dcPnA
                 }}]
miscFlags
  = \ (ds_dcPnx :: RTSFlags) ->
      case ds_dcPnx of
      { RTSFlags ds1_dcPny ds2_dcPnz ds3_dcPnA ds4_dcPnB ds5_dcPnC
                 ds6_dcPnD ds7_dcPnE ds8_dcPnF ds9_dcPnG ->
      ds3_dcPnA
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
concurrentFlags :: RTSFlags -> ConcFlags
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLLLL),1*U(A,1*U(U,U),A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPnn [Occ=Once!] :: RTSFlags) ->
                 case ds_dcPnn of
                 { RTSFlags _ [Occ=Dead] ds2_dcPnp [Occ=Once] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] ->
                 ds2_dcPnp
                 }}]
concurrentFlags
  = \ (ds_dcPnn :: RTSFlags) ->
      case ds_dcPnn of
      { RTSFlags ds1_dcPno ds2_dcPnp ds3_dcPnq ds4_dcPnr ds5_dcPns
                 ds6_dcPnt ds7_dcPnu ds8_dcPnv ds9_dcPnw ->
      ds2_dcPnp
      }

-- RHS size: {terms: 5, types: 11, coercions: 0, joins: 0/0}
gcFlags :: RTSFlags -> GCFlags
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLLLL),1*U(1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),A,A,A,A,A,A,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dcPnd [Occ=Once!] :: RTSFlags) ->
                 case ds_dcPnd of
                 { RTSFlags ds1_dcPne [Occ=Once] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] ->
                 ds1_dcPne
                 }}]
gcFlags
  = \ (ds_dcPnd :: RTSFlags) ->
      case ds_dcPnd of
      { RTSFlags ds1_dcPne ds2_dcPnf ds3_dcPng ds4_dcPnh ds5_dcPni
                 ds6_dcPnj ds7_dcPnk ds8_dcPnl ds9_dcPnm ->
      ds1_dcPne
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$trModule3
  = GHC.Types.TrNameS GHC.RTS.Flags.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$trModule2 = "GHC.RTS.Flags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$trModule1
  = GHC.Types.TrNameS GHC.RTS.Flags.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.RTS.Flags.$trModule
  = GHC.Types.Module
      GHC.RTS.Flags.$trModule3 GHC.RTS.Flags.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_rcV6F :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_rcV6F
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcDouble (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_rcV6G :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_rcV6G
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcInt (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_rcV6H :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep2_rcV6H
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcWord (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_rcV6I :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep3_rcV6I
  = GHC.Types.KindRepTyConApp
      GHC.Word.$tcWord64 (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_rcV6J :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep4_rcV6J
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcChar (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep5_rcV6K :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep5_rcV6K
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcBool (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep6_rcV6L :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep6_rcV6L
  = GHC.Types.KindRepTyConApp
      GHC.Word.$tcWord32 (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep7_rcV6M :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep7_rcV6M
  = GHC.Types.: @ KindRep $krep4_rcV6J (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_rcV6N :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep8_rcV6N
  = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep7_rcV6M

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep9_rcV6O :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep9_rcV6O
  = GHC.Types.: @ KindRep $krep8_rcV6N (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep10_rcV6P :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep10_rcV6P
  = GHC.Types.KindRepTyConApp GHC.Base.$tcMaybe $krep9_rcV6O

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcGiveGCStats2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tcGiveGCStats2 = "GiveGCStats"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcGiveGCStats1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tcGiveGCStats1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tcGiveGCStats2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcGiveGCStats :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tcGiveGCStats
  = GHC.Types.TyCon
      6610677523385408458##
      17305718893788490736##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tcGiveGCStats1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CollectGCStats1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.RTS.Flags.$tc'CollectGCStats1
  = GHC.Types.KindRepTyConApp
      GHC.RTS.Flags.$tcGiveGCStats (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'NoGCStats2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tc'NoGCStats2 = "'NoGCStats"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'NoGCStats1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'NoGCStats1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'NoGCStats2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'NoGCStats :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'NoGCStats
  = GHC.Types.TyCon
      7933034681225600823##
      3740225576493790291##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'NoGCStats1
      0#
      GHC.RTS.Flags.$tc'CollectGCStats1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CollectGCStats3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$tc'CollectGCStats3 = "'CollectGCStats"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CollectGCStats2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'CollectGCStats2
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'CollectGCStats3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CollectGCStats :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'CollectGCStats
  = GHC.Types.TyCon
      3746479294690445129##
      11560471058246341246##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'CollectGCStats2
      0#
      GHC.RTS.Flags.$tc'CollectGCStats1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'OneLineGCStats2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$tc'OneLineGCStats2 = "'OneLineGCStats"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'OneLineGCStats1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'OneLineGCStats1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'OneLineGCStats2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'OneLineGCStats :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'OneLineGCStats
  = GHC.Types.TyCon
      10050868986052397820##
      7762915732892167917##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'OneLineGCStats1
      0#
      GHC.RTS.Flags.$tc'CollectGCStats1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'SummaryGCStats2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$tc'SummaryGCStats2 = "'SummaryGCStats"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'SummaryGCStats1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'SummaryGCStats1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'SummaryGCStats2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'SummaryGCStats :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'SummaryGCStats
  = GHC.Types.TyCon
      903385594733568743##
      408941185149856254##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'SummaryGCStats1
      0#
      GHC.RTS.Flags.$tc'CollectGCStats1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'VerboseGCStats2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$tc'VerboseGCStats2 = "'VerboseGCStats"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'VerboseGCStats1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'VerboseGCStats1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'VerboseGCStats2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'VerboseGCStats :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'VerboseGCStats
  = GHC.Types.TyCon
      5306241424052285901##
      7221383768387793036##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'VerboseGCStats1
      0#
      GHC.RTS.Flags.$tc'CollectGCStats1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcGCFlags2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.RTS.Flags.$tcGCFlags2 = "GCFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcGCFlags1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tcGCFlags1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tcGCFlags2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcGCFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tcGCFlags
  = GHC.Types.TyCon
      7972238777300781582##
      877769587847050685##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tcGCFlags1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep11_rcV6Q :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep11_rcV6Q
  = GHC.Types.KindRepTyConApp
      GHC.RTS.Flags.$tcGCFlags (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_rcV6R :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep12_rcV6R = GHC.Types.KindRepFun $krep2_rcV6H $krep11_rcV6Q

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_rcV6S :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep13_rcV6S = GHC.Types.KindRepFun $krep5_rcV6K $krep12_rcV6R

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_rcV6T :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep14_rcV6T = GHC.Types.KindRepFun $krep2_rcV6H $krep13_rcV6S

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep15_rcV6U :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep15_rcV6U = GHC.Types.KindRepFun $krep2_rcV6H $krep14_rcV6T

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep16_rcV6V :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep16_rcV6V = GHC.Types.KindRepFun $krep5_rcV6K $krep15_rcV6U

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep17_rcV6W :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep17_rcV6W = GHC.Types.KindRepFun $krep3_rcV6I $krep16_rcV6V

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep18_rcV6X :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep18_rcV6X = GHC.Types.KindRepFun $krep5_rcV6K $krep17_rcV6W

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep19_rcV6Y :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep19_rcV6Y = GHC.Types.KindRepFun $krep5_rcV6K $krep18_rcV6X

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep20_rcV6Z :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep20_rcV6Z = GHC.Types.KindRepFun $krep_rcV6F $krep19_rcV6Y

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep21_rcV70 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep21_rcV70 = GHC.Types.KindRepFun $krep5_rcV6K $krep20_rcV6Z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep22_rcV71 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep22_rcV71 = GHC.Types.KindRepFun $krep5_rcV6K $krep21_rcV70

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep23_rcV72 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep23_rcV72 = GHC.Types.KindRepFun $krep6_rcV6L $krep22_rcV71

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep24_rcV73 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep24_rcV73 = GHC.Types.KindRepFun $krep_rcV6F $krep23_rcV72

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep25_rcV74 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep25_rcV74 = GHC.Types.KindRepFun $krep_rcV6F $krep24_rcV73

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep26_rcV75 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep26_rcV75 = GHC.Types.KindRepFun $krep5_rcV6K $krep25_rcV74

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep27_rcV76 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep27_rcV76 = GHC.Types.KindRepFun $krep6_rcV6L $krep26_rcV75

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep28_rcV77 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep28_rcV77 = GHC.Types.KindRepFun $krep6_rcV6L $krep27_rcV76

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep29_rcV78 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep29_rcV78 = GHC.Types.KindRepFun $krep6_rcV6L $krep28_rcV77

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep30_rcV79 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep30_rcV79 = GHC.Types.KindRepFun $krep6_rcV6L $krep29_rcV78

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep31_rcV7a :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep31_rcV7a = GHC.Types.KindRepFun $krep6_rcV6L $krep30_rcV79

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep32_rcV7b :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep32_rcV7b = GHC.Types.KindRepFun $krep6_rcV6L $krep31_rcV7a

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep33_rcV7c :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep33_rcV7c = GHC.Types.KindRepFun $krep6_rcV6L $krep32_rcV7b

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep34_rcV7d :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep34_rcV7d = GHC.Types.KindRepFun $krep6_rcV6L $krep33_rcV7c

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep35_rcV7e :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep35_rcV7e = GHC.Types.KindRepFun $krep6_rcV6L $krep34_rcV7d

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep36_rcV7f :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep36_rcV7f = GHC.Types.KindRepFun $krep6_rcV6L $krep35_rcV7e

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep37_rcV7g :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep37_rcV7g
  = GHC.Types.KindRepFun
      GHC.RTS.Flags.$tc'CollectGCStats1 $krep36_rcV7f

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'GCFlags1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.RTS.Flags.$tc'GCFlags1
  = GHC.Types.KindRepFun $krep10_rcV6P $krep37_rcV7g

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'GCFlags3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.RTS.Flags.$tc'GCFlags3 = "'GCFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'GCFlags2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'GCFlags2
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'GCFlags3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'GCFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'GCFlags
  = GHC.Types.TyCon
      15077871255757076606##
      428936906040764902##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'GCFlags2
      0#
      GHC.RTS.Flags.$tc'GCFlags1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcConcFlags2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tcConcFlags2 = "ConcFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcConcFlags1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tcConcFlags1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tcConcFlags2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcConcFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tcConcFlags
  = GHC.Types.TyCon
      8014663245729948380##
      13771385662434223247##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tcConcFlags1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep38_rcV7h :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep38_rcV7h
  = GHC.Types.KindRepTyConApp
      GHC.RTS.Flags.$tcConcFlags (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep39_rcV7i :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep39_rcV7i = GHC.Types.KindRepFun $krep1_rcV6G $krep38_rcV7h

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'ConcFlags1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.RTS.Flags.$tc'ConcFlags1
  = GHC.Types.KindRepFun $krep3_rcV6I $krep39_rcV7i

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'ConcFlags3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tc'ConcFlags3 = "'ConcFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'ConcFlags2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'ConcFlags2
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'ConcFlags3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'ConcFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'ConcFlags
  = GHC.Types.TyCon
      3887237771069755887##
      16720223823447457419##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'ConcFlags2
      0#
      GHC.RTS.Flags.$tc'ConcFlags1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcMiscFlags2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tcMiscFlags2 = "MiscFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcMiscFlags1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tcMiscFlags1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tcMiscFlags2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcMiscFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tcMiscFlags
  = GHC.Types.TyCon
      8345734398582159173##
      13018943964024104206##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tcMiscFlags1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep40_rcV7j :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep40_rcV7j
  = GHC.Types.KindRepTyConApp
      GHC.RTS.Flags.$tcMiscFlags (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep41_rcV7k :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep41_rcV7k = GHC.Types.KindRepFun $krep2_rcV6H $krep40_rcV7j

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep42_rcV7l :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep42_rcV7l = GHC.Types.KindRepFun $krep5_rcV6K $krep41_rcV7k

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep43_rcV7m :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep43_rcV7m = GHC.Types.KindRepFun $krep5_rcV6K $krep42_rcV7l

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep44_rcV7n :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep44_rcV7n = GHC.Types.KindRepFun $krep5_rcV6K $krep43_rcV7m

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep45_rcV7o :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep45_rcV7o = GHC.Types.KindRepFun $krep5_rcV6K $krep44_rcV7n

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep46_rcV7p :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep46_rcV7p = GHC.Types.KindRepFun $krep5_rcV6K $krep45_rcV7o

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'MiscFlags1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.RTS.Flags.$tc'MiscFlags1
  = GHC.Types.KindRepFun $krep3_rcV6I $krep46_rcV7p

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'MiscFlags3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tc'MiscFlags3 = "'MiscFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'MiscFlags2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'MiscFlags2
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'MiscFlags3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'MiscFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'MiscFlags
  = GHC.Types.TyCon
      8738274121432326663##
      17456949991610747249##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'MiscFlags2
      0#
      GHC.RTS.Flags.$tc'MiscFlags1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcDebugFlags2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tcDebugFlags2 = "DebugFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcDebugFlags1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tcDebugFlags1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tcDebugFlags2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcDebugFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tcDebugFlags
  = GHC.Types.TyCon
      6148836561850888235##
      4971417148613417489##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tcDebugFlags1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep47_rcV7q :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep47_rcV7q
  = GHC.Types.KindRepTyConApp
      GHC.RTS.Flags.$tcDebugFlags (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep48_rcV7r :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep48_rcV7r = GHC.Types.KindRepFun $krep5_rcV6K $krep47_rcV7q

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep49_rcV7s :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep49_rcV7s = GHC.Types.KindRepFun $krep5_rcV6K $krep48_rcV7r

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep50_rcV7t :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep50_rcV7t = GHC.Types.KindRepFun $krep5_rcV6K $krep49_rcV7s

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep51_rcV7u :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep51_rcV7u = GHC.Types.KindRepFun $krep5_rcV6K $krep50_rcV7t

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep52_rcV7v :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep52_rcV7v = GHC.Types.KindRepFun $krep5_rcV6K $krep51_rcV7u

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep53_rcV7w :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep53_rcV7w = GHC.Types.KindRepFun $krep5_rcV6K $krep52_rcV7v

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep54_rcV7x :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep54_rcV7x = GHC.Types.KindRepFun $krep5_rcV6K $krep53_rcV7w

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep55_rcV7y :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep55_rcV7y = GHC.Types.KindRepFun $krep5_rcV6K $krep54_rcV7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep56_rcV7z :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep56_rcV7z = GHC.Types.KindRepFun $krep5_rcV6K $krep55_rcV7y

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep57_rcV7A :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep57_rcV7A = GHC.Types.KindRepFun $krep5_rcV6K $krep56_rcV7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep58_rcV7B :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep58_rcV7B = GHC.Types.KindRepFun $krep5_rcV6K $krep57_rcV7A

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep59_rcV7C :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep59_rcV7C = GHC.Types.KindRepFun $krep5_rcV6K $krep58_rcV7B

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep60_rcV7D :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep60_rcV7D = GHC.Types.KindRepFun $krep5_rcV6K $krep59_rcV7C

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep61_rcV7E :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep61_rcV7E = GHC.Types.KindRepFun $krep5_rcV6K $krep60_rcV7D

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'DebugFlags1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.RTS.Flags.$tc'DebugFlags1
  = GHC.Types.KindRepFun $krep5_rcV6K $krep61_rcV7E

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'DebugFlags3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tc'DebugFlags3 = "'DebugFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'DebugFlags2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'DebugFlags2
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'DebugFlags3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'DebugFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'DebugFlags
  = GHC.Types.TyCon
      5797788004444129297##
      18307470711129601643##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'DebugFlags2
      0#
      GHC.RTS.Flags.$tc'DebugFlags1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcDoCostCentres2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$tcDoCostCentres2 = "DoCostCentres"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcDoCostCentres1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tcDoCostCentres1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tcDoCostCentres2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcDoCostCentres :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tcDoCostCentres
  = GHC.Types.TyCon
      12247765477237709938##
      15987815848961641446##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tcDoCostCentres1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CostCentresAll1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.RTS.Flags.$tc'CostCentresAll1
  = GHC.Types.KindRepTyConApp
      GHC.RTS.Flags.$tcDoCostCentres (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CostCentresNone2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$tc'CostCentresNone2 = "'CostCentresNone"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CostCentresNone1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'CostCentresNone1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'CostCentresNone2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CostCentresNone :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'CostCentresNone
  = GHC.Types.TyCon
      9941076719153329985##
      5975200043947881410##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'CostCentresNone1
      0#
      GHC.RTS.Flags.$tc'CostCentresAll1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CostCentresSummary2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.RTS.Flags.$tc'CostCentresSummary2 = "'CostCentresSummary"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CostCentresSummary1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'CostCentresSummary1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'CostCentresSummary2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CostCentresSummary :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'CostCentresSummary
  = GHC.Types.TyCon
      7907150943011235483##
      8448171742954198172##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'CostCentresSummary1
      0#
      GHC.RTS.Flags.$tc'CostCentresAll1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CostCentresVerbose2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.RTS.Flags.$tc'CostCentresVerbose2 = "'CostCentresVerbose"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CostCentresVerbose1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'CostCentresVerbose1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'CostCentresVerbose2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CostCentresVerbose :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'CostCentresVerbose
  = GHC.Types.TyCon
      9824578800821523041##
      10307761995494160912##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'CostCentresVerbose1
      0#
      GHC.RTS.Flags.$tc'CostCentresAll1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CostCentresAll3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$tc'CostCentresAll3 = "'CostCentresAll"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CostCentresAll2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'CostCentresAll2
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'CostCentresAll3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CostCentresAll :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'CostCentresAll
  = GHC.Types.TyCon
      17708860571824488665##
      3474022764015128952##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'CostCentresAll2
      0#
      GHC.RTS.Flags.$tc'CostCentresAll1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CostCentresJSON2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$tc'CostCentresJSON2 = "'CostCentresJSON"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CostCentresJSON1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'CostCentresJSON1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'CostCentresJSON2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CostCentresJSON :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'CostCentresJSON
  = GHC.Types.TyCon
      14898309595742757340##
      1701943173654928528##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'CostCentresJSON1
      0#
      GHC.RTS.Flags.$tc'CostCentresAll1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcCCFlags2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.RTS.Flags.$tcCCFlags2 = "CCFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcCCFlags1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tcCCFlags1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tcCCFlags2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcCCFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tcCCFlags
  = GHC.Types.TyCon
      1712213186479039283##
      2219924391185601312##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tcCCFlags1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep62_rcV7F :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep62_rcV7F
  = GHC.Types.KindRepTyConApp
      GHC.RTS.Flags.$tcCCFlags (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep63_rcV7G :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep63_rcV7G = GHC.Types.KindRepFun $krep1_rcV6G $krep62_rcV7F

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep64_rcV7H :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep64_rcV7H = GHC.Types.KindRepFun $krep1_rcV6G $krep63_rcV7G

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CCFlags1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.RTS.Flags.$tc'CCFlags1
  = GHC.Types.KindRepFun
      GHC.RTS.Flags.$tc'CostCentresAll1 $krep64_rcV7H

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CCFlags3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.RTS.Flags.$tc'CCFlags3 = "'CCFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CCFlags2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'CCFlags2
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'CCFlags3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'CCFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'CCFlags
  = GHC.Types.TyCon
      1463973452671583834##
      3241436776007668974##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'CCFlags2
      0#
      GHC.RTS.Flags.$tc'CCFlags1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcDoHeapProfile2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$tcDoHeapProfile2 = "DoHeapProfile"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcDoHeapProfile1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tcDoHeapProfile1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tcDoHeapProfile2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcDoHeapProfile :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tcDoHeapProfile
  = GHC.Types.TyCon
      7452162420331529362##
      2264204561499252260##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tcDoHeapProfile1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByCCS1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.RTS.Flags.$tc'HeapByCCS1
  = GHC.Types.KindRepTyConApp
      GHC.RTS.Flags.$tcDoHeapProfile (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'NoHeapProfiling2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$tc'NoHeapProfiling2 = "'NoHeapProfiling"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'NoHeapProfiling1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'NoHeapProfiling1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'NoHeapProfiling2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'NoHeapProfiling :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'NoHeapProfiling
  = GHC.Types.TyCon
      15256181505853116399##
      12572078876854188631##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'NoHeapProfiling1
      0#
      GHC.RTS.Flags.$tc'HeapByCCS1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByCCS3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tc'HeapByCCS3 = "'HeapByCCS"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByCCS2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'HeapByCCS2
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'HeapByCCS3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByCCS :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'HeapByCCS
  = GHC.Types.TyCon
      375182006286221967##
      1294461661035214646##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'HeapByCCS2
      0#
      GHC.RTS.Flags.$tc'HeapByCCS1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByMod2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tc'HeapByMod2 = "'HeapByMod"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByMod1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'HeapByMod1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'HeapByMod2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByMod :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'HeapByMod
  = GHC.Types.TyCon
      3073782159796995121##
      5048279594980811938##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'HeapByMod1
      0#
      GHC.RTS.Flags.$tc'HeapByCCS1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByDescr2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tc'HeapByDescr2 = "'HeapByDescr"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByDescr1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'HeapByDescr1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'HeapByDescr2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByDescr :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'HeapByDescr
  = GHC.Types.TyCon
      14294268926604566514##
      3131270777588004653##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'HeapByDescr1
      0#
      GHC.RTS.Flags.$tc'HeapByCCS1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByType2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tc'HeapByType2 = "'HeapByType"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByType1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'HeapByType1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'HeapByType2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByType :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'HeapByType
  = GHC.Types.TyCon
      8520880302045566888##
      14673716970937392818##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'HeapByType1
      0#
      GHC.RTS.Flags.$tc'HeapByCCS1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByRetainer2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$tc'HeapByRetainer2 = "'HeapByRetainer"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByRetainer1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'HeapByRetainer1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'HeapByRetainer2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByRetainer :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'HeapByRetainer
  = GHC.Types.TyCon
      61843641731792008##
      4241776275235002595##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'HeapByRetainer1
      0#
      GHC.RTS.Flags.$tc'HeapByCCS1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByLDV2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tc'HeapByLDV2 = "'HeapByLDV"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByLDV1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'HeapByLDV1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'HeapByLDV2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByLDV :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'HeapByLDV
  = GHC.Types.TyCon
      7831191687879172657##
      1806202913880638899##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'HeapByLDV1
      0#
      GHC.RTS.Flags.$tc'HeapByCCS1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByClosureType2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.RTS.Flags.$tc'HeapByClosureType2 = "'HeapByClosureType"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByClosureType1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'HeapByClosureType1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'HeapByClosureType2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'HeapByClosureType :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'HeapByClosureType
  = GHC.Types.TyCon
      6110411975351435084##
      11148202771200845961##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'HeapByClosureType1
      0#
      GHC.RTS.Flags.$tc'HeapByCCS1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcProfFlags2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tcProfFlags2 = "ProfFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcProfFlags1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tcProfFlags1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tcProfFlags2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcProfFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tcProfFlags
  = GHC.Types.TyCon
      18303143489504836683##
      5771588416076717584##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tcProfFlags1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep65_rcV7I :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep65_rcV7I
  = GHC.Types.KindRepTyConApp
      GHC.RTS.Flags.$tcProfFlags (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep66_rcV7J :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep66_rcV7J = GHC.Types.KindRepFun $krep10_rcV6P $krep65_rcV7I

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep67_rcV7K :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep67_rcV7K = GHC.Types.KindRepFun $krep10_rcV6P $krep66_rcV7J

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep68_rcV7L :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep68_rcV7L = GHC.Types.KindRepFun $krep10_rcV6P $krep67_rcV7K

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep69_rcV7M :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep69_rcV7M = GHC.Types.KindRepFun $krep10_rcV6P $krep68_rcV7L

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep70_rcV7N :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep70_rcV7N = GHC.Types.KindRepFun $krep10_rcV6P $krep69_rcV7M

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep71_rcV7O :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep71_rcV7O = GHC.Types.KindRepFun $krep10_rcV6P $krep70_rcV7N

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep72_rcV7P :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep72_rcV7P = GHC.Types.KindRepFun $krep10_rcV6P $krep71_rcV7O

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep73_rcV7Q :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep73_rcV7Q = GHC.Types.KindRepFun $krep2_rcV6H $krep72_rcV7P

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep74_rcV7R :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep74_rcV7R = GHC.Types.KindRepFun $krep2_rcV6H $krep73_rcV7Q

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep75_rcV7S :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep75_rcV7S = GHC.Types.KindRepFun $krep5_rcV6K $krep74_rcV7R

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep76_rcV7T :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep76_rcV7T = GHC.Types.KindRepFun $krep5_rcV6K $krep75_rcV7S

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep77_rcV7U :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep77_rcV7U = GHC.Types.KindRepFun $krep2_rcV6H $krep76_rcV7T

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep78_rcV7V :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep78_rcV7V = GHC.Types.KindRepFun $krep3_rcV6I $krep77_rcV7U

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'ProfFlags1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.RTS.Flags.$tc'ProfFlags1
  = GHC.Types.KindRepFun GHC.RTS.Flags.$tc'HeapByCCS1 $krep78_rcV7V

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'ProfFlags3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tc'ProfFlags3 = "'ProfFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'ProfFlags2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'ProfFlags2
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'ProfFlags3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'ProfFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'ProfFlags
  = GHC.Types.TyCon
      9752289794957121031##
      14994683249272336230##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'ProfFlags2
      0#
      GHC.RTS.Flags.$tc'ProfFlags1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcDoTrace2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.RTS.Flags.$tcDoTrace2 = "DoTrace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcDoTrace1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tcDoTrace1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tcDoTrace2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcDoTrace :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tcDoTrace
  = GHC.Types.TyCon
      8168148363895152846##
      15356139801098904848##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tcDoTrace1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'TraceEventLog1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.RTS.Flags.$tc'TraceEventLog1
  = GHC.Types.KindRepTyConApp
      GHC.RTS.Flags.$tcDoTrace (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'TraceNone2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tc'TraceNone2 = "'TraceNone"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'TraceNone1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'TraceNone1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'TraceNone2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'TraceNone :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'TraceNone
  = GHC.Types.TyCon
      14634634304079691876##
      15533180491606473078##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'TraceNone1
      0#
      GHC.RTS.Flags.$tc'TraceEventLog1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'TraceEventLog3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.RTS.Flags.$tc'TraceEventLog3 = "'TraceEventLog"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'TraceEventLog2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'TraceEventLog2
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'TraceEventLog3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'TraceEventLog :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'TraceEventLog
  = GHC.Types.TyCon
      7440420927604344223##
      10976987085514046969##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'TraceEventLog2
      0#
      GHC.RTS.Flags.$tc'TraceEventLog1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'TraceStderr2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tc'TraceStderr2 = "'TraceStderr"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'TraceStderr1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'TraceStderr1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'TraceStderr2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'TraceStderr :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'TraceStderr
  = GHC.Types.TyCon
      8388789781026742095##
      13828162497742776102##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'TraceStderr1
      0#
      GHC.RTS.Flags.$tc'TraceEventLog1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcTraceFlags2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tcTraceFlags2 = "TraceFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcTraceFlags1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tcTraceFlags1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tcTraceFlags2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcTraceFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tcTraceFlags
  = GHC.Types.TyCon
      10588031724247337177##
      11094204731105652221##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tcTraceFlags1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep79_rcV7W :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep79_rcV7W
  = GHC.Types.KindRepTyConApp
      GHC.RTS.Flags.$tcTraceFlags (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep80_rcV7X :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep80_rcV7X = GHC.Types.KindRepFun $krep5_rcV6K $krep79_rcV7W

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep81_rcV7Y :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep81_rcV7Y = GHC.Types.KindRepFun $krep5_rcV6K $krep80_rcV7X

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep82_rcV7Z :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep82_rcV7Z = GHC.Types.KindRepFun $krep5_rcV6K $krep81_rcV7Y

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep83_rcV80 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep83_rcV80 = GHC.Types.KindRepFun $krep5_rcV6K $krep82_rcV7Z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep84_rcV81 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep84_rcV81 = GHC.Types.KindRepFun $krep5_rcV6K $krep83_rcV80

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep85_rcV82 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep85_rcV82 = GHC.Types.KindRepFun $krep5_rcV6K $krep84_rcV81

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'TraceFlags1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.RTS.Flags.$tc'TraceFlags1
  = GHC.Types.KindRepFun
      GHC.RTS.Flags.$tc'TraceEventLog1 $krep85_rcV82

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'TraceFlags3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tc'TraceFlags3 = "'TraceFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'TraceFlags2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'TraceFlags2
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'TraceFlags3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'TraceFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'TraceFlags
  = GHC.Types.TyCon
      10426638099741820496##
      9827927718155532703##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'TraceFlags2
      0#
      GHC.RTS.Flags.$tc'TraceFlags1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcTickyFlags2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tcTickyFlags2 = "TickyFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcTickyFlags1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tcTickyFlags1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tcTickyFlags2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcTickyFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tcTickyFlags
  = GHC.Types.TyCon
      3140770608719878061##
      4402696908558552646##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tcTickyFlags1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep86_rcV83 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep86_rcV83
  = GHC.Types.KindRepTyConApp
      GHC.RTS.Flags.$tcTickyFlags (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep87_rcV84 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep87_rcV84 = GHC.Types.KindRepFun $krep10_rcV6P $krep86_rcV83

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'TickyFlags1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.RTS.Flags.$tc'TickyFlags1
  = GHC.Types.KindRepFun $krep5_rcV6K $krep87_rcV84

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'TickyFlags3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tc'TickyFlags3 = "'TickyFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'TickyFlags2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'TickyFlags2
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'TickyFlags3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'TickyFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'TickyFlags
  = GHC.Types.TyCon
      793201039098423274##
      12626117550845714720##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'TickyFlags2
      0#
      GHC.RTS.Flags.$tc'TickyFlags1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcParFlags2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.RTS.Flags.$tcParFlags2 = "ParFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcParFlags1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tcParFlags1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tcParFlags2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcParFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tcParFlags
  = GHC.Types.TyCon
      17485272812108883877##
      6760473700794560465##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tcParFlags1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep88_rcV85 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep88_rcV85
  = GHC.Types.KindRepTyConApp
      GHC.RTS.Flags.$tcParFlags (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep89_rcV86 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep89_rcV86 = GHC.Types.KindRepFun $krep5_rcV6K $krep88_rcV85

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep90_rcV87 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep90_rcV87 = GHC.Types.KindRepFun $krep6_rcV6L $krep89_rcV86

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep91_rcV88 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep91_rcV88 = GHC.Types.KindRepFun $krep6_rcV6L $krep90_rcV87

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep92_rcV89 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep92_rcV89 = GHC.Types.KindRepFun $krep6_rcV6L $krep91_rcV88

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep93_rcV8a :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep93_rcV8a = GHC.Types.KindRepFun $krep5_rcV6K $krep92_rcV89

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep94_rcV8b :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep94_rcV8b = GHC.Types.KindRepFun $krep6_rcV6L $krep93_rcV8a

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep95_rcV8c :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep95_rcV8c = GHC.Types.KindRepFun $krep5_rcV6K $krep94_rcV8b

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep96_rcV8d :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep96_rcV8d = GHC.Types.KindRepFun $krep6_rcV6L $krep95_rcV8c

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep97_rcV8e :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep97_rcV8e = GHC.Types.KindRepFun $krep5_rcV6K $krep96_rcV8d

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'ParFlags1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.RTS.Flags.$tc'ParFlags1
  = GHC.Types.KindRepFun $krep6_rcV6L $krep97_rcV8e

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'ParFlags3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tc'ParFlags3 = "'ParFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'ParFlags2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'ParFlags2
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'ParFlags3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'ParFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'ParFlags
  = GHC.Types.TyCon
      18026295039373871109##
      526055960347961992##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'ParFlags2
      0#
      GHC.RTS.Flags.$tc'ParFlags1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcRTSFlags2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.RTS.Flags.$tcRTSFlags2 = "RTSFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcRTSFlags1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tcRTSFlags1
  = GHC.Types.TrNameS GHC.RTS.Flags.$tcRTSFlags2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tcRTSFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tcRTSFlags
  = GHC.Types.TyCon
      4919046205018020996##
      18187576420379731741##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tcRTSFlags1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep98_rcV8f :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep98_rcV8f
  = GHC.Types.KindRepTyConApp
      GHC.RTS.Flags.$tcRTSFlags (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep99_rcV8g :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep99_rcV8g = GHC.Types.KindRepFun $krep88_rcV85 $krep98_rcV8f

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep100_rcV8h :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep100_rcV8h = GHC.Types.KindRepFun $krep86_rcV83 $krep99_rcV8g

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep101_rcV8i :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep101_rcV8i = GHC.Types.KindRepFun $krep79_rcV7W $krep100_rcV8h

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep102_rcV8j :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep102_rcV8j = GHC.Types.KindRepFun $krep65_rcV7I $krep101_rcV8i

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep103_rcV8k :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep103_rcV8k = GHC.Types.KindRepFun $krep62_rcV7F $krep102_rcV8j

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep104_rcV8l :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep104_rcV8l = GHC.Types.KindRepFun $krep47_rcV7q $krep103_rcV8k

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep105_rcV8m :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep105_rcV8m = GHC.Types.KindRepFun $krep40_rcV7j $krep104_rcV8l

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep106_rcV8n :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep106_rcV8n = GHC.Types.KindRepFun $krep38_rcV7h $krep105_rcV8m

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'RTSFlags1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.RTS.Flags.$tc'RTSFlags1
  = GHC.Types.KindRepFun $krep11_rcV6Q $krep106_rcV8n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'RTSFlags3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.$tc'RTSFlags3 = "'RTSFlags"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'RTSFlags2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.$tc'RTSFlags2
  = GHC.Types.TrNameS GHC.RTS.Flags.$tc'RTSFlags3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$tc'RTSFlags :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.RTS.Flags.$tc'RTSFlags
  = GHC.Types.TyCon
      541346542500161105##
      7434587216372587438##
      GHC.RTS.Flags.$trModule
      GHC.RTS.Flags.$tc'RTSFlags2
      0#
      GHC.RTS.Flags.$tc'RTSFlags1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl96_rcV8o :: GiveGCStats
[GblId, Str=x]
lvl96_rcV8o = GHC.RTS.Flags.$wlvl3 5#

-- RHS size: {terms: 13, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumGiveGCStats_$csucc
  :: GiveGCStats -> GiveGCStats
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_icPMr [Occ=Once!] :: GiveGCStats) ->
                 case x_icPMr of {
                   NoGCStats -> GHC.RTS.Flags.CollectGCStats;
                   CollectGCStats -> GHC.RTS.Flags.OneLineGCStats;
                   OneLineGCStats -> GHC.RTS.Flags.SummaryGCStats;
                   SummaryGCStats -> GHC.RTS.Flags.VerboseGCStats;
                   VerboseGCStats ->
                     GHC.RTS.Flags.$fEnumGiveGCStats6 (GHC.Types.I# 5#)
                 }}]
GHC.RTS.Flags.$fEnumGiveGCStats_$csucc
  = \ (x_icPMr :: GiveGCStats) ->
      case x_icPMr of {
        NoGCStats -> GHC.RTS.Flags.CollectGCStats;
        CollectGCStats -> GHC.RTS.Flags.OneLineGCStats;
        OneLineGCStats -> GHC.RTS.Flags.SummaryGCStats;
        SummaryGCStats -> GHC.RTS.Flags.VerboseGCStats;
        VerboseGCStats -> lvl96_rcV8o
      }

Rec {
-- RHS size: {terms: 26, types: 5, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumGiveGCStats_go4 [Occ=LoopBreaker]
  :: Int# -> [GiveGCStats]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumGiveGCStats_go4
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ GiveGCStats
        (case x_i819P of ds_XcPNN {
           __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
           0# -> GHC.RTS.Flags.NoGCStats;
           1# -> GHC.RTS.Flags.CollectGCStats;
           2# -> GHC.RTS.Flags.OneLineGCStats;
           3# -> GHC.RTS.Flags.SummaryGCStats;
           4# -> GHC.RTS.Flags.VerboseGCStats
         })
        (case x_i819P of wild_XkO {
           __DEFAULT -> GHC.RTS.Flags.$fEnumGiveGCStats_go4 (+# wild_XkO 1#);
           0# -> GHC.Types.[] @ GiveGCStats
         })
end Rec }

Rec {
-- RHS size: {terms: 26, types: 5, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumGiveGCStats_go3 [Occ=LoopBreaker]
  :: Int# -> [GiveGCStats]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumGiveGCStats_go3
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ GiveGCStats
        (case x_i819P of ds_XcPNN {
           __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
           0# -> GHC.RTS.Flags.NoGCStats;
           1# -> GHC.RTS.Flags.CollectGCStats;
           2# -> GHC.RTS.Flags.OneLineGCStats;
           3# -> GHC.RTS.Flags.SummaryGCStats;
           4# -> GHC.RTS.Flags.VerboseGCStats
         })
        (case x_i819P of wild_XkO {
           __DEFAULT -> GHC.RTS.Flags.$fEnumGiveGCStats_go3 (+# wild_XkO 1#);
           1# -> GHC.Types.[] @ GiveGCStats
         })
end Rec }

Rec {
-- RHS size: {terms: 26, types: 5, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumGiveGCStats_go2 [Occ=LoopBreaker]
  :: Int# -> [GiveGCStats]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumGiveGCStats_go2
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ GiveGCStats
        (case x_i819P of ds_XcPNN {
           __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
           0# -> GHC.RTS.Flags.NoGCStats;
           1# -> GHC.RTS.Flags.CollectGCStats;
           2# -> GHC.RTS.Flags.OneLineGCStats;
           3# -> GHC.RTS.Flags.SummaryGCStats;
           4# -> GHC.RTS.Flags.VerboseGCStats
         })
        (case x_i819P of wild_XkO {
           __DEFAULT -> GHC.RTS.Flags.$fEnumGiveGCStats_go2 (+# wild_XkO 1#);
           2# -> GHC.Types.[] @ GiveGCStats
         })
end Rec }

Rec {
-- RHS size: {terms: 26, types: 5, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumGiveGCStats_go1 [Occ=LoopBreaker]
  :: Int# -> [GiveGCStats]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumGiveGCStats_go1
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ GiveGCStats
        (case x_i819P of ds_XcPNN {
           __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
           0# -> GHC.RTS.Flags.NoGCStats;
           1# -> GHC.RTS.Flags.CollectGCStats;
           2# -> GHC.RTS.Flags.OneLineGCStats;
           3# -> GHC.RTS.Flags.SummaryGCStats;
           4# -> GHC.RTS.Flags.VerboseGCStats
         })
        (case x_i819P of wild_XkO {
           __DEFAULT -> GHC.RTS.Flags.$fEnumGiveGCStats_go1 (+# wild_XkO 1#);
           3# -> GHC.Types.[] @ GiveGCStats
         })
end Rec }

Rec {
-- RHS size: {terms: 26, types: 5, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumGiveGCStats_go [Occ=LoopBreaker]
  :: Int# -> [GiveGCStats]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumGiveGCStats_go
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ GiveGCStats
        (case x_i819P of ds_XcPNN {
           __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
           0# -> GHC.RTS.Flags.NoGCStats;
           1# -> GHC.RTS.Flags.CollectGCStats;
           2# -> GHC.RTS.Flags.OneLineGCStats;
           3# -> GHC.RTS.Flags.SummaryGCStats;
           4# -> GHC.RTS.Flags.VerboseGCStats
         })
        (case x_i819P of wild_XkO {
           __DEFAULT -> GHC.RTS.Flags.$fEnumGiveGCStats_go (+# wild_XkO 1#);
           4# -> GHC.Types.[] @ GiveGCStats
         })
end Rec }

-- RHS size: {terms: 73, types: 18, coercions: 0, joins: 1/1}
GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo
  :: GiveGCStats -> GiveGCStats -> [GiveGCStats]
[GblId,
 Arity=2,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [76 224] 325 0}]
GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo
  = \ (x_i814s :: GiveGCStats) (y_i814t :: GiveGCStats) ->
      join {
        $j_scQTw [Dmd=<C(S),1*C1(U)>] :: Int# -> [GiveGCStats]
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_scQTw (x1_i814z [OS=OneShot] :: Int#)
          = case y_i814t of {
              NoGCStats ->
                case ># x1_i814z 0# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumGiveGCStats_go4 x1_i814z;
                  1# -> GHC.Types.[] @ GiveGCStats
                };
              CollectGCStats ->
                case ># x1_i814z 1# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumGiveGCStats_go3 x1_i814z;
                  1# -> GHC.Types.[] @ GiveGCStats
                };
              OneLineGCStats ->
                case ># x1_i814z 2# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumGiveGCStats_go2 x1_i814z;
                  1# -> GHC.Types.[] @ GiveGCStats
                };
              SummaryGCStats ->
                case ># x1_i814z 3# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumGiveGCStats_go1 x1_i814z;
                  1# -> GHC.Types.[] @ GiveGCStats
                };
              VerboseGCStats ->
                case ># x1_i814z 4# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumGiveGCStats_go x1_i814z;
                  1# -> GHC.Types.[] @ GiveGCStats
                }
            } } in
      case x_i814s of {
        NoGCStats -> jump $j_scQTw 0#;
        CollectGCStats -> jump $j_scQTw 1#;
        OneLineGCStats -> jump $j_scQTw 2#;
        SummaryGCStats -> jump $j_scQTw 3#;
        VerboseGCStats -> jump $j_scQTw 4#
      }

-- RHS size: {terms: 53, types: 18, coercions: 0, joins: 1/1}
GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen
  :: GiveGCStats -> GiveGCStats -> [GiveGCStats]
[GblId,
 Arity=2,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [76 300] 420 0}]
GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen
  = \ (x_icPN1 :: GiveGCStats) (y_icPN2 :: GiveGCStats) ->
      join {
        $j_scQTz [Dmd=<C(S),1*C1(U)>] :: Int# -> [GiveGCStats]
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_scQTz (x1_icPN8 [OS=OneShot] :: Int#)
          = case y_icPN2 of {
              NoGCStats ->
                map
                  @ Int
                  @ GiveGCStats
                  GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 0#);
              CollectGCStats ->
                map
                  @ Int
                  @ GiveGCStats
                  GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 1#);
              OneLineGCStats ->
                map
                  @ Int
                  @ GiveGCStats
                  GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 2#);
              SummaryGCStats ->
                map
                  @ Int
                  @ GiveGCStats
                  GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 3#);
              VerboseGCStats ->
                map
                  @ Int
                  @ GiveGCStats
                  GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 4#)
            } } in
      case x_icPN1 of {
        NoGCStats -> jump $j_scQTz 0#;
        CollectGCStats -> jump $j_scQTz 1#;
        OneLineGCStats -> jump $j_scQTz 2#;
        SummaryGCStats -> jump $j_scQTz 3#;
        VerboseGCStats -> jump $j_scQTz 4#
      }

Rec {
-- RHS size: {terms: 26, types: 5, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumGiveGCStats_go5 [Occ=LoopBreaker]
  :: Int# -> [GiveGCStats]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumGiveGCStats_go5
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ GiveGCStats
        (case x_i819P of ds_XcPNN {
           __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
           0# -> GHC.RTS.Flags.NoGCStats;
           1# -> GHC.RTS.Flags.CollectGCStats;
           2# -> GHC.RTS.Flags.OneLineGCStats;
           3# -> GHC.RTS.Flags.SummaryGCStats;
           4# -> GHC.RTS.Flags.VerboseGCStats
         })
        (case x_i819P of wild_XkK {
           __DEFAULT -> GHC.RTS.Flags.$fEnumGiveGCStats_go5 (+# wild_XkK 1#);
           9223372036854775807# -> GHC.Types.[] @ GiveGCStats
         })
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumGiveGCStats5 :: [GiveGCStats]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumGiveGCStats5
  = GHC.RTS.Flags.$fEnumGiveGCStats_go5 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumGiveGCStats4 :: [GiveGCStats]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumGiveGCStats4
  = GHC.RTS.Flags.$fEnumGiveGCStats_go5 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumGiveGCStats3 :: [GiveGCStats]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumGiveGCStats3
  = GHC.RTS.Flags.$fEnumGiveGCStats_go5 2#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumGiveGCStats2 :: [GiveGCStats]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumGiveGCStats2
  = GHC.RTS.Flags.$fEnumGiveGCStats_go5 3#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumGiveGCStats1 :: [GiveGCStats]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumGiveGCStats1
  = GHC.RTS.Flags.$fEnumGiveGCStats_go5 4#

-- RHS size: {terms: 13, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom
  :: GiveGCStats -> [GiveGCStats]
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60] 50 0}]
GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom
  = \ (x_icPMR :: GiveGCStats) ->
      case x_icPMR of {
        NoGCStats -> GHC.RTS.Flags.$fEnumGiveGCStats5;
        CollectGCStats -> GHC.RTS.Flags.$fEnumGiveGCStats4;
        OneLineGCStats -> GHC.RTS.Flags.$fEnumGiveGCStats3;
        SummaryGCStats -> GHC.RTS.Flags.$fEnumGiveGCStats2;
        VerboseGCStats -> GHC.RTS.Flags.$fEnumGiveGCStats1
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl97_rcV8p :: GiveGCStats
[GblId, Str=x]
lvl97_rcV8p = GHC.RTS.Flags.$wlvl3 -1#

-- RHS size: {terms: 13, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumGiveGCStats_$cpred
  :: GiveGCStats -> GiveGCStats
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_icPMA [Occ=Once!] :: GiveGCStats) ->
                 case x_icPMA of {
                   NoGCStats -> GHC.RTS.Flags.$fEnumGiveGCStats6 (GHC.Types.I# -1#);
                   CollectGCStats -> GHC.RTS.Flags.NoGCStats;
                   OneLineGCStats -> GHC.RTS.Flags.CollectGCStats;
                   SummaryGCStats -> GHC.RTS.Flags.OneLineGCStats;
                   VerboseGCStats -> GHC.RTS.Flags.SummaryGCStats
                 }}]
GHC.RTS.Flags.$fEnumGiveGCStats_$cpred
  = \ (x_icPMA :: GiveGCStats) ->
      case x_icPMA of {
        NoGCStats -> lvl97_rcV8p;
        CollectGCStats -> GHC.RTS.Flags.NoGCStats;
        OneLineGCStats -> GHC.RTS.Flags.CollectGCStats;
        SummaryGCStats -> GHC.RTS.Flags.OneLineGCStats;
        VerboseGCStats -> GHC.RTS.Flags.SummaryGCStats
      }

-- RHS size: {terms: 1,088, types: 219, coercions: 0, joins: 2/32}
GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo
  :: GiveGCStats -> GiveGCStats -> GiveGCStats -> [GiveGCStats]
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,1*U>, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo
  = \ (x1_i814J :: GiveGCStats)
      (x2_i814K :: GiveGCStats)
      (y_i814L :: GiveGCStats) ->
      join {
        $j_scQTI [Dmd=<C(S),1*C1(U)>] :: Int# -> [GiveGCStats]
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_scQTI (x4_i814R [OS=OneShot] :: Int#)
          = join {
              $j1_scQTG [Dmd=<C(S),1*C1(U)>] :: Int# -> [GiveGCStats]
              [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
              $j1_scQTG (x5_i814V [OS=OneShot] :: Int#)
                = case y_i814L of {
                    NoGCStats ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 0# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ GiveGCStats
                                (case x4_i814R of ds_XcPNN {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                   0# -> GHC.RTS.Flags.NoGCStats;
                                   1# -> GHC.RTS.Flags.CollectGCStats;
                                   2# -> GHC.RTS.Flags.OneLineGCStats;
                                   3# -> GHC.RTS.Flags.SummaryGCStats;
                                   4# -> GHC.RTS.Flags.VerboseGCStats
                                 })
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 0# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [GiveGCStats]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81tP of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81tP of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (GHC.Types.[] @ GiveGCStats)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 0# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ GiveGCStats
                                    (case x4_i814R of ds_XcPNN {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                       0# -> GHC.RTS.Flags.NoGCStats;
                                       1# -> GHC.RTS.Flags.CollectGCStats;
                                       2# -> GHC.RTS.Flags.OneLineGCStats;
                                       3# -> GHC.RTS.Flags.SummaryGCStats;
                                       4# -> GHC.RTS.Flags.VerboseGCStats
                                     })
                                    (GHC.Types.[] @ GiveGCStats);
                                1# -> GHC.Types.[] @ GiveGCStats
                              }
                          };
                        1# ->
                          case <# 0# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ GiveGCStats
                                (case x4_i814R of ds_XcPNN {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                   0# -> GHC.RTS.Flags.NoGCStats;
                                   1# -> GHC.RTS.Flags.CollectGCStats;
                                   2# -> GHC.RTS.Flags.OneLineGCStats;
                                   3# -> GHC.RTS.Flags.SummaryGCStats;
                                   4# -> GHC.RTS.Flags.VerboseGCStats
                                 })
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 0# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [GiveGCStats]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81u5 of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81u5 of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (GHC.Types.[] @ GiveGCStats)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 0# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ GiveGCStats
                                    (case x4_i814R of ds_XcPNN {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                       0# -> GHC.RTS.Flags.NoGCStats;
                                       1# -> GHC.RTS.Flags.CollectGCStats;
                                       2# -> GHC.RTS.Flags.OneLineGCStats;
                                       3# -> GHC.RTS.Flags.SummaryGCStats;
                                       4# -> GHC.RTS.Flags.VerboseGCStats
                                     })
                                    (GHC.Types.[] @ GiveGCStats);
                                1# -> GHC.Types.[] @ GiveGCStats
                              }
                          }
                      };
                    CollectGCStats ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 1# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ GiveGCStats
                                (case x4_i814R of ds_XcPNN {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                   0# -> GHC.RTS.Flags.NoGCStats;
                                   1# -> GHC.RTS.Flags.CollectGCStats;
                                   2# -> GHC.RTS.Flags.OneLineGCStats;
                                   3# -> GHC.RTS.Flags.SummaryGCStats;
                                   4# -> GHC.RTS.Flags.VerboseGCStats
                                 })
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 1# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [GiveGCStats]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81tP of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81tP of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (GHC.Types.[] @ GiveGCStats)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 1# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ GiveGCStats
                                    (case x4_i814R of ds_XcPNN {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                       0# -> GHC.RTS.Flags.NoGCStats;
                                       1# -> GHC.RTS.Flags.CollectGCStats;
                                       2# -> GHC.RTS.Flags.OneLineGCStats;
                                       3# -> GHC.RTS.Flags.SummaryGCStats;
                                       4# -> GHC.RTS.Flags.VerboseGCStats
                                     })
                                    (GHC.Types.[] @ GiveGCStats);
                                1# -> GHC.Types.[] @ GiveGCStats
                              }
                          };
                        1# ->
                          case <# 1# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ GiveGCStats
                                (case x4_i814R of ds_XcPNN {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                   0# -> GHC.RTS.Flags.NoGCStats;
                                   1# -> GHC.RTS.Flags.CollectGCStats;
                                   2# -> GHC.RTS.Flags.OneLineGCStats;
                                   3# -> GHC.RTS.Flags.SummaryGCStats;
                                   4# -> GHC.RTS.Flags.VerboseGCStats
                                 })
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 1# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [GiveGCStats]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81u5 of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81u5 of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (GHC.Types.[] @ GiveGCStats)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 1# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ GiveGCStats
                                    (case x4_i814R of ds_XcPNN {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                       0# -> GHC.RTS.Flags.NoGCStats;
                                       1# -> GHC.RTS.Flags.CollectGCStats;
                                       2# -> GHC.RTS.Flags.OneLineGCStats;
                                       3# -> GHC.RTS.Flags.SummaryGCStats;
                                       4# -> GHC.RTS.Flags.VerboseGCStats
                                     })
                                    (GHC.Types.[] @ GiveGCStats);
                                1# -> GHC.Types.[] @ GiveGCStats
                              }
                          }
                      };
                    OneLineGCStats ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 2# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ GiveGCStats
                                (case x4_i814R of ds_XcPNN {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                   0# -> GHC.RTS.Flags.NoGCStats;
                                   1# -> GHC.RTS.Flags.CollectGCStats;
                                   2# -> GHC.RTS.Flags.OneLineGCStats;
                                   3# -> GHC.RTS.Flags.SummaryGCStats;
                                   4# -> GHC.RTS.Flags.VerboseGCStats
                                 })
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 2# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [GiveGCStats]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81tP of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81tP of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (GHC.Types.[] @ GiveGCStats)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 2# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ GiveGCStats
                                    (case x4_i814R of ds_XcPNN {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                       0# -> GHC.RTS.Flags.NoGCStats;
                                       1# -> GHC.RTS.Flags.CollectGCStats;
                                       2# -> GHC.RTS.Flags.OneLineGCStats;
                                       3# -> GHC.RTS.Flags.SummaryGCStats;
                                       4# -> GHC.RTS.Flags.VerboseGCStats
                                     })
                                    (GHC.Types.[] @ GiveGCStats);
                                1# -> GHC.Types.[] @ GiveGCStats
                              }
                          };
                        1# ->
                          case <# 2# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ GiveGCStats
                                (case x4_i814R of ds_XcPNN {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                   0# -> GHC.RTS.Flags.NoGCStats;
                                   1# -> GHC.RTS.Flags.CollectGCStats;
                                   2# -> GHC.RTS.Flags.OneLineGCStats;
                                   3# -> GHC.RTS.Flags.SummaryGCStats;
                                   4# -> GHC.RTS.Flags.VerboseGCStats
                                 })
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 2# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [GiveGCStats]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81u5 of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81u5 of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (GHC.Types.[] @ GiveGCStats)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 2# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ GiveGCStats
                                    (case x4_i814R of ds_XcPNN {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                       0# -> GHC.RTS.Flags.NoGCStats;
                                       1# -> GHC.RTS.Flags.CollectGCStats;
                                       2# -> GHC.RTS.Flags.OneLineGCStats;
                                       3# -> GHC.RTS.Flags.SummaryGCStats;
                                       4# -> GHC.RTS.Flags.VerboseGCStats
                                     })
                                    (GHC.Types.[] @ GiveGCStats);
                                1# -> GHC.Types.[] @ GiveGCStats
                              }
                          }
                      };
                    SummaryGCStats ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 3# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ GiveGCStats
                                (case x4_i814R of ds_XcPNN {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                   0# -> GHC.RTS.Flags.NoGCStats;
                                   1# -> GHC.RTS.Flags.CollectGCStats;
                                   2# -> GHC.RTS.Flags.OneLineGCStats;
                                   3# -> GHC.RTS.Flags.SummaryGCStats;
                                   4# -> GHC.RTS.Flags.VerboseGCStats
                                 })
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 3# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [GiveGCStats]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81tP of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81tP of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (GHC.Types.[] @ GiveGCStats)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 3# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ GiveGCStats
                                    (case x4_i814R of ds_XcPNN {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                       0# -> GHC.RTS.Flags.NoGCStats;
                                       1# -> GHC.RTS.Flags.CollectGCStats;
                                       2# -> GHC.RTS.Flags.OneLineGCStats;
                                       3# -> GHC.RTS.Flags.SummaryGCStats;
                                       4# -> GHC.RTS.Flags.VerboseGCStats
                                     })
                                    (GHC.Types.[] @ GiveGCStats);
                                1# -> GHC.Types.[] @ GiveGCStats
                              }
                          };
                        1# ->
                          case <# 3# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ GiveGCStats
                                (case x4_i814R of ds_XcPNN {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                   0# -> GHC.RTS.Flags.NoGCStats;
                                   1# -> GHC.RTS.Flags.CollectGCStats;
                                   2# -> GHC.RTS.Flags.OneLineGCStats;
                                   3# -> GHC.RTS.Flags.SummaryGCStats;
                                   4# -> GHC.RTS.Flags.VerboseGCStats
                                 })
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 3# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [GiveGCStats]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81u5 of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81u5 of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (GHC.Types.[] @ GiveGCStats)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 3# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ GiveGCStats
                                    (case x4_i814R of ds_XcPNN {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                       0# -> GHC.RTS.Flags.NoGCStats;
                                       1# -> GHC.RTS.Flags.CollectGCStats;
                                       2# -> GHC.RTS.Flags.OneLineGCStats;
                                       3# -> GHC.RTS.Flags.SummaryGCStats;
                                       4# -> GHC.RTS.Flags.VerboseGCStats
                                     })
                                    (GHC.Types.[] @ GiveGCStats);
                                1# -> GHC.Types.[] @ GiveGCStats
                              }
                          }
                      };
                    VerboseGCStats ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 4# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ GiveGCStats
                                (case x4_i814R of ds_XcPNN {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                   0# -> GHC.RTS.Flags.NoGCStats;
                                   1# -> GHC.RTS.Flags.CollectGCStats;
                                   2# -> GHC.RTS.Flags.OneLineGCStats;
                                   3# -> GHC.RTS.Flags.SummaryGCStats;
                                   4# -> GHC.RTS.Flags.VerboseGCStats
                                 })
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 4# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [GiveGCStats]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81tP of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81tP of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (GHC.Types.[] @ GiveGCStats)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 4# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ GiveGCStats
                                    (case x4_i814R of ds_XcPNN {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                       0# -> GHC.RTS.Flags.NoGCStats;
                                       1# -> GHC.RTS.Flags.CollectGCStats;
                                       2# -> GHC.RTS.Flags.OneLineGCStats;
                                       3# -> GHC.RTS.Flags.SummaryGCStats;
                                       4# -> GHC.RTS.Flags.VerboseGCStats
                                     })
                                    (GHC.Types.[] @ GiveGCStats);
                                1# -> GHC.Types.[] @ GiveGCStats
                              }
                          };
                        1# ->
                          case <# 4# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ GiveGCStats
                                (case x4_i814R of ds_XcPNN {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                   0# -> GHC.RTS.Flags.NoGCStats;
                                   1# -> GHC.RTS.Flags.CollectGCStats;
                                   2# -> GHC.RTS.Flags.OneLineGCStats;
                                   3# -> GHC.RTS.Flags.SummaryGCStats;
                                   4# -> GHC.RTS.Flags.VerboseGCStats
                                 })
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 4# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [GiveGCStats]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81u5 of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ GiveGCStats
                                               (case x_i81u5 of ds_XcPNN {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                                  0# -> GHC.RTS.Flags.NoGCStats;
                                                  1# -> GHC.RTS.Flags.CollectGCStats;
                                                  2# -> GHC.RTS.Flags.OneLineGCStats;
                                                  3# -> GHC.RTS.Flags.SummaryGCStats;
                                                  4# -> GHC.RTS.Flags.VerboseGCStats
                                                })
                                               (GHC.Types.[] @ GiveGCStats)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 4# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ GiveGCStats
                                    (case x4_i814R of ds_XcPNN {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
                                       0# -> GHC.RTS.Flags.NoGCStats;
                                       1# -> GHC.RTS.Flags.CollectGCStats;
                                       2# -> GHC.RTS.Flags.OneLineGCStats;
                                       3# -> GHC.RTS.Flags.SummaryGCStats;
                                       4# -> GHC.RTS.Flags.VerboseGCStats
                                     })
                                    (GHC.Types.[] @ GiveGCStats);
                                1# -> GHC.Types.[] @ GiveGCStats
                              }
                          }
                      }
                  } } in
            case x2_i814K of {
              NoGCStats -> jump $j1_scQTG 0#;
              CollectGCStats -> jump $j1_scQTG 1#;
              OneLineGCStats -> jump $j1_scQTG 2#;
              SummaryGCStats -> jump $j1_scQTG 3#;
              VerboseGCStats -> jump $j1_scQTG 4#
            } } in
      case x1_i814J of {
        NoGCStats -> jump $j_scQTI 0#;
        CollectGCStats -> jump $j_scQTI 1#;
        OneLineGCStats -> jump $j_scQTI 2#;
        SummaryGCStats -> jump $j_scQTI 3#;
        VerboseGCStats -> jump $j_scQTI 4#
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumGiveGCStats [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum GiveGCStats
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: GiveGCStats
                       GHC.RTS.Flags.$fEnumGiveGCStats_$csucc
                       GHC.RTS.Flags.$fEnumGiveGCStats_$cpred
                       GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum
                       GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum
                       GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom
                       GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen
                       GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo
                       GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo]
GHC.RTS.Flags.$fEnumGiveGCStats
  = GHC.Enum.C:Enum
      @ GiveGCStats
      GHC.RTS.Flags.$fEnumGiveGCStats_$csucc
      GHC.RTS.Flags.$fEnumGiveGCStats_$cpred
      GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum
      GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum
      GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom
      GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen
      GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo
      GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile13 :: DoHeapProfile
[GblId, Str=x]
GHC.RTS.Flags.$fEnumDoHeapProfile13 = GHC.RTS.Flags.$wlvl1 3#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile15 :: DoHeapProfile
[GblId, Str=x]
GHC.RTS.Flags.$fEnumDoHeapProfile15 = GHC.RTS.Flags.$wlvl1 9#

-- RHS size: {terms: 19, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc
  :: DoHeapProfile -> DoHeapProfile
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [90] 80 60}]
GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc
  = \ (x_icPMr :: DoHeapProfile) ->
      case x_icPMr of {
        NoHeapProfiling -> GHC.RTS.Flags.HeapByCCS;
        HeapByCCS -> GHC.RTS.Flags.HeapByMod;
        HeapByMod -> GHC.RTS.Flags.$fEnumDoHeapProfile13;
        HeapByDescr -> GHC.RTS.Flags.HeapByType;
        HeapByType -> GHC.RTS.Flags.HeapByRetainer;
        HeapByRetainer -> GHC.RTS.Flags.HeapByLDV;
        HeapByLDV -> GHC.RTS.Flags.HeapByClosureType;
        HeapByClosureType -> GHC.RTS.Flags.$fEnumDoHeapProfile15
      }

Rec {
-- RHS size: {terms: 13, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile_go7 [Occ=LoopBreaker]
  :: Int# -> [DoHeapProfile]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoHeapProfile_go7
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ DoHeapProfile
        (GHC.RTS.Flags.$w$ctoEnum1 x_i819P)
        (case x_i819P of wild_XkV {
           __DEFAULT ->
             GHC.RTS.Flags.$fEnumDoHeapProfile_go7 (+# wild_XkV 1#);
           0# -> GHC.Types.[] @ DoHeapProfile
         })
end Rec }

Rec {
-- RHS size: {terms: 13, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile_go6 [Occ=LoopBreaker]
  :: Int# -> [DoHeapProfile]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoHeapProfile_go6
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ DoHeapProfile
        (GHC.RTS.Flags.$w$ctoEnum1 x_i819P)
        (case x_i819P of wild_XkV {
           __DEFAULT ->
             GHC.RTS.Flags.$fEnumDoHeapProfile_go6 (+# wild_XkV 1#);
           1# -> GHC.Types.[] @ DoHeapProfile
         })
end Rec }

Rec {
-- RHS size: {terms: 13, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile_go5 [Occ=LoopBreaker]
  :: Int# -> [DoHeapProfile]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoHeapProfile_go5
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ DoHeapProfile
        (GHC.RTS.Flags.$w$ctoEnum1 x_i819P)
        (case x_i819P of wild_XkV {
           __DEFAULT ->
             GHC.RTS.Flags.$fEnumDoHeapProfile_go5 (+# wild_XkV 1#);
           2# -> GHC.Types.[] @ DoHeapProfile
         })
end Rec }

Rec {
-- RHS size: {terms: 13, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile_go4 [Occ=LoopBreaker]
  :: Int# -> [DoHeapProfile]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoHeapProfile_go4
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ DoHeapProfile
        (GHC.RTS.Flags.$w$ctoEnum1 x_i819P)
        (case x_i819P of wild_XkV {
           __DEFAULT ->
             GHC.RTS.Flags.$fEnumDoHeapProfile_go4 (+# wild_XkV 1#);
           4# -> GHC.Types.[] @ DoHeapProfile
         })
end Rec }

Rec {
-- RHS size: {terms: 13, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile_go3 [Occ=LoopBreaker]
  :: Int# -> [DoHeapProfile]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoHeapProfile_go3
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ DoHeapProfile
        (GHC.RTS.Flags.$w$ctoEnum1 x_i819P)
        (case x_i819P of wild_XkV {
           __DEFAULT ->
             GHC.RTS.Flags.$fEnumDoHeapProfile_go3 (+# wild_XkV 1#);
           5# -> GHC.Types.[] @ DoHeapProfile
         })
end Rec }

Rec {
-- RHS size: {terms: 13, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile_go2 [Occ=LoopBreaker]
  :: Int# -> [DoHeapProfile]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoHeapProfile_go2
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ DoHeapProfile
        (GHC.RTS.Flags.$w$ctoEnum1 x_i819P)
        (case x_i819P of wild_XkV {
           __DEFAULT ->
             GHC.RTS.Flags.$fEnumDoHeapProfile_go2 (+# wild_XkV 1#);
           6# -> GHC.Types.[] @ DoHeapProfile
         })
end Rec }

Rec {
-- RHS size: {terms: 13, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile_go1 [Occ=LoopBreaker]
  :: Int# -> [DoHeapProfile]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoHeapProfile_go1
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ DoHeapProfile
        (GHC.RTS.Flags.$w$ctoEnum1 x_i819P)
        (case x_i819P of wild_XkV {
           __DEFAULT ->
             GHC.RTS.Flags.$fEnumDoHeapProfile_go1 (+# wild_XkV 1#);
           7# -> GHC.Types.[] @ DoHeapProfile
         })
end Rec }

Rec {
-- RHS size: {terms: 13, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile_go [Occ=LoopBreaker]
  :: Int# -> [DoHeapProfile]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoHeapProfile_go
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ DoHeapProfile
        (GHC.RTS.Flags.$w$ctoEnum1 x_i819P)
        (case x_i819P of wild_XkV {
           __DEFAULT -> GHC.RTS.Flags.$fEnumDoHeapProfile_go (+# wild_XkV 1#);
           8# -> GHC.Types.[] @ DoHeapProfile
         })
end Rec }

-- RHS size: {terms: 112, types: 24, coercions: 0, joins: 1/1}
GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo
  :: DoHeapProfile -> DoHeapProfile -> [DoHeapProfile]
[GblId,
 Arity=2,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [118 377] 520 0}]
GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo
  = \ (x_i814s :: DoHeapProfile) (y_i814t :: DoHeapProfile) ->
      join {
        $j_scQTM [Dmd=<C(S),1*C1(U)>] :: Int# -> [DoHeapProfile]
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_scQTM (x1_i814z [OS=OneShot] :: Int#)
          = case y_i814t of {
              NoHeapProfiling ->
                case ># x1_i814z 0# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumDoHeapProfile_go7 x1_i814z;
                  1# -> GHC.Types.[] @ DoHeapProfile
                };
              HeapByCCS ->
                case ># x1_i814z 1# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumDoHeapProfile_go6 x1_i814z;
                  1# -> GHC.Types.[] @ DoHeapProfile
                };
              HeapByMod ->
                case ># x1_i814z 2# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumDoHeapProfile_go5 x1_i814z;
                  1# -> GHC.Types.[] @ DoHeapProfile
                };
              HeapByDescr ->
                case ># x1_i814z 4# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumDoHeapProfile_go4 x1_i814z;
                  1# -> GHC.Types.[] @ DoHeapProfile
                };
              HeapByType ->
                case ># x1_i814z 5# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumDoHeapProfile_go3 x1_i814z;
                  1# -> GHC.Types.[] @ DoHeapProfile
                };
              HeapByRetainer ->
                case ># x1_i814z 6# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumDoHeapProfile_go2 x1_i814z;
                  1# -> GHC.Types.[] @ DoHeapProfile
                };
              HeapByLDV ->
                case ># x1_i814z 7# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumDoHeapProfile_go1 x1_i814z;
                  1# -> GHC.Types.[] @ DoHeapProfile
                };
              HeapByClosureType ->
                case ># x1_i814z 8# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumDoHeapProfile_go x1_i814z;
                  1# -> GHC.Types.[] @ DoHeapProfile
                }
            } } in
      case x_i814s of {
        NoHeapProfiling -> jump $j_scQTM 0#;
        HeapByCCS -> jump $j_scQTM 1#;
        HeapByMod -> jump $j_scQTM 2#;
        HeapByDescr -> jump $j_scQTM 4#;
        HeapByType -> jump $j_scQTM 5#;
        HeapByRetainer -> jump $j_scQTM 6#;
        HeapByLDV -> jump $j_scQTM 7#;
        HeapByClosureType -> jump $j_scQTM 8#
      }

-- RHS size: {terms: 80, types: 24, coercions: 0, joins: 1/1}
GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen
  :: DoHeapProfile -> DoHeapProfile -> [DoHeapProfile]
[GblId,
 Arity=2,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [118 510] 672 0}]
GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen
  = \ (x_icPN1 :: DoHeapProfile) (y_icPN2 :: DoHeapProfile) ->
      join {
        $j_scQTP [Dmd=<C(S),1*C1(U)>] :: Int# -> [DoHeapProfile]
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_scQTP (x1_icPN8 [OS=OneShot] :: Int#)
          = case y_icPN2 of {
              NoHeapProfiling ->
                map
                  @ Int
                  @ DoHeapProfile
                  GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 0#);
              HeapByCCS ->
                map
                  @ Int
                  @ DoHeapProfile
                  GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 1#);
              HeapByMod ->
                map
                  @ Int
                  @ DoHeapProfile
                  GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 2#);
              HeapByDescr ->
                map
                  @ Int
                  @ DoHeapProfile
                  GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 4#);
              HeapByType ->
                map
                  @ Int
                  @ DoHeapProfile
                  GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 5#);
              HeapByRetainer ->
                map
                  @ Int
                  @ DoHeapProfile
                  GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 6#);
              HeapByLDV ->
                map
                  @ Int
                  @ DoHeapProfile
                  GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 7#);
              HeapByClosureType ->
                map
                  @ Int
                  @ DoHeapProfile
                  GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 8#)
            } } in
      case x_icPN1 of {
        NoHeapProfiling -> jump $j_scQTP 0#;
        HeapByCCS -> jump $j_scQTP 1#;
        HeapByMod -> jump $j_scQTP 2#;
        HeapByDescr -> jump $j_scQTP 4#;
        HeapByType -> jump $j_scQTP 5#;
        HeapByRetainer -> jump $j_scQTP 6#;
        HeapByLDV -> jump $j_scQTP 7#;
        HeapByClosureType -> jump $j_scQTP 8#
      }

Rec {
-- RHS size: {terms: 13, types: 4, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile_go8 [Occ=LoopBreaker]
  :: Int# -> [DoHeapProfile]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoHeapProfile_go8
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ DoHeapProfile
        (GHC.RTS.Flags.$w$ctoEnum1 x_i819P)
        (case x_i819P of wild_XkR {
           __DEFAULT ->
             GHC.RTS.Flags.$fEnumDoHeapProfile_go8 (+# wild_XkR 1#);
           9223372036854775807# -> GHC.Types.[] @ DoHeapProfile
         })
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile8 :: [DoHeapProfile]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumDoHeapProfile8
  = GHC.RTS.Flags.$fEnumDoHeapProfile_go8 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile7 :: [DoHeapProfile]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumDoHeapProfile7
  = GHC.RTS.Flags.$fEnumDoHeapProfile_go8 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile6 :: [DoHeapProfile]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumDoHeapProfile6
  = GHC.RTS.Flags.$fEnumDoHeapProfile_go8 2#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile5 :: [DoHeapProfile]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumDoHeapProfile5
  = GHC.RTS.Flags.$fEnumDoHeapProfile_go8 4#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile4 :: [DoHeapProfile]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumDoHeapProfile4
  = GHC.RTS.Flags.$fEnumDoHeapProfile_go8 5#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile3 :: [DoHeapProfile]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumDoHeapProfile3
  = GHC.RTS.Flags.$fEnumDoHeapProfile_go8 6#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile2 :: [DoHeapProfile]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumDoHeapProfile2
  = GHC.RTS.Flags.$fEnumDoHeapProfile_go8 7#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile1 :: [DoHeapProfile]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumDoHeapProfile1
  = GHC.RTS.Flags.$fEnumDoHeapProfile_go8 8#

-- RHS size: {terms: 19, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom
  :: DoHeapProfile -> [DoHeapProfile]
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [90] 80 0}]
GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom
  = \ (x_icPMR :: DoHeapProfile) ->
      case x_icPMR of {
        NoHeapProfiling -> GHC.RTS.Flags.$fEnumDoHeapProfile8;
        HeapByCCS -> GHC.RTS.Flags.$fEnumDoHeapProfile7;
        HeapByMod -> GHC.RTS.Flags.$fEnumDoHeapProfile6;
        HeapByDescr -> GHC.RTS.Flags.$fEnumDoHeapProfile5;
        HeapByType -> GHC.RTS.Flags.$fEnumDoHeapProfile4;
        HeapByRetainer -> GHC.RTS.Flags.$fEnumDoHeapProfile3;
        HeapByLDV -> GHC.RTS.Flags.$fEnumDoHeapProfile2;
        HeapByClosureType -> GHC.RTS.Flags.$fEnumDoHeapProfile1
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile14 :: DoHeapProfile
[GblId, Str=x]
GHC.RTS.Flags.$fEnumDoHeapProfile14 = GHC.RTS.Flags.$wlvl1 -1#

-- RHS size: {terms: 19, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred
  :: DoHeapProfile -> DoHeapProfile
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [90] 80 60}]
GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred
  = \ (x_icPMA :: DoHeapProfile) ->
      case x_icPMA of {
        NoHeapProfiling -> GHC.RTS.Flags.$fEnumDoHeapProfile14;
        HeapByCCS -> GHC.RTS.Flags.NoHeapProfiling;
        HeapByMod -> GHC.RTS.Flags.HeapByCCS;
        HeapByDescr -> GHC.RTS.Flags.$fEnumDoHeapProfile13;
        HeapByType -> GHC.RTS.Flags.HeapByDescr;
        HeapByRetainer -> GHC.RTS.Flags.HeapByType;
        HeapByLDV -> GHC.RTS.Flags.HeapByRetainer;
        HeapByClosureType -> GHC.RTS.Flags.HeapByLDV
      }

-- RHS size: {terms: 901, types: 278, coercions: 0, joins: 2/50}
GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo
  :: DoHeapProfile
     -> DoHeapProfile -> DoHeapProfile -> [DoHeapProfile]
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,1*U>, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo
  = \ (x1_i814J :: DoHeapProfile)
      (x2_i814K :: DoHeapProfile)
      (y_i814L :: DoHeapProfile) ->
      join {
        $j_scQTW [Dmd=<C(S),1*C1(U)>] :: Int# -> [DoHeapProfile]
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_scQTW (x4_i814R [OS=OneShot] :: Int#)
          = join {
              $j1_scQTU [Dmd=<C(S),1*C1(U)>] :: Int# -> [DoHeapProfile]
              [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
              $j1_scQTU (x5_i814V [OS=OneShot] :: Int#)
                = case y_i814L of {
                    NoHeapProfiling ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 0# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoHeapProfile
                                (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 0# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [DoHeapProfile]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81tP)
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81tP)
                                               (GHC.Types.[] @ DoHeapProfile)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 0# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoHeapProfile
                                    (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                    (GHC.Types.[] @ DoHeapProfile);
                                1# -> GHC.Types.[] @ DoHeapProfile
                              }
                          };
                        1# ->
                          case <# 0# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoHeapProfile
                                (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 0# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [DoHeapProfile]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81u5)
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81u5)
                                               (GHC.Types.[] @ DoHeapProfile)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 0# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoHeapProfile
                                    (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                    (GHC.Types.[] @ DoHeapProfile);
                                1# -> GHC.Types.[] @ DoHeapProfile
                              }
                          }
                      };
                    HeapByCCS ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 1# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoHeapProfile
                                (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 1# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [DoHeapProfile]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81tP)
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81tP)
                                               (GHC.Types.[] @ DoHeapProfile)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 1# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoHeapProfile
                                    (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                    (GHC.Types.[] @ DoHeapProfile);
                                1# -> GHC.Types.[] @ DoHeapProfile
                              }
                          };
                        1# ->
                          case <# 1# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoHeapProfile
                                (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 1# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [DoHeapProfile]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81u5)
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81u5)
                                               (GHC.Types.[] @ DoHeapProfile)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 1# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoHeapProfile
                                    (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                    (GHC.Types.[] @ DoHeapProfile);
                                1# -> GHC.Types.[] @ DoHeapProfile
                              }
                          }
                      };
                    HeapByMod ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 2# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoHeapProfile
                                (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 2# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [DoHeapProfile]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81tP)
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81tP)
                                               (GHC.Types.[] @ DoHeapProfile)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 2# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoHeapProfile
                                    (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                    (GHC.Types.[] @ DoHeapProfile);
                                1# -> GHC.Types.[] @ DoHeapProfile
                              }
                          };
                        1# ->
                          case <# 2# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoHeapProfile
                                (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 2# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [DoHeapProfile]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81u5)
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81u5)
                                               (GHC.Types.[] @ DoHeapProfile)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 2# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoHeapProfile
                                    (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                    (GHC.Types.[] @ DoHeapProfile);
                                1# -> GHC.Types.[] @ DoHeapProfile
                              }
                          }
                      };
                    HeapByDescr ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 4# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoHeapProfile
                                (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 4# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [DoHeapProfile]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81tP)
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81tP)
                                               (GHC.Types.[] @ DoHeapProfile)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 4# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoHeapProfile
                                    (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                    (GHC.Types.[] @ DoHeapProfile);
                                1# -> GHC.Types.[] @ DoHeapProfile
                              }
                          };
                        1# ->
                          case <# 4# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoHeapProfile
                                (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 4# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [DoHeapProfile]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81u5)
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81u5)
                                               (GHC.Types.[] @ DoHeapProfile)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 4# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoHeapProfile
                                    (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                    (GHC.Types.[] @ DoHeapProfile);
                                1# -> GHC.Types.[] @ DoHeapProfile
                              }
                          }
                      };
                    HeapByType ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 5# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoHeapProfile
                                (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 5# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [DoHeapProfile]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81tP)
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81tP)
                                               (GHC.Types.[] @ DoHeapProfile)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 5# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoHeapProfile
                                    (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                    (GHC.Types.[] @ DoHeapProfile);
                                1# -> GHC.Types.[] @ DoHeapProfile
                              }
                          };
                        1# ->
                          case <# 5# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoHeapProfile
                                (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 5# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [DoHeapProfile]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81u5)
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81u5)
                                               (GHC.Types.[] @ DoHeapProfile)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 5# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoHeapProfile
                                    (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                    (GHC.Types.[] @ DoHeapProfile);
                                1# -> GHC.Types.[] @ DoHeapProfile
                              }
                          }
                      };
                    HeapByRetainer ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 6# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoHeapProfile
                                (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 6# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [DoHeapProfile]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81tP)
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81tP)
                                               (GHC.Types.[] @ DoHeapProfile)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 6# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoHeapProfile
                                    (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                    (GHC.Types.[] @ DoHeapProfile);
                                1# -> GHC.Types.[] @ DoHeapProfile
                              }
                          };
                        1# ->
                          case <# 6# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoHeapProfile
                                (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 6# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [DoHeapProfile]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81u5)
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81u5)
                                               (GHC.Types.[] @ DoHeapProfile)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 6# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoHeapProfile
                                    (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                    (GHC.Types.[] @ DoHeapProfile);
                                1# -> GHC.Types.[] @ DoHeapProfile
                              }
                          }
                      };
                    HeapByLDV ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 7# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoHeapProfile
                                (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 7# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [DoHeapProfile]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81tP)
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81tP)
                                               (GHC.Types.[] @ DoHeapProfile)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 7# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoHeapProfile
                                    (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                    (GHC.Types.[] @ DoHeapProfile);
                                1# -> GHC.Types.[] @ DoHeapProfile
                              }
                          };
                        1# ->
                          case <# 7# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoHeapProfile
                                (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 7# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [DoHeapProfile]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81u5)
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81u5)
                                               (GHC.Types.[] @ DoHeapProfile)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 7# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoHeapProfile
                                    (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                    (GHC.Types.[] @ DoHeapProfile);
                                1# -> GHC.Types.[] @ DoHeapProfile
                              }
                          }
                      };
                    HeapByClosureType ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 8# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoHeapProfile
                                (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 8# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [DoHeapProfile]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81tP)
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81tP)
                                               (GHC.Types.[] @ DoHeapProfile)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 8# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoHeapProfile
                                    (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                    (GHC.Types.[] @ DoHeapProfile);
                                1# -> GHC.Types.[] @ DoHeapProfile
                              }
                          };
                        1# ->
                          case <# 8# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoHeapProfile
                                (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 8# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [DoHeapProfile]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81u5)
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ DoHeapProfile
                                               (GHC.RTS.Flags.$w$ctoEnum1 x_i81u5)
                                               (GHC.Types.[] @ DoHeapProfile)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 8# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoHeapProfile
                                    (GHC.RTS.Flags.$w$ctoEnum1 x4_i814R)
                                    (GHC.Types.[] @ DoHeapProfile);
                                1# -> GHC.Types.[] @ DoHeapProfile
                              }
                          }
                      }
                  } } in
            case x2_i814K of {
              NoHeapProfiling -> jump $j1_scQTU 0#;
              HeapByCCS -> jump $j1_scQTU 1#;
              HeapByMod -> jump $j1_scQTU 2#;
              HeapByDescr -> jump $j1_scQTU 4#;
              HeapByType -> jump $j1_scQTU 5#;
              HeapByRetainer -> jump $j1_scQTU 6#;
              HeapByLDV -> jump $j1_scQTU 7#;
              HeapByClosureType -> jump $j1_scQTU 8#
            } } in
      case x1_i814J of {
        NoHeapProfiling -> jump $j_scQTW 0#;
        HeapByCCS -> jump $j_scQTW 1#;
        HeapByMod -> jump $j_scQTW 2#;
        HeapByDescr -> jump $j_scQTW 4#;
        HeapByType -> jump $j_scQTW 5#;
        HeapByRetainer -> jump $j_scQTW 6#;
        HeapByLDV -> jump $j_scQTW 7#;
        HeapByClosureType -> jump $j_scQTW 8#
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoHeapProfile [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum DoHeapProfile
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: DoHeapProfile
                       GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc
                       GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred
                       GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum
                       GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum
                       GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom
                       GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen
                       GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo
                       GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo]
GHC.RTS.Flags.$fEnumDoHeapProfile
  = GHC.Enum.C:Enum
      @ DoHeapProfile
      GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc
      GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred
      GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum
      GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum
      GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom
      GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen
      GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo
      GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl98_rcV8q :: DoCostCentres
[GblId, Str=x]
lvl98_rcV8q = GHC.RTS.Flags.$wlvl 5#

-- RHS size: {terms: 13, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres_$csucc
  :: DoCostCentres -> DoCostCentres
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_icPMr [Occ=Once!] :: DoCostCentres) ->
                 case x_icPMr of {
                   CostCentresNone -> GHC.RTS.Flags.CostCentresSummary;
                   CostCentresSummary -> GHC.RTS.Flags.CostCentresVerbose;
                   CostCentresVerbose -> GHC.RTS.Flags.CostCentresAll;
                   CostCentresAll -> GHC.RTS.Flags.CostCentresJSON;
                   CostCentresJSON ->
                     GHC.RTS.Flags.$fEnumDoCostCentres11 (GHC.Types.I# 5#)
                 }}]
GHC.RTS.Flags.$fEnumDoCostCentres_$csucc
  = \ (x_icPMr :: DoCostCentres) ->
      case x_icPMr of {
        CostCentresNone -> GHC.RTS.Flags.CostCentresSummary;
        CostCentresSummary -> GHC.RTS.Flags.CostCentresVerbose;
        CostCentresVerbose -> GHC.RTS.Flags.CostCentresAll;
        CostCentresAll -> GHC.RTS.Flags.CostCentresJSON;
        CostCentresJSON -> lvl98_rcV8q
      }

Rec {
-- RHS size: {terms: 26, types: 5, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres_go4 [Occ=LoopBreaker]
  :: Int# -> [DoCostCentres]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoCostCentres_go4
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ DoCostCentres
        (case x_i819P of ds_XcPND {
           __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
           0# -> GHC.RTS.Flags.CostCentresNone;
           1# -> GHC.RTS.Flags.CostCentresSummary;
           2# -> GHC.RTS.Flags.CostCentresVerbose;
           3# -> GHC.RTS.Flags.CostCentresAll;
           4# -> GHC.RTS.Flags.CostCentresJSON
         })
        (case x_i819P of wild_Xl2 {
           __DEFAULT ->
             GHC.RTS.Flags.$fEnumDoCostCentres_go4 (+# wild_Xl2 1#);
           0# -> GHC.Types.[] @ DoCostCentres
         })
end Rec }

Rec {
-- RHS size: {terms: 26, types: 5, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres_go3 [Occ=LoopBreaker]
  :: Int# -> [DoCostCentres]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoCostCentres_go3
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ DoCostCentres
        (case x_i819P of ds_XcPND {
           __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
           0# -> GHC.RTS.Flags.CostCentresNone;
           1# -> GHC.RTS.Flags.CostCentresSummary;
           2# -> GHC.RTS.Flags.CostCentresVerbose;
           3# -> GHC.RTS.Flags.CostCentresAll;
           4# -> GHC.RTS.Flags.CostCentresJSON
         })
        (case x_i819P of wild_Xl2 {
           __DEFAULT ->
             GHC.RTS.Flags.$fEnumDoCostCentres_go3 (+# wild_Xl2 1#);
           1# -> GHC.Types.[] @ DoCostCentres
         })
end Rec }

Rec {
-- RHS size: {terms: 26, types: 5, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres_go2 [Occ=LoopBreaker]
  :: Int# -> [DoCostCentres]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoCostCentres_go2
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ DoCostCentres
        (case x_i819P of ds_XcPND {
           __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
           0# -> GHC.RTS.Flags.CostCentresNone;
           1# -> GHC.RTS.Flags.CostCentresSummary;
           2# -> GHC.RTS.Flags.CostCentresVerbose;
           3# -> GHC.RTS.Flags.CostCentresAll;
           4# -> GHC.RTS.Flags.CostCentresJSON
         })
        (case x_i819P of wild_Xl2 {
           __DEFAULT ->
             GHC.RTS.Flags.$fEnumDoCostCentres_go2 (+# wild_Xl2 1#);
           2# -> GHC.Types.[] @ DoCostCentres
         })
end Rec }

Rec {
-- RHS size: {terms: 26, types: 5, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres_go1 [Occ=LoopBreaker]
  :: Int# -> [DoCostCentres]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoCostCentres_go1
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ DoCostCentres
        (case x_i819P of ds_XcPND {
           __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
           0# -> GHC.RTS.Flags.CostCentresNone;
           1# -> GHC.RTS.Flags.CostCentresSummary;
           2# -> GHC.RTS.Flags.CostCentresVerbose;
           3# -> GHC.RTS.Flags.CostCentresAll;
           4# -> GHC.RTS.Flags.CostCentresJSON
         })
        (case x_i819P of wild_Xl2 {
           __DEFAULT ->
             GHC.RTS.Flags.$fEnumDoCostCentres_go1 (+# wild_Xl2 1#);
           3# -> GHC.Types.[] @ DoCostCentres
         })
end Rec }

Rec {
-- RHS size: {terms: 26, types: 5, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres_go [Occ=LoopBreaker]
  :: Int# -> [DoCostCentres]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoCostCentres_go
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ DoCostCentres
        (case x_i819P of ds_XcPND {
           __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
           0# -> GHC.RTS.Flags.CostCentresNone;
           1# -> GHC.RTS.Flags.CostCentresSummary;
           2# -> GHC.RTS.Flags.CostCentresVerbose;
           3# -> GHC.RTS.Flags.CostCentresAll;
           4# -> GHC.RTS.Flags.CostCentresJSON
         })
        (case x_i819P of wild_Xl2 {
           __DEFAULT -> GHC.RTS.Flags.$fEnumDoCostCentres_go (+# wild_Xl2 1#);
           4# -> GHC.Types.[] @ DoCostCentres
         })
end Rec }

-- RHS size: {terms: 73, types: 18, coercions: 0, joins: 1/1}
GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo
  :: DoCostCentres -> DoCostCentres -> [DoCostCentres]
[GblId,
 Arity=2,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [76 224] 325 0}]
GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo
  = \ (x_i814s :: DoCostCentres) (y_i814t :: DoCostCentres) ->
      join {
        $j_scQU2 [Dmd=<C(S),1*C1(U)>] :: Int# -> [DoCostCentres]
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_scQU2 (x1_i814z [OS=OneShot] :: Int#)
          = case y_i814t of {
              CostCentresNone ->
                case ># x1_i814z 0# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumDoCostCentres_go4 x1_i814z;
                  1# -> GHC.Types.[] @ DoCostCentres
                };
              CostCentresSummary ->
                case ># x1_i814z 1# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumDoCostCentres_go3 x1_i814z;
                  1# -> GHC.Types.[] @ DoCostCentres
                };
              CostCentresVerbose ->
                case ># x1_i814z 2# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumDoCostCentres_go2 x1_i814z;
                  1# -> GHC.Types.[] @ DoCostCentres
                };
              CostCentresAll ->
                case ># x1_i814z 3# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumDoCostCentres_go1 x1_i814z;
                  1# -> GHC.Types.[] @ DoCostCentres
                };
              CostCentresJSON ->
                case ># x1_i814z 4# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumDoCostCentres_go x1_i814z;
                  1# -> GHC.Types.[] @ DoCostCentres
                }
            } } in
      case x_i814s of {
        CostCentresNone -> jump $j_scQU2 0#;
        CostCentresSummary -> jump $j_scQU2 1#;
        CostCentresVerbose -> jump $j_scQU2 2#;
        CostCentresAll -> jump $j_scQU2 3#;
        CostCentresJSON -> jump $j_scQU2 4#
      }

-- RHS size: {terms: 53, types: 18, coercions: 0, joins: 1/1}
GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen
  :: DoCostCentres -> DoCostCentres -> [DoCostCentres]
[GblId,
 Arity=2,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [76 300] 420 0}]
GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen
  = \ (x_icPN1 :: DoCostCentres) (y_icPN2 :: DoCostCentres) ->
      join {
        $j_scQU5 [Dmd=<C(S),1*C1(U)>] :: Int# -> [DoCostCentres]
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_scQU5 (x1_icPN8 [OS=OneShot] :: Int#)
          = case y_icPN2 of {
              CostCentresNone ->
                map
                  @ Int
                  @ DoCostCentres
                  GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 0#);
              CostCentresSummary ->
                map
                  @ Int
                  @ DoCostCentres
                  GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 1#);
              CostCentresVerbose ->
                map
                  @ Int
                  @ DoCostCentres
                  GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 2#);
              CostCentresAll ->
                map
                  @ Int
                  @ DoCostCentres
                  GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 3#);
              CostCentresJSON ->
                map
                  @ Int
                  @ DoCostCentres
                  GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 4#)
            } } in
      case x_icPN1 of {
        CostCentresNone -> jump $j_scQU5 0#;
        CostCentresSummary -> jump $j_scQU5 1#;
        CostCentresVerbose -> jump $j_scQU5 2#;
        CostCentresAll -> jump $j_scQU5 3#;
        CostCentresJSON -> jump $j_scQU5 4#
      }

Rec {
-- RHS size: {terms: 26, types: 5, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres_go5 [Occ=LoopBreaker]
  :: Int# -> [DoCostCentres]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoCostCentres_go5
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ DoCostCentres
        (case x_i819P of ds_XcPND {
           __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
           0# -> GHC.RTS.Flags.CostCentresNone;
           1# -> GHC.RTS.Flags.CostCentresSummary;
           2# -> GHC.RTS.Flags.CostCentresVerbose;
           3# -> GHC.RTS.Flags.CostCentresAll;
           4# -> GHC.RTS.Flags.CostCentresJSON
         })
        (case x_i819P of wild_XkY {
           __DEFAULT ->
             GHC.RTS.Flags.$fEnumDoCostCentres_go5 (+# wild_XkY 1#);
           9223372036854775807# -> GHC.Types.[] @ DoCostCentres
         })
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres5 :: [DoCostCentres]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumDoCostCentres5
  = GHC.RTS.Flags.$fEnumDoCostCentres_go5 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres4 :: [DoCostCentres]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumDoCostCentres4
  = GHC.RTS.Flags.$fEnumDoCostCentres_go5 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres3 :: [DoCostCentres]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumDoCostCentres3
  = GHC.RTS.Flags.$fEnumDoCostCentres_go5 2#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres2 :: [DoCostCentres]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumDoCostCentres2
  = GHC.RTS.Flags.$fEnumDoCostCentres_go5 3#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres1 :: [DoCostCentres]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumDoCostCentres1
  = GHC.RTS.Flags.$fEnumDoCostCentres_go5 4#

-- RHS size: {terms: 13, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom
  :: DoCostCentres -> [DoCostCentres]
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60] 50 0}]
GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom
  = \ (x_icPMR :: DoCostCentres) ->
      case x_icPMR of {
        CostCentresNone -> GHC.RTS.Flags.$fEnumDoCostCentres5;
        CostCentresSummary -> GHC.RTS.Flags.$fEnumDoCostCentres4;
        CostCentresVerbose -> GHC.RTS.Flags.$fEnumDoCostCentres3;
        CostCentresAll -> GHC.RTS.Flags.$fEnumDoCostCentres2;
        CostCentresJSON -> GHC.RTS.Flags.$fEnumDoCostCentres1
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl99_rcV8r :: DoCostCentres
[GblId, Str=x]
lvl99_rcV8r = GHC.RTS.Flags.$wlvl -1#

-- RHS size: {terms: 13, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres_$cpred
  :: DoCostCentres -> DoCostCentres
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_icPMA [Occ=Once!] :: DoCostCentres) ->
                 case x_icPMA of {
                   CostCentresNone ->
                     GHC.RTS.Flags.$fEnumDoCostCentres11 (GHC.Types.I# -1#);
                   CostCentresSummary -> GHC.RTS.Flags.CostCentresNone;
                   CostCentresVerbose -> GHC.RTS.Flags.CostCentresSummary;
                   CostCentresAll -> GHC.RTS.Flags.CostCentresVerbose;
                   CostCentresJSON -> GHC.RTS.Flags.CostCentresAll
                 }}]
GHC.RTS.Flags.$fEnumDoCostCentres_$cpred
  = \ (x_icPMA :: DoCostCentres) ->
      case x_icPMA of {
        CostCentresNone -> lvl99_rcV8r;
        CostCentresSummary -> GHC.RTS.Flags.CostCentresNone;
        CostCentresVerbose -> GHC.RTS.Flags.CostCentresSummary;
        CostCentresAll -> GHC.RTS.Flags.CostCentresVerbose;
        CostCentresJSON -> GHC.RTS.Flags.CostCentresAll
      }

-- RHS size: {terms: 1,088, types: 219, coercions: 0, joins: 2/32}
GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo
  :: DoCostCentres
     -> DoCostCentres -> DoCostCentres -> [DoCostCentres]
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,1*U>, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo
  = \ (x1_i814J :: DoCostCentres)
      (x2_i814K :: DoCostCentres)
      (y_i814L :: DoCostCentres) ->
      join {
        $j_scQUe [Dmd=<C(S),1*C1(U)>] :: Int# -> [DoCostCentres]
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_scQUe (x4_i814R [OS=OneShot] :: Int#)
          = join {
              $j1_scQUc [Dmd=<C(S),1*C1(U)>] :: Int# -> [DoCostCentres]
              [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
              $j1_scQUc (x5_i814V [OS=OneShot] :: Int#)
                = case y_i814L of {
                    CostCentresNone ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 0# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoCostCentres
                                (case x4_i814R of ds_XcPND {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                   0# -> GHC.RTS.Flags.CostCentresNone;
                                   1# -> GHC.RTS.Flags.CostCentresSummary;
                                   2# -> GHC.RTS.Flags.CostCentresVerbose;
                                   3# -> GHC.RTS.Flags.CostCentresAll;
                                   4# -> GHC.RTS.Flags.CostCentresJSON
                                 })
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 0# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [DoCostCentres]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81tP of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81tP of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (GHC.Types.[] @ DoCostCentres)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 0# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoCostCentres
                                    (case x4_i814R of ds_XcPND {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                       0# -> GHC.RTS.Flags.CostCentresNone;
                                       1# -> GHC.RTS.Flags.CostCentresSummary;
                                       2# -> GHC.RTS.Flags.CostCentresVerbose;
                                       3# -> GHC.RTS.Flags.CostCentresAll;
                                       4# -> GHC.RTS.Flags.CostCentresJSON
                                     })
                                    (GHC.Types.[] @ DoCostCentres);
                                1# -> GHC.Types.[] @ DoCostCentres
                              }
                          };
                        1# ->
                          case <# 0# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoCostCentres
                                (case x4_i814R of ds_XcPND {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                   0# -> GHC.RTS.Flags.CostCentresNone;
                                   1# -> GHC.RTS.Flags.CostCentresSummary;
                                   2# -> GHC.RTS.Flags.CostCentresVerbose;
                                   3# -> GHC.RTS.Flags.CostCentresAll;
                                   4# -> GHC.RTS.Flags.CostCentresJSON
                                 })
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 0# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [DoCostCentres]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81u5 of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81u5 of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (GHC.Types.[] @ DoCostCentres)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 0# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoCostCentres
                                    (case x4_i814R of ds_XcPND {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                       0# -> GHC.RTS.Flags.CostCentresNone;
                                       1# -> GHC.RTS.Flags.CostCentresSummary;
                                       2# -> GHC.RTS.Flags.CostCentresVerbose;
                                       3# -> GHC.RTS.Flags.CostCentresAll;
                                       4# -> GHC.RTS.Flags.CostCentresJSON
                                     })
                                    (GHC.Types.[] @ DoCostCentres);
                                1# -> GHC.Types.[] @ DoCostCentres
                              }
                          }
                      };
                    CostCentresSummary ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 1# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoCostCentres
                                (case x4_i814R of ds_XcPND {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                   0# -> GHC.RTS.Flags.CostCentresNone;
                                   1# -> GHC.RTS.Flags.CostCentresSummary;
                                   2# -> GHC.RTS.Flags.CostCentresVerbose;
                                   3# -> GHC.RTS.Flags.CostCentresAll;
                                   4# -> GHC.RTS.Flags.CostCentresJSON
                                 })
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 1# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [DoCostCentres]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81tP of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81tP of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (GHC.Types.[] @ DoCostCentres)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 1# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoCostCentres
                                    (case x4_i814R of ds_XcPND {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                       0# -> GHC.RTS.Flags.CostCentresNone;
                                       1# -> GHC.RTS.Flags.CostCentresSummary;
                                       2# -> GHC.RTS.Flags.CostCentresVerbose;
                                       3# -> GHC.RTS.Flags.CostCentresAll;
                                       4# -> GHC.RTS.Flags.CostCentresJSON
                                     })
                                    (GHC.Types.[] @ DoCostCentres);
                                1# -> GHC.Types.[] @ DoCostCentres
                              }
                          };
                        1# ->
                          case <# 1# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoCostCentres
                                (case x4_i814R of ds_XcPND {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                   0# -> GHC.RTS.Flags.CostCentresNone;
                                   1# -> GHC.RTS.Flags.CostCentresSummary;
                                   2# -> GHC.RTS.Flags.CostCentresVerbose;
                                   3# -> GHC.RTS.Flags.CostCentresAll;
                                   4# -> GHC.RTS.Flags.CostCentresJSON
                                 })
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 1# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [DoCostCentres]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81u5 of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81u5 of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (GHC.Types.[] @ DoCostCentres)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 1# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoCostCentres
                                    (case x4_i814R of ds_XcPND {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                       0# -> GHC.RTS.Flags.CostCentresNone;
                                       1# -> GHC.RTS.Flags.CostCentresSummary;
                                       2# -> GHC.RTS.Flags.CostCentresVerbose;
                                       3# -> GHC.RTS.Flags.CostCentresAll;
                                       4# -> GHC.RTS.Flags.CostCentresJSON
                                     })
                                    (GHC.Types.[] @ DoCostCentres);
                                1# -> GHC.Types.[] @ DoCostCentres
                              }
                          }
                      };
                    CostCentresVerbose ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 2# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoCostCentres
                                (case x4_i814R of ds_XcPND {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                   0# -> GHC.RTS.Flags.CostCentresNone;
                                   1# -> GHC.RTS.Flags.CostCentresSummary;
                                   2# -> GHC.RTS.Flags.CostCentresVerbose;
                                   3# -> GHC.RTS.Flags.CostCentresAll;
                                   4# -> GHC.RTS.Flags.CostCentresJSON
                                 })
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 2# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [DoCostCentres]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81tP of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81tP of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (GHC.Types.[] @ DoCostCentres)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 2# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoCostCentres
                                    (case x4_i814R of ds_XcPND {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                       0# -> GHC.RTS.Flags.CostCentresNone;
                                       1# -> GHC.RTS.Flags.CostCentresSummary;
                                       2# -> GHC.RTS.Flags.CostCentresVerbose;
                                       3# -> GHC.RTS.Flags.CostCentresAll;
                                       4# -> GHC.RTS.Flags.CostCentresJSON
                                     })
                                    (GHC.Types.[] @ DoCostCentres);
                                1# -> GHC.Types.[] @ DoCostCentres
                              }
                          };
                        1# ->
                          case <# 2# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoCostCentres
                                (case x4_i814R of ds_XcPND {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                   0# -> GHC.RTS.Flags.CostCentresNone;
                                   1# -> GHC.RTS.Flags.CostCentresSummary;
                                   2# -> GHC.RTS.Flags.CostCentresVerbose;
                                   3# -> GHC.RTS.Flags.CostCentresAll;
                                   4# -> GHC.RTS.Flags.CostCentresJSON
                                 })
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 2# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [DoCostCentres]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81u5 of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81u5 of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (GHC.Types.[] @ DoCostCentres)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 2# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoCostCentres
                                    (case x4_i814R of ds_XcPND {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                       0# -> GHC.RTS.Flags.CostCentresNone;
                                       1# -> GHC.RTS.Flags.CostCentresSummary;
                                       2# -> GHC.RTS.Flags.CostCentresVerbose;
                                       3# -> GHC.RTS.Flags.CostCentresAll;
                                       4# -> GHC.RTS.Flags.CostCentresJSON
                                     })
                                    (GHC.Types.[] @ DoCostCentres);
                                1# -> GHC.Types.[] @ DoCostCentres
                              }
                          }
                      };
                    CostCentresAll ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 3# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoCostCentres
                                (case x4_i814R of ds_XcPND {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                   0# -> GHC.RTS.Flags.CostCentresNone;
                                   1# -> GHC.RTS.Flags.CostCentresSummary;
                                   2# -> GHC.RTS.Flags.CostCentresVerbose;
                                   3# -> GHC.RTS.Flags.CostCentresAll;
                                   4# -> GHC.RTS.Flags.CostCentresJSON
                                 })
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 3# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [DoCostCentres]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81tP of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81tP of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (GHC.Types.[] @ DoCostCentres)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 3# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoCostCentres
                                    (case x4_i814R of ds_XcPND {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                       0# -> GHC.RTS.Flags.CostCentresNone;
                                       1# -> GHC.RTS.Flags.CostCentresSummary;
                                       2# -> GHC.RTS.Flags.CostCentresVerbose;
                                       3# -> GHC.RTS.Flags.CostCentresAll;
                                       4# -> GHC.RTS.Flags.CostCentresJSON
                                     })
                                    (GHC.Types.[] @ DoCostCentres);
                                1# -> GHC.Types.[] @ DoCostCentres
                              }
                          };
                        1# ->
                          case <# 3# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoCostCentres
                                (case x4_i814R of ds_XcPND {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                   0# -> GHC.RTS.Flags.CostCentresNone;
                                   1# -> GHC.RTS.Flags.CostCentresSummary;
                                   2# -> GHC.RTS.Flags.CostCentresVerbose;
                                   3# -> GHC.RTS.Flags.CostCentresAll;
                                   4# -> GHC.RTS.Flags.CostCentresJSON
                                 })
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 3# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [DoCostCentres]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81u5 of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81u5 of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (GHC.Types.[] @ DoCostCentres)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 3# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoCostCentres
                                    (case x4_i814R of ds_XcPND {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                       0# -> GHC.RTS.Flags.CostCentresNone;
                                       1# -> GHC.RTS.Flags.CostCentresSummary;
                                       2# -> GHC.RTS.Flags.CostCentresVerbose;
                                       3# -> GHC.RTS.Flags.CostCentresAll;
                                       4# -> GHC.RTS.Flags.CostCentresJSON
                                     })
                                    (GHC.Types.[] @ DoCostCentres);
                                1# -> GHC.Types.[] @ DoCostCentres
                              }
                          }
                      };
                    CostCentresJSON ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 4# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoCostCentres
                                (case x4_i814R of ds_XcPND {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                   0# -> GHC.RTS.Flags.CostCentresNone;
                                   1# -> GHC.RTS.Flags.CostCentresSummary;
                                   2# -> GHC.RTS.Flags.CostCentresVerbose;
                                   3# -> GHC.RTS.Flags.CostCentresAll;
                                   4# -> GHC.RTS.Flags.CostCentresJSON
                                 })
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 4# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [DoCostCentres]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81tP of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81tP of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (GHC.Types.[] @ DoCostCentres)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 4# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoCostCentres
                                    (case x4_i814R of ds_XcPND {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                       0# -> GHC.RTS.Flags.CostCentresNone;
                                       1# -> GHC.RTS.Flags.CostCentresSummary;
                                       2# -> GHC.RTS.Flags.CostCentresVerbose;
                                       3# -> GHC.RTS.Flags.CostCentresAll;
                                       4# -> GHC.RTS.Flags.CostCentresJSON
                                     })
                                    (GHC.Types.[] @ DoCostCentres);
                                1# -> GHC.Types.[] @ DoCostCentres
                              }
                          };
                        1# ->
                          case <# 4# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoCostCentres
                                (case x4_i814R of ds_XcPND {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                   0# -> GHC.RTS.Flags.CostCentresNone;
                                   1# -> GHC.RTS.Flags.CostCentresSummary;
                                   2# -> GHC.RTS.Flags.CostCentresVerbose;
                                   3# -> GHC.RTS.Flags.CostCentresAll;
                                   4# -> GHC.RTS.Flags.CostCentresJSON
                                 })
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 4# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [DoCostCentres]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81u5 of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ DoCostCentres
                                               (case x_i81u5 of ds_XcPND {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                                  0# -> GHC.RTS.Flags.CostCentresNone;
                                                  1# -> GHC.RTS.Flags.CostCentresSummary;
                                                  2# -> GHC.RTS.Flags.CostCentresVerbose;
                                                  3# -> GHC.RTS.Flags.CostCentresAll;
                                                  4# -> GHC.RTS.Flags.CostCentresJSON
                                                })
                                               (GHC.Types.[] @ DoCostCentres)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 4# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoCostCentres
                                    (case x4_i814R of ds_XcPND {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                                       0# -> GHC.RTS.Flags.CostCentresNone;
                                       1# -> GHC.RTS.Flags.CostCentresSummary;
                                       2# -> GHC.RTS.Flags.CostCentresVerbose;
                                       3# -> GHC.RTS.Flags.CostCentresAll;
                                       4# -> GHC.RTS.Flags.CostCentresJSON
                                     })
                                    (GHC.Types.[] @ DoCostCentres);
                                1# -> GHC.Types.[] @ DoCostCentres
                              }
                          }
                      }
                  } } in
            case x2_i814K of {
              CostCentresNone -> jump $j1_scQUc 0#;
              CostCentresSummary -> jump $j1_scQUc 1#;
              CostCentresVerbose -> jump $j1_scQUc 2#;
              CostCentresAll -> jump $j1_scQUc 3#;
              CostCentresJSON -> jump $j1_scQUc 4#
            } } in
      case x1_i814J of {
        CostCentresNone -> jump $j_scQUe 0#;
        CostCentresSummary -> jump $j_scQUe 1#;
        CostCentresVerbose -> jump $j_scQUe 2#;
        CostCentresAll -> jump $j_scQUe 3#;
        CostCentresJSON -> jump $j_scQUe 4#
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoCostCentres [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum DoCostCentres
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: DoCostCentres
                       GHC.RTS.Flags.$fEnumDoCostCentres_$csucc
                       GHC.RTS.Flags.$fEnumDoCostCentres_$cpred
                       GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum
                       GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum
                       GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom
                       GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen
                       GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo
                       GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo]
GHC.RTS.Flags.$fEnumDoCostCentres
  = GHC.Enum.C:Enum
      @ DoCostCentres
      GHC.RTS.Flags.$fEnumDoCostCentres_$csucc
      GHC.RTS.Flags.$fEnumDoCostCentres_$cpred
      GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum
      GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum
      GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom
      GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen
      GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo
      GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl100_rcV8s :: DoTrace
[GblId, Str=x]
lvl100_rcV8s = GHC.RTS.Flags.$wlvl2 3#

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoTrace_$csucc :: DoTrace -> DoTrace
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_icPMr [Occ=Once!] :: DoTrace) ->
                 case x_icPMr of {
                   TraceNone -> GHC.RTS.Flags.TraceEventLog;
                   TraceEventLog -> GHC.RTS.Flags.TraceStderr;
                   TraceStderr -> GHC.RTS.Flags.$fEnumDoTrace1 (GHC.Types.I# 3#)
                 }}]
GHC.RTS.Flags.$fEnumDoTrace_$csucc
  = \ (x_icPMr :: DoTrace) ->
      case x_icPMr of {
        TraceNone -> GHC.RTS.Flags.TraceEventLog;
        TraceEventLog -> GHC.RTS.Flags.TraceStderr;
        TraceStderr -> lvl100_rcV8s
      }

Rec {
-- RHS size: {terms: 22, types: 5, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoTrace_go2 [Occ=LoopBreaker]
  :: Int# -> [DoTrace]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoTrace_go2
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ DoTrace
        (case x_i819P of ds_XcPMS {
           __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
           0# -> GHC.RTS.Flags.TraceNone;
           1# -> GHC.RTS.Flags.TraceEventLog;
           2# -> GHC.RTS.Flags.TraceStderr
         })
        (case x_i819P of wild_Xl9 {
           __DEFAULT -> GHC.RTS.Flags.$fEnumDoTrace_go2 (+# wild_Xl9 1#);
           0# -> GHC.Types.[] @ DoTrace
         })
end Rec }

Rec {
-- RHS size: {terms: 22, types: 5, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoTrace_go1 [Occ=LoopBreaker]
  :: Int# -> [DoTrace]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoTrace_go1
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ DoTrace
        (case x_i819P of ds_XcPMS {
           __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
           0# -> GHC.RTS.Flags.TraceNone;
           1# -> GHC.RTS.Flags.TraceEventLog;
           2# -> GHC.RTS.Flags.TraceStderr
         })
        (case x_i819P of wild_Xl9 {
           __DEFAULT -> GHC.RTS.Flags.$fEnumDoTrace_go1 (+# wild_Xl9 1#);
           1# -> GHC.Types.[] @ DoTrace
         })
end Rec }

Rec {
-- RHS size: {terms: 22, types: 5, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoTrace_go [Occ=LoopBreaker]
  :: Int# -> [DoTrace]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoTrace_go
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ DoTrace
        (case x_i819P of ds_XcPMS {
           __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
           0# -> GHC.RTS.Flags.TraceNone;
           1# -> GHC.RTS.Flags.TraceEventLog;
           2# -> GHC.RTS.Flags.TraceStderr
         })
        (case x_i819P of wild_Xl9 {
           __DEFAULT -> GHC.RTS.Flags.$fEnumDoTrace_go (+# wild_Xl9 1#);
           2# -> GHC.Types.[] @ DoTrace
         })
end Rec }

-- RHS size: {terms: 47, types: 14, coercions: 0, joins: 1/1}
GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo
  :: DoTrace -> DoTrace -> [DoTrace]
[GblId,
 Arity=2,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [48 122] 195 0}]
GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo
  = \ (x_i814s :: DoTrace) (y_i814t :: DoTrace) ->
      join {
        $j_scQUk [Dmd=<C(S),1*C1(U)>] :: Int# -> [DoTrace]
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_scQUk (x1_i814z [OS=OneShot] :: Int#)
          = case y_i814t of {
              TraceNone ->
                case ># x1_i814z 0# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumDoTrace_go2 x1_i814z;
                  1# -> GHC.Types.[] @ DoTrace
                };
              TraceEventLog ->
                case ># x1_i814z 1# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumDoTrace_go1 x1_i814z;
                  1# -> GHC.Types.[] @ DoTrace
                };
              TraceStderr ->
                case ># x1_i814z 2# of {
                  __DEFAULT -> GHC.RTS.Flags.$fEnumDoTrace_go x1_i814z;
                  1# -> GHC.Types.[] @ DoTrace
                }
            } } in
      case x_i814s of {
        TraceNone -> jump $j_scQUk 0#;
        TraceEventLog -> jump $j_scQUk 1#;
        TraceStderr -> jump $j_scQUk 2#
      }

-- RHS size: {terms: 35, types: 14, coercions: 0, joins: 1/1}
GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen
  :: DoTrace -> DoTrace -> [DoTrace]
[GblId,
 Arity=2,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [48 160] 252 0}]
GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen
  = \ (x_icPN1 :: DoTrace) (y_icPN2 :: DoTrace) ->
      join {
        $j_scQUn [Dmd=<C(S),1*C1(U)>] :: Int# -> [DoTrace]
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_scQUn (x1_icPN8 [OS=OneShot] :: Int#)
          = case y_icPN2 of {
              TraceNone ->
                map
                  @ Int
                  @ DoTrace
                  GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 0#);
              TraceEventLog ->
                map
                  @ Int
                  @ DoTrace
                  GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 1#);
              TraceStderr ->
                map
                  @ Int
                  @ DoTrace
                  GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum
                  (GHC.Enum.efdInt x1_icPN8 2#)
            } } in
      case x_icPN1 of {
        TraceNone -> jump $j_scQUn 0#;
        TraceEventLog -> jump $j_scQUn 1#;
        TraceStderr -> jump $j_scQUn 2#
      }

Rec {
-- RHS size: {terms: 22, types: 5, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoTrace_go3 [Occ=LoopBreaker]
  :: Int# -> [DoTrace]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoTrace_go3
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ DoTrace
        (case x_i819P of ds_XcPMS {
           __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
           0# -> GHC.RTS.Flags.TraceNone;
           1# -> GHC.RTS.Flags.TraceEventLog;
           2# -> GHC.RTS.Flags.TraceStderr
         })
        (case x_i819P of wild_Xl5 {
           __DEFAULT -> GHC.RTS.Flags.$fEnumDoTrace_go3 (+# wild_Xl5 1#);
           9223372036854775807# -> GHC.Types.[] @ DoTrace
         })
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoTrace4 :: [DoTrace]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumDoTrace4 = GHC.RTS.Flags.$fEnumDoTrace_go3 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoTrace3 :: [DoTrace]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumDoTrace3 = GHC.RTS.Flags.$fEnumDoTrace_go3 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoTrace2 :: [DoTrace]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.$fEnumDoTrace2 = GHC.RTS.Flags.$fEnumDoTrace_go3 2#

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom :: DoTrace -> [DoTrace]
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [40] 30 0}]
GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom
  = \ (x_icPMR :: DoTrace) ->
      case x_icPMR of {
        TraceNone -> GHC.RTS.Flags.$fEnumDoTrace4;
        TraceEventLog -> GHC.RTS.Flags.$fEnumDoTrace3;
        TraceStderr -> GHC.RTS.Flags.$fEnumDoTrace2
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl101_rcV8t :: DoTrace
[GblId, Str=x]
lvl101_rcV8t = GHC.RTS.Flags.$wlvl2 -1#

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoTrace_$cpred :: DoTrace -> DoTrace
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_icPMA [Occ=Once!] :: DoTrace) ->
                 case x_icPMA of {
                   TraceNone -> GHC.RTS.Flags.$fEnumDoTrace1 (GHC.Types.I# -1#);
                   TraceEventLog -> GHC.RTS.Flags.TraceNone;
                   TraceStderr -> GHC.RTS.Flags.TraceEventLog
                 }}]
GHC.RTS.Flags.$fEnumDoTrace_$cpred
  = \ (x_icPMA :: DoTrace) ->
      case x_icPMA of {
        TraceNone -> lvl101_rcV8t;
        TraceEventLog -> GHC.RTS.Flags.TraceNone;
        TraceStderr -> GHC.RTS.Flags.TraceEventLog
      }

-- RHS size: {terms: 562, types: 137, coercions: 0, joins: 2/20}
GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo
  :: DoTrace -> DoTrace -> DoTrace -> [DoTrace]
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,1*U>, Unf=OtherCon []]
GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo
  = \ (x1_i814J :: DoTrace)
      (x2_i814K :: DoTrace)
      (y_i814L :: DoTrace) ->
      join {
        $j_scQUw [Dmd=<C(S),1*C1(U)>] :: Int# -> [DoTrace]
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_scQUw (x4_i814R [OS=OneShot] :: Int#)
          = join {
              $j1_scQUu [Dmd=<C(S),1*C1(U)>] :: Int# -> [DoTrace]
              [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
              $j1_scQUu (x5_i814V [OS=OneShot] :: Int#)
                = case y_i814L of {
                    TraceNone ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 0# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoTrace
                                (case x4_i814R of ds_XcPMS {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                   0# -> GHC.RTS.Flags.TraceNone;
                                   1# -> GHC.RTS.Flags.TraceEventLog;
                                   2# -> GHC.RTS.Flags.TraceStderr
                                 })
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 0# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [DoTrace]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoTrace
                                               (case x_i81tP of ds_XcPMS {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                                  0# -> GHC.RTS.Flags.TraceNone;
                                                  1# -> GHC.RTS.Flags.TraceEventLog;
                                                  2# -> GHC.RTS.Flags.TraceStderr
                                                })
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ DoTrace
                                               (case x_i81tP of ds_XcPMS {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                                  0# -> GHC.RTS.Flags.TraceNone;
                                                  1# -> GHC.RTS.Flags.TraceEventLog;
                                                  2# -> GHC.RTS.Flags.TraceStderr
                                                })
                                               (GHC.Types.[] @ DoTrace)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 0# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoTrace
                                    (case x4_i814R of ds_XcPMS {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                       0# -> GHC.RTS.Flags.TraceNone;
                                       1# -> GHC.RTS.Flags.TraceEventLog;
                                       2# -> GHC.RTS.Flags.TraceStderr
                                     })
                                    (GHC.Types.[] @ DoTrace);
                                1# -> GHC.Types.[] @ DoTrace
                              }
                          };
                        1# ->
                          case <# 0# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoTrace
                                (case x4_i814R of ds_XcPMS {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                   0# -> GHC.RTS.Flags.TraceNone;
                                   1# -> GHC.RTS.Flags.TraceEventLog;
                                   2# -> GHC.RTS.Flags.TraceStderr
                                 })
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 0# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [DoTrace]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoTrace
                                               (case x_i81u5 of ds_XcPMS {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                                  0# -> GHC.RTS.Flags.TraceNone;
                                                  1# -> GHC.RTS.Flags.TraceEventLog;
                                                  2# -> GHC.RTS.Flags.TraceStderr
                                                })
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ DoTrace
                                               (case x_i81u5 of ds_XcPMS {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                                  0# -> GHC.RTS.Flags.TraceNone;
                                                  1# -> GHC.RTS.Flags.TraceEventLog;
                                                  2# -> GHC.RTS.Flags.TraceStderr
                                                })
                                               (GHC.Types.[] @ DoTrace)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 0# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoTrace
                                    (case x4_i814R of ds_XcPMS {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                       0# -> GHC.RTS.Flags.TraceNone;
                                       1# -> GHC.RTS.Flags.TraceEventLog;
                                       2# -> GHC.RTS.Flags.TraceStderr
                                     })
                                    (GHC.Types.[] @ DoTrace);
                                1# -> GHC.Types.[] @ DoTrace
                              }
                          }
                      };
                    TraceEventLog ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 1# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoTrace
                                (case x4_i814R of ds_XcPMS {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                   0# -> GHC.RTS.Flags.TraceNone;
                                   1# -> GHC.RTS.Flags.TraceEventLog;
                                   2# -> GHC.RTS.Flags.TraceStderr
                                 })
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 1# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [DoTrace]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoTrace
                                               (case x_i81tP of ds_XcPMS {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                                  0# -> GHC.RTS.Flags.TraceNone;
                                                  1# -> GHC.RTS.Flags.TraceEventLog;
                                                  2# -> GHC.RTS.Flags.TraceStderr
                                                })
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ DoTrace
                                               (case x_i81tP of ds_XcPMS {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                                  0# -> GHC.RTS.Flags.TraceNone;
                                                  1# -> GHC.RTS.Flags.TraceEventLog;
                                                  2# -> GHC.RTS.Flags.TraceStderr
                                                })
                                               (GHC.Types.[] @ DoTrace)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 1# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoTrace
                                    (case x4_i814R of ds_XcPMS {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                       0# -> GHC.RTS.Flags.TraceNone;
                                       1# -> GHC.RTS.Flags.TraceEventLog;
                                       2# -> GHC.RTS.Flags.TraceStderr
                                     })
                                    (GHC.Types.[] @ DoTrace);
                                1# -> GHC.Types.[] @ DoTrace
                              }
                          };
                        1# ->
                          case <# 1# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoTrace
                                (case x4_i814R of ds_XcPMS {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                   0# -> GHC.RTS.Flags.TraceNone;
                                   1# -> GHC.RTS.Flags.TraceEventLog;
                                   2# -> GHC.RTS.Flags.TraceStderr
                                 })
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 1# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [DoTrace]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoTrace
                                               (case x_i81u5 of ds_XcPMS {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                                  0# -> GHC.RTS.Flags.TraceNone;
                                                  1# -> GHC.RTS.Flags.TraceEventLog;
                                                  2# -> GHC.RTS.Flags.TraceStderr
                                                })
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ DoTrace
                                               (case x_i81u5 of ds_XcPMS {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                                  0# -> GHC.RTS.Flags.TraceNone;
                                                  1# -> GHC.RTS.Flags.TraceEventLog;
                                                  2# -> GHC.RTS.Flags.TraceStderr
                                                })
                                               (GHC.Types.[] @ DoTrace)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 1# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoTrace
                                    (case x4_i814R of ds_XcPMS {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                       0# -> GHC.RTS.Flags.TraceNone;
                                       1# -> GHC.RTS.Flags.TraceEventLog;
                                       2# -> GHC.RTS.Flags.TraceStderr
                                     })
                                    (GHC.Types.[] @ DoTrace);
                                1# -> GHC.Types.[] @ DoTrace
                              }
                          }
                      };
                    TraceStderr ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 2# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoTrace
                                (case x4_i814R of ds_XcPMS {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                   0# -> GHC.RTS.Flags.TraceNone;
                                   1# -> GHC.RTS.Flags.TraceEventLog;
                                   2# -> GHC.RTS.Flags.TraceStderr
                                 })
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 2# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [DoTrace]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoTrace
                                               (case x_i81tP of ds_XcPMS {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                                  0# -> GHC.RTS.Flags.TraceNone;
                                                  1# -> GHC.RTS.Flags.TraceEventLog;
                                                  2# -> GHC.RTS.Flags.TraceStderr
                                                })
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ DoTrace
                                               (case x_i81tP of ds_XcPMS {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                                  0# -> GHC.RTS.Flags.TraceNone;
                                                  1# -> GHC.RTS.Flags.TraceEventLog;
                                                  2# -> GHC.RTS.Flags.TraceStderr
                                                })
                                               (GHC.Types.[] @ DoTrace)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 2# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoTrace
                                    (case x4_i814R of ds_XcPMS {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                       0# -> GHC.RTS.Flags.TraceNone;
                                       1# -> GHC.RTS.Flags.TraceEventLog;
                                       2# -> GHC.RTS.Flags.TraceStderr
                                     })
                                    (GHC.Types.[] @ DoTrace);
                                1# -> GHC.Types.[] @ DoTrace
                              }
                          };
                        1# ->
                          case <# 2# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ DoTrace
                                (case x4_i814R of ds_XcPMS {
                                   __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                   0# -> GHC.RTS.Flags.TraceNone;
                                   1# -> GHC.RTS.Flags.TraceEventLog;
                                   2# -> GHC.RTS.Flags.TraceStderr
                                 })
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 2# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [DoTrace]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ DoTrace
                                               (case x_i81u5 of ds_XcPMS {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                                  0# -> GHC.RTS.Flags.TraceNone;
                                                  1# -> GHC.RTS.Flags.TraceEventLog;
                                                  2# -> GHC.RTS.Flags.TraceStderr
                                                })
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ DoTrace
                                               (case x_i81u5 of ds_XcPMS {
                                                  __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                                  0# -> GHC.RTS.Flags.TraceNone;
                                                  1# -> GHC.RTS.Flags.TraceEventLog;
                                                  2# -> GHC.RTS.Flags.TraceStderr
                                                })
                                               (GHC.Types.[] @ DoTrace)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 2# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ DoTrace
                                    (case x4_i814R of ds_XcPMS {
                                       __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
                                       0# -> GHC.RTS.Flags.TraceNone;
                                       1# -> GHC.RTS.Flags.TraceEventLog;
                                       2# -> GHC.RTS.Flags.TraceStderr
                                     })
                                    (GHC.Types.[] @ DoTrace);
                                1# -> GHC.Types.[] @ DoTrace
                              }
                          }
                      }
                  } } in
            case x2_i814K of {
              TraceNone -> jump $j1_scQUu 0#;
              TraceEventLog -> jump $j1_scQUu 1#;
              TraceStderr -> jump $j1_scQUu 2#
            } } in
      case x1_i814J of {
        TraceNone -> jump $j_scQUw 0#;
        TraceEventLog -> jump $j_scQUw 1#;
        TraceStderr -> jump $j_scQUw 2#
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
GHC.RTS.Flags.$fEnumDoTrace [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum DoTrace
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: DoTrace
                       GHC.RTS.Flags.$fEnumDoTrace_$csucc
                       GHC.RTS.Flags.$fEnumDoTrace_$cpred
                       GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum
                       GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum
                       GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom
                       GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen
                       GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo
                       GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo]
GHC.RTS.Flags.$fEnumDoTrace
  = GHC.Enum.C:Enum
      @ DoTrace
      GHC.RTS.Flags.$fEnumDoTrace_$csucc
      GHC.RTS.Flags.$fEnumDoTrace_$cpred
      GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum
      GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum
      GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom
      GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen
      GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo
      GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo

-- RHS size: {terms: 109, types: 101, coercions: 0, joins: 0/1}
GHC.RTS.Flags.getRTSFlags2
  :: State# RealWorld -> (# State# RealWorld, TraceFlags #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 204 30}]
GHC.RTS.Flags.getRTSFlags2
  = \ (eta_B1 :: State# RealWorld) ->
      let {
        ptr_scQro [Dmd=<S,U>] :: Addr#
        [LclId]
        ptr_scQro = plusAddr# (__label "RtsFlags" (data)) 336# } in
      case readInt32OffAddr# @ RealWorld ptr_scQro 0# eta_B1 of
      { (# ipv_i9h5B, ipv1_i9h5C #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQro 4#) 0# ipv_i9h5B
      of
      { (# ipv2_i7NWv, ipv3_i7NWw #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQro 5#) 0# ipv2_i7NWv
      of
      { (# ipv4_X7Ozd, ipv5_X7Ozf #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQro 6#) 0# ipv4_X7Ozd
      of
      { (# ipv6_X7Ozq, ipv7_X7Ozs #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQro 7#) 0# ipv6_X7Ozq
      of
      { (# ipv8_X7OzD, ipv9_X7OzF #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQro 8#) 0# ipv8_X7OzD
      of
      { (# ipv10_X7OzQ, ipv11_X7OzS #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQro 9#) 0# ipv10_X7OzQ
      of
      { (# ipv12_X7OA3, ipv13_X7OA5 #) ->
      (# ipv12_X7OA3,
         GHC.RTS.Flags.TraceFlags
           (case ipv1_i9h5C of ds_XcPMS {
              __DEFAULT -> GHC.RTS.Flags.$wlvl2 ds_XcPMS;
              0# -> GHC.RTS.Flags.TraceNone;
              1# -> GHC.RTS.Flags.TraceEventLog;
              2# -> GHC.RTS.Flags.TraceStderr
            })
           (case ipv3_i7NWw of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv5_X7Ozf of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv7_X7Ozs of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv9_X7OzF of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv11_X7OzS of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv13_X7OA5 of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            }) #)
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
getTraceFlags :: IO TraceFlags
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.RTS.Flags.getRTSFlags2
               `cast` (Sym (GHC.Types.N:IO[0] <TraceFlags>_R)
                       :: (State# RealWorld -> (# State# RealWorld, TraceFlags #) :: *)
                          ~R# (IO TraceFlags :: *))}]
getTraceFlags
  = GHC.RTS.Flags.getRTSFlags2
    `cast` (Sym (GHC.Types.N:IO[0] <TraceFlags>_R)
            :: (State# RealWorld -> (# State# RealWorld, TraceFlags #) :: *)
               ~R# (IO TraceFlags :: *))

-- RHS size: {terms: 46, types: 46, coercions: 0, joins: 0/0}
GHC.RTS.Flags.getCCFlags1
  :: State# RealWorld -> (# State# RealWorld, CCFlags #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 115 30}]
GHC.RTS.Flags.getCCFlags1
  = \ (s_icPZ1 :: State# RealWorld) ->
      case readWord32OffAddr#
             @ RealWorld (__label "RtsFlags" (data)) 0# s_icPZ1
      of
      { (# ipv_i9hi7, ipv1_i9hi8 #) ->
      case readIntOffAddr#
             @ RealWorld (plusAddr# (__label "RtsFlags" (data)) 4#) 0# ipv_i9hi7
      of
      { (# ipv2_icQ06, ipv3_icQ07 #) ->
      case readIntOffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 8#)
             0#
             ipv2_icQ06
      of
      { (# ipv4_XcQCK, ipv5_XcQCM #) ->
      (# ipv4_XcQCK,
         GHC.RTS.Flags.CCFlags
           (case word2Int# ipv1_i9hi8 of ds_XcPND {
              __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
              0# -> GHC.RTS.Flags.CostCentresNone;
              1# -> GHC.RTS.Flags.CostCentresSummary;
              2# -> GHC.RTS.Flags.CostCentresVerbose;
              3# -> GHC.RTS.Flags.CostCentresAll;
              4# -> GHC.RTS.Flags.CostCentresJSON
            })
           (GHC.Types.I# ipv3_icQ07)
           (GHC.Types.I# ipv5_XcQCM) #)
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
getCCFlags :: IO CCFlags
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.RTS.Flags.getCCFlags1
               `cast` (Sym (GHC.Types.N:IO[0] <CCFlags>_R)
                       :: (State# RealWorld -> (# State# RealWorld, CCFlags #) :: *)
                          ~R# (IO CCFlags :: *))}]
getCCFlags
  = GHC.RTS.Flags.getCCFlags1
    `cast` (Sym (GHC.Types.N:IO[0] <CCFlags>_R)
            :: (State# RealWorld -> (# State# RealWorld, CCFlags #) :: *)
               ~R# (IO CCFlags :: *))

-- RHS size: {terms: 216, types: 205, coercions: 0, joins: 0/1}
GHC.RTS.Flags.getDebugFlags1
  :: State# RealWorld -> (# State# RealWorld, DebugFlags #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 340 30}]
GHC.RTS.Flags.getDebugFlags1
  = \ (eta_XeO :: State# RealWorld) ->
      let {
        ptr_scQrm [Dmd=<S,U>] :: Addr#
        [LclId]
        ptr_scQrm = plusAddr# (__label "RtsFlags" (data)) 200# } in
      case readWord8OffAddr# @ RealWorld ptr_scQrm 0# eta_XeO of
      { (# ipv_i7NWv, ipv1_i7NWw #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrm 1#) 0# ipv_i7NWv
      of
      { (# ipv2_X7Oz4, ipv3_X7Oz6 #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrm 2#) 0# ipv2_X7Oz4
      of
      { (# ipv4_X7Ozh, ipv5_X7Ozj #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrm 3#) 0# ipv4_X7Ozh
      of
      { (# ipv6_X7Ozu, ipv7_X7Ozw #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrm 4#) 0# ipv6_X7Ozu
      of
      { (# ipv8_X7OzH, ipv9_X7OzJ #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrm 5#) 0# ipv8_X7OzH
      of
      { (# ipv10_X7OzU, ipv11_X7OzW #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrm 6#) 0# ipv10_X7OzU
      of
      { (# ipv12_X7OA7, ipv13_X7OA9 #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrm 7#) 0# ipv12_X7OA7
      of
      { (# ipv14_X7OAk, ipv15_X7OAm #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrm 8#) 0# ipv14_X7OAk
      of
      { (# ipv16_X7OAx, ipv17_X7OAz #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrm 9#) 0# ipv16_X7OAx
      of
      { (# ipv18_X7OAK, ipv19_X7OAM #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrm 10#) 0# ipv18_X7OAK
      of
      { (# ipv20_X7OAX, ipv21_X7OAZ #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrm 11#) 0# ipv20_X7OAX
      of
      { (# ipv22_X7OBa, ipv23_X7OBc #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrm 12#) 0# ipv22_X7OBa
      of
      { (# ipv24_X7OBn, ipv25_X7OBp #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrm 13#) 0# ipv24_X7OBn
      of
      { (# ipv26_X7OBA, ipv27_X7OBC #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrm 14#) 0# ipv26_X7OBA
      of
      { (# ipv28_X7OBN, ipv29_X7OBP #) ->
      (# ipv28_X7OBN,
         GHC.RTS.Flags.DebugFlags
           (case ipv1_i7NWw of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv3_X7Oz6 of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv5_X7Ozj of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv7_X7Ozw of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv9_X7OzJ of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv11_X7OzW of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv13_X7OA9 of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv15_X7OAm of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv17_X7OAz of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv19_X7OAM of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv21_X7OAZ of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv23_X7OBc of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv25_X7OBp of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv27_X7OBC of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv29_X7OBP of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            }) #)
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
getDebugFlags :: IO DebugFlags
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.RTS.Flags.getDebugFlags1
               `cast` (Sym (GHC.Types.N:IO[0] <DebugFlags>_R)
                       :: (State# RealWorld -> (# State# RealWorld, DebugFlags #) :: *)
                          ~R# (IO DebugFlags :: *))}]
getDebugFlags
  = GHC.RTS.Flags.getDebugFlags1
    `cast` (Sym (GHC.Types.N:IO[0] <DebugFlags>_R)
            :: (State# RealWorld -> (# State# RealWorld, DebugFlags #) :: *)
               ~R# (IO DebugFlags :: *))

-- RHS size: {terms: 96, types: 99, coercions: 0, joins: 0/1}
GHC.RTS.Flags.getMiscFlags1
  :: State# RealWorld -> (# State# RealWorld, MiscFlags #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 144 30}]
GHC.RTS.Flags.getMiscFlags1
  = \ (eta_XeR :: State# RealWorld) ->
      let {
        ptr_scQrk [Dmd=<S,U>] :: Addr#
        [LclId]
        ptr_scQrk = plusAddr# (__label "RtsFlags" (data)) 176# } in
      case readWord64OffAddr# @ RealWorld ptr_scQrk 0# eta_XeR of
      { (# ipv_i9hsV, ipv1_i9hsW #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrk 8#) 0# ipv_i9hsV
      of
      { (# ipv2_i7NWv, ipv3_i7NWw #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrk 9#) 0# ipv2_i7NWv
      of
      { (# ipv4_X7Ozg, ipv5_X7Ozi #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrk 10#) 0# ipv4_X7Ozg
      of
      { (# ipv6_X7Ozt, ipv7_X7Ozv #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrk 11#) 0# ipv6_X7Ozt
      of
      { (# ipv8_X7OzG, ipv9_X7OzI #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrk 12#) 0# ipv8_X7OzG
      of
      { (# ipv10_X7OzT, ipv11_X7OzV #) ->
      case readWordOffAddr#
             @ RealWorld (plusAddr# ptr_scQrk 16#) 0# ipv10_X7OzT
      of
      { (# ipv12_icQ2n, ipv13_icQ2o #) ->
      (# ipv12_icQ2n,
         GHC.RTS.Flags.MiscFlags
           (GHC.Word.W64# ipv1_i9hsW)
           (case ipv3_i7NWw of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv5_X7Ozi of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv7_X7Ozv of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv9_X7OzI of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv11_X7OzV of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (GHC.Types.W# ipv13_icQ2o) #)
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
getMiscFlags :: IO MiscFlags
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.RTS.Flags.getMiscFlags1
               `cast` (Sym (GHC.Types.N:IO[0] <MiscFlags>_R)
                       :: (State# RealWorld -> (# State# RealWorld, MiscFlags #) :: *)
                          ~R# (IO MiscFlags :: *))}]
getMiscFlags
  = GHC.RTS.Flags.getMiscFlags1
    `cast` (Sym (GHC.Types.N:IO[0] <MiscFlags>_R)
            :: (State# RealWorld -> (# State# RealWorld, MiscFlags #) :: *)
               ~R# (IO MiscFlags :: *))

-- RHS size: {terms: 26, types: 34, coercions: 0, joins: 0/1}
GHC.RTS.Flags.getConcFlags1
  :: State# RealWorld -> (# State# RealWorld, ConcFlags #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (eta_XeU [Occ=Once] :: State# RealWorld) ->
                 let {
                   ptr_scQri :: Addr#
                   [LclId]
                   ptr_scQri = plusAddr# (__label "RtsFlags" (data)) 160# } in
                 case readWord64OffAddr# @ RealWorld ptr_scQri 0# eta_XeU of
                 { (# ipv_i9hsV [Occ=Once], ipv1_i9hsW [Occ=Once] #) ->
                 case readIntOffAddr#
                        @ RealWorld (plusAddr# ptr_scQri 8#) 0# ipv_i9hsV
                 of
                 { (# ipv2_icQ06 [Occ=Once], ipv3_icQ07 [Occ=Once] #) ->
                 (# ipv2_icQ06,
                    GHC.RTS.Flags.ConcFlags
                      (GHC.Word.W64# ipv1_i9hsW) (GHC.Types.I# ipv3_icQ07) #)
                 }
                 }}]
GHC.RTS.Flags.getConcFlags1
  = \ (eta_XeU :: State# RealWorld) ->
      let {
        ptr_scQri [Dmd=<S,U>] :: Addr#
        [LclId]
        ptr_scQri = plusAddr# (__label "RtsFlags" (data)) 160# } in
      case readWord64OffAddr# @ RealWorld ptr_scQri 0# eta_XeU of
      { (# ipv_i9hsV, ipv1_i9hsW #) ->
      case readIntOffAddr#
             @ RealWorld (plusAddr# ptr_scQri 8#) 0# ipv_i9hsV
      of
      { (# ipv2_icQ06, ipv3_icQ07 #) ->
      (# ipv2_icQ06,
         GHC.RTS.Flags.ConcFlags
           (GHC.Word.W64# ipv1_i9hsW) (GHC.Types.I# ipv3_icQ07) #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
getConcFlags :: IO ConcFlags
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.RTS.Flags.getConcFlags1
               `cast` (Sym (GHC.Types.N:IO[0] <ConcFlags>_R)
                       :: (State# RealWorld -> (# State# RealWorld, ConcFlags #) :: *)
                          ~R# (IO ConcFlags :: *))}]
getConcFlags
  = GHC.RTS.Flags.getConcFlags1
    `cast` (Sym (GHC.Types.N:IO[0] <ConcFlags>_R)
            :: (State# RealWorld -> (# State# RealWorld, ConcFlags #) :: *)
               ~R# (IO ConcFlags :: *))

-- RHS size: {terms: 122, types: 134, coercions: 0, joins: 0/1}
GHC.RTS.Flags.getParFlags1
  :: State# RealWorld -> (# State# RealWorld, ParFlags #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 170 30}]
GHC.RTS.Flags.getParFlags1
  = \ (eta_XeX :: State# RealWorld) ->
      let {
        ptr_scQrg [Dmd=<S,U>] :: Addr#
        [LclId]
        ptr_scQrg = plusAddr# (__label "RtsFlags" (data)) 368# } in
      case readWord32OffAddr# @ RealWorld ptr_scQrg 0# eta_XeX of
      { (# ipv_i9hi7, ipv1_i9hi8 #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrg 4#) 0# ipv_i9hi7
      of
      { (# ipv2_i7NWv, ipv3_i7NWw #) ->
      case readWord32OffAddr#
             @ RealWorld (plusAddr# ptr_scQrg 8#) 0# ipv2_i7NWv
      of
      { (# ipv4_X9hUW, ipv5_X9hUY #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrg 12#) 0# ipv4_X9hUW
      of
      { (# ipv6_X7Ozu, ipv7_X7Ozw #) ->
      case readWord32OffAddr#
             @ RealWorld (plusAddr# ptr_scQrg 16#) 0# ipv6_X7Ozu
      of
      { (# ipv8_X9hVj, ipv9_X9hVl #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrg 20#) 0# ipv8_X9hVj
      of
      { (# ipv10_X7OzR, ipv11_X7OzT #) ->
      case readWord32OffAddr#
             @ RealWorld (plusAddr# ptr_scQrg 24#) 0# ipv10_X7OzR
      of
      { (# ipv12_X9hVG, ipv13_X9hVI #) ->
      case readWord32OffAddr#
             @ RealWorld (plusAddr# ptr_scQrg 28#) 0# ipv12_X9hVG
      of
      { (# ipv14_X9hVQ, ipv15_X9hVS #) ->
      case readWord32OffAddr#
             @ RealWorld (plusAddr# ptr_scQrg 32#) 0# ipv14_X9hVQ
      of
      { (# ipv16_X9hW0, ipv17_X9hW2 #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQrg 36#) 0# ipv16_X9hW0
      of
      { (# ipv18_X7OAy, ipv19_X7OAA #) ->
      (# ipv18_X7OAy,
         GHC.RTS.Flags.ParFlags
           (GHC.Word.W32# ipv1_i9hi8)
           (case ipv3_i7NWw of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (GHC.Word.W32# ipv5_X9hUY)
           (case ipv7_X7Ozw of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (GHC.Word.W32# ipv9_X9hVl)
           (case ipv11_X7OzT of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (GHC.Word.W32# ipv13_X9hVI)
           (GHC.Word.W32# ipv15_X9hVS)
           (GHC.Word.W32# ipv17_X9hW2)
           (case ipv19_X7OAA of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            }) #)
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
getParFlags :: IO ParFlags
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.RTS.Flags.getParFlags1
               `cast` (Sym (GHC.Types.N:IO[0] <ParFlags>_R)
                       :: (State# RealWorld -> (# State# RealWorld, ParFlags #) :: *)
                          ~R# (IO ParFlags :: *))}]
getParFlags
  = GHC.RTS.Flags.getParFlags1
    `cast` (Sym (GHC.Types.N:IO[0] <ParFlags>_R)
            :: (State# RealWorld -> (# State# RealWorld, ParFlags #) :: *)
               ~R# (IO ParFlags :: *))

-- RHS size: {terms: 336, types: 481, coercions: 14, joins: 7/8}
GHC.RTS.Flags.getProfFlags1
  :: State# RealWorld -> (# State# RealWorld, ProfFlags #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []]
GHC.RTS.Flags.getProfFlags1
  = \ (eta_Xf0 :: State# RealWorld) ->
      let {
        ptr_scQre [Dmd=<S,U>] :: Addr#
        [LclId]
        ptr_scQre = plusAddr# (__label "RtsFlags" (data)) 248# } in
      case readIntOffAddr# @ RealWorld ptr_scQre 0# eta_Xf0 of
      { (# ipv_icQ06, ipv1_icQ07 #) ->
      case readWord64OffAddr#
             @ RealWorld (plusAddr# ptr_scQre 8#) 0# ipv_icQ06
      of
      { (# ipv2_i9hsV, ipv3_i9hsW #) ->
      case readWordOffAddr#
             @ RealWorld (plusAddr# ptr_scQre 16#) 0# ipv2_i9hsV
      of
      { (# ipv4_icQ2n, ipv5_icQ2o #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQre 20#) 0# ipv4_icQ2n
      of
      { (# ipv6_i7NWv, ipv7_i7NWw #) ->
      case readWord8OffAddr#
             @ RealWorld (plusAddr# ptr_scQre 21#) 0# ipv6_i7NWv
      of
      { (# ipv8_X7OzI, ipv9_X7OzK #) ->
      case readWordOffAddr#
             @ RealWorld (plusAddr# ptr_scQre 24#) 0# ipv8_X7OzI
      of
      { (# ipv10_XcQFN, ipv11_XcQFP #) ->
      case readWordOffAddr#
             @ RealWorld (plusAddr# ptr_scQre 28#) 0# ipv10_XcQFN
      of
      { (# ipv12_XcQFX, ipv13_XcQFZ #) ->
      case readAddrOffAddr#
             @ RealWorld (plusAddr# ptr_scQre 32#) 0# ipv12_XcQFX
      of
      { (# ipv14_i9h9N, ipv15_i9h9O #) ->
      join {
        $j_scQXe [Dmd=<L,1*C1(C1(U(U,U)))>]
          :: State# RealWorld
             -> Maybe String -> (# State# RealWorld, ProfFlags #)
        [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []]
        $j_scQXe (ipv16_XcQD1 [OS=OneShot] :: State# RealWorld)
                 (ipv17_XcQD3 [OS=OneShot] :: Maybe String)
          = case readAddrOffAddr#
                   @ RealWorld (plusAddr# ptr_scQre 40#) 0# ipv16_XcQD1
            of
            { (# ipv18_X9hNM, ipv19_X9hNO #) ->
            join {
              $j1_scQX9 [Dmd=<L,1*C1(C1(U(U,U)))>]
                :: State# RealWorld
                   -> Maybe String -> (# State# RealWorld, ProfFlags #)
              [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []]
              $j1_scQX9 (ipv20_XcQDg [OS=OneShot] :: State# RealWorld)
                        (ipv21_XcQDi [OS=OneShot] :: Maybe String)
                = case readAddrOffAddr#
                         @ RealWorld (plusAddr# ptr_scQre 48#) 0# ipv20_XcQDg
                  of
                  { (# ipv22_X9hO1, ipv23_X9hO3 #) ->
                  join {
                    $j2_scQX4 [Dmd=<L,1*C1(C1(U(U,U)))>]
                      :: State# RealWorld
                         -> Maybe String -> (# State# RealWorld, ProfFlags #)
                    [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []]
                    $j2_scQX4 (ipv24_XcQDv [OS=OneShot] :: State# RealWorld)
                              (ipv25_XcQDx [OS=OneShot] :: Maybe String)
                      = case readAddrOffAddr#
                               @ RealWorld (plusAddr# ptr_scQre 56#) 0# ipv24_XcQDv
                        of
                        { (# ipv26_X9hOg, ipv27_X9hOi #) ->
                        join {
                          $j3_scQWZ [Dmd=<L,1*C1(C1(U(U,U)))>]
                            :: State# RealWorld
                               -> Maybe String -> (# State# RealWorld, ProfFlags #)
                          [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []]
                          $j3_scQWZ (ipv28_XcQDK [OS=OneShot] :: State# RealWorld)
                                    (ipv29_XcQDM [OS=OneShot] :: Maybe String)
                            = case readAddrOffAddr#
                                     @ RealWorld (plusAddr# ptr_scQre 64#) 0# ipv28_XcQDK
                              of
                              { (# ipv30_X9hOv, ipv31_X9hOx #) ->
                              join {
                                $j4_scQWU [Dmd=<L,1*C1(C1(U(U,U)))>]
                                  :: State# RealWorld
                                     -> Maybe String -> (# State# RealWorld, ProfFlags #)
                                [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []]
                                $j4_scQWU (ipv32_XcQDZ [OS=OneShot] :: State# RealWorld)
                                          (ipv33_XcQE1 [OS=OneShot] :: Maybe String)
                                  = case readAddrOffAddr#
                                           @ RealWorld (plusAddr# ptr_scQre 72#) 0# ipv32_XcQDZ
                                    of
                                    { (# ipv34_X9hOK, ipv35_X9hOM #) ->
                                    join {
                                      $j5_scQWP [Dmd=<L,1*C1(C1(U(U,U)))>]
                                        :: State# RealWorld
                                           -> Maybe String -> (# State# RealWorld, ProfFlags #)
                                      [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []]
                                      $j5_scQWP (ipv36_XcQEe [OS=OneShot] :: State# RealWorld)
                                                (ipv37_XcQEg [OS=OneShot] :: Maybe String)
                                        = case readAddrOffAddr#
                                                 @ RealWorld
                                                 (plusAddr# ptr_scQre 80#)
                                                 0#
                                                 ipv36_XcQEe
                                          of
                                          { (# ipv38_X9hOZ, ipv39_X9hP1 #) ->
                                          join {
                                            $j6_scQWK [Dmd=<L,1*C1(C1(U(U,U)))>]
                                              :: State# RealWorld
                                                 -> Maybe String
                                                 -> (# State# RealWorld, ProfFlags #)
                                            [LclId[JoinId(2)],
                                             Arity=2,
                                             Str=<S,U><L,U>,
                                             Unf=OtherCon []]
                                            $j6_scQWK (ipv40_XcQEt [OS=OneShot] :: State# RealWorld)
                                                      (ipv41_XcQEv [OS=OneShot] :: Maybe String)
                                              = (# ipv40_XcQEt,
                                                   GHC.RTS.Flags.ProfFlags
                                                     (GHC.RTS.Flags.$w$ctoEnum1 ipv1_icQ07)
                                                     (GHC.Word.W64# ipv3_i9hsW)
                                                     (GHC.Types.W# ipv5_icQ2o)
                                                     (case ipv7_i7NWw of {
                                                        __DEFAULT -> GHC.Types.True;
                                                        0## -> GHC.Types.False
                                                      })
                                                     (case ipv9_X7OzK of {
                                                        __DEFAULT -> GHC.Types.True;
                                                        0## -> GHC.Types.False
                                                      })
                                                     (GHC.Types.W# ipv11_XcQFP)
                                                     (GHC.Types.W# ipv13_XcQFZ)
                                                     ipv17_XcQD3
                                                     ipv21_XcQDi
                                                     ipv25_XcQDx
                                                     ipv29_XcQDM
                                                     ipv33_XcQE1
                                                     ipv37_XcQEg
                                                     ipv41_XcQEv #) } in
                                          case eqAddr# ipv39_X9hP1 __NULL of {
                                            __DEFAULT ->
                                              case ((noinline
                                                       @ (IO GHC.IO.Encoding.Types.TextEncoding)
                                                       GHC.IO.Encoding.getForeignEncoding)
                                                    `cast` (GHC.Types.N:IO[0]
                                                                <GHC.IO.Encoding.Types.TextEncoding>_R
                                                            :: (IO
                                                                  GHC.IO.Encoding.Types.TextEncoding :: *)
                                                               ~R# (State# RealWorld
                                                                    -> (# State# RealWorld,
                                                                          GHC.IO.Encoding.Types.TextEncoding #) :: *)))
                                                     ipv38_X9hOZ
                                              of
                                              { (# ipv40_icPYR, ipv41_icPYS #) ->
                                              case GHC.Foreign.$wpeekCString
                                                     ipv41_icPYS ipv39_X9hP1 ipv40_icPYR
                                              of
                                              { (# ipv42_X7VQx, ipv43_X7VQz #) ->
                                              jump $j6_scQWK
                                                ipv42_X7VQx (GHC.Base.Just @ String ipv43_X7VQz)
                                              }
                                              };
                                            1# ->
                                              jump $j6_scQWK ipv38_X9hOZ (GHC.Base.Nothing @ String)
                                          }
                                          } } in
                                    case eqAddr# ipv35_X9hOM __NULL of {
                                      __DEFAULT ->
                                        case ((noinline
                                                 @ (IO GHC.IO.Encoding.Types.TextEncoding)
                                                 GHC.IO.Encoding.getForeignEncoding)
                                              `cast` (GHC.Types.N:IO[0]
                                                          <GHC.IO.Encoding.Types.TextEncoding>_R
                                                      :: (IO
                                                            GHC.IO.Encoding.Types.TextEncoding :: *)
                                                         ~R# (State# RealWorld
                                                              -> (# State# RealWorld,
                                                                    GHC.IO.Encoding.Types.TextEncoding #) :: *)))
                                               ipv34_X9hOK
                                        of
                                        { (# ipv36_icPYR, ipv37_icPYS #) ->
                                        case GHC.Foreign.$wpeekCString
                                               ipv37_icPYS ipv35_X9hOM ipv36_icPYR
                                        of
                                        { (# ipv38_X7VQi, ipv39_X7VQk #) ->
                                        jump $j5_scQWP
                                          ipv38_X7VQi (GHC.Base.Just @ String ipv39_X7VQk)
                                        }
                                        };
                                      1# -> jump $j5_scQWP ipv34_X9hOK (GHC.Base.Nothing @ String)
                                    }
                                    } } in
                              case eqAddr# ipv31_X9hOx __NULL of {
                                __DEFAULT ->
                                  case ((noinline
                                           @ (IO GHC.IO.Encoding.Types.TextEncoding)
                                           GHC.IO.Encoding.getForeignEncoding)
                                        `cast` (GHC.Types.N:IO[0]
                                                    <GHC.IO.Encoding.Types.TextEncoding>_R
                                                :: (IO GHC.IO.Encoding.Types.TextEncoding :: *)
                                                   ~R# (State# RealWorld
                                                        -> (# State# RealWorld,
                                                              GHC.IO.Encoding.Types.TextEncoding #) :: *)))
                                         ipv30_X9hOv
                                  of
                                  { (# ipv32_icPYR, ipv33_icPYS #) ->
                                  case GHC.Foreign.$wpeekCString ipv33_icPYS ipv31_X9hOx ipv32_icPYR
                                  of
                                  { (# ipv34_X7VQ3, ipv35_X7VQ5 #) ->
                                  jump $j4_scQWU ipv34_X7VQ3 (GHC.Base.Just @ String ipv35_X7VQ5)
                                  }
                                  };
                                1# -> jump $j4_scQWU ipv30_X9hOv (GHC.Base.Nothing @ String)
                              }
                              } } in
                        case eqAddr# ipv27_X9hOi __NULL of {
                          __DEFAULT ->
                            case ((noinline
                                     @ (IO GHC.IO.Encoding.Types.TextEncoding)
                                     GHC.IO.Encoding.getForeignEncoding)
                                  `cast` (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R
                                          :: (IO GHC.IO.Encoding.Types.TextEncoding :: *)
                                             ~R# (State# RealWorld
                                                  -> (# State# RealWorld,
                                                        GHC.IO.Encoding.Types.TextEncoding #) :: *)))
                                   ipv26_X9hOg
                            of
                            { (# ipv28_icPYR, ipv29_icPYS #) ->
                            case GHC.Foreign.$wpeekCString ipv29_icPYS ipv27_X9hOi ipv28_icPYR
                            of
                            { (# ipv30_X7VPO, ipv31_X7VPQ #) ->
                            jump $j3_scQWZ ipv30_X7VPO (GHC.Base.Just @ String ipv31_X7VPQ)
                            }
                            };
                          1# -> jump $j3_scQWZ ipv26_X9hOg (GHC.Base.Nothing @ String)
                        }
                        } } in
                  case eqAddr# ipv23_X9hO3 __NULL of {
                    __DEFAULT ->
                      case ((noinline
                               @ (IO GHC.IO.Encoding.Types.TextEncoding)
                               GHC.IO.Encoding.getForeignEncoding)
                            `cast` (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R
                                    :: (IO GHC.IO.Encoding.Types.TextEncoding :: *)
                                       ~R# (State# RealWorld
                                            -> (# State# RealWorld,
                                                  GHC.IO.Encoding.Types.TextEncoding #) :: *)))
                             ipv22_X9hO1
                      of
                      { (# ipv24_icPYR, ipv25_icPYS #) ->
                      case GHC.Foreign.$wpeekCString ipv25_icPYS ipv23_X9hO3 ipv24_icPYR
                      of
                      { (# ipv26_X7VPz, ipv27_X7VPB #) ->
                      jump $j2_scQX4 ipv26_X7VPz (GHC.Base.Just @ String ipv27_X7VPB)
                      }
                      };
                    1# -> jump $j2_scQX4 ipv22_X9hO1 (GHC.Base.Nothing @ String)
                  }
                  } } in
            case eqAddr# ipv19_X9hNO __NULL of {
              __DEFAULT ->
                case ((noinline
                         @ (IO GHC.IO.Encoding.Types.TextEncoding)
                         GHC.IO.Encoding.getForeignEncoding)
                      `cast` (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R
                              :: (IO GHC.IO.Encoding.Types.TextEncoding :: *)
                                 ~R# (State# RealWorld
                                      -> (# State# RealWorld,
                                            GHC.IO.Encoding.Types.TextEncoding #) :: *)))
                       ipv18_X9hNM
                of
                { (# ipv20_icPYR, ipv21_icPYS #) ->
                case GHC.Foreign.$wpeekCString ipv21_icPYS ipv19_X9hNO ipv20_icPYR
                of
                { (# ipv22_X7VPk, ipv23_X7VPm #) ->
                jump $j1_scQX9 ipv22_X7VPk (GHC.Base.Just @ String ipv23_X7VPm)
                }
                };
              1# -> jump $j1_scQX9 ipv18_X9hNM (GHC.Base.Nothing @ String)
            }
            } } in
      case eqAddr# ipv15_i9h9O __NULL of {
        __DEFAULT ->
          case ((noinline
                   @ (IO GHC.IO.Encoding.Types.TextEncoding)
                   GHC.IO.Encoding.getForeignEncoding)
                `cast` (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R
                        :: (IO GHC.IO.Encoding.Types.TextEncoding :: *)
                           ~R# (State# RealWorld
                                -> (# State# RealWorld,
                                      GHC.IO.Encoding.Types.TextEncoding #) :: *)))
                 ipv14_i9h9N
          of
          { (# ipv16_icPYR, ipv17_icPYS #) ->
          case GHC.Foreign.$wpeekCString ipv17_icPYS ipv15_i9h9O ipv16_icPYR
          of
          { (# ipv18_X7VP5, ipv19_X7VP7 #) ->
          jump $j_scQXe ipv18_X7VP5 (GHC.Base.Just @ String ipv19_X7VP7)
          }
          };
        1# -> jump $j_scQXe ipv14_i9h9N (GHC.Base.Nothing @ String)
      }
      }
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
getProfFlags :: IO ProfFlags
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.RTS.Flags.getProfFlags1
               `cast` (Sym (GHC.Types.N:IO[0] <ProfFlags>_R)
                       :: (State# RealWorld -> (# State# RealWorld, ProfFlags #) :: *)
                          ~R# (IO ProfFlags :: *))}]
getProfFlags
  = GHC.RTS.Flags.getProfFlags1
    `cast` (Sym (GHC.Types.N:IO[0] <ProfFlags>_R)
            :: (State# RealWorld -> (# State# RealWorld, ProfFlags #) :: *)
               ~R# (IO ProfFlags :: *))

-- RHS size: {terms: 308, types: 331, coercions: 0, joins: 0/0}
GHC.RTS.Flags.getGCFlags5
  :: State# RealWorld
     -> Maybe FilePath -> (# State# RealWorld, GCFlags #)
[GblId,
 Arity=2,
 Str=<S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 462 30}]
GHC.RTS.Flags.getGCFlags5
  = \ (ipv_i7Vb3 [OS=OneShot] :: State# RealWorld)
      (ipv1_i7Vb4 [OS=OneShot] :: Maybe FilePath) ->
      case readWord32OffAddr#
             @ RealWorld (plusAddr# (__label "RtsFlags" (data)) 8#) 0# ipv_i7Vb3
      of
      { (# ipv2_i9hi7, ipv3_i9hi8 #) ->
      case readWord32OffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 12#)
             0#
             ipv2_i9hi7
      of
      { (# ipv4_X9hV1, ipv5_X9hV3 #) ->
      case readWord32OffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 16#)
             0#
             ipv4_X9hV1
      of
      { (# ipv6_X9hVb, ipv7_X9hVd #) ->
      case readWord32OffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 20#)
             0#
             ipv6_X9hVb
      of
      { (# ipv8_X9hVl, ipv9_X9hVn #) ->
      case readWord32OffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 24#)
             0#
             ipv8_X9hVl
      of
      { (# ipv10_X9hVv, ipv11_X9hVx #) ->
      case readWord32OffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 28#)
             0#
             ipv10_X9hVv
      of
      { (# ipv12_X9hVF, ipv13_X9hVH #) ->
      case readWord32OffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 32#)
             0#
             ipv12_X9hVF
      of
      { (# ipv14_X9hVP, ipv15_X9hVR #) ->
      case readWord32OffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 36#)
             0#
             ipv14_X9hVP
      of
      { (# ipv16_X9hVZ, ipv17_X9hW1 #) ->
      case readWord32OffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 40#)
             0#
             ipv16_X9hVZ
      of
      { (# ipv18_X9hW9, ipv19_X9hWb #) ->
      case readWord32OffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 44#)
             0#
             ipv18_X9hW9
      of
      { (# ipv20_X9hWj, ipv21_X9hWl #) ->
      case readWord32OffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 48#)
             0#
             ipv20_X9hWj
      of
      { (# ipv22_X9hWt, ipv23_X9hWv #) ->
      case readWord8OffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 52#)
             0#
             ipv22_X9hWt
      of
      { (# ipv24_i7NWv, ipv25_i7NWw #) ->
      case readDoubleOffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 56#)
             0#
             ipv24_i7NWv
      of
      { (# ipv26_icQ5D, ipv27_icQ5E #) ->
      case readDoubleOffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 64#)
             0#
             ipv26_icQ5D
      of
      { (# ipv28_XcQKw, ipv29_XcQKy #) ->
      case readWord32OffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 72#)
             0#
             ipv28_XcQKw
      of
      { (# ipv30_X9hXa, ipv31_X9hXc #) ->
      case readWord8OffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 76#)
             0#
             ipv30_X9hXa
      of
      { (# ipv32_X7OBI, ipv33_X7OBK #) ->
      case readWord8OffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 77#)
             0#
             ipv32_X7OBI
      of
      { (# ipv34_X7OBV, ipv35_X7OBX #) ->
      case readDoubleOffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 80#)
             0#
             ipv34_X7OBV
      of
      { (# ipv36_XcQLg, ipv37_XcQLi #) ->
      case readWord8OffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 88#)
             0#
             ipv36_XcQLg
      of
      { (# ipv38_X7OCi, ipv39_X7OCk #) ->
      case readWord8OffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 89#)
             0#
             ipv38_X7OCi
      of
      { (# ipv40_X7OCv, ipv41_X7OCx #) ->
      case readWord64OffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 96#)
             0#
             ipv40_X7OCv
      of
      { (# ipv42_i9hsV, ipv43_i9hsW #) ->
      case readWord8OffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 104#)
             0#
             ipv42_i9hsV
      of
      { (# ipv44_X7OCS, ipv45_X7OCU #) ->
      case readWordOffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 120#)
             0#
             ipv44_X7OCS
      of
      { (# ipv46_icQ2n, ipv47_icQ2o #) ->
      case readWordOffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 128#)
             0#
             ipv46_icQ2n
      of
      { (# ipv48_XcQJ7, ipv49_XcQJ9 #) ->
      case readWord8OffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 144#)
             0#
             ipv48_XcQJ7
      of
      { (# ipv50_X7ODp, ipv51_X7ODr #) ->
      case readWordOffAddr#
             @ RealWorld
             (plusAddr# (__label "RtsFlags" (data)) 152#)
             0#
             ipv50_X7ODp
      of
      { (# ipv52_XcQJu, ipv53_XcQJw #) ->
      (# ipv52_XcQJu,
         GHC.RTS.Flags.GCFlags
           ipv1_i7Vb4
           (case word2Int# ipv3_i9hi8 of ds_XcPNN {
              __DEFAULT -> GHC.RTS.Flags.$wlvl3 ds_XcPNN;
              0# -> GHC.RTS.Flags.NoGCStats;
              1# -> GHC.RTS.Flags.CollectGCStats;
              2# -> GHC.RTS.Flags.OneLineGCStats;
              3# -> GHC.RTS.Flags.SummaryGCStats;
              4# -> GHC.RTS.Flags.VerboseGCStats
            })
           (GHC.Word.W32# ipv5_X9hV3)
           (GHC.Word.W32# ipv7_X9hVd)
           (GHC.Word.W32# ipv9_X9hVn)
           (GHC.Word.W32# ipv11_X9hVx)
           (GHC.Word.W32# ipv13_X9hVH)
           (GHC.Word.W32# ipv15_X9hVR)
           (GHC.Word.W32# ipv17_X9hW1)
           (GHC.Word.W32# ipv19_X9hWb)
           (GHC.Word.W32# ipv21_X9hWl)
           (GHC.Word.W32# ipv23_X9hWv)
           (case ipv25_i7NWw of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (GHC.Types.D# ipv27_icQ5E)
           (GHC.Types.D# ipv29_XcQKy)
           (GHC.Word.W32# ipv31_X9hXc)
           (case ipv33_X7OBK of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv35_X7OBX of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (GHC.Types.D# ipv37_XcQLi)
           (case ipv39_X7OCk of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (case ipv41_X7OCx of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (GHC.Word.W64# ipv43_i9hsW)
           (case ipv45_X7OCU of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (GHC.Types.W# ipv47_icQ2o)
           (GHC.Types.W# ipv49_XcQJ9)
           (case ipv51_X7ODr of {
              __DEFAULT -> GHC.Types.True;
              0## -> GHC.Types.False
            })
           (GHC.Types.W# ipv53_XcQJw) #)
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.getGCFlags4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.RTS.Flags.getGCFlags4 = "<filepath>"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.RTS.Flags.getGCFlags3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.RTS.Flags.getGCFlags3
  = unpackCString# GHC.RTS.Flags.getGCFlags4

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.RTS.Flags.getGCFlags2 :: Maybe [Char]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.RTS.Flags.getGCFlags2
  = GHC.Base.Just @ [Char] GHC.RTS.Flags.getGCFlags3

-- RHS size: {terms: 19, types: 16, coercions: 0, joins: 0/0}
GHC.RTS.Flags.getGCFlags1
  :: State# RealWorld -> (# State# RealWorld, GCFlags #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 62 0}]
GHC.RTS.Flags.getGCFlags1
  = \ (s_XcQcG :: State# RealWorld) ->
      case readAddrOffAddr#
             @ RealWorld (__label "RtsFlags" (data)) 0# s_XcQcG
      of
      { (# ipv_i9h9N, ipv1_i9h9O #) ->
      case eqAddr# ipv1_i9h9O __NULL of {
        __DEFAULT ->
          GHC.RTS.Flags.getGCFlags5 ipv_i9h9N GHC.RTS.Flags.getGCFlags2;
        1# ->
          GHC.RTS.Flags.getGCFlags5 ipv_i9h9N (GHC.Base.Nothing @ FilePath)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
getGCFlags :: IO GCFlags
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.RTS.Flags.getGCFlags1
               `cast` (Sym (GHC.Types.N:IO[0] <GCFlags>_R)
                       :: (State# RealWorld -> (# State# RealWorld, GCFlags #) :: *)
                          ~R# (IO GCFlags :: *))}]
getGCFlags
  = GHC.RTS.Flags.getGCFlags1
    `cast` (Sym (GHC.Types.N:IO[0] <GCFlags>_R)
            :: (State# RealWorld -> (# State# RealWorld, GCFlags #) :: *)
               ~R# (IO GCFlags :: *))

-- RHS size: {terms: 45, types: 45, coercions: 0, joins: 0/1}
GHC.RTS.Flags.getTickyFlags1
  :: State# RealWorld -> (# State# RealWorld, TickyFlags #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 85 60}]
GHC.RTS.Flags.getTickyFlags1
  = \ (eta_Xf5 :: State# RealWorld) ->
      let {
        ptr_scQrc [Dmd=<S,U>] :: Addr#
        [LclId]
        ptr_scQrc = plusAddr# (__label "RtsFlags" (data)) 352# } in
      case readWord8OffAddr# @ RealWorld ptr_scQrc 0# eta_Xf5 of
      { (# ipv_i7NWv, ipv1_i7NWw #) ->
      case readAddrOffAddr#
             @ RealWorld (plusAddr# ptr_scQrc 8#) 0# ipv_i7NWv
      of
      { (# ipv2_i9h9N, ipv3_i9h9O #) ->
      case eqAddr# ipv3_i9h9O __NULL of {
        __DEFAULT ->
          (# ipv2_i9h9N,
             GHC.RTS.Flags.TickyFlags
               (case ipv1_i7NWw of {
                  __DEFAULT -> GHC.Types.True;
                  0## -> GHC.Types.False
                })
               GHC.RTS.Flags.getGCFlags2 #);
        1# ->
          (# ipv2_i9h9N,
             GHC.RTS.Flags.TickyFlags
               (case ipv1_i7NWw of {
                  __DEFAULT -> GHC.Types.True;
                  0## -> GHC.Types.False
                })
               (GHC.Base.Nothing @ FilePath) #)
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
getTickyFlags :: IO TickyFlags
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.RTS.Flags.getTickyFlags1
               `cast` (Sym (GHC.Types.N:IO[0] <TickyFlags>_R)
                       :: (State# RealWorld -> (# State# RealWorld, TickyFlags #) :: *)
                          ~R# (IO TickyFlags :: *))}]
getTickyFlags
  = GHC.RTS.Flags.getTickyFlags1
    `cast` (Sym (GHC.Types.N:IO[0] <TickyFlags>_R)
            :: (State# RealWorld -> (# State# RealWorld, TickyFlags #) :: *)
               ~R# (IO TickyFlags :: *))

-- RHS size: {terms: 175, types: 219, coercions: 0, joins: 2/4}
GHC.RTS.Flags.getRTSFlags1
  :: State# RealWorld -> (# State# RealWorld, RTSFlags #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 442 0}]
GHC.RTS.Flags.getRTSFlags1
  = \ (s_XcQcK :: State# RealWorld) ->
      case readAddrOffAddr#
             @ RealWorld (__label "RtsFlags" (data)) 0# s_XcQcK
      of
      { (# ipv_i9h9N, ipv1_i9h9O #) ->
      join {
        $j_scUuv [Dmd=<L,1*C1(C1(U(U,U)))>]
          :: State# RealWorld -> GCFlags -> (# State# RealWorld, RTSFlags #)
        [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []]
        $j_scUuv (ipv2_i7Vb3 [OS=OneShot] :: State# RealWorld)
                 (ipv3_i7Vb4 [OS=OneShot] :: GCFlags)
          = let {
              ptr_scQri [Dmd=<S,U>] :: Addr#
              [LclId]
              ptr_scQri = plusAddr# (__label "RtsFlags" (data)) 160# } in
            case readWord64OffAddr# @ RealWorld ptr_scQri 0# ipv2_i7Vb3 of
            { (# ipv4_i9hsV, ipv5_i9hsW #) ->
            case readIntOffAddr#
                   @ RealWorld (plusAddr# ptr_scQri 8#) 0# ipv4_i9hsV
            of
            { (# ipv6_icQ06, ipv7_icQ07 #) ->
            case GHC.RTS.Flags.getMiscFlags1 ipv6_icQ06 of
            { (# ipv8_XcQC7, ipv9_XcQC9 #) ->
            case GHC.RTS.Flags.getDebugFlags1 ipv8_XcQC7 of
            { (# ipv10_XcQCe, ipv11_XcQCg #) ->
            case readWord32OffAddr#
                   @ RealWorld (__label "RtsFlags" (data)) 0# ipv10_XcQCe
            of
            { (# ipv12_i9hi7, ipv13_i9hi8 #) ->
            case readIntOffAddr#
                   @ RealWorld
                   (plusAddr# (__label "RtsFlags" (data)) 4#)
                   0#
                   ipv12_i9hi7
            of
            { (# ipv14_XcQuM, ipv15_XcQuO #) ->
            case readIntOffAddr#
                   @ RealWorld
                   (plusAddr# (__label "RtsFlags" (data)) 8#)
                   0#
                   ipv14_XcQuM
            of
            { (# ipv16_XcQCK, ipv17_XcQCM #) ->
            case GHC.RTS.Flags.getProfFlags1 ipv16_XcQCK of
            { (# ipv18_XcQCs, ipv19_XcQCu #) ->
            case GHC.RTS.Flags.getRTSFlags2 ipv18_XcQCs of
            { (# ipv20_XcQCz, ipv21_XcQCB #) ->
            let {
              ptr1_scQrc [Dmd=<S,U>] :: Addr#
              [LclId]
              ptr1_scQrc = plusAddr# (__label "RtsFlags" (data)) 352# } in
            case readWord8OffAddr# @ RealWorld ptr1_scQrc 0# ipv20_XcQCz of
            { (# ipv22_i7NWv, ipv23_i7NWw #) ->
            case readAddrOffAddr#
                   @ RealWorld (plusAddr# ptr1_scQrc 8#) 0# ipv22_i7NWv
            of
            { (# ipv24_X9hym, ipv25_X9hyo #) ->
            join {
              $j1_scRPp [Dmd=<C(C(S)),1*C1(C1(U(U,U)))>]
                :: State# RealWorld
                   -> TickyFlags -> (# State# RealWorld, RTSFlags #)
              [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []]
              $j1_scRPp (ipv26_XcR7L [OS=OneShot] :: State# RealWorld)
                        (ipv27_XcQCI [OS=OneShot] :: TickyFlags)
                = case GHC.RTS.Flags.getParFlags1 ipv26_XcR7L of
                  { (# ipv28_XcQCN, ipv29_XcQCP #) ->
                  (# ipv28_XcQCN,
                     GHC.RTS.Flags.RTSFlags
                       ipv3_i7Vb4
                       (GHC.RTS.Flags.ConcFlags
                          (GHC.Word.W64# ipv5_i9hsW) (GHC.Types.I# ipv7_icQ07))
                       ipv9_XcQC9
                       ipv11_XcQCg
                       (GHC.RTS.Flags.CCFlags
                          (case word2Int# ipv13_i9hi8 of ds_XcPND {
                             __DEFAULT -> GHC.RTS.Flags.$wlvl ds_XcPND;
                             0# -> GHC.RTS.Flags.CostCentresNone;
                             1# -> GHC.RTS.Flags.CostCentresSummary;
                             2# -> GHC.RTS.Flags.CostCentresVerbose;
                             3# -> GHC.RTS.Flags.CostCentresAll;
                             4# -> GHC.RTS.Flags.CostCentresJSON
                           })
                          (GHC.Types.I# ipv15_XcQuO)
                          (GHC.Types.I# ipv17_XcQCM))
                       ipv19_XcQCu
                       ipv21_XcQCB
                       ipv27_XcQCI
                       ipv29_XcQCP #)
                  } } in
            case eqAddr# ipv25_X9hyo __NULL of {
              __DEFAULT ->
                jump $j1_scRPp
                  ipv24_X9hym
                  (GHC.RTS.Flags.TickyFlags
                     (case ipv23_i7NWw of {
                        __DEFAULT -> GHC.Types.True;
                        0## -> GHC.Types.False
                      })
                     GHC.RTS.Flags.getGCFlags2);
              1# ->
                jump $j1_scRPp
                  ipv24_X9hym
                  (GHC.RTS.Flags.TickyFlags
                     (case ipv23_i7NWw of {
                        __DEFAULT -> GHC.Types.True;
                        0## -> GHC.Types.False
                      })
                     (GHC.Base.Nothing @ FilePath))
            }
            }
            }
            }
            }
            }
            }
            }
            }
            }
            }
            } } in
      case eqAddr# ipv1_i9h9O __NULL of {
        __DEFAULT ->
          case GHC.RTS.Flags.getGCFlags5 ipv_i9h9N GHC.RTS.Flags.getGCFlags2
          of
          { (# ipv2_i7Vb3, ipv3_i7Vb4 #) ->
          jump $j_scUuv ipv2_i7Vb3 ipv3_i7Vb4
          };
        1# ->
          case GHC.RTS.Flags.getGCFlags5
                 ipv_i9h9N (GHC.Base.Nothing @ FilePath)
          of
          { (# ipv2_i7Vb3, ipv3_i7Vb4 #) ->
          jump $j_scUuv ipv2_i7Vb3 ipv3_i7Vb4
          }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
getRTSFlags :: IO RTSFlags
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.RTS.Flags.getRTSFlags1
               `cast` (Sym (GHC.Types.N:IO[0] <RTSFlags>_R)
                       :: (State# RealWorld -> (# State# RealWorld, RTSFlags #) :: *)
                          ~R# (IO RTSFlags :: *))}]
getRTSFlags
  = GHC.RTS.Flags.getRTSFlags1
    `cast` (Sym (GHC.Types.N:IO[0] <RTSFlags>_R)
            :: (State# RealWorld -> (# State# RealWorld, RTSFlags #) :: *)
               ~R# (IO RTSFlags :: *))


